// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "PlayerOrderEntryCreate.h"
#include "Portal.h"
#include "Source.h"
#include "PlayerOrderCreate.generated.h"

/** @defgroup RHAPI_PlayerOrderCreate RallyHere API Model PlayerOrderCreate
 *  @{
 */

/**
 * @brief Create a new Player Order.  &lt;b&gt;Note: &#x60;use_inventory_bucket&#x60; will be ignored on the PlayerOrderEntryCreate if the &#x60;source&#x60; equals &#x60;CLIENT&#x60;.&lt;/b&gt;
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_PlayerOrderCreate : public FRHAPI_Model
{
    GENERATED_BODY()

    /**
    * @brief Fills this object with data from the passed in JSON
    *
    * @param [in] JsonValue Data from the API call.
    *
    * @return true if parsing of the JSON data was successful.
    */
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

    /**
    * @brief Writes the data from this object into the specified JSON Writer stream
    *
    * @param [in] Writer JSON Writer stream to push .
    */
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /** @brief The source of the Player Order. */
    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    ERHAPI_Source Source_Optional{  };
    /** @brief true if Source_Optional has been set to a value */
    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    bool Source_IsSet{ false };
    /** @brief Gets the value of Source_Optional, regardless of it having been set */
    ERHAPI_Source& GetSource() { return Source_Optional; }
    /** @brief Gets the value of Source_Optional, regardless of it having been set */
    const ERHAPI_Source& GetSource() const { return Source_Optional; }
    /** @brief Gets the value of Source_Optional, if it has been set, otherwise it returns DefaultValue */
    const ERHAPI_Source& GetSource(const ERHAPI_Source& DefaultValue) const { if (Source_IsSet) return Source_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Source_Optional and returns true if it has been set, otherwise returns false */
    bool GetSource(ERHAPI_Source& OutValue) const { if (Source_IsSet) OutValue = Source_Optional; return Source_IsSet; }
    /** @brief Returns a pointer to Source_Optional, if it has been set, otherwise returns nullptr */
    ERHAPI_Source* GetSourceOrNull() { if (Source_IsSet) return &Source_Optional; return nullptr; }
    /** @brief Returns a pointer to Source_Optional, if it has been set, otherwise returns nullptr */
    const ERHAPI_Source* GetSourceOrNull() const { if (Source_IsSet) return &Source_Optional; return nullptr; }
    /** @brief Sets the value of Source_Optional and also sets Source_IsSet to true */
    void SetSource(ERHAPI_Source NewValue) { Source_Optional = NewValue; Source_IsSet = true; }
     /** @brief Clears the value of Source_Optional and sets Source_IsSet to false */
    void ClearSource() { Source_IsSet = false; }

    /** @brief Arbitrary UUID clients can use to track Orders between request to response. */
    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    FGuid ClientOrderRefId_Optional{  };
    /** @brief true if ClientOrderRefId_Optional has been set to a value */
    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    bool ClientOrderRefId_IsSet{ false };
    /** @brief Gets the value of ClientOrderRefId_Optional, regardless of it having been set */
    FGuid& GetClientOrderRefId() { return ClientOrderRefId_Optional; }
    /** @brief Gets the value of ClientOrderRefId_Optional, regardless of it having been set */
    const FGuid& GetClientOrderRefId() const { return ClientOrderRefId_Optional; }
    /** @brief Gets the value of ClientOrderRefId_Optional, if it has been set, otherwise it returns DefaultValue */
    const FGuid& GetClientOrderRefId(const FGuid& DefaultValue) const { if (ClientOrderRefId_IsSet) return ClientOrderRefId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of ClientOrderRefId_Optional and returns true if it has been set, otherwise returns false */
    bool GetClientOrderRefId(FGuid& OutValue) const { if (ClientOrderRefId_IsSet) OutValue = ClientOrderRefId_Optional; return ClientOrderRefId_IsSet; }
    /** @brief Returns a pointer to ClientOrderRefId_Optional, if it has been set, otherwise returns nullptr */
    FGuid* GetClientOrderRefIdOrNull() { if (ClientOrderRefId_IsSet) return &ClientOrderRefId_Optional; return nullptr; }
    /** @brief Returns a pointer to ClientOrderRefId_Optional, if it has been set, otherwise returns nullptr */
    const FGuid* GetClientOrderRefIdOrNull() const { if (ClientOrderRefId_IsSet) return &ClientOrderRefId_Optional; return nullptr; }
    /** @brief Sets the value of ClientOrderRefId_Optional and also sets ClientOrderRefId_IsSet to true */
    void SetClientOrderRefId(FGuid NewValue) { ClientOrderRefId_Optional = NewValue; ClientOrderRefId_IsSet = true; }
     /** @brief Clears the value of ClientOrderRefId_Optional and sets ClientOrderRefId_IsSet to false */
    void ClearClientOrderRefId() { ClientOrderRefId_IsSet = false; }

    /** @brief Portal of the Portal User the Player Order belongs to. */
    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    ERHAPI_Portal PortalId_Optional{  };
    /** @brief true if PortalId_Optional has been set to a value */
    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    bool PortalId_IsSet{ false };
    /** @brief Gets the value of PortalId_Optional, regardless of it having been set */
    ERHAPI_Portal& GetPortalId() { return PortalId_Optional; }
    /** @brief Gets the value of PortalId_Optional, regardless of it having been set */
    const ERHAPI_Portal& GetPortalId() const { return PortalId_Optional; }
    /** @brief Gets the value of PortalId_Optional, if it has been set, otherwise it returns DefaultValue */
    const ERHAPI_Portal& GetPortalId(const ERHAPI_Portal& DefaultValue) const { if (PortalId_IsSet) return PortalId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of PortalId_Optional and returns true if it has been set, otherwise returns false */
    bool GetPortalId(ERHAPI_Portal& OutValue) const { if (PortalId_IsSet) OutValue = PortalId_Optional; return PortalId_IsSet; }
    /** @brief Returns a pointer to PortalId_Optional, if it has been set, otherwise returns nullptr */
    ERHAPI_Portal* GetPortalIdOrNull() { if (PortalId_IsSet) return &PortalId_Optional; return nullptr; }
    /** @brief Returns a pointer to PortalId_Optional, if it has been set, otherwise returns nullptr */
    const ERHAPI_Portal* GetPortalIdOrNull() const { if (PortalId_IsSet) return &PortalId_Optional; return nullptr; }
    /** @brief Sets the value of PortalId_Optional and also sets PortalId_IsSet to true */
    void SetPortalId(ERHAPI_Portal NewValue) { PortalId_Optional = NewValue; PortalId_IsSet = true; }
     /** @brief Clears the value of PortalId_Optional and sets PortalId_IsSet to false */
    void ClearPortalId() { PortalId_IsSet = false; }

    /** @brief Portal User Id for the Player this Player Order belongs to. */
    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    FString PortalUserId_Optional{  };
    /** @brief true if PortalUserId_Optional has been set to a value */
    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    bool PortalUserId_IsSet{ false };
    /** @brief Gets the value of PortalUserId_Optional, regardless of it having been set */
    FString& GetPortalUserId() { return PortalUserId_Optional; }
    /** @brief Gets the value of PortalUserId_Optional, regardless of it having been set */
    const FString& GetPortalUserId() const { return PortalUserId_Optional; }
    /** @brief Gets the value of PortalUserId_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetPortalUserId(const FString& DefaultValue) const { if (PortalUserId_IsSet) return PortalUserId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of PortalUserId_Optional and returns true if it has been set, otherwise returns false */
    bool GetPortalUserId(FString& OutValue) const { if (PortalUserId_IsSet) OutValue = PortalUserId_Optional; return PortalUserId_IsSet; }
    /** @brief Returns a pointer to PortalUserId_Optional, if it has been set, otherwise returns nullptr */
    FString* GetPortalUserIdOrNull() { if (PortalUserId_IsSet) return &PortalUserId_Optional; return nullptr; }
    /** @brief Returns a pointer to PortalUserId_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetPortalUserIdOrNull() const { if (PortalUserId_IsSet) return &PortalUserId_Optional; return nullptr; }
    /** @brief Sets the value of PortalUserId_Optional and also sets PortalUserId_IsSet to true */
    void SetPortalUserId(FString NewValue) { PortalUserId_Optional = NewValue; PortalUserId_IsSet = true; }
     /** @brief Clears the value of PortalUserId_Optional and sets PortalUserId_IsSet to false */
    void ClearPortalUserId() { PortalUserId_IsSet = false; }

    /** @brief Instance Id for the Instance who submits the Player Order. */
    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    FString InstanceId_Optional{  };
    /** @brief true if InstanceId_Optional has been set to a value */
    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    bool InstanceId_IsSet{ false };
    /** @brief Gets the value of InstanceId_Optional, regardless of it having been set */
    FString& GetInstanceId() { return InstanceId_Optional; }
    /** @brief Gets the value of InstanceId_Optional, regardless of it having been set */
    const FString& GetInstanceId() const { return InstanceId_Optional; }
    /** @brief Gets the value of InstanceId_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetInstanceId(const FString& DefaultValue) const { if (InstanceId_IsSet) return InstanceId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of InstanceId_Optional and returns true if it has been set, otherwise returns false */
    bool GetInstanceId(FString& OutValue) const { if (InstanceId_IsSet) OutValue = InstanceId_Optional; return InstanceId_IsSet; }
    /** @brief Returns a pointer to InstanceId_Optional, if it has been set, otherwise returns nullptr */
    FString* GetInstanceIdOrNull() { if (InstanceId_IsSet) return &InstanceId_Optional; return nullptr; }
    /** @brief Returns a pointer to InstanceId_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetInstanceIdOrNull() const { if (InstanceId_IsSet) return &InstanceId_Optional; return nullptr; }
    /** @brief Sets the value of InstanceId_Optional and also sets InstanceId_IsSet to true */
    void SetInstanceId(FString NewValue) { InstanceId_Optional = NewValue; InstanceId_IsSet = true; }
     /** @brief Clears the value of InstanceId_Optional and sets InstanceId_IsSet to false */
    void ClearInstanceId() { InstanceId_IsSet = false; }

    /** @brief Match Id for the Match that generated the Player Order. */
    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    FString MatchId_Optional{  };
    /** @brief true if MatchId_Optional has been set to a value */
    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    bool MatchId_IsSet{ false };
    /** @brief Gets the value of MatchId_Optional, regardless of it having been set */
    FString& GetMatchId() { return MatchId_Optional; }
    /** @brief Gets the value of MatchId_Optional, regardless of it having been set */
    const FString& GetMatchId() const { return MatchId_Optional; }
    /** @brief Gets the value of MatchId_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetMatchId(const FString& DefaultValue) const { if (MatchId_IsSet) return MatchId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of MatchId_Optional and returns true if it has been set, otherwise returns false */
    bool GetMatchId(FString& OutValue) const { if (MatchId_IsSet) OutValue = MatchId_Optional; return MatchId_IsSet; }
    /** @brief Returns a pointer to MatchId_Optional, if it has been set, otherwise returns nullptr */
    FString* GetMatchIdOrNull() { if (MatchId_IsSet) return &MatchId_Optional; return nullptr; }
    /** @brief Returns a pointer to MatchId_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetMatchIdOrNull() const { if (MatchId_IsSet) return &MatchId_Optional; return nullptr; }
    /** @brief Sets the value of MatchId_Optional and also sets MatchId_IsSet to true */
    void SetMatchId(FString NewValue) { MatchId_Optional = NewValue; MatchId_IsSet = true; }
     /** @brief Clears the value of MatchId_Optional and sets MatchId_IsSet to false */
    void ClearMatchId() { MatchId_IsSet = false; }

    /** @brief If an order is a transaction, any failed entries will roll back changes from all other entries. */
    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    bool IsTransaction_Optional{  };
    /** @brief true if IsTransaction_Optional has been set to a value */
    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    bool IsTransaction_IsSet{ false };
    /** @brief Gets the value of IsTransaction_Optional, regardless of it having been set */
    bool& GetIsTransaction() { return IsTransaction_Optional; }
    /** @brief Gets the value of IsTransaction_Optional, regardless of it having been set */
    const bool& GetIsTransaction() const { return IsTransaction_Optional; }
    /** @brief Gets the value of IsTransaction_Optional, if it has been set, otherwise it returns DefaultValue */
    const bool& GetIsTransaction(const bool& DefaultValue) const { if (IsTransaction_IsSet) return IsTransaction_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of IsTransaction_Optional and returns true if it has been set, otherwise returns false */
    bool GetIsTransaction(bool& OutValue) const { if (IsTransaction_IsSet) OutValue = IsTransaction_Optional; return IsTransaction_IsSet; }
    /** @brief Returns a pointer to IsTransaction_Optional, if it has been set, otherwise returns nullptr */
    bool* GetIsTransactionOrNull() { if (IsTransaction_IsSet) return &IsTransaction_Optional; return nullptr; }
    /** @brief Returns a pointer to IsTransaction_Optional, if it has been set, otherwise returns nullptr */
    const bool* GetIsTransactionOrNull() const { if (IsTransaction_IsSet) return &IsTransaction_Optional; return nullptr; }
    /** @brief Sets the value of IsTransaction_Optional and also sets IsTransaction_IsSet to true */
    void SetIsTransaction(bool NewValue) { IsTransaction_Optional = NewValue; IsTransaction_IsSet = true; }
     /** @brief Clears the value of IsTransaction_Optional and sets IsTransaction_IsSet to false */
    void ClearIsTransaction() { IsTransaction_Optional = false; IsTransaction_IsSet = false; }
    /** @brief Returns true if IsTransaction_Optional is set and matches the default value */
    bool IsIsTransactionDefaultValue() const { return IsTransaction_IsSet && IsTransaction_Optional == false; }
    /** @brief Sets the value of IsTransaction_Optional to its default and also sets IsTransaction_IsSet to true */
    void SetIsTransactionToDefault() { IsTransaction_Optional = false; IsTransaction_IsSet = true; }

    /** @brief Unique Identifier for the Order. */
    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    FString OrderId_Optional{  };
    /** @brief true if OrderId_Optional has been set to a value */
    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    bool OrderId_IsSet{ false };
    /** @brief Gets the value of OrderId_Optional, regardless of it having been set */
    FString& GetOrderId() { return OrderId_Optional; }
    /** @brief Gets the value of OrderId_Optional, regardless of it having been set */
    const FString& GetOrderId() const { return OrderId_Optional; }
    /** @brief Gets the value of OrderId_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetOrderId(const FString& DefaultValue) const { if (OrderId_IsSet) return OrderId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of OrderId_Optional and returns true if it has been set, otherwise returns false */
    bool GetOrderId(FString& OutValue) const { if (OrderId_IsSet) OutValue = OrderId_Optional; return OrderId_IsSet; }
    /** @brief Returns a pointer to OrderId_Optional, if it has been set, otherwise returns nullptr */
    FString* GetOrderIdOrNull() { if (OrderId_IsSet) return &OrderId_Optional; return nullptr; }
    /** @brief Returns a pointer to OrderId_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetOrderIdOrNull() const { if (OrderId_IsSet) return &OrderId_Optional; return nullptr; }
    /** @brief Sets the value of OrderId_Optional and also sets OrderId_IsSet to true */
    void SetOrderId(FString NewValue) { OrderId_Optional = NewValue; OrderId_IsSet = true; }
     /** @brief Clears the value of OrderId_Optional and sets OrderId_IsSet to false */
    void ClearOrderId() { OrderId_IsSet = false; }

    /** @brief List of Player Order Entries for the Player Order. */
    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    TArray<FRHAPI_PlayerOrderEntryCreate> Entries{  };
    /** @brief Gets the value of Entries */
    TArray<FRHAPI_PlayerOrderEntryCreate>& GetEntries() { return Entries; }
    /** @brief Gets the value of Entries */
    const TArray<FRHAPI_PlayerOrderEntryCreate>& GetEntries() const { return Entries; }
    /** @brief Sets the value of Entries */
    void SetEntries(TArray<FRHAPI_PlayerOrderEntryCreate> NewValue) { Entries = NewValue;  }
};

/** @} */
