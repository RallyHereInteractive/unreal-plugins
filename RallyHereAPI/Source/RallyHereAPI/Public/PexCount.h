// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "PexCount.generated.h"

/** @defgroup RHAPI_PexCount RallyHere API Model PexCount
 *  @{
 */

/**
 * @brief 
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_PexCount : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	float Count_Optional{  };
	/** @brief true if Count_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Count_IsSet{ false };
	/** @brief true if Count_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Count_IsNull{ false };
	/** @brief Gets the value of Count_Optional, regardless of it having been set */
	FORCEINLINE float& GetCount() { return Count_Optional; }
	/** @brief Gets the value of Count_Optional, regardless of it having been set */
	FORCEINLINE const float& GetCount() const { return Count_Optional; }
	/** @brief Gets the value of Count_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const float& GetCount(const float& DefaultValue) const { if (Count_IsSet) return Count_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Count_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetCount(float& OutValue) const { if (Count_IsSet && !Count_IsNull) OutValue = Count_Optional; return Count_IsSet; }
	/** @brief Returns a pointer to Count_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE float* GetCountOrNull() { if (Count_IsSet) return (Count_IsNull ? nullptr : &Count_Optional); return nullptr; }
	/** @brief Returns a pointer to Count_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const float* GetCountOrNull() const { if (Count_IsSet) return (Count_IsNull ? nullptr : &Count_Optional); return nullptr; }
	/** @brief Sets the value of Count_Optional and also sets Count_IsSet to true */
	FORCEINLINE void SetCount(const float& NewValue) { Count_Optional = NewValue; Count_IsSet = true; Count_IsNull = false; }
	/** @brief Sets the value of Count_Optional and also sets Count_IsSet to true using move semantics */
	FORCEINLINE void SetCount(float&& NewValue) { Count_Optional = NewValue; Count_IsSet = true; Count_IsNull = false; }
	/** @brief Clears the value of Count_Optional and sets Count_IsSet to false */
	void ClearCount() { Count_IsSet = false; Count_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetCountToNull() { Count_IsSet = true; Count_IsNull = true; }
	/** @brief Checks whether Count_Optional is set to null */
	FORCEINLINE bool IsCountNull() const { return Count_IsSet && Count_IsNull; }
};

/** @} */
