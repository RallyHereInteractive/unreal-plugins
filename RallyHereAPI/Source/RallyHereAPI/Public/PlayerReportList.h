// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "PlayerReport.h"
#include "PlayerReportList.generated.h"

/** @defgroup RHAPI_PlayerReportList RallyHere API Model PlayerReportList
 *  @{
 */

/**
 * @brief 
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_PlayerReportList : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	/** @brief A list of player reports */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TArray<FRHAPI_PlayerReport> Reports{  };
	/** @brief Gets the value of Reports */
	TArray<FRHAPI_PlayerReport>& GetReports() { return Reports; }
	/** @brief Gets the value of Reports */
	const TArray<FRHAPI_PlayerReport>& GetReports() const { return Reports; }
	/** @brief Sets the value of Reports */
	void SetReports(const TArray<FRHAPI_PlayerReport>& NewValue) { Reports = NewValue;   }
	/** @brief Sets the value of Reports using move semantics */
	void SetReports(TArray<FRHAPI_PlayerReport>&& NewValue) { Reports = NewValue;   }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString NextCursor_Optional{  };
	/** @brief true if NextCursor_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool NextCursor_IsSet{ false };
	/** @brief true if NextCursor_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool NextCursor_IsNull{ false };
	/** @brief Gets the value of NextCursor_Optional, regardless of it having been set */
	FString& GetNextCursor() { return NextCursor_Optional; }
	/** @brief Gets the value of NextCursor_Optional, regardless of it having been set */
	const FString& GetNextCursor() const { return NextCursor_Optional; }
	/** @brief Gets the value of NextCursor_Optional, if it has been set, otherwise it returns DefaultValue */
	const FString& GetNextCursor(const FString& DefaultValue) const { if (NextCursor_IsSet) return NextCursor_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of NextCursor_Optional and returns true if it has been set, otherwise returns false */
	bool GetNextCursor(FString& OutValue) const { if (NextCursor_IsSet && !NextCursor_IsNull) OutValue = NextCursor_Optional; return NextCursor_IsSet; }
	/** @brief Returns a pointer to NextCursor_Optional, if it has been set, otherwise returns nullptr */
	FString* GetNextCursorOrNull() { if (NextCursor_IsSet) return (NextCursor_IsNull ? nullptr : &NextCursor_Optional); return nullptr; }
	/** @brief Returns a pointer to NextCursor_Optional, if it has been set, otherwise returns nullptr */
	const FString* GetNextCursorOrNull() const { if (NextCursor_IsSet) return (NextCursor_IsNull ? nullptr : &NextCursor_Optional); return nullptr; }
	/** @brief Sets the value of NextCursor_Optional and also sets NextCursor_IsSet to true */
	void SetNextCursor(const FString& NewValue) { NextCursor_Optional = NewValue; NextCursor_IsSet = true; NextCursor_IsNull = false; }
	/** @brief Sets the value of NextCursor_Optional and also sets NextCursor_IsSet to true using move semantics */
	void SetNextCursor(FString&& NewValue) { NextCursor_Optional = NewValue; NextCursor_IsSet = true; NextCursor_IsNull = false; }
	/** @brief Clears the value of NextCursor_Optional and sets NextCursor_IsSet to false */
	void ClearNextCursor() { NextCursor_IsSet = false; NextCursor_IsNull = false; }
	/** @brief Checks whether NextCursor_Optional has been set */
	bool IsNextCursorSet() const { return NextCursor_IsSet; }
	/** @brief Sets the value explicitly to be treated as null */
	void SetNextCursorToNull() { NextCursor_IsSet = true; NextCursor_IsNull = true; }
	/** @brief Checks whether NextCursor_Optional is set to null */
	bool IsNextCursorNull() const { return NextCursor_IsSet && NextCursor_IsNull; }
};

/** @} */
