// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "RestrictionReasonCode.h"
#include "RestrictionType.h"
#include "Restriction.generated.h"

/** @defgroup RHAPI_Restriction RallyHere API Model Restriction
 *  @{
 */

/**
 * @brief Restriction applied to a player
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_Restriction : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	/** @brief Type of restriction */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	ERHAPI_RestrictionType Type{  };
	/** @brief Gets the value of Type */
	FORCEINLINE ERHAPI_RestrictionType& GetType() { return Type; }
	/** @brief Gets the value of Type */
	FORCEINLINE const ERHAPI_RestrictionType& GetType() const { return Type; }
	/** @brief Sets the value of Type */
	FORCEINLINE void SetType(const ERHAPI_RestrictionType& NewValue) { Type = NewValue;   }
	/** @brief Sets the value of Type using move semantics */
	FORCEINLINE void SetType(ERHAPI_RestrictionType&& NewValue) { Type = NewValue;   }

	/** @brief Reason the restriction was applied */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	ERHAPI_RestrictionReasonCode Reason_Optional{  };
	/** @brief true if Reason_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Reason_IsSet{ false };
	/** @brief Gets the value of Reason_Optional, regardless of it having been set */
	FORCEINLINE ERHAPI_RestrictionReasonCode& GetReason() { return Reason_Optional; }
	/** @brief Gets the value of Reason_Optional, regardless of it having been set */
	FORCEINLINE const ERHAPI_RestrictionReasonCode& GetReason() const { return Reason_Optional; }
	/** @brief Gets the value of Reason_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const ERHAPI_RestrictionReasonCode& GetReason(const ERHAPI_RestrictionReasonCode& DefaultValue) const { if (Reason_IsSet) return Reason_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Reason_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetReason(ERHAPI_RestrictionReasonCode& OutValue) const { if (Reason_IsSet) OutValue = Reason_Optional; return Reason_IsSet; }
	/** @brief Returns a pointer to Reason_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE ERHAPI_RestrictionReasonCode* GetReasonOrNull() { if (Reason_IsSet) return (&Reason_Optional); return nullptr; }
	/** @brief Returns a pointer to Reason_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const ERHAPI_RestrictionReasonCode* GetReasonOrNull() const { if (Reason_IsSet) return (&Reason_Optional); return nullptr; }
	/** @brief Sets the value of Reason_Optional and also sets Reason_IsSet to true */
	FORCEINLINE void SetReason(const ERHAPI_RestrictionReasonCode& NewValue) { Reason_Optional = NewValue; Reason_IsSet = true;  }
	/** @brief Sets the value of Reason_Optional and also sets Reason_IsSet to true using move semantics */
	FORCEINLINE void SetReason(ERHAPI_RestrictionReasonCode&& NewValue) { Reason_Optional = NewValue; Reason_IsSet = true;  }
	/** @brief Clears the value of Reason_Optional and sets Reason_IsSet to false */
	void ClearReason() { Reason_IsSet = false;  }

	/** @brief Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FDateTime Expiration_Optional{  };
	/** @brief true if Expiration_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Expiration_IsSet{ false };
	/** @brief Gets the value of Expiration_Optional, regardless of it having been set */
	FORCEINLINE FDateTime& GetExpiration() { return Expiration_Optional; }
	/** @brief Gets the value of Expiration_Optional, regardless of it having been set */
	FORCEINLINE const FDateTime& GetExpiration() const { return Expiration_Optional; }
	/** @brief Gets the value of Expiration_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FDateTime& GetExpiration(const FDateTime& DefaultValue) const { if (Expiration_IsSet) return Expiration_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Expiration_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetExpiration(FDateTime& OutValue) const { if (Expiration_IsSet) OutValue = Expiration_Optional; return Expiration_IsSet; }
	/** @brief Returns a pointer to Expiration_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FDateTime* GetExpirationOrNull() { if (Expiration_IsSet) return (&Expiration_Optional); return nullptr; }
	/** @brief Returns a pointer to Expiration_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FDateTime* GetExpirationOrNull() const { if (Expiration_IsSet) return (&Expiration_Optional); return nullptr; }
	/** @brief Sets the value of Expiration_Optional and also sets Expiration_IsSet to true */
	FORCEINLINE void SetExpiration(const FDateTime& NewValue) { Expiration_Optional = NewValue; Expiration_IsSet = true;  }
	/** @brief Sets the value of Expiration_Optional and also sets Expiration_IsSet to true using move semantics */
	FORCEINLINE void SetExpiration(FDateTime&& NewValue) { Expiration_Optional = NewValue; Expiration_IsSet = true;  }
	/** @brief Clears the value of Expiration_Optional and sets Expiration_IsSet to false */
	void ClearExpiration() { Expiration_IsSet = false;  }
};

/** @} */
