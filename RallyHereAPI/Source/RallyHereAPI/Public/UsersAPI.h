// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereAPIAuthContext.h"
#include "RallyHereAPIHelpers.h"
#include "FastapicommonPlatformsPortal.h"
#include "Platform.h"
#include "CreatePlatformUserRequest.h"
#include "HTTPValidationError.h"
#include "HzApiErrorModel.h"
#include "LoginHistoryPage.h"
#include "LookupResults.h"
#include "MessageOnly.h"
#include "PersonEmailListRequest.h"
#include "PersonEmailListResponse.h"
#include "PersonInfoResponse.h"
#include "PersonOperationRequest.h"
#include "PlatformUserLinkRequest.h"
#include "PlatformUserOperationRequest.h"
#include "PlatformUserResponse.h"
#include "PlayerIdWrapper.h"
#include "PlayerIterateResponse.h"
#include "PlayerLinkedPortalsResponse.h"
#include "PlayerUuidFromId.h"
#include "PurgeRequest.h"
#include "PurgeResponse.h"
#include "Role.h"
#include "SendInBlueContact.h"
#include "UpdatePersonInfoRequest.h"
#include "UserLinkHistory.h"

namespace RallyHereAPI
{
using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

// forward declaration
class FUsersAPI;

/**
 * @brief Create Platform User By Id
 * Create a new platform user from a platform identity.
 * 
 * WARNING: This endpoint does not validate that the provided user ID is valid, and should only be used after validating a user's identity.
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `user:*`, `user:platform:create`
*/
struct RALLYHEREAPI_API FRequest_CreatePlatformUserById : public FRequest
{
	FRequest_CreatePlatformUserById();
	virtual ~FRequest_CreatePlatformUserById() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FRHAPI_CreatePlatformUserRequest CreatePlatformUserRequest;
};

/** The response type for FRequest_CreatePlatformUserById */
struct RALLYHEREAPI_API FResponse_CreatePlatformUserById : public FResponseAccessorTemplate<FRHAPI_PlatformUserResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_PlatformUserResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_CreatePlatformUserById(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_CreatePlatformUserById() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PlatformUserResponse Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PlatformUserResponse& OutContent) const { return TryGetContent<FRHAPI_PlatformUserResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PlatformUserResponse>& OutContent) const { return TryGetContent<FRHAPI_PlatformUserResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PlatformUserResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PlatformUserResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PlatformUserResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PlatformUserResponse>(); }

	// Individual Response Helpers	
	/* Response 201
	Platform user was created successfully
	*/
	bool TryGetContentFor201(FRHAPI_PlatformUserResponse& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 409
	Failed to create platform user.  See error code and description for further details.   Error Codes: - `user_already_exists` - User already exists  
	*/
	bool TryGetContentFor409(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_CreatePlatformUserById */
DECLARE_DELEGATE_OneParam(FDelegate_CreatePlatformUserById, const FResponse_CreatePlatformUserById&);

/** @brief A helper metadata object for CreatePlatformUserById that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_CreatePlatformUserById
{
	/** The request type */
	typedef FRequest_CreatePlatformUserById Request;
	/** The response type */
	typedef FResponse_CreatePlatformUserById Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_CreatePlatformUserById Delegate;
	/** The API object that supports this API call */
	typedef FUsersAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Dequeue Me For Purge
 * Dequeue the active person of the access token if they are queued to be purged. This will only work if the purge has not already begun.
*/
struct RALLYHEREAPI_API FRequest_DequeueMeForPurge : public FRequest
{
	FRequest_DequeueMeForPurge();
	virtual ~FRequest_DequeueMeForPurge() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
};

/** The response type for FRequest_DequeueMeForPurge */
struct RALLYHEREAPI_API FResponse_DequeueMeForPurge : public FResponseAccessorTemplate< FRHAPI_MessageOnly>
{
	typedef FResponseAccessorTemplate< FRHAPI_MessageOnly> Super;

	FResponse_DequeueMeForPurge(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_DequeueMeForPurge() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT

#endif //ALLOW_LEGACY_RESPONSE_CONTENT


	// Individual Response Helpers	
	/* Response 204
	Successful Response
	*/

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_MessageOnly& OutContent) const;

	/* Response 500
	Internal Server Error
	*/
	bool TryGetContentFor500(FRHAPI_MessageOnly& OutContent) const;

};

/** The delegate class for FRequest_DequeueMeForPurge */
DECLARE_DELEGATE_OneParam(FDelegate_DequeueMeForPurge, const FResponse_DequeueMeForPurge&);

/** @brief A helper metadata object for DequeueMeForPurge that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_DequeueMeForPurge
{
	/** The request type */
	typedef FRequest_DequeueMeForPurge Request;
	/** The response type */
	typedef FResponse_DequeueMeForPurge Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_DequeueMeForPurge Delegate;
	/** The API object that supports this API call */
	typedef FUsersAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Dequeue Person For Purge
 * Dequeue a Person that is queued to be purged. This will only work if the purge has not already begun. Requires permission: purge:person:admin
*/
struct RALLYHEREAPI_API FRequest_DequeuePersonForPurge : public FRequest
{
	FRequest_DequeuePersonForPurge();
	virtual ~FRequest_DequeuePersonForPurge() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FGuid PersonId;
};

/** The response type for FRequest_DequeuePersonForPurge */
struct RALLYHEREAPI_API FResponse_DequeuePersonForPurge : public FResponseAccessorTemplate< FRHAPI_MessageOnly, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate< FRHAPI_MessageOnly, FRHAPI_HTTPValidationError> Super;

	FResponse_DequeuePersonForPurge(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_DequeuePersonForPurge() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT

#endif //ALLOW_LEGACY_RESPONSE_CONTENT


	// Individual Response Helpers	
	/* Response 204
	Successful Response
	*/

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_MessageOnly& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

	/* Response 500
	Internal Server Error
	*/
	bool TryGetContentFor500(FRHAPI_MessageOnly& OutContent) const;

};

/** The delegate class for FRequest_DequeuePersonForPurge */
DECLARE_DELEGATE_OneParam(FDelegate_DequeuePersonForPurge, const FResponse_DequeuePersonForPurge&);

/** @brief A helper metadata object for DequeuePersonForPurge that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_DequeuePersonForPurge
{
	/** The request type */
	typedef FRequest_DequeuePersonForPurge Request;
	/** The response type */
	typedef FResponse_DequeuePersonForPurge Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_DequeuePersonForPurge Delegate;
	/** The API object that supports this API call */
	typedef FUsersAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Disable Cross Progression
 * Disable Cross Progression for a person.  While cross progression is disabled, 
 * all linked users who login will receive a token for the player associated with their platform user.
 *     
 * The person is found using the following priority:
 * 
 * 1. If the `person_id` is provided directly
 * 2. If the `platform` and `platform_user_id` are provided, the `person_id` of that platform user is used.
 * 3. If the Authorization header contains a user token, the platform and platform user id from the token are used and the person associated with that user is used.
 * 
 * If you are modifying a user outside of your person, Required Permissions:
 * 
 * - For any user (including themselves) any of: `user:*`, `user:modify:any`
 * 
 * 
 * 
 * NOTE: Whenever you change the link or cross progression status of a user, it is recommended to 
 * refresh their access token.  Each token does container user information, which may be incorrect after a link or 
 * cross progression change.  There is no guarantee that calling other endpoints will operate on the correct user
 * until the token has been refreshed.
*/
struct RALLYHEREAPI_API FRequest_DisableCrossProgression : public FRequest
{
	FRequest_DisableCrossProgression();
	virtual ~FRequest_DisableCrossProgression() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	TOptional<FRHAPI_PersonOperationRequest> PersonOperationRequest;
};

/** The response type for FRequest_DisableCrossProgression */
struct RALLYHEREAPI_API FResponse_DisableCrossProgression : public FResponseAccessorTemplate< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_DisableCrossProgression(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_DisableCrossProgression() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT

#endif //ALLOW_LEGACY_RESPONSE_CONTENT


	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/

	/* Response 400
	Request inputs are not valid   Error Codes: - `account_not_found` - User Account not found - `cannot_modify_person` - You have insufficient permissions to modify this person - `invalid_token_claims` - Token has missing/invalid claims.  Are you using a non-user token on a user endpoint? - `not_cross_progression_player` - Player is not the cross progression player 
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_DisableCrossProgression */
DECLARE_DELEGATE_OneParam(FDelegate_DisableCrossProgression, const FResponse_DisableCrossProgression&);

/** @brief A helper metadata object for DisableCrossProgression that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_DisableCrossProgression
{
	/** The request type */
	typedef FRequest_DisableCrossProgression Request;
	/** The response type */
	typedef FResponse_DisableCrossProgression Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_DisableCrossProgression Delegate;
	/** The API object that supports this API call */
	typedef FUsersAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Enable Cross Progression
 * Enable Cross Progression for the player associated with the platform identity.  
 * While cross progression is enabled, all linked users who login will receive a token for the player with cross 
 * progression enabled (instead of a token for their platform user's player).
 * 
 * If an identity is not provided, the identity in the token will be used.
 * 
 * If you are modifying a user outside of your person, Required Permissions:
 * 
 * - For any user (including themselves) any of: `user:*`, `user:modify:any`
 * 
 * 
 * 
 * NOTE: Whenever you change the link or cross progression status of a user, it is recommended to 
 * refresh their access token.  Each token does container user information, which may be incorrect after a link or 
 * cross progression change.  There is no guarantee that calling other endpoints will operate on the correct user
 * until the token has been refreshed.
*/
struct RALLYHEREAPI_API FRequest_EnableCrossProgression : public FRequest
{
	FRequest_EnableCrossProgression();
	virtual ~FRequest_EnableCrossProgression() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	TOptional<FRHAPI_PlatformUserOperationRequest> PlatformUserOperationRequest;
};

/** The response type for FRequest_EnableCrossProgression */
struct RALLYHEREAPI_API FResponse_EnableCrossProgression : public FResponseAccessorTemplate< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_EnableCrossProgression(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_EnableCrossProgression() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT

#endif //ALLOW_LEGACY_RESPONSE_CONTENT


	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/

	/* Response 400
	Request inputs are not valid   Error Codes: - `account_not_found` - User Account not found - `already_cross_progression_player` - Player is already the cross progression player - `cannot_modify_person` - You have insufficient permissions to modify this person - `invalid_token_claims` - Token has missing/invalid claims.  Are you using a non-user token on a user endpoint? 
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_EnableCrossProgression */
DECLARE_DELEGATE_OneParam(FDelegate_EnableCrossProgression, const FResponse_EnableCrossProgression&);

/** @brief A helper metadata object for EnableCrossProgression that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_EnableCrossProgression
{
	/** The request type */
	typedef FRequest_EnableCrossProgression Request;
	/** The response type */
	typedef FResponse_EnableCrossProgression Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_EnableCrossProgression Delegate;
	/** The API object that supports this API call */
	typedef FUsersAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Find Platform User By Id
 * Find an existing platform user with their platform identity.
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `user:*`, `user:platform:read`
*/
struct RALLYHEREAPI_API FRequest_FindPlatformUserById : public FRequest
{
	FRequest_FindPlatformUserById();
	virtual ~FRequest_FindPlatformUserById() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	/* Platform to search */
	ERHAPI_Platform Platform;
	/* Platform user ID to search for */
	FString PlatformUserId;
};

/** The response type for FRequest_FindPlatformUserById */
struct RALLYHEREAPI_API FResponse_FindPlatformUserById : public FResponseAccessorTemplate<FRHAPI_PlatformUserResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_PlatformUserResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_FindPlatformUserById(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_FindPlatformUserById() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PlatformUserResponse Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PlatformUserResponse& OutContent) const { return TryGetContent<FRHAPI_PlatformUserResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PlatformUserResponse>& OutContent) const { return TryGetContent<FRHAPI_PlatformUserResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PlatformUserResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PlatformUserResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PlatformUserResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PlatformUserResponse>(); }

	// Individual Response Helpers	
	/* Response 200
	Platform user was found successfully
	*/
	bool TryGetContentFor200(FRHAPI_PlatformUserResponse& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Failed to find platform user.  See error code and description for further details.   Error Codes: - `user_not_found` - User not found  
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_FindPlatformUserById */
DECLARE_DELEGATE_OneParam(FDelegate_FindPlatformUserById, const FResponse_FindPlatformUserById&);

/** @brief A helper metadata object for FindPlatformUserById that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_FindPlatformUserById
{
	/** The request type */
	typedef FRequest_FindPlatformUserById Request;
	/** The response type */
	typedef FResponse_FindPlatformUserById Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_FindPlatformUserById Delegate;
	/** The API object that supports this API call */
	typedef FUsersAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get All Roles
 * Get all current roles. Including their custom_data and login_loot_rewards.
*/
struct RALLYHEREAPI_API FRequest_GetAllRoles : public FRequest
{
	FRequest_GetAllRoles();
	virtual ~FRequest_GetAllRoles() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
};

/** The response type for FRequest_GetAllRoles */
struct RALLYHEREAPI_API FResponse_GetAllRoles : public FResponseAccessorTemplate<TArray<FRHAPI_Role>, FRHAPI_HzApiErrorModel>
{
	typedef FResponseAccessorTemplate<TArray<FRHAPI_Role>, FRHAPI_HzApiErrorModel> Super;

	FResponse_GetAllRoles(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetAllRoles() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	TArray<FRHAPI_Role> Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TArray<FRHAPI_Role>& OutContent) const { return TryGetContent<TArray<FRHAPI_Role>>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<TArray<FRHAPI_Role>>& OutContent) const { return TryGetContent<TArray<FRHAPI_Role>>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const TArray<FRHAPI_Role>* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<TArray<FRHAPI_Role>>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<TArray<FRHAPI_Role>> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<TArray<FRHAPI_Role>>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(TArray<FRHAPI_Role>& OutContent) const;

	/* Response 400
	Bad Request
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

};

/** The delegate class for FRequest_GetAllRoles */
DECLARE_DELEGATE_OneParam(FDelegate_GetAllRoles, const FResponse_GetAllRoles&);

/** @brief A helper metadata object for GetAllRoles that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetAllRoles
{
	/** The request type */
	typedef FRequest_GetAllRoles Request;
	/** The response type */
	typedef FResponse_GetAllRoles Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetAllRoles Delegate;
	/** The API object that supports this API call */
	typedef FUsersAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Link History
 * Get the Link history for a given user
*/
struct RALLYHEREAPI_API FRequest_GetLinkHistory : public FRequest
{
	FRequest_GetLinkHistory();
	virtual ~FRequest_GetLinkHistory() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	/* The player UUID to audit */
	TOptional<FGuid> PlayerUuid;
	/* The person ID to audit */
	TOptional<FGuid> PersonId;
	/* The platform to audit */
	TOptional<ERHAPI_Platform> Platform;
	/* The platform user ID to audit */
	TOptional<FString> PlatformUserId;
	/* Token to retrieve the next page of results */
	TOptional<FString> ContinuationToken;
};

/** The response type for FRequest_GetLinkHistory */
struct RALLYHEREAPI_API FResponse_GetLinkHistory : public FResponseAccessorTemplate<FRHAPI_UserLinkHistory, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_UserLinkHistory, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetLinkHistory(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetLinkHistory() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_UserLinkHistory Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_UserLinkHistory& OutContent) const { return TryGetContent<FRHAPI_UserLinkHistory>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_UserLinkHistory>& OutContent) const { return TryGetContent<FRHAPI_UserLinkHistory>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_UserLinkHistory* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_UserLinkHistory>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_UserLinkHistory> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_UserLinkHistory>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_UserLinkHistory& OutContent) const;

	/* Response 400
	Bad Request
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetLinkHistory */
DECLARE_DELEGATE_OneParam(FDelegate_GetLinkHistory, const FResponse_GetLinkHistory&);

/** @brief A helper metadata object for GetLinkHistory that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetLinkHistory
{
	/** The request type */
	typedef FRequest_GetLinkHistory Request;
	/** The response type */
	typedef FResponse_GetLinkHistory Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetLinkHistory Delegate;
	/** The API object that supports this API call */
	typedef FUsersAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Login History
 * Get the Login history for a given user
*/
struct RALLYHEREAPI_API FRequest_GetLoginHistory : public FRequest
{
	FRequest_GetLoginHistory();
	virtual ~FRequest_GetLoginHistory() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	/* The player UUID to audit */
	TOptional<FGuid> PlayerUuid;
	/* The person ID to audit */
	TOptional<FGuid> PersonId;
	/* The platform to audit */
	TOptional<ERHAPI_Platform> Platform;
	/* The platform user ID to audit */
	TOptional<FString> PlatformUserId;
	/* Token to retrieve the next page of results */
	TOptional<FString> ContinuationToken;
};

/** The response type for FRequest_GetLoginHistory */
struct RALLYHEREAPI_API FResponse_GetLoginHistory : public FResponseAccessorTemplate<FRHAPI_LoginHistoryPage, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_LoginHistoryPage, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetLoginHistory(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetLoginHistory() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_LoginHistoryPage Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_LoginHistoryPage& OutContent) const { return TryGetContent<FRHAPI_LoginHistoryPage>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_LoginHistoryPage>& OutContent) const { return TryGetContent<FRHAPI_LoginHistoryPage>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_LoginHistoryPage* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_LoginHistoryPage>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_LoginHistoryPage> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_LoginHistoryPage>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_LoginHistoryPage& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetLoginHistory */
DECLARE_DELEGATE_OneParam(FDelegate_GetLoginHistory, const FResponse_GetLoginHistory&);

/** @brief A helper metadata object for GetLoginHistory that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetLoginHistory
{
	/** The request type */
	typedef FRequest_GetLoginHistory Request;
	/** The response type */
	typedef FResponse_GetLoginHistory Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetLoginHistory Delegate;
	/** The API object that supports this API call */
	typedef FUsersAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Person
 * Get information for a person.
*/
struct RALLYHEREAPI_API FRequest_GetPerson : public FRequest
{
	FRequest_GetPerson();
	virtual ~FRequest_GetPerson() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FGuid PersonId;
};

/** The response type for FRequest_GetPerson */
struct RALLYHEREAPI_API FResponse_GetPerson : public FResponseAccessorTemplate<FRHAPI_PersonInfoResponse, FRHAPI_MessageOnly, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_PersonInfoResponse, FRHAPI_MessageOnly, FRHAPI_HTTPValidationError> Super;

	FResponse_GetPerson(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetPerson() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PersonInfoResponse Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PersonInfoResponse& OutContent) const { return TryGetContent<FRHAPI_PersonInfoResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PersonInfoResponse>& OutContent) const { return TryGetContent<FRHAPI_PersonInfoResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PersonInfoResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PersonInfoResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PersonInfoResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PersonInfoResponse>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PersonInfoResponse& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_MessageOnly& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

	/* Response 500
	Internal Server Error
	*/
	bool TryGetContentFor500(FRHAPI_MessageOnly& OutContent) const;

};

/** The delegate class for FRequest_GetPerson */
DECLARE_DELEGATE_OneParam(FDelegate_GetPerson, const FResponse_GetPerson&);

/** @brief A helper metadata object for GetPerson that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetPerson
{
	/** The request type */
	typedef FRequest_GetPerson Request;
	/** The response type */
	typedef FResponse_GetPerson Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetPerson Delegate;
	/** The API object that supports this API call */
	typedef FUsersAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Person Email List
 * Get the email list ids for a person
*/
struct RALLYHEREAPI_API FRequest_GetPersonEmailList : public FRequest
{
	FRequest_GetPersonEmailList();
	virtual ~FRequest_GetPersonEmailList() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FGuid PersonId;
};

/** The response type for FRequest_GetPersonEmailList */
struct RALLYHEREAPI_API FResponse_GetPersonEmailList : public FResponseAccessorTemplate<FRHAPI_PersonEmailListResponse, FRHAPI_MessageOnly, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_PersonEmailListResponse, FRHAPI_MessageOnly, FRHAPI_HTTPValidationError> Super;

	FResponse_GetPersonEmailList(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetPersonEmailList() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PersonEmailListResponse Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PersonEmailListResponse& OutContent) const { return TryGetContent<FRHAPI_PersonEmailListResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PersonEmailListResponse>& OutContent) const { return TryGetContent<FRHAPI_PersonEmailListResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PersonEmailListResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PersonEmailListResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PersonEmailListResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PersonEmailListResponse>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PersonEmailListResponse& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_MessageOnly& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

	/* Response 500
	Internal Server Error
	*/
	bool TryGetContentFor500(FRHAPI_MessageOnly& OutContent) const;

};

/** The delegate class for FRequest_GetPersonEmailList */
DECLARE_DELEGATE_OneParam(FDelegate_GetPersonEmailList, const FResponse_GetPersonEmailList&);

/** @brief A helper metadata object for GetPersonEmailList that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetPersonEmailList
{
	/** The request type */
	typedef FRequest_GetPersonEmailList Request;
	/** The response type */
	typedef FResponse_GetPersonEmailList Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetPersonEmailList Delegate;
	/** The API object that supports this API call */
	typedef FUsersAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Person Email List For Self
 * Get the email list ids for a person on the access token
*/
struct RALLYHEREAPI_API FRequest_GetPersonEmailListForSelf : public FRequest
{
	FRequest_GetPersonEmailListForSelf();
	virtual ~FRequest_GetPersonEmailListForSelf() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
};

/** The response type for FRequest_GetPersonEmailListForSelf */
struct RALLYHEREAPI_API FResponse_GetPersonEmailListForSelf : public FResponseAccessorTemplate<FRHAPI_PersonEmailListResponse, FRHAPI_MessageOnly>
{
	typedef FResponseAccessorTemplate<FRHAPI_PersonEmailListResponse, FRHAPI_MessageOnly> Super;

	FResponse_GetPersonEmailListForSelf(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetPersonEmailListForSelf() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PersonEmailListResponse Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PersonEmailListResponse& OutContent) const { return TryGetContent<FRHAPI_PersonEmailListResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PersonEmailListResponse>& OutContent) const { return TryGetContent<FRHAPI_PersonEmailListResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PersonEmailListResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PersonEmailListResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PersonEmailListResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PersonEmailListResponse>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PersonEmailListResponse& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_MessageOnly& OutContent) const;

	/* Response 500
	Internal Server Error
	*/
	bool TryGetContentFor500(FRHAPI_MessageOnly& OutContent) const;

};

/** The delegate class for FRequest_GetPersonEmailListForSelf */
DECLARE_DELEGATE_OneParam(FDelegate_GetPersonEmailListForSelf, const FResponse_GetPersonEmailListForSelf&);

/** @brief A helper metadata object for GetPersonEmailListForSelf that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetPersonEmailListForSelf
{
	/** The request type */
	typedef FRequest_GetPersonEmailListForSelf Request;
	/** The response type */
	typedef FResponse_GetPersonEmailListForSelf Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetPersonEmailListForSelf Delegate;
	/** The API object that supports this API call */
	typedef FUsersAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Person For Self
 * Get information for the person on the access token.
*/
struct RALLYHEREAPI_API FRequest_GetPersonForSelf : public FRequest
{
	FRequest_GetPersonForSelf();
	virtual ~FRequest_GetPersonForSelf() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
};

/** The response type for FRequest_GetPersonForSelf */
struct RALLYHEREAPI_API FResponse_GetPersonForSelf : public FResponseAccessorTemplate<FRHAPI_PersonInfoResponse, FRHAPI_MessageOnly>
{
	typedef FResponseAccessorTemplate<FRHAPI_PersonInfoResponse, FRHAPI_MessageOnly> Super;

	FResponse_GetPersonForSelf(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetPersonForSelf() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PersonInfoResponse Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PersonInfoResponse& OutContent) const { return TryGetContent<FRHAPI_PersonInfoResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PersonInfoResponse>& OutContent) const { return TryGetContent<FRHAPI_PersonInfoResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PersonInfoResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PersonInfoResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PersonInfoResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PersonInfoResponse>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PersonInfoResponse& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_MessageOnly& OutContent) const;

	/* Response 500
	Internal Server Error
	*/
	bool TryGetContentFor500(FRHAPI_MessageOnly& OutContent) const;

};

/** The delegate class for FRequest_GetPersonForSelf */
DECLARE_DELEGATE_OneParam(FDelegate_GetPersonForSelf, const FResponse_GetPersonForSelf&);

/** @brief A helper metadata object for GetPersonForSelf that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetPersonForSelf
{
	/** The request type */
	typedef FRequest_GetPersonForSelf Request;
	/** The response type */
	typedef FResponse_GetPersonForSelf Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetPersonForSelf Delegate;
	/** The API object that supports this API call */
	typedef FUsersAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Player Id From Player Uuid
 * Get a player's id from their uuid.
*/
struct RALLYHEREAPI_API FRequest_GetPlayerIdFromPlayerUuid : public FRequest
{
	FRequest_GetPlayerIdFromPlayerUuid();
	virtual ~FRequest_GetPlayerIdFromPlayerUuid() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FGuid PlayerUuid;
};

/** The response type for FRequest_GetPlayerIdFromPlayerUuid */
struct RALLYHEREAPI_API FResponse_GetPlayerIdFromPlayerUuid : public FResponseAccessorTemplate<FRHAPI_PlayerIdWrapper, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_PlayerIdWrapper, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetPlayerIdFromPlayerUuid(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetPlayerIdFromPlayerUuid() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PlayerIdWrapper Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PlayerIdWrapper& OutContent) const { return TryGetContent<FRHAPI_PlayerIdWrapper>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PlayerIdWrapper>& OutContent) const { return TryGetContent<FRHAPI_PlayerIdWrapper>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PlayerIdWrapper* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PlayerIdWrapper>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PlayerIdWrapper> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PlayerIdWrapper>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PlayerIdWrapper& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetPlayerIdFromPlayerUuid */
DECLARE_DELEGATE_OneParam(FDelegate_GetPlayerIdFromPlayerUuid, const FResponse_GetPlayerIdFromPlayerUuid&);

/** @brief A helper metadata object for GetPlayerIdFromPlayerUuid that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetPlayerIdFromPlayerUuid
{
	/** The request type */
	typedef FRequest_GetPlayerIdFromPlayerUuid Request;
	/** The response type */
	typedef FResponse_GetPlayerIdFromPlayerUuid Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetPlayerIdFromPlayerUuid Delegate;
	/** The API object that supports this API call */
	typedef FUsersAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Player Id From Player Uuid For Self
 * Get a player's id from their uuid for the active player on the access token.
*/
struct RALLYHEREAPI_API FRequest_GetPlayerIdFromPlayerUuidForSelf : public FRequest
{
	FRequest_GetPlayerIdFromPlayerUuidForSelf();
	virtual ~FRequest_GetPlayerIdFromPlayerUuidForSelf() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
};

/** The response type for FRequest_GetPlayerIdFromPlayerUuidForSelf */
struct RALLYHEREAPI_API FResponse_GetPlayerIdFromPlayerUuidForSelf : public FResponseAccessorTemplate<FRHAPI_PlayerIdWrapper, FRHAPI_HzApiErrorModel>
{
	typedef FResponseAccessorTemplate<FRHAPI_PlayerIdWrapper, FRHAPI_HzApiErrorModel> Super;

	FResponse_GetPlayerIdFromPlayerUuidForSelf(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetPlayerIdFromPlayerUuidForSelf() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PlayerIdWrapper Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PlayerIdWrapper& OutContent) const { return TryGetContent<FRHAPI_PlayerIdWrapper>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PlayerIdWrapper>& OutContent) const { return TryGetContent<FRHAPI_PlayerIdWrapper>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PlayerIdWrapper* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PlayerIdWrapper>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PlayerIdWrapper> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PlayerIdWrapper>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PlayerIdWrapper& OutContent) const;

	/* Response 400
	Bad Request
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

};

/** The delegate class for FRequest_GetPlayerIdFromPlayerUuidForSelf */
DECLARE_DELEGATE_OneParam(FDelegate_GetPlayerIdFromPlayerUuidForSelf, const FResponse_GetPlayerIdFromPlayerUuidForSelf&);

/** @brief A helper metadata object for GetPlayerIdFromPlayerUuidForSelf that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetPlayerIdFromPlayerUuidForSelf
{
	/** The request type */
	typedef FRequest_GetPlayerIdFromPlayerUuidForSelf Request;
	/** The response type */
	typedef FResponse_GetPlayerIdFromPlayerUuidForSelf Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetPlayerIdFromPlayerUuidForSelf Delegate;
	/** The API object that supports this API call */
	typedef FUsersAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Player Linked Portals
 * Get a player's linked portals.
*/
struct RALLYHEREAPI_API FRequest_GetPlayerLinkedPortals : public FRequest
{
	FRequest_GetPlayerLinkedPortals();
	virtual ~FRequest_GetPlayerLinkedPortals() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	int32 PlayerId = 0;
};

/** The response type for FRequest_GetPlayerLinkedPortals */
struct RALLYHEREAPI_API FResponse_GetPlayerLinkedPortals : public FResponseAccessorTemplate<FRHAPI_PlayerLinkedPortalsResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_PlayerLinkedPortalsResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetPlayerLinkedPortals(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetPlayerLinkedPortals() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PlayerLinkedPortalsResponse Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PlayerLinkedPortalsResponse& OutContent) const { return TryGetContent<FRHAPI_PlayerLinkedPortalsResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PlayerLinkedPortalsResponse>& OutContent) const { return TryGetContent<FRHAPI_PlayerLinkedPortalsResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PlayerLinkedPortalsResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PlayerLinkedPortalsResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PlayerLinkedPortalsResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PlayerLinkedPortalsResponse>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PlayerLinkedPortalsResponse& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetPlayerLinkedPortals */
DECLARE_DELEGATE_OneParam(FDelegate_GetPlayerLinkedPortals, const FResponse_GetPlayerLinkedPortals&);

/** @brief A helper metadata object for GetPlayerLinkedPortals that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetPlayerLinkedPortals
{
	/** The request type */
	typedef FRequest_GetPlayerLinkedPortals Request;
	/** The response type */
	typedef FResponse_GetPlayerLinkedPortals Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetPlayerLinkedPortals Delegate;
	/** The API object that supports this API call */
	typedef FUsersAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Player Links
 * Get a player's linked portals.
*/
struct RALLYHEREAPI_API FRequest_GetPlayerLinks : public FRequest
{
	FRequest_GetPlayerLinks();
	virtual ~FRequest_GetPlayerLinks() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FGuid PlayerUuid;
};

/** The response type for FRequest_GetPlayerLinks */
struct RALLYHEREAPI_API FResponse_GetPlayerLinks : public FResponseAccessorTemplate<FRHAPI_PlayerLinkedPortalsResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_PlayerLinkedPortalsResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetPlayerLinks(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetPlayerLinks() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PlayerLinkedPortalsResponse Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PlayerLinkedPortalsResponse& OutContent) const { return TryGetContent<FRHAPI_PlayerLinkedPortalsResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PlayerLinkedPortalsResponse>& OutContent) const { return TryGetContent<FRHAPI_PlayerLinkedPortalsResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PlayerLinkedPortalsResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PlayerLinkedPortalsResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PlayerLinkedPortalsResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PlayerLinkedPortalsResponse>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PlayerLinkedPortalsResponse& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetPlayerLinks */
DECLARE_DELEGATE_OneParam(FDelegate_GetPlayerLinks, const FResponse_GetPlayerLinks&);

/** @brief A helper metadata object for GetPlayerLinks that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetPlayerLinks
{
	/** The request type */
	typedef FRequest_GetPlayerLinks Request;
	/** The response type */
	typedef FResponse_GetPlayerLinks Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetPlayerLinks Delegate;
	/** The API object that supports this API call */
	typedef FUsersAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Player Links For Self
 * Get a player's linked portals for the active player on the access token.
*/
struct RALLYHEREAPI_API FRequest_GetPlayerLinksForSelf : public FRequest
{
	FRequest_GetPlayerLinksForSelf();
	virtual ~FRequest_GetPlayerLinksForSelf() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
};

/** The response type for FRequest_GetPlayerLinksForSelf */
struct RALLYHEREAPI_API FResponse_GetPlayerLinksForSelf : public FResponseAccessorTemplate<FRHAPI_PlayerLinkedPortalsResponse, FRHAPI_HzApiErrorModel>
{
	typedef FResponseAccessorTemplate<FRHAPI_PlayerLinkedPortalsResponse, FRHAPI_HzApiErrorModel> Super;

	FResponse_GetPlayerLinksForSelf(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetPlayerLinksForSelf() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PlayerLinkedPortalsResponse Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PlayerLinkedPortalsResponse& OutContent) const { return TryGetContent<FRHAPI_PlayerLinkedPortalsResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PlayerLinkedPortalsResponse>& OutContent) const { return TryGetContent<FRHAPI_PlayerLinkedPortalsResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PlayerLinkedPortalsResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PlayerLinkedPortalsResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PlayerLinkedPortalsResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PlayerLinkedPortalsResponse>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PlayerLinkedPortalsResponse& OutContent) const;

	/* Response 400
	Bad Request
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

};

/** The delegate class for FRequest_GetPlayerLinksForSelf */
DECLARE_DELEGATE_OneParam(FDelegate_GetPlayerLinksForSelf, const FResponse_GetPlayerLinksForSelf&);

/** @brief A helper metadata object for GetPlayerLinksForSelf that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetPlayerLinksForSelf
{
	/** The request type */
	typedef FRequest_GetPlayerLinksForSelf Request;
	/** The response type */
	typedef FResponse_GetPlayerLinksForSelf Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetPlayerLinksForSelf Delegate;
	/** The API object that supports this API call */
	typedef FUsersAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Player Uuid From Player Id
 * Get a player's uuid from their id.
*/
struct RALLYHEREAPI_API FRequest_GetPlayerUuidFromPlayerId : public FRequest
{
	FRequest_GetPlayerUuidFromPlayerId();
	virtual ~FRequest_GetPlayerUuidFromPlayerId() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	int32 PlayerId = 0;
};

/** The response type for FRequest_GetPlayerUuidFromPlayerId */
struct RALLYHEREAPI_API FResponse_GetPlayerUuidFromPlayerId : public FResponseAccessorTemplate<FGuid, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FGuid, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetPlayerUuidFromPlayerId(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetPlayerUuidFromPlayerId() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FGuid Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FGuid& OutContent) const { return TryGetContent<FGuid>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FGuid>& OutContent) const { return TryGetContent<FGuid>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FGuid* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FGuid>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FGuid> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FGuid>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FGuid& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetPlayerUuidFromPlayerId */
DECLARE_DELEGATE_OneParam(FDelegate_GetPlayerUuidFromPlayerId, const FResponse_GetPlayerUuidFromPlayerId&);

/** @brief A helper metadata object for GetPlayerUuidFromPlayerId that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetPlayerUuidFromPlayerId
{
	/** The request type */
	typedef FRequest_GetPlayerUuidFromPlayerId Request;
	/** The response type */
	typedef FResponse_GetPlayerUuidFromPlayerId Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetPlayerUuidFromPlayerId Delegate;
	/** The API object that supports this API call */
	typedef FUsersAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Player Uuid From Player Id For Self
 * Get a player's uuid from their id for the active player on the access token.
*/
struct RALLYHEREAPI_API FRequest_GetPlayerUuidFromPlayerIdForSelf : public FRequest
{
	FRequest_GetPlayerUuidFromPlayerIdForSelf();
	virtual ~FRequest_GetPlayerUuidFromPlayerIdForSelf() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
};

/** The response type for FRequest_GetPlayerUuidFromPlayerIdForSelf */
struct RALLYHEREAPI_API FResponse_GetPlayerUuidFromPlayerIdForSelf : public FResponseAccessorTemplate<FGuid, FRHAPI_HzApiErrorModel>
{
	typedef FResponseAccessorTemplate<FGuid, FRHAPI_HzApiErrorModel> Super;

	FResponse_GetPlayerUuidFromPlayerIdForSelf(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetPlayerUuidFromPlayerIdForSelf() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FGuid Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FGuid& OutContent) const { return TryGetContent<FGuid>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FGuid>& OutContent) const { return TryGetContent<FGuid>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FGuid* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FGuid>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FGuid> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FGuid>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FGuid& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

};

/** The delegate class for FRequest_GetPlayerUuidFromPlayerIdForSelf */
DECLARE_DELEGATE_OneParam(FDelegate_GetPlayerUuidFromPlayerIdForSelf, const FResponse_GetPlayerUuidFromPlayerIdForSelf&);

/** @brief A helper metadata object for GetPlayerUuidFromPlayerIdForSelf that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetPlayerUuidFromPlayerIdForSelf
{
	/** The request type */
	typedef FRequest_GetPlayerUuidFromPlayerIdForSelf Request;
	/** The response type */
	typedef FResponse_GetPlayerUuidFromPlayerIdForSelf Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetPlayerUuidFromPlayerIdForSelf Delegate;
	/** The API object that supports this API call */
	typedef FUsersAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Player Uuid From Player Id For Self V2
 * Get a player's uuid from their id for the active player on the access token.
*/
struct RALLYHEREAPI_API FRequest_GetPlayerUuidFromPlayerIdForSelfV2 : public FRequest
{
	FRequest_GetPlayerUuidFromPlayerIdForSelfV2();
	virtual ~FRequest_GetPlayerUuidFromPlayerIdForSelfV2() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
};

/** The response type for FRequest_GetPlayerUuidFromPlayerIdForSelfV2 */
struct RALLYHEREAPI_API FResponse_GetPlayerUuidFromPlayerIdForSelfV2 : public FResponseAccessorTemplate<FRHAPI_PlayerUuidFromId, FRHAPI_HzApiErrorModel>
{
	typedef FResponseAccessorTemplate<FRHAPI_PlayerUuidFromId, FRHAPI_HzApiErrorModel> Super;

	FResponse_GetPlayerUuidFromPlayerIdForSelfV2(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetPlayerUuidFromPlayerIdForSelfV2() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PlayerUuidFromId Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PlayerUuidFromId& OutContent) const { return TryGetContent<FRHAPI_PlayerUuidFromId>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PlayerUuidFromId>& OutContent) const { return TryGetContent<FRHAPI_PlayerUuidFromId>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PlayerUuidFromId* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PlayerUuidFromId>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PlayerUuidFromId> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PlayerUuidFromId>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PlayerUuidFromId& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

};

/** The delegate class for FRequest_GetPlayerUuidFromPlayerIdForSelfV2 */
DECLARE_DELEGATE_OneParam(FDelegate_GetPlayerUuidFromPlayerIdForSelfV2, const FResponse_GetPlayerUuidFromPlayerIdForSelfV2&);

/** @brief A helper metadata object for GetPlayerUuidFromPlayerIdForSelfV2 that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetPlayerUuidFromPlayerIdForSelfV2
{
	/** The request type */
	typedef FRequest_GetPlayerUuidFromPlayerIdForSelfV2 Request;
	/** The response type */
	typedef FResponse_GetPlayerUuidFromPlayerIdForSelfV2 Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetPlayerUuidFromPlayerIdForSelfV2 Delegate;
	/** The API object that supports this API call */
	typedef FUsersAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Player Uuid From Player Id V2
 * Get a player's uuid from their id.
*/
struct RALLYHEREAPI_API FRequest_GetPlayerUuidFromPlayerIdV2 : public FRequest
{
	FRequest_GetPlayerUuidFromPlayerIdV2();
	virtual ~FRequest_GetPlayerUuidFromPlayerIdV2() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	int32 PlayerId = 0;
};

/** The response type for FRequest_GetPlayerUuidFromPlayerIdV2 */
struct RALLYHEREAPI_API FResponse_GetPlayerUuidFromPlayerIdV2 : public FResponseAccessorTemplate<FRHAPI_PlayerUuidFromId, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_PlayerUuidFromId, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetPlayerUuidFromPlayerIdV2(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetPlayerUuidFromPlayerIdV2() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PlayerUuidFromId Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PlayerUuidFromId& OutContent) const { return TryGetContent<FRHAPI_PlayerUuidFromId>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PlayerUuidFromId>& OutContent) const { return TryGetContent<FRHAPI_PlayerUuidFromId>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PlayerUuidFromId* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PlayerUuidFromId>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PlayerUuidFromId> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PlayerUuidFromId>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PlayerUuidFromId& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetPlayerUuidFromPlayerIdV2 */
DECLARE_DELEGATE_OneParam(FDelegate_GetPlayerUuidFromPlayerIdV2, const FResponse_GetPlayerUuidFromPlayerIdV2&);

/** @brief A helper metadata object for GetPlayerUuidFromPlayerIdV2 that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetPlayerUuidFromPlayerIdV2
{
	/** The request type */
	typedef FRequest_GetPlayerUuidFromPlayerIdV2 Request;
	/** The response type */
	typedef FResponse_GetPlayerUuidFromPlayerIdV2 Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetPlayerUuidFromPlayerIdV2 Delegate;
	/** The API object that supports this API call */
	typedef FUsersAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Players Paged
 * Iterate over all players.  This is a paginated API, so you will need to call it multiple times to get all players.
 * There is no guaranteed ordering of players.  So if you need to run multiple iterations for comparison, you will need to sort the results.
*/
struct RALLYHEREAPI_API FRequest_GetPlayersPaged : public FRequest
{
	FRequest_GetPlayersPaged();
	virtual ~FRequest_GetPlayersPaged() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	/* cursor to continue iteration.  Leaving this empty will begin a new query */
	TOptional<FString> Cursor;
	/* number of players to return */
	TOptional<int32> PageSize;
};

/** The response type for FRequest_GetPlayersPaged */
struct RALLYHEREAPI_API FResponse_GetPlayersPaged : public FResponseAccessorTemplate<FRHAPI_PlayerIterateResponse, FRHAPI_MessageOnly, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_PlayerIterateResponse, FRHAPI_MessageOnly, FRHAPI_HTTPValidationError> Super;

	FResponse_GetPlayersPaged(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetPlayersPaged() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PlayerIterateResponse Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PlayerIterateResponse& OutContent) const { return TryGetContent<FRHAPI_PlayerIterateResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PlayerIterateResponse>& OutContent) const { return TryGetContent<FRHAPI_PlayerIterateResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PlayerIterateResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PlayerIterateResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PlayerIterateResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PlayerIterateResponse>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PlayerIterateResponse& OutContent) const;

	/* Response 400
	Bad Request
	*/
	bool TryGetContentFor400(FRHAPI_MessageOnly& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_MessageOnly& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

	/* Response 500
	Internal Server Error
	*/
	bool TryGetContentFor500(FRHAPI_MessageOnly& OutContent) const;

};

/** The delegate class for FRequest_GetPlayersPaged */
DECLARE_DELEGATE_OneParam(FDelegate_GetPlayersPaged, const FResponse_GetPlayersPaged&);

/** @brief A helper metadata object for GetPlayersPaged that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetPlayersPaged
{
	/** The request type */
	typedef FRequest_GetPlayersPaged Request;
	/** The response type */
	typedef FResponse_GetPlayersPaged Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetPlayersPaged Delegate;
	/** The API object that supports this API call */
	typedef FUsersAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Queue Purge Status For Me
 * Get the purge status for a person of the access token.
*/
struct RALLYHEREAPI_API FRequest_GetQueuePurgeStatusForMe : public FRequest
{
	FRequest_GetQueuePurgeStatusForMe();
	virtual ~FRequest_GetQueuePurgeStatusForMe() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
};

/** The response type for FRequest_GetQueuePurgeStatusForMe */
struct RALLYHEREAPI_API FResponse_GetQueuePurgeStatusForMe : public FResponseAccessorTemplate<FRHAPI_PurgeResponse, FRHAPI_MessageOnly, FRHAPI_HzApiErrorModel>
{
	typedef FResponseAccessorTemplate<FRHAPI_PurgeResponse, FRHAPI_MessageOnly, FRHAPI_HzApiErrorModel> Super;

	FResponse_GetQueuePurgeStatusForMe(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetQueuePurgeStatusForMe() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PurgeResponse Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PurgeResponse& OutContent) const { return TryGetContent<FRHAPI_PurgeResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PurgeResponse>& OutContent) const { return TryGetContent<FRHAPI_PurgeResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PurgeResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PurgeResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PurgeResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PurgeResponse>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PurgeResponse& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_MessageOnly& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 500
	Internal Server Error
	*/
	bool TryGetContentFor500(FRHAPI_MessageOnly& OutContent) const;

};

/** The delegate class for FRequest_GetQueuePurgeStatusForMe */
DECLARE_DELEGATE_OneParam(FDelegate_GetQueuePurgeStatusForMe, const FResponse_GetQueuePurgeStatusForMe&);

/** @brief A helper metadata object for GetQueuePurgeStatusForMe that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetQueuePurgeStatusForMe
{
	/** The request type */
	typedef FRequest_GetQueuePurgeStatusForMe Request;
	/** The response type */
	typedef FResponse_GetQueuePurgeStatusForMe Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetQueuePurgeStatusForMe Delegate;
	/** The API object that supports this API call */
	typedef FUsersAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Queue Purge Status For Person
 * Get the purge status for a person. Requires permission: purge:person:admin
*/
struct RALLYHEREAPI_API FRequest_GetQueuePurgeStatusForPerson : public FRequest
{
	FRequest_GetQueuePurgeStatusForPerson();
	virtual ~FRequest_GetQueuePurgeStatusForPerson() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FGuid PersonId;
};

/** The response type for FRequest_GetQueuePurgeStatusForPerson */
struct RALLYHEREAPI_API FResponse_GetQueuePurgeStatusForPerson : public FResponseAccessorTemplate<FRHAPI_PurgeResponse, FRHAPI_MessageOnly, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_PurgeResponse, FRHAPI_MessageOnly, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetQueuePurgeStatusForPerson(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetQueuePurgeStatusForPerson() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PurgeResponse Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PurgeResponse& OutContent) const { return TryGetContent<FRHAPI_PurgeResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PurgeResponse>& OutContent) const { return TryGetContent<FRHAPI_PurgeResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PurgeResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PurgeResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PurgeResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PurgeResponse>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PurgeResponse& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_MessageOnly& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

	/* Response 500
	Internal Server Error
	*/
	bool TryGetContentFor500(FRHAPI_MessageOnly& OutContent) const;

};

/** The delegate class for FRequest_GetQueuePurgeStatusForPerson */
DECLARE_DELEGATE_OneParam(FDelegate_GetQueuePurgeStatusForPerson, const FResponse_GetQueuePurgeStatusForPerson&);

/** @brief A helper metadata object for GetQueuePurgeStatusForPerson that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetQueuePurgeStatusForPerson
{
	/** The request type */
	typedef FRequest_GetQueuePurgeStatusForPerson Request;
	/** The response type */
	typedef FResponse_GetQueuePurgeStatusForPerson Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetQueuePurgeStatusForPerson Delegate;
	/** The API object that supports this API call */
	typedef FUsersAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Link
 * Link a follower platform user to a leader person.
 *     
 * The Leader person is found using the following priority:
 * 
 * 1. If the `leader_person_id` is provided directly
 * 2. If the `leader_platform` and `leader_platform_user_id` are provided, the `person_id` of that platform user is used.
 * 3. If the `scheme` and `credentials` are provided, the person_id of the platform user of credentials is used.
 * 
 * The Follower platform user is found using the following priority:
 * 
 * 1. If the `follower_platform` and `follower_platform_user_id` are provided directly.
 * 2. If the Authorization header contains a user token, the platform and platform user id from the token are used.
 * 
 * For leader selection 1,2 or follower selection 1, Required Permissions:
 * 
 * - For any user (including themselves) any of: `user:*`, `user:modify:any`
 * 
 * 
 * 
 * NOTE: Whenever you change the link or cross progression status of a user, it is recommended to 
 * refresh their access token.  Each token does container user information, which may be incorrect after a link or 
 * cross progression change.  There is no guarantee that calling other endpoints will operate on the correct user
 * until the token has been refreshed.
*/
struct RALLYHEREAPI_API FRequest_Link : public FRequest
{
	FRequest_Link();
	virtual ~FRequest_Link() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	TOptional<FRHAPI_PlatformUserLinkRequest> PlatformUserLinkRequest;
};

/** The response type for FRequest_Link */
struct RALLYHEREAPI_API FResponse_Link : public FResponseAccessorTemplate< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_Link(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_Link() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT

#endif //ALLOW_LEGACY_RESPONSE_CONTENT


	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/

	/* Response 400
	Request inputs are not valid   Error Codes: - `account_not_found` - User Account not found - `cannot_link_same_player` - Cannot link a player to themselves - `follower_already_linked` - Follower is already linked to another person.  They must be unlinked before they can be linked again. - `follower_has_cross_progression_enabled` - follower must disable cross progression before this operation - `follower_has_restrictions` - follower has restrictions that prevent this operation - `invalid_token_claims` - Token has missing/invalid claims.  Are you using a non-user token on a user endpoint? - `leader_has_restrictions` - leader has restrictions that prevent this operation - `leader_not_found` - Desired user for the leader of the link was not found - `platform_already_linked` - Person is already linked to another user on this platform 
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_Link */
DECLARE_DELEGATE_OneParam(FDelegate_Link, const FResponse_Link&);

/** @brief A helper metadata object for Link that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_Link
{
	/** The request type */
	typedef FRequest_Link Request;
	/** The response type */
	typedef FResponse_Link Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_Link Delegate;
	/** The API object that supports this API call */
	typedef FUsersAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Lookup Player By Portal
 * Lookup players by various parameters.  Note that this does NOT find the active player, or other metadata about the resulting players.  It is suggested to call `/v1/player/{player_id}/linked_portals` for each player for that info, if necessary.
*/
struct RALLYHEREAPI_API FRequest_LookupPlayerByPortal : public FRequest
{
	FRequest_LookupPlayerByPortal();
	virtual ~FRequest_LookupPlayerByPortal() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	/* Lookup players by display names */
	TOptional<TArray<FString>> DisplayName;
	/* Lookup players by their portal identity for this platform */
	TOptional<ERHAPI_FastapicommonPlatformsPortal> IdentityPlatform;
	/* Lookup players by their platform identity. Will override identity_platform if set. */
	TOptional<ERHAPI_Platform> Platform;
	/* Lookup players by their Portal Identity */
	TOptional<TArray<FString>> Identities;
};

/** The response type for FRequest_LookupPlayerByPortal */
struct RALLYHEREAPI_API FResponse_LookupPlayerByPortal : public FResponseAccessorTemplate<FRHAPI_LookupResults, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_LookupResults, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_LookupPlayerByPortal(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_LookupPlayerByPortal() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_LookupResults Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_LookupResults& OutContent) const { return TryGetContent<FRHAPI_LookupResults>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_LookupResults>& OutContent) const { return TryGetContent<FRHAPI_LookupResults>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_LookupResults* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_LookupResults>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_LookupResults> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_LookupResults>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_LookupResults& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_LookupPlayerByPortal */
DECLARE_DELEGATE_OneParam(FDelegate_LookupPlayerByPortal, const FResponse_LookupPlayerByPortal&);

/** @brief A helper metadata object for LookupPlayerByPortal that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_LookupPlayerByPortal
{
	/** The request type */
	typedef FRequest_LookupPlayerByPortal Request;
	/** The response type */
	typedef FResponse_LookupPlayerByPortal Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_LookupPlayerByPortal Delegate;
	/** The API object that supports this API call */
	typedef FUsersAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Queue Me For Purge
 * Queue person on the access token for purging. This can occur up to a configured amount of time in the future or can occur immediately depending on `suggested_purge_time`.
*/
struct RALLYHEREAPI_API FRequest_QueueMeForPurge : public FRequest
{
	FRequest_QueueMeForPurge();
	virtual ~FRequest_QueueMeForPurge() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FRHAPI_PurgeRequest PurgeRequest;
};

/** The response type for FRequest_QueueMeForPurge */
struct RALLYHEREAPI_API FResponse_QueueMeForPurge : public FResponseAccessorTemplate<FRHAPI_PurgeResponse, FRHAPI_MessageOnly, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_PurgeResponse, FRHAPI_MessageOnly, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_QueueMeForPurge(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_QueueMeForPurge() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PurgeResponse Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PurgeResponse& OutContent) const { return TryGetContent<FRHAPI_PurgeResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PurgeResponse>& OutContent) const { return TryGetContent<FRHAPI_PurgeResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PurgeResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PurgeResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PurgeResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PurgeResponse>(); }

	// Individual Response Helpers	
	/* Response 202
	Successful Response
	*/
	bool TryGetContentFor202(FRHAPI_PurgeResponse& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_MessageOnly& OutContent) const;

	/* Response 409
	Conflict
	*/
	bool TryGetContentFor409(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

	/* Response 500
	Internal Server Error
	*/
	bool TryGetContentFor500(FRHAPI_MessageOnly& OutContent) const;

};

/** The delegate class for FRequest_QueueMeForPurge */
DECLARE_DELEGATE_OneParam(FDelegate_QueueMeForPurge, const FResponse_QueueMeForPurge&);

/** @brief A helper metadata object for QueueMeForPurge that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_QueueMeForPurge
{
	/** The request type */
	typedef FRequest_QueueMeForPurge Request;
	/** The response type */
	typedef FResponse_QueueMeForPurge Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_QueueMeForPurge Delegate;
	/** The API object that supports this API call */
	typedef FUsersAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Queue Person For Purge
 * Queue a person for purging. This can occur up to a configured amount of time in the future or can occur immediately depending on `suggested_purge_time`. Requires permission: purge:person:admin
*/
struct RALLYHEREAPI_API FRequest_QueuePersonForPurge : public FRequest
{
	FRequest_QueuePersonForPurge();
	virtual ~FRequest_QueuePersonForPurge() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FGuid PersonId;
	FRHAPI_PurgeRequest PurgeRequest;
};

/** The response type for FRequest_QueuePersonForPurge */
struct RALLYHEREAPI_API FResponse_QueuePersonForPurge : public FResponseAccessorTemplate<FRHAPI_PurgeResponse, FRHAPI_MessageOnly, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_PurgeResponse, FRHAPI_MessageOnly, FRHAPI_HTTPValidationError> Super;

	FResponse_QueuePersonForPurge(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_QueuePersonForPurge() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PurgeResponse Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PurgeResponse& OutContent) const { return TryGetContent<FRHAPI_PurgeResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PurgeResponse>& OutContent) const { return TryGetContent<FRHAPI_PurgeResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PurgeResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PurgeResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PurgeResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PurgeResponse>(); }

	// Individual Response Helpers	
	/* Response 202
	Successful Response
	*/
	bool TryGetContentFor202(FRHAPI_PurgeResponse& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_MessageOnly& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

	/* Response 500
	Internal Server Error
	*/
	bool TryGetContentFor500(FRHAPI_MessageOnly& OutContent) const;

};

/** The delegate class for FRequest_QueuePersonForPurge */
DECLARE_DELEGATE_OneParam(FDelegate_QueuePersonForPurge, const FResponse_QueuePersonForPurge&);

/** @brief A helper metadata object for QueuePersonForPurge that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_QueuePersonForPurge
{
	/** The request type */
	typedef FRequest_QueuePersonForPurge Request;
	/** The response type */
	typedef FResponse_QueuePersonForPurge Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_QueuePersonForPurge Delegate;
	/** The API object that supports this API call */
	typedef FUsersAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Unlink
 * Unlink a platform user from their current person.  This will create a new person for the 
 * platform user to be associated with.
 * 
 * If an identity is not provided, the identity in the token will be used.
 * 
 * If you are modifying a user outside of your person, Required Permissions:
 * 
 * - For any user (including themselves) any of: `user:*`, `user:modify:any`
 * 
 * 
 * 
 * NOTE: Whenever you change the link or cross progression status of a user, it is recommended to 
 * refresh their access token.  Each token does container user information, which may be incorrect after a link or 
 * cross progression change.  There is no guarantee that calling other endpoints will operate on the correct user
 * until the token has been refreshed.
*/
struct RALLYHEREAPI_API FRequest_Unlink : public FRequest
{
	FRequest_Unlink();
	virtual ~FRequest_Unlink() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	TOptional<FRHAPI_PlatformUserOperationRequest> PlatformUserOperationRequest;
};

/** The response type for FRequest_Unlink */
struct RALLYHEREAPI_API FResponse_Unlink : public FResponseAccessorTemplate< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_Unlink(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_Unlink() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT

#endif //ALLOW_LEGACY_RESPONSE_CONTENT


	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/

	/* Response 400
	Request inputs are not valid   Error Codes: - `account_not_found` - User Account not found - `cannot_modify_person` - You have insufficient permissions to modify this person - `cannot_unlink_cross_progression_player` - Cannot unlink the cross progression player - `invalid_token_claims` - Token has missing/invalid claims.  Are you using a non-user token on a user endpoint? - `player_not_linked` - Player is not linked - `user_has_restrictions` - user has restrictions that prevent this operation 
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_Unlink */
DECLARE_DELEGATE_OneParam(FDelegate_Unlink, const FResponse_Unlink&);

/** @brief A helper metadata object for Unlink that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_Unlink
{
	/** The request type */
	typedef FRequest_Unlink Request;
	/** The response type */
	typedef FResponse_Unlink Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_Unlink Delegate;
	/** The API object that supports this API call */
	typedef FUsersAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Update Person
 * Update the information for a person.
*/
struct RALLYHEREAPI_API FRequest_UpdatePerson : public FRequest
{
	FRequest_UpdatePerson();
	virtual ~FRequest_UpdatePerson() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FGuid PersonId;
	FRHAPI_UpdatePersonInfoRequest UpdatePersonInfoRequest;
};

/** The response type for FRequest_UpdatePerson */
struct RALLYHEREAPI_API FResponse_UpdatePerson : public FResponseAccessorTemplate<FRHAPI_JsonValue, FRHAPI_MessageOnly, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_JsonValue, FRHAPI_MessageOnly, FRHAPI_HTTPValidationError> Super;

	FResponse_UpdatePerson(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_UpdatePerson() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_JsonValue Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_JsonValue& OutContent) const { return TryGetContent<FRHAPI_JsonValue>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_JsonValue>& OutContent) const { return TryGetContent<FRHAPI_JsonValue>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_JsonValue* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_JsonValue>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_JsonValue> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_JsonValue>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_JsonValue& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_MessageOnly& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

	/* Response 500
	Internal Server Error
	*/
	bool TryGetContentFor500(FRHAPI_MessageOnly& OutContent) const;

};

/** The delegate class for FRequest_UpdatePerson */
DECLARE_DELEGATE_OneParam(FDelegate_UpdatePerson, const FResponse_UpdatePerson&);

/** @brief A helper metadata object for UpdatePerson that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_UpdatePerson
{
	/** The request type */
	typedef FRequest_UpdatePerson Request;
	/** The response type */
	typedef FResponse_UpdatePerson Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_UpdatePerson Delegate;
	/** The API object that supports this API call */
	typedef FUsersAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Update Person Email List
 * Update the email list for a person.  This is used to control which emails a person receives.
*/
struct RALLYHEREAPI_API FRequest_UpdatePersonEmailList : public FRequest
{
	FRequest_UpdatePersonEmailList();
	virtual ~FRequest_UpdatePersonEmailList() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FGuid PersonId;
	FRHAPI_PersonEmailListRequest PersonEmailListRequest;
};

/** The response type for FRequest_UpdatePersonEmailList */
struct RALLYHEREAPI_API FResponse_UpdatePersonEmailList : public FResponseAccessorTemplate<FRHAPI_JsonValue, FRHAPI_MessageOnly, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_JsonValue, FRHAPI_MessageOnly, FRHAPI_HTTPValidationError> Super;

	FResponse_UpdatePersonEmailList(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_UpdatePersonEmailList() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_JsonValue Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_JsonValue& OutContent) const { return TryGetContent<FRHAPI_JsonValue>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_JsonValue>& OutContent) const { return TryGetContent<FRHAPI_JsonValue>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_JsonValue* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_JsonValue>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_JsonValue> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_JsonValue>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_JsonValue& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_MessageOnly& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

	/* Response 500
	Internal Server Error
	*/
	bool TryGetContentFor500(FRHAPI_MessageOnly& OutContent) const;

};

/** The delegate class for FRequest_UpdatePersonEmailList */
DECLARE_DELEGATE_OneParam(FDelegate_UpdatePersonEmailList, const FResponse_UpdatePersonEmailList&);

/** @brief A helper metadata object for UpdatePersonEmailList that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_UpdatePersonEmailList
{
	/** The request type */
	typedef FRequest_UpdatePersonEmailList Request;
	/** The response type */
	typedef FResponse_UpdatePersonEmailList Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_UpdatePersonEmailList Delegate;
	/** The API object that supports this API call */
	typedef FUsersAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Update Person Email List For Self
 * Update the email list for person on the access token.  This is used to control which emails a person receives.
*/
struct RALLYHEREAPI_API FRequest_UpdatePersonEmailListForSelf : public FRequest
{
	FRequest_UpdatePersonEmailListForSelf();
	virtual ~FRequest_UpdatePersonEmailListForSelf() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FRHAPI_PersonEmailListRequest PersonEmailListRequest;
};

/** The response type for FRequest_UpdatePersonEmailListForSelf */
struct RALLYHEREAPI_API FResponse_UpdatePersonEmailListForSelf : public FResponseAccessorTemplate<FRHAPI_JsonValue, FRHAPI_MessageOnly, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_JsonValue, FRHAPI_MessageOnly, FRHAPI_HTTPValidationError> Super;

	FResponse_UpdatePersonEmailListForSelf(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_UpdatePersonEmailListForSelf() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_JsonValue Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_JsonValue& OutContent) const { return TryGetContent<FRHAPI_JsonValue>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_JsonValue>& OutContent) const { return TryGetContent<FRHAPI_JsonValue>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_JsonValue* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_JsonValue>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_JsonValue> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_JsonValue>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_JsonValue& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_MessageOnly& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

	/* Response 500
	Internal Server Error
	*/
	bool TryGetContentFor500(FRHAPI_MessageOnly& OutContent) const;

};

/** The delegate class for FRequest_UpdatePersonEmailListForSelf */
DECLARE_DELEGATE_OneParam(FDelegate_UpdatePersonEmailListForSelf, const FResponse_UpdatePersonEmailListForSelf&);

/** @brief A helper metadata object for UpdatePersonEmailListForSelf that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_UpdatePersonEmailListForSelf
{
	/** The request type */
	typedef FRequest_UpdatePersonEmailListForSelf Request;
	/** The response type */
	typedef FResponse_UpdatePersonEmailListForSelf Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_UpdatePersonEmailListForSelf Delegate;
	/** The API object that supports this API call */
	typedef FUsersAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Update Person For Self
 * Update information for the person on the access token.
*/
struct RALLYHEREAPI_API FRequest_UpdatePersonForSelf : public FRequest
{
	FRequest_UpdatePersonForSelf();
	virtual ~FRequest_UpdatePersonForSelf() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FRHAPI_UpdatePersonInfoRequest UpdatePersonInfoRequest;
};

/** The response type for FRequest_UpdatePersonForSelf */
struct RALLYHEREAPI_API FResponse_UpdatePersonForSelf : public FResponseAccessorTemplate<FRHAPI_JsonValue, FRHAPI_MessageOnly, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_JsonValue, FRHAPI_MessageOnly, FRHAPI_HTTPValidationError> Super;

	FResponse_UpdatePersonForSelf(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_UpdatePersonForSelf() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_JsonValue Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_JsonValue& OutContent) const { return TryGetContent<FRHAPI_JsonValue>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_JsonValue>& OutContent) const { return TryGetContent<FRHAPI_JsonValue>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_JsonValue* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_JsonValue>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_JsonValue> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_JsonValue>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_JsonValue& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_MessageOnly& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

	/* Response 500
	Internal Server Error
	*/
	bool TryGetContentFor500(FRHAPI_MessageOnly& OutContent) const;

};

/** The delegate class for FRequest_UpdatePersonForSelf */
DECLARE_DELEGATE_OneParam(FDelegate_UpdatePersonForSelf, const FResponse_UpdatePersonForSelf&);

/** @brief A helper metadata object for UpdatePersonForSelf that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_UpdatePersonForSelf
{
	/** The request type */
	typedef FRequest_UpdatePersonForSelf Request;
	/** The response type */
	typedef FResponse_UpdatePersonForSelf Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_UpdatePersonForSelf Delegate;
	/** The API object that supports this API call */
	typedef FUsersAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Upsert Contact
 * Create or update a contact with SendInBlue, Requires permission: user:sendinblue:write
*/
struct RALLYHEREAPI_API FRequest_UpsertContact : public FRequest
{
	FRequest_UpsertContact();
	virtual ~FRequest_UpsertContact() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FRHAPI_SendInBlueContact SendInBlueContact;
};

/** The response type for FRequest_UpsertContact */
struct RALLYHEREAPI_API FResponse_UpsertContact : public FResponseAccessorTemplate<FRHAPI_JsonValue, FRHAPI_MessageOnly, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_JsonValue, FRHAPI_MessageOnly, FRHAPI_HTTPValidationError> Super;

	FResponse_UpsertContact(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_UpsertContact() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_JsonValue Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_JsonValue& OutContent) const { return TryGetContent<FRHAPI_JsonValue>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_JsonValue>& OutContent) const { return TryGetContent<FRHAPI_JsonValue>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_JsonValue* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_JsonValue>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_JsonValue> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_JsonValue>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_JsonValue& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_MessageOnly& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

	/* Response 500
	Internal Server Error
	*/
	bool TryGetContentFor500(FRHAPI_MessageOnly& OutContent) const;

};

/** The delegate class for FRequest_UpsertContact */
DECLARE_DELEGATE_OneParam(FDelegate_UpsertContact, const FResponse_UpsertContact&);

/** @brief A helper metadata object for UpsertContact that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_UpsertContact
{
	/** The request type */
	typedef FRequest_UpsertContact Request;
	/** The response type */
	typedef FResponse_UpsertContact Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_UpsertContact Delegate;
	/** The API object that supports this API call */
	typedef FUsersAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};


/** The API class itself, which will handle calls to */
class RALLYHEREAPI_API FUsersAPI : public FAPI
{
public:
	FUsersAPI();
	virtual ~FUsersAPI();

	FHttpRequestPtr CreatePlatformUserById(const FRequest_CreatePlatformUserById& Request, const FDelegate_CreatePlatformUserById& Delegate = FDelegate_CreatePlatformUserById(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr DequeueMeForPurge(const FRequest_DequeueMeForPurge& Request, const FDelegate_DequeueMeForPurge& Delegate = FDelegate_DequeueMeForPurge(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr DequeuePersonForPurge(const FRequest_DequeuePersonForPurge& Request, const FDelegate_DequeuePersonForPurge& Delegate = FDelegate_DequeuePersonForPurge(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr DisableCrossProgression(const FRequest_DisableCrossProgression& Request, const FDelegate_DisableCrossProgression& Delegate = FDelegate_DisableCrossProgression(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr EnableCrossProgression(const FRequest_EnableCrossProgression& Request, const FDelegate_EnableCrossProgression& Delegate = FDelegate_EnableCrossProgression(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr FindPlatformUserById(const FRequest_FindPlatformUserById& Request, const FDelegate_FindPlatformUserById& Delegate = FDelegate_FindPlatformUserById(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetAllRoles(const FRequest_GetAllRoles& Request, const FDelegate_GetAllRoles& Delegate = FDelegate_GetAllRoles(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetLinkHistory(const FRequest_GetLinkHistory& Request, const FDelegate_GetLinkHistory& Delegate = FDelegate_GetLinkHistory(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetLoginHistory(const FRequest_GetLoginHistory& Request, const FDelegate_GetLoginHistory& Delegate = FDelegate_GetLoginHistory(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetPerson(const FRequest_GetPerson& Request, const FDelegate_GetPerson& Delegate = FDelegate_GetPerson(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetPersonEmailList(const FRequest_GetPersonEmailList& Request, const FDelegate_GetPersonEmailList& Delegate = FDelegate_GetPersonEmailList(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetPersonEmailListForSelf(const FRequest_GetPersonEmailListForSelf& Request, const FDelegate_GetPersonEmailListForSelf& Delegate = FDelegate_GetPersonEmailListForSelf(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetPersonForSelf(const FRequest_GetPersonForSelf& Request, const FDelegate_GetPersonForSelf& Delegate = FDelegate_GetPersonForSelf(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetPlayerIdFromPlayerUuid(const FRequest_GetPlayerIdFromPlayerUuid& Request, const FDelegate_GetPlayerIdFromPlayerUuid& Delegate = FDelegate_GetPlayerIdFromPlayerUuid(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetPlayerIdFromPlayerUuidForSelf(const FRequest_GetPlayerIdFromPlayerUuidForSelf& Request, const FDelegate_GetPlayerIdFromPlayerUuidForSelf& Delegate = FDelegate_GetPlayerIdFromPlayerUuidForSelf(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetPlayerLinkedPortals(const FRequest_GetPlayerLinkedPortals& Request, const FDelegate_GetPlayerLinkedPortals& Delegate = FDelegate_GetPlayerLinkedPortals(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetPlayerLinks(const FRequest_GetPlayerLinks& Request, const FDelegate_GetPlayerLinks& Delegate = FDelegate_GetPlayerLinks(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetPlayerLinksForSelf(const FRequest_GetPlayerLinksForSelf& Request, const FDelegate_GetPlayerLinksForSelf& Delegate = FDelegate_GetPlayerLinksForSelf(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetPlayerUuidFromPlayerId(const FRequest_GetPlayerUuidFromPlayerId& Request, const FDelegate_GetPlayerUuidFromPlayerId& Delegate = FDelegate_GetPlayerUuidFromPlayerId(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetPlayerUuidFromPlayerIdForSelf(const FRequest_GetPlayerUuidFromPlayerIdForSelf& Request, const FDelegate_GetPlayerUuidFromPlayerIdForSelf& Delegate = FDelegate_GetPlayerUuidFromPlayerIdForSelf(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetPlayerUuidFromPlayerIdForSelfV2(const FRequest_GetPlayerUuidFromPlayerIdForSelfV2& Request, const FDelegate_GetPlayerUuidFromPlayerIdForSelfV2& Delegate = FDelegate_GetPlayerUuidFromPlayerIdForSelfV2(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetPlayerUuidFromPlayerIdV2(const FRequest_GetPlayerUuidFromPlayerIdV2& Request, const FDelegate_GetPlayerUuidFromPlayerIdV2& Delegate = FDelegate_GetPlayerUuidFromPlayerIdV2(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetPlayersPaged(const FRequest_GetPlayersPaged& Request, const FDelegate_GetPlayersPaged& Delegate = FDelegate_GetPlayersPaged(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetQueuePurgeStatusForMe(const FRequest_GetQueuePurgeStatusForMe& Request, const FDelegate_GetQueuePurgeStatusForMe& Delegate = FDelegate_GetQueuePurgeStatusForMe(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetQueuePurgeStatusForPerson(const FRequest_GetQueuePurgeStatusForPerson& Request, const FDelegate_GetQueuePurgeStatusForPerson& Delegate = FDelegate_GetQueuePurgeStatusForPerson(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr Link(const FRequest_Link& Request, const FDelegate_Link& Delegate = FDelegate_Link(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr LookupPlayerByPortal(const FRequest_LookupPlayerByPortal& Request, const FDelegate_LookupPlayerByPortal& Delegate = FDelegate_LookupPlayerByPortal(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr QueueMeForPurge(const FRequest_QueueMeForPurge& Request, const FDelegate_QueueMeForPurge& Delegate = FDelegate_QueueMeForPurge(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr QueuePersonForPurge(const FRequest_QueuePersonForPurge& Request, const FDelegate_QueuePersonForPurge& Delegate = FDelegate_QueuePersonForPurge(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr Unlink(const FRequest_Unlink& Request, const FDelegate_Unlink& Delegate = FDelegate_Unlink(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr UpdatePerson(const FRequest_UpdatePerson& Request, const FDelegate_UpdatePerson& Delegate = FDelegate_UpdatePerson(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr UpdatePersonEmailList(const FRequest_UpdatePersonEmailList& Request, const FDelegate_UpdatePersonEmailList& Delegate = FDelegate_UpdatePersonEmailList(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr UpdatePersonEmailListForSelf(const FRequest_UpdatePersonEmailListForSelf& Request, const FDelegate_UpdatePersonEmailListForSelf& Delegate = FDelegate_UpdatePersonEmailListForSelf(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr UpdatePersonForSelf(const FRequest_UpdatePersonForSelf& Request, const FDelegate_UpdatePersonForSelf& Delegate = FDelegate_UpdatePersonForSelf(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr UpsertContact(const FRequest_UpsertContact& Request, const FDelegate_UpsertContact& Delegate = FDelegate_UpsertContact(), int32 Priority = DefaultRallyHereAPIPriority);

private:
	void OnCreatePlatformUserByIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_CreatePlatformUserById Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnDequeueMeForPurgeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_DequeueMeForPurge Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnDequeuePersonForPurgeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_DequeuePersonForPurge Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnDisableCrossProgressionResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_DisableCrossProgression Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnEnableCrossProgressionResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_EnableCrossProgression Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnFindPlatformUserByIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_FindPlatformUserById Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetAllRolesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAllRoles Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetLinkHistoryResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetLinkHistory Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetLoginHistoryResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetLoginHistory Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetPersonResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPerson Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetPersonEmailListResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPersonEmailList Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetPersonEmailListForSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPersonEmailListForSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetPersonForSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPersonForSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetPlayerIdFromPlayerUuidResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlayerIdFromPlayerUuid Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetPlayerIdFromPlayerUuidForSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlayerIdFromPlayerUuidForSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetPlayerLinkedPortalsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlayerLinkedPortals Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetPlayerLinksResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlayerLinks Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetPlayerLinksForSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlayerLinksForSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetPlayerUuidFromPlayerIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlayerUuidFromPlayerId Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetPlayerUuidFromPlayerIdForSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlayerUuidFromPlayerIdForSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetPlayerUuidFromPlayerIdForSelfV2Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlayerUuidFromPlayerIdForSelfV2 Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetPlayerUuidFromPlayerIdV2Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlayerUuidFromPlayerIdV2 Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetPlayersPagedResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlayersPaged Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetQueuePurgeStatusForMeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetQueuePurgeStatusForMe Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetQueuePurgeStatusForPersonResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetQueuePurgeStatusForPerson Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnLinkResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_Link Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnLookupPlayerByPortalResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_LookupPlayerByPortal Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnQueueMeForPurgeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_QueueMeForPurge Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnQueuePersonForPurgeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_QueuePersonForPurge Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnUnlinkResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_Unlink Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnUpdatePersonResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdatePerson Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnUpdatePersonEmailListResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdatePersonEmailList Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnUpdatePersonEmailListForSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdatePersonEmailListForSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnUpdatePersonForSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdatePersonForSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnUpsertContactResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpsertContact Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};



}
