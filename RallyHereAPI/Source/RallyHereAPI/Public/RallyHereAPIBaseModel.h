// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "Interfaces/IHttpRequest.h"
#include "Interfaces/IHttpResponse.h"
#include "Serialization/JsonWriter.h"
#include "Dom/JsonObject.h"
#include "HttpRetrySystem.h"
#include "Containers/Ticker.h"
#include "Runtime/Launch/Resources/Version.h"
#include "Misc/EngineVersionComparison.h"
#include "Misc/Guid.h"
#include "Misc/TVariant.h"
#include "RallyHereAPIBaseModel.generated.h"

#define RHAPI_BELOW_ENGINE_VERSION(Major, Minor)  (ENGINE_MAJOR_VERSION < (Major) || (ENGINE_MAJOR_VERSION == (Major) && ENGINE_MINOR_VERSION < (Minor)))
#define RHAPI_FROM_ENGINE_VERSION(Major, Minor)   !RHAPI_BELOW_ENGINE_VERSION(Major, Minor)

/** @defgroup RHAPI_BaseModel RallyHere API Base Model
 *  @{
 */

/**
 * @brief Base class for all RallyHereAPI data models
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_Model
{
	GENERATED_BODY(WithNoDestructor);
	virtual ~FRHAPI_Model() {}

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) { return false; }

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const {}
};
/** @} */

namespace RallyHereAPI
{

struct FAuthContext;
using namespace FHttpRetrySystem;

struct RALLYHEREAPI_API FHttpRetryManager : public FManager, public FTSTickerObjectBase
{
	using FManager::FManager;

	bool Tick(float DeltaTime) final;
};

#if RHAPI_FROM_ENGINE_VERSION(5,4)
struct RALLYHEREAPI_API FHttpRetryParams
{
	FHttpRetryParams(
		const FRetryLimitCountSetting& InRetryLimitCountOverride = FRetryLimitCountSetting(),
		const FRetryTimeoutRelativeSecondsSetting& InRetryTimeoutRelativeSecondsOverride = FRetryTimeoutRelativeSecondsSetting(),
		const FRetryResponseCodes& InRetryResponseCodes = FRetryResponseCodes(),
		const FRetryVerbs& InRetryVerbs = FRetryVerbs(),
		const FRetryDomainsPtr& InRetryDomains = FRetryDomainsPtr(),
		const FRetryLimitCountSetting& InRetryLimitCountForConnectionErrorOverride = FRetryLimitCountSetting(),
		const FExponentialBackoffCurve& InExponentialBackoffCurve = FExponentialBackoffCurve()
	)
		: RetryLimitCountOverride(InRetryLimitCountOverride)
		, RetryTimeoutRelativeSecondsOverride(InRetryTimeoutRelativeSecondsOverride)
		, RetryResponseCodes(InRetryResponseCodes)
		, RetryVerbs(InRetryVerbs)
		, RetryDomains(InRetryDomains)
		, RetryLimitCountForConnectionErrorOverride(InRetryLimitCountForConnectionErrorOverride)
		, ExponentialBackoffCurve(InExponentialBackoffCurve)
	{
	}

	FRetryLimitCountSetting RetryLimitCountOverride;
	FRetryTimeoutRelativeSecondsSetting RetryTimeoutRelativeSecondsOverride;
	FRetryResponseCodes RetryResponseCodes;
	FRetryVerbs RetryVerbs;
	FRetryDomainsPtr RetryDomains;
	FRetryLimitCountSetting RetryLimitCountForConnectionErrorOverride;
	FExponentialBackoffCurve ExponentialBackoffCurve;
};

class FHttpRetryRequest : public FHttpRetrySystem::FRequest
{
public:
	FHttpRetryRequest(
		class TSharedRef<FManager>& InManager,
		const TSharedRef<IHttpRequest>& HttpRequest,
		const FHttpRetryParams& InParams = FHttpRetryParams()
	)
		: FHttpRetrySystem::FRequest(
			InManager,
			HttpRequest,
			InParams.RetryLimitCountOverride,
			InParams.RetryTimeoutRelativeSecondsOverride,
			InParams.RetryResponseCodes,
			InParams.RetryVerbs,
			InParams.RetryDomains,
			InParams.RetryLimitCountForConnectionErrorOverride,
			InParams.ExponentialBackoffCurve
		)
	{
	}

	// Reset state of the request to not started, in case we are retrying after an auth failure
	virtual bool RALLYHEREAPI_API ProcessRequest() override
	{
		RetryStatus = EStatus::NotStarted;
		return FHttpRetrySystem::FRequest::ProcessRequest();
	}
};
#else
struct RALLYHEREAPI_API FHttpRetryParams
{
	FHttpRetryParams(
		const FRetryLimitCountSetting& InRetryLimitCountOverride = FRetryLimitCountSetting(),
		const FRetryTimeoutRelativeSecondsSetting& InRetryTimeoutRelativeSecondsOverride = FRetryTimeoutRelativeSecondsSetting(),
		const FRetryResponseCodes& InRetryResponseCodes = FRetryResponseCodes(),
		const FRetryVerbs& InRetryVerbs = FRetryVerbs(),
		const FRetryDomainsPtr& InRetryDomains = FRetryDomainsPtr()
	)
		: RetryLimitCountOverride(InRetryLimitCountOverride)
		, RetryTimeoutRelativeSecondsOverride(InRetryTimeoutRelativeSecondsOverride)
		, RetryResponseCodes(InRetryResponseCodes)
		, RetryVerbs(InRetryVerbs)
		, RetryDomains(InRetryDomains)
	{
	}

	FRetryLimitCountSetting RetryLimitCountOverride;
	FRetryTimeoutRelativeSecondsSetting RetryTimeoutRelativeSecondsOverride;
	FRetryResponseCodes RetryResponseCodes;
	FRetryVerbs RetryVerbs;
	FRetryDomainsPtr RetryDomains;
};

class FHttpRetryRequest : public FHttpRetrySystem::FRequest
{
public:
	FHttpRetryRequest(
		class TSharedRef<FManager>& InManager,
		const TSharedRef<IHttpRequest, ESPMode::ThreadSafe>& HttpRequest,
		const FHttpRetryParams& InParams = FHttpRetryParams()
	)
		: FHttpRetrySystem::FRequest(
			*InManager,
			HttpRequest,
			InParams.RetryLimitCountOverride,
			InParams.RetryTimeoutRelativeSecondsOverride,
			InParams.RetryResponseCodes,
			InParams.RetryVerbs,
			InParams.RetryDomains
		)
	{
	}

	// Reset state of the request to not started, in case we are retrying after an auth failure
	virtual bool RALLYHEREAPI_API ProcessRequest() override
	{
		Status = EStatus::NotStarted;
		return FHttpRetrySystem::FRequest::ProcessRequest();
	}
};
#endif

/*
 * Metadata used to track a request through the Unreal systems
 */
struct RALLYHEREAPI_API FRequestMetadata
{
	FGuid Identifier;
	FName SimplifiedPath, SimplifiedPathWithVerb;
	int32 RetryCount;
	FDateTime CreateTimestamp, QueuedTimestamp, HttpQueuedTimestamp;

	// custom handling override flags tracking
	struct FMetadataFlags
	{
		union 
		{
			struct {
				uint32 bDisableAuthRequirement : 1;
				uint32 bModifyRequestDelegateIsBound : 1;
				uint32 bDisableLoginRetryOnAuthorizationFailure : 1;
				uint32 bDisableReadRequestContent : 1;
				uint32 bDisableReadResponseContent : 1;
			};
			uint32 Flags;
		};

		FMetadataFlags() : Flags(0) {}
	};
	FMetadataFlags Flags;

	FRequestMetadata()
		: Identifier(FGuid::NewGuid())
		, RetryCount(0)
		, CreateTimestamp(FDateTime::Now())
	{}
};

class RALLYHEREAPI_API FRequest
{
public:
	FRequest()
	{
		// default to enabling retry
		auto NewRetryParams = FHttpRetryParams();
		NewRetryParams.RetryResponseCodes.Add(EHttpResponseCodes::TooManyRequests);
		NewRetryParams.RetryResponseCodes.Add(EHttpResponseCodes::ServiceUnavail);
		SetShouldRetry(NewRetryParams);
	}
	virtual ~FRequest() = default;
	virtual bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const = 0;
	virtual FString ComputePath() const = 0;
	virtual FName GetSimplifiedPath() const = 0;
	virtual FName GetSimplifiedPathWithVerb() const = 0;
	virtual TSharedPtr<FAuthContext> GetAuthContext() const { return nullptr; }
	const FRequestMetadata& GetRequestMetadata() const { return RequestMetadata; }

	/* Enables retry and optionally sets a retry policy for this request */
	void SetShouldRetry(const FHttpRetryParams& Params = FHttpRetryParams()) { RetryParams = Params; }
	void ClearShouldRetry() { RetryParams.Reset(); }
	const TOptional<FHttpRetryParams>& GetRetryParams() const { return RetryParams; }

	void SetDisableAuthRequirement(bool bInDisable) { PendingMetadataFlags.bDisableAuthRequirement = bInDisable; }
	void SetDisableLoginRetryOnAuthorizationFailure(bool bInDisable) { PendingMetadataFlags.bDisableLoginRetryOnAuthorizationFailure = bInDisable; }
	void SetDisableReadContent(bool bDisableReadRequest, bool bDisableReadResponse) { PendingMetadataFlags.bDisableReadRequestContent = bDisableReadRequest; PendingMetadataFlags.bDisableReadResponseContent = bDisableReadResponse; }

	DECLARE_MULTICAST_DELEGATE_TwoParams(ModifyHttpRequestBeforeSubmit, const FRequest&, FHttpRequestRef);
	ModifyHttpRequestBeforeSubmit& OnModifyRequest() { return OnModifyRequestDelegate; }
	const ModifyHttpRequestBeforeSubmit& OnModifyRequest() const { return OnModifyRequestDelegate; }

	/* Sets flags on the metadata based on the request at time it is sent (in case something modifies the metadata outside of this class) */
	virtual void SetMetadataFlags(FRequestMetadata& Metadata) const
	{
		Metadata.Flags = PendingMetadataFlags;;
		Metadata.Flags.bModifyRequestDelegateIsBound = PendingMetadataFlags.bModifyRequestDelegateIsBound || OnModifyRequestDelegate.IsBound();
	}

protected:
	FRequestMetadata RequestMetadata;
	TOptional<FHttpRetryParams> RetryParams;

	FRequestMetadata::FMetadataFlags PendingMetadataFlags;
	ModifyHttpRequestBeforeSubmit OnModifyRequestDelegate;
};

class RALLYHEREAPI_API FResponse
{
public:
	typedef nullptr_t EmptyPayloadType;
	typedef FString StringPayloadType;
	typedef TSharedPtr<FJsonValue> JsonPayloadType;
	typedef TArrayView<const uint8> BinaryPayloadType;
	typedef TVariant<EmptyPayloadType, StringPayloadType, JsonPayloadType, BinaryPayloadType> PayloadVariantType;

	FResponse(FRequestMetadata InRequestMetadata);
	virtual ~FResponse() = default;
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) = 0;
	bool ParseResponse(bool& bOutParsedHeaders, bool& bOutParsedContent)
	{
		bOutParsedContent = false;
		bOutParsedHeaders = ParseHeaders();
		if (bOutParsedHeaders)
		{
			bOutParsedContent = ParseContent();
		}
		return bOutParsedHeaders && bOutParsedContent;
	};

	virtual bool ParseHeaders() { return true; }
	virtual bool ParseContent();
	/** Whether or not the parsed content has internal parsing errors that are non-fatal */
	bool HasContentParseErrors() const { return HasParseErrors; }

	void SetSuccessful(bool InSuccessful) { Successful = InSuccessful; }
	bool IsSuccessful() const { return Successful; }

	virtual void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode);
	EHttpResponseCodes::Type GetHttpResponseCode() const { return ResponseCode; }

	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const;

	void SetHttpResponse(const FHttpResponsePtr& InHttpResponse) { HttpResponse = InHttpResponse; }
	const FHttpResponsePtr& GetHttpResponse() const { return HttpResponse; }

	const FRequestMetadata& GetRequestMetadata() const { return RequestMetadata; }

	template<typename T>
	void SetPayload(const T& InPayload) { Payload.Set<T>(InPayload); }
	void SetPayload(const PayloadVariantType& InPayload) { Payload = InPayload; }
	const PayloadVariantType& GetPayload() const { return Payload; }
	template<typename T>
	const T* TryGetPayload() const { return Payload.TryGet<T>(); }

	void ClearPayload() { return Payload.Set<EmptyPayloadType>(nullptr); }

	UE_DEPRECATED(5.0, "Please use SetPayload<>() instead" )
	void SetResponseString(const StringPayloadType& InValue) { SetPayload<StringPayloadType>(InValue); }
	UE_DEPRECATED(5.0, "Please use TryGetPayload<>() instead" )
	const StringPayloadType& GetResponseString() const { auto PayloadString = TryGetPayload<StringPayloadType>(); return PayloadString ? *PayloadString : DefaultStringPayload; }

	UE_DEPRECATED(5.0, "Please use SetPayload<>() instead" )
	void SetJsonResponse(const JsonPayloadType& InValue) { SetPayload<JsonPayloadType>(InValue); }
	UE_DEPRECATED(5.0, "Please use TryGetPayload<>() instead" )
	const JsonPayloadType& GetJsonResponse() const { auto PayloadJson = TryGetPayload<JsonPayloadType>(); return PayloadJson ? *PayloadJson : DefaultJsonPayload; }

protected:
	bool Successful, HasParseErrors;
	EHttpResponseCodes::Type ResponseCode;
	FHttpResponsePtr HttpResponse;
	FRequestMetadata RequestMetadata;

	PayloadVariantType Payload;

	virtual bool ParseTypelessContent();
	virtual bool ParseStringTypeContent();
	virtual bool ParseJsonTypeContent();
	virtual bool ParseBinaryTypeContent();
	virtual bool ParseUnknownTypeContent();

	// static payloads to allow deprecated functions to return references
	static JsonPayloadType DefaultJsonPayload;
	static StringPayloadType DefaultStringPayload;
};

template<class... Types>
class RALLYHEREAPI_API FResponseAccessorTemplate : public FResponse
{
public:
	FResponseAccessorTemplate(FRequestMetadata InRequestMetadata)
		: FResponse(MoveTemp(InRequestMetadata))
		, ParsedContent()
	{}
	
protected:
	/** Variant type representing the potential content responses for this call */
	typedef TVariant<Types...> ContentVariantType;
	
	/** A variant containing the parsed content */
	ContentVariantType ParsedContent;

	/** A parsed map of the headers from the request */
	TMap<FString, FString> HeadersMap;
	
	
public:
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override
	{
		// Reset and presize the header map we will parse into
		HeadersMap.Empty(HttpResponse->GetAllHeaders().Num());
		
		// The IHttpBase::GetHeader function doesn't distinguish between missing and empty, so we need to parse ourselves
		for (const auto& HeaderStr : HttpResponse->GetAllHeaders())
		{
			int32 index;
			if (HeaderStr.FindChar(TEXT(':'), index))
			{
				// if there is a space after the colon, skip it
				HeadersMap.Add(HeaderStr.Mid(0, index), HeaderStr.Mid(index + 1).TrimStartAndEnd());
			}
		}
		
		return true;
	}

	/**
	 * @brief Attempt to get the response content in a specific type
	 * @param [out] OutContent A copy of the response data, if the type matched
	 * @return Whether or not the response was of the given type
	 */
	template<typename T>
	bool TryGetContent(T& OutContent)const { const T* OutContentPtr = ParsedContent.template TryGet<T>(); if (OutContentPtr != nullptr) OutContent = *OutContentPtr; return OutContentPtr != nullptr; }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @param [out] OutContent A copy of the response data, if the type matched
	 * @return Whether or not the response was of the given type
	 */
	template<typename T>
	bool TryGetContent(TOptional<T>& OutContent)const { const T* OutContentPtr = ParsedContent.template TryGet<T>(); if (OutContentPtr != nullptr) OutContent = *OutContentPtr; else OutContent.Reset(); return OutContentPtr != nullptr; }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @return A pointer to the content, if it was the specified type.  The memory is owned by the response object!
	 */
	template<typename T>
	const T* TryGetContentAsPointer() const { return ParsedContent.template TryGet<T>(); }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @return A optional object to the content, if it was the specified type.  The memory is owned by the returned optional object, which contains a copy of the value, if valid.
	 */
	template<typename T>
	const TOptional<T> TryGetContentAsOptional() const { const auto Ptr = TryGetContentAsPointer<T>(); return Ptr != nullptr ? *Ptr : TOptional<T>(); }
	
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @param [out] OutValue A string to store the header value to, if found
	 * @return Whether or not the header was found
	 */
	FORCEINLINE bool TryGetHeader(const FString& Header, FString& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; else OutValue = FString(); return OutValuePtr != nullptr; }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @param [out] OutValue A TOptional<FString> to store the header value to, if found
	 * @return Whether or not the header was found
	 */
	FORCEINLINE bool TryGetHeader(const FString& Header, TOptional<FString>& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; else OutValue.Reset(); return OutValuePtr != nullptr; }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @return A pointer to the header string value, if found.  The memory is owned by the response object!
	 */
	FORCEINLINE const FString* TryGetHeaderAsPointer(const FString& Header) const { return HeadersMap.Find(Header); }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @return An optional string of the header string value, if found.  The memory is owned by the returned optional object, which contains a copy of the value if valid.
	 */
	FORCEINLINE const TOptional<FString> TryGetHeaderAsOptional(const FString& Header) const { const auto Ptr = HeadersMap.Find(Header); return Ptr != nullptr ? *Ptr : TOptional<FString>(); }

};

DECLARE_MULTICAST_DELEGATE_TwoParams(FAPI_RequestStarted, const FRequestMetadata&, FHttpRequestRef);
DECLARE_MULTICAST_DELEGATE_FiveParams(FAPI_RequestCompleted, const FResponse&, FHttpRequestPtr, FHttpResponsePtr, bool /* success */, bool /* willRetryWithAuth */);

DECLARE_DELEGATE_OneParam(FAPI_OnHandleResponseAsyncComplete, bool);

class RALLYHEREAPI_API FAPI : public TSharedFromThis<FAPI>
{
public:
	FAPI() = default;
	virtual ~FAPI() = default;

	/* Sets the URL Endpoint.
	 * Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);
	FString GetURL() const;
	FName GetName() const;

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Auth context for requests that require an Authorization header */
	void SetAuthContext(FAuthContext& NewAuthContext);
	FAuthContext *GetAuthContext();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	 * If no retry manager is specified and a request needs retries, a default retry manager will be used.
	 * See also: Request::SetShouldRetry */
	void SetHttpRetryManager(const TSharedRef<FHttpRetrySystem::FManager>& RetryManager);
	TSharedPtr<FHttpRetrySystem::FManager>& GetHttpRetryManager() const { return RetryManager; }

	FAPI_RequestStarted& OnRequestStarted() { return RequestStarted; }
	FAPI_RequestCompleted& OnRequestCompleted() { return RequestCompleted; }

protected:
	FHttpRequestRef CreateHttpRequest(const FRequest& Request) const;
	bool IsValid() const;
	struct FRequestPendingAuthRetry
	{
		FHttpRequestPtr HttpRequest;
		TSharedPtr<FAuthContext> AuthContext;
		FDelegateHandle Handle;
	};

	void HandleResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, TSharedPtr<FAuthContext> AuthContext, TSharedRef<FResponse> InOutResponse, const FHttpRequestCompleteDelegate& ResponseDelegate, const FSimpleDelegate& CompletionDelegate, const FRequestMetadata& RequestMetadata, int32 Priority);
	bool OnHandleResponseAsyncComplete(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, TSharedPtr<FAuthContext> AuthContext, TSharedRef<FResponse> InOutResponse, const FHttpRequestCompleteDelegate& ResponseDelegate, const FSimpleDelegate& CompletionDelegate, const FRequestMetadata& RequestMetadata, int32 Priority);

	void RetryRequestAfterAuth(bool bAuthSuccess, TSharedRef<FRequestPendingAuthRetry> Request, FHttpRequestCompleteDelegate ResponseDelegate, FRequestMetadata RequestMetadata, int32 Priority);

	FString Url;
	FName Name;
	TMap<FString, FString> AdditionalHeaderParams;
	mutable TSharedPtr<FHttpRetrySystem::FManager> RetryManager;
	mutable TSharedPtr<FHttpRetryManager> DefaultRetryManager;
	FAPI_RequestStarted RequestStarted;
	FAPI_RequestCompleted RequestCompleted;
};

}
