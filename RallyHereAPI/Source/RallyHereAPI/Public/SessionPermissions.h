// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "Containers/Set.h"
#include "IntraSessionPermissions.h"
#include "SessionPermissions.generated.h"

/** @defgroup RHAPI_SessionPermissions RallyHere API Model SessionPermissions
 *  @{
 */

/**
 * @brief 
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_SessionPermissions : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	/** @brief Unique identifier for this player */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FGuid PlayerUuid{  };
	/** @brief Gets the value of PlayerUuid */
	FGuid& GetPlayerUuid() { return PlayerUuid; }
	/** @brief Gets the value of PlayerUuid */
	const FGuid& GetPlayerUuid() const { return PlayerUuid; }
	/** @brief Sets the value of PlayerUuid */
	void SetPlayerUuid(const FGuid& NewValue) { PlayerUuid = NewValue;   }
	/** @brief Sets the value of PlayerUuid using move semantics */
	void SetPlayerUuid(FGuid&& NewValue) { PlayerUuid = NewValue;   }

	/** @brief List of intra session permissions for a specific player */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TSet<ERHAPI_IntraSessionPermissions> Permissions_Optional{  };
	/** @brief true if Permissions_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Permissions_IsSet{ false };
	/** @brief Gets the value of Permissions_Optional, regardless of it having been set */
	TSet<ERHAPI_IntraSessionPermissions>& GetPermissions() { return Permissions_Optional; }
	/** @brief Gets the value of Permissions_Optional, regardless of it having been set */
	const TSet<ERHAPI_IntraSessionPermissions>& GetPermissions() const { return Permissions_Optional; }
	/** @brief Gets the value of Permissions_Optional, if it has been set, otherwise it returns DefaultValue */
	const TSet<ERHAPI_IntraSessionPermissions>& GetPermissions(const TSet<ERHAPI_IntraSessionPermissions>& DefaultValue) const { if (Permissions_IsSet) return Permissions_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Permissions_Optional and returns true if it has been set, otherwise returns false */
	bool GetPermissions(TSet<ERHAPI_IntraSessionPermissions>& OutValue) const { if (Permissions_IsSet) OutValue = Permissions_Optional; return Permissions_IsSet; }
	/** @brief Returns a pointer to Permissions_Optional, if it has been set, otherwise returns nullptr */
	TSet<ERHAPI_IntraSessionPermissions>* GetPermissionsOrNull() { if (Permissions_IsSet) return (&Permissions_Optional); return nullptr; }
	/** @brief Returns a pointer to Permissions_Optional, if it has been set, otherwise returns nullptr */
	const TSet<ERHAPI_IntraSessionPermissions>* GetPermissionsOrNull() const { if (Permissions_IsSet) return (&Permissions_Optional); return nullptr; }
	/** @brief Sets the value of Permissions_Optional and also sets Permissions_IsSet to true */
	void SetPermissions(const TSet<ERHAPI_IntraSessionPermissions>& NewValue) { Permissions_Optional = NewValue; Permissions_IsSet = true;  }
	/** @brief Sets the value of Permissions_Optional and also sets Permissions_IsSet to true using move semantics */
	void SetPermissions(TSet<ERHAPI_IntraSessionPermissions>&& NewValue) { Permissions_Optional = NewValue; Permissions_IsSet = true;  }
	/** @brief Clears the value of Permissions_Optional and sets Permissions_IsSet to false */
	void ClearPermissions() { Permissions_IsSet = false;  }
	/** @brief Checks whether Permissions_Optional has been set */
	bool IsPermissionsSet() const { return Permissions_IsSet; }
};

/** @} */
