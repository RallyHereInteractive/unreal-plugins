// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "MatchmakingInfo.generated.h"

/** @defgroup RHAPI_MatchmakingInfo RallyHere API Model MatchmakingInfo
 *  @{
 */

/**
 * @brief Info about the matchmaking status in a session
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_MatchmakingInfo : public FRHAPI_Model
{
    GENERATED_BODY()

    /**
    * @brief Fills this object with data from the passed in JSON
    *
    * @param [in] JsonValue Data from the API call.
    *
    * @return true if parsing of the JSON data was successful.
    */
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

    /**
    * @brief Writes the data from this object into the specified JSON Writer stream
    *
    * @param [in] Writer JSON Writer stream to push .
    */
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /** @brief Unique ID for this attempt at matchmaking */
    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    FString TicketId{  };
    /** @brief Gets the value of TicketId */
    FString& GetTicketId() { return TicketId; }
    /** @brief Gets the value of TicketId */
    const FString& GetTicketId() const { return TicketId; }
    /** @brief Sets the value of TicketId */
    void SetTicketId(FString NewValue) { TicketId = NewValue;  }

    /** @brief session-defined custom data */
    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    TMap<FString, FString> CustomData_Optional{  };
    /** @brief true if CustomData_Optional has been set to a value */
    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    bool CustomData_IsSet{ false };
    /** @brief Gets the value of CustomData_Optional, regardless of it having been set */
    TMap<FString, FString>& GetCustomData() { return CustomData_Optional; }
    /** @brief Gets the value of CustomData_Optional, regardless of it having been set */
    const TMap<FString, FString>& GetCustomData() const { return CustomData_Optional; }
    /** @brief Gets the value of CustomData_Optional, if it has been set, otherwise it returns DefaultValue */
    const TMap<FString, FString>& GetCustomData(const TMap<FString, FString>& DefaultValue) const { if (CustomData_IsSet) return CustomData_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of CustomData_Optional and returns true if it has been set, otherwise returns false */
    bool GetCustomData(TMap<FString, FString>& OutValue) const { if (CustomData_IsSet) OutValue = CustomData_Optional; return CustomData_IsSet; }
    /** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
    TMap<FString, FString>* GetCustomDataOrNull() { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
    /** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
    const TMap<FString, FString>* GetCustomDataOrNull() const { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
    /** @brief Sets the value of CustomData_Optional and also sets CustomData_IsSet to true */
    void SetCustomData(TMap<FString, FString> NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true; }
     /** @brief Clears the value of CustomData_Optional and sets CustomData_IsSet to false */
    void ClearCustomData() { CustomData_IsSet = false; }

    /** @brief Unique ID for the joined queue */
    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    FString QueueId_Optional{  };
    /** @brief true if QueueId_Optional has been set to a value */
    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    bool QueueId_IsSet{ false };
    /** @brief Gets the value of QueueId_Optional, regardless of it having been set */
    FString& GetQueueId() { return QueueId_Optional; }
    /** @brief Gets the value of QueueId_Optional, regardless of it having been set */
    const FString& GetQueueId() const { return QueueId_Optional; }
    /** @brief Gets the value of QueueId_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetQueueId(const FString& DefaultValue) const { if (QueueId_IsSet) return QueueId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of QueueId_Optional and returns true if it has been set, otherwise returns false */
    bool GetQueueId(FString& OutValue) const { if (QueueId_IsSet) OutValue = QueueId_Optional; return QueueId_IsSet; }
    /** @brief Returns a pointer to QueueId_Optional, if it has been set, otherwise returns nullptr */
    FString* GetQueueIdOrNull() { if (QueueId_IsSet) return &QueueId_Optional; return nullptr; }
    /** @brief Returns a pointer to QueueId_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetQueueIdOrNull() const { if (QueueId_IsSet) return &QueueId_Optional; return nullptr; }
    /** @brief Sets the value of QueueId_Optional and also sets QueueId_IsSet to true */
    void SetQueueId(FString NewValue) { QueueId_Optional = NewValue; QueueId_IsSet = true; }
     /** @brief Clears the value of QueueId_Optional and sets QueueId_IsSet to false */
    void ClearQueueId() { QueueId_IsSet = false; }
};

/** @} */
