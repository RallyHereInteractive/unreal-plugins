// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "DependenciesSchemasPortal.h"
#include "DeviceType.h"
#include "Platform.h"
#include "PortalUserInfo.generated.h"

/** @defgroup RHAPI_PortalUserInfo RallyHere API Model PortalUserInfo
 *  @{
 */

/**
 * @brief Portal user info
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_PortalUserInfo : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	/** @brief Platform for the user */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	ERHAPI_Platform Platform{  };
	/** @brief Gets the value of Platform */
	ERHAPI_Platform& GetPlatform() { return Platform; }
	/** @brief Gets the value of Platform */
	const ERHAPI_Platform& GetPlatform() const { return Platform; }
	/** @brief Sets the value of Platform */
	void SetPlatform(const ERHAPI_Platform& NewValue) { Platform = NewValue;   }
	/** @brief Sets the value of Platform using move semantics */
	void SetPlatform(ERHAPI_Platform&& NewValue) { Platform = NewValue;   }

	/** @brief Portal ID. *DEPRECATED* use `platform` instead */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	ERHAPI_DependenciesSchemasPortal PortalId{  };
	/** @brief Gets the value of PortalId */
	ERHAPI_DependenciesSchemasPortal& GetPortalId() { return PortalId; }
	/** @brief Gets the value of PortalId */
	const ERHAPI_DependenciesSchemasPortal& GetPortalId() const { return PortalId; }
	/** @brief Sets the value of PortalId */
	void SetPortalId(const ERHAPI_DependenciesSchemasPortal& NewValue) { PortalId = NewValue;   }
	/** @brief Sets the value of PortalId using move semantics */
	void SetPortalId(ERHAPI_DependenciesSchemasPortal&& NewValue) { PortalId = NewValue;   }

	/** @brief Platform User ID */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString PortalUserId{  };
	/** @brief Gets the value of PortalUserId */
	FString& GetPortalUserId() { return PortalUserId; }
	/** @brief Gets the value of PortalUserId */
	const FString& GetPortalUserId() const { return PortalUserId; }
	/** @brief Sets the value of PortalUserId */
	void SetPortalUserId(const FString& NewValue) { PortalUserId = NewValue;   }
	/** @brief Sets the value of PortalUserId using move semantics */
	void SetPortalUserId(FString&& NewValue) { PortalUserId = NewValue;   }

	/** @brief Display name */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString DisplayName{  };
	/** @brief Gets the value of DisplayName */
	FString& GetDisplayName() { return DisplayName; }
	/** @brief Gets the value of DisplayName */
	const FString& GetDisplayName() const { return DisplayName; }
	/** @brief Sets the value of DisplayName */
	void SetDisplayName(const FString& NewValue) { DisplayName = NewValue;   }
	/** @brief Sets the value of DisplayName using move semantics */
	void SetDisplayName(FString&& NewValue) { DisplayName = NewValue;   }

	/** @brief Platform-verified device type of the login */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	ERHAPI_DeviceType DeviceType_Optional{  };
	/** @brief true if DeviceType_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool DeviceType_IsSet{ false };
	/** @brief Gets the value of DeviceType_Optional, regardless of it having been set */
	ERHAPI_DeviceType& GetDeviceType() { return DeviceType_Optional; }
	/** @brief Gets the value of DeviceType_Optional, regardless of it having been set */
	const ERHAPI_DeviceType& GetDeviceType() const { return DeviceType_Optional; }
	/** @brief Gets the value of DeviceType_Optional, if it has been set, otherwise it returns DefaultValue */
	const ERHAPI_DeviceType& GetDeviceType(const ERHAPI_DeviceType& DefaultValue) const { if (DeviceType_IsSet) return DeviceType_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of DeviceType_Optional and returns true if it has been set, otherwise returns false */
	bool GetDeviceType(ERHAPI_DeviceType& OutValue) const { if (DeviceType_IsSet) OutValue = DeviceType_Optional; return DeviceType_IsSet; }
	/** @brief Returns a pointer to DeviceType_Optional, if it has been set, otherwise returns nullptr */
	ERHAPI_DeviceType* GetDeviceTypeOrNull() { if (DeviceType_IsSet) return (&DeviceType_Optional); return nullptr; }
	/** @brief Returns a pointer to DeviceType_Optional, if it has been set, otherwise returns nullptr */
	const ERHAPI_DeviceType* GetDeviceTypeOrNull() const { if (DeviceType_IsSet) return (&DeviceType_Optional); return nullptr; }
	/** @brief Sets the value of DeviceType_Optional and also sets DeviceType_IsSet to true */
	void SetDeviceType(const ERHAPI_DeviceType& NewValue) { DeviceType_Optional = NewValue; DeviceType_IsSet = true;  }
	/** @brief Sets the value of DeviceType_Optional and also sets DeviceType_IsSet to true using move semantics */
	void SetDeviceType(ERHAPI_DeviceType&& NewValue) { DeviceType_Optional = NewValue; DeviceType_IsSet = true;  }
	/** @brief Clears the value of DeviceType_Optional and sets DeviceType_IsSet to false */
	void ClearDeviceType() { DeviceType_IsSet = false;  }
	/** @brief Checks whether DeviceType_Optional has been set */
	bool IsDeviceTypeSet() const { return DeviceType_IsSet; }
};

/** @} */
