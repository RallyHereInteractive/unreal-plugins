// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "EpicVoipCredentialsResponse.generated.h"

/** @defgroup RHAPI_EpicVoipCredentialsResponse RallyHere API Model EpicVoipCredentialsResponse
 *  @{
 */

/**
 * @brief 
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_EpicVoipCredentialsResponse : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	/** @brief Epic voice room identifier */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString RoomId{  };
	/** @brief Gets the value of RoomId */
	FString& GetRoomId() { return RoomId; }
	/** @brief Gets the value of RoomId */
	const FString& GetRoomId() const { return RoomId; }
	/** @brief Sets the value of RoomId */
	void SetRoomId(const FString& NewValue) { RoomId = NewValue;   }
	/** @brief Sets the value of RoomId using move semantics */
	void SetRoomId(FString&& NewValue) { RoomId = NewValue;   }

	/** @brief Token for the participant to join the Epic voice room */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString ParticipantToken{  };
	/** @brief Gets the value of ParticipantToken */
	FString& GetParticipantToken() { return ParticipantToken; }
	/** @brief Gets the value of ParticipantToken */
	const FString& GetParticipantToken() const { return ParticipantToken; }
	/** @brief Sets the value of ParticipantToken */
	void SetParticipantToken(const FString& NewValue) { ParticipantToken = NewValue;   }
	/** @brief Sets the value of ParticipantToken using move semantics */
	void SetParticipantToken(FString&& NewValue) { ParticipantToken = NewValue;   }

	/** @brief Base URL for Epic voice client connections */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString ClientBaseUrl{  };
	/** @brief Gets the value of ClientBaseUrl */
	FString& GetClientBaseUrl() { return ClientBaseUrl; }
	/** @brief Gets the value of ClientBaseUrl */
	const FString& GetClientBaseUrl() const { return ClientBaseUrl; }
	/** @brief Sets the value of ClientBaseUrl */
	void SetClientBaseUrl(const FString& NewValue) { ClientBaseUrl = NewValue;   }
	/** @brief Sets the value of ClientBaseUrl using move semantics */
	void SetClientBaseUrl(FString&& NewValue) { ClientBaseUrl = NewValue;   }

	/** @brief Epic ProductUserId for the authenticated user */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString ProductUserId{  };
	/** @brief Gets the value of ProductUserId */
	FString& GetProductUserId() { return ProductUserId; }
	/** @brief Gets the value of ProductUserId */
	const FString& GetProductUserId() const { return ProductUserId; }
	/** @brief Sets the value of ProductUserId */
	void SetProductUserId(const FString& NewValue) { ProductUserId = NewValue;   }
	/** @brief Sets the value of ProductUserId using move semantics */
	void SetProductUserId(FString&& NewValue) { ProductUserId = NewValue;   }
};

/** @} */
