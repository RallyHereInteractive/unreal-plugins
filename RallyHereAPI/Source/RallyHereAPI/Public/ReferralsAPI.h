// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereAPIAuthContext.h"
#include "RallyHereAPIHelpers.h"
#include "HTTPValidationError.h"
#include "HzApiErrorModel.h"
#include "PlayerReferral.h"
#include "PlayerReferralCode.h"
#include "PlayerReferralSetPayload.h"

namespace RallyHereAPI
{
using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

// forward declaration
class FReferralsAPI;

/**
 * @brief Generate Referral Code
 * Generate and return a player's referral code if they don't already have one.
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) : `refer:set:any`
 * 
 * - For the player themselves : `refer:set:self`
*/
struct RALLYHEREAPI_API FRequest_GenerateReferralCode : public FRequest
{
	FRequest_GenerateReferralCode();
	virtual ~FRequest_GenerateReferralCode() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	/* The player_uuid to generate a referral code for */
	FGuid PlayerUuid;
};

/** The response type for FRequest_GenerateReferralCode */
struct RALLYHEREAPI_API FResponse_GenerateReferralCode : public FResponseAccessorTemplate<FRHAPI_PlayerReferralCode, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_PlayerReferralCode, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GenerateReferralCode(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GenerateReferralCode() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PlayerReferralCode Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PlayerReferralCode& OutContent) const { return TryGetContent<FRHAPI_PlayerReferralCode>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PlayerReferralCode>& OutContent) const { return TryGetContent<FRHAPI_PlayerReferralCode>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PlayerReferralCode* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PlayerReferralCode>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PlayerReferralCode> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PlayerReferralCode>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PlayerReferralCode& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GenerateReferralCode */
DECLARE_DELEGATE_OneParam(FDelegate_GenerateReferralCode, const FResponse_GenerateReferralCode&);

/** @brief A helper metadata object for GenerateReferralCode that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GenerateReferralCode
{
	/** The request type */
	typedef FRequest_GenerateReferralCode Request;
	/** The response type */
	typedef FResponse_GenerateReferralCode Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GenerateReferralCode Delegate;
	/** The API object that supports this API call */
	typedef FReferralsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Player Referrals
 * Get all referrals where this player is the referrer.
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) : `refer:read:any`
 * 
 * - For the player themselves : `refer:read:self`
*/
struct RALLYHEREAPI_API FRequest_GetPlayerReferrals : public FRequest
{
	FRequest_GetPlayerReferrals();
	virtual ~FRequest_GetPlayerReferrals() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	/* The player_uuid to get the referrals for */
	FGuid PlayerUuid;
};

/** The response type for FRequest_GetPlayerReferrals */
struct RALLYHEREAPI_API FResponse_GetPlayerReferrals : public FResponseAccessorTemplate<TArray<FRHAPI_PlayerReferral>, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<TArray<FRHAPI_PlayerReferral>, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetPlayerReferrals(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetPlayerReferrals() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	TArray<FRHAPI_PlayerReferral> Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TArray<FRHAPI_PlayerReferral>& OutContent) const { return TryGetContent<TArray<FRHAPI_PlayerReferral>>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<TArray<FRHAPI_PlayerReferral>>& OutContent) const { return TryGetContent<TArray<FRHAPI_PlayerReferral>>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const TArray<FRHAPI_PlayerReferral>* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<TArray<FRHAPI_PlayerReferral>>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<TArray<FRHAPI_PlayerReferral>> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<TArray<FRHAPI_PlayerReferral>>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(TArray<FRHAPI_PlayerReferral>& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetPlayerReferrals */
DECLARE_DELEGATE_OneParam(FDelegate_GetPlayerReferrals, const FResponse_GetPlayerReferrals&);

/** @brief A helper metadata object for GetPlayerReferrals that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetPlayerReferrals
{
	/** The request type */
	typedef FRequest_GetPlayerReferrals Request;
	/** The response type */
	typedef FResponse_GetPlayerReferrals Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetPlayerReferrals Delegate;
	/** The API object that supports this API call */
	typedef FReferralsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Player Referrer
 * Get the player_uuid of the player who referred this player.
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) : `refer:read:any`
 * 
 * - For the player themselves : `refer:read:self`
*/
struct RALLYHEREAPI_API FRequest_GetPlayerReferrer : public FRequest
{
	FRequest_GetPlayerReferrer();
	virtual ~FRequest_GetPlayerReferrer() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	/* The referred player_uuid to get the referrer for */
	FGuid PlayerUuid;
};

/** The response type for FRequest_GetPlayerReferrer */
struct RALLYHEREAPI_API FResponse_GetPlayerReferrer : public FResponseAccessorTemplate<FRHAPI_PlayerReferral, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_PlayerReferral, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetPlayerReferrer(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetPlayerReferrer() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PlayerReferral Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PlayerReferral& OutContent) const { return TryGetContent<FRHAPI_PlayerReferral>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PlayerReferral>& OutContent) const { return TryGetContent<FRHAPI_PlayerReferral>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PlayerReferral* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PlayerReferral>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PlayerReferral> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PlayerReferral>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PlayerReferral& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetPlayerReferrer */
DECLARE_DELEGATE_OneParam(FDelegate_GetPlayerReferrer, const FResponse_GetPlayerReferrer&);

/** @brief A helper metadata object for GetPlayerReferrer that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetPlayerReferrer
{
	/** The request type */
	typedef FRequest_GetPlayerReferrer Request;
	/** The response type */
	typedef FResponse_GetPlayerReferrer Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetPlayerReferrer Delegate;
	/** The API object that supports this API call */
	typedef FReferralsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Referral Code
 * Get a player's referral code if they have one. Otherwise, return an 404 error.
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) : `refer:read:any`
 * 
 * - For the player themselves : `refer:read:self`
*/
struct RALLYHEREAPI_API FRequest_GetReferralCode : public FRequest
{
	FRequest_GetReferralCode();
	virtual ~FRequest_GetReferralCode() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	/* The player_uuid to get the referral code for */
	FGuid PlayerUuid;
};

/** The response type for FRequest_GetReferralCode */
struct RALLYHEREAPI_API FResponse_GetReferralCode : public FResponseAccessorTemplate<FRHAPI_PlayerReferralCode, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_PlayerReferralCode, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetReferralCode(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetReferralCode() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PlayerReferralCode Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PlayerReferralCode& OutContent) const { return TryGetContent<FRHAPI_PlayerReferralCode>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PlayerReferralCode>& OutContent) const { return TryGetContent<FRHAPI_PlayerReferralCode>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PlayerReferralCode* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PlayerReferralCode>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PlayerReferralCode> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PlayerReferralCode>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PlayerReferralCode& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetReferralCode */
DECLARE_DELEGATE_OneParam(FDelegate_GetReferralCode, const FResponse_GetReferralCode&);

/** @brief A helper metadata object for GetReferralCode that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetReferralCode
{
	/** The request type */
	typedef FRequest_GetReferralCode Request;
	/** The response type */
	typedef FResponse_GetReferralCode Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetReferralCode Delegate;
	/** The API object that supports this API call */
	typedef FReferralsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Set Player Referrer
 * Set a player's referrer using either a player_uuid or referral code.
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) : `refer:set:any`
 * 
 * - For the player themselves : `refer:set:self`
*/
struct RALLYHEREAPI_API FRequest_SetPlayerReferrer : public FRequest
{
	FRequest_SetPlayerReferrer();
	virtual ~FRequest_SetPlayerReferrer() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	/* The player_uuid to set the referrer for */
	FGuid PlayerUuid;
	FRHAPI_PlayerReferralSetPayload PlayerReferralSetPayload;
};

/** The response type for FRequest_SetPlayerReferrer */
struct RALLYHEREAPI_API FResponse_SetPlayerReferrer : public FResponseAccessorTemplate<FRHAPI_PlayerReferral, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_PlayerReferral, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_SetPlayerReferrer(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_SetPlayerReferrer() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PlayerReferral Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PlayerReferral& OutContent) const { return TryGetContent<FRHAPI_PlayerReferral>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PlayerReferral>& OutContent) const { return TryGetContent<FRHAPI_PlayerReferral>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PlayerReferral* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PlayerReferral>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PlayerReferral> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PlayerReferral>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PlayerReferral& OutContent) const;

	/* Response 400
	Bad Request
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_SetPlayerReferrer */
DECLARE_DELEGATE_OneParam(FDelegate_SetPlayerReferrer, const FResponse_SetPlayerReferrer&);

/** @brief A helper metadata object for SetPlayerReferrer that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_SetPlayerReferrer
{
	/** The request type */
	typedef FRequest_SetPlayerReferrer Request;
	/** The response type */
	typedef FResponse_SetPlayerReferrer Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_SetPlayerReferrer Delegate;
	/** The API object that supports this API call */
	typedef FReferralsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};


/** The API class itself, which will handle calls to */
class RALLYHEREAPI_API FReferralsAPI : public FAPI
{
public:
	FReferralsAPI();
	virtual ~FReferralsAPI();

	FHttpRequestPtr GenerateReferralCode(const FRequest_GenerateReferralCode& Request, const FDelegate_GenerateReferralCode& Delegate = FDelegate_GenerateReferralCode(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGenerateReferralCodeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GenerateReferralCode Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetPlayerReferrals(const FRequest_GetPlayerReferrals& Request, const FDelegate_GetPlayerReferrals& Delegate = FDelegate_GetPlayerReferrals(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetPlayerReferralsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlayerReferrals Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetPlayerReferrer(const FRequest_GetPlayerReferrer& Request, const FDelegate_GetPlayerReferrer& Delegate = FDelegate_GetPlayerReferrer(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetPlayerReferrerResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlayerReferrer Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetReferralCode(const FRequest_GetReferralCode& Request, const FDelegate_GetReferralCode& Delegate = FDelegate_GetReferralCode(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetReferralCodeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetReferralCode Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr SetPlayerReferrer(const FRequest_SetPlayerReferrer& Request, const FDelegate_SetPlayerReferrer& Delegate = FDelegate_SetPlayerReferrer(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnSetPlayerReferrerResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SetPlayerReferrer Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};



}
