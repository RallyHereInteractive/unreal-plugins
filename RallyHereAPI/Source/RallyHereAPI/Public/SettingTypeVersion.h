// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "SettingTypeVersion.generated.h"

/** @defgroup RHAPI_SettingTypeVersion RallyHere API Model SettingTypeVersion
 *  @{
 */

/**
 * @brief 
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_SettingTypeVersion : public FRHAPI_Model
{
    GENERATED_BODY()

    /**
    * @brief Fills this object with data from the passed in JSON
    *
    * @param [in] JsonValue Data from the API call.
    *
    * @return true if parsing of the JSON data was successful.
    */
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

    /**
    * @brief Writes the data from this object into the specified JSON Writer stream
    *
    * @param [in] Writer JSON Writer stream to push .
    */
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /** @brief Are players allowed to set/update keys to this version of the setting type?  Does not affect getting or deleting existing settings. */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool AllowUpdate_Optional{  };
    /** @brief true if AllowUpdate_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool AllowUpdate_IsSet{ false };
    /** @brief Gets the value of AllowUpdate_Optional, regardless of it having been set */
    bool& GetAllowUpdate() { return AllowUpdate_Optional; }
    /** @brief Gets the value of AllowUpdate_Optional, regardless of it having been set */
    const bool& GetAllowUpdate() const { return AllowUpdate_Optional; }
    /** @brief Gets the value of AllowUpdate_Optional, if it has been set, otherwise it returns DefaultValue */
    const bool& GetAllowUpdate(const bool& DefaultValue) const { if (AllowUpdate_IsSet) return AllowUpdate_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of AllowUpdate_Optional and returns true if it has been set, otherwise returns false */
    bool GetAllowUpdate(bool& OutValue) const { if (AllowUpdate_IsSet) OutValue = AllowUpdate_Optional; return AllowUpdate_IsSet; }
    /** @brief Returns a pointer to AllowUpdate_Optional, if it has been set, otherwise returns nullptr */
    bool* GetAllowUpdateOrNull() { if (AllowUpdate_IsSet) return &AllowUpdate_Optional; return nullptr; }
    /** @brief Returns a pointer to AllowUpdate_Optional, if it has been set, otherwise returns nullptr */
    const bool* GetAllowUpdateOrNull() const { if (AllowUpdate_IsSet) return &AllowUpdate_Optional; return nullptr; }
    /** @brief Sets the value of AllowUpdate_Optional and also sets AllowUpdate_IsSet to true */
    void SetAllowUpdate(bool NewValue) { AllowUpdate_Optional = NewValue; AllowUpdate_IsSet = true; }
     /** @brief Clears the value of AllowUpdate_Optional and sets AllowUpdate_IsSet to false */
    void ClearAllowUpdate() { AllowUpdate_Optional = true; AllowUpdate_IsSet = false; }
    /** @brief Returns true if AllowUpdate_Optional is set and matches the default value */
    bool IsAllowUpdateDefaultValue() const { return AllowUpdate_IsSet && AllowUpdate_Optional == true; }
    /** @brief Sets the value of AllowUpdate_Optional to its default and also sets AllowUpdate_IsSet to true */
    void SetAllowUpdateToDefault() { AllowUpdate_Optional = true; AllowUpdate_IsSet = true; }

    /** @brief Regex that is used to verify keys at assignment time */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString KeyRegex_Optional{  };
    /** @brief true if KeyRegex_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool KeyRegex_IsSet{ false };
    /** @brief Gets the value of KeyRegex_Optional, regardless of it having been set */
    FString& GetKeyRegex() { return KeyRegex_Optional; }
    /** @brief Gets the value of KeyRegex_Optional, regardless of it having been set */
    const FString& GetKeyRegex() const { return KeyRegex_Optional; }
    /** @brief Gets the value of KeyRegex_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetKeyRegex(const FString& DefaultValue) const { if (KeyRegex_IsSet) return KeyRegex_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of KeyRegex_Optional and returns true if it has been set, otherwise returns false */
    bool GetKeyRegex(FString& OutValue) const { if (KeyRegex_IsSet) OutValue = KeyRegex_Optional; return KeyRegex_IsSet; }
    /** @brief Returns a pointer to KeyRegex_Optional, if it has been set, otherwise returns nullptr */
    FString* GetKeyRegexOrNull() { if (KeyRegex_IsSet) return &KeyRegex_Optional; return nullptr; }
    /** @brief Returns a pointer to KeyRegex_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetKeyRegexOrNull() const { if (KeyRegex_IsSet) return &KeyRegex_Optional; return nullptr; }
    /** @brief Sets the value of KeyRegex_Optional and also sets KeyRegex_IsSet to true */
    void SetKeyRegex(FString NewValue) { KeyRegex_Optional = NewValue; KeyRegex_IsSet = true; }
     /** @brief Clears the value of KeyRegex_Optional and sets KeyRegex_IsSet to false */
    void ClearKeyRegex() { KeyRegex_Optional = TEXT("^.+$"); KeyRegex_IsSet = false; }
    /** @brief Returns true if KeyRegex_Optional is set and matches the default value */
    bool IsKeyRegexDefaultValue() const { return KeyRegex_IsSet && KeyRegex_Optional == TEXT("^.+$"); }
    /** @brief Sets the value of KeyRegex_Optional to its default and also sets KeyRegex_IsSet to true */
    void SetKeyRegexToDefault() { KeyRegex_Optional = TEXT("^.+$"); KeyRegex_IsSet = true; }

    /** @brief [jsonschema](https://json-schema.org/understanding-json-schema/index.html) that is used to verify values at assignment time */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FRHAPI_JsonObject ValueJsonschema{  };
    /** @brief Gets the value of ValueJsonschema */
    FRHAPI_JsonObject& GetValueJsonschema() { return ValueJsonschema; }
    /** @brief Gets the value of ValueJsonschema */
    const FRHAPI_JsonObject& GetValueJsonschema() const { return ValueJsonschema; }
    /** @brief Sets the value of ValueJsonschema */
    void SetValueJsonschema(FRHAPI_JsonObject NewValue) { ValueJsonschema = NewValue;  }

    /** @brief Custom data that was provided when the setting type was created */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    TMap<FString, FString> CustomData_Optional{  };
    /** @brief true if CustomData_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool CustomData_IsSet{ false };
    /** @brief Gets the value of CustomData_Optional, regardless of it having been set */
    TMap<FString, FString>& GetCustomData() { return CustomData_Optional; }
    /** @brief Gets the value of CustomData_Optional, regardless of it having been set */
    const TMap<FString, FString>& GetCustomData() const { return CustomData_Optional; }
    /** @brief Gets the value of CustomData_Optional, if it has been set, otherwise it returns DefaultValue */
    const TMap<FString, FString>& GetCustomData(const TMap<FString, FString>& DefaultValue) const { if (CustomData_IsSet) return CustomData_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of CustomData_Optional and returns true if it has been set, otherwise returns false */
    bool GetCustomData(TMap<FString, FString>& OutValue) const { if (CustomData_IsSet) OutValue = CustomData_Optional; return CustomData_IsSet; }
    /** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
    TMap<FString, FString>* GetCustomDataOrNull() { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
    /** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
    const TMap<FString, FString>* GetCustomDataOrNull() const { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
    /** @brief Sets the value of CustomData_Optional and also sets CustomData_IsSet to true */
    void SetCustomData(TMap<FString, FString> NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true; }
     /** @brief Clears the value of CustomData_Optional and sets CustomData_IsSet to false */
    void ClearCustomData() { CustomData_IsSet = false; }
};

/** @} */
