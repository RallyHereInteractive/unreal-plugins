// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "SettingTypeVersion.generated.h"

/** @defgroup RHAPI_SettingTypeVersion RallyHere API Model SettingTypeVersion
 *  @{
 */

/**
 * @brief 
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_SettingTypeVersion : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	/** @brief Are players allowed to set/update keys to this version of the setting type?  Does not affect getting or deleting existing settings. */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool AllowUpdate_Optional{ true };
	/** @brief true if AllowUpdate_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool AllowUpdate_IsSet{ false };
	/** @brief Gets the value of AllowUpdate_Optional, regardless of it having been set */
	FORCEINLINE bool& GetAllowUpdate() { return AllowUpdate_Optional; }
	/** @brief Gets the value of AllowUpdate_Optional, regardless of it having been set */
	FORCEINLINE const bool& GetAllowUpdate() const { return AllowUpdate_Optional; }
	/** @brief Gets the value of AllowUpdate_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const bool& GetAllowUpdate(const bool& DefaultValue) const { if (AllowUpdate_IsSet) return AllowUpdate_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of AllowUpdate_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetAllowUpdate(bool& OutValue) const { if (AllowUpdate_IsSet) OutValue = AllowUpdate_Optional; return AllowUpdate_IsSet; }
	/** @brief Returns a pointer to AllowUpdate_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE bool* GetAllowUpdateOrNull() { if (AllowUpdate_IsSet) return (&AllowUpdate_Optional); return nullptr; }
	/** @brief Returns a pointer to AllowUpdate_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const bool* GetAllowUpdateOrNull() const { if (AllowUpdate_IsSet) return (&AllowUpdate_Optional); return nullptr; }
	/** @brief Sets the value of AllowUpdate_Optional and also sets AllowUpdate_IsSet to true */
	FORCEINLINE void SetAllowUpdate(const bool& NewValue) { AllowUpdate_Optional = NewValue; AllowUpdate_IsSet = true;  }
	/** @brief Sets the value of AllowUpdate_Optional and also sets AllowUpdate_IsSet to true using move semantics */
	FORCEINLINE void SetAllowUpdate(bool&& NewValue) { AllowUpdate_Optional = NewValue; AllowUpdate_IsSet = true;  }
	/** @brief Clears the value of AllowUpdate_Optional and sets AllowUpdate_IsSet to false */
	void ClearAllowUpdate() { AllowUpdate_Optional = true; AllowUpdate_IsSet = false;  }
	/** @brief Returns the default value of AllowUpdate */
	FORCEINLINE bool GetDefaultValue_AllowUpdate() { return true; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool IsInternal_Optional{ false };
	/** @brief true if IsInternal_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool IsInternal_IsSet{ false };
	/** @brief true if IsInternal_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool IsInternal_IsNull{ false };
	/** @brief Gets the value of IsInternal_Optional, regardless of it having been set */
	FORCEINLINE bool& GetIsInternal() { return IsInternal_Optional; }
	/** @brief Gets the value of IsInternal_Optional, regardless of it having been set */
	FORCEINLINE const bool& GetIsInternal() const { return IsInternal_Optional; }
	/** @brief Gets the value of IsInternal_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const bool& GetIsInternal(const bool& DefaultValue) const { if (IsInternal_IsSet) return IsInternal_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of IsInternal_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetIsInternal(bool& OutValue) const { if (IsInternal_IsSet && !IsInternal_IsNull) OutValue = IsInternal_Optional; return IsInternal_IsSet; }
	/** @brief Returns a pointer to IsInternal_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE bool* GetIsInternalOrNull() { if (IsInternal_IsSet) return (IsInternal_IsNull ? nullptr : &IsInternal_Optional); return nullptr; }
	/** @brief Returns a pointer to IsInternal_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const bool* GetIsInternalOrNull() const { if (IsInternal_IsSet) return (IsInternal_IsNull ? nullptr : &IsInternal_Optional); return nullptr; }
	/** @brief Sets the value of IsInternal_Optional and also sets IsInternal_IsSet to true */
	FORCEINLINE void SetIsInternal(const bool& NewValue) { IsInternal_Optional = NewValue; IsInternal_IsSet = true; IsInternal_IsNull = false; }
	/** @brief Sets the value of IsInternal_Optional and also sets IsInternal_IsSet to true using move semantics */
	FORCEINLINE void SetIsInternal(bool&& NewValue) { IsInternal_Optional = NewValue; IsInternal_IsSet = true; IsInternal_IsNull = false; }
	/** @brief Clears the value of IsInternal_Optional and sets IsInternal_IsSet to false */
	void ClearIsInternal() { IsInternal_Optional = false; IsInternal_IsSet = false; IsInternal_IsNull = false; }
	/** @brief Returns the default value of IsInternal */
	FORCEINLINE bool GetDefaultValue_IsInternal() { return false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetIsInternalToNull() { IsInternal_IsSet = true; IsInternal_IsNull = true; }
	/** @brief Checks whether IsInternal_Optional is set to null */
	FORCEINLINE bool IsIsInternalNull() const { return IsInternal_IsSet && IsInternal_IsNull; }

	/** @brief Regex that is used to verify keys at assignment time */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString KeyRegex_Optional{ TEXT("^.+$") };
	/** @brief true if KeyRegex_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool KeyRegex_IsSet{ false };
	/** @brief Gets the value of KeyRegex_Optional, regardless of it having been set */
	FORCEINLINE FString& GetKeyRegex() { return KeyRegex_Optional; }
	/** @brief Gets the value of KeyRegex_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetKeyRegex() const { return KeyRegex_Optional; }
	/** @brief Gets the value of KeyRegex_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetKeyRegex(const FString& DefaultValue) const { if (KeyRegex_IsSet) return KeyRegex_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of KeyRegex_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetKeyRegex(FString& OutValue) const { if (KeyRegex_IsSet) OutValue = KeyRegex_Optional; return KeyRegex_IsSet; }
	/** @brief Returns a pointer to KeyRegex_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetKeyRegexOrNull() { if (KeyRegex_IsSet) return (&KeyRegex_Optional); return nullptr; }
	/** @brief Returns a pointer to KeyRegex_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetKeyRegexOrNull() const { if (KeyRegex_IsSet) return (&KeyRegex_Optional); return nullptr; }
	/** @brief Sets the value of KeyRegex_Optional and also sets KeyRegex_IsSet to true */
	FORCEINLINE void SetKeyRegex(const FString& NewValue) { KeyRegex_Optional = NewValue; KeyRegex_IsSet = true;  }
	/** @brief Sets the value of KeyRegex_Optional and also sets KeyRegex_IsSet to true using move semantics */
	FORCEINLINE void SetKeyRegex(FString&& NewValue) { KeyRegex_Optional = NewValue; KeyRegex_IsSet = true;  }
	/** @brief Clears the value of KeyRegex_Optional and sets KeyRegex_IsSet to false */
	void ClearKeyRegex() { KeyRegex_Optional = TEXT("^.+$"); KeyRegex_IsSet = false;  }
	/** @brief Returns the default value of KeyRegex */
	FORCEINLINE FString GetDefaultValue_KeyRegex() { return TEXT("^.+$"); }

	/** @brief [jsonschema](https://json-schema.org/understanding-json-schema/index.html) that is used to verify values at assignment time */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TMap<FString, FRHAPI_JsonValue> ValueJsonschema{  };
	/** @brief Gets the value of ValueJsonschema */
	FORCEINLINE TMap<FString, FRHAPI_JsonValue>& GetValueJsonschema() { return ValueJsonschema; }
	/** @brief Gets the value of ValueJsonschema */
	FORCEINLINE const TMap<FString, FRHAPI_JsonValue>& GetValueJsonschema() const { return ValueJsonschema; }
	/** @brief Sets the value of ValueJsonschema */
	FORCEINLINE void SetValueJsonschema(const TMap<FString, FRHAPI_JsonValue>& NewValue) { ValueJsonschema = NewValue;   }
	/** @brief Sets the value of ValueJsonschema using move semantics */
	FORCEINLINE void SetValueJsonschema(TMap<FString, FRHAPI_JsonValue>&& NewValue) { ValueJsonschema = NewValue;   }

	/** @brief Custom data that was provided when the setting type was created */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TMap<FString, FString> CustomData_Optional{  };
	/** @brief true if CustomData_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool CustomData_IsSet{ false };
	/** @brief Gets the value of CustomData_Optional, regardless of it having been set */
	FORCEINLINE TMap<FString, FString>& GetCustomData() { return CustomData_Optional; }
	/** @brief Gets the value of CustomData_Optional, regardless of it having been set */
	FORCEINLINE const TMap<FString, FString>& GetCustomData() const { return CustomData_Optional; }
	/** @brief Gets the value of CustomData_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const TMap<FString, FString>& GetCustomData(const TMap<FString, FString>& DefaultValue) const { if (CustomData_IsSet) return CustomData_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of CustomData_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetCustomData(TMap<FString, FString>& OutValue) const { if (CustomData_IsSet) OutValue = CustomData_Optional; return CustomData_IsSet; }
	/** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE TMap<FString, FString>* GetCustomDataOrNull() { if (CustomData_IsSet) return (&CustomData_Optional); return nullptr; }
	/** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const TMap<FString, FString>* GetCustomDataOrNull() const { if (CustomData_IsSet) return (&CustomData_Optional); return nullptr; }
	/** @brief Sets the value of CustomData_Optional and also sets CustomData_IsSet to true */
	FORCEINLINE void SetCustomData(const TMap<FString, FString>& NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true;  }
	/** @brief Sets the value of CustomData_Optional and also sets CustomData_IsSet to true using move semantics */
	FORCEINLINE void SetCustomData(TMap<FString, FString>&& NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true;  }
	/** @brief Clears the value of CustomData_Optional and sets CustomData_IsSet to false */
	void ClearCustomData() { CustomData_IsSet = false;  }
};

/** @} */
