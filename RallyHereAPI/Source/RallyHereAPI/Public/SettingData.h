// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "SettingData.generated.h"

/** @defgroup RHAPI_SettingData RallyHere API Model SettingData
 *  @{
 */

/**
 * @brief Setting version/value document from a specific setting type/key for a player
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_SettingData : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	/** @brief Version of the Setting Type schema that was used to validate the value document. */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 V{ 0 };
	/** @brief Gets the value of V */
	FORCEINLINE int32& GetV() { return V; }
	/** @brief Gets the value of V */
	FORCEINLINE const int32& GetV() const { return V; }
	/** @brief Sets the value of V */
	FORCEINLINE void SetV(const int32& NewValue) { V = NewValue;   }
	/** @brief Sets the value of V using move semantics */
	FORCEINLINE void SetV(int32&& NewValue) { V = NewValue;   }
	/** @brief Returns the default value of V */
	FORCEINLINE int32 GetDefaultValue_V() { return 0; }

	/** @brief Setting Value document */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_JsonValue Value{  };
	/** @brief true if Value has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Value_IsNull{ false };
	/** @brief Gets the value of Value */
	FORCEINLINE FRHAPI_JsonValue& GetValue() { return Value; }
	/** @brief Gets the value of Value */
	FORCEINLINE const FRHAPI_JsonValue& GetValue() const { return Value; }
	/** @brief Sets the value of Value */
	FORCEINLINE void SetValue(const FRHAPI_JsonValue& NewValue) { Value = NewValue;  Value_IsNull = false; }
	/** @brief Sets the value of Value using move semantics */
	FORCEINLINE void SetValue(FRHAPI_JsonValue&& NewValue) { Value = NewValue;  Value_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetValueToNull() { Value_IsNull = true; }
	/** @brief Checks whether Value is set to null */
	FORCEINLINE bool IsValueNull() const { return  Value_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString Etag_Optional{  };
	/** @brief true if Etag_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Etag_IsSet{ false };
	/** @brief true if Etag_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Etag_IsNull{ false };
	/** @brief Gets the value of Etag_Optional, regardless of it having been set */
	FORCEINLINE FString& GetEtag() { return Etag_Optional; }
	/** @brief Gets the value of Etag_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetEtag() const { return Etag_Optional; }
	/** @brief Gets the value of Etag_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetEtag(const FString& DefaultValue) const { if (Etag_IsSet) return Etag_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Etag_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetEtag(FString& OutValue) const { if (Etag_IsSet && !Etag_IsNull) OutValue = Etag_Optional; return Etag_IsSet; }
	/** @brief Returns a pointer to Etag_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetEtagOrNull() { if (Etag_IsSet) return (Etag_IsNull ? nullptr : &Etag_Optional); return nullptr; }
	/** @brief Returns a pointer to Etag_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetEtagOrNull() const { if (Etag_IsSet) return (Etag_IsNull ? nullptr : &Etag_Optional); return nullptr; }
	/** @brief Sets the value of Etag_Optional and also sets Etag_IsSet to true */
	FORCEINLINE void SetEtag(const FString& NewValue) { Etag_Optional = NewValue; Etag_IsSet = true; Etag_IsNull = false; }
	/** @brief Sets the value of Etag_Optional and also sets Etag_IsSet to true using move semantics */
	FORCEINLINE void SetEtag(FString&& NewValue) { Etag_Optional = NewValue; Etag_IsSet = true; Etag_IsNull = false; }
	/** @brief Clears the value of Etag_Optional and sets Etag_IsSet to false */
	void ClearEtag() { Etag_IsSet = false; Etag_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetEtagToNull() { Etag_IsSet = true; Etag_IsNull = true; }
	/** @brief Checks whether Etag_Optional is set to null */
	FORCEINLINE bool IsEtagNull() const { return Etag_IsSet && Etag_IsNull; }

	/** @brief Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FDateTime LastModified_Optional{  };
	/** @brief true if LastModified_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool LastModified_IsSet{ false };
	/** @brief true if LastModified_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool LastModified_IsNull{ false };
	/** @brief Gets the value of LastModified_Optional, regardless of it having been set */
	FORCEINLINE FDateTime& GetLastModified() { return LastModified_Optional; }
	/** @brief Gets the value of LastModified_Optional, regardless of it having been set */
	FORCEINLINE const FDateTime& GetLastModified() const { return LastModified_Optional; }
	/** @brief Gets the value of LastModified_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FDateTime& GetLastModified(const FDateTime& DefaultValue) const { if (LastModified_IsSet) return LastModified_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of LastModified_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetLastModified(FDateTime& OutValue) const { if (LastModified_IsSet && !LastModified_IsNull) OutValue = LastModified_Optional; return LastModified_IsSet; }
	/** @brief Returns a pointer to LastModified_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FDateTime* GetLastModifiedOrNull() { if (LastModified_IsSet) return (LastModified_IsNull ? nullptr : &LastModified_Optional); return nullptr; }
	/** @brief Returns a pointer to LastModified_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FDateTime* GetLastModifiedOrNull() const { if (LastModified_IsSet) return (LastModified_IsNull ? nullptr : &LastModified_Optional); return nullptr; }
	/** @brief Sets the value of LastModified_Optional and also sets LastModified_IsSet to true */
	FORCEINLINE void SetLastModified(const FDateTime& NewValue) { LastModified_Optional = NewValue; LastModified_IsSet = true; LastModified_IsNull = false; }
	/** @brief Sets the value of LastModified_Optional and also sets LastModified_IsSet to true using move semantics */
	FORCEINLINE void SetLastModified(FDateTime&& NewValue) { LastModified_Optional = NewValue; LastModified_IsSet = true; LastModified_IsNull = false; }
	/** @brief Clears the value of LastModified_Optional and sets LastModified_IsSet to false */
	void ClearLastModified() { LastModified_IsSet = false; LastModified_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetLastModifiedToNull() { LastModified_IsSet = true; LastModified_IsNull = true; }
	/** @brief Checks whether LastModified_Optional is set to null */
	FORCEINLINE bool IsLastModifiedNull() const { return LastModified_IsSet && LastModified_IsNull; }
};

/** @} */
