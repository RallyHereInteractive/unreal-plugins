// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "MatchReward.generated.h"

/** @defgroup RHAPI_MatchReward RallyHere API Model MatchReward
 *  @{
 */

/**
 * @brief 
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_MatchReward : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	/** @brief Which loot to grant to the player */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 LootId{ 0 };
	/** @brief Gets the value of LootId */
	int32& GetLootId() { return LootId; }
	/** @brief Gets the value of LootId */
	const int32& GetLootId() const { return LootId; }
	/** @brief Sets the value of LootId */
	void SetLootId(const int32& NewValue) { LootId = NewValue;   }
	/** @brief Sets the value of LootId using move semantics */
	void SetLootId(int32&& NewValue) { LootId = NewValue;   }
	/** @brief Returns true if LootId matches the default value */
	bool IsLootIdDefaultValue() const { return LootId == 0; }
	/** @brief Sets the value of LootId to its default  */
	void SetLootIdToDefault() { SetLootId(0); }

	/** @brief How many times to grant the loot to the player */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 Quantity{ 0 };
	/** @brief Gets the value of Quantity */
	int32& GetQuantity() { return Quantity; }
	/** @brief Gets the value of Quantity */
	const int32& GetQuantity() const { return Quantity; }
	/** @brief Sets the value of Quantity */
	void SetQuantity(const int32& NewValue) { Quantity = NewValue;   }
	/** @brief Sets the value of Quantity using move semantics */
	void SetQuantity(int32&& NewValue) { Quantity = NewValue;   }
	/** @brief Returns true if Quantity matches the default value */
	bool IsQuantityDefaultValue() const { return Quantity == 0; }
	/** @brief Sets the value of Quantity to its default  */
	void SetQuantityToDefault() { SetQuantity(0); }
};

/** @} */
