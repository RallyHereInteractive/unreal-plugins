// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "MatchMakingProfileV2.h"
#include "TicketData.h"
#include "MatchmakingResults.generated.h"

/** @defgroup RHAPI_MatchmakingResults RallyHere API Model MatchmakingResults
 *  @{
 */

/**
 * @brief 
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_MatchmakingResults : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	/** @brief Unique ID */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString MatchMakingId{  };
	/** @brief Gets the value of MatchMakingId */
	FString& GetMatchMakingId() { return MatchMakingId; }
	/** @brief Gets the value of MatchMakingId */
	const FString& GetMatchMakingId() const { return MatchMakingId; }
	/** @brief Sets the value of MatchMakingId */
	void SetMatchMakingId(const FString& NewValue) { MatchMakingId = NewValue;   }
	/** @brief Sets the value of MatchMakingId using move semantics */
	void SetMatchMakingId(FString&& NewValue) { MatchMakingId = NewValue;   }

	/** @brief Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FDateTime Created{  };
	/** @brief Gets the value of Created */
	FDateTime& GetCreated() { return Created; }
	/** @brief Gets the value of Created */
	const FDateTime& GetCreated() const { return Created; }
	/** @brief Sets the value of Created */
	void SetCreated(const FDateTime& NewValue) { Created = NewValue;   }
	/** @brief Sets the value of Created using move semantics */
	void SetCreated(FDateTime&& NewValue) { Created = NewValue;   }

	/** @brief MMF defined custom data */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TMap<FString, FString> CustomData_Optional{  };
	/** @brief true if CustomData_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool CustomData_IsSet{ false };
	/** @brief Gets the value of CustomData_Optional, regardless of it having been set */
	TMap<FString, FString>& GetCustomData() { return CustomData_Optional; }
	/** @brief Gets the value of CustomData_Optional, regardless of it having been set */
	const TMap<FString, FString>& GetCustomData() const { return CustomData_Optional; }
	/** @brief Gets the value of CustomData_Optional, if it has been set, otherwise it returns DefaultValue */
	const TMap<FString, FString>& GetCustomData(const TMap<FString, FString>& DefaultValue) const { if (CustomData_IsSet) return CustomData_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of CustomData_Optional and returns true if it has been set, otherwise returns false */
	bool GetCustomData(TMap<FString, FString>& OutValue) const { if (CustomData_IsSet) OutValue = CustomData_Optional; return CustomData_IsSet; }
	/** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
	TMap<FString, FString>* GetCustomDataOrNull() { if (CustomData_IsSet) return (&CustomData_Optional); return nullptr; }
	/** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
	const TMap<FString, FString>* GetCustomDataOrNull() const { if (CustomData_IsSet) return (&CustomData_Optional); return nullptr; }
	/** @brief Sets the value of CustomData_Optional and also sets CustomData_IsSet to true */
	void SetCustomData(const TMap<FString, FString>& NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true;  }
	/** @brief Sets the value of CustomData_Optional and also sets CustomData_IsSet to true using move semantics */
	void SetCustomData(TMap<FString, FString>&& NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true;  }
	/** @brief Clears the value of CustomData_Optional and sets CustomData_IsSet to false */
	void ClearCustomData() { CustomData_IsSet = false;  }
	/** @brief Checks whether CustomData_Optional has been set */
	bool IsCustomDataSet() const { return CustomData_IsSet; }

	/** @brief List of tickets that were assigned to this match if created by matchmaking */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TArray<FString> TicketIds_Optional{  };
	/** @brief true if TicketIds_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool TicketIds_IsSet{ false };
	/** @brief Gets the value of TicketIds_Optional, regardless of it having been set */
	TArray<FString>& GetTicketIds() { return TicketIds_Optional; }
	/** @brief Gets the value of TicketIds_Optional, regardless of it having been set */
	const TArray<FString>& GetTicketIds() const { return TicketIds_Optional; }
	/** @brief Gets the value of TicketIds_Optional, if it has been set, otherwise it returns DefaultValue */
	const TArray<FString>& GetTicketIds(const TArray<FString>& DefaultValue) const { if (TicketIds_IsSet) return TicketIds_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of TicketIds_Optional and returns true if it has been set, otherwise returns false */
	bool GetTicketIds(TArray<FString>& OutValue) const { if (TicketIds_IsSet) OutValue = TicketIds_Optional; return TicketIds_IsSet; }
	/** @brief Returns a pointer to TicketIds_Optional, if it has been set, otherwise returns nullptr */
	TArray<FString>* GetTicketIdsOrNull() { if (TicketIds_IsSet) return (&TicketIds_Optional); return nullptr; }
	/** @brief Returns a pointer to TicketIds_Optional, if it has been set, otherwise returns nullptr */
	const TArray<FString>* GetTicketIdsOrNull() const { if (TicketIds_IsSet) return (&TicketIds_Optional); return nullptr; }
	/** @brief Sets the value of TicketIds_Optional and also sets TicketIds_IsSet to true */
	void SetTicketIds(const TArray<FString>& NewValue) { TicketIds_Optional = NewValue; TicketIds_IsSet = true;  }
	/** @brief Sets the value of TicketIds_Optional and also sets TicketIds_IsSet to true using move semantics */
	void SetTicketIds(TArray<FString>&& NewValue) { TicketIds_Optional = NewValue; TicketIds_IsSet = true;  }
	/** @brief Clears the value of TicketIds_Optional and sets TicketIds_IsSet to false */
	void ClearTicketIds() { TicketIds_IsSet = false;  }
	/** @brief Checks whether TicketIds_Optional has been set */
	bool IsTicketIdsSet() const { return TicketIds_IsSet; }

	/** @brief List of all the ticket data that was used when generating this match */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TArray<FRHAPI_TicketData> TicketData_Optional{  };
	/** @brief true if TicketData_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool TicketData_IsSet{ false };
	/** @brief Gets the value of TicketData_Optional, regardless of it having been set */
	TArray<FRHAPI_TicketData>& GetTicketData() { return TicketData_Optional; }
	/** @brief Gets the value of TicketData_Optional, regardless of it having been set */
	const TArray<FRHAPI_TicketData>& GetTicketData() const { return TicketData_Optional; }
	/** @brief Gets the value of TicketData_Optional, if it has been set, otherwise it returns DefaultValue */
	const TArray<FRHAPI_TicketData>& GetTicketData(const TArray<FRHAPI_TicketData>& DefaultValue) const { if (TicketData_IsSet) return TicketData_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of TicketData_Optional and returns true if it has been set, otherwise returns false */
	bool GetTicketData(TArray<FRHAPI_TicketData>& OutValue) const { if (TicketData_IsSet) OutValue = TicketData_Optional; return TicketData_IsSet; }
	/** @brief Returns a pointer to TicketData_Optional, if it has been set, otherwise returns nullptr */
	TArray<FRHAPI_TicketData>* GetTicketDataOrNull() { if (TicketData_IsSet) return (&TicketData_Optional); return nullptr; }
	/** @brief Returns a pointer to TicketData_Optional, if it has been set, otherwise returns nullptr */
	const TArray<FRHAPI_TicketData>* GetTicketDataOrNull() const { if (TicketData_IsSet) return (&TicketData_Optional); return nullptr; }
	/** @brief Sets the value of TicketData_Optional and also sets TicketData_IsSet to true */
	void SetTicketData(const TArray<FRHAPI_TicketData>& NewValue) { TicketData_Optional = NewValue; TicketData_IsSet = true;  }
	/** @brief Sets the value of TicketData_Optional and also sets TicketData_IsSet to true using move semantics */
	void SetTicketData(TArray<FRHAPI_TicketData>&& NewValue) { TicketData_Optional = NewValue; TicketData_IsSet = true;  }
	/** @brief Clears the value of TicketData_Optional and sets TicketData_IsSet to false */
	void ClearTicketData() { TicketData_IsSet = false;  }
	/** @brief Checks whether TicketData_Optional has been set */
	bool IsTicketDataSet() const { return TicketData_IsSet; }

	/** @brief Whether or not the tickets from these results have been assigned */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool TicketsAssigned_Optional{ false };
	/** @brief true if TicketsAssigned_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool TicketsAssigned_IsSet{ false };
	/** @brief Gets the value of TicketsAssigned_Optional, regardless of it having been set */
	bool& GetTicketsAssigned() { return TicketsAssigned_Optional; }
	/** @brief Gets the value of TicketsAssigned_Optional, regardless of it having been set */
	const bool& GetTicketsAssigned() const { return TicketsAssigned_Optional; }
	/** @brief Gets the value of TicketsAssigned_Optional, if it has been set, otherwise it returns DefaultValue */
	const bool& GetTicketsAssigned(const bool& DefaultValue) const { if (TicketsAssigned_IsSet) return TicketsAssigned_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of TicketsAssigned_Optional and returns true if it has been set, otherwise returns false */
	bool GetTicketsAssigned(bool& OutValue) const { if (TicketsAssigned_IsSet) OutValue = TicketsAssigned_Optional; return TicketsAssigned_IsSet; }
	/** @brief Returns a pointer to TicketsAssigned_Optional, if it has been set, otherwise returns nullptr */
	bool* GetTicketsAssignedOrNull() { if (TicketsAssigned_IsSet) return (&TicketsAssigned_Optional); return nullptr; }
	/** @brief Returns a pointer to TicketsAssigned_Optional, if it has been set, otherwise returns nullptr */
	const bool* GetTicketsAssignedOrNull() const { if (TicketsAssigned_IsSet) return (&TicketsAssigned_Optional); return nullptr; }
	/** @brief Sets the value of TicketsAssigned_Optional and also sets TicketsAssigned_IsSet to true */
	void SetTicketsAssigned(const bool& NewValue) { TicketsAssigned_Optional = NewValue; TicketsAssigned_IsSet = true;  }
	/** @brief Sets the value of TicketsAssigned_Optional and also sets TicketsAssigned_IsSet to true using move semantics */
	void SetTicketsAssigned(bool&& NewValue) { TicketsAssigned_Optional = NewValue; TicketsAssigned_IsSet = true;  }
	/** @brief Clears the value of TicketsAssigned_Optional and sets TicketsAssigned_IsSet to false */
	void ClearTicketsAssigned() { TicketsAssigned_Optional = false; TicketsAssigned_IsSet = false;  }
	/** @brief Checks whether TicketsAssigned_Optional has been set */
	bool IsTicketsAssignedSet() const { return TicketsAssigned_IsSet; }
	/** @brief Returns true if TicketsAssigned_Optional is set and matches the default value */
	bool IsTicketsAssignedDefaultValue() const { return TicketsAssigned_IsSet && TicketsAssigned_Optional == false; }
	/** @brief Sets the value of TicketsAssigned_Optional to its default and also sets TicketsAssigned_IsSet to true */
	void SetTicketsAssignedToDefault() { SetTicketsAssigned(false); }

	/** @brief The profile used to create this match */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_MatchMakingProfileV2 Profile_Optional{  };
	/** @brief true if Profile_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Profile_IsSet{ false };
	/** @brief Gets the value of Profile_Optional, regardless of it having been set */
	FRHAPI_MatchMakingProfileV2& GetProfile() { return Profile_Optional; }
	/** @brief Gets the value of Profile_Optional, regardless of it having been set */
	const FRHAPI_MatchMakingProfileV2& GetProfile() const { return Profile_Optional; }
	/** @brief Gets the value of Profile_Optional, if it has been set, otherwise it returns DefaultValue */
	const FRHAPI_MatchMakingProfileV2& GetProfile(const FRHAPI_MatchMakingProfileV2& DefaultValue) const { if (Profile_IsSet) return Profile_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Profile_Optional and returns true if it has been set, otherwise returns false */
	bool GetProfile(FRHAPI_MatchMakingProfileV2& OutValue) const { if (Profile_IsSet) OutValue = Profile_Optional; return Profile_IsSet; }
	/** @brief Returns a pointer to Profile_Optional, if it has been set, otherwise returns nullptr */
	FRHAPI_MatchMakingProfileV2* GetProfileOrNull() { if (Profile_IsSet) return (&Profile_Optional); return nullptr; }
	/** @brief Returns a pointer to Profile_Optional, if it has been set, otherwise returns nullptr */
	const FRHAPI_MatchMakingProfileV2* GetProfileOrNull() const { if (Profile_IsSet) return (&Profile_Optional); return nullptr; }
	/** @brief Sets the value of Profile_Optional and also sets Profile_IsSet to true */
	void SetProfile(const FRHAPI_MatchMakingProfileV2& NewValue) { Profile_Optional = NewValue; Profile_IsSet = true;  }
	/** @brief Sets the value of Profile_Optional and also sets Profile_IsSet to true using move semantics */
	void SetProfile(FRHAPI_MatchMakingProfileV2&& NewValue) { Profile_Optional = NewValue; Profile_IsSet = true;  }
	/** @brief Clears the value of Profile_Optional and sets Profile_IsSet to false */
	void ClearProfile() { Profile_IsSet = false;  }
	/** @brief Checks whether Profile_Optional has been set */
	bool IsProfileSet() const { return Profile_IsSet; }
};

/** @} */
