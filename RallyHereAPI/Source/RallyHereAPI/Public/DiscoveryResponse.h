// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "DiscoveryResponse.generated.h"

/** @defgroup RHAPI_DiscoveryResponse RallyHere API Model DiscoveryResponse
 *  @{
 */

/**
 * @brief Contains information that aids the client in communicating with the connection managers.
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_DiscoveryResponse : public FRHAPI_Model
{
    GENERATED_BODY()

    /**
    * @brief Fills this object with data from the passed in JSON
    *
    * @param [in] JsonValue Data from the API call.
    *
    * @return true if parsing of the JSON data was successful.
    */
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

    /**
    * @brief Writes the data from this object into the specified JSON Writer stream
    *
    * @param [in] Writer JSON Writer stream to push .
    */
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /** @brief The list of addresses for the connection managers */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    TArray<FString> Addresses{  };
    /** @brief Gets the value of Addresses */
    TArray<FString>& GetAddresses() { return Addresses; }
    /** @brief Gets the value of Addresses */
    const TArray<FString>& GetAddresses() const { return Addresses; }
    /** @brief Sets the value of Addresses */
    void SetAddresses(TArray<FString> NewValue) { Addresses = NewValue;  }

    /** @brief The status of the connection managers */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString ServerStatus_Optional{  };
    /** @brief true if ServerStatus_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool ServerStatus_IsSet{ false };
    /** @brief Gets the value of ServerStatus_Optional, regardless of it having been set */
    FString& GetServerStatus() { return ServerStatus_Optional; }
    /** @brief Gets the value of ServerStatus_Optional, regardless of it having been set */
    const FString& GetServerStatus() const { return ServerStatus_Optional; }
    /** @brief Gets the value of ServerStatus_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetServerStatus(const FString& DefaultValue) const { if (ServerStatus_IsSet) return ServerStatus_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of ServerStatus_Optional and returns true if it has been set, otherwise returns false */
    bool GetServerStatus(FString& OutValue) const { if (ServerStatus_IsSet) OutValue = ServerStatus_Optional; return ServerStatus_IsSet; }
    /** @brief Returns a pointer to ServerStatus_Optional, if it has been set, otherwise returns nullptr */
    FString* GetServerStatusOrNull() { if (ServerStatus_IsSet) return &ServerStatus_Optional; return nullptr; }
    /** @brief Returns a pointer to ServerStatus_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetServerStatusOrNull() const { if (ServerStatus_IsSet) return &ServerStatus_Optional; return nullptr; }
    /** @brief Sets the value of ServerStatus_Optional and also sets ServerStatus_IsSet to true */
    void SetServerStatus(FString NewValue) { ServerStatus_Optional = NewValue; ServerStatus_IsSet = true; }
     /** @brief Clears the value of ServerStatus_Optional and sets ServerStatus_IsSet to false */
    void ClearServerStatus() { ServerStatus_Optional = TEXT("unknown"); ServerStatus_IsSet = false; }
    /** @brief Returns true if ServerStatus_Optional is set and matches the default value */
    bool IsServerStatusDefaultValue() const { return ServerStatus_IsSet && ServerStatus_Optional == TEXT("unknown"); }
    /** @brief Sets the value of ServerStatus_Optional to its default and also sets ServerStatus_IsSet to true */
    void SetServerStatusToDefault() { ServerStatus_Optional = TEXT("unknown"); ServerStatus_IsSet = true; }

    /** @brief The command line arguments used to be used by the client */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString CommandLineArgs_Optional{  };
    /** @brief true if CommandLineArgs_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool CommandLineArgs_IsSet{ false };
    /** @brief Gets the value of CommandLineArgs_Optional, regardless of it having been set */
    FString& GetCommandLineArgs() { return CommandLineArgs_Optional; }
    /** @brief Gets the value of CommandLineArgs_Optional, regardless of it having been set */
    const FString& GetCommandLineArgs() const { return CommandLineArgs_Optional; }
    /** @brief Gets the value of CommandLineArgs_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetCommandLineArgs(const FString& DefaultValue) const { if (CommandLineArgs_IsSet) return CommandLineArgs_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of CommandLineArgs_Optional and returns true if it has been set, otherwise returns false */
    bool GetCommandLineArgs(FString& OutValue) const { if (CommandLineArgs_IsSet) OutValue = CommandLineArgs_Optional; return CommandLineArgs_IsSet; }
    /** @brief Returns a pointer to CommandLineArgs_Optional, if it has been set, otherwise returns nullptr */
    FString* GetCommandLineArgsOrNull() { if (CommandLineArgs_IsSet) return &CommandLineArgs_Optional; return nullptr; }
    /** @brief Returns a pointer to CommandLineArgs_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetCommandLineArgsOrNull() const { if (CommandLineArgs_IsSet) return &CommandLineArgs_Optional; return nullptr; }
    /** @brief Sets the value of CommandLineArgs_Optional and also sets CommandLineArgs_IsSet to true */
    void SetCommandLineArgs(FString NewValue) { CommandLineArgs_Optional = NewValue; CommandLineArgs_IsSet = true; }
     /** @brief Clears the value of CommandLineArgs_Optional and sets CommandLineArgs_IsSet to false */
    void ClearCommandLineArgs() { CommandLineArgs_Optional = TEXT(" "); CommandLineArgs_IsSet = false; }
    /** @brief Returns true if CommandLineArgs_Optional is set and matches the default value */
    bool IsCommandLineArgsDefaultValue() const { return CommandLineArgs_IsSet && CommandLineArgs_Optional == TEXT(" "); }
    /** @brief Sets the value of CommandLineArgs_Optional to its default and also sets CommandLineArgs_IsSet to true */
    void SetCommandLineArgsToDefault() { CommandLineArgs_Optional = TEXT(" "); CommandLineArgs_IsSet = true; }
};

/** @} */
