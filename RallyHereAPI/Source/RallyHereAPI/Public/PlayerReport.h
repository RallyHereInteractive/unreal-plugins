// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "ReportReason.h"
#include "PlayerReport.generated.h"

/** @defgroup RHAPI_PlayerReport RallyHere API Model PlayerReport
 *  @{
 */

/**
 * @brief 
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_PlayerReport : public FRHAPI_Model
{
    GENERATED_BODY()

    /**
    * @brief Fills this object with data from the passed in JSON
    *
    * @param [in] JsonValue Data from the API call.
    *
    * @return true if parsing of the JSON data was successful.
    */
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

    /**
    * @brief Writes the data from this object into the specified JSON Writer stream
    *
    * @param [in] Writer JSON Writer stream to push .
    */
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /** @brief Unique ID for the player report */
    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    FString ReportId{  };
    /** @brief Gets the value of ReportId */
    FString& GetReportId() { return ReportId; }
    /** @brief Gets the value of ReportId */
    const FString& GetReportId() const { return ReportId; }
    /** @brief Sets the value of ReportId */
    void SetReportId(FString NewValue) { ReportId = NewValue;  }

    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    FGuid SourcePlayerUuid_Optional{  };
    /** @brief true if SourcePlayerUuid_Optional has been set to a value */
    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    bool SourcePlayerUuid_IsSet{ false };
    /** @brief Gets the value of SourcePlayerUuid_Optional, regardless of it having been set */
    FGuid& GetSourcePlayerUuid() { return SourcePlayerUuid_Optional; }
    /** @brief Gets the value of SourcePlayerUuid_Optional, regardless of it having been set */
    const FGuid& GetSourcePlayerUuid() const { return SourcePlayerUuid_Optional; }
    /** @brief Gets the value of SourcePlayerUuid_Optional, if it has been set, otherwise it returns DefaultValue */
    const FGuid& GetSourcePlayerUuid(const FGuid& DefaultValue) const { if (SourcePlayerUuid_IsSet) return SourcePlayerUuid_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of SourcePlayerUuid_Optional and returns true if it has been set, otherwise returns false */
    bool GetSourcePlayerUuid(FGuid& OutValue) const { if (SourcePlayerUuid_IsSet) OutValue = SourcePlayerUuid_Optional; return SourcePlayerUuid_IsSet; }
    /** @brief Returns a pointer to SourcePlayerUuid_Optional, if it has been set, otherwise returns nullptr */
    FGuid* GetSourcePlayerUuidOrNull() { if (SourcePlayerUuid_IsSet) return &SourcePlayerUuid_Optional; return nullptr; }
    /** @brief Returns a pointer to SourcePlayerUuid_Optional, if it has been set, otherwise returns nullptr */
    const FGuid* GetSourcePlayerUuidOrNull() const { if (SourcePlayerUuid_IsSet) return &SourcePlayerUuid_Optional; return nullptr; }
    /** @brief Sets the value of SourcePlayerUuid_Optional and also sets SourcePlayerUuid_IsSet to true */
    void SetSourcePlayerUuid(FGuid NewValue) { SourcePlayerUuid_Optional = NewValue; SourcePlayerUuid_IsSet = true; }
     /** @brief Clears the value of SourcePlayerUuid_Optional and sets SourcePlayerUuid_IsSet to false */
    void ClearSourcePlayerUuid() { SourcePlayerUuid_IsSet = false; }

    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    int32 SourcePlayerId_Optional{  };
    /** @brief true if SourcePlayerId_Optional has been set to a value */
    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    bool SourcePlayerId_IsSet{ false };
    /** @brief Gets the value of SourcePlayerId_Optional, regardless of it having been set */
    int32& GetSourcePlayerId() { return SourcePlayerId_Optional; }
    /** @brief Gets the value of SourcePlayerId_Optional, regardless of it having been set */
    const int32& GetSourcePlayerId() const { return SourcePlayerId_Optional; }
    /** @brief Gets the value of SourcePlayerId_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetSourcePlayerId(const int32& DefaultValue) const { if (SourcePlayerId_IsSet) return SourcePlayerId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of SourcePlayerId_Optional and returns true if it has been set, otherwise returns false */
    bool GetSourcePlayerId(int32& OutValue) const { if (SourcePlayerId_IsSet) OutValue = SourcePlayerId_Optional; return SourcePlayerId_IsSet; }
    /** @brief Returns a pointer to SourcePlayerId_Optional, if it has been set, otherwise returns nullptr */
    int32* GetSourcePlayerIdOrNull() { if (SourcePlayerId_IsSet) return &SourcePlayerId_Optional; return nullptr; }
    /** @brief Returns a pointer to SourcePlayerId_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetSourcePlayerIdOrNull() const { if (SourcePlayerId_IsSet) return &SourcePlayerId_Optional; return nullptr; }
    /** @brief Sets the value of SourcePlayerId_Optional and also sets SourcePlayerId_IsSet to true */
    void SetSourcePlayerId(int32 NewValue) { SourcePlayerId_Optional = NewValue; SourcePlayerId_IsSet = true; }
     /** @brief Clears the value of SourcePlayerId_Optional and sets SourcePlayerId_IsSet to false */
    void ClearSourcePlayerId() { SourcePlayerId_Optional = 0; SourcePlayerId_IsSet = false; }
    /** @brief Returns true if SourcePlayerId_Optional is set and matches the default value */
    bool IsSourcePlayerIdDefaultValue() const { return SourcePlayerId_IsSet && SourcePlayerId_Optional == 0; }
    /** @brief Sets the value of SourcePlayerId_Optional to its default and also sets SourcePlayerId_IsSet to true */
    void SetSourcePlayerIdToDefault() { SourcePlayerId_Optional = 0; SourcePlayerId_IsSet = true; }

    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    FGuid TargetPlayerUuid{  };
    /** @brief Gets the value of TargetPlayerUuid */
    FGuid& GetTargetPlayerUuid() { return TargetPlayerUuid; }
    /** @brief Gets the value of TargetPlayerUuid */
    const FGuid& GetTargetPlayerUuid() const { return TargetPlayerUuid; }
    /** @brief Sets the value of TargetPlayerUuid */
    void SetTargetPlayerUuid(FGuid NewValue) { TargetPlayerUuid = NewValue;  }

    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    int32 TargetPlayerId_Optional{  };
    /** @brief true if TargetPlayerId_Optional has been set to a value */
    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    bool TargetPlayerId_IsSet{ false };
    /** @brief Gets the value of TargetPlayerId_Optional, regardless of it having been set */
    int32& GetTargetPlayerId() { return TargetPlayerId_Optional; }
    /** @brief Gets the value of TargetPlayerId_Optional, regardless of it having been set */
    const int32& GetTargetPlayerId() const { return TargetPlayerId_Optional; }
    /** @brief Gets the value of TargetPlayerId_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetTargetPlayerId(const int32& DefaultValue) const { if (TargetPlayerId_IsSet) return TargetPlayerId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of TargetPlayerId_Optional and returns true if it has been set, otherwise returns false */
    bool GetTargetPlayerId(int32& OutValue) const { if (TargetPlayerId_IsSet) OutValue = TargetPlayerId_Optional; return TargetPlayerId_IsSet; }
    /** @brief Returns a pointer to TargetPlayerId_Optional, if it has been set, otherwise returns nullptr */
    int32* GetTargetPlayerIdOrNull() { if (TargetPlayerId_IsSet) return &TargetPlayerId_Optional; return nullptr; }
    /** @brief Returns a pointer to TargetPlayerId_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetTargetPlayerIdOrNull() const { if (TargetPlayerId_IsSet) return &TargetPlayerId_Optional; return nullptr; }
    /** @brief Sets the value of TargetPlayerId_Optional and also sets TargetPlayerId_IsSet to true */
    void SetTargetPlayerId(int32 NewValue) { TargetPlayerId_Optional = NewValue; TargetPlayerId_IsSet = true; }
     /** @brief Clears the value of TargetPlayerId_Optional and sets TargetPlayerId_IsSet to false */
    void ClearTargetPlayerId() { TargetPlayerId_Optional = 0; TargetPlayerId_IsSet = false; }
    /** @brief Returns true if TargetPlayerId_Optional is set and matches the default value */
    bool IsTargetPlayerIdDefaultValue() const { return TargetPlayerId_IsSet && TargetPlayerId_Optional == 0; }
    /** @brief Sets the value of TargetPlayerId_Optional to its default and also sets TargetPlayerId_IsSet to true */
    void SetTargetPlayerIdToDefault() { TargetPlayerId_Optional = 0; TargetPlayerId_IsSet = true; }

    /** @brief The reason for the report */
    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    ERHAPI_ReportReason Reason{  };
    /** @brief Gets the value of Reason */
    ERHAPI_ReportReason& GetReason() { return Reason; }
    /** @brief Gets the value of Reason */
    const ERHAPI_ReportReason& GetReason() const { return Reason; }
    /** @brief Sets the value of Reason */
    void SetReason(ERHAPI_ReportReason NewValue) { Reason = NewValue;  }

    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    FString Description_Optional{  };
    /** @brief true if Description_Optional has been set to a value */
    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    bool Description_IsSet{ false };
    /** @brief Gets the value of Description_Optional, regardless of it having been set */
    FString& GetDescription() { return Description_Optional; }
    /** @brief Gets the value of Description_Optional, regardless of it having been set */
    const FString& GetDescription() const { return Description_Optional; }
    /** @brief Gets the value of Description_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetDescription(const FString& DefaultValue) const { if (Description_IsSet) return Description_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Description_Optional and returns true if it has been set, otherwise returns false */
    bool GetDescription(FString& OutValue) const { if (Description_IsSet) OutValue = Description_Optional; return Description_IsSet; }
    /** @brief Returns a pointer to Description_Optional, if it has been set, otherwise returns nullptr */
    FString* GetDescriptionOrNull() { if (Description_IsSet) return &Description_Optional; return nullptr; }
    /** @brief Returns a pointer to Description_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetDescriptionOrNull() const { if (Description_IsSet) return &Description_Optional; return nullptr; }
    /** @brief Sets the value of Description_Optional and also sets Description_IsSet to true */
    void SetDescription(FString NewValue) { Description_Optional = NewValue; Description_IsSet = true; }
     /** @brief Clears the value of Description_Optional and sets Description_IsSet to false */
    void ClearDescription() { Description_IsSet = false; }

    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    FString SessionId_Optional{  };
    /** @brief true if SessionId_Optional has been set to a value */
    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    bool SessionId_IsSet{ false };
    /** @brief Gets the value of SessionId_Optional, regardless of it having been set */
    FString& GetSessionId() { return SessionId_Optional; }
    /** @brief Gets the value of SessionId_Optional, regardless of it having been set */
    const FString& GetSessionId() const { return SessionId_Optional; }
    /** @brief Gets the value of SessionId_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetSessionId(const FString& DefaultValue) const { if (SessionId_IsSet) return SessionId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of SessionId_Optional and returns true if it has been set, otherwise returns false */
    bool GetSessionId(FString& OutValue) const { if (SessionId_IsSet) OutValue = SessionId_Optional; return SessionId_IsSet; }
    /** @brief Returns a pointer to SessionId_Optional, if it has been set, otherwise returns nullptr */
    FString* GetSessionIdOrNull() { if (SessionId_IsSet) return &SessionId_Optional; return nullptr; }
    /** @brief Returns a pointer to SessionId_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetSessionIdOrNull() const { if (SessionId_IsSet) return &SessionId_Optional; return nullptr; }
    /** @brief Sets the value of SessionId_Optional and also sets SessionId_IsSet to true */
    void SetSessionId(FString NewValue) { SessionId_Optional = NewValue; SessionId_IsSet = true; }
     /** @brief Clears the value of SessionId_Optional and sets SessionId_IsSet to false */
    void ClearSessionId() { SessionId_IsSet = false; }

    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    FString InstanceId_Optional{  };
    /** @brief true if InstanceId_Optional has been set to a value */
    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    bool InstanceId_IsSet{ false };
    /** @brief Gets the value of InstanceId_Optional, regardless of it having been set */
    FString& GetInstanceId() { return InstanceId_Optional; }
    /** @brief Gets the value of InstanceId_Optional, regardless of it having been set */
    const FString& GetInstanceId() const { return InstanceId_Optional; }
    /** @brief Gets the value of InstanceId_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetInstanceId(const FString& DefaultValue) const { if (InstanceId_IsSet) return InstanceId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of InstanceId_Optional and returns true if it has been set, otherwise returns false */
    bool GetInstanceId(FString& OutValue) const { if (InstanceId_IsSet) OutValue = InstanceId_Optional; return InstanceId_IsSet; }
    /** @brief Returns a pointer to InstanceId_Optional, if it has been set, otherwise returns nullptr */
    FString* GetInstanceIdOrNull() { if (InstanceId_IsSet) return &InstanceId_Optional; return nullptr; }
    /** @brief Returns a pointer to InstanceId_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetInstanceIdOrNull() const { if (InstanceId_IsSet) return &InstanceId_Optional; return nullptr; }
    /** @brief Sets the value of InstanceId_Optional and also sets InstanceId_IsSet to true */
    void SetInstanceId(FString NewValue) { InstanceId_Optional = NewValue; InstanceId_IsSet = true; }
     /** @brief Clears the value of InstanceId_Optional and sets InstanceId_IsSet to false */
    void ClearInstanceId() { InstanceId_IsSet = false; }

    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    FString MatchId_Optional{  };
    /** @brief true if MatchId_Optional has been set to a value */
    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    bool MatchId_IsSet{ false };
    /** @brief Gets the value of MatchId_Optional, regardless of it having been set */
    FString& GetMatchId() { return MatchId_Optional; }
    /** @brief Gets the value of MatchId_Optional, regardless of it having been set */
    const FString& GetMatchId() const { return MatchId_Optional; }
    /** @brief Gets the value of MatchId_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetMatchId(const FString& DefaultValue) const { if (MatchId_IsSet) return MatchId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of MatchId_Optional and returns true if it has been set, otherwise returns false */
    bool GetMatchId(FString& OutValue) const { if (MatchId_IsSet) OutValue = MatchId_Optional; return MatchId_IsSet; }
    /** @brief Returns a pointer to MatchId_Optional, if it has been set, otherwise returns nullptr */
    FString* GetMatchIdOrNull() { if (MatchId_IsSet) return &MatchId_Optional; return nullptr; }
    /** @brief Returns a pointer to MatchId_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetMatchIdOrNull() const { if (MatchId_IsSet) return &MatchId_Optional; return nullptr; }
    /** @brief Sets the value of MatchId_Optional and also sets MatchId_IsSet to true */
    void SetMatchId(FString NewValue) { MatchId_Optional = NewValue; MatchId_IsSet = true; }
     /** @brief Clears the value of MatchId_Optional and sets MatchId_IsSet to false */
    void ClearMatchId() { MatchId_IsSet = false; }

    /** @brief Custom data for the report */
    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    TMap<FString, FString> CustomData_Optional{  };
    /** @brief true if CustomData_Optional has been set to a value */
    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    bool CustomData_IsSet{ false };
    /** @brief Gets the value of CustomData_Optional, regardless of it having been set */
    TMap<FString, FString>& GetCustomData() { return CustomData_Optional; }
    /** @brief Gets the value of CustomData_Optional, regardless of it having been set */
    const TMap<FString, FString>& GetCustomData() const { return CustomData_Optional; }
    /** @brief Gets the value of CustomData_Optional, if it has been set, otherwise it returns DefaultValue */
    const TMap<FString, FString>& GetCustomData(const TMap<FString, FString>& DefaultValue) const { if (CustomData_IsSet) return CustomData_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of CustomData_Optional and returns true if it has been set, otherwise returns false */
    bool GetCustomData(TMap<FString, FString>& OutValue) const { if (CustomData_IsSet) OutValue = CustomData_Optional; return CustomData_IsSet; }
    /** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
    TMap<FString, FString>* GetCustomDataOrNull() { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
    /** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
    const TMap<FString, FString>* GetCustomDataOrNull() const { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
    /** @brief Sets the value of CustomData_Optional and also sets CustomData_IsSet to true */
    void SetCustomData(TMap<FString, FString> NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true; }
     /** @brief Clears the value of CustomData_Optional and sets CustomData_IsSet to false */
    void ClearCustomData() { CustomData_IsSet = false; }

    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    FDateTime Created_Optional{  };
    /** @brief true if Created_Optional has been set to a value */
    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    bool Created_IsSet{ false };
    /** @brief Gets the value of Created_Optional, regardless of it having been set */
    FDateTime& GetCreated() { return Created_Optional; }
    /** @brief Gets the value of Created_Optional, regardless of it having been set */
    const FDateTime& GetCreated() const { return Created_Optional; }
    /** @brief Gets the value of Created_Optional, if it has been set, otherwise it returns DefaultValue */
    const FDateTime& GetCreated(const FDateTime& DefaultValue) const { if (Created_IsSet) return Created_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Created_Optional and returns true if it has been set, otherwise returns false */
    bool GetCreated(FDateTime& OutValue) const { if (Created_IsSet) OutValue = Created_Optional; return Created_IsSet; }
    /** @brief Returns a pointer to Created_Optional, if it has been set, otherwise returns nullptr */
    FDateTime* GetCreatedOrNull() { if (Created_IsSet) return &Created_Optional; return nullptr; }
    /** @brief Returns a pointer to Created_Optional, if it has been set, otherwise returns nullptr */
    const FDateTime* GetCreatedOrNull() const { if (Created_IsSet) return &Created_Optional; return nullptr; }
    /** @brief Sets the value of Created_Optional and also sets Created_IsSet to true */
    void SetCreated(FDateTime NewValue) { Created_Optional = NewValue; Created_IsSet = true; }
     /** @brief Clears the value of Created_Optional and sets Created_IsSet to false */
    void ClearCreated() { Created_IsSet = false; }

    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    FDateTime Modified_Optional{  };
    /** @brief true if Modified_Optional has been set to a value */
    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    bool Modified_IsSet{ false };
    /** @brief Gets the value of Modified_Optional, regardless of it having been set */
    FDateTime& GetModified() { return Modified_Optional; }
    /** @brief Gets the value of Modified_Optional, regardless of it having been set */
    const FDateTime& GetModified() const { return Modified_Optional; }
    /** @brief Gets the value of Modified_Optional, if it has been set, otherwise it returns DefaultValue */
    const FDateTime& GetModified(const FDateTime& DefaultValue) const { if (Modified_IsSet) return Modified_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Modified_Optional and returns true if it has been set, otherwise returns false */
    bool GetModified(FDateTime& OutValue) const { if (Modified_IsSet) OutValue = Modified_Optional; return Modified_IsSet; }
    /** @brief Returns a pointer to Modified_Optional, if it has been set, otherwise returns nullptr */
    FDateTime* GetModifiedOrNull() { if (Modified_IsSet) return &Modified_Optional; return nullptr; }
    /** @brief Returns a pointer to Modified_Optional, if it has been set, otherwise returns nullptr */
    const FDateTime* GetModifiedOrNull() const { if (Modified_IsSet) return &Modified_Optional; return nullptr; }
    /** @brief Sets the value of Modified_Optional and also sets Modified_IsSet to true */
    void SetModified(FDateTime NewValue) { Modified_Optional = NewValue; Modified_IsSet = true; }
     /** @brief Clears the value of Modified_Optional and sets Modified_IsSet to false */
    void ClearModified() { Modified_IsSet = false; }
};

/** @} */
