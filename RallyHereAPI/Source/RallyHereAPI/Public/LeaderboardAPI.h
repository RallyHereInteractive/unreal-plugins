// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereAPIAuthContext.h"
#include "RallyHereAPIHelpers.h"
#include "HTTPValidationError.h"
#include "HzApiErrorModel.h"
#include "LeaderboardConfig.h"
#include "LeaderboardConfigList.h"
#include "LeaderboardMetaData.h"
#include "LeaderboardPage.h"

namespace RallyHereAPI
{
using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

// forward declaration
class FLeaderboardAPI;

/**
 * @brief Get All Leaderboard Config
 * Get the leaderboard config for all leaderboards
*/
struct RALLYHEREAPI_API FRequest_GetAllLeaderboardConfig : public FRequest
{
	FRequest_GetAllLeaderboardConfig();
	virtual ~FRequest_GetAllLeaderboardConfig() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
};

/** The response type for FRequest_GetAllLeaderboardConfig */
struct RALLYHEREAPI_API FResponse_GetAllLeaderboardConfig : public FResponseAccessorTemplate<FRHAPI_LeaderboardConfigList, FRHAPI_HzApiErrorModel>
{
	typedef FResponseAccessorTemplate<FRHAPI_LeaderboardConfigList, FRHAPI_HzApiErrorModel> Super;

	FResponse_GetAllLeaderboardConfig(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetAllLeaderboardConfig() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_LeaderboardConfigList Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_LeaderboardConfigList& OutContent) const { return TryGetContent<FRHAPI_LeaderboardConfigList>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_LeaderboardConfigList>& OutContent) const { return TryGetContent<FRHAPI_LeaderboardConfigList>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_LeaderboardConfigList* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_LeaderboardConfigList>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_LeaderboardConfigList> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_LeaderboardConfigList>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_LeaderboardConfigList& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

};

/** The delegate class for FRequest_GetAllLeaderboardConfig */
DECLARE_DELEGATE_OneParam(FDelegate_GetAllLeaderboardConfig, const FResponse_GetAllLeaderboardConfig&);

/** @brief A helper metadata object for GetAllLeaderboardConfig that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetAllLeaderboardConfig
{
	/** The request type */
	typedef FRequest_GetAllLeaderboardConfig Request;
	/** The response type */
	typedef FResponse_GetAllLeaderboardConfig Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetAllLeaderboardConfig Delegate;
	/** The API object that supports this API call */
	typedef FLeaderboardAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Friend Leaderboard
 * Get a paged response for a friend leaderboard
*/
struct RALLYHEREAPI_API FRequest_GetFriendLeaderboard : public FRequest
{
	FRequest_GetFriendLeaderboard();
	virtual ~FRequest_GetFriendLeaderboard() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString LeaderboardId;
	FGuid PlayerUuid;
	/* Cursor for which page of leaderboard data you would like to retrieve */
	FString Cursor;
	/* The desired page size for the results */
	int32 PageSize = 0;
};

/** The response type for FRequest_GetFriendLeaderboard */
struct RALLYHEREAPI_API FResponse_GetFriendLeaderboard : public FResponseAccessorTemplate<FRHAPI_LeaderboardPage, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_LeaderboardPage, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetFriendLeaderboard(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetFriendLeaderboard() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_LeaderboardPage Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_LeaderboardPage& OutContent) const { return TryGetContent<FRHAPI_LeaderboardPage>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_LeaderboardPage>& OutContent) const { return TryGetContent<FRHAPI_LeaderboardPage>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_LeaderboardPage* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_LeaderboardPage>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_LeaderboardPage> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_LeaderboardPage>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_LeaderboardPage& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetFriendLeaderboard */
DECLARE_DELEGATE_OneParam(FDelegate_GetFriendLeaderboard, const FResponse_GetFriendLeaderboard&);

/** @brief A helper metadata object for GetFriendLeaderboard that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetFriendLeaderboard
{
	/** The request type */
	typedef FRequest_GetFriendLeaderboard Request;
	/** The response type */
	typedef FResponse_GetFriendLeaderboard Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetFriendLeaderboard Delegate;
	/** The API object that supports this API call */
	typedef FLeaderboardAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Leaderboard
 * Get a paged response for a leaderboard
*/
struct RALLYHEREAPI_API FRequest_GetLeaderboard : public FRequest
{
	FRequest_GetLeaderboard();
	virtual ~FRequest_GetLeaderboard() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString LeaderboardId;
	/* Cursor for which page of leaderboard data you would like to retrieve */
	FString Cursor;
	/* The desired page size for the results */
	int32 PageSize = 0;
};

/** The response type for FRequest_GetLeaderboard */
struct RALLYHEREAPI_API FResponse_GetLeaderboard : public FResponseAccessorTemplate<FRHAPI_LeaderboardPage, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_LeaderboardPage, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetLeaderboard(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetLeaderboard() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_LeaderboardPage Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_LeaderboardPage& OutContent) const { return TryGetContent<FRHAPI_LeaderboardPage>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_LeaderboardPage>& OutContent) const { return TryGetContent<FRHAPI_LeaderboardPage>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_LeaderboardPage* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_LeaderboardPage>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_LeaderboardPage> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_LeaderboardPage>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_LeaderboardPage& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetLeaderboard */
DECLARE_DELEGATE_OneParam(FDelegate_GetLeaderboard, const FResponse_GetLeaderboard&);

/** @brief A helper metadata object for GetLeaderboard that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetLeaderboard
{
	/** The request type */
	typedef FRequest_GetLeaderboard Request;
	/** The response type */
	typedef FResponse_GetLeaderboard Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetLeaderboard Delegate;
	/** The API object that supports this API call */
	typedef FLeaderboardAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Leaderboard Config
 * Get the leaderboard config for a specific leaderboard
*/
struct RALLYHEREAPI_API FRequest_GetLeaderboardConfig : public FRequest
{
	FRequest_GetLeaderboardConfig();
	virtual ~FRequest_GetLeaderboardConfig() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString LeaderboardId;
};

/** The response type for FRequest_GetLeaderboardConfig */
struct RALLYHEREAPI_API FResponse_GetLeaderboardConfig : public FResponseAccessorTemplate<FRHAPI_LeaderboardConfig, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_LeaderboardConfig, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetLeaderboardConfig(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetLeaderboardConfig() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_LeaderboardConfig Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_LeaderboardConfig& OutContent) const { return TryGetContent<FRHAPI_LeaderboardConfig>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_LeaderboardConfig>& OutContent) const { return TryGetContent<FRHAPI_LeaderboardConfig>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_LeaderboardConfig* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_LeaderboardConfig>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_LeaderboardConfig> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_LeaderboardConfig>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_LeaderboardConfig& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetLeaderboardConfig */
DECLARE_DELEGATE_OneParam(FDelegate_GetLeaderboardConfig, const FResponse_GetLeaderboardConfig&);

/** @brief A helper metadata object for GetLeaderboardConfig that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetLeaderboardConfig
{
	/** The request type */
	typedef FRequest_GetLeaderboardConfig Request;
	/** The response type */
	typedef FResponse_GetLeaderboardConfig Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetLeaderboardConfig Delegate;
	/** The API object that supports this API call */
	typedef FLeaderboardAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Leaderboard Meta Data
 * Get metadata about a specific leaderboard
*/
struct RALLYHEREAPI_API FRequest_GetLeaderboardMetaData : public FRequest
{
	FRequest_GetLeaderboardMetaData();
	virtual ~FRequest_GetLeaderboardMetaData() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString LeaderboardId;
};

/** The response type for FRequest_GetLeaderboardMetaData */
struct RALLYHEREAPI_API FResponse_GetLeaderboardMetaData : public FResponseAccessorTemplate<FRHAPI_LeaderboardMetaData, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_LeaderboardMetaData, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetLeaderboardMetaData(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetLeaderboardMetaData() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_LeaderboardMetaData Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_LeaderboardMetaData& OutContent) const { return TryGetContent<FRHAPI_LeaderboardMetaData>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_LeaderboardMetaData>& OutContent) const { return TryGetContent<FRHAPI_LeaderboardMetaData>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_LeaderboardMetaData* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_LeaderboardMetaData>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_LeaderboardMetaData> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_LeaderboardMetaData>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_LeaderboardMetaData& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetLeaderboardMetaData */
DECLARE_DELEGATE_OneParam(FDelegate_GetLeaderboardMetaData, const FResponse_GetLeaderboardMetaData&);

/** @brief A helper metadata object for GetLeaderboardMetaData that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetLeaderboardMetaData
{
	/** The request type */
	typedef FRequest_GetLeaderboardMetaData Request;
	/** The response type */
	typedef FResponse_GetLeaderboardMetaData Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetLeaderboardMetaData Delegate;
	/** The API object that supports this API call */
	typedef FLeaderboardAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Leaderboard Position Entry
 * Get a leaderboard entry at a specific position
*/
struct RALLYHEREAPI_API FRequest_GetLeaderboardPositionEntry : public FRequest
{
	FRequest_GetLeaderboardPositionEntry();
	virtual ~FRequest_GetLeaderboardPositionEntry() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString LeaderboardId;
	int32 LeaderboardPosition = 0;
};

/** The response type for FRequest_GetLeaderboardPositionEntry */
struct RALLYHEREAPI_API FResponse_GetLeaderboardPositionEntry : public FResponseAccessorTemplate<FRHAPI_LeaderboardPage, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_LeaderboardPage, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetLeaderboardPositionEntry(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetLeaderboardPositionEntry() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_LeaderboardPage Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_LeaderboardPage& OutContent) const { return TryGetContent<FRHAPI_LeaderboardPage>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_LeaderboardPage>& OutContent) const { return TryGetContent<FRHAPI_LeaderboardPage>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_LeaderboardPage* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_LeaderboardPage>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_LeaderboardPage> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_LeaderboardPage>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_LeaderboardPage& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetLeaderboardPositionEntry */
DECLARE_DELEGATE_OneParam(FDelegate_GetLeaderboardPositionEntry, const FResponse_GetLeaderboardPositionEntry&);

/** @brief A helper metadata object for GetLeaderboardPositionEntry that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetLeaderboardPositionEntry
{
	/** The request type */
	typedef FRequest_GetLeaderboardPositionEntry Request;
	/** The response type */
	typedef FResponse_GetLeaderboardPositionEntry Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetLeaderboardPositionEntry Delegate;
	/** The API object that supports this API call */
	typedef FLeaderboardAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};


/** The API class itself, which will handle calls to */
class RALLYHEREAPI_API FLeaderboardAPI : public FAPI
{
public:
	FLeaderboardAPI();
	virtual ~FLeaderboardAPI();

	FHttpRequestPtr GetAllLeaderboardConfig(const FRequest_GetAllLeaderboardConfig& Request, const FDelegate_GetAllLeaderboardConfig& Delegate = FDelegate_GetAllLeaderboardConfig(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetAllLeaderboardConfigResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAllLeaderboardConfig Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetFriendLeaderboard(const FRequest_GetFriendLeaderboard& Request, const FDelegate_GetFriendLeaderboard& Delegate = FDelegate_GetFriendLeaderboard(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetFriendLeaderboardResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetFriendLeaderboard Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetLeaderboard(const FRequest_GetLeaderboard& Request, const FDelegate_GetLeaderboard& Delegate = FDelegate_GetLeaderboard(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetLeaderboardResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetLeaderboard Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetLeaderboardConfig(const FRequest_GetLeaderboardConfig& Request, const FDelegate_GetLeaderboardConfig& Delegate = FDelegate_GetLeaderboardConfig(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetLeaderboardConfigResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetLeaderboardConfig Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetLeaderboardMetaData(const FRequest_GetLeaderboardMetaData& Request, const FDelegate_GetLeaderboardMetaData& Delegate = FDelegate_GetLeaderboardMetaData(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetLeaderboardMetaDataResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetLeaderboardMetaData Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetLeaderboardPositionEntry(const FRequest_GetLeaderboardPositionEntry& Request, const FDelegate_GetLeaderboardPositionEntry& Delegate = FDelegate_GetLeaderboardPositionEntry(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetLeaderboardPositionEntryResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetLeaderboardPositionEntry Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};



}
