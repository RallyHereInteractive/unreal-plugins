// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereAPIAuthContext.h"
#include "RallyHereAPIHelpers.h"
#include "FriendsApiConfig.h"
#include "HzApiErrorModel.h"

namespace RallyHereAPI
{
using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

struct FRequest_GetFriendsAndBlockLimits;
struct FResponse_GetFriendsAndBlockLimits;

DECLARE_DELEGATE_OneParam(FDelegate_GetFriendsAndBlockLimits, const FResponse_GetFriendsAndBlockLimits&);

class RALLYHEREAPI_API FConfigurationV1API : public FAPI
{
public:
	FConfigurationV1API();
	virtual ~FConfigurationV1API();

	FHttpRequestPtr GetFriendsAndBlockLimits(const FRequest_GetFriendsAndBlockLimits& Request, const FDelegate_GetFriendsAndBlockLimits& Delegate = FDelegate_GetFriendsAndBlockLimits(), int32 Priority = DefaultRallyHereAPIPriority);

private:
	void OnGetFriendsAndBlockLimitsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetFriendsAndBlockLimits Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};

/* Get Friends And Block Limits
 *
 * Fetch the configuration used by Friends API, e.g. friend_limit, block_limit, etc.
*/
struct RALLYHEREAPI_API FRequest_GetFriendsAndBlockLimits : public FRequest
{
	FRequest_GetFriendsAndBlockLimits();
	virtual ~FRequest_GetFriendsAndBlockLimits() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	FName GetSimplifiedPathWithVerb() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
};

struct RALLYHEREAPI_API FResponse_GetFriendsAndBlockLimits : public FResponse
{
	FResponse_GetFriendsAndBlockLimits(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetFriendsAndBlockLimits() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

protected:
	typedef TVariant<FRHAPI_FriendsApiConfig, FRHAPI_HzApiErrorModel> ContentVariantType;
	ContentVariantType ParsedContent;

	TMap<FString, FString> HeadersMap;

public:
	template<typename T>
	bool TryGetContent(T& OutResponse)const { const T* OutResponsePtr = ParsedContent.TryGet<T>(); if (OutResponsePtr != nullptr) OutResponse = *OutResponsePtr; return OutResponsePtr != nullptr; }
	template<typename T>
	const T* TryGetContent() const { return ParsedContent.TryGet<T>(); }
	
	bool TryGetHeader(const FString& Header, FString& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; return OutValuePtr != nullptr; }
	const FString* TryGetHeader(const FString& Header) const { return HeadersMap.Find(Header); }

#if ALLOW_LEGACY_RESPONSE_CONTENT
	// Default Response Content
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_FriendsApiConfig Content;
	

#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	const FRHAPI_FriendsApiConfig* TryGetDefaultContent() const { return ParsedContent.TryGet<FRHAPI_FriendsApiConfig>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_FriendsApiConfig& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

};

struct RALLYHEREAPI_API Traits_GetFriendsAndBlockLimits
{
	typedef FRequest_GetFriendsAndBlockLimits Request;
	typedef FResponse_GetFriendsAndBlockLimits Response;
	typedef FDelegate_GetFriendsAndBlockLimits Delegate;
	typedef FConfigurationV1API API;
	static FString Name;

	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI->GetFriendsAndBlockLimits(InRequest, InDelegate, Priority); }
};


}
