// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "PlayerOrderEntry.h"
#include "Portal.h"
#include "Source.h"
#include "PlayerOrder.generated.h"

/** @defgroup RHAPI_PlayerOrder RallyHere API Model PlayerOrder
 *  @{
 */

/**
 * @brief Represents a Player Order.
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_PlayerOrder : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	ERHAPI_Source Source_Optional{  };
	/** @brief true if Source_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Source_IsSet{ false };
	/** @brief Gets the value of Source_Optional, regardless of it having been set */
	ERHAPI_Source& GetSource() { return Source_Optional; }
	/** @brief Gets the value of Source_Optional, regardless of it having been set */
	const ERHAPI_Source& GetSource() const { return Source_Optional; }
	/** @brief Gets the value of Source_Optional, if it has been set, otherwise it returns DefaultValue */
	const ERHAPI_Source& GetSource(const ERHAPI_Source& DefaultValue) const { if (Source_IsSet) return Source_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Source_Optional and returns true if it has been set, otherwise returns false */
	bool GetSource(ERHAPI_Source& OutValue) const { if (Source_IsSet) OutValue = Source_Optional; return Source_IsSet; }
	/** @brief Returns a pointer to Source_Optional, if it has been set, otherwise returns nullptr */
	ERHAPI_Source* GetSourceOrNull() { if (Source_IsSet) return (&Source_Optional); return nullptr; }
	/** @brief Returns a pointer to Source_Optional, if it has been set, otherwise returns nullptr */
	const ERHAPI_Source* GetSourceOrNull() const { if (Source_IsSet) return (&Source_Optional); return nullptr; }
	/** @brief Sets the value of Source_Optional and also sets Source_IsSet to true */
	void SetSource(const ERHAPI_Source& NewValue) { Source_Optional = NewValue; Source_IsSet = true;  }
	/** @brief Sets the value of Source_Optional and also sets Source_IsSet to true using move semantics */
	void SetSource(ERHAPI_Source&& NewValue) { Source_Optional = NewValue; Source_IsSet = true;  }
	/** @brief Clears the value of Source_Optional and sets Source_IsSet to false */
	void ClearSource() { Source_IsSet = false;  }
	/** @brief Checks whether Source_Optional has been set */
	bool IsSourceSet() const { return Source_IsSet; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FGuid ClientOrderRefId_Optional{  };
	/** @brief true if ClientOrderRefId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool ClientOrderRefId_IsSet{ false };
	/** @brief true if ClientOrderRefId_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool ClientOrderRefId_IsNull{ false };
	/** @brief Gets the value of ClientOrderRefId_Optional, regardless of it having been set */
	FGuid& GetClientOrderRefId() { return ClientOrderRefId_Optional; }
	/** @brief Gets the value of ClientOrderRefId_Optional, regardless of it having been set */
	const FGuid& GetClientOrderRefId() const { return ClientOrderRefId_Optional; }
	/** @brief Gets the value of ClientOrderRefId_Optional, if it has been set, otherwise it returns DefaultValue */
	const FGuid& GetClientOrderRefId(const FGuid& DefaultValue) const { if (ClientOrderRefId_IsSet) return ClientOrderRefId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of ClientOrderRefId_Optional and returns true if it has been set, otherwise returns false */
	bool GetClientOrderRefId(FGuid& OutValue) const { if (ClientOrderRefId_IsSet && !ClientOrderRefId_IsNull) OutValue = ClientOrderRefId_Optional; return ClientOrderRefId_IsSet; }
	/** @brief Returns a pointer to ClientOrderRefId_Optional, if it has been set, otherwise returns nullptr */
	FGuid* GetClientOrderRefIdOrNull() { if (ClientOrderRefId_IsSet) return (ClientOrderRefId_IsNull ? nullptr : &ClientOrderRefId_Optional); return nullptr; }
	/** @brief Returns a pointer to ClientOrderRefId_Optional, if it has been set, otherwise returns nullptr */
	const FGuid* GetClientOrderRefIdOrNull() const { if (ClientOrderRefId_IsSet) return (ClientOrderRefId_IsNull ? nullptr : &ClientOrderRefId_Optional); return nullptr; }
	/** @brief Sets the value of ClientOrderRefId_Optional and also sets ClientOrderRefId_IsSet to true */
	void SetClientOrderRefId(const FGuid& NewValue) { ClientOrderRefId_Optional = NewValue; ClientOrderRefId_IsSet = true; ClientOrderRefId_IsNull = false; }
	/** @brief Sets the value of ClientOrderRefId_Optional and also sets ClientOrderRefId_IsSet to true using move semantics */
	void SetClientOrderRefId(FGuid&& NewValue) { ClientOrderRefId_Optional = NewValue; ClientOrderRefId_IsSet = true; ClientOrderRefId_IsNull = false; }
	/** @brief Clears the value of ClientOrderRefId_Optional and sets ClientOrderRefId_IsSet to false */
	void ClearClientOrderRefId() { ClientOrderRefId_IsSet = false; ClientOrderRefId_IsNull = false; }
	/** @brief Checks whether ClientOrderRefId_Optional has been set */
	bool IsClientOrderRefIdSet() const { return ClientOrderRefId_IsSet; }
	/** @brief Sets the value explicitly to be treated as null */
	void SetClientOrderRefIdToNull() { ClientOrderRefId_IsSet = true; ClientOrderRefId_IsNull = true; }
	/** @brief Checks whether ClientOrderRefId_Optional is set to null */
	bool IsClientOrderRefIdNull() const { return ClientOrderRefId_IsSet && ClientOrderRefId_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	ERHAPI_Portal PortalId_Optional{  };
	/** @brief true if PortalId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool PortalId_IsSet{ false };
	/** @brief true if PortalId_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool PortalId_IsNull{ false };
	/** @brief Gets the value of PortalId_Optional, regardless of it having been set */
	ERHAPI_Portal& GetPortalId() { return PortalId_Optional; }
	/** @brief Gets the value of PortalId_Optional, regardless of it having been set */
	const ERHAPI_Portal& GetPortalId() const { return PortalId_Optional; }
	/** @brief Gets the value of PortalId_Optional, if it has been set, otherwise it returns DefaultValue */
	const ERHAPI_Portal& GetPortalId(const ERHAPI_Portal& DefaultValue) const { if (PortalId_IsSet) return PortalId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of PortalId_Optional and returns true if it has been set, otherwise returns false */
	bool GetPortalId(ERHAPI_Portal& OutValue) const { if (PortalId_IsSet && !PortalId_IsNull) OutValue = PortalId_Optional; return PortalId_IsSet; }
	/** @brief Returns a pointer to PortalId_Optional, if it has been set, otherwise returns nullptr */
	ERHAPI_Portal* GetPortalIdOrNull() { if (PortalId_IsSet) return (PortalId_IsNull ? nullptr : &PortalId_Optional); return nullptr; }
	/** @brief Returns a pointer to PortalId_Optional, if it has been set, otherwise returns nullptr */
	const ERHAPI_Portal* GetPortalIdOrNull() const { if (PortalId_IsSet) return (PortalId_IsNull ? nullptr : &PortalId_Optional); return nullptr; }
	/** @brief Sets the value of PortalId_Optional and also sets PortalId_IsSet to true */
	void SetPortalId(const ERHAPI_Portal& NewValue) { PortalId_Optional = NewValue; PortalId_IsSet = true; PortalId_IsNull = false; }
	/** @brief Sets the value of PortalId_Optional and also sets PortalId_IsSet to true using move semantics */
	void SetPortalId(ERHAPI_Portal&& NewValue) { PortalId_Optional = NewValue; PortalId_IsSet = true; PortalId_IsNull = false; }
	/** @brief Clears the value of PortalId_Optional and sets PortalId_IsSet to false */
	void ClearPortalId() { PortalId_IsSet = false; PortalId_IsNull = false; }
	/** @brief Checks whether PortalId_Optional has been set */
	bool IsPortalIdSet() const { return PortalId_IsSet; }
	/** @brief Sets the value explicitly to be treated as null */
	void SetPortalIdToNull() { PortalId_IsSet = true; PortalId_IsNull = true; }
	/** @brief Checks whether PortalId_Optional is set to null */
	bool IsPortalIdNull() const { return PortalId_IsSet && PortalId_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString PortalUserId_Optional{  };
	/** @brief true if PortalUserId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool PortalUserId_IsSet{ false };
	/** @brief true if PortalUserId_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool PortalUserId_IsNull{ false };
	/** @brief Gets the value of PortalUserId_Optional, regardless of it having been set */
	FString& GetPortalUserId() { return PortalUserId_Optional; }
	/** @brief Gets the value of PortalUserId_Optional, regardless of it having been set */
	const FString& GetPortalUserId() const { return PortalUserId_Optional; }
	/** @brief Gets the value of PortalUserId_Optional, if it has been set, otherwise it returns DefaultValue */
	const FString& GetPortalUserId(const FString& DefaultValue) const { if (PortalUserId_IsSet) return PortalUserId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of PortalUserId_Optional and returns true if it has been set, otherwise returns false */
	bool GetPortalUserId(FString& OutValue) const { if (PortalUserId_IsSet && !PortalUserId_IsNull) OutValue = PortalUserId_Optional; return PortalUserId_IsSet; }
	/** @brief Returns a pointer to PortalUserId_Optional, if it has been set, otherwise returns nullptr */
	FString* GetPortalUserIdOrNull() { if (PortalUserId_IsSet) return (PortalUserId_IsNull ? nullptr : &PortalUserId_Optional); return nullptr; }
	/** @brief Returns a pointer to PortalUserId_Optional, if it has been set, otherwise returns nullptr */
	const FString* GetPortalUserIdOrNull() const { if (PortalUserId_IsSet) return (PortalUserId_IsNull ? nullptr : &PortalUserId_Optional); return nullptr; }
	/** @brief Sets the value of PortalUserId_Optional and also sets PortalUserId_IsSet to true */
	void SetPortalUserId(const FString& NewValue) { PortalUserId_Optional = NewValue; PortalUserId_IsSet = true; PortalUserId_IsNull = false; }
	/** @brief Sets the value of PortalUserId_Optional and also sets PortalUserId_IsSet to true using move semantics */
	void SetPortalUserId(FString&& NewValue) { PortalUserId_Optional = NewValue; PortalUserId_IsSet = true; PortalUserId_IsNull = false; }
	/** @brief Clears the value of PortalUserId_Optional and sets PortalUserId_IsSet to false */
	void ClearPortalUserId() { PortalUserId_IsSet = false; PortalUserId_IsNull = false; }
	/** @brief Checks whether PortalUserId_Optional has been set */
	bool IsPortalUserIdSet() const { return PortalUserId_IsSet; }
	/** @brief Sets the value explicitly to be treated as null */
	void SetPortalUserIdToNull() { PortalUserId_IsSet = true; PortalUserId_IsNull = true; }
	/** @brief Checks whether PortalUserId_Optional is set to null */
	bool IsPortalUserIdNull() const { return PortalUserId_IsSet && PortalUserId_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString InstanceId_Optional{  };
	/** @brief true if InstanceId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool InstanceId_IsSet{ false };
	/** @brief true if InstanceId_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool InstanceId_IsNull{ false };
	/** @brief Gets the value of InstanceId_Optional, regardless of it having been set */
	FString& GetInstanceId() { return InstanceId_Optional; }
	/** @brief Gets the value of InstanceId_Optional, regardless of it having been set */
	const FString& GetInstanceId() const { return InstanceId_Optional; }
	/** @brief Gets the value of InstanceId_Optional, if it has been set, otherwise it returns DefaultValue */
	const FString& GetInstanceId(const FString& DefaultValue) const { if (InstanceId_IsSet) return InstanceId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of InstanceId_Optional and returns true if it has been set, otherwise returns false */
	bool GetInstanceId(FString& OutValue) const { if (InstanceId_IsSet && !InstanceId_IsNull) OutValue = InstanceId_Optional; return InstanceId_IsSet; }
	/** @brief Returns a pointer to InstanceId_Optional, if it has been set, otherwise returns nullptr */
	FString* GetInstanceIdOrNull() { if (InstanceId_IsSet) return (InstanceId_IsNull ? nullptr : &InstanceId_Optional); return nullptr; }
	/** @brief Returns a pointer to InstanceId_Optional, if it has been set, otherwise returns nullptr */
	const FString* GetInstanceIdOrNull() const { if (InstanceId_IsSet) return (InstanceId_IsNull ? nullptr : &InstanceId_Optional); return nullptr; }
	/** @brief Sets the value of InstanceId_Optional and also sets InstanceId_IsSet to true */
	void SetInstanceId(const FString& NewValue) { InstanceId_Optional = NewValue; InstanceId_IsSet = true; InstanceId_IsNull = false; }
	/** @brief Sets the value of InstanceId_Optional and also sets InstanceId_IsSet to true using move semantics */
	void SetInstanceId(FString&& NewValue) { InstanceId_Optional = NewValue; InstanceId_IsSet = true; InstanceId_IsNull = false; }
	/** @brief Clears the value of InstanceId_Optional and sets InstanceId_IsSet to false */
	void ClearInstanceId() { InstanceId_IsSet = false; InstanceId_IsNull = false; }
	/** @brief Checks whether InstanceId_Optional has been set */
	bool IsInstanceIdSet() const { return InstanceId_IsSet; }
	/** @brief Sets the value explicitly to be treated as null */
	void SetInstanceIdToNull() { InstanceId_IsSet = true; InstanceId_IsNull = true; }
	/** @brief Checks whether InstanceId_Optional is set to null */
	bool IsInstanceIdNull() const { return InstanceId_IsSet && InstanceId_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString MatchId_Optional{  };
	/** @brief true if MatchId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool MatchId_IsSet{ false };
	/** @brief true if MatchId_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool MatchId_IsNull{ false };
	/** @brief Gets the value of MatchId_Optional, regardless of it having been set */
	FString& GetMatchId() { return MatchId_Optional; }
	/** @brief Gets the value of MatchId_Optional, regardless of it having been set */
	const FString& GetMatchId() const { return MatchId_Optional; }
	/** @brief Gets the value of MatchId_Optional, if it has been set, otherwise it returns DefaultValue */
	const FString& GetMatchId(const FString& DefaultValue) const { if (MatchId_IsSet) return MatchId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of MatchId_Optional and returns true if it has been set, otherwise returns false */
	bool GetMatchId(FString& OutValue) const { if (MatchId_IsSet && !MatchId_IsNull) OutValue = MatchId_Optional; return MatchId_IsSet; }
	/** @brief Returns a pointer to MatchId_Optional, if it has been set, otherwise returns nullptr */
	FString* GetMatchIdOrNull() { if (MatchId_IsSet) return (MatchId_IsNull ? nullptr : &MatchId_Optional); return nullptr; }
	/** @brief Returns a pointer to MatchId_Optional, if it has been set, otherwise returns nullptr */
	const FString* GetMatchIdOrNull() const { if (MatchId_IsSet) return (MatchId_IsNull ? nullptr : &MatchId_Optional); return nullptr; }
	/** @brief Sets the value of MatchId_Optional and also sets MatchId_IsSet to true */
	void SetMatchId(const FString& NewValue) { MatchId_Optional = NewValue; MatchId_IsSet = true; MatchId_IsNull = false; }
	/** @brief Sets the value of MatchId_Optional and also sets MatchId_IsSet to true using move semantics */
	void SetMatchId(FString&& NewValue) { MatchId_Optional = NewValue; MatchId_IsSet = true; MatchId_IsNull = false; }
	/** @brief Clears the value of MatchId_Optional and sets MatchId_IsSet to false */
	void ClearMatchId() { MatchId_IsSet = false; MatchId_IsNull = false; }
	/** @brief Checks whether MatchId_Optional has been set */
	bool IsMatchIdSet() const { return MatchId_IsSet; }
	/** @brief Sets the value explicitly to be treated as null */
	void SetMatchIdToNull() { MatchId_IsSet = true; MatchId_IsNull = true; }
	/** @brief Checks whether MatchId_Optional is set to null */
	bool IsMatchIdNull() const { return MatchId_IsSet && MatchId_IsNull; }

	/** @brief If an order is a transaction, any failed entries will roll back changes from all other entries. */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool IsTransaction_Optional{ false };
	/** @brief true if IsTransaction_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool IsTransaction_IsSet{ false };
	/** @brief Gets the value of IsTransaction_Optional, regardless of it having been set */
	bool& GetIsTransaction() { return IsTransaction_Optional; }
	/** @brief Gets the value of IsTransaction_Optional, regardless of it having been set */
	const bool& GetIsTransaction() const { return IsTransaction_Optional; }
	/** @brief Gets the value of IsTransaction_Optional, if it has been set, otherwise it returns DefaultValue */
	const bool& GetIsTransaction(const bool& DefaultValue) const { if (IsTransaction_IsSet) return IsTransaction_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of IsTransaction_Optional and returns true if it has been set, otherwise returns false */
	bool GetIsTransaction(bool& OutValue) const { if (IsTransaction_IsSet) OutValue = IsTransaction_Optional; return IsTransaction_IsSet; }
	/** @brief Returns a pointer to IsTransaction_Optional, if it has been set, otherwise returns nullptr */
	bool* GetIsTransactionOrNull() { if (IsTransaction_IsSet) return (&IsTransaction_Optional); return nullptr; }
	/** @brief Returns a pointer to IsTransaction_Optional, if it has been set, otherwise returns nullptr */
	const bool* GetIsTransactionOrNull() const { if (IsTransaction_IsSet) return (&IsTransaction_Optional); return nullptr; }
	/** @brief Sets the value of IsTransaction_Optional and also sets IsTransaction_IsSet to true */
	void SetIsTransaction(const bool& NewValue) { IsTransaction_Optional = NewValue; IsTransaction_IsSet = true;  }
	/** @brief Sets the value of IsTransaction_Optional and also sets IsTransaction_IsSet to true using move semantics */
	void SetIsTransaction(bool&& NewValue) { IsTransaction_Optional = NewValue; IsTransaction_IsSet = true;  }
	/** @brief Clears the value of IsTransaction_Optional and sets IsTransaction_IsSet to false */
	void ClearIsTransaction() { IsTransaction_Optional = false; IsTransaction_IsSet = false;  }
	/** @brief Checks whether IsTransaction_Optional has been set */
	bool IsIsTransactionSet() const { return IsTransaction_IsSet; }
	/** @brief Returns true if IsTransaction_Optional is set and matches the default value */
	bool IsIsTransactionDefaultValue() const { return IsTransaction_IsSet && IsTransaction_Optional == false; }
	/** @brief Sets the value of IsTransaction_Optional to its default and also sets IsTransaction_IsSet to true */
	void SetIsTransactionToDefault() { SetIsTransaction(false); }

	/** @brief Unique Identifier for the Order. */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString OrderId{  };
	/** @brief Gets the value of OrderId */
	FString& GetOrderId() { return OrderId; }
	/** @brief Gets the value of OrderId */
	const FString& GetOrderId() const { return OrderId; }
	/** @brief Sets the value of OrderId */
	void SetOrderId(const FString& NewValue) { OrderId = NewValue;   }
	/** @brief Sets the value of OrderId using move semantics */
	void SetOrderId(FString&& NewValue) { OrderId = NewValue;   }

	/** @brief Player UUID of the Player this Player Order belongs to. */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FGuid PlayerUuid{  };
	/** @brief Gets the value of PlayerUuid */
	FGuid& GetPlayerUuid() { return PlayerUuid; }
	/** @brief Gets the value of PlayerUuid */
	const FGuid& GetPlayerUuid() const { return PlayerUuid; }
	/** @brief Sets the value of PlayerUuid */
	void SetPlayerUuid(const FGuid& NewValue) { PlayerUuid = NewValue;   }
	/** @brief Sets the value of PlayerUuid using move semantics */
	void SetPlayerUuid(FGuid&& NewValue) { PlayerUuid = NewValue;   }

	/** @brief Time the Player Order was created. */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FDateTime CreatedTime{  };
	/** @brief Gets the value of CreatedTime */
	FDateTime& GetCreatedTime() { return CreatedTime; }
	/** @brief Gets the value of CreatedTime */
	const FDateTime& GetCreatedTime() const { return CreatedTime; }
	/** @brief Sets the value of CreatedTime */
	void SetCreatedTime(const FDateTime& NewValue) { CreatedTime = NewValue;   }
	/** @brief Sets the value of CreatedTime using move semantics */
	void SetCreatedTime(FDateTime&& NewValue) { CreatedTime = NewValue;   }

	/** @brief List of Player Order Entries for the Player Order. */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TArray<FRHAPI_PlayerOrderEntry> Entries{  };
	/** @brief Gets the value of Entries */
	TArray<FRHAPI_PlayerOrderEntry>& GetEntries() { return Entries; }
	/** @brief Gets the value of Entries */
	const TArray<FRHAPI_PlayerOrderEntry>& GetEntries() const { return Entries; }
	/** @brief Sets the value of Entries */
	void SetEntries(const TArray<FRHAPI_PlayerOrderEntry>& NewValue) { Entries = NewValue;   }
	/** @brief Sets the value of Entries using move semantics */
	void SetEntries(TArray<FRHAPI_PlayerOrderEntry>&& NewValue) { Entries = NewValue;   }
};

/** @} */
