// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "ValidateEventResponse.generated.h"

/** @defgroup RHAPI_ValidateEventResponse RallyHere API Model ValidateEventResponse
 *  @{
 */

/**
 * @brief 
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_ValidateEventResponse : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	/** @brief Is event data valid against JsonSchema? */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Success{ false };
	/** @brief Gets the value of Success */
	FORCEINLINE bool& GetSuccess() { return Success; }
	/** @brief Gets the value of Success */
	FORCEINLINE const bool& GetSuccess() const { return Success; }
	/** @brief Sets the value of Success */
	FORCEINLINE void SetSuccess(const bool& NewValue) { Success = NewValue;   }
	/** @brief Sets the value of Success using move semantics */
	FORCEINLINE void SetSuccess(bool&& NewValue) { Success = NewValue;   }
	/** @brief Returns the default value of Success */
	FORCEINLINE bool GetDefaultValue_Success() { return false; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString ErrorCode_Optional{  };
	/** @brief true if ErrorCode_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool ErrorCode_IsSet{ false };
	/** @brief true if ErrorCode_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool ErrorCode_IsNull{ false };
	/** @brief Gets the value of ErrorCode_Optional, regardless of it having been set */
	FORCEINLINE FString& GetErrorCode() { return ErrorCode_Optional; }
	/** @brief Gets the value of ErrorCode_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetErrorCode() const { return ErrorCode_Optional; }
	/** @brief Gets the value of ErrorCode_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetErrorCode(const FString& DefaultValue) const { if (ErrorCode_IsSet) return ErrorCode_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of ErrorCode_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetErrorCode(FString& OutValue) const { if (ErrorCode_IsSet && !ErrorCode_IsNull) OutValue = ErrorCode_Optional; return ErrorCode_IsSet; }
	/** @brief Returns a pointer to ErrorCode_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetErrorCodeOrNull() { if (ErrorCode_IsSet) return (ErrorCode_IsNull ? nullptr : &ErrorCode_Optional); return nullptr; }
	/** @brief Returns a pointer to ErrorCode_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetErrorCodeOrNull() const { if (ErrorCode_IsSet) return (ErrorCode_IsNull ? nullptr : &ErrorCode_Optional); return nullptr; }
	/** @brief Sets the value of ErrorCode_Optional and also sets ErrorCode_IsSet to true */
	FORCEINLINE void SetErrorCode(const FString& NewValue) { ErrorCode_Optional = NewValue; ErrorCode_IsSet = true; ErrorCode_IsNull = false; }
	/** @brief Sets the value of ErrorCode_Optional and also sets ErrorCode_IsSet to true using move semantics */
	FORCEINLINE void SetErrorCode(FString&& NewValue) { ErrorCode_Optional = NewValue; ErrorCode_IsSet = true; ErrorCode_IsNull = false; }
	/** @brief Clears the value of ErrorCode_Optional and sets ErrorCode_IsSet to false */
	void ClearErrorCode() { ErrorCode_IsSet = false; ErrorCode_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetErrorCodeToNull() { ErrorCode_IsSet = true; ErrorCode_IsNull = true; }
	/** @brief Checks whether ErrorCode_Optional is set to null */
	FORCEINLINE bool IsErrorCodeNull() const { return ErrorCode_IsSet && ErrorCode_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString Context_Optional{  };
	/** @brief true if Context_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Context_IsSet{ false };
	/** @brief true if Context_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Context_IsNull{ false };
	/** @brief Gets the value of Context_Optional, regardless of it having been set */
	FORCEINLINE FString& GetContext() { return Context_Optional; }
	/** @brief Gets the value of Context_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetContext() const { return Context_Optional; }
	/** @brief Gets the value of Context_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetContext(const FString& DefaultValue) const { if (Context_IsSet) return Context_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Context_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetContext(FString& OutValue) const { if (Context_IsSet && !Context_IsNull) OutValue = Context_Optional; return Context_IsSet; }
	/** @brief Returns a pointer to Context_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetContextOrNull() { if (Context_IsSet) return (Context_IsNull ? nullptr : &Context_Optional); return nullptr; }
	/** @brief Returns a pointer to Context_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetContextOrNull() const { if (Context_IsSet) return (Context_IsNull ? nullptr : &Context_Optional); return nullptr; }
	/** @brief Sets the value of Context_Optional and also sets Context_IsSet to true */
	FORCEINLINE void SetContext(const FString& NewValue) { Context_Optional = NewValue; Context_IsSet = true; Context_IsNull = false; }
	/** @brief Sets the value of Context_Optional and also sets Context_IsSet to true using move semantics */
	FORCEINLINE void SetContext(FString&& NewValue) { Context_Optional = NewValue; Context_IsSet = true; Context_IsNull = false; }
	/** @brief Clears the value of Context_Optional and sets Context_IsSet to false */
	void ClearContext() { Context_IsSet = false; Context_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetContextToNull() { Context_IsSet = true; Context_IsNull = true; }
	/** @brief Checks whether Context_Optional is set to null */
	FORCEINLINE bool IsContextNull() const { return Context_IsSet && Context_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString OutputEvent_Optional{  };
	/** @brief true if OutputEvent_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool OutputEvent_IsSet{ false };
	/** @brief true if OutputEvent_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool OutputEvent_IsNull{ false };
	/** @brief Gets the value of OutputEvent_Optional, regardless of it having been set */
	FORCEINLINE FString& GetOutputEvent() { return OutputEvent_Optional; }
	/** @brief Gets the value of OutputEvent_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetOutputEvent() const { return OutputEvent_Optional; }
	/** @brief Gets the value of OutputEvent_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetOutputEvent(const FString& DefaultValue) const { if (OutputEvent_IsSet) return OutputEvent_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of OutputEvent_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetOutputEvent(FString& OutValue) const { if (OutputEvent_IsSet && !OutputEvent_IsNull) OutValue = OutputEvent_Optional; return OutputEvent_IsSet; }
	/** @brief Returns a pointer to OutputEvent_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetOutputEventOrNull() { if (OutputEvent_IsSet) return (OutputEvent_IsNull ? nullptr : &OutputEvent_Optional); return nullptr; }
	/** @brief Returns a pointer to OutputEvent_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetOutputEventOrNull() const { if (OutputEvent_IsSet) return (OutputEvent_IsNull ? nullptr : &OutputEvent_Optional); return nullptr; }
	/** @brief Sets the value of OutputEvent_Optional and also sets OutputEvent_IsSet to true */
	FORCEINLINE void SetOutputEvent(const FString& NewValue) { OutputEvent_Optional = NewValue; OutputEvent_IsSet = true; OutputEvent_IsNull = false; }
	/** @brief Sets the value of OutputEvent_Optional and also sets OutputEvent_IsSet to true using move semantics */
	FORCEINLINE void SetOutputEvent(FString&& NewValue) { OutputEvent_Optional = NewValue; OutputEvent_IsSet = true; OutputEvent_IsNull = false; }
	/** @brief Clears the value of OutputEvent_Optional and sets OutputEvent_IsSet to false */
	void ClearOutputEvent() { OutputEvent_IsSet = false; OutputEvent_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetOutputEventToNull() { OutputEvent_IsSet = true; OutputEvent_IsNull = true; }
	/** @brief Checks whether OutputEvent_Optional is set to null */
	FORCEINLINE bool IsOutputEventNull() const { return OutputEvent_IsSet && OutputEvent_IsNull; }
};

/** @} */
