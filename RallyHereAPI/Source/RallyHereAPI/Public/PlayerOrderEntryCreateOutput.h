// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "InventoryBucket.h"
#include "InventoryOperation.h"
#include "InventorySelector.h"
#include "PlayerOrderEntryType.h"
#include "PurchasePrice.h"
#include "XpQuantityTransform.h"
#include "PlayerOrderEntryCreateOutput.generated.h"

/** @defgroup RHAPI_PlayerOrderEntryCreateOutput RallyHere API Model PlayerOrderEntryCreateOutput
 *  @{
 */

/**
 * @brief Request to create a Player Order Entry.
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_PlayerOrderEntryCreateOutput : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	ERHAPI_PlayerOrderEntryType Type{  };
	/** @brief Gets the value of Type */
	FORCEINLINE ERHAPI_PlayerOrderEntryType& GetType() { return Type; }
	/** @brief Gets the value of Type */
	FORCEINLINE const ERHAPI_PlayerOrderEntryType& GetType() const { return Type; }
	/** @brief Sets the value of Type */
	FORCEINLINE void SetType(const ERHAPI_PlayerOrderEntryType& NewValue) { Type = NewValue;   }
	/** @brief Sets the value of Type using move semantics */
	FORCEINLINE void SetType(ERHAPI_PlayerOrderEntryType&& NewValue) { Type = NewValue;   }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 LootId_Optional{ 0 };
	/** @brief true if LootId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool LootId_IsSet{ false };
	/** @brief true if LootId_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool LootId_IsNull{ false };
	/** @brief Gets the value of LootId_Optional, regardless of it having been set */
	FORCEINLINE int32& GetLootId() { return LootId_Optional; }
	/** @brief Gets the value of LootId_Optional, regardless of it having been set */
	FORCEINLINE const int32& GetLootId() const { return LootId_Optional; }
	/** @brief Gets the value of LootId_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const int32& GetLootId(const int32& DefaultValue) const { if (LootId_IsSet) return LootId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of LootId_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetLootId(int32& OutValue) const { if (LootId_IsSet && !LootId_IsNull) OutValue = LootId_Optional; return LootId_IsSet; }
	/** @brief Returns a pointer to LootId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE int32* GetLootIdOrNull() { if (LootId_IsSet) return (LootId_IsNull ? nullptr : &LootId_Optional); return nullptr; }
	/** @brief Returns a pointer to LootId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const int32* GetLootIdOrNull() const { if (LootId_IsSet) return (LootId_IsNull ? nullptr : &LootId_Optional); return nullptr; }
	/** @brief Sets the value of LootId_Optional and also sets LootId_IsSet to true */
	FORCEINLINE void SetLootId(const int32& NewValue) { LootId_Optional = NewValue; LootId_IsSet = true; LootId_IsNull = false; }
	/** @brief Sets the value of LootId_Optional and also sets LootId_IsSet to true using move semantics */
	FORCEINLINE void SetLootId(int32&& NewValue) { LootId_Optional = NewValue; LootId_IsSet = true; LootId_IsNull = false; }
	/** @brief Clears the value of LootId_Optional and sets LootId_IsSet to false */
	void ClearLootId() { LootId_Optional = 0; LootId_IsSet = false; LootId_IsNull = false; }
	/** @brief Returns the default value of LootId */
	FORCEINLINE int32 GetDefaultValue_LootId() { return 0; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetLootIdToNull() { LootId_IsSet = true; LootId_IsNull = true; }
	/** @brief Checks whether LootId_Optional is set to null */
	FORCEINLINE bool IsLootIdNull() const { return LootId_IsSet && LootId_IsNull; }

	/** @brief Quantity of Inventory */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 Quantity{ 0 };
	/** @brief Gets the value of Quantity */
	FORCEINLINE int32& GetQuantity() { return Quantity; }
	/** @brief Gets the value of Quantity */
	FORCEINLINE const int32& GetQuantity() const { return Quantity; }
	/** @brief Sets the value of Quantity */
	FORCEINLINE void SetQuantity(const int32& NewValue) { Quantity = NewValue;   }
	/** @brief Sets the value of Quantity using move semantics */
	FORCEINLINE void SetQuantity(int32&& NewValue) { Quantity = NewValue;   }
	/** @brief Returns the default value of Quantity */
	FORCEINLINE int32 GetDefaultValue_Quantity() { return 0; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 VendorVersion_Optional{ 0 };
	/** @brief true if VendorVersion_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool VendorVersion_IsSet{ false };
	/** @brief true if VendorVersion_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool VendorVersion_IsNull{ false };
	/** @brief Gets the value of VendorVersion_Optional, regardless of it having been set */
	FORCEINLINE int32& GetVendorVersion() { return VendorVersion_Optional; }
	/** @brief Gets the value of VendorVersion_Optional, regardless of it having been set */
	FORCEINLINE const int32& GetVendorVersion() const { return VendorVersion_Optional; }
	/** @brief Gets the value of VendorVersion_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const int32& GetVendorVersion(const int32& DefaultValue) const { if (VendorVersion_IsSet) return VendorVersion_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of VendorVersion_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetVendorVersion(int32& OutValue) const { if (VendorVersion_IsSet && !VendorVersion_IsNull) OutValue = VendorVersion_Optional; return VendorVersion_IsSet; }
	/** @brief Returns a pointer to VendorVersion_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE int32* GetVendorVersionOrNull() { if (VendorVersion_IsSet) return (VendorVersion_IsNull ? nullptr : &VendorVersion_Optional); return nullptr; }
	/** @brief Returns a pointer to VendorVersion_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const int32* GetVendorVersionOrNull() const { if (VendorVersion_IsSet) return (VendorVersion_IsNull ? nullptr : &VendorVersion_Optional); return nullptr; }
	/** @brief Sets the value of VendorVersion_Optional and also sets VendorVersion_IsSet to true */
	FORCEINLINE void SetVendorVersion(const int32& NewValue) { VendorVersion_Optional = NewValue; VendorVersion_IsSet = true; VendorVersion_IsNull = false; }
	/** @brief Sets the value of VendorVersion_Optional and also sets VendorVersion_IsSet to true using move semantics */
	FORCEINLINE void SetVendorVersion(int32&& NewValue) { VendorVersion_Optional = NewValue; VendorVersion_IsSet = true; VendorVersion_IsNull = false; }
	/** @brief Clears the value of VendorVersion_Optional and sets VendorVersion_IsSet to false */
	void ClearVendorVersion() { VendorVersion_Optional = 0; VendorVersion_IsSet = false; VendorVersion_IsNull = false; }
	/** @brief Returns the default value of VendorVersion */
	FORCEINLINE int32 GetDefaultValue_VendorVersion() { return 0; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetVendorVersionToNull() { VendorVersion_IsSet = true; VendorVersion_IsNull = true; }
	/** @brief Checks whether VendorVersion_Optional is set to null */
	FORCEINLINE bool IsVendorVersionNull() const { return VendorVersion_IsSet && VendorVersion_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString VendorEtag_Optional{  };
	/** @brief true if VendorEtag_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool VendorEtag_IsSet{ false };
	/** @brief true if VendorEtag_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool VendorEtag_IsNull{ false };
	/** @brief Gets the value of VendorEtag_Optional, regardless of it having been set */
	FORCEINLINE FString& GetVendorEtag() { return VendorEtag_Optional; }
	/** @brief Gets the value of VendorEtag_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetVendorEtag() const { return VendorEtag_Optional; }
	/** @brief Gets the value of VendorEtag_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetVendorEtag(const FString& DefaultValue) const { if (VendorEtag_IsSet) return VendorEtag_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of VendorEtag_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetVendorEtag(FString& OutValue) const { if (VendorEtag_IsSet && !VendorEtag_IsNull) OutValue = VendorEtag_Optional; return VendorEtag_IsSet; }
	/** @brief Returns a pointer to VendorEtag_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetVendorEtagOrNull() { if (VendorEtag_IsSet) return (VendorEtag_IsNull ? nullptr : &VendorEtag_Optional); return nullptr; }
	/** @brief Returns a pointer to VendorEtag_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetVendorEtagOrNull() const { if (VendorEtag_IsSet) return (VendorEtag_IsNull ? nullptr : &VendorEtag_Optional); return nullptr; }
	/** @brief Sets the value of VendorEtag_Optional and also sets VendorEtag_IsSet to true */
	FORCEINLINE void SetVendorEtag(const FString& NewValue) { VendorEtag_Optional = NewValue; VendorEtag_IsSet = true; VendorEtag_IsNull = false; }
	/** @brief Sets the value of VendorEtag_Optional and also sets VendorEtag_IsSet to true using move semantics */
	FORCEINLINE void SetVendorEtag(FString&& NewValue) { VendorEtag_Optional = NewValue; VendorEtag_IsSet = true; VendorEtag_IsNull = false; }
	/** @brief Clears the value of VendorEtag_Optional and sets VendorEtag_IsSet to false */
	void ClearVendorEtag() { VendorEtag_IsSet = false; VendorEtag_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetVendorEtagToNull() { VendorEtag_IsSet = true; VendorEtag_IsNull = true; }
	/** @brief Checks whether VendorEtag_Optional is set to null */
	FORCEINLINE bool IsVendorEtagNull() const { return VendorEtag_IsSet && VendorEtag_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TArray<int32> DynamicBundleLootIds_Optional{  };
	/** @brief true if DynamicBundleLootIds_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool DynamicBundleLootIds_IsSet{ false };
	/** @brief true if DynamicBundleLootIds_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool DynamicBundleLootIds_IsNull{ false };
	/** @brief Gets the value of DynamicBundleLootIds_Optional, regardless of it having been set */
	FORCEINLINE TArray<int32>& GetDynamicBundleLootIds() { return DynamicBundleLootIds_Optional; }
	/** @brief Gets the value of DynamicBundleLootIds_Optional, regardless of it having been set */
	FORCEINLINE const TArray<int32>& GetDynamicBundleLootIds() const { return DynamicBundleLootIds_Optional; }
	/** @brief Gets the value of DynamicBundleLootIds_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const TArray<int32>& GetDynamicBundleLootIds(const TArray<int32>& DefaultValue) const { if (DynamicBundleLootIds_IsSet) return DynamicBundleLootIds_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of DynamicBundleLootIds_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetDynamicBundleLootIds(TArray<int32>& OutValue) const { if (DynamicBundleLootIds_IsSet && !DynamicBundleLootIds_IsNull) OutValue = DynamicBundleLootIds_Optional; return DynamicBundleLootIds_IsSet; }
	/** @brief Returns a pointer to DynamicBundleLootIds_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE TArray<int32>* GetDynamicBundleLootIdsOrNull() { if (DynamicBundleLootIds_IsSet) return (DynamicBundleLootIds_IsNull ? nullptr : &DynamicBundleLootIds_Optional); return nullptr; }
	/** @brief Returns a pointer to DynamicBundleLootIds_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const TArray<int32>* GetDynamicBundleLootIdsOrNull() const { if (DynamicBundleLootIds_IsSet) return (DynamicBundleLootIds_IsNull ? nullptr : &DynamicBundleLootIds_Optional); return nullptr; }
	/** @brief Sets the value of DynamicBundleLootIds_Optional and also sets DynamicBundleLootIds_IsSet to true */
	FORCEINLINE void SetDynamicBundleLootIds(const TArray<int32>& NewValue) { DynamicBundleLootIds_Optional = NewValue; DynamicBundleLootIds_IsSet = true; DynamicBundleLootIds_IsNull = false; }
	/** @brief Sets the value of DynamicBundleLootIds_Optional and also sets DynamicBundleLootIds_IsSet to true using move semantics */
	FORCEINLINE void SetDynamicBundleLootIds(TArray<int32>&& NewValue) { DynamicBundleLootIds_Optional = NewValue; DynamicBundleLootIds_IsSet = true; DynamicBundleLootIds_IsNull = false; }
	/** @brief Clears the value of DynamicBundleLootIds_Optional and sets DynamicBundleLootIds_IsSet to false */
	void ClearDynamicBundleLootIds() { DynamicBundleLootIds_IsSet = false; DynamicBundleLootIds_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetDynamicBundleLootIdsToNull() { DynamicBundleLootIds_IsSet = true; DynamicBundleLootIds_IsNull = true; }
	/** @brief Checks whether DynamicBundleLootIds_Optional is set to null */
	FORCEINLINE bool IsDynamicBundleLootIdsNull() const { return DynamicBundleLootIds_IsSet && DynamicBundleLootIds_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_PurchasePrice PurchasePrice_Optional{  };
	/** @brief true if PurchasePrice_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool PurchasePrice_IsSet{ false };
	/** @brief true if PurchasePrice_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool PurchasePrice_IsNull{ false };
	/** @brief Gets the value of PurchasePrice_Optional, regardless of it having been set */
	FORCEINLINE FRHAPI_PurchasePrice& GetPurchasePrice() { return PurchasePrice_Optional; }
	/** @brief Gets the value of PurchasePrice_Optional, regardless of it having been set */
	FORCEINLINE const FRHAPI_PurchasePrice& GetPurchasePrice() const { return PurchasePrice_Optional; }
	/** @brief Gets the value of PurchasePrice_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FRHAPI_PurchasePrice& GetPurchasePrice(const FRHAPI_PurchasePrice& DefaultValue) const { if (PurchasePrice_IsSet) return PurchasePrice_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of PurchasePrice_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetPurchasePrice(FRHAPI_PurchasePrice& OutValue) const { if (PurchasePrice_IsSet && !PurchasePrice_IsNull) OutValue = PurchasePrice_Optional; return PurchasePrice_IsSet; }
	/** @brief Returns a pointer to PurchasePrice_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FRHAPI_PurchasePrice* GetPurchasePriceOrNull() { if (PurchasePrice_IsSet) return (PurchasePrice_IsNull ? nullptr : &PurchasePrice_Optional); return nullptr; }
	/** @brief Returns a pointer to PurchasePrice_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FRHAPI_PurchasePrice* GetPurchasePriceOrNull() const { if (PurchasePrice_IsSet) return (PurchasePrice_IsNull ? nullptr : &PurchasePrice_Optional); return nullptr; }
	/** @brief Sets the value of PurchasePrice_Optional and also sets PurchasePrice_IsSet to true */
	FORCEINLINE void SetPurchasePrice(const FRHAPI_PurchasePrice& NewValue) { PurchasePrice_Optional = NewValue; PurchasePrice_IsSet = true; PurchasePrice_IsNull = false; }
	/** @brief Sets the value of PurchasePrice_Optional and also sets PurchasePrice_IsSet to true using move semantics */
	FORCEINLINE void SetPurchasePrice(FRHAPI_PurchasePrice&& NewValue) { PurchasePrice_Optional = NewValue; PurchasePrice_IsSet = true; PurchasePrice_IsNull = false; }
	/** @brief Clears the value of PurchasePrice_Optional and sets PurchasePrice_IsSet to false */
	void ClearPurchasePrice() { PurchasePrice_IsSet = false; PurchasePrice_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetPurchasePriceToNull() { PurchasePrice_IsSet = true; PurchasePrice_IsNull = true; }
	/** @brief Checks whether PurchasePrice_Optional is set to null */
	FORCEINLINE bool IsPurchasePriceNull() const { return PurchasePrice_IsSet && PurchasePrice_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString ExternalTranId_Optional{  };
	/** @brief true if ExternalTranId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool ExternalTranId_IsSet{ false };
	/** @brief true if ExternalTranId_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool ExternalTranId_IsNull{ false };
	/** @brief Gets the value of ExternalTranId_Optional, regardless of it having been set */
	FORCEINLINE FString& GetExternalTranId() { return ExternalTranId_Optional; }
	/** @brief Gets the value of ExternalTranId_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetExternalTranId() const { return ExternalTranId_Optional; }
	/** @brief Gets the value of ExternalTranId_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetExternalTranId(const FString& DefaultValue) const { if (ExternalTranId_IsSet) return ExternalTranId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of ExternalTranId_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetExternalTranId(FString& OutValue) const { if (ExternalTranId_IsSet && !ExternalTranId_IsNull) OutValue = ExternalTranId_Optional; return ExternalTranId_IsSet; }
	/** @brief Returns a pointer to ExternalTranId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetExternalTranIdOrNull() { if (ExternalTranId_IsSet) return (ExternalTranId_IsNull ? nullptr : &ExternalTranId_Optional); return nullptr; }
	/** @brief Returns a pointer to ExternalTranId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetExternalTranIdOrNull() const { if (ExternalTranId_IsSet) return (ExternalTranId_IsNull ? nullptr : &ExternalTranId_Optional); return nullptr; }
	/** @brief Sets the value of ExternalTranId_Optional and also sets ExternalTranId_IsSet to true */
	FORCEINLINE void SetExternalTranId(const FString& NewValue) { ExternalTranId_Optional = NewValue; ExternalTranId_IsSet = true; ExternalTranId_IsNull = false; }
	/** @brief Sets the value of ExternalTranId_Optional and also sets ExternalTranId_IsSet to true using move semantics */
	FORCEINLINE void SetExternalTranId(FString&& NewValue) { ExternalTranId_Optional = NewValue; ExternalTranId_IsSet = true; ExternalTranId_IsNull = false; }
	/** @brief Clears the value of ExternalTranId_Optional and sets ExternalTranId_IsSet to false */
	void ClearExternalTranId() { ExternalTranId_IsSet = false; ExternalTranId_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetExternalTranIdToNull() { ExternalTranId_IsSet = true; ExternalTranId_IsNull = true; }
	/** @brief Checks whether ExternalTranId_Optional is set to null */
	FORCEINLINE bool IsExternalTranIdNull() const { return ExternalTranId_IsSet && ExternalTranId_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString ExternalItemSku_Optional{  };
	/** @brief true if ExternalItemSku_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool ExternalItemSku_IsSet{ false };
	/** @brief true if ExternalItemSku_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool ExternalItemSku_IsNull{ false };
	/** @brief Gets the value of ExternalItemSku_Optional, regardless of it having been set */
	FORCEINLINE FString& GetExternalItemSku() { return ExternalItemSku_Optional; }
	/** @brief Gets the value of ExternalItemSku_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetExternalItemSku() const { return ExternalItemSku_Optional; }
	/** @brief Gets the value of ExternalItemSku_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetExternalItemSku(const FString& DefaultValue) const { if (ExternalItemSku_IsSet) return ExternalItemSku_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of ExternalItemSku_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetExternalItemSku(FString& OutValue) const { if (ExternalItemSku_IsSet && !ExternalItemSku_IsNull) OutValue = ExternalItemSku_Optional; return ExternalItemSku_IsSet; }
	/** @brief Returns a pointer to ExternalItemSku_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetExternalItemSkuOrNull() { if (ExternalItemSku_IsSet) return (ExternalItemSku_IsNull ? nullptr : &ExternalItemSku_Optional); return nullptr; }
	/** @brief Returns a pointer to ExternalItemSku_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetExternalItemSkuOrNull() const { if (ExternalItemSku_IsSet) return (ExternalItemSku_IsNull ? nullptr : &ExternalItemSku_Optional); return nullptr; }
	/** @brief Sets the value of ExternalItemSku_Optional and also sets ExternalItemSku_IsSet to true */
	FORCEINLINE void SetExternalItemSku(const FString& NewValue) { ExternalItemSku_Optional = NewValue; ExternalItemSku_IsSet = true; ExternalItemSku_IsNull = false; }
	/** @brief Sets the value of ExternalItemSku_Optional and also sets ExternalItemSku_IsSet to true using move semantics */
	FORCEINLINE void SetExternalItemSku(FString&& NewValue) { ExternalItemSku_Optional = NewValue; ExternalItemSku_IsSet = true; ExternalItemSku_IsNull = false; }
	/** @brief Clears the value of ExternalItemSku_Optional and sets ExternalItemSku_IsSet to false */
	void ClearExternalItemSku() { ExternalItemSku_IsSet = false; ExternalItemSku_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetExternalItemSkuToNull() { ExternalItemSku_IsSet = true; ExternalItemSku_IsNull = true; }
	/** @brief Checks whether ExternalItemSku_Optional is set to null */
	FORCEINLINE bool IsExternalItemSkuNull() const { return ExternalItemSku_IsSet && ExternalItemSku_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	ERHAPI_InventoryBucket UseInventoryBucket_Optional{  };
	/** @brief true if UseInventoryBucket_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool UseInventoryBucket_IsSet{ false };
	/** @brief true if UseInventoryBucket_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool UseInventoryBucket_IsNull{ false };
	/** @brief Gets the value of UseInventoryBucket_Optional, regardless of it having been set */
	FORCEINLINE ERHAPI_InventoryBucket& GetUseInventoryBucket() { return UseInventoryBucket_Optional; }
	/** @brief Gets the value of UseInventoryBucket_Optional, regardless of it having been set */
	FORCEINLINE const ERHAPI_InventoryBucket& GetUseInventoryBucket() const { return UseInventoryBucket_Optional; }
	/** @brief Gets the value of UseInventoryBucket_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const ERHAPI_InventoryBucket& GetUseInventoryBucket(const ERHAPI_InventoryBucket& DefaultValue) const { if (UseInventoryBucket_IsSet) return UseInventoryBucket_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of UseInventoryBucket_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetUseInventoryBucket(ERHAPI_InventoryBucket& OutValue) const { if (UseInventoryBucket_IsSet && !UseInventoryBucket_IsNull) OutValue = UseInventoryBucket_Optional; return UseInventoryBucket_IsSet; }
	/** @brief Returns a pointer to UseInventoryBucket_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE ERHAPI_InventoryBucket* GetUseInventoryBucketOrNull() { if (UseInventoryBucket_IsSet) return (UseInventoryBucket_IsNull ? nullptr : &UseInventoryBucket_Optional); return nullptr; }
	/** @brief Returns a pointer to UseInventoryBucket_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const ERHAPI_InventoryBucket* GetUseInventoryBucketOrNull() const { if (UseInventoryBucket_IsSet) return (UseInventoryBucket_IsNull ? nullptr : &UseInventoryBucket_Optional); return nullptr; }
	/** @brief Sets the value of UseInventoryBucket_Optional and also sets UseInventoryBucket_IsSet to true */
	FORCEINLINE void SetUseInventoryBucket(const ERHAPI_InventoryBucket& NewValue) { UseInventoryBucket_Optional = NewValue; UseInventoryBucket_IsSet = true; UseInventoryBucket_IsNull = false; }
	/** @brief Sets the value of UseInventoryBucket_Optional and also sets UseInventoryBucket_IsSet to true using move semantics */
	FORCEINLINE void SetUseInventoryBucket(ERHAPI_InventoryBucket&& NewValue) { UseInventoryBucket_Optional = NewValue; UseInventoryBucket_IsSet = true; UseInventoryBucket_IsNull = false; }
	/** @brief Clears the value of UseInventoryBucket_Optional and sets UseInventoryBucket_IsSet to false */
	void ClearUseInventoryBucket() { UseInventoryBucket_IsSet = false; UseInventoryBucket_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetUseInventoryBucketToNull() { UseInventoryBucket_IsSet = true; UseInventoryBucket_IsNull = true; }
	/** @brief Checks whether UseInventoryBucket_Optional is set to null */
	FORCEINLINE bool IsUseInventoryBucketNull() const { return UseInventoryBucket_IsSet && UseInventoryBucket_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 PlayerPortalEventId_Optional{ 0 };
	/** @brief true if PlayerPortalEventId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool PlayerPortalEventId_IsSet{ false };
	/** @brief true if PlayerPortalEventId_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool PlayerPortalEventId_IsNull{ false };
	/** @brief Gets the value of PlayerPortalEventId_Optional, regardless of it having been set */
	FORCEINLINE int32& GetPlayerPortalEventId() { return PlayerPortalEventId_Optional; }
	/** @brief Gets the value of PlayerPortalEventId_Optional, regardless of it having been set */
	FORCEINLINE const int32& GetPlayerPortalEventId() const { return PlayerPortalEventId_Optional; }
	/** @brief Gets the value of PlayerPortalEventId_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const int32& GetPlayerPortalEventId(const int32& DefaultValue) const { if (PlayerPortalEventId_IsSet) return PlayerPortalEventId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of PlayerPortalEventId_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetPlayerPortalEventId(int32& OutValue) const { if (PlayerPortalEventId_IsSet && !PlayerPortalEventId_IsNull) OutValue = PlayerPortalEventId_Optional; return PlayerPortalEventId_IsSet; }
	/** @brief Returns a pointer to PlayerPortalEventId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE int32* GetPlayerPortalEventIdOrNull() { if (PlayerPortalEventId_IsSet) return (PlayerPortalEventId_IsNull ? nullptr : &PlayerPortalEventId_Optional); return nullptr; }
	/** @brief Returns a pointer to PlayerPortalEventId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const int32* GetPlayerPortalEventIdOrNull() const { if (PlayerPortalEventId_IsSet) return (PlayerPortalEventId_IsNull ? nullptr : &PlayerPortalEventId_Optional); return nullptr; }
	/** @brief Sets the value of PlayerPortalEventId_Optional and also sets PlayerPortalEventId_IsSet to true */
	FORCEINLINE void SetPlayerPortalEventId(const int32& NewValue) { PlayerPortalEventId_Optional = NewValue; PlayerPortalEventId_IsSet = true; PlayerPortalEventId_IsNull = false; }
	/** @brief Sets the value of PlayerPortalEventId_Optional and also sets PlayerPortalEventId_IsSet to true using move semantics */
	FORCEINLINE void SetPlayerPortalEventId(int32&& NewValue) { PlayerPortalEventId_Optional = NewValue; PlayerPortalEventId_IsSet = true; PlayerPortalEventId_IsNull = false; }
	/** @brief Clears the value of PlayerPortalEventId_Optional and sets PlayerPortalEventId_IsSet to false */
	void ClearPlayerPortalEventId() { PlayerPortalEventId_Optional = 0; PlayerPortalEventId_IsSet = false; PlayerPortalEventId_IsNull = false; }
	/** @brief Returns the default value of PlayerPortalEventId */
	FORCEINLINE int32 GetDefaultValue_PlayerPortalEventId() { return 0; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetPlayerPortalEventIdToNull() { PlayerPortalEventId_IsSet = true; PlayerPortalEventId_IsNull = true; }
	/** @brief Checks whether PlayerPortalEventId_Optional is set to null */
	FORCEINLINE bool IsPlayerPortalEventIdNull() const { return PlayerPortalEventId_IsSet && PlayerPortalEventId_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FGuid InventoryId_Optional{  };
	/** @brief true if InventoryId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool InventoryId_IsSet{ false };
	/** @brief true if InventoryId_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool InventoryId_IsNull{ false };
	/** @brief Gets the value of InventoryId_Optional, regardless of it having been set */
	FORCEINLINE FGuid& GetInventoryId() { return InventoryId_Optional; }
	/** @brief Gets the value of InventoryId_Optional, regardless of it having been set */
	FORCEINLINE const FGuid& GetInventoryId() const { return InventoryId_Optional; }
	/** @brief Gets the value of InventoryId_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FGuid& GetInventoryId(const FGuid& DefaultValue) const { if (InventoryId_IsSet) return InventoryId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of InventoryId_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetInventoryId(FGuid& OutValue) const { if (InventoryId_IsSet && !InventoryId_IsNull) OutValue = InventoryId_Optional; return InventoryId_IsSet; }
	/** @brief Returns a pointer to InventoryId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FGuid* GetInventoryIdOrNull() { if (InventoryId_IsSet) return (InventoryId_IsNull ? nullptr : &InventoryId_Optional); return nullptr; }
	/** @brief Returns a pointer to InventoryId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FGuid* GetInventoryIdOrNull() const { if (InventoryId_IsSet) return (InventoryId_IsNull ? nullptr : &InventoryId_Optional); return nullptr; }
	/** @brief Sets the value of InventoryId_Optional and also sets InventoryId_IsSet to true */
	FORCEINLINE void SetInventoryId(const FGuid& NewValue) { InventoryId_Optional = NewValue; InventoryId_IsSet = true; InventoryId_IsNull = false; }
	/** @brief Sets the value of InventoryId_Optional and also sets InventoryId_IsSet to true using move semantics */
	FORCEINLINE void SetInventoryId(FGuid&& NewValue) { InventoryId_Optional = NewValue; InventoryId_IsSet = true; InventoryId_IsNull = false; }
	/** @brief Clears the value of InventoryId_Optional and sets InventoryId_IsSet to false */
	void ClearInventoryId() { InventoryId_IsSet = false; InventoryId_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetInventoryIdToNull() { InventoryId_IsSet = true; InventoryId_IsNull = true; }
	/** @brief Checks whether InventoryId_Optional is set to null */
	FORCEINLINE bool IsInventoryIdNull() const { return InventoryId_IsSet && InventoryId_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 LegacyInventoryId_Optional{ 0 };
	/** @brief true if LegacyInventoryId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool LegacyInventoryId_IsSet{ false };
	/** @brief true if LegacyInventoryId_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool LegacyInventoryId_IsNull{ false };
	/** @brief Gets the value of LegacyInventoryId_Optional, regardless of it having been set */
	FORCEINLINE int32& GetLegacyInventoryId() { return LegacyInventoryId_Optional; }
	/** @brief Gets the value of LegacyInventoryId_Optional, regardless of it having been set */
	FORCEINLINE const int32& GetLegacyInventoryId() const { return LegacyInventoryId_Optional; }
	/** @brief Gets the value of LegacyInventoryId_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const int32& GetLegacyInventoryId(const int32& DefaultValue) const { if (LegacyInventoryId_IsSet) return LegacyInventoryId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of LegacyInventoryId_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetLegacyInventoryId(int32& OutValue) const { if (LegacyInventoryId_IsSet && !LegacyInventoryId_IsNull) OutValue = LegacyInventoryId_Optional; return LegacyInventoryId_IsSet; }
	/** @brief Returns a pointer to LegacyInventoryId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE int32* GetLegacyInventoryIdOrNull() { if (LegacyInventoryId_IsSet) return (LegacyInventoryId_IsNull ? nullptr : &LegacyInventoryId_Optional); return nullptr; }
	/** @brief Returns a pointer to LegacyInventoryId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const int32* GetLegacyInventoryIdOrNull() const { if (LegacyInventoryId_IsSet) return (LegacyInventoryId_IsNull ? nullptr : &LegacyInventoryId_Optional); return nullptr; }
	/** @brief Sets the value of LegacyInventoryId_Optional and also sets LegacyInventoryId_IsSet to true */
	FORCEINLINE void SetLegacyInventoryId(const int32& NewValue) { LegacyInventoryId_Optional = NewValue; LegacyInventoryId_IsSet = true; LegacyInventoryId_IsNull = false; }
	/** @brief Sets the value of LegacyInventoryId_Optional and also sets LegacyInventoryId_IsSet to true using move semantics */
	FORCEINLINE void SetLegacyInventoryId(int32&& NewValue) { LegacyInventoryId_Optional = NewValue; LegacyInventoryId_IsSet = true; LegacyInventoryId_IsNull = false; }
	/** @brief Clears the value of LegacyInventoryId_Optional and sets LegacyInventoryId_IsSet to false */
	void ClearLegacyInventoryId() { LegacyInventoryId_Optional = 0; LegacyInventoryId_IsSet = false; LegacyInventoryId_IsNull = false; }
	/** @brief Returns the default value of LegacyInventoryId */
	FORCEINLINE int32 GetDefaultValue_LegacyInventoryId() { return 0; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetLegacyInventoryIdToNull() { LegacyInventoryId_IsSet = true; LegacyInventoryId_IsNull = true; }
	/** @brief Checks whether LegacyInventoryId_Optional is set to null */
	FORCEINLINE bool IsLegacyInventoryIdNull() const { return LegacyInventoryId_IsSet && LegacyInventoryId_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 ItemId_Optional{ 0 };
	/** @brief true if ItemId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool ItemId_IsSet{ false };
	/** @brief true if ItemId_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool ItemId_IsNull{ false };
	/** @brief Gets the value of ItemId_Optional, regardless of it having been set */
	FORCEINLINE int32& GetItemId() { return ItemId_Optional; }
	/** @brief Gets the value of ItemId_Optional, regardless of it having been set */
	FORCEINLINE const int32& GetItemId() const { return ItemId_Optional; }
	/** @brief Gets the value of ItemId_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const int32& GetItemId(const int32& DefaultValue) const { if (ItemId_IsSet) return ItemId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of ItemId_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetItemId(int32& OutValue) const { if (ItemId_IsSet && !ItemId_IsNull) OutValue = ItemId_Optional; return ItemId_IsSet; }
	/** @brief Returns a pointer to ItemId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE int32* GetItemIdOrNull() { if (ItemId_IsSet) return (ItemId_IsNull ? nullptr : &ItemId_Optional); return nullptr; }
	/** @brief Returns a pointer to ItemId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const int32* GetItemIdOrNull() const { if (ItemId_IsSet) return (ItemId_IsNull ? nullptr : &ItemId_Optional); return nullptr; }
	/** @brief Sets the value of ItemId_Optional and also sets ItemId_IsSet to true */
	FORCEINLINE void SetItemId(const int32& NewValue) { ItemId_Optional = NewValue; ItemId_IsSet = true; ItemId_IsNull = false; }
	/** @brief Sets the value of ItemId_Optional and also sets ItemId_IsSet to true using move semantics */
	FORCEINLINE void SetItemId(int32&& NewValue) { ItemId_Optional = NewValue; ItemId_IsSet = true; ItemId_IsNull = false; }
	/** @brief Clears the value of ItemId_Optional and sets ItemId_IsSet to false */
	void ClearItemId() { ItemId_Optional = 0; ItemId_IsSet = false; ItemId_IsNull = false; }
	/** @brief Returns the default value of ItemId */
	FORCEINLINE int32 GetDefaultValue_ItemId() { return 0; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetItemIdToNull() { ItemId_IsSet = true; ItemId_IsNull = true; }
	/** @brief Checks whether ItemId_Optional is set to null */
	FORCEINLINE bool IsItemIdNull() const { return ItemId_IsSet && ItemId_IsNull; }

	/** @brief Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FDateTime Expires_Optional{  };
	/** @brief true if Expires_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Expires_IsSet{ false };
	/** @brief true if Expires_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Expires_IsNull{ false };
	/** @brief Gets the value of Expires_Optional, regardless of it having been set */
	FORCEINLINE FDateTime& GetExpires() { return Expires_Optional; }
	/** @brief Gets the value of Expires_Optional, regardless of it having been set */
	FORCEINLINE const FDateTime& GetExpires() const { return Expires_Optional; }
	/** @brief Gets the value of Expires_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FDateTime& GetExpires(const FDateTime& DefaultValue) const { if (Expires_IsSet) return Expires_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Expires_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetExpires(FDateTime& OutValue) const { if (Expires_IsSet && !Expires_IsNull) OutValue = Expires_Optional; return Expires_IsSet; }
	/** @brief Returns a pointer to Expires_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FDateTime* GetExpiresOrNull() { if (Expires_IsSet) return (Expires_IsNull ? nullptr : &Expires_Optional); return nullptr; }
	/** @brief Returns a pointer to Expires_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FDateTime* GetExpiresOrNull() const { if (Expires_IsSet) return (Expires_IsNull ? nullptr : &Expires_Optional); return nullptr; }
	/** @brief Sets the value of Expires_Optional and also sets Expires_IsSet to true */
	FORCEINLINE void SetExpires(const FDateTime& NewValue) { Expires_Optional = NewValue; Expires_IsSet = true; Expires_IsNull = false; }
	/** @brief Sets the value of Expires_Optional and also sets Expires_IsSet to true using move semantics */
	FORCEINLINE void SetExpires(FDateTime&& NewValue) { Expires_Optional = NewValue; Expires_IsSet = true; Expires_IsNull = false; }
	/** @brief Clears the value of Expires_Optional and sets Expires_IsSet to false */
	void ClearExpires() { Expires_IsSet = false; Expires_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetExpiresToNull() { Expires_IsSet = true; Expires_IsNull = true; }
	/** @brief Checks whether Expires_Optional is set to null */
	FORCEINLINE bool IsExpiresNull() const { return Expires_IsSet && Expires_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	ERHAPI_XpQuantityTransform XpQuantityTransformType_Optional{  };
	/** @brief true if XpQuantityTransformType_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool XpQuantityTransformType_IsSet{ false };
	/** @brief Gets the value of XpQuantityTransformType_Optional, regardless of it having been set */
	FORCEINLINE ERHAPI_XpQuantityTransform& GetXpQuantityTransformType() { return XpQuantityTransformType_Optional; }
	/** @brief Gets the value of XpQuantityTransformType_Optional, regardless of it having been set */
	FORCEINLINE const ERHAPI_XpQuantityTransform& GetXpQuantityTransformType() const { return XpQuantityTransformType_Optional; }
	/** @brief Gets the value of XpQuantityTransformType_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const ERHAPI_XpQuantityTransform& GetXpQuantityTransformType(const ERHAPI_XpQuantityTransform& DefaultValue) const { if (XpQuantityTransformType_IsSet) return XpQuantityTransformType_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of XpQuantityTransformType_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetXpQuantityTransformType(ERHAPI_XpQuantityTransform& OutValue) const { if (XpQuantityTransformType_IsSet) OutValue = XpQuantityTransformType_Optional; return XpQuantityTransformType_IsSet; }
	/** @brief Returns a pointer to XpQuantityTransformType_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE ERHAPI_XpQuantityTransform* GetXpQuantityTransformTypeOrNull() { if (XpQuantityTransformType_IsSet) return (&XpQuantityTransformType_Optional); return nullptr; }
	/** @brief Returns a pointer to XpQuantityTransformType_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const ERHAPI_XpQuantityTransform* GetXpQuantityTransformTypeOrNull() const { if (XpQuantityTransformType_IsSet) return (&XpQuantityTransformType_Optional); return nullptr; }
	/** @brief Sets the value of XpQuantityTransformType_Optional and also sets XpQuantityTransformType_IsSet to true */
	FORCEINLINE void SetXpQuantityTransformType(const ERHAPI_XpQuantityTransform& NewValue) { XpQuantityTransformType_Optional = NewValue; XpQuantityTransformType_IsSet = true;  }
	/** @brief Sets the value of XpQuantityTransformType_Optional and also sets XpQuantityTransformType_IsSet to true using move semantics */
	FORCEINLINE void SetXpQuantityTransformType(ERHAPI_XpQuantityTransform&& NewValue) { XpQuantityTransformType_Optional = NewValue; XpQuantityTransformType_IsSet = true;  }
	/** @brief Clears the value of XpQuantityTransformType_Optional and sets XpQuantityTransformType_IsSet to false */
	void ClearXpQuantityTransformType() { XpQuantityTransformType_IsSet = false;  }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 HardQuantityMaximum_Optional{ 0 };
	/** @brief true if HardQuantityMaximum_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool HardQuantityMaximum_IsSet{ false };
	/** @brief true if HardQuantityMaximum_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool HardQuantityMaximum_IsNull{ false };
	/** @brief Gets the value of HardQuantityMaximum_Optional, regardless of it having been set */
	FORCEINLINE int32& GetHardQuantityMaximum() { return HardQuantityMaximum_Optional; }
	/** @brief Gets the value of HardQuantityMaximum_Optional, regardless of it having been set */
	FORCEINLINE const int32& GetHardQuantityMaximum() const { return HardQuantityMaximum_Optional; }
	/** @brief Gets the value of HardQuantityMaximum_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const int32& GetHardQuantityMaximum(const int32& DefaultValue) const { if (HardQuantityMaximum_IsSet) return HardQuantityMaximum_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of HardQuantityMaximum_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetHardQuantityMaximum(int32& OutValue) const { if (HardQuantityMaximum_IsSet && !HardQuantityMaximum_IsNull) OutValue = HardQuantityMaximum_Optional; return HardQuantityMaximum_IsSet; }
	/** @brief Returns a pointer to HardQuantityMaximum_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE int32* GetHardQuantityMaximumOrNull() { if (HardQuantityMaximum_IsSet) return (HardQuantityMaximum_IsNull ? nullptr : &HardQuantityMaximum_Optional); return nullptr; }
	/** @brief Returns a pointer to HardQuantityMaximum_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const int32* GetHardQuantityMaximumOrNull() const { if (HardQuantityMaximum_IsSet) return (HardQuantityMaximum_IsNull ? nullptr : &HardQuantityMaximum_Optional); return nullptr; }
	/** @brief Sets the value of HardQuantityMaximum_Optional and also sets HardQuantityMaximum_IsSet to true */
	FORCEINLINE void SetHardQuantityMaximum(const int32& NewValue) { HardQuantityMaximum_Optional = NewValue; HardQuantityMaximum_IsSet = true; HardQuantityMaximum_IsNull = false; }
	/** @brief Sets the value of HardQuantityMaximum_Optional and also sets HardQuantityMaximum_IsSet to true using move semantics */
	FORCEINLINE void SetHardQuantityMaximum(int32&& NewValue) { HardQuantityMaximum_Optional = NewValue; HardQuantityMaximum_IsSet = true; HardQuantityMaximum_IsNull = false; }
	/** @brief Clears the value of HardQuantityMaximum_Optional and sets HardQuantityMaximum_IsSet to false */
	void ClearHardQuantityMaximum() { HardQuantityMaximum_Optional = 0; HardQuantityMaximum_IsSet = false; HardQuantityMaximum_IsNull = false; }
	/** @brief Returns the default value of HardQuantityMaximum */
	FORCEINLINE int32 GetDefaultValue_HardQuantityMaximum() { return 0; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetHardQuantityMaximumToNull() { HardQuantityMaximum_IsSet = true; HardQuantityMaximum_IsNull = true; }
	/** @brief Checks whether HardQuantityMaximum_Optional is set to null */
	FORCEINLINE bool IsHardQuantityMaximumNull() const { return HardQuantityMaximum_IsSet && HardQuantityMaximum_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	ERHAPI_InventoryOperation InventoryOperation_Optional{  };
	/** @brief true if InventoryOperation_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool InventoryOperation_IsSet{ false };
	/** @brief Gets the value of InventoryOperation_Optional, regardless of it having been set */
	FORCEINLINE ERHAPI_InventoryOperation& GetInventoryOperation() { return InventoryOperation_Optional; }
	/** @brief Gets the value of InventoryOperation_Optional, regardless of it having been set */
	FORCEINLINE const ERHAPI_InventoryOperation& GetInventoryOperation() const { return InventoryOperation_Optional; }
	/** @brief Gets the value of InventoryOperation_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const ERHAPI_InventoryOperation& GetInventoryOperation(const ERHAPI_InventoryOperation& DefaultValue) const { if (InventoryOperation_IsSet) return InventoryOperation_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of InventoryOperation_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetInventoryOperation(ERHAPI_InventoryOperation& OutValue) const { if (InventoryOperation_IsSet) OutValue = InventoryOperation_Optional; return InventoryOperation_IsSet; }
	/** @brief Returns a pointer to InventoryOperation_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE ERHAPI_InventoryOperation* GetInventoryOperationOrNull() { if (InventoryOperation_IsSet) return (&InventoryOperation_Optional); return nullptr; }
	/** @brief Returns a pointer to InventoryOperation_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const ERHAPI_InventoryOperation* GetInventoryOperationOrNull() const { if (InventoryOperation_IsSet) return (&InventoryOperation_Optional); return nullptr; }
	/** @brief Sets the value of InventoryOperation_Optional and also sets InventoryOperation_IsSet to true */
	FORCEINLINE void SetInventoryOperation(const ERHAPI_InventoryOperation& NewValue) { InventoryOperation_Optional = NewValue; InventoryOperation_IsSet = true;  }
	/** @brief Sets the value of InventoryOperation_Optional and also sets InventoryOperation_IsSet to true using move semantics */
	FORCEINLINE void SetInventoryOperation(ERHAPI_InventoryOperation&& NewValue) { InventoryOperation_Optional = NewValue; InventoryOperation_IsSet = true;  }
	/** @brief Clears the value of InventoryOperation_Optional and sets InventoryOperation_IsSet to false */
	void ClearInventoryOperation() { InventoryOperation_IsSet = false;  }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	ERHAPI_InventorySelector InventorySelectorType_Optional{  };
	/** @brief true if InventorySelectorType_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool InventorySelectorType_IsSet{ false };
	/** @brief Gets the value of InventorySelectorType_Optional, regardless of it having been set */
	FORCEINLINE ERHAPI_InventorySelector& GetInventorySelectorType() { return InventorySelectorType_Optional; }
	/** @brief Gets the value of InventorySelectorType_Optional, regardless of it having been set */
	FORCEINLINE const ERHAPI_InventorySelector& GetInventorySelectorType() const { return InventorySelectorType_Optional; }
	/** @brief Gets the value of InventorySelectorType_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const ERHAPI_InventorySelector& GetInventorySelectorType(const ERHAPI_InventorySelector& DefaultValue) const { if (InventorySelectorType_IsSet) return InventorySelectorType_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of InventorySelectorType_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetInventorySelectorType(ERHAPI_InventorySelector& OutValue) const { if (InventorySelectorType_IsSet) OutValue = InventorySelectorType_Optional; return InventorySelectorType_IsSet; }
	/** @brief Returns a pointer to InventorySelectorType_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE ERHAPI_InventorySelector* GetInventorySelectorTypeOrNull() { if (InventorySelectorType_IsSet) return (&InventorySelectorType_Optional); return nullptr; }
	/** @brief Returns a pointer to InventorySelectorType_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const ERHAPI_InventorySelector* GetInventorySelectorTypeOrNull() const { if (InventorySelectorType_IsSet) return (&InventorySelectorType_Optional); return nullptr; }
	/** @brief Sets the value of InventorySelectorType_Optional and also sets InventorySelectorType_IsSet to true */
	FORCEINLINE void SetInventorySelectorType(const ERHAPI_InventorySelector& NewValue) { InventorySelectorType_Optional = NewValue; InventorySelectorType_IsSet = true;  }
	/** @brief Sets the value of InventorySelectorType_Optional and also sets InventorySelectorType_IsSet to true using move semantics */
	FORCEINLINE void SetInventorySelectorType(ERHAPI_InventorySelector&& NewValue) { InventorySelectorType_Optional = NewValue; InventorySelectorType_IsSet = true;  }
	/** @brief Clears the value of InventorySelectorType_Optional and sets InventorySelectorType_IsSet to false */
	void ClearInventorySelectorType() { InventorySelectorType_IsSet = false;  }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 QuantityMultInventoryItemId_Optional{ 0 };
	/** @brief true if QuantityMultInventoryItemId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool QuantityMultInventoryItemId_IsSet{ false };
	/** @brief true if QuantityMultInventoryItemId_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool QuantityMultInventoryItemId_IsNull{ false };
	/** @brief Gets the value of QuantityMultInventoryItemId_Optional, regardless of it having been set */
	FORCEINLINE int32& GetQuantityMultInventoryItemId() { return QuantityMultInventoryItemId_Optional; }
	/** @brief Gets the value of QuantityMultInventoryItemId_Optional, regardless of it having been set */
	FORCEINLINE const int32& GetQuantityMultInventoryItemId() const { return QuantityMultInventoryItemId_Optional; }
	/** @brief Gets the value of QuantityMultInventoryItemId_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const int32& GetQuantityMultInventoryItemId(const int32& DefaultValue) const { if (QuantityMultInventoryItemId_IsSet) return QuantityMultInventoryItemId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of QuantityMultInventoryItemId_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetQuantityMultInventoryItemId(int32& OutValue) const { if (QuantityMultInventoryItemId_IsSet && !QuantityMultInventoryItemId_IsNull) OutValue = QuantityMultInventoryItemId_Optional; return QuantityMultInventoryItemId_IsSet; }
	/** @brief Returns a pointer to QuantityMultInventoryItemId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE int32* GetQuantityMultInventoryItemIdOrNull() { if (QuantityMultInventoryItemId_IsSet) return (QuantityMultInventoryItemId_IsNull ? nullptr : &QuantityMultInventoryItemId_Optional); return nullptr; }
	/** @brief Returns a pointer to QuantityMultInventoryItemId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const int32* GetQuantityMultInventoryItemIdOrNull() const { if (QuantityMultInventoryItemId_IsSet) return (QuantityMultInventoryItemId_IsNull ? nullptr : &QuantityMultInventoryItemId_Optional); return nullptr; }
	/** @brief Sets the value of QuantityMultInventoryItemId_Optional and also sets QuantityMultInventoryItemId_IsSet to true */
	FORCEINLINE void SetQuantityMultInventoryItemId(const int32& NewValue) { QuantityMultInventoryItemId_Optional = NewValue; QuantityMultInventoryItemId_IsSet = true; QuantityMultInventoryItemId_IsNull = false; }
	/** @brief Sets the value of QuantityMultInventoryItemId_Optional and also sets QuantityMultInventoryItemId_IsSet to true using move semantics */
	FORCEINLINE void SetQuantityMultInventoryItemId(int32&& NewValue) { QuantityMultInventoryItemId_Optional = NewValue; QuantityMultInventoryItemId_IsSet = true; QuantityMultInventoryItemId_IsNull = false; }
	/** @brief Clears the value of QuantityMultInventoryItemId_Optional and sets QuantityMultInventoryItemId_IsSet to false */
	void ClearQuantityMultInventoryItemId() { QuantityMultInventoryItemId_Optional = 0; QuantityMultInventoryItemId_IsSet = false; QuantityMultInventoryItemId_IsNull = false; }
	/** @brief Returns the default value of QuantityMultInventoryItemId */
	FORCEINLINE int32 GetDefaultValue_QuantityMultInventoryItemId() { return 0; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetQuantityMultInventoryItemIdToNull() { QuantityMultInventoryItemId_IsSet = true; QuantityMultInventoryItemId_IsNull = true; }
	/** @brief Checks whether QuantityMultInventoryItemId_Optional is set to null */
	FORCEINLINE bool IsQuantityMultInventoryItemIdNull() const { return QuantityMultInventoryItemId_IsSet && QuantityMultInventoryItemId_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 TimeFrameId_Optional{ 0 };
	/** @brief true if TimeFrameId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool TimeFrameId_IsSet{ false };
	/** @brief true if TimeFrameId_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool TimeFrameId_IsNull{ false };
	/** @brief Gets the value of TimeFrameId_Optional, regardless of it having been set */
	FORCEINLINE int32& GetTimeFrameId() { return TimeFrameId_Optional; }
	/** @brief Gets the value of TimeFrameId_Optional, regardless of it having been set */
	FORCEINLINE const int32& GetTimeFrameId() const { return TimeFrameId_Optional; }
	/** @brief Gets the value of TimeFrameId_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const int32& GetTimeFrameId(const int32& DefaultValue) const { if (TimeFrameId_IsSet) return TimeFrameId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of TimeFrameId_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetTimeFrameId(int32& OutValue) const { if (TimeFrameId_IsSet && !TimeFrameId_IsNull) OutValue = TimeFrameId_Optional; return TimeFrameId_IsSet; }
	/** @brief Returns a pointer to TimeFrameId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE int32* GetTimeFrameIdOrNull() { if (TimeFrameId_IsSet) return (TimeFrameId_IsNull ? nullptr : &TimeFrameId_Optional); return nullptr; }
	/** @brief Returns a pointer to TimeFrameId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const int32* GetTimeFrameIdOrNull() const { if (TimeFrameId_IsSet) return (TimeFrameId_IsNull ? nullptr : &TimeFrameId_Optional); return nullptr; }
	/** @brief Sets the value of TimeFrameId_Optional and also sets TimeFrameId_IsSet to true */
	FORCEINLINE void SetTimeFrameId(const int32& NewValue) { TimeFrameId_Optional = NewValue; TimeFrameId_IsSet = true; TimeFrameId_IsNull = false; }
	/** @brief Sets the value of TimeFrameId_Optional and also sets TimeFrameId_IsSet to true using move semantics */
	FORCEINLINE void SetTimeFrameId(int32&& NewValue) { TimeFrameId_Optional = NewValue; TimeFrameId_IsSet = true; TimeFrameId_IsNull = false; }
	/** @brief Clears the value of TimeFrameId_Optional and sets TimeFrameId_IsSet to false */
	void ClearTimeFrameId() { TimeFrameId_Optional = 0; TimeFrameId_IsSet = false; TimeFrameId_IsNull = false; }
	/** @brief Returns the default value of TimeFrameId */
	FORCEINLINE int32 GetDefaultValue_TimeFrameId() { return 0; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetTimeFrameIdToNull() { TimeFrameId_IsSet = true; TimeFrameId_IsNull = true; }
	/** @brief Checks whether TimeFrameId_Optional is set to null */
	FORCEINLINE bool IsTimeFrameIdNull() const { return TimeFrameId_IsSet && TimeFrameId_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TMap<FString, FString> CustomData_Optional{  };
	/** @brief true if CustomData_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool CustomData_IsSet{ false };
	/** @brief true if CustomData_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool CustomData_IsNull{ false };
	/** @brief Gets the value of CustomData_Optional, regardless of it having been set */
	FORCEINLINE TMap<FString, FString>& GetCustomData() { return CustomData_Optional; }
	/** @brief Gets the value of CustomData_Optional, regardless of it having been set */
	FORCEINLINE const TMap<FString, FString>& GetCustomData() const { return CustomData_Optional; }
	/** @brief Gets the value of CustomData_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const TMap<FString, FString>& GetCustomData(const TMap<FString, FString>& DefaultValue) const { if (CustomData_IsSet) return CustomData_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of CustomData_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetCustomData(TMap<FString, FString>& OutValue) const { if (CustomData_IsSet && !CustomData_IsNull) OutValue = CustomData_Optional; return CustomData_IsSet; }
	/** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE TMap<FString, FString>* GetCustomDataOrNull() { if (CustomData_IsSet) return (CustomData_IsNull ? nullptr : &CustomData_Optional); return nullptr; }
	/** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const TMap<FString, FString>* GetCustomDataOrNull() const { if (CustomData_IsSet) return (CustomData_IsNull ? nullptr : &CustomData_Optional); return nullptr; }
	/** @brief Sets the value of CustomData_Optional and also sets CustomData_IsSet to true */
	FORCEINLINE void SetCustomData(const TMap<FString, FString>& NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true; CustomData_IsNull = false; }
	/** @brief Sets the value of CustomData_Optional and also sets CustomData_IsSet to true using move semantics */
	FORCEINLINE void SetCustomData(TMap<FString, FString>&& NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true; CustomData_IsNull = false; }
	/** @brief Clears the value of CustomData_Optional and sets CustomData_IsSet to false */
	void ClearCustomData() { CustomData_IsSet = false; CustomData_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetCustomDataToNull() { CustomData_IsSet = true; CustomData_IsNull = true; }
	/** @brief Checks whether CustomData_Optional is set to null */
	FORCEINLINE bool IsCustomDataNull() const { return CustomData_IsSet && CustomData_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString EntryId_Optional{  };
	/** @brief true if EntryId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool EntryId_IsSet{ false };
	/** @brief true if EntryId_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool EntryId_IsNull{ false };
	/** @brief Gets the value of EntryId_Optional, regardless of it having been set */
	FORCEINLINE FString& GetEntryId() { return EntryId_Optional; }
	/** @brief Gets the value of EntryId_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetEntryId() const { return EntryId_Optional; }
	/** @brief Gets the value of EntryId_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetEntryId(const FString& DefaultValue) const { if (EntryId_IsSet) return EntryId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of EntryId_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetEntryId(FString& OutValue) const { if (EntryId_IsSet && !EntryId_IsNull) OutValue = EntryId_Optional; return EntryId_IsSet; }
	/** @brief Returns a pointer to EntryId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetEntryIdOrNull() { if (EntryId_IsSet) return (EntryId_IsNull ? nullptr : &EntryId_Optional); return nullptr; }
	/** @brief Returns a pointer to EntryId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetEntryIdOrNull() const { if (EntryId_IsSet) return (EntryId_IsNull ? nullptr : &EntryId_Optional); return nullptr; }
	/** @brief Sets the value of EntryId_Optional and also sets EntryId_IsSet to true */
	FORCEINLINE void SetEntryId(const FString& NewValue) { EntryId_Optional = NewValue; EntryId_IsSet = true; EntryId_IsNull = false; }
	/** @brief Sets the value of EntryId_Optional and also sets EntryId_IsSet to true using move semantics */
	FORCEINLINE void SetEntryId(FString&& NewValue) { EntryId_Optional = NewValue; EntryId_IsSet = true; EntryId_IsNull = false; }
	/** @brief Clears the value of EntryId_Optional and sets EntryId_IsSet to false */
	void ClearEntryId() { EntryId_IsSet = false; EntryId_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetEntryIdToNull() { EntryId_IsSet = true; EntryId_IsNull = true; }
	/** @brief Checks whether EntryId_Optional is set to null */
	FORCEINLINE bool IsEntryIdNull() const { return EntryId_IsSet && EntryId_IsNull; }
};

/** @} */
