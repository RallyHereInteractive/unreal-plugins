// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "CacheInfo.h"
#include "InventoryBucket.h"
#include "InventoryOperation.h"
#include "InventorySelector.h"
#include "Item.h"
#include "QuantityType.h"
#include "XpQuantityTransform.h"
#include "Loot.generated.h"

/** @defgroup RHAPI_Loot RallyHere API Model Loot
 *  @{
 */

/**
 * @brief Loot determines how an Item fulfilled. When Loot is fulfilled, the Item is granted to the player or the Sub Vendor is fulfilled but not both.
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_Loot : public FRHAPI_Model
{
    GENERATED_BODY()

    /**
    * @brief Fills this object with data from the passed in JSON
    *
    * @param [in] JsonValue Data from the API call.
    *
    * @return true if parsing of the JSON data was successful.
    */
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

    /**
    * @brief Writes the data from this object into the specified JSON Writer stream
    *
    * @param [in] Writer JSON Writer stream to push .
    */
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /** @brief Custom data associated with the resource */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    TMap<FString, FString> CustomData_Optional{  };
    /** @brief true if CustomData_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool CustomData_IsSet{ false };
    /** @brief Gets the value of CustomData_Optional, regardless of it having been set */
    TMap<FString, FString>& GetCustomData() { return CustomData_Optional; }
    /** @brief Gets the value of CustomData_Optional, regardless of it having been set */
    const TMap<FString, FString>& GetCustomData() const { return CustomData_Optional; }
    /** @brief Gets the value of CustomData_Optional, if it has been set, otherwise it returns DefaultValue */
    const TMap<FString, FString>& GetCustomData(const TMap<FString, FString>& DefaultValue) const { if (CustomData_IsSet) return CustomData_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of CustomData_Optional and returns true if it has been set, otherwise returns false */
    bool GetCustomData(TMap<FString, FString>& OutValue) const { if (CustomData_IsSet) OutValue = CustomData_Optional; return CustomData_IsSet; }
    /** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
    TMap<FString, FString>* GetCustomDataOrNull() { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
    /** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
    const TMap<FString, FString>* GetCustomDataOrNull() const { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
    /** @brief Sets the value of CustomData_Optional and also sets CustomData_IsSet to true */
    void SetCustomData(TMap<FString, FString> NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true; }
     /** @brief Clears the value of CustomData_Optional and sets CustomData_IsSet to false */
    void ClearCustomData() { CustomData_IsSet = false; }

    /** @brief The Loot ID */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 LootId{ 0 };
    /** @brief Gets the value of LootId */
    int32& GetLootId() { return LootId; }
    /** @brief Gets the value of LootId */
    const int32& GetLootId() const { return LootId; }
    /** @brief Sets the value of LootId */
    void SetLootId(int32 NewValue) { LootId = NewValue;  }
    /** @brief Returns true if LootId matches the default value */
    bool IsLootIdDefaultValue() const { return LootId == 0; }
    /** @brief Sets the value of LootId to its default  */
    void SetLootIdToDefault() { LootId = 0;  }

    /** @brief The Vendor ID */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 VendorId{ 0 };
    /** @brief Gets the value of VendorId */
    int32& GetVendorId() { return VendorId; }
    /** @brief Gets the value of VendorId */
    const int32& GetVendorId() const { return VendorId; }
    /** @brief Sets the value of VendorId */
    void SetVendorId(int32 NewValue) { VendorId = NewValue;  }
    /** @brief Returns true if VendorId matches the default value */
    bool IsVendorIdDefaultValue() const { return VendorId == 0; }
    /** @brief Sets the value of VendorId to its default  */
    void SetVendorIdToDefault() { VendorId = 0;  }

    /** @brief The Item ID. Optional Item that will be granted to the player if Sub Vendor ID is not specified. */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 ItemId_Optional{  };
    /** @brief true if ItemId_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool ItemId_IsSet{ false };
    /** @brief Gets the value of ItemId_Optional, regardless of it having been set */
    int32& GetItemId() { return ItemId_Optional; }
    /** @brief Gets the value of ItemId_Optional, regardless of it having been set */
    const int32& GetItemId() const { return ItemId_Optional; }
    /** @brief Gets the value of ItemId_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetItemId(const int32& DefaultValue) const { if (ItemId_IsSet) return ItemId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of ItemId_Optional and returns true if it has been set, otherwise returns false */
    bool GetItemId(int32& OutValue) const { if (ItemId_IsSet) OutValue = ItemId_Optional; return ItemId_IsSet; }
    /** @brief Returns a pointer to ItemId_Optional, if it has been set, otherwise returns nullptr */
    int32* GetItemIdOrNull() { if (ItemId_IsSet) return &ItemId_Optional; return nullptr; }
    /** @brief Returns a pointer to ItemId_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetItemIdOrNull() const { if (ItemId_IsSet) return &ItemId_Optional; return nullptr; }
    /** @brief Sets the value of ItemId_Optional and also sets ItemId_IsSet to true */
    void SetItemId(int32 NewValue) { ItemId_Optional = NewValue; ItemId_IsSet = true; }
     /** @brief Clears the value of ItemId_Optional and sets ItemId_IsSet to false */
    void ClearItemId() { ItemId_Optional = 0; ItemId_IsSet = false; }
    /** @brief Returns true if ItemId_Optional is set and matches the default value */
    bool IsItemIdDefaultValue() const { return ItemId_IsSet && ItemId_Optional == 0; }
    /** @brief Sets the value of ItemId_Optional to its default and also sets ItemId_IsSet to true */
    void SetItemIdToDefault() { ItemId_Optional = 0; ItemId_IsSet = true; }

    /** @brief In-line Item definition. Optional Item that will be granted to the player if Sub Vendor ID is not specified. */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FRHAPI_Item Item_Optional{  };
    /** @brief true if Item_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Item_IsSet{ false };
    /** @brief Gets the value of Item_Optional, regardless of it having been set */
    FRHAPI_Item& GetItem() { return Item_Optional; }
    /** @brief Gets the value of Item_Optional, regardless of it having been set */
    const FRHAPI_Item& GetItem() const { return Item_Optional; }
    /** @brief Gets the value of Item_Optional, if it has been set, otherwise it returns DefaultValue */
    const FRHAPI_Item& GetItem(const FRHAPI_Item& DefaultValue) const { if (Item_IsSet) return Item_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Item_Optional and returns true if it has been set, otherwise returns false */
    bool GetItem(FRHAPI_Item& OutValue) const { if (Item_IsSet) OutValue = Item_Optional; return Item_IsSet; }
    /** @brief Returns a pointer to Item_Optional, if it has been set, otherwise returns nullptr */
    FRHAPI_Item* GetItemOrNull() { if (Item_IsSet) return &Item_Optional; return nullptr; }
    /** @brief Returns a pointer to Item_Optional, if it has been set, otherwise returns nullptr */
    const FRHAPI_Item* GetItemOrNull() const { if (Item_IsSet) return &Item_Optional; return nullptr; }
    /** @brief Sets the value of Item_Optional and also sets Item_IsSet to true */
    void SetItem(FRHAPI_Item NewValue) { Item_Optional = NewValue; Item_IsSet = true; }
     /** @brief Clears the value of Item_Optional and sets Item_IsSet to false */
    void ClearItem() { Item_IsSet = false; }

    /** @brief The Sub Vendor ID. Optional Vendor ID that will be used to fulfill the Loot instead of granting the Item. */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 SubVendorId_Optional{  };
    /** @brief true if SubVendorId_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool SubVendorId_IsSet{ false };
    /** @brief Gets the value of SubVendorId_Optional, regardless of it having been set */
    int32& GetSubVendorId() { return SubVendorId_Optional; }
    /** @brief Gets the value of SubVendorId_Optional, regardless of it having been set */
    const int32& GetSubVendorId() const { return SubVendorId_Optional; }
    /** @brief Gets the value of SubVendorId_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetSubVendorId(const int32& DefaultValue) const { if (SubVendorId_IsSet) return SubVendorId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of SubVendorId_Optional and returns true if it has been set, otherwise returns false */
    bool GetSubVendorId(int32& OutValue) const { if (SubVendorId_IsSet) OutValue = SubVendorId_Optional; return SubVendorId_IsSet; }
    /** @brief Returns a pointer to SubVendorId_Optional, if it has been set, otherwise returns nullptr */
    int32* GetSubVendorIdOrNull() { if (SubVendorId_IsSet) return &SubVendorId_Optional; return nullptr; }
    /** @brief Returns a pointer to SubVendorId_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetSubVendorIdOrNull() const { if (SubVendorId_IsSet) return &SubVendorId_Optional; return nullptr; }
    /** @brief Sets the value of SubVendorId_Optional and also sets SubVendorId_IsSet to true */
    void SetSubVendorId(int32 NewValue) { SubVendorId_Optional = NewValue; SubVendorId_IsSet = true; }
     /** @brief Clears the value of SubVendorId_Optional and sets SubVendorId_IsSet to false */
    void ClearSubVendorId() { SubVendorId_Optional = 0; SubVendorId_IsSet = false; }
    /** @brief Returns true if SubVendorId_Optional is set and matches the default value */
    bool IsSubVendorIdDefaultValue() const { return SubVendorId_IsSet && SubVendorId_Optional == 0; }
    /** @brief Sets the value of SubVendorId_Optional to its default and also sets SubVendorId_IsSet to true */
    void SetSubVendorIdToDefault() { SubVendorId_Optional = 0; SubVendorId_IsSet = true; }

    /** @brief The quantity of the Item or Sub Vendor to fulfill. This will be multiplied by the quantity of fulfilled Loot and the parent Loot if quantity_type is relative. */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 Quantity_Optional{  };
    /** @brief true if Quantity_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Quantity_IsSet{ false };
    /** @brief Gets the value of Quantity_Optional, regardless of it having been set */
    int32& GetQuantity() { return Quantity_Optional; }
    /** @brief Gets the value of Quantity_Optional, regardless of it having been set */
    const int32& GetQuantity() const { return Quantity_Optional; }
    /** @brief Gets the value of Quantity_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetQuantity(const int32& DefaultValue) const { if (Quantity_IsSet) return Quantity_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Quantity_Optional and returns true if it has been set, otherwise returns false */
    bool GetQuantity(int32& OutValue) const { if (Quantity_IsSet) OutValue = Quantity_Optional; return Quantity_IsSet; }
    /** @brief Returns a pointer to Quantity_Optional, if it has been set, otherwise returns nullptr */
    int32* GetQuantityOrNull() { if (Quantity_IsSet) return &Quantity_Optional; return nullptr; }
    /** @brief Returns a pointer to Quantity_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetQuantityOrNull() const { if (Quantity_IsSet) return &Quantity_Optional; return nullptr; }
    /** @brief Sets the value of Quantity_Optional and also sets Quantity_IsSet to true */
    void SetQuantity(int32 NewValue) { Quantity_Optional = NewValue; Quantity_IsSet = true; }
     /** @brief Clears the value of Quantity_Optional and sets Quantity_IsSet to false */
    void ClearQuantity() { Quantity_Optional = 0; Quantity_IsSet = false; }
    /** @brief Returns true if Quantity_Optional is set and matches the default value */
    bool IsQuantityDefaultValue() const { return Quantity_IsSet && Quantity_Optional == 0; }
    /** @brief Sets the value of Quantity_Optional to its default and also sets Quantity_IsSet to true */
    void SetQuantityToDefault() { Quantity_Optional = 0; Quantity_IsSet = true; }

    /** @brief The Inventory Selector Type. Determine how the Inventory is selected and quantity is modified. */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    ERHAPI_InventorySelector InventorySelectorType_Optional{  };
    /** @brief true if InventorySelectorType_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool InventorySelectorType_IsSet{ false };
    /** @brief Gets the value of InventorySelectorType_Optional, regardless of it having been set */
    ERHAPI_InventorySelector& GetInventorySelectorType() { return InventorySelectorType_Optional; }
    /** @brief Gets the value of InventorySelectorType_Optional, regardless of it having been set */
    const ERHAPI_InventorySelector& GetInventorySelectorType() const { return InventorySelectorType_Optional; }
    /** @brief Gets the value of InventorySelectorType_Optional, if it has been set, otherwise it returns DefaultValue */
    const ERHAPI_InventorySelector& GetInventorySelectorType(const ERHAPI_InventorySelector& DefaultValue) const { if (InventorySelectorType_IsSet) return InventorySelectorType_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of InventorySelectorType_Optional and returns true if it has been set, otherwise returns false */
    bool GetInventorySelectorType(ERHAPI_InventorySelector& OutValue) const { if (InventorySelectorType_IsSet) OutValue = InventorySelectorType_Optional; return InventorySelectorType_IsSet; }
    /** @brief Returns a pointer to InventorySelectorType_Optional, if it has been set, otherwise returns nullptr */
    ERHAPI_InventorySelector* GetInventorySelectorTypeOrNull() { if (InventorySelectorType_IsSet) return &InventorySelectorType_Optional; return nullptr; }
    /** @brief Returns a pointer to InventorySelectorType_Optional, if it has been set, otherwise returns nullptr */
    const ERHAPI_InventorySelector* GetInventorySelectorTypeOrNull() const { if (InventorySelectorType_IsSet) return &InventorySelectorType_Optional; return nullptr; }
    /** @brief Sets the value of InventorySelectorType_Optional and also sets InventorySelectorType_IsSet to true */
    void SetInventorySelectorType(ERHAPI_InventorySelector NewValue) { InventorySelectorType_Optional = NewValue; InventorySelectorType_IsSet = true; }
     /** @brief Clears the value of InventorySelectorType_Optional and sets InventorySelectorType_IsSet to false */
    void ClearInventorySelectorType() { InventorySelectorType_IsSet = false; }

    /** @brief The Inventory Operation. Determine how the Loot quantity is modified based on the context it is fulfilled in. This also determines the order Loot will be fulfilled in when sort_order is the same. */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    ERHAPI_InventoryOperation InventoryOperation_Optional{  };
    /** @brief true if InventoryOperation_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool InventoryOperation_IsSet{ false };
    /** @brief Gets the value of InventoryOperation_Optional, regardless of it having been set */
    ERHAPI_InventoryOperation& GetInventoryOperation() { return InventoryOperation_Optional; }
    /** @brief Gets the value of InventoryOperation_Optional, regardless of it having been set */
    const ERHAPI_InventoryOperation& GetInventoryOperation() const { return InventoryOperation_Optional; }
    /** @brief Gets the value of InventoryOperation_Optional, if it has been set, otherwise it returns DefaultValue */
    const ERHAPI_InventoryOperation& GetInventoryOperation(const ERHAPI_InventoryOperation& DefaultValue) const { if (InventoryOperation_IsSet) return InventoryOperation_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of InventoryOperation_Optional and returns true if it has been set, otherwise returns false */
    bool GetInventoryOperation(ERHAPI_InventoryOperation& OutValue) const { if (InventoryOperation_IsSet) OutValue = InventoryOperation_Optional; return InventoryOperation_IsSet; }
    /** @brief Returns a pointer to InventoryOperation_Optional, if it has been set, otherwise returns nullptr */
    ERHAPI_InventoryOperation* GetInventoryOperationOrNull() { if (InventoryOperation_IsSet) return &InventoryOperation_Optional; return nullptr; }
    /** @brief Returns a pointer to InventoryOperation_Optional, if it has been set, otherwise returns nullptr */
    const ERHAPI_InventoryOperation* GetInventoryOperationOrNull() const { if (InventoryOperation_IsSet) return &InventoryOperation_Optional; return nullptr; }
    /** @brief Sets the value of InventoryOperation_Optional and also sets InventoryOperation_IsSet to true */
    void SetInventoryOperation(ERHAPI_InventoryOperation NewValue) { InventoryOperation_Optional = NewValue; InventoryOperation_IsSet = true; }
     /** @brief Clears the value of InventoryOperation_Optional and sets InventoryOperation_IsSet to false */
    void ClearInventoryOperation() { InventoryOperation_IsSet = false; }

    /** @brief Determines if the Loot is active. Inactive Loot will not be fulfilled. */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Active_Optional{  };
    /** @brief true if Active_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Active_IsSet{ false };
    /** @brief Gets the value of Active_Optional, regardless of it having been set */
    bool& GetActive() { return Active_Optional; }
    /** @brief Gets the value of Active_Optional, regardless of it having been set */
    const bool& GetActive() const { return Active_Optional; }
    /** @brief Gets the value of Active_Optional, if it has been set, otherwise it returns DefaultValue */
    const bool& GetActive(const bool& DefaultValue) const { if (Active_IsSet) return Active_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Active_Optional and returns true if it has been set, otherwise returns false */
    bool GetActive(bool& OutValue) const { if (Active_IsSet) OutValue = Active_Optional; return Active_IsSet; }
    /** @brief Returns a pointer to Active_Optional, if it has been set, otherwise returns nullptr */
    bool* GetActiveOrNull() { if (Active_IsSet) return &Active_Optional; return nullptr; }
    /** @brief Returns a pointer to Active_Optional, if it has been set, otherwise returns nullptr */
    const bool* GetActiveOrNull() const { if (Active_IsSet) return &Active_Optional; return nullptr; }
    /** @brief Sets the value of Active_Optional and also sets Active_IsSet to true */
    void SetActive(bool NewValue) { Active_Optional = NewValue; Active_IsSet = true; }
     /** @brief Clears the value of Active_Optional and sets Active_IsSet to false */
    void ClearActive() { Active_Optional = false; Active_IsSet = false; }
    /** @brief Returns true if Active_Optional is set and matches the default value */
    bool IsActiveDefaultValue() const { return Active_IsSet && Active_Optional == false; }
    /** @brief Sets the value of Active_Optional to its default and also sets Active_IsSet to true */
    void SetActiveToDefault() { Active_Optional = false; Active_IsSet = true; }

    /** @brief The sort order of the Loot. Lower sort order will be fulfilled first. Inventory Operation is used as a tie breaker when sort_order is the same. */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 SortOrder_Optional{  };
    /** @brief true if SortOrder_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool SortOrder_IsSet{ false };
    /** @brief Gets the value of SortOrder_Optional, regardless of it having been set */
    int32& GetSortOrder() { return SortOrder_Optional; }
    /** @brief Gets the value of SortOrder_Optional, regardless of it having been set */
    const int32& GetSortOrder() const { return SortOrder_Optional; }
    /** @brief Gets the value of SortOrder_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetSortOrder(const int32& DefaultValue) const { if (SortOrder_IsSet) return SortOrder_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of SortOrder_Optional and returns true if it has been set, otherwise returns false */
    bool GetSortOrder(int32& OutValue) const { if (SortOrder_IsSet) OutValue = SortOrder_Optional; return SortOrder_IsSet; }
    /** @brief Returns a pointer to SortOrder_Optional, if it has been set, otherwise returns nullptr */
    int32* GetSortOrderOrNull() { if (SortOrder_IsSet) return &SortOrder_Optional; return nullptr; }
    /** @brief Returns a pointer to SortOrder_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetSortOrderOrNull() const { if (SortOrder_IsSet) return &SortOrder_Optional; return nullptr; }
    /** @brief Sets the value of SortOrder_Optional and also sets SortOrder_IsSet to true */
    void SetSortOrder(int32 NewValue) { SortOrder_Optional = NewValue; SortOrder_IsSet = true; }
     /** @brief Clears the value of SortOrder_Optional and sets SortOrder_IsSet to false */
    void ClearSortOrder() { SortOrder_Optional = 0; SortOrder_IsSet = false; }
    /** @brief Returns true if SortOrder_Optional is set and matches the default value */
    bool IsSortOrderDefaultValue() const { return SortOrder_IsSet && SortOrder_Optional == 0; }
    /** @brief Sets the value of SortOrder_Optional to its default and also sets SortOrder_IsSet to true */
    void SetSortOrderToDefault() { SortOrder_Optional = 0; SortOrder_IsSet = true; }

    /** @brief The drop weight of the Loot. Higher drop weight will be more likely to be fulfilled. */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 DropWeight_Optional{  };
    /** @brief true if DropWeight_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool DropWeight_IsSet{ false };
    /** @brief Gets the value of DropWeight_Optional, regardless of it having been set */
    int32& GetDropWeight() { return DropWeight_Optional; }
    /** @brief Gets the value of DropWeight_Optional, regardless of it having been set */
    const int32& GetDropWeight() const { return DropWeight_Optional; }
    /** @brief Gets the value of DropWeight_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetDropWeight(const int32& DefaultValue) const { if (DropWeight_IsSet) return DropWeight_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of DropWeight_Optional and returns true if it has been set, otherwise returns false */
    bool GetDropWeight(int32& OutValue) const { if (DropWeight_IsSet) OutValue = DropWeight_Optional; return DropWeight_IsSet; }
    /** @brief Returns a pointer to DropWeight_Optional, if it has been set, otherwise returns nullptr */
    int32* GetDropWeightOrNull() { if (DropWeight_IsSet) return &DropWeight_Optional; return nullptr; }
    /** @brief Returns a pointer to DropWeight_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetDropWeightOrNull() const { if (DropWeight_IsSet) return &DropWeight_Optional; return nullptr; }
    /** @brief Sets the value of DropWeight_Optional and also sets DropWeight_IsSet to true */
    void SetDropWeight(int32 NewValue) { DropWeight_Optional = NewValue; DropWeight_IsSet = true; }
     /** @brief Clears the value of DropWeight_Optional and sets DropWeight_IsSet to false */
    void ClearDropWeight() { DropWeight_Optional = 0; DropWeight_IsSet = false; }
    /** @brief Returns true if DropWeight_Optional is set and matches the default value */
    bool IsDropWeightDefaultValue() const { return DropWeight_IsSet && DropWeight_Optional == 0; }
    /** @brief Sets the value of DropWeight_Optional to its default and also sets DropWeight_IsSet to true */
    void SetDropWeightToDefault() { DropWeight_Optional = 0; DropWeight_IsSet = true; }

    /** @brief When dropped in a randomly sampled vendor, will this create a new order or fill inline?. The primary use case for this is when you want the same loot to be dropped multiple times in a randomly sampled vendor. */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool FillInNewOrder_Optional{  };
    /** @brief true if FillInNewOrder_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool FillInNewOrder_IsSet{ false };
    /** @brief Gets the value of FillInNewOrder_Optional, regardless of it having been set */
    bool& GetFillInNewOrder() { return FillInNewOrder_Optional; }
    /** @brief Gets the value of FillInNewOrder_Optional, regardless of it having been set */
    const bool& GetFillInNewOrder() const { return FillInNewOrder_Optional; }
    /** @brief Gets the value of FillInNewOrder_Optional, if it has been set, otherwise it returns DefaultValue */
    const bool& GetFillInNewOrder(const bool& DefaultValue) const { if (FillInNewOrder_IsSet) return FillInNewOrder_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of FillInNewOrder_Optional and returns true if it has been set, otherwise returns false */
    bool GetFillInNewOrder(bool& OutValue) const { if (FillInNewOrder_IsSet) OutValue = FillInNewOrder_Optional; return FillInNewOrder_IsSet; }
    /** @brief Returns a pointer to FillInNewOrder_Optional, if it has been set, otherwise returns nullptr */
    bool* GetFillInNewOrderOrNull() { if (FillInNewOrder_IsSet) return &FillInNewOrder_Optional; return nullptr; }
    /** @brief Returns a pointer to FillInNewOrder_Optional, if it has been set, otherwise returns nullptr */
    const bool* GetFillInNewOrderOrNull() const { if (FillInNewOrder_IsSet) return &FillInNewOrder_Optional; return nullptr; }
    /** @brief Sets the value of FillInNewOrder_Optional and also sets FillInNewOrder_IsSet to true */
    void SetFillInNewOrder(bool NewValue) { FillInNewOrder_Optional = NewValue; FillInNewOrder_IsSet = true; }
     /** @brief Clears the value of FillInNewOrder_Optional and sets FillInNewOrder_IsSet to false */
    void ClearFillInNewOrder() { FillInNewOrder_Optional = false; FillInNewOrder_IsSet = false; }
    /** @brief Returns true if FillInNewOrder_Optional is set and matches the default value */
    bool IsFillInNewOrderDefaultValue() const { return FillInNewOrder_IsSet && FillInNewOrder_Optional == false; }
    /** @brief Sets the value of FillInNewOrder_Optional to its default and also sets FillInNewOrder_IsSet to true */
    void SetFillInNewOrderToDefault() { FillInNewOrder_Optional = false; FillInNewOrder_IsSet = true; }

    /** @brief When dropped in a randomly sampled vendor, will the sub vendor allow dropping part of the the bundle?  False means it will only drop if the entire sub vendor can be given to the player */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool AllowPartialBundles_Optional{  };
    /** @brief true if AllowPartialBundles_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool AllowPartialBundles_IsSet{ false };
    /** @brief Gets the value of AllowPartialBundles_Optional, regardless of it having been set */
    bool& GetAllowPartialBundles() { return AllowPartialBundles_Optional; }
    /** @brief Gets the value of AllowPartialBundles_Optional, regardless of it having been set */
    const bool& GetAllowPartialBundles() const { return AllowPartialBundles_Optional; }
    /** @brief Gets the value of AllowPartialBundles_Optional, if it has been set, otherwise it returns DefaultValue */
    const bool& GetAllowPartialBundles(const bool& DefaultValue) const { if (AllowPartialBundles_IsSet) return AllowPartialBundles_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of AllowPartialBundles_Optional and returns true if it has been set, otherwise returns false */
    bool GetAllowPartialBundles(bool& OutValue) const { if (AllowPartialBundles_IsSet) OutValue = AllowPartialBundles_Optional; return AllowPartialBundles_IsSet; }
    /** @brief Returns a pointer to AllowPartialBundles_Optional, if it has been set, otherwise returns nullptr */
    bool* GetAllowPartialBundlesOrNull() { if (AllowPartialBundles_IsSet) return &AllowPartialBundles_Optional; return nullptr; }
    /** @brief Returns a pointer to AllowPartialBundles_Optional, if it has been set, otherwise returns nullptr */
    const bool* GetAllowPartialBundlesOrNull() const { if (AllowPartialBundles_IsSet) return &AllowPartialBundles_Optional; return nullptr; }
    /** @brief Sets the value of AllowPartialBundles_Optional and also sets AllowPartialBundles_IsSet to true */
    void SetAllowPartialBundles(bool NewValue) { AllowPartialBundles_Optional = NewValue; AllowPartialBundles_IsSet = true; }
     /** @brief Clears the value of AllowPartialBundles_Optional and sets AllowPartialBundles_IsSet to false */
    void ClearAllowPartialBundles() { AllowPartialBundles_Optional = true; AllowPartialBundles_IsSet = false; }
    /** @brief Returns true if AllowPartialBundles_Optional is set and matches the default value */
    bool IsAllowPartialBundlesDefaultValue() const { return AllowPartialBundles_IsSet && AllowPartialBundles_Optional == true; }
    /** @brief Sets the value of AllowPartialBundles_Optional to its default and also sets AllowPartialBundles_IsSet to true */
    void SetAllowPartialBundlesToDefault() { AllowPartialBundles_Optional = true; AllowPartialBundles_IsSet = true; }

    /** @brief Item required to be owned/rented to drop this Loot in a randomly sampled vendor */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 RequiredItemId_Optional{  };
    /** @brief true if RequiredItemId_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool RequiredItemId_IsSet{ false };
    /** @brief Gets the value of RequiredItemId_Optional, regardless of it having been set */
    int32& GetRequiredItemId() { return RequiredItemId_Optional; }
    /** @brief Gets the value of RequiredItemId_Optional, regardless of it having been set */
    const int32& GetRequiredItemId() const { return RequiredItemId_Optional; }
    /** @brief Gets the value of RequiredItemId_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetRequiredItemId(const int32& DefaultValue) const { if (RequiredItemId_IsSet) return RequiredItemId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of RequiredItemId_Optional and returns true if it has been set, otherwise returns false */
    bool GetRequiredItemId(int32& OutValue) const { if (RequiredItemId_IsSet) OutValue = RequiredItemId_Optional; return RequiredItemId_IsSet; }
    /** @brief Returns a pointer to RequiredItemId_Optional, if it has been set, otherwise returns nullptr */
    int32* GetRequiredItemIdOrNull() { if (RequiredItemId_IsSet) return &RequiredItemId_Optional; return nullptr; }
    /** @brief Returns a pointer to RequiredItemId_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetRequiredItemIdOrNull() const { if (RequiredItemId_IsSet) return &RequiredItemId_Optional; return nullptr; }
    /** @brief Sets the value of RequiredItemId_Optional and also sets RequiredItemId_IsSet to true */
    void SetRequiredItemId(int32 NewValue) { RequiredItemId_Optional = NewValue; RequiredItemId_IsSet = true; }
     /** @brief Clears the value of RequiredItemId_Optional and sets RequiredItemId_IsSet to false */
    void ClearRequiredItemId() { RequiredItemId_Optional = 0; RequiredItemId_IsSet = false; }
    /** @brief Returns true if RequiredItemId_Optional is set and matches the default value */
    bool IsRequiredItemIdDefaultValue() const { return RequiredItemId_IsSet && RequiredItemId_Optional == 0; }
    /** @brief Sets the value of RequiredItemId_Optional to its default and also sets RequiredItemId_IsSet to true */
    void SetRequiredItemIdToDefault() { RequiredItemId_Optional = 0; RequiredItemId_IsSet = true; }

    /** @brief Amount of the required_item_id to be owned/rented to drop this Loot in a randomly sampled vendor */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 RequiredItemCount_Optional{  };
    /** @brief true if RequiredItemCount_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool RequiredItemCount_IsSet{ false };
    /** @brief Gets the value of RequiredItemCount_Optional, regardless of it having been set */
    int32& GetRequiredItemCount() { return RequiredItemCount_Optional; }
    /** @brief Gets the value of RequiredItemCount_Optional, regardless of it having been set */
    const int32& GetRequiredItemCount() const { return RequiredItemCount_Optional; }
    /** @brief Gets the value of RequiredItemCount_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetRequiredItemCount(const int32& DefaultValue) const { if (RequiredItemCount_IsSet) return RequiredItemCount_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of RequiredItemCount_Optional and returns true if it has been set, otherwise returns false */
    bool GetRequiredItemCount(int32& OutValue) const { if (RequiredItemCount_IsSet) OutValue = RequiredItemCount_Optional; return RequiredItemCount_IsSet; }
    /** @brief Returns a pointer to RequiredItemCount_Optional, if it has been set, otherwise returns nullptr */
    int32* GetRequiredItemCountOrNull() { if (RequiredItemCount_IsSet) return &RequiredItemCount_Optional; return nullptr; }
    /** @brief Returns a pointer to RequiredItemCount_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetRequiredItemCountOrNull() const { if (RequiredItemCount_IsSet) return &RequiredItemCount_Optional; return nullptr; }
    /** @brief Sets the value of RequiredItemCount_Optional and also sets RequiredItemCount_IsSet to true */
    void SetRequiredItemCount(int32 NewValue) { RequiredItemCount_Optional = NewValue; RequiredItemCount_IsSet = true; }
     /** @brief Clears the value of RequiredItemCount_Optional and sets RequiredItemCount_IsSet to false */
    void ClearRequiredItemCount() { RequiredItemCount_Optional = 0; RequiredItemCount_IsSet = false; }
    /** @brief Returns true if RequiredItemCount_Optional is set and matches the default value */
    bool IsRequiredItemCountDefaultValue() const { return RequiredItemCount_IsSet && RequiredItemCount_Optional == 0; }
    /** @brief Sets the value of RequiredItemCount_Optional to its default and also sets RequiredItemCount_IsSet to true */
    void SetRequiredItemCountToDefault() { RequiredItemCount_Optional = 0; RequiredItemCount_IsSet = true; }

    /** @brief Amount of owned/rented of this Loot's item that will prevent this Loot from dropping in a randomly sampled vendor */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 StackLimit_Optional{  };
    /** @brief true if StackLimit_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool StackLimit_IsSet{ false };
    /** @brief Gets the value of StackLimit_Optional, regardless of it having been set */
    int32& GetStackLimit() { return StackLimit_Optional; }
    /** @brief Gets the value of StackLimit_Optional, regardless of it having been set */
    const int32& GetStackLimit() const { return StackLimit_Optional; }
    /** @brief Gets the value of StackLimit_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetStackLimit(const int32& DefaultValue) const { if (StackLimit_IsSet) return StackLimit_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of StackLimit_Optional and returns true if it has been set, otherwise returns false */
    bool GetStackLimit(int32& OutValue) const { if (StackLimit_IsSet) OutValue = StackLimit_Optional; return StackLimit_IsSet; }
    /** @brief Returns a pointer to StackLimit_Optional, if it has been set, otherwise returns nullptr */
    int32* GetStackLimitOrNull() { if (StackLimit_IsSet) return &StackLimit_Optional; return nullptr; }
    /** @brief Returns a pointer to StackLimit_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetStackLimitOrNull() const { if (StackLimit_IsSet) return &StackLimit_Optional; return nullptr; }
    /** @brief Sets the value of StackLimit_Optional and also sets StackLimit_IsSet to true */
    void SetStackLimit(int32 NewValue) { StackLimit_Optional = NewValue; StackLimit_IsSet = true; }
     /** @brief Clears the value of StackLimit_Optional and sets StackLimit_IsSet to false */
    void ClearStackLimit() { StackLimit_Optional = 0; StackLimit_IsSet = false; }
    /** @brief Returns true if StackLimit_Optional is set and matches the default value */
    bool IsStackLimitDefaultValue() const { return StackLimit_IsSet && StackLimit_Optional == 0; }
    /** @brief Sets the value of StackLimit_Optional to its default and also sets StackLimit_IsSet to true */
    void SetStackLimitToDefault() { StackLimit_Optional = 0; StackLimit_IsSet = true; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 UiHint_Optional{  };
    /** @brief true if UiHint_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool UiHint_IsSet{ false };
    /** @brief Gets the value of UiHint_Optional, regardless of it having been set */
    int32& GetUiHint() { return UiHint_Optional; }
    /** @brief Gets the value of UiHint_Optional, regardless of it having been set */
    const int32& GetUiHint() const { return UiHint_Optional; }
    /** @brief Gets the value of UiHint_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetUiHint(const int32& DefaultValue) const { if (UiHint_IsSet) return UiHint_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of UiHint_Optional and returns true if it has been set, otherwise returns false */
    bool GetUiHint(int32& OutValue) const { if (UiHint_IsSet) OutValue = UiHint_Optional; return UiHint_IsSet; }
    /** @brief Returns a pointer to UiHint_Optional, if it has been set, otherwise returns nullptr */
    int32* GetUiHintOrNull() { if (UiHint_IsSet) return &UiHint_Optional; return nullptr; }
    /** @brief Returns a pointer to UiHint_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetUiHintOrNull() const { if (UiHint_IsSet) return &UiHint_Optional; return nullptr; }
    /** @brief Sets the value of UiHint_Optional and also sets UiHint_IsSet to true */
    void SetUiHint(int32 NewValue) { UiHint_Optional = NewValue; UiHint_IsSet = true; }
     /** @brief Clears the value of UiHint_Optional and sets UiHint_IsSet to false */
    void ClearUiHint() { UiHint_Optional = 0; UiHint_IsSet = false; }
    /** @brief Returns true if UiHint_Optional is set and matches the default value */
    bool IsUiHintDefaultValue() const { return UiHint_IsSet && UiHint_Optional == 0; }
    /** @brief Sets the value of UiHint_Optional to its default and also sets UiHint_IsSet to true */
    void SetUiHintToDefault() { UiHint_Optional = 0; UiHint_IsSet = true; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FDateTime EffectiveFrom_Optional{  };
    /** @brief true if EffectiveFrom_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool EffectiveFrom_IsSet{ false };
    /** @brief Gets the value of EffectiveFrom_Optional, regardless of it having been set */
    FDateTime& GetEffectiveFrom() { return EffectiveFrom_Optional; }
    /** @brief Gets the value of EffectiveFrom_Optional, regardless of it having been set */
    const FDateTime& GetEffectiveFrom() const { return EffectiveFrom_Optional; }
    /** @brief Gets the value of EffectiveFrom_Optional, if it has been set, otherwise it returns DefaultValue */
    const FDateTime& GetEffectiveFrom(const FDateTime& DefaultValue) const { if (EffectiveFrom_IsSet) return EffectiveFrom_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of EffectiveFrom_Optional and returns true if it has been set, otherwise returns false */
    bool GetEffectiveFrom(FDateTime& OutValue) const { if (EffectiveFrom_IsSet) OutValue = EffectiveFrom_Optional; return EffectiveFrom_IsSet; }
    /** @brief Returns a pointer to EffectiveFrom_Optional, if it has been set, otherwise returns nullptr */
    FDateTime* GetEffectiveFromOrNull() { if (EffectiveFrom_IsSet) return &EffectiveFrom_Optional; return nullptr; }
    /** @brief Returns a pointer to EffectiveFrom_Optional, if it has been set, otherwise returns nullptr */
    const FDateTime* GetEffectiveFromOrNull() const { if (EffectiveFrom_IsSet) return &EffectiveFrom_Optional; return nullptr; }
    /** @brief Sets the value of EffectiveFrom_Optional and also sets EffectiveFrom_IsSet to true */
    void SetEffectiveFrom(FDateTime NewValue) { EffectiveFrom_Optional = NewValue; EffectiveFrom_IsSet = true; }
     /** @brief Clears the value of EffectiveFrom_Optional and sets EffectiveFrom_IsSet to false */
    void ClearEffectiveFrom() { EffectiveFrom_IsSet = false; }

    /** @brief Determines how the quantity is modified in the context it is fulfilled in. */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    ERHAPI_QuantityType QuantityType_Optional{  };
    /** @brief true if QuantityType_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool QuantityType_IsSet{ false };
    /** @brief Gets the value of QuantityType_Optional, regardless of it having been set */
    ERHAPI_QuantityType& GetQuantityType() { return QuantityType_Optional; }
    /** @brief Gets the value of QuantityType_Optional, regardless of it having been set */
    const ERHAPI_QuantityType& GetQuantityType() const { return QuantityType_Optional; }
    /** @brief Gets the value of QuantityType_Optional, if it has been set, otherwise it returns DefaultValue */
    const ERHAPI_QuantityType& GetQuantityType(const ERHAPI_QuantityType& DefaultValue) const { if (QuantityType_IsSet) return QuantityType_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of QuantityType_Optional and returns true if it has been set, otherwise returns false */
    bool GetQuantityType(ERHAPI_QuantityType& OutValue) const { if (QuantityType_IsSet) OutValue = QuantityType_Optional; return QuantityType_IsSet; }
    /** @brief Returns a pointer to QuantityType_Optional, if it has been set, otherwise returns nullptr */
    ERHAPI_QuantityType* GetQuantityTypeOrNull() { if (QuantityType_IsSet) return &QuantityType_Optional; return nullptr; }
    /** @brief Returns a pointer to QuantityType_Optional, if it has been set, otherwise returns nullptr */
    const ERHAPI_QuantityType* GetQuantityTypeOrNull() const { if (QuantityType_IsSet) return &QuantityType_Optional; return nullptr; }
    /** @brief Sets the value of QuantityType_Optional and also sets QuantityType_IsSet to true */
    void SetQuantityType(ERHAPI_QuantityType NewValue) { QuantityType_Optional = NewValue; QuantityType_IsSet = true; }
     /** @brief Clears the value of QuantityType_Optional and sets QuantityType_IsSet to false */
    void ClearQuantityType() { QuantityType_IsSet = false; }

    /** @brief When fulfilling Loot if this is set the quantity will be multiplied by the quantity of this Item in the Player's Inventory. */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 QuantityMultInventoryItemId_Optional{  };
    /** @brief true if QuantityMultInventoryItemId_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool QuantityMultInventoryItemId_IsSet{ false };
    /** @brief Gets the value of QuantityMultInventoryItemId_Optional, regardless of it having been set */
    int32& GetQuantityMultInventoryItemId() { return QuantityMultInventoryItemId_Optional; }
    /** @brief Gets the value of QuantityMultInventoryItemId_Optional, regardless of it having been set */
    const int32& GetQuantityMultInventoryItemId() const { return QuantityMultInventoryItemId_Optional; }
    /** @brief Gets the value of QuantityMultInventoryItemId_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetQuantityMultInventoryItemId(const int32& DefaultValue) const { if (QuantityMultInventoryItemId_IsSet) return QuantityMultInventoryItemId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of QuantityMultInventoryItemId_Optional and returns true if it has been set, otherwise returns false */
    bool GetQuantityMultInventoryItemId(int32& OutValue) const { if (QuantityMultInventoryItemId_IsSet) OutValue = QuantityMultInventoryItemId_Optional; return QuantityMultInventoryItemId_IsSet; }
    /** @brief Returns a pointer to QuantityMultInventoryItemId_Optional, if it has been set, otherwise returns nullptr */
    int32* GetQuantityMultInventoryItemIdOrNull() { if (QuantityMultInventoryItemId_IsSet) return &QuantityMultInventoryItemId_Optional; return nullptr; }
    /** @brief Returns a pointer to QuantityMultInventoryItemId_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetQuantityMultInventoryItemIdOrNull() const { if (QuantityMultInventoryItemId_IsSet) return &QuantityMultInventoryItemId_Optional; return nullptr; }
    /** @brief Sets the value of QuantityMultInventoryItemId_Optional and also sets QuantityMultInventoryItemId_IsSet to true */
    void SetQuantityMultInventoryItemId(int32 NewValue) { QuantityMultInventoryItemId_Optional = NewValue; QuantityMultInventoryItemId_IsSet = true; }
     /** @brief Clears the value of QuantityMultInventoryItemId_Optional and sets QuantityMultInventoryItemId_IsSet to false */
    void ClearQuantityMultInventoryItemId() { QuantityMultInventoryItemId_Optional = 0; QuantityMultInventoryItemId_IsSet = false; }
    /** @brief Returns true if QuantityMultInventoryItemId_Optional is set and matches the default value */
    bool IsQuantityMultInventoryItemIdDefaultValue() const { return QuantityMultInventoryItemId_IsSet && QuantityMultInventoryItemId_Optional == 0; }
    /** @brief Sets the value of QuantityMultInventoryItemId_Optional to its default and also sets QuantityMultInventoryItemId_IsSet to true */
    void SetQuantityMultInventoryItemIdToDefault() { QuantityMultInventoryItemId_Optional = 0; QuantityMultInventoryItemId_IsSet = true; }

    /** @brief Determines if the Loot can be claimed by the client. This is dangerous without the correct loot confiuration as a client could claim Loot multiple times. */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool IsClaimableByClient_Optional{  };
    /** @brief true if IsClaimableByClient_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool IsClaimableByClient_IsSet{ false };
    /** @brief Gets the value of IsClaimableByClient_Optional, regardless of it having been set */
    bool& GetIsClaimableByClient() { return IsClaimableByClient_Optional; }
    /** @brief Gets the value of IsClaimableByClient_Optional, regardless of it having been set */
    const bool& GetIsClaimableByClient() const { return IsClaimableByClient_Optional; }
    /** @brief Gets the value of IsClaimableByClient_Optional, if it has been set, otherwise it returns DefaultValue */
    const bool& GetIsClaimableByClient(const bool& DefaultValue) const { if (IsClaimableByClient_IsSet) return IsClaimableByClient_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of IsClaimableByClient_Optional and returns true if it has been set, otherwise returns false */
    bool GetIsClaimableByClient(bool& OutValue) const { if (IsClaimableByClient_IsSet) OutValue = IsClaimableByClient_Optional; return IsClaimableByClient_IsSet; }
    /** @brief Returns a pointer to IsClaimableByClient_Optional, if it has been set, otherwise returns nullptr */
    bool* GetIsClaimableByClientOrNull() { if (IsClaimableByClient_IsSet) return &IsClaimableByClient_Optional; return nullptr; }
    /** @brief Returns a pointer to IsClaimableByClient_Optional, if it has been set, otherwise returns nullptr */
    const bool* GetIsClaimableByClientOrNull() const { if (IsClaimableByClient_IsSet) return &IsClaimableByClient_Optional; return nullptr; }
    /** @brief Sets the value of IsClaimableByClient_Optional and also sets IsClaimableByClient_IsSet to true */
    void SetIsClaimableByClient(bool NewValue) { IsClaimableByClient_Optional = NewValue; IsClaimableByClient_IsSet = true; }
     /** @brief Clears the value of IsClaimableByClient_Optional and sets IsClaimableByClient_IsSet to false */
    void ClearIsClaimableByClient() { IsClaimableByClient_Optional = false; IsClaimableByClient_IsSet = false; }
    /** @brief Returns true if IsClaimableByClient_Optional is set and matches the default value */
    bool IsIsClaimableByClientDefaultValue() const { return IsClaimableByClient_IsSet && IsClaimableByClient_Optional == false; }
    /** @brief Sets the value of IsClaimableByClient_Optional to its default and also sets IsClaimableByClient_IsSet to true */
    void SetIsClaimableByClientToDefault() { IsClaimableByClient_Optional = false; IsClaimableByClient_IsSet = true; }

    /** @brief The Time Frame ID. Optional Time Frame ID that will be used the expiration of Loot when it is fulfilled. */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 TimeFrameId_Optional{  };
    /** @brief true if TimeFrameId_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool TimeFrameId_IsSet{ false };
    /** @brief Gets the value of TimeFrameId_Optional, regardless of it having been set */
    int32& GetTimeFrameId() { return TimeFrameId_Optional; }
    /** @brief Gets the value of TimeFrameId_Optional, regardless of it having been set */
    const int32& GetTimeFrameId() const { return TimeFrameId_Optional; }
    /** @brief Gets the value of TimeFrameId_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetTimeFrameId(const int32& DefaultValue) const { if (TimeFrameId_IsSet) return TimeFrameId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of TimeFrameId_Optional and returns true if it has been set, otherwise returns false */
    bool GetTimeFrameId(int32& OutValue) const { if (TimeFrameId_IsSet) OutValue = TimeFrameId_Optional; return TimeFrameId_IsSet; }
    /** @brief Returns a pointer to TimeFrameId_Optional, if it has been set, otherwise returns nullptr */
    int32* GetTimeFrameIdOrNull() { if (TimeFrameId_IsSet) return &TimeFrameId_Optional; return nullptr; }
    /** @brief Returns a pointer to TimeFrameId_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetTimeFrameIdOrNull() const { if (TimeFrameId_IsSet) return &TimeFrameId_Optional; return nullptr; }
    /** @brief Sets the value of TimeFrameId_Optional and also sets TimeFrameId_IsSet to true */
    void SetTimeFrameId(int32 NewValue) { TimeFrameId_Optional = NewValue; TimeFrameId_IsSet = true; }
     /** @brief Clears the value of TimeFrameId_Optional and sets TimeFrameId_IsSet to false */
    void ClearTimeFrameId() { TimeFrameId_Optional = 0; TimeFrameId_IsSet = false; }
    /** @brief Returns true if TimeFrameId_Optional is set and matches the default value */
    bool IsTimeFrameIdDefaultValue() const { return TimeFrameId_IsSet && TimeFrameId_Optional == 0; }
    /** @brief Sets the value of TimeFrameId_Optional to its default and also sets TimeFrameId_IsSet to true */
    void SetTimeFrameIdToDefault() { TimeFrameId_Optional = 0; TimeFrameId_IsSet = true; }

    /** @brief Inventory Bucket to use for this Loot. */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    ERHAPI_InventoryBucket UseInventoryBucket_Optional{  };
    /** @brief true if UseInventoryBucket_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool UseInventoryBucket_IsSet{ false };
    /** @brief Gets the value of UseInventoryBucket_Optional, regardless of it having been set */
    ERHAPI_InventoryBucket& GetUseInventoryBucket() { return UseInventoryBucket_Optional; }
    /** @brief Gets the value of UseInventoryBucket_Optional, regardless of it having been set */
    const ERHAPI_InventoryBucket& GetUseInventoryBucket() const { return UseInventoryBucket_Optional; }
    /** @brief Gets the value of UseInventoryBucket_Optional, if it has been set, otherwise it returns DefaultValue */
    const ERHAPI_InventoryBucket& GetUseInventoryBucket(const ERHAPI_InventoryBucket& DefaultValue) const { if (UseInventoryBucket_IsSet) return UseInventoryBucket_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of UseInventoryBucket_Optional and returns true if it has been set, otherwise returns false */
    bool GetUseInventoryBucket(ERHAPI_InventoryBucket& OutValue) const { if (UseInventoryBucket_IsSet) OutValue = UseInventoryBucket_Optional; return UseInventoryBucket_IsSet; }
    /** @brief Returns a pointer to UseInventoryBucket_Optional, if it has been set, otherwise returns nullptr */
    ERHAPI_InventoryBucket* GetUseInventoryBucketOrNull() { if (UseInventoryBucket_IsSet) return &UseInventoryBucket_Optional; return nullptr; }
    /** @brief Returns a pointer to UseInventoryBucket_Optional, if it has been set, otherwise returns nullptr */
    const ERHAPI_InventoryBucket* GetUseInventoryBucketOrNull() const { if (UseInventoryBucket_IsSet) return &UseInventoryBucket_Optional; return nullptr; }
    /** @brief Sets the value of UseInventoryBucket_Optional and also sets UseInventoryBucket_IsSet to true */
    void SetUseInventoryBucket(ERHAPI_InventoryBucket NewValue) { UseInventoryBucket_Optional = NewValue; UseInventoryBucket_IsSet = true; }
     /** @brief Clears the value of UseInventoryBucket_Optional and sets UseInventoryBucket_IsSet to false */
    void ClearUseInventoryBucket() { UseInventoryBucket_IsSet = false; }

    /** @brief Allows treating quantity as additional levels to grant to the Player. */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    ERHAPI_XpQuantityTransform XpQuantityTransformType_Optional{  };
    /** @brief true if XpQuantityTransformType_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool XpQuantityTransformType_IsSet{ false };
    /** @brief Gets the value of XpQuantityTransformType_Optional, regardless of it having been set */
    ERHAPI_XpQuantityTransform& GetXpQuantityTransformType() { return XpQuantityTransformType_Optional; }
    /** @brief Gets the value of XpQuantityTransformType_Optional, regardless of it having been set */
    const ERHAPI_XpQuantityTransform& GetXpQuantityTransformType() const { return XpQuantityTransformType_Optional; }
    /** @brief Gets the value of XpQuantityTransformType_Optional, if it has been set, otherwise it returns DefaultValue */
    const ERHAPI_XpQuantityTransform& GetXpQuantityTransformType(const ERHAPI_XpQuantityTransform& DefaultValue) const { if (XpQuantityTransformType_IsSet) return XpQuantityTransformType_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of XpQuantityTransformType_Optional and returns true if it has been set, otherwise returns false */
    bool GetXpQuantityTransformType(ERHAPI_XpQuantityTransform& OutValue) const { if (XpQuantityTransformType_IsSet) OutValue = XpQuantityTransformType_Optional; return XpQuantityTransformType_IsSet; }
    /** @brief Returns a pointer to XpQuantityTransformType_Optional, if it has been set, otherwise returns nullptr */
    ERHAPI_XpQuantityTransform* GetXpQuantityTransformTypeOrNull() { if (XpQuantityTransformType_IsSet) return &XpQuantityTransformType_Optional; return nullptr; }
    /** @brief Returns a pointer to XpQuantityTransformType_Optional, if it has been set, otherwise returns nullptr */
    const ERHAPI_XpQuantityTransform* GetXpQuantityTransformTypeOrNull() const { if (XpQuantityTransformType_IsSet) return &XpQuantityTransformType_Optional; return nullptr; }
    /** @brief Sets the value of XpQuantityTransformType_Optional and also sets XpQuantityTransformType_IsSet to true */
    void SetXpQuantityTransformType(ERHAPI_XpQuantityTransform NewValue) { XpQuantityTransformType_Optional = NewValue; XpQuantityTransformType_IsSet = true; }
     /** @brief Clears the value of XpQuantityTransformType_Optional and sets XpQuantityTransformType_IsSet to false */
    void ClearXpQuantityTransformType() { XpQuantityTransformType_IsSet = false; }

    /** @brief The current price point guid. Optional Price Point ID that will be used to determine the price of the Loot when it is fulfilled. */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString CurrentPricePointGuid_Optional{  };
    /** @brief true if CurrentPricePointGuid_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool CurrentPricePointGuid_IsSet{ false };
    /** @brief Gets the value of CurrentPricePointGuid_Optional, regardless of it having been set */
    FString& GetCurrentPricePointGuid() { return CurrentPricePointGuid_Optional; }
    /** @brief Gets the value of CurrentPricePointGuid_Optional, regardless of it having been set */
    const FString& GetCurrentPricePointGuid() const { return CurrentPricePointGuid_Optional; }
    /** @brief Gets the value of CurrentPricePointGuid_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetCurrentPricePointGuid(const FString& DefaultValue) const { if (CurrentPricePointGuid_IsSet) return CurrentPricePointGuid_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of CurrentPricePointGuid_Optional and returns true if it has been set, otherwise returns false */
    bool GetCurrentPricePointGuid(FString& OutValue) const { if (CurrentPricePointGuid_IsSet) OutValue = CurrentPricePointGuid_Optional; return CurrentPricePointGuid_IsSet; }
    /** @brief Returns a pointer to CurrentPricePointGuid_Optional, if it has been set, otherwise returns nullptr */
    FString* GetCurrentPricePointGuidOrNull() { if (CurrentPricePointGuid_IsSet) return &CurrentPricePointGuid_Optional; return nullptr; }
    /** @brief Returns a pointer to CurrentPricePointGuid_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetCurrentPricePointGuidOrNull() const { if (CurrentPricePointGuid_IsSet) return &CurrentPricePointGuid_Optional; return nullptr; }
    /** @brief Sets the value of CurrentPricePointGuid_Optional and also sets CurrentPricePointGuid_IsSet to true */
    void SetCurrentPricePointGuid(FString NewValue) { CurrentPricePointGuid_Optional = NewValue; CurrentPricePointGuid_IsSet = true; }
     /** @brief Clears the value of CurrentPricePointGuid_Optional and sets CurrentPricePointGuid_IsSet to false */
    void ClearCurrentPricePointGuid() { CurrentPricePointGuid_IsSet = false; }

    /** @brief The pre sale price point guid. Optional Price Point ID that will be used to show the previous price of the Loot. */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString PreSalePricePointGuid_Optional{  };
    /** @brief true if PreSalePricePointGuid_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool PreSalePricePointGuid_IsSet{ false };
    /** @brief Gets the value of PreSalePricePointGuid_Optional, regardless of it having been set */
    FString& GetPreSalePricePointGuid() { return PreSalePricePointGuid_Optional; }
    /** @brief Gets the value of PreSalePricePointGuid_Optional, regardless of it having been set */
    const FString& GetPreSalePricePointGuid() const { return PreSalePricePointGuid_Optional; }
    /** @brief Gets the value of PreSalePricePointGuid_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetPreSalePricePointGuid(const FString& DefaultValue) const { if (PreSalePricePointGuid_IsSet) return PreSalePricePointGuid_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of PreSalePricePointGuid_Optional and returns true if it has been set, otherwise returns false */
    bool GetPreSalePricePointGuid(FString& OutValue) const { if (PreSalePricePointGuid_IsSet) OutValue = PreSalePricePointGuid_Optional; return PreSalePricePointGuid_IsSet; }
    /** @brief Returns a pointer to PreSalePricePointGuid_Optional, if it has been set, otherwise returns nullptr */
    FString* GetPreSalePricePointGuidOrNull() { if (PreSalePricePointGuid_IsSet) return &PreSalePricePointGuid_Optional; return nullptr; }
    /** @brief Returns a pointer to PreSalePricePointGuid_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetPreSalePricePointGuidOrNull() const { if (PreSalePricePointGuid_IsSet) return &PreSalePricePointGuid_Optional; return nullptr; }
    /** @brief Sets the value of PreSalePricePointGuid_Optional and also sets PreSalePricePointGuid_IsSet to true */
    void SetPreSalePricePointGuid(FString NewValue) { PreSalePricePointGuid_Optional = NewValue; PreSalePricePointGuid_IsSet = true; }
     /** @brief Clears the value of PreSalePricePointGuid_Optional and sets PreSalePricePointGuid_IsSet to false */
    void ClearPreSalePricePointGuid() { PreSalePricePointGuid_IsSet = false; }

    /** @brief Cache info for the Loot. */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FRHAPI_CacheInfo CacheInfo_Optional{  };
    /** @brief true if CacheInfo_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool CacheInfo_IsSet{ false };
    /** @brief Gets the value of CacheInfo_Optional, regardless of it having been set */
    FRHAPI_CacheInfo& GetCacheInfo() { return CacheInfo_Optional; }
    /** @brief Gets the value of CacheInfo_Optional, regardless of it having been set */
    const FRHAPI_CacheInfo& GetCacheInfo() const { return CacheInfo_Optional; }
    /** @brief Gets the value of CacheInfo_Optional, if it has been set, otherwise it returns DefaultValue */
    const FRHAPI_CacheInfo& GetCacheInfo(const FRHAPI_CacheInfo& DefaultValue) const { if (CacheInfo_IsSet) return CacheInfo_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of CacheInfo_Optional and returns true if it has been set, otherwise returns false */
    bool GetCacheInfo(FRHAPI_CacheInfo& OutValue) const { if (CacheInfo_IsSet) OutValue = CacheInfo_Optional; return CacheInfo_IsSet; }
    /** @brief Returns a pointer to CacheInfo_Optional, if it has been set, otherwise returns nullptr */
    FRHAPI_CacheInfo* GetCacheInfoOrNull() { if (CacheInfo_IsSet) return &CacheInfo_Optional; return nullptr; }
    /** @brief Returns a pointer to CacheInfo_Optional, if it has been set, otherwise returns nullptr */
    const FRHAPI_CacheInfo* GetCacheInfoOrNull() const { if (CacheInfo_IsSet) return &CacheInfo_Optional; return nullptr; }
    /** @brief Sets the value of CacheInfo_Optional and also sets CacheInfo_IsSet to true */
    void SetCacheInfo(FRHAPI_CacheInfo NewValue) { CacheInfo_Optional = NewValue; CacheInfo_IsSet = true; }
     /** @brief Clears the value of CacheInfo_Optional and sets CacheInfo_IsSet to false */
    void ClearCacheInfo() { CacheInfo_IsSet = false; }

    /** @brief Hard cap on quantity of an item this Loot can give. Disabled with 0 */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 HardQuantityMaximum_Optional{  };
    /** @brief true if HardQuantityMaximum_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool HardQuantityMaximum_IsSet{ false };
    /** @brief Gets the value of HardQuantityMaximum_Optional, regardless of it having been set */
    int32& GetHardQuantityMaximum() { return HardQuantityMaximum_Optional; }
    /** @brief Gets the value of HardQuantityMaximum_Optional, regardless of it having been set */
    const int32& GetHardQuantityMaximum() const { return HardQuantityMaximum_Optional; }
    /** @brief Gets the value of HardQuantityMaximum_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetHardQuantityMaximum(const int32& DefaultValue) const { if (HardQuantityMaximum_IsSet) return HardQuantityMaximum_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of HardQuantityMaximum_Optional and returns true if it has been set, otherwise returns false */
    bool GetHardQuantityMaximum(int32& OutValue) const { if (HardQuantityMaximum_IsSet) OutValue = HardQuantityMaximum_Optional; return HardQuantityMaximum_IsSet; }
    /** @brief Returns a pointer to HardQuantityMaximum_Optional, if it has been set, otherwise returns nullptr */
    int32* GetHardQuantityMaximumOrNull() { if (HardQuantityMaximum_IsSet) return &HardQuantityMaximum_Optional; return nullptr; }
    /** @brief Returns a pointer to HardQuantityMaximum_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetHardQuantityMaximumOrNull() const { if (HardQuantityMaximum_IsSet) return &HardQuantityMaximum_Optional; return nullptr; }
    /** @brief Sets the value of HardQuantityMaximum_Optional and also sets HardQuantityMaximum_IsSet to true */
    void SetHardQuantityMaximum(int32 NewValue) { HardQuantityMaximum_Optional = NewValue; HardQuantityMaximum_IsSet = true; }
     /** @brief Clears the value of HardQuantityMaximum_Optional and sets HardQuantityMaximum_IsSet to false */
    void ClearHardQuantityMaximum() { HardQuantityMaximum_Optional = 0; HardQuantityMaximum_IsSet = false; }
    /** @brief Returns true if HardQuantityMaximum_Optional is set and matches the default value */
    bool IsHardQuantityMaximumDefaultValue() const { return HardQuantityMaximum_IsSet && HardQuantityMaximum_Optional == 0; }
    /** @brief Sets the value of HardQuantityMaximum_Optional to its default and also sets HardQuantityMaximum_IsSet to true */
    void SetHardQuantityMaximumToDefault() { HardQuantityMaximum_Optional = 0; HardQuantityMaximum_IsSet = true; }
};

/** @} */
