// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "RankRankData.generated.h"

/** @defgroup RHAPI_RankRankData RallyHere API Model RankRankData
 *  @{
 */

/**
 * @brief Ranked data about a player&#39;s skill and confidence levels
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_RankRankData : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	/** @brief A measure of perceived skill in a player */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	float Mu{  };
	/** @brief Gets the value of Mu */
	FORCEINLINE float& GetMu() { return Mu; }
	/** @brief Gets the value of Mu */
	FORCEINLINE const float& GetMu() const { return Mu; }
	/** @brief Sets the value of Mu */
	FORCEINLINE void SetMu(const float& NewValue) { Mu = NewValue;   }
	/** @brief Sets the value of Mu using move semantics */
	FORCEINLINE void SetMu(float&& NewValue) { Mu = NewValue;   }

	/** @brief A measure of how confident we are in the perceived skill (high sigma means low confidence) */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	float Sigma{  };
	/** @brief Gets the value of Sigma */
	FORCEINLINE float& GetSigma() { return Sigma; }
	/** @brief Gets the value of Sigma */
	FORCEINLINE const float& GetSigma() const { return Sigma; }
	/** @brief Sets the value of Sigma */
	FORCEINLINE void SetSigma(const float& NewValue) { Sigma = NewValue;   }
	/** @brief Sets the value of Sigma using move semantics */
	FORCEINLINE void SetSigma(float&& NewValue) { Sigma = NewValue;   }

	/** @brief Custom key-value player rank data */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TMap<FString, FString> CustomData_Optional{  };
	/** @brief true if CustomData_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool CustomData_IsSet{ false };
	/** @brief Gets the value of CustomData_Optional, regardless of it having been set */
	FORCEINLINE TMap<FString, FString>& GetCustomData() { return CustomData_Optional; }
	/** @brief Gets the value of CustomData_Optional, regardless of it having been set */
	FORCEINLINE const TMap<FString, FString>& GetCustomData() const { return CustomData_Optional; }
	/** @brief Gets the value of CustomData_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const TMap<FString, FString>& GetCustomData(const TMap<FString, FString>& DefaultValue) const { if (CustomData_IsSet) return CustomData_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of CustomData_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetCustomData(TMap<FString, FString>& OutValue) const { if (CustomData_IsSet) OutValue = CustomData_Optional; return CustomData_IsSet; }
	/** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE TMap<FString, FString>* GetCustomDataOrNull() { if (CustomData_IsSet) return (&CustomData_Optional); return nullptr; }
	/** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const TMap<FString, FString>* GetCustomDataOrNull() const { if (CustomData_IsSet) return (&CustomData_Optional); return nullptr; }
	/** @brief Sets the value of CustomData_Optional and also sets CustomData_IsSet to true */
	FORCEINLINE void SetCustomData(const TMap<FString, FString>& NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true;  }
	/** @brief Sets the value of CustomData_Optional and also sets CustomData_IsSet to true using move semantics */
	FORCEINLINE void SetCustomData(TMap<FString, FString>&& NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true;  }
	/** @brief Clears the value of CustomData_Optional and sets CustomData_IsSet to false */
	void ClearCustomData() { CustomData_IsSet = false;  }

	/** @brief Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FDateTime LastUpdatedDatetime_Optional{  };
	/** @brief true if LastUpdatedDatetime_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool LastUpdatedDatetime_IsSet{ false };
	/** @brief Gets the value of LastUpdatedDatetime_Optional, regardless of it having been set */
	FORCEINLINE FDateTime& GetLastUpdatedDatetime() { return LastUpdatedDatetime_Optional; }
	/** @brief Gets the value of LastUpdatedDatetime_Optional, regardless of it having been set */
	FORCEINLINE const FDateTime& GetLastUpdatedDatetime() const { return LastUpdatedDatetime_Optional; }
	/** @brief Gets the value of LastUpdatedDatetime_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FDateTime& GetLastUpdatedDatetime(const FDateTime& DefaultValue) const { if (LastUpdatedDatetime_IsSet) return LastUpdatedDatetime_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of LastUpdatedDatetime_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetLastUpdatedDatetime(FDateTime& OutValue) const { if (LastUpdatedDatetime_IsSet) OutValue = LastUpdatedDatetime_Optional; return LastUpdatedDatetime_IsSet; }
	/** @brief Returns a pointer to LastUpdatedDatetime_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FDateTime* GetLastUpdatedDatetimeOrNull() { if (LastUpdatedDatetime_IsSet) return (&LastUpdatedDatetime_Optional); return nullptr; }
	/** @brief Returns a pointer to LastUpdatedDatetime_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FDateTime* GetLastUpdatedDatetimeOrNull() const { if (LastUpdatedDatetime_IsSet) return (&LastUpdatedDatetime_Optional); return nullptr; }
	/** @brief Sets the value of LastUpdatedDatetime_Optional and also sets LastUpdatedDatetime_IsSet to true */
	FORCEINLINE void SetLastUpdatedDatetime(const FDateTime& NewValue) { LastUpdatedDatetime_Optional = NewValue; LastUpdatedDatetime_IsSet = true;  }
	/** @brief Sets the value of LastUpdatedDatetime_Optional and also sets LastUpdatedDatetime_IsSet to true using move semantics */
	FORCEINLINE void SetLastUpdatedDatetime(FDateTime&& NewValue) { LastUpdatedDatetime_Optional = NewValue; LastUpdatedDatetime_IsSet = true;  }
	/** @brief Clears the value of LastUpdatedDatetime_Optional and sets LastUpdatedDatetime_IsSet to false */
	void ClearLastUpdatedDatetime() { LastUpdatedDatetime_IsSet = false;  }
};

/** @} */
