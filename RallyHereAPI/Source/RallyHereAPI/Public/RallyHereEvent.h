// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "CorrelationId.h"
#include "SessionId.h"
#include "UserId.h"
#include "RallyHereEvent.generated.h"

/** @defgroup RHAPI_RallyHereEvent RallyHere API Model RallyHereEvent
 *  @{
 */

/**
 * @brief 
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_RallyHereEvent : public FRHAPI_Model
{
    GENERATED_BODY()

    /**
    * @brief Fills this object with data from the passed in JSON
    *
    * @param [in] JsonValue Data from the API call.
    *
    * @return true if parsing of the JSON data was successful.
    */
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

    /**
    * @brief Writes the data from this object into the specified JSON Writer stream
    *
    * @param [in] Writer JSON Writer stream to push .
    */
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /** @brief Unique Event ID for this instance of the event */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FGuid EventUuid{  };
    /** @brief Gets the value of EventUuid */
    FGuid& GetEventUuid() { return EventUuid; }
    /** @brief Gets the value of EventUuid */
    const FGuid& GetEventUuid() const { return EventUuid; }
    /** @brief Sets the value of EventUuid */
    void SetEventUuid(FGuid NewValue) { EventUuid = NewValue;  }

    /** @brief Type of event to process this as. */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString EventName{  };
    /** @brief Gets the value of EventName */
    FString& GetEventName() { return EventName; }
    /** @brief Gets the value of EventName */
    const FString& GetEventName() const { return EventName; }
    /** @brief Sets the value of EventName */
    void SetEventName(FString NewValue) { EventName = NewValue;  }

    /** @brief Time the event was triggered */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FDateTime EventTimestamp{  };
    /** @brief Gets the value of EventTimestamp */
    FDateTime& GetEventTimestamp() { return EventTimestamp; }
    /** @brief Gets the value of EventTimestamp */
    const FDateTime& GetEventTimestamp() const { return EventTimestamp; }
    /** @brief Sets the value of EventTimestamp */
    void SetEventTimestamp(FDateTime NewValue) { EventTimestamp = NewValue;  }

    /** @brief Event specific parameters */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FRHAPI_JsonObject EventParams{  };
    /** @brief Gets the value of EventParams */
    FRHAPI_JsonObject& GetEventParams() { return EventParams; }
    /** @brief Gets the value of EventParams */
    const FRHAPI_JsonObject& GetEventParams() const { return EventParams; }
    /** @brief Sets the value of EventParams */
    void SetEventParams(FRHAPI_JsonObject NewValue) { EventParams = NewValue;  }

    /** @brief Event custom data */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    TMap<FString, FString> CustomData_Optional{  };
    /** @brief true if CustomData_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool CustomData_IsSet{ false };
    /** @brief Gets the value of CustomData_Optional, regardless of it having been set */
    TMap<FString, FString>& GetCustomData() { return CustomData_Optional; }
    /** @brief Gets the value of CustomData_Optional, regardless of it having been set */
    const TMap<FString, FString>& GetCustomData() const { return CustomData_Optional; }
    /** @brief Gets the value of CustomData_Optional, if it has been set, otherwise it returns DefaultValue */
    const TMap<FString, FString>& GetCustomData(const TMap<FString, FString>& DefaultValue) const { if (CustomData_IsSet) return CustomData_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of CustomData_Optional and returns true if it has been set, otherwise returns false */
    bool GetCustomData(TMap<FString, FString>& OutValue) const { if (CustomData_IsSet) OutValue = CustomData_Optional; return CustomData_IsSet; }
    /** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
    TMap<FString, FString>* GetCustomDataOrNull() { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
    /** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
    const TMap<FString, FString>* GetCustomDataOrNull() const { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
    /** @brief Sets the value of CustomData_Optional and also sets CustomData_IsSet to true */
    void SetCustomData(TMap<FString, FString> NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true; }
     /** @brief Clears the value of CustomData_Optional and sets CustomData_IsSet to false */
    void ClearCustomData() { CustomData_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FRHAPI_UserId UserId_Optional{  };
    /** @brief true if UserId_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool UserId_IsSet{ false };
    /** @brief Gets the value of UserId_Optional, regardless of it having been set */
    FRHAPI_UserId& GetUserId() { return UserId_Optional; }
    /** @brief Gets the value of UserId_Optional, regardless of it having been set */
    const FRHAPI_UserId& GetUserId() const { return UserId_Optional; }
    /** @brief Gets the value of UserId_Optional, if it has been set, otherwise it returns DefaultValue */
    const FRHAPI_UserId& GetUserId(const FRHAPI_UserId& DefaultValue) const { if (UserId_IsSet) return UserId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of UserId_Optional and returns true if it has been set, otherwise returns false */
    bool GetUserId(FRHAPI_UserId& OutValue) const { if (UserId_IsSet) OutValue = UserId_Optional; return UserId_IsSet; }
    /** @brief Returns a pointer to UserId_Optional, if it has been set, otherwise returns nullptr */
    FRHAPI_UserId* GetUserIdOrNull() { if (UserId_IsSet) return &UserId_Optional; return nullptr; }
    /** @brief Returns a pointer to UserId_Optional, if it has been set, otherwise returns nullptr */
    const FRHAPI_UserId* GetUserIdOrNull() const { if (UserId_IsSet) return &UserId_Optional; return nullptr; }
    /** @brief Sets the value of UserId_Optional and also sets UserId_IsSet to true */
    void SetUserId(FRHAPI_UserId NewValue) { UserId_Optional = NewValue; UserId_IsSet = true; }
     /** @brief Clears the value of UserId_Optional and sets UserId_IsSet to false */
    void ClearUserId() { UserId_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FRHAPI_SessionId SessionId_Optional{  };
    /** @brief true if SessionId_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool SessionId_IsSet{ false };
    /** @brief Gets the value of SessionId_Optional, regardless of it having been set */
    FRHAPI_SessionId& GetSessionId() { return SessionId_Optional; }
    /** @brief Gets the value of SessionId_Optional, regardless of it having been set */
    const FRHAPI_SessionId& GetSessionId() const { return SessionId_Optional; }
    /** @brief Gets the value of SessionId_Optional, if it has been set, otherwise it returns DefaultValue */
    const FRHAPI_SessionId& GetSessionId(const FRHAPI_SessionId& DefaultValue) const { if (SessionId_IsSet) return SessionId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of SessionId_Optional and returns true if it has been set, otherwise returns false */
    bool GetSessionId(FRHAPI_SessionId& OutValue) const { if (SessionId_IsSet) OutValue = SessionId_Optional; return SessionId_IsSet; }
    /** @brief Returns a pointer to SessionId_Optional, if it has been set, otherwise returns nullptr */
    FRHAPI_SessionId* GetSessionIdOrNull() { if (SessionId_IsSet) return &SessionId_Optional; return nullptr; }
    /** @brief Returns a pointer to SessionId_Optional, if it has been set, otherwise returns nullptr */
    const FRHAPI_SessionId* GetSessionIdOrNull() const { if (SessionId_IsSet) return &SessionId_Optional; return nullptr; }
    /** @brief Sets the value of SessionId_Optional and also sets SessionId_IsSet to true */
    void SetSessionId(FRHAPI_SessionId NewValue) { SessionId_Optional = NewValue; SessionId_IsSet = true; }
     /** @brief Clears the value of SessionId_Optional and sets SessionId_IsSet to false */
    void ClearSessionId() { SessionId_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FRHAPI_CorrelationId CorrelationId_Optional{  };
    /** @brief true if CorrelationId_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool CorrelationId_IsSet{ false };
    /** @brief Gets the value of CorrelationId_Optional, regardless of it having been set */
    FRHAPI_CorrelationId& GetCorrelationId() { return CorrelationId_Optional; }
    /** @brief Gets the value of CorrelationId_Optional, regardless of it having been set */
    const FRHAPI_CorrelationId& GetCorrelationId() const { return CorrelationId_Optional; }
    /** @brief Gets the value of CorrelationId_Optional, if it has been set, otherwise it returns DefaultValue */
    const FRHAPI_CorrelationId& GetCorrelationId(const FRHAPI_CorrelationId& DefaultValue) const { if (CorrelationId_IsSet) return CorrelationId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of CorrelationId_Optional and returns true if it has been set, otherwise returns false */
    bool GetCorrelationId(FRHAPI_CorrelationId& OutValue) const { if (CorrelationId_IsSet) OutValue = CorrelationId_Optional; return CorrelationId_IsSet; }
    /** @brief Returns a pointer to CorrelationId_Optional, if it has been set, otherwise returns nullptr */
    FRHAPI_CorrelationId* GetCorrelationIdOrNull() { if (CorrelationId_IsSet) return &CorrelationId_Optional; return nullptr; }
    /** @brief Returns a pointer to CorrelationId_Optional, if it has been set, otherwise returns nullptr */
    const FRHAPI_CorrelationId* GetCorrelationIdOrNull() const { if (CorrelationId_IsSet) return &CorrelationId_Optional; return nullptr; }
    /** @brief Sets the value of CorrelationId_Optional and also sets CorrelationId_IsSet to true */
    void SetCorrelationId(FRHAPI_CorrelationId NewValue) { CorrelationId_Optional = NewValue; CorrelationId_IsSet = true; }
     /** @brief Clears the value of CorrelationId_Optional and sets CorrelationId_IsSet to false */
    void ClearCorrelationId() { CorrelationId_IsSet = false; }
};

/** @} */
