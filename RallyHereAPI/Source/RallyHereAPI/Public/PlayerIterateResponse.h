// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "PlayerResponse.h"
#include "PlayerIterateResponse.generated.h"

/** @defgroup RHAPI_PlayerIterateResponse RallyHere API Model PlayerIterateResponse
 *  @{
 */

/**
 * @brief Response from the player iteration API
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_PlayerIterateResponse : public FRHAPI_Model
{
    GENERATED_BODY()

    /**
    * @brief Fills this object with data from the passed in JSON
    *
    * @param [in] JsonValue Data from the API call.
    *
    * @return true if parsing of the JSON data was successful.
    */
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

    /**
    * @brief Writes the data from this object into the specified JSON Writer stream
    *
    * @param [in] Writer JSON Writer stream to push .
    */
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /** @brief List of players.  An empty list means iteration is complete */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    TArray<FRHAPI_PlayerResponse> Players_Optional{  };
    /** @brief true if Players_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Players_IsSet{ false };
    /** @brief Gets the value of Players_Optional, regardless of it having been set */
    TArray<FRHAPI_PlayerResponse>& GetPlayers() { return Players_Optional; }
    /** @brief Gets the value of Players_Optional, regardless of it having been set */
    const TArray<FRHAPI_PlayerResponse>& GetPlayers() const { return Players_Optional; }
    /** @brief Gets the value of Players_Optional, if it has been set, otherwise it returns DefaultValue */
    const TArray<FRHAPI_PlayerResponse>& GetPlayers(const TArray<FRHAPI_PlayerResponse>& DefaultValue) const { if (Players_IsSet) return Players_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Players_Optional and returns true if it has been set, otherwise returns false */
    bool GetPlayers(TArray<FRHAPI_PlayerResponse>& OutValue) const { if (Players_IsSet) OutValue = Players_Optional; return Players_IsSet; }
    /** @brief Returns a pointer to Players_Optional, if it has been set, otherwise returns nullptr */
    TArray<FRHAPI_PlayerResponse>* GetPlayersOrNull() { if (Players_IsSet) return &Players_Optional; return nullptr; }
    /** @brief Returns a pointer to Players_Optional, if it has been set, otherwise returns nullptr */
    const TArray<FRHAPI_PlayerResponse>* GetPlayersOrNull() const { if (Players_IsSet) return &Players_Optional; return nullptr; }
    /** @brief Sets the value of Players_Optional and also sets Players_IsSet to true */
    void SetPlayers(TArray<FRHAPI_PlayerResponse> NewValue) { Players_Optional = NewValue; Players_IsSet = true; }
     /** @brief Clears the value of Players_Optional and sets Players_IsSet to false */
    void ClearPlayers() { Players_IsSet = false; }

    /** @brief Cursor to continue iteration */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString Cursor_Optional{  };
    /** @brief true if Cursor_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Cursor_IsSet{ false };
    /** @brief Gets the value of Cursor_Optional, regardless of it having been set */
    FString& GetCursor() { return Cursor_Optional; }
    /** @brief Gets the value of Cursor_Optional, regardless of it having been set */
    const FString& GetCursor() const { return Cursor_Optional; }
    /** @brief Gets the value of Cursor_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetCursor(const FString& DefaultValue) const { if (Cursor_IsSet) return Cursor_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Cursor_Optional and returns true if it has been set, otherwise returns false */
    bool GetCursor(FString& OutValue) const { if (Cursor_IsSet) OutValue = Cursor_Optional; return Cursor_IsSet; }
    /** @brief Returns a pointer to Cursor_Optional, if it has been set, otherwise returns nullptr */
    FString* GetCursorOrNull() { if (Cursor_IsSet) return &Cursor_Optional; return nullptr; }
    /** @brief Returns a pointer to Cursor_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetCursorOrNull() const { if (Cursor_IsSet) return &Cursor_Optional; return nullptr; }
    /** @brief Sets the value of Cursor_Optional and also sets Cursor_IsSet to true */
    void SetCursor(FString NewValue) { Cursor_Optional = NewValue; Cursor_IsSet = true; }
     /** @brief Clears the value of Cursor_Optional and sets Cursor_IsSet to false */
    void ClearCursor() { Cursor_Optional = TEXT(""); Cursor_IsSet = false; }
    /** @brief Returns true if Cursor_Optional is set and matches the default value */
    bool IsCursorDefaultValue() const { return Cursor_IsSet && Cursor_Optional == TEXT(""); }
    /** @brief Sets the value of Cursor_Optional to its default and also sets Cursor_IsSet to true */
    void SetCursorToDefault() { Cursor_Optional = TEXT(""); Cursor_IsSet = true; }
};

/** @} */
