// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "PlatformEntitlementConnectionStatus.generated.h"

/** @defgroup RHAPI_PlatformEntitlementConnectionStatus RallyHere API Model PlatformEntitlementConnectionStatus
 *  @{
 */

/**
 * @brief 
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_PlatformEntitlementConnectionStatus : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString ErrorCode_Optional{  };
	/** @brief true if ErrorCode_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool ErrorCode_IsSet{ false };
	/** @brief true if ErrorCode_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool ErrorCode_IsNull{ false };
	/** @brief Gets the value of ErrorCode_Optional, regardless of it having been set */
	FORCEINLINE FString& GetErrorCode() { return ErrorCode_Optional; }
	/** @brief Gets the value of ErrorCode_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetErrorCode() const { return ErrorCode_Optional; }
	/** @brief Gets the value of ErrorCode_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetErrorCode(const FString& DefaultValue) const { if (ErrorCode_IsSet) return ErrorCode_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of ErrorCode_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetErrorCode(FString& OutValue) const { if (ErrorCode_IsSet && !ErrorCode_IsNull) OutValue = ErrorCode_Optional; return ErrorCode_IsSet; }
	/** @brief Returns a pointer to ErrorCode_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetErrorCodeOrNull() { if (ErrorCode_IsSet) return (ErrorCode_IsNull ? nullptr : &ErrorCode_Optional); return nullptr; }
	/** @brief Returns a pointer to ErrorCode_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetErrorCodeOrNull() const { if (ErrorCode_IsSet) return (ErrorCode_IsNull ? nullptr : &ErrorCode_Optional); return nullptr; }
	/** @brief Sets the value of ErrorCode_Optional and also sets ErrorCode_IsSet to true */
	FORCEINLINE void SetErrorCode(const FString& NewValue) { ErrorCode_Optional = NewValue; ErrorCode_IsSet = true; ErrorCode_IsNull = false; }
	/** @brief Sets the value of ErrorCode_Optional and also sets ErrorCode_IsSet to true using move semantics */
	FORCEINLINE void SetErrorCode(FString&& NewValue) { ErrorCode_Optional = NewValue; ErrorCode_IsSet = true; ErrorCode_IsNull = false; }
	/** @brief Clears the value of ErrorCode_Optional and sets ErrorCode_IsSet to false */
	void ClearErrorCode() { ErrorCode_IsSet = false; ErrorCode_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetErrorCodeToNull() { ErrorCode_IsSet = true; ErrorCode_IsNull = true; }
	/** @brief Checks whether ErrorCode_Optional is set to null */
	FORCEINLINE bool IsErrorCodeNull() const { return ErrorCode_IsSet && ErrorCode_IsNull; }
};

/** @} */
