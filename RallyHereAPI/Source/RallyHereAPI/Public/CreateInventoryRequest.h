// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "CreateInventoryType.h"
#include "InventoryBucket.h"
#include "CreateInventoryRequest.generated.h"

/** @defgroup RHAPI_CreateInventoryRequest RallyHere API Model CreateInventoryRequest
 *  @{
 */

/**
 * @brief Request to Create a new Inventory.
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_CreateInventoryRequest : public FRHAPI_Model
{
    GENERATED_BODY()

    /**
    * @brief Fills this object with data from the passed in JSON
    *
    * @param [in] JsonValue Data from the API call.
    *
    * @return true if parsing of the JSON data was successful.
    */
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

    /**
    * @brief Writes the data from this object into the specified JSON Writer stream
    *
    * @param [in] Writer JSON Writer stream to push .
    */
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /** @brief Inventory Bucket for this Inventory Operation. */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    ERHAPI_InventoryBucket Bucket_Optional{  };
    /** @brief true if Bucket_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Bucket_IsSet{ false };
    /** @brief Gets the value of Bucket_Optional, regardless of it having been set */
    ERHAPI_InventoryBucket& GetBucket() { return Bucket_Optional; }
    /** @brief Gets the value of Bucket_Optional, regardless of it having been set */
    const ERHAPI_InventoryBucket& GetBucket() const { return Bucket_Optional; }
    /** @brief Gets the value of Bucket_Optional, if it has been set, otherwise it returns DefaultValue */
    const ERHAPI_InventoryBucket& GetBucket(const ERHAPI_InventoryBucket& DefaultValue) const { if (Bucket_IsSet) return Bucket_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Bucket_Optional and returns true if it has been set, otherwise returns false */
    bool GetBucket(ERHAPI_InventoryBucket& OutValue) const { if (Bucket_IsSet) OutValue = Bucket_Optional; return Bucket_IsSet; }
    /** @brief Returns a pointer to Bucket_Optional, if it has been set, otherwise returns nullptr */
    ERHAPI_InventoryBucket* GetBucketOrNull() { if (Bucket_IsSet) return &Bucket_Optional; return nullptr; }
    /** @brief Returns a pointer to Bucket_Optional, if it has been set, otherwise returns nullptr */
    const ERHAPI_InventoryBucket* GetBucketOrNull() const { if (Bucket_IsSet) return &Bucket_Optional; return nullptr; }
    /** @brief Sets the value of Bucket_Optional and also sets Bucket_IsSet to true */
    void SetBucket(ERHAPI_InventoryBucket NewValue) { Bucket_Optional = NewValue; Bucket_IsSet = true; }
     /** @brief Clears the value of Bucket_Optional and sets Bucket_IsSet to false */
    void ClearBucket() { Bucket_IsSet = false; }

    /** @brief Count for this Inventory Operation. */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 Count_Optional{  };
    /** @brief true if Count_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Count_IsSet{ false };
    /** @brief Gets the value of Count_Optional, regardless of it having been set */
    int32& GetCount() { return Count_Optional; }
    /** @brief Gets the value of Count_Optional, regardless of it having been set */
    const int32& GetCount() const { return Count_Optional; }
    /** @brief Gets the value of Count_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetCount(const int32& DefaultValue) const { if (Count_IsSet) return Count_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Count_Optional and returns true if it has been set, otherwise returns false */
    bool GetCount(int32& OutValue) const { if (Count_IsSet) OutValue = Count_Optional; return Count_IsSet; }
    /** @brief Returns a pointer to Count_Optional, if it has been set, otherwise returns nullptr */
    int32* GetCountOrNull() { if (Count_IsSet) return &Count_Optional; return nullptr; }
    /** @brief Returns a pointer to Count_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetCountOrNull() const { if (Count_IsSet) return &Count_Optional; return nullptr; }
    /** @brief Sets the value of Count_Optional and also sets Count_IsSet to true */
    void SetCount(int32 NewValue) { Count_Optional = NewValue; Count_IsSet = true; }
     /** @brief Clears the value of Count_Optional and sets Count_IsSet to false */
    void ClearCount() { Count_Optional = 1; Count_IsSet = false; }
    /** @brief Returns true if Count_Optional is set and matches the default value */
    bool IsCountDefaultValue() const { return Count_IsSet && Count_Optional == 1; }
    /** @brief Sets the value of Count_Optional to its default and also sets Count_IsSet to true */
    void SetCountToDefault() { Count_Optional = 1; Count_IsSet = true; }

    /** @brief Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FDateTime Expires_Optional{  };
    /** @brief true if Expires_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Expires_IsSet{ false };
    /** @brief Gets the value of Expires_Optional, regardless of it having been set */
    FDateTime& GetExpires() { return Expires_Optional; }
    /** @brief Gets the value of Expires_Optional, regardless of it having been set */
    const FDateTime& GetExpires() const { return Expires_Optional; }
    /** @brief Gets the value of Expires_Optional, if it has been set, otherwise it returns DefaultValue */
    const FDateTime& GetExpires(const FDateTime& DefaultValue) const { if (Expires_IsSet) return Expires_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Expires_Optional and returns true if it has been set, otherwise returns false */
    bool GetExpires(FDateTime& OutValue) const { if (Expires_IsSet) OutValue = Expires_Optional; return Expires_IsSet; }
    /** @brief Returns a pointer to Expires_Optional, if it has been set, otherwise returns nullptr */
    FDateTime* GetExpiresOrNull() { if (Expires_IsSet) return &Expires_Optional; return nullptr; }
    /** @brief Returns a pointer to Expires_Optional, if it has been set, otherwise returns nullptr */
    const FDateTime* GetExpiresOrNull() const { if (Expires_IsSet) return &Expires_Optional; return nullptr; }
    /** @brief Sets the value of Expires_Optional and also sets Expires_IsSet to true */
    void SetExpires(FDateTime NewValue) { Expires_Optional = NewValue; Expires_IsSet = true; }
     /** @brief Clears the value of Expires_Optional and sets Expires_IsSet to false */
    void ClearExpires() { Expires_IsSet = false; }

    /** @brief Arbitrary data map that can be set to add additional data to Inventory. */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    TMap<FString, FString> CustomData_Optional{  };
    /** @brief true if CustomData_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool CustomData_IsSet{ false };
    /** @brief Gets the value of CustomData_Optional, regardless of it having been set */
    TMap<FString, FString>& GetCustomData() { return CustomData_Optional; }
    /** @brief Gets the value of CustomData_Optional, regardless of it having been set */
    const TMap<FString, FString>& GetCustomData() const { return CustomData_Optional; }
    /** @brief Gets the value of CustomData_Optional, if it has been set, otherwise it returns DefaultValue */
    const TMap<FString, FString>& GetCustomData(const TMap<FString, FString>& DefaultValue) const { if (CustomData_IsSet) return CustomData_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of CustomData_Optional and returns true if it has been set, otherwise returns false */
    bool GetCustomData(TMap<FString, FString>& OutValue) const { if (CustomData_IsSet) OutValue = CustomData_Optional; return CustomData_IsSet; }
    /** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
    TMap<FString, FString>* GetCustomDataOrNull() { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
    /** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
    const TMap<FString, FString>* GetCustomDataOrNull() const { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
    /** @brief Sets the value of CustomData_Optional and also sets CustomData_IsSet to true */
    void SetCustomData(TMap<FString, FString> NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true; }
     /** @brief Clears the value of CustomData_Optional and sets CustomData_IsSet to false */
    void ClearCustomData() { CustomData_IsSet = false; }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 ItemId{ 0 };
    /** @brief Gets the value of ItemId */
    int32& GetItemId() { return ItemId; }
    /** @brief Gets the value of ItemId */
    const int32& GetItemId() const { return ItemId; }
    /** @brief Sets the value of ItemId */
    void SetItemId(int32 NewValue) { ItemId = NewValue;  }
    /** @brief Returns true if ItemId matches the default value */
    bool IsItemIdDefaultValue() const { return ItemId == 0; }
    /** @brief Sets the value of ItemId to its default  */
    void SetItemIdToDefault() { ItemId = 0;  }

    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    ERHAPI_CreateInventoryType Type_Optional{  };
    /** @brief true if Type_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Type_IsSet{ false };
    /** @brief Gets the value of Type_Optional, regardless of it having been set */
    ERHAPI_CreateInventoryType& GetType() { return Type_Optional; }
    /** @brief Gets the value of Type_Optional, regardless of it having been set */
    const ERHAPI_CreateInventoryType& GetType() const { return Type_Optional; }
    /** @brief Gets the value of Type_Optional, if it has been set, otherwise it returns DefaultValue */
    const ERHAPI_CreateInventoryType& GetType(const ERHAPI_CreateInventoryType& DefaultValue) const { if (Type_IsSet) return Type_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Type_Optional and returns true if it has been set, otherwise returns false */
    bool GetType(ERHAPI_CreateInventoryType& OutValue) const { if (Type_IsSet) OutValue = Type_Optional; return Type_IsSet; }
    /** @brief Returns a pointer to Type_Optional, if it has been set, otherwise returns nullptr */
    ERHAPI_CreateInventoryType* GetTypeOrNull() { if (Type_IsSet) return &Type_Optional; return nullptr; }
    /** @brief Returns a pointer to Type_Optional, if it has been set, otherwise returns nullptr */
    const ERHAPI_CreateInventoryType* GetTypeOrNull() const { if (Type_IsSet) return &Type_Optional; return nullptr; }
    /** @brief Sets the value of Type_Optional and also sets Type_IsSet to true */
    void SetType(ERHAPI_CreateInventoryType NewValue) { Type_Optional = NewValue; Type_IsSet = true; }
     /** @brief Clears the value of Type_Optional and sets Type_IsSet to false */
    void ClearType() { Type_IsSet = false; }
};

/** @} */
