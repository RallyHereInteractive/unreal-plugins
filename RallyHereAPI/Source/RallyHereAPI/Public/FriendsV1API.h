// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereAPIAuthContext.h"
#include "RallyHereAPIHelpers.h"
#include "FriendRelationshipV1.h"
#include "FriendsListV1.h"
#include "FriendsV1.h"
#include "HTTPValidationError.h"
#include "HzApiErrorModel.h"
#include "Notes.h"

namespace RallyHereAPI
{
using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

// forward declaration
class FFriendsV1API;

/**
 * @brief Add Friend
 * Modify the friend's relationship status with the other Player. There is a max number of friends that can be added for a Player.
 *                 The limit can determined using [this API](/#/Configuration%20V1/get_friends_and_block_limits). This API allows you optionally update 
 *                 the player's notes for the other player. If you do not want to update or set the notes when adding the other player, then do not 
 *                 include a body.<br /><br /> <b>Note:</b> This API supports etags and will return the etag header when with the response and will match the etag value 
 *                 provided when [fetching Friend Relationship between these two players](/#/Friends%20V1/get_friend_relationship). <b>It is highly 
 *                 recommended to provide the etag value with the <i> if-match </i> header to avoid lost updates. 
 *                 <br/><br />Permissions Required: friend:friend_list:write
*/
struct RALLYHEREAPI_API FRequest_AddFriend : public FRequest
{
	FRequest_AddFriend();
	virtual ~FRequest_AddFriend() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	int32 PlayerId = 0;
	int32 OtherPlayerId = 0;
	/* If you provide the ETag that matches the current ETag for this resource, a 304 response will be return - indicating that the resource has not changed. */
	TOptional<FString> IfMatch;
	TOptional<FRHAPI_Notes> Notes;
};

/** The response type for FRequest_AddFriend */
struct RALLYHEREAPI_API FResponse_AddFriend : public FResponse
{
	FResponse_AddFriend(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_AddFriend() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

protected:
	/** Variant type representing the potential content responses for this call */
	typedef TVariant<FRHAPI_FriendRelationshipV1, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> ContentVariantType;
	
	/** A variant containing the parsed content */
	ContentVariantType ParsedContent;

	/** A parsed map of the headers from the request */
	TMap<FString, FString> HeadersMap;

public:
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @param [out] OutResponse A copy of the response data, if the type matched
	 * @return Whether or not the response was of the given type
	 */
	template<typename T>
	bool TryGetContent(T& OutResponse)const { const T* OutResponsePtr = ParsedContent.TryGet<T>(); if (OutResponsePtr != nullptr) OutResponse = *OutResponsePtr; return OutResponsePtr != nullptr; }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @return A pointer to the content, if it was the specified type.  The memory is owned by the response object!
	 */
	template<typename T>
	const T* TryGetContent() const { return ParsedContent.TryGet<T>(); }
	
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @param [out] OutValue A string to store the header value to, if found
	 * @return Whether or not the header was found
	 */
	bool TryGetHeader(const FString& Header, FString& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; return OutValuePtr != nullptr; }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @return A pointer to the header string value, if found.  The memory is owned by the response object!
	 */
	const FString* TryGetHeader(const FString& Header) const { return HeadersMap.Find(Header); }

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_FriendRelationshipV1 Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the response content in the default response */
	const FRHAPI_FriendRelationshipV1* TryGetDefaultContent() const { return ParsedContent.TryGet<FRHAPI_FriendRelationshipV1>(); }
	/** @brief Attempt to retrieve a specific header of the default response
	const FString* TryGetDefaultHeader_ETag() const { return TryGetHeader(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_FriendRelationshipV1& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 400
	Bad Request
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 409
	Conflict
	*/
	bool TryGetContentFor409(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 412
	The resource's Etag does not match the Etag provided. Get the Etag from the Get request and try again
	*/

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_AddFriend */
DECLARE_DELEGATE_OneParam(FDelegate_AddFriend, const FResponse_AddFriend&);

/** @brief A helper metadata object for AddFriend that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_AddFriend
{
	/** The request type */
	typedef FRequest_AddFriend Request;
	/** The response type */
	typedef FResponse_AddFriend Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_AddFriend Delegate;
	/** The API object that supports this API call */
	typedef FFriendsV1API API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Add Notes
 * Update Player's notes on the other player. Players can only add notes for players they have relationship's with. 
 *     The notes will be removed when the relationship is ended.
 *     <br/><br />Permissions Required: friend:friend_list:write
*/
struct RALLYHEREAPI_API FRequest_AddNotes : public FRequest
{
	FRequest_AddNotes();
	virtual ~FRequest_AddNotes() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	int32 PlayerId = 0;
	int32 OtherPlayerId = 0;
	FRHAPI_Notes Notes;
	/* If you provide the ETag that does not matches the current ETag for this resource, a 412 response will be return - indicating that the resource has changed. */
	TOptional<FString> IfMatch;
};

/** The response type for FRequest_AddNotes */
struct RALLYHEREAPI_API FResponse_AddNotes : public FResponse
{
	FResponse_AddNotes(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_AddNotes() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

protected:
	/** Variant type representing the potential content responses for this call */
	typedef TVariant<FRHAPI_FriendRelationshipV1, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> ContentVariantType;
	
	/** A variant containing the parsed content */
	ContentVariantType ParsedContent;

	/** A parsed map of the headers from the request */
	TMap<FString, FString> HeadersMap;

public:
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @param [out] OutResponse A copy of the response data, if the type matched
	 * @return Whether or not the response was of the given type
	 */
	template<typename T>
	bool TryGetContent(T& OutResponse)const { const T* OutResponsePtr = ParsedContent.TryGet<T>(); if (OutResponsePtr != nullptr) OutResponse = *OutResponsePtr; return OutResponsePtr != nullptr; }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @return A pointer to the content, if it was the specified type.  The memory is owned by the response object!
	 */
	template<typename T>
	const T* TryGetContent() const { return ParsedContent.TryGet<T>(); }
	
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @param [out] OutValue A string to store the header value to, if found
	 * @return Whether or not the header was found
	 */
	bool TryGetHeader(const FString& Header, FString& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; return OutValuePtr != nullptr; }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @return A pointer to the header string value, if found.  The memory is owned by the response object!
	 */
	const FString* TryGetHeader(const FString& Header) const { return HeadersMap.Find(Header); }

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_FriendRelationshipV1 Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the response content in the default response */
	const FRHAPI_FriendRelationshipV1* TryGetDefaultContent() const { return ParsedContent.TryGet<FRHAPI_FriendRelationshipV1>(); }
	/** @brief Attempt to retrieve a specific header of the default response
	const FString* TryGetDefaultHeader_ETag() const { return TryGetHeader(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_FriendRelationshipV1& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 400
	Bad Request
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 409
	Conflict
	*/
	bool TryGetContentFor409(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_AddNotes */
DECLARE_DELEGATE_OneParam(FDelegate_AddNotes, const FResponse_AddNotes&);

/** @brief A helper metadata object for AddNotes that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_AddNotes
{
	/** The request type */
	typedef FRequest_AddNotes Request;
	/** The response type */
	typedef FResponse_AddNotes Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_AddNotes Delegate;
	/** The API object that supports this API call */
	typedef FFriendsV1API API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Delete Friend
 * Remove the friend's relationship status with the other Player. 
 *                 This should be used for declining Friend requests, deleting sent Friends Requests, and deleting Friends <br /><br />
 *                 <b>Note:</b> This API supports etags and will return the etag header when with the response and will match the etag value 
 *                 provided when [fetching Friend Relationship between these two players](#/Friends V1/get_friend_relationship). <b>It is highly 
 *                 recommended to provide the etag value with the <i> if-match </i> header to avoid lost updates. 
 *                 <br/><br />Permissions Required: friend:friend_list:write
*/
struct RALLYHEREAPI_API FRequest_DeleteFriend : public FRequest
{
	FRequest_DeleteFriend();
	virtual ~FRequest_DeleteFriend() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	int32 PlayerId = 0;
	int32 OtherPlayerId = 0;
	/* If you provide the ETag that does not matches the current ETag for this resource, a 412 response will be return - indicating that the resource has changed. */
	TOptional<FString> IfMatch;
};

/** The response type for FRequest_DeleteFriend */
struct RALLYHEREAPI_API FResponse_DeleteFriend : public FResponse
{
	FResponse_DeleteFriend(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_DeleteFriend() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

protected:
	/** Variant type representing the potential content responses for this call */
	typedef TVariant< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> ContentVariantType;
	
	/** A variant containing the parsed content */
	ContentVariantType ParsedContent;

	/** A parsed map of the headers from the request */
	TMap<FString, FString> HeadersMap;

public:
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @param [out] OutResponse A copy of the response data, if the type matched
	 * @return Whether or not the response was of the given type
	 */
	template<typename T>
	bool TryGetContent(T& OutResponse)const { const T* OutResponsePtr = ParsedContent.TryGet<T>(); if (OutResponsePtr != nullptr) OutResponse = *OutResponsePtr; return OutResponsePtr != nullptr; }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @return A pointer to the content, if it was the specified type.  The memory is owned by the response object!
	 */
	template<typename T>
	const T* TryGetContent() const { return ParsedContent.TryGet<T>(); }
	
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @param [out] OutValue A string to store the header value to, if found
	 * @return Whether or not the header was found
	 */
	bool TryGetHeader(const FString& Header, FString& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; return OutValuePtr != nullptr; }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @return A pointer to the header string value, if found.  The memory is owned by the response object!
	 */
	const FString* TryGetHeader(const FString& Header) const { return HeadersMap.Find(Header); }

#if ALLOW_LEGACY_RESPONSE_CONTENT
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	/** @brief Attempt to retrieve a specific header of the default response
	const FString* TryGetDefaultHeader_ETag() const { return TryGetHeader(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 204
	Successful Response
	*/
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader204_ETag() const;

	/* Response 400
	Bad Request
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 409
	Conflict
	*/
	bool TryGetContentFor409(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 412
	The resource's Etag does not match the Etag provided. Get the Etag from the Get request and try again
	*/

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_DeleteFriend */
DECLARE_DELEGATE_OneParam(FDelegate_DeleteFriend, const FResponse_DeleteFriend&);

/** @brief A helper metadata object for DeleteFriend that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_DeleteFriend
{
	/** The request type */
	typedef FRequest_DeleteFriend Request;
	/** The response type */
	typedef FResponse_DeleteFriend Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_DeleteFriend Delegate;
	/** The API object that supports this API call */
	typedef FFriendsV1API API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Delete Friends
 * Remove the friend's relationship status with the other players <br/><br />Permissions Required: friend:friend_list:write
*/
struct RALLYHEREAPI_API FRequest_DeleteFriends : public FRequest
{
	FRequest_DeleteFriends();
	virtual ~FRequest_DeleteFriends() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	int32 PlayerId = 0;
	FRHAPI_FriendsV1 FriendsV1;
};

/** The response type for FRequest_DeleteFriends */
struct RALLYHEREAPI_API FResponse_DeleteFriends : public FResponse
{
	FResponse_DeleteFriends(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_DeleteFriends() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

protected:
	/** Variant type representing the potential content responses for this call */
	typedef TVariant< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> ContentVariantType;
	
	/** A variant containing the parsed content */
	ContentVariantType ParsedContent;

	/** A parsed map of the headers from the request */
	TMap<FString, FString> HeadersMap;

public:
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @param [out] OutResponse A copy of the response data, if the type matched
	 * @return Whether or not the response was of the given type
	 */
	template<typename T>
	bool TryGetContent(T& OutResponse)const { const T* OutResponsePtr = ParsedContent.TryGet<T>(); if (OutResponsePtr != nullptr) OutResponse = *OutResponsePtr; return OutResponsePtr != nullptr; }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @return A pointer to the content, if it was the specified type.  The memory is owned by the response object!
	 */
	template<typename T>
	const T* TryGetContent() const { return ParsedContent.TryGet<T>(); }
	
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @param [out] OutValue A string to store the header value to, if found
	 * @return Whether or not the header was found
	 */
	bool TryGetHeader(const FString& Header, FString& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; return OutValuePtr != nullptr; }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @return A pointer to the header string value, if found.  The memory is owned by the response object!
	 */
	const FString* TryGetHeader(const FString& Header) const { return HeadersMap.Find(Header); }

#if ALLOW_LEGACY_RESPONSE_CONTENT
	

#endif //ALLOW_LEGACY_RESPONSE_CONTENT


	// Individual Response Helpers	
	/* Response 204
	Successful Response
	*/

	/* Response 400
	Bad Request
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 409
	Conflict
	*/
	bool TryGetContentFor409(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_DeleteFriends */
DECLARE_DELEGATE_OneParam(FDelegate_DeleteFriends, const FResponse_DeleteFriends&);

/** @brief A helper metadata object for DeleteFriends that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_DeleteFriends
{
	/** The request type */
	typedef FRequest_DeleteFriends Request;
	/** The response type */
	typedef FResponse_DeleteFriends Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_DeleteFriends Delegate;
	/** The API object that supports this API call */
	typedef FFriendsV1API API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Delete Notes
 * Remove the Player's notes on the other player. Players can only add notes for players they have relationship's with. 
 *     The notes will be removed when the relationship is ended.
 *     <br/><br />Permissions Required: friend:friend_list:write
*/
struct RALLYHEREAPI_API FRequest_DeleteNotes : public FRequest
{
	FRequest_DeleteNotes();
	virtual ~FRequest_DeleteNotes() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	int32 PlayerId = 0;
	int32 OtherPlayerId = 0;
	/* If you provide the ETag that does not matches the current ETag for this resource, a 412 response will be return - indicating that the resource has changed. */
	TOptional<FString> IfMatch;
};

/** The response type for FRequest_DeleteNotes */
struct RALLYHEREAPI_API FResponse_DeleteNotes : public FResponse
{
	FResponse_DeleteNotes(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_DeleteNotes() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

protected:
	/** Variant type representing the potential content responses for this call */
	typedef TVariant< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> ContentVariantType;
	
	/** A variant containing the parsed content */
	ContentVariantType ParsedContent;

	/** A parsed map of the headers from the request */
	TMap<FString, FString> HeadersMap;

public:
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @param [out] OutResponse A copy of the response data, if the type matched
	 * @return Whether or not the response was of the given type
	 */
	template<typename T>
	bool TryGetContent(T& OutResponse)const { const T* OutResponsePtr = ParsedContent.TryGet<T>(); if (OutResponsePtr != nullptr) OutResponse = *OutResponsePtr; return OutResponsePtr != nullptr; }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @return A pointer to the content, if it was the specified type.  The memory is owned by the response object!
	 */
	template<typename T>
	const T* TryGetContent() const { return ParsedContent.TryGet<T>(); }
	
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @param [out] OutValue A string to store the header value to, if found
	 * @return Whether or not the header was found
	 */
	bool TryGetHeader(const FString& Header, FString& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; return OutValuePtr != nullptr; }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @return A pointer to the header string value, if found.  The memory is owned by the response object!
	 */
	const FString* TryGetHeader(const FString& Header) const { return HeadersMap.Find(Header); }

#if ALLOW_LEGACY_RESPONSE_CONTENT
	

#endif //ALLOW_LEGACY_RESPONSE_CONTENT


	// Individual Response Helpers	
	/* Response 204
	Successful Response
	*/

	/* Response 400
	Bad Request
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 409
	Conflict
	*/
	bool TryGetContentFor409(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_DeleteNotes */
DECLARE_DELEGATE_OneParam(FDelegate_DeleteNotes, const FResponse_DeleteNotes&);

/** @brief A helper metadata object for DeleteNotes that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_DeleteNotes
{
	/** The request type */
	typedef FRequest_DeleteNotes Request;
	/** The response type */
	typedef FResponse_DeleteNotes Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_DeleteNotes Delegate;
	/** The API object that supports this API call */
	typedef FFriendsV1API API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Friend Relationship
 * Get the relationship status with the other Player. <br /> <br />
 *                 <b>Note:</b> This API supports etags and will return the etag header when with the response. 
 *                 Clients can utilize the <i>if-none-match</i> header to avoid having to reload the response if 
 *                 it has not changed or to use it to modify the relationship without loosing updates. 
 *                 <br/><br />Permissions Required: friend:friend_list:read
*/
struct RALLYHEREAPI_API FRequest_GetFriendRelationship : public FRequest
{
	FRequest_GetFriendRelationship();
	virtual ~FRequest_GetFriendRelationship() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	int32 PlayerId = 0;
	int32 OtherPlayerId = 0;
	/* If you provide the ETag that matches the current ETag for this resource, a 304 response will be return - indicating that the resource has not changed. */
	TOptional<FString> IfNoneMatch;
};

/** The response type for FRequest_GetFriendRelationship */
struct RALLYHEREAPI_API FResponse_GetFriendRelationship : public FResponse
{
	FResponse_GetFriendRelationship(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetFriendRelationship() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

protected:
	/** Variant type representing the potential content responses for this call */
	typedef TVariant<FRHAPI_FriendRelationshipV1, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> ContentVariantType;
	
	/** A variant containing the parsed content */
	ContentVariantType ParsedContent;

	/** A parsed map of the headers from the request */
	TMap<FString, FString> HeadersMap;

public:
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @param [out] OutResponse A copy of the response data, if the type matched
	 * @return Whether or not the response was of the given type
	 */
	template<typename T>
	bool TryGetContent(T& OutResponse)const { const T* OutResponsePtr = ParsedContent.TryGet<T>(); if (OutResponsePtr != nullptr) OutResponse = *OutResponsePtr; return OutResponsePtr != nullptr; }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @return A pointer to the content, if it was the specified type.  The memory is owned by the response object!
	 */
	template<typename T>
	const T* TryGetContent() const { return ParsedContent.TryGet<T>(); }
	
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @param [out] OutValue A string to store the header value to, if found
	 * @return Whether or not the header was found
	 */
	bool TryGetHeader(const FString& Header, FString& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; return OutValuePtr != nullptr; }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @return A pointer to the header string value, if found.  The memory is owned by the response object!
	 */
	const FString* TryGetHeader(const FString& Header) const { return HeadersMap.Find(Header); }

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_FriendRelationshipV1 Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the response content in the default response */
	const FRHAPI_FriendRelationshipV1* TryGetDefaultContent() const { return ParsedContent.TryGet<FRHAPI_FriendRelationshipV1>(); }
	/** @brief Attempt to retrieve a specific header of the default response
	const FString* TryGetDefaultHeader_ETag() const { return TryGetHeader(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_FriendRelationshipV1& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 304
	Content still has the same etag and has not changed
	*/

	/* Response 400
	Bad Request
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 409
	Conflict
	*/
	bool TryGetContentFor409(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetFriendRelationship */
DECLARE_DELEGATE_OneParam(FDelegate_GetFriendRelationship, const FResponse_GetFriendRelationship&);

/** @brief A helper metadata object for GetFriendRelationship that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetFriendRelationship
{
	/** The request type */
	typedef FRequest_GetFriendRelationship Request;
	/** The response type */
	typedef FResponse_GetFriendRelationship Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetFriendRelationship Delegate;
	/** The API object that supports this API call */
	typedef FFriendsV1API API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Friends List For Player
 * Fetch the friend's list for the Player and their relationship status with those friends. <br /><br />
 *                 <b>Note:</b> This API supports etags and will return the etag header when with the response. 
 *                 Clients and then utilize the <i>if-none-match</i> header to avoid having to reload the response if it has not changed. 
 *                 <br/><br />Permissions Required: friend:friend_list:read
*/
struct RALLYHEREAPI_API FRequest_GetFriendsListForPlayer : public FRequest
{
	FRequest_GetFriendsListForPlayer();
	virtual ~FRequest_GetFriendsListForPlayer() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	int32 PlayerId = 0;
	TOptional<int32> Page;
	TOptional<int32> Limit;
	/* If you provide the ETag that matches the current ETag for this resource, a 304 response will be return - indicating that the resource has not changed. */
	TOptional<FString> IfNoneMatch;
};

/** The response type for FRequest_GetFriendsListForPlayer */
struct RALLYHEREAPI_API FResponse_GetFriendsListForPlayer : public FResponse
{
	FResponse_GetFriendsListForPlayer(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetFriendsListForPlayer() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

protected:
	/** Variant type representing the potential content responses for this call */
	typedef TVariant<FRHAPI_FriendsListV1, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> ContentVariantType;
	
	/** A variant containing the parsed content */
	ContentVariantType ParsedContent;

	/** A parsed map of the headers from the request */
	TMap<FString, FString> HeadersMap;

public:
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @param [out] OutResponse A copy of the response data, if the type matched
	 * @return Whether or not the response was of the given type
	 */
	template<typename T>
	bool TryGetContent(T& OutResponse)const { const T* OutResponsePtr = ParsedContent.TryGet<T>(); if (OutResponsePtr != nullptr) OutResponse = *OutResponsePtr; return OutResponsePtr != nullptr; }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @return A pointer to the content, if it was the specified type.  The memory is owned by the response object!
	 */
	template<typename T>
	const T* TryGetContent() const { return ParsedContent.TryGet<T>(); }
	
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @param [out] OutValue A string to store the header value to, if found
	 * @return Whether or not the header was found
	 */
	bool TryGetHeader(const FString& Header, FString& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; return OutValuePtr != nullptr; }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @return A pointer to the header string value, if found.  The memory is owned by the response object!
	 */
	const FString* TryGetHeader(const FString& Header) const { return HeadersMap.Find(Header); }

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_FriendsListV1 Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the response content in the default response */
	const FRHAPI_FriendsListV1* TryGetDefaultContent() const { return ParsedContent.TryGet<FRHAPI_FriendsListV1>(); }
	/** @brief Attempt to retrieve a specific header of the default response
	const FString* TryGetDefaultHeader_ETag() const { return TryGetHeader(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_FriendsListV1& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 304
	Content still has the same etag and has not changed
	*/

	/* Response 400
	Bad Request
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 409
	Conflict
	*/
	bool TryGetContentFor409(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetFriendsListForPlayer */
DECLARE_DELEGATE_OneParam(FDelegate_GetFriendsListForPlayer, const FResponse_GetFriendsListForPlayer&);

/** @brief A helper metadata object for GetFriendsListForPlayer that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetFriendsListForPlayer
{
	/** The request type */
	typedef FRequest_GetFriendsListForPlayer Request;
	/** The response type */
	typedef FResponse_GetFriendsListForPlayer Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetFriendsListForPlayer Delegate;
	/** The API object that supports this API call */
	typedef FFriendsV1API API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};


/** The API class itself, which will handle calls to */
class RALLYHEREAPI_API FFriendsV1API : public FAPI
{
public:
	FFriendsV1API();
	virtual ~FFriendsV1API();

	FHttpRequestPtr AddFriend(const FRequest_AddFriend& Request, const FDelegate_AddFriend& Delegate = FDelegate_AddFriend(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr AddNotes(const FRequest_AddNotes& Request, const FDelegate_AddNotes& Delegate = FDelegate_AddNotes(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr DeleteFriend(const FRequest_DeleteFriend& Request, const FDelegate_DeleteFriend& Delegate = FDelegate_DeleteFriend(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr DeleteFriends(const FRequest_DeleteFriends& Request, const FDelegate_DeleteFriends& Delegate = FDelegate_DeleteFriends(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr DeleteNotes(const FRequest_DeleteNotes& Request, const FDelegate_DeleteNotes& Delegate = FDelegate_DeleteNotes(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetFriendRelationship(const FRequest_GetFriendRelationship& Request, const FDelegate_GetFriendRelationship& Delegate = FDelegate_GetFriendRelationship(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetFriendsListForPlayer(const FRequest_GetFriendsListForPlayer& Request, const FDelegate_GetFriendsListForPlayer& Delegate = FDelegate_GetFriendsListForPlayer(), int32 Priority = DefaultRallyHereAPIPriority);

private:
	void OnAddFriendResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_AddFriend Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnAddNotesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_AddNotes Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnDeleteFriendResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_DeleteFriend Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnDeleteFriendsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_DeleteFriends Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnDeleteNotesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_DeleteNotes Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetFriendRelationshipResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetFriendRelationship Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetFriendsListForPlayerResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetFriendsListForPlayer Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};



}
