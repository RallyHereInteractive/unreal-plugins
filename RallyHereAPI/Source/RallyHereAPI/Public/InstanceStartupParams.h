// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "InstanceStartupParams.generated.h"

/** @defgroup RHAPI_InstanceStartupParams RallyHere API Model InstanceStartupParams
 *  @{
 */

/**
 * @brief Parameters given to an instance to change what map and mode it loads, and other gameplay behavior
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_InstanceStartupParams : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	/** @brief Name of the map for the instance to spawn with */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString Map{  };
	/** @brief Gets the value of Map */
	FORCEINLINE FString& GetMap() { return Map; }
	/** @brief Gets the value of Map */
	FORCEINLINE const FString& GetMap() const { return Map; }
	/** @brief Sets the value of Map */
	FORCEINLINE void SetMap(const FString& NewValue) { Map = NewValue;   }
	/** @brief Sets the value of Map using move semantics */
	FORCEINLINE void SetMap(FString&& NewValue) { Map = NewValue;   }

	/** @brief Game mode for the instance to spawn in */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString Mode_Optional{  };
	/** @brief true if Mode_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Mode_IsSet{ false };
	/** @brief Gets the value of Mode_Optional, regardless of it having been set */
	FORCEINLINE FString& GetMode() { return Mode_Optional; }
	/** @brief Gets the value of Mode_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetMode() const { return Mode_Optional; }
	/** @brief Gets the value of Mode_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetMode(const FString& DefaultValue) const { if (Mode_IsSet) return Mode_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Mode_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetMode(FString& OutValue) const { if (Mode_IsSet) OutValue = Mode_Optional; return Mode_IsSet; }
	/** @brief Returns a pointer to Mode_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetModeOrNull() { if (Mode_IsSet) return (&Mode_Optional); return nullptr; }
	/** @brief Returns a pointer to Mode_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetModeOrNull() const { if (Mode_IsSet) return (&Mode_Optional); return nullptr; }
	/** @brief Sets the value of Mode_Optional and also sets Mode_IsSet to true */
	FORCEINLINE void SetMode(const FString& NewValue) { Mode_Optional = NewValue; Mode_IsSet = true;  }
	/** @brief Sets the value of Mode_Optional and also sets Mode_IsSet to true using move semantics */
	FORCEINLINE void SetMode(FString&& NewValue) { Mode_Optional = NewValue; Mode_IsSet = true;  }
	/** @brief Clears the value of Mode_Optional and sets Mode_IsSet to false */
	void ClearMode() { Mode_IsSet = false;  }

	/** @brief Additional commandline parameters for the instance */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString MiscParams{  };
	/** @brief Gets the value of MiscParams */
	FORCEINLINE FString& GetMiscParams() { return MiscParams; }
	/** @brief Gets the value of MiscParams */
	FORCEINLINE const FString& GetMiscParams() const { return MiscParams; }
	/** @brief Sets the value of MiscParams */
	FORCEINLINE void SetMiscParams(const FString& NewValue) { MiscParams = NewValue;   }
	/** @brief Sets the value of MiscParams using move semantics */
	FORCEINLINE void SetMiscParams(FString&& NewValue) { MiscParams = NewValue;   }

	/** @brief Custom data to pass through to the instance */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TMap<FString, FString> CustomData_Optional{  };
	/** @brief true if CustomData_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool CustomData_IsSet{ false };
	/** @brief Gets the value of CustomData_Optional, regardless of it having been set */
	FORCEINLINE TMap<FString, FString>& GetCustomData() { return CustomData_Optional; }
	/** @brief Gets the value of CustomData_Optional, regardless of it having been set */
	FORCEINLINE const TMap<FString, FString>& GetCustomData() const { return CustomData_Optional; }
	/** @brief Gets the value of CustomData_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const TMap<FString, FString>& GetCustomData(const TMap<FString, FString>& DefaultValue) const { if (CustomData_IsSet) return CustomData_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of CustomData_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetCustomData(TMap<FString, FString>& OutValue) const { if (CustomData_IsSet) OutValue = CustomData_Optional; return CustomData_IsSet; }
	/** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE TMap<FString, FString>* GetCustomDataOrNull() { if (CustomData_IsSet) return (&CustomData_Optional); return nullptr; }
	/** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const TMap<FString, FString>* GetCustomDataOrNull() const { if (CustomData_IsSet) return (&CustomData_Optional); return nullptr; }
	/** @brief Sets the value of CustomData_Optional and also sets CustomData_IsSet to true */
	FORCEINLINE void SetCustomData(const TMap<FString, FString>& NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true;  }
	/** @brief Sets the value of CustomData_Optional and also sets CustomData_IsSet to true using move semantics */
	FORCEINLINE void SetCustomData(TMap<FString, FString>&& NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true;  }
	/** @brief Clears the value of CustomData_Optional and sets CustomData_IsSet to false */
	void ClearCustomData() { CustomData_IsSet = false;  }
};

/** @} */
