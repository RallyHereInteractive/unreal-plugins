// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereAPIAuthContext.h"
#include "RallyHereAPIHelpers.h"
#include "OffsetReset.h"
#include "HTTPValidationError.h"
#include "HzApiErrorModel.h"
#include "Notification.h"
#include "NotificationCreateResult.h"
#include "NotificationCreates.h"
#include "Notifications.h"

namespace RallyHereAPI
{
using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

// forward declaration
class FPlayerNotificationAPI;

/**
 * @brief Create Notification
 * Create new notification for client.  Requires permission to create for a different client
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `notification:player:*`, `notification:player:write`
 * 
 * - For the player themselves any of: `notification:player:self:*`, `notification:player:self:write`
*/
struct RALLYHEREAPI_API FRequest_PlayerCreateNotification : public FRequest
{
	FRequest_PlayerCreateNotification();
	virtual ~FRequest_PlayerCreateNotification() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FGuid PlayerUuid;
	FRHAPI_NotificationCreates NotificationCreates;
};

/** The response type for FRequest_PlayerCreateNotification */
struct RALLYHEREAPI_API FResponse_PlayerCreateNotification : public FResponseAccessorTemplate<FRHAPI_NotificationCreateResult, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_NotificationCreateResult, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_PlayerCreateNotification(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_PlayerCreateNotification() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_NotificationCreateResult Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_NotificationCreateResult& OutContent) const { return TryGetContent<FRHAPI_NotificationCreateResult>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_NotificationCreateResult>& OutContent) const { return TryGetContent<FRHAPI_NotificationCreateResult>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_NotificationCreateResult* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_NotificationCreateResult>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_NotificationCreateResult> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_NotificationCreateResult>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_NotificationCreateResult& OutContent) const;

	/* Response 400
	 Error Codes: - bad_id - Passed client id is not a valid id 
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	 Error Codes: - auth_invalid_version - Invalid Authorization - version - auth_token_invalid_claim - Token contained invalid claim value: {} - auth_invalid_key_id - Invalid Authorization - Invalid Key ID in Access Token - auth_malformed_access - Invalid Authorization - malformed access token - auth_token_sig_invalid - Token Signature is invalid - auth_token_format - Invalid Authorization - {} - auth_token_expired - Token is expired - insufficient_permissions - Insufficient Permissions - auth_token_unknown - Failed to parse token - auth_not_jwt - Invalid Authorization 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 409
	 Error Codes: - too_many_listening_to_single_client - An enumeration. 
	*/
	bool TryGetContentFor409(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

	/* Response 503
	 Error Codes: - connection_limit_reached - An enumeration. 
	*/
	bool TryGetContentFor503(FRHAPI_HzApiErrorModel& OutContent) const;

};

/** The delegate class for FRequest_PlayerCreateNotification */
DECLARE_DELEGATE_OneParam(FDelegate_PlayerCreateNotification, const FResponse_PlayerCreateNotification&);

/** @brief A helper metadata object for PlayerCreateNotification that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_PlayerCreateNotification
{
	/** The request type */
	typedef FRequest_PlayerCreateNotification Request;
	/** The response type */
	typedef FResponse_PlayerCreateNotification Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_PlayerCreateNotification Delegate;
	/** The API object that supports this API call */
	typedef FPlayerNotificationAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Create Notification Self
 * Create new notification for client.
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `notification:player:*`, `notification:player:self:*`, `notification:player:self:write`, `notification:player:write`
*/
struct RALLYHEREAPI_API FRequest_PlayerCreateNotificationSelf : public FRequest
{
	FRequest_PlayerCreateNotificationSelf();
	virtual ~FRequest_PlayerCreateNotificationSelf() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FRHAPI_NotificationCreates NotificationCreates;
};

/** The response type for FRequest_PlayerCreateNotificationSelf */
struct RALLYHEREAPI_API FResponse_PlayerCreateNotificationSelf : public FResponseAccessorTemplate<FRHAPI_NotificationCreateResult, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_NotificationCreateResult, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_PlayerCreateNotificationSelf(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_PlayerCreateNotificationSelf() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_NotificationCreateResult Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_NotificationCreateResult& OutContent) const { return TryGetContent<FRHAPI_NotificationCreateResult>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_NotificationCreateResult>& OutContent) const { return TryGetContent<FRHAPI_NotificationCreateResult>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_NotificationCreateResult* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_NotificationCreateResult>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_NotificationCreateResult> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_NotificationCreateResult>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_NotificationCreateResult& OutContent) const;

	/* Response 400
	 Error Codes: - bad_id - Passed client id is not a valid id 
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	 Error Codes: - auth_invalid_version - Invalid Authorization - version - auth_token_invalid_claim - Token contained invalid claim value: {} - auth_invalid_key_id - Invalid Authorization - Invalid Key ID in Access Token - auth_malformed_access - Invalid Authorization - malformed access token - auth_token_sig_invalid - Token Signature is invalid - auth_token_format - Invalid Authorization - {} - auth_token_expired - Token is expired - insufficient_permissions - Insufficient Permissions - auth_token_unknown - Failed to parse token - auth_not_jwt - Invalid Authorization 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 409
	 Error Codes: - too_many_listening_to_single_client - An enumeration. 
	*/
	bool TryGetContentFor409(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

	/* Response 503
	 Error Codes: - connection_limit_reached - An enumeration. 
	*/
	bool TryGetContentFor503(FRHAPI_HzApiErrorModel& OutContent) const;

};

/** The delegate class for FRequest_PlayerCreateNotificationSelf */
DECLARE_DELEGATE_OneParam(FDelegate_PlayerCreateNotificationSelf, const FResponse_PlayerCreateNotificationSelf&);

/** @brief A helper metadata object for PlayerCreateNotificationSelf that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_PlayerCreateNotificationSelf
{
	/** The request type */
	typedef FRequest_PlayerCreateNotificationSelf Request;
	/** The response type */
	typedef FResponse_PlayerCreateNotificationSelf Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_PlayerCreateNotificationSelf Delegate;
	/** The API object that supports this API call */
	typedef FPlayerNotificationAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Notification By Id
 * Retrieve a single notification by id
 * 
 * This version can be used for any client provided its id (with proper permissions)
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `notification:player:*`, `notification:player:read`
 * 
 * - For the player themselves any of: `notification:player:self:*`, `notification:player:self:read`
*/
struct RALLYHEREAPI_API FRequest_PlayerGetNotificationById : public FRequest
{
	FRequest_PlayerGetNotificationById();
	virtual ~FRequest_PlayerGetNotificationById() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString NotificationId;
	FGuid PlayerUuid;
};

/** The response type for FRequest_PlayerGetNotificationById */
struct RALLYHEREAPI_API FResponse_PlayerGetNotificationById : public FResponseAccessorTemplate<FRHAPI_Notification, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_Notification, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_PlayerGetNotificationById(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_PlayerGetNotificationById() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_Notification Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_Notification& OutContent) const { return TryGetContent<FRHAPI_Notification>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_Notification>& OutContent) const { return TryGetContent<FRHAPI_Notification>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_Notification* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_Notification>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_Notification> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_Notification>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_Notification& OutContent) const;

	/* Response 400
	 Error Codes: - bad_id - Passed client id is not a valid id 
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	 Error Codes: - auth_invalid_version - Invalid Authorization - version - auth_token_invalid_claim - Token contained invalid claim value: {} - auth_invalid_key_id - Invalid Authorization - Invalid Key ID in Access Token - auth_malformed_access - Invalid Authorization - malformed access token - auth_token_sig_invalid - Token Signature is invalid - auth_token_format - Invalid Authorization - {} - auth_token_expired - Token is expired - insufficient_permissions - Insufficient Permissions - auth_token_unknown - Failed to parse token - auth_not_jwt - Invalid Authorization 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	 Error Codes: - resource_not_found - Notification could not be found 
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 409
	 Error Codes: - too_many_listening_to_single_client - An enumeration. 
	*/
	bool TryGetContentFor409(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

	/* Response 503
	 Error Codes: - connection_limit_reached - An enumeration. 
	*/
	bool TryGetContentFor503(FRHAPI_HzApiErrorModel& OutContent) const;

};

/** The delegate class for FRequest_PlayerGetNotificationById */
DECLARE_DELEGATE_OneParam(FDelegate_PlayerGetNotificationById, const FResponse_PlayerGetNotificationById&);

/** @brief A helper metadata object for PlayerGetNotificationById that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_PlayerGetNotificationById
{
	/** The request type */
	typedef FRequest_PlayerGetNotificationById Request;
	/** The response type */
	typedef FResponse_PlayerGetNotificationById Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_PlayerGetNotificationById Delegate;
	/** The API object that supports this API call */
	typedef FPlayerNotificationAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Notification By Id Self
 * Retrieve a single notification by id
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `notification:player:*`, `notification:player:read`, `notification:player:self:*`, `notification:player:self:read`
*/
struct RALLYHEREAPI_API FRequest_PlayerGetNotificationByIdSelf : public FRequest
{
	FRequest_PlayerGetNotificationByIdSelf();
	virtual ~FRequest_PlayerGetNotificationByIdSelf() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString NotificationId;
};

/** The response type for FRequest_PlayerGetNotificationByIdSelf */
struct RALLYHEREAPI_API FResponse_PlayerGetNotificationByIdSelf : public FResponseAccessorTemplate<FRHAPI_Notification, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_Notification, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_PlayerGetNotificationByIdSelf(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_PlayerGetNotificationByIdSelf() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_Notification Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_Notification& OutContent) const { return TryGetContent<FRHAPI_Notification>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_Notification>& OutContent) const { return TryGetContent<FRHAPI_Notification>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_Notification* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_Notification>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_Notification> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_Notification>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_Notification& OutContent) const;

	/* Response 400
	 Error Codes: - bad_id - Passed client id is not a valid id 
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	 Error Codes: - auth_invalid_version - Invalid Authorization - version - auth_token_invalid_claim - Token contained invalid claim value: {} - auth_invalid_key_id - Invalid Authorization - Invalid Key ID in Access Token - auth_malformed_access - Invalid Authorization - malformed access token - auth_token_sig_invalid - Token Signature is invalid - auth_token_format - Invalid Authorization - {} - auth_token_expired - Token is expired - insufficient_permissions - Insufficient Permissions - auth_token_unknown - Failed to parse token - auth_not_jwt - Invalid Authorization 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	 Error Codes: - resource_not_found - Notification could not be found 
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 409
	 Error Codes: - too_many_listening_to_single_client - An enumeration. 
	*/
	bool TryGetContentFor409(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

	/* Response 503
	 Error Codes: - connection_limit_reached - An enumeration. 
	*/
	bool TryGetContentFor503(FRHAPI_HzApiErrorModel& OutContent) const;

};

/** The delegate class for FRequest_PlayerGetNotificationByIdSelf */
DECLARE_DELEGATE_OneParam(FDelegate_PlayerGetNotificationByIdSelf, const FResponse_PlayerGetNotificationByIdSelf&);

/** @brief A helper metadata object for PlayerGetNotificationByIdSelf that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_PlayerGetNotificationByIdSelf
{
	/** The request type */
	typedef FRequest_PlayerGetNotificationByIdSelf Request;
	/** The response type */
	typedef FResponse_PlayerGetNotificationByIdSelf Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_PlayerGetNotificationByIdSelf Delegate;
	/** The API object that supports this API call */
	typedef FPlayerNotificationAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Notifications Page
 * Get recent notifications ordered from the newest to the oldest.
 * 
 * It is important to stress that this endpoint returns notifications in reverse order compared to the streaming API.
 * The first notification returned from this will be the newest one we can find, and older ones will be further down
 * the page (or on later pages).
 * 
 * This API is useful for displaying a list of the most recent notifications to the user, only requesting further
 * pages when the user requests a bigger list.
 * 
 * Client are expected to poll this endpoint regularly.
 * 
 * This version can be used for any client provided its id (with proper permissions)
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `notification:player:*`, `notification:player:read`
 * 
 * - For the player themselves any of: `notification:player:self:*`, `notification:player:self:read`
*/
struct RALLYHEREAPI_API FRequest_PlayerGetNotificationsPage : public FRequest
{
	FRequest_PlayerGetNotificationsPage();
	virtual ~FRequest_PlayerGetNotificationsPage() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FGuid PlayerUuid;
	TOptional<int32> PageSize;
	/* Return results starting at this index (inclusive).  If none provided then will start at the latest notification.  You cannot depend on the format of this string, and it must be considered opaque */
	TOptional<FString> StartAt;
	/* All notifications including and before this (chronologically) provided id will be ignored when returning results.  You cannot depend on the format of this string, and it must be considered opaque */
	TOptional<FString> ExcludeBefore;
	/* If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed */
	TOptional<FString> IfNoneMatch;
};

/** The response type for FRequest_PlayerGetNotificationsPage */
struct RALLYHEREAPI_API FResponse_PlayerGetNotificationsPage : public FResponseAccessorTemplate<FRHAPI_Notifications, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_Notifications, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_PlayerGetNotificationsPage(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_PlayerGetNotificationsPage() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_Notifications Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_Notifications& OutContent) const { return TryGetContent<FRHAPI_Notifications>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_Notifications>& OutContent) const { return TryGetContent<FRHAPI_Notifications>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_Notifications* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_Notifications>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_Notifications> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_Notifications>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_Notifications& OutContent) const;

	/* Response 304
	Not Modified
	*/

	/* Response 400
	 Error Codes: - bad_id - Passed client id is not a valid id 
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	 Error Codes: - auth_invalid_version - Invalid Authorization - version - auth_token_invalid_claim - Token contained invalid claim value: {} - auth_invalid_key_id - Invalid Authorization - Invalid Key ID in Access Token - auth_malformed_access - Invalid Authorization - malformed access token - auth_token_sig_invalid - Token Signature is invalid - auth_token_format - Invalid Authorization - {} - auth_token_expired - Token is expired - insufficient_permissions - Insufficient Permissions - auth_token_unknown - Failed to parse token - auth_not_jwt - Invalid Authorization 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 409
	 Error Codes: - too_many_listening_to_single_client - An enumeration. 
	*/
	bool TryGetContentFor409(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

	/* Response 503
	 Error Codes: - connection_limit_reached - An enumeration. 
	*/
	bool TryGetContentFor503(FRHAPI_HzApiErrorModel& OutContent) const;

};

/** The delegate class for FRequest_PlayerGetNotificationsPage */
DECLARE_DELEGATE_OneParam(FDelegate_PlayerGetNotificationsPage, const FResponse_PlayerGetNotificationsPage&);

/** @brief A helper metadata object for PlayerGetNotificationsPage that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_PlayerGetNotificationsPage
{
	/** The request type */
	typedef FRequest_PlayerGetNotificationsPage Request;
	/** The response type */
	typedef FResponse_PlayerGetNotificationsPage Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_PlayerGetNotificationsPage Delegate;
	/** The API object that supports this API call */
	typedef FPlayerNotificationAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Notifications Page Self
 * Get recent notifications ordered from the newest to the oldest.
 * 
 * It is important to stress that this endpoint returns notifications in reverse order compared to the streaming API.
 * The first notification returned from this will be the newest one we can find, and older ones will be further down
 * the page (or on later pages).
 * 
 * This API is useful for displaying a list of the most recent notifications to the user, only requesting further
 * pages when the user requests a bigger list.
 * 
 * Client are expected to poll this endpoint regularly.
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `notification:player:*`, `notification:player:read`, `notification:player:self:*`, `notification:player:self:read`
*/
struct RALLYHEREAPI_API FRequest_PlayerGetNotificationsPageSelf : public FRequest
{
	FRequest_PlayerGetNotificationsPageSelf();
	virtual ~FRequest_PlayerGetNotificationsPageSelf() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	TOptional<int32> PageSize;
	/* Return results starting at this index (inclusive).  If none provided then will start at the latest notification.  You cannot depend on the format of this string, and it must be considered opaque */
	TOptional<FString> StartAt;
	/* All notifications including and before this (chronologically) provided id will be ignored when returning results.  You cannot depend on the format of this string, and it must be considered opaque */
	TOptional<FString> ExcludeBefore;
	/* If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed */
	TOptional<FString> IfNoneMatch;
};

/** The response type for FRequest_PlayerGetNotificationsPageSelf */
struct RALLYHEREAPI_API FResponse_PlayerGetNotificationsPageSelf : public FResponseAccessorTemplate<FRHAPI_Notifications, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_Notifications, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_PlayerGetNotificationsPageSelf(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_PlayerGetNotificationsPageSelf() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_Notifications Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_Notifications& OutContent) const { return TryGetContent<FRHAPI_Notifications>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_Notifications>& OutContent) const { return TryGetContent<FRHAPI_Notifications>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_Notifications* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_Notifications>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_Notifications> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_Notifications>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_Notifications& OutContent) const;

	/* Response 304
	Not Modified
	*/

	/* Response 400
	 Error Codes: - bad_id - Passed client id is not a valid id 
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	 Error Codes: - auth_invalid_version - Invalid Authorization - version - auth_token_invalid_claim - Token contained invalid claim value: {} - auth_invalid_key_id - Invalid Authorization - Invalid Key ID in Access Token - auth_malformed_access - Invalid Authorization - malformed access token - auth_token_sig_invalid - Token Signature is invalid - auth_token_format - Invalid Authorization - {} - auth_token_expired - Token is expired - insufficient_permissions - Insufficient Permissions - auth_token_unknown - Failed to parse token - auth_not_jwt - Invalid Authorization 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 409
	 Error Codes: - too_many_listening_to_single_client - An enumeration. 
	*/
	bool TryGetContentFor409(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

	/* Response 503
	 Error Codes: - connection_limit_reached - An enumeration. 
	*/
	bool TryGetContentFor503(FRHAPI_HzApiErrorModel& OutContent) const;

};

/** The delegate class for FRequest_PlayerGetNotificationsPageSelf */
DECLARE_DELEGATE_OneParam(FDelegate_PlayerGetNotificationsPageSelf, const FResponse_PlayerGetNotificationsPageSelf&);

/** @brief A helper metadata object for PlayerGetNotificationsPageSelf that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_PlayerGetNotificationsPageSelf
{
	/** The request type */
	typedef FRequest_PlayerGetNotificationsPageSelf Request;
	/** The response type */
	typedef FResponse_PlayerGetNotificationsPageSelf Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_PlayerGetNotificationsPageSelf Delegate;
	/** The API object that supports this API call */
	typedef FPlayerNotificationAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Long Poll For Notifications
 * This endpoint will return notifications newer than `exclude_before`.  This endpoint returns notifications
 * from older to newer, which is the opposite of the paging API.  The returned `cursor` value can be used as
 * `exclude_before` in subsequent polls to ensure you only receive new notifications.
 * 
 * This operation is a long-poll.  That means we will keep the connection open until we get any notification
 * or until the passed in deadline (to the best of our ability).  Once one of these happens, we will return
 * the notifications found.
 * 
 * This version can be used for any client provided its id (with proper permissions)
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `notification:player:*`, `notification:player:read`
 * 
 * - For the player themselves any of: `notification:player:self:*`, `notification:player:self:read`
*/
struct RALLYHEREAPI_API FRequest_PlayerLongPollForNotifications : public FRequest
{
	FRequest_PlayerLongPollForNotifications();
	virtual ~FRequest_PlayerLongPollForNotifications() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FGuid PlayerUuid;
	/* Max number of entries to return at one time */
	TOptional<int32> MaxPageSize;
	/* All notifications including and before this (chronologically) provided id will be ignored when returning results.  You cannot depend on the format of this string, and it must be considered opaque */
	TOptional<FString> ExcludeBefore;
	/* When `exclude_before` is not found in the stream or not given, begin streaming messages from the earliest/latest message */
	TOptional<ERHAPI_OffsetReset> OffsetResetStrategy;
	/* We will try to the best of our ability to return by this deadline, even when we have no notifications.  Value should be in seconds */
	TOptional<int32> Deadline;
};

/** The response type for FRequest_PlayerLongPollForNotifications */
struct RALLYHEREAPI_API FResponse_PlayerLongPollForNotifications : public FResponseAccessorTemplate<FRHAPI_Notifications, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_Notifications, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_PlayerLongPollForNotifications(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_PlayerLongPollForNotifications() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_Notifications Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_Notifications& OutContent) const { return TryGetContent<FRHAPI_Notifications>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_Notifications>& OutContent) const { return TryGetContent<FRHAPI_Notifications>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_Notifications* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_Notifications>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_Notifications> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_Notifications>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_Notifications& OutContent) const;

	/* Response 400
	 Error Codes: - bad_id - Passed client id is not a valid id 
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	 Error Codes: - auth_invalid_version - Invalid Authorization - version - auth_token_invalid_claim - Token contained invalid claim value: {} - auth_invalid_key_id - Invalid Authorization - Invalid Key ID in Access Token - auth_malformed_access - Invalid Authorization - malformed access token - auth_token_sig_invalid - Token Signature is invalid - auth_token_format - Invalid Authorization - {} - auth_token_expired - Token is expired - insufficient_permissions - Insufficient Permissions - auth_token_unknown - Failed to parse token - auth_not_jwt - Invalid Authorization 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 409
	 Error Codes: - too_many_listening_to_single_client - An enumeration. 
	*/
	bool TryGetContentFor409(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

	/* Response 503
	 Error Codes: - connection_limit_reached - An enumeration. 
	*/
	bool TryGetContentFor503(FRHAPI_HzApiErrorModel& OutContent) const;

};

/** The delegate class for FRequest_PlayerLongPollForNotifications */
DECLARE_DELEGATE_OneParam(FDelegate_PlayerLongPollForNotifications, const FResponse_PlayerLongPollForNotifications&);

/** @brief A helper metadata object for PlayerLongPollForNotifications that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_PlayerLongPollForNotifications
{
	/** The request type */
	typedef FRequest_PlayerLongPollForNotifications Request;
	/** The response type */
	typedef FResponse_PlayerLongPollForNotifications Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_PlayerLongPollForNotifications Delegate;
	/** The API object that supports this API call */
	typedef FPlayerNotificationAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Long Poll For Notifications Self
 * This endpoint will return notifications newer than `exclude_before`.  This endpoint returns notifications
 * from older to newer, which is the opposite of the paging API.  The returned `cursor` value can be used as
 * `exclude_before` in subsequent polls to ensure you only receive new notifications.
 * 
 * This operation is a long-poll.  That means we will keep the connection open until we get any notification
 * or until the passed in deadline (to the best of our ability).  Once one of these happens, we will return
 * the notifications found.
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `notification:player:*`, `notification:player:read`, `notification:player:self:*`, `notification:player:self:read`
*/
struct RALLYHEREAPI_API FRequest_PlayerLongPollForNotificationsSelf : public FRequest
{
	FRequest_PlayerLongPollForNotificationsSelf();
	virtual ~FRequest_PlayerLongPollForNotificationsSelf() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	/* Max number of entries to return at one time */
	TOptional<int32> MaxPageSize;
	/* All notifications including and before this (chronologically) provided id will be ignored when returning results.  You cannot depend on the format of this string, and it must be considered opaque */
	TOptional<FString> ExcludeBefore;
	/* When `exclude_before` is not found in the stream or not given, begin streaming messages from the earliest/latest message */
	TOptional<ERHAPI_OffsetReset> OffsetResetStrategy;
	/* We will try to the best of our ability to return by this deadline, even when we have no notifications.  Value should be in seconds */
	TOptional<int32> Deadline;
};

/** The response type for FRequest_PlayerLongPollForNotificationsSelf */
struct RALLYHEREAPI_API FResponse_PlayerLongPollForNotificationsSelf : public FResponseAccessorTemplate<FRHAPI_Notifications, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_Notifications, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_PlayerLongPollForNotificationsSelf(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_PlayerLongPollForNotificationsSelf() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_Notifications Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_Notifications& OutContent) const { return TryGetContent<FRHAPI_Notifications>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_Notifications>& OutContent) const { return TryGetContent<FRHAPI_Notifications>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_Notifications* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_Notifications>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_Notifications> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_Notifications>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_Notifications& OutContent) const;

	/* Response 400
	 Error Codes: - bad_id - Passed client id is not a valid id 
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	 Error Codes: - auth_invalid_version - Invalid Authorization - version - auth_token_invalid_claim - Token contained invalid claim value: {} - auth_invalid_key_id - Invalid Authorization - Invalid Key ID in Access Token - auth_malformed_access - Invalid Authorization - malformed access token - auth_token_sig_invalid - Token Signature is invalid - auth_token_format - Invalid Authorization - {} - auth_token_expired - Token is expired - insufficient_permissions - Insufficient Permissions - auth_token_unknown - Failed to parse token - auth_not_jwt - Invalid Authorization 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 409
	 Error Codes: - too_many_listening_to_single_client - An enumeration. 
	*/
	bool TryGetContentFor409(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

	/* Response 503
	 Error Codes: - connection_limit_reached - An enumeration. 
	*/
	bool TryGetContentFor503(FRHAPI_HzApiErrorModel& OutContent) const;

};

/** The delegate class for FRequest_PlayerLongPollForNotificationsSelf */
DECLARE_DELEGATE_OneParam(FDelegate_PlayerLongPollForNotificationsSelf, const FResponse_PlayerLongPollForNotificationsSelf&);

/** @brief A helper metadata object for PlayerLongPollForNotificationsSelf that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_PlayerLongPollForNotificationsSelf
{
	/** The request type */
	typedef FRequest_PlayerLongPollForNotificationsSelf Request;
	/** The response type */
	typedef FResponse_PlayerLongPollForNotificationsSelf Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_PlayerLongPollForNotificationsSelf Delegate;
	/** The API object that supports this API call */
	typedef FPlayerNotificationAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};


/** The API class itself, which will handle calls to */
class RALLYHEREAPI_API FPlayerNotificationAPI : public FAPI
{
public:
	FPlayerNotificationAPI();
	virtual ~FPlayerNotificationAPI();

	FHttpRequestPtr PlayerCreateNotification(const FRequest_PlayerCreateNotification& Request, const FDelegate_PlayerCreateNotification& Delegate = FDelegate_PlayerCreateNotification(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr PlayerCreateNotificationSelf(const FRequest_PlayerCreateNotificationSelf& Request, const FDelegate_PlayerCreateNotificationSelf& Delegate = FDelegate_PlayerCreateNotificationSelf(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr PlayerGetNotificationById(const FRequest_PlayerGetNotificationById& Request, const FDelegate_PlayerGetNotificationById& Delegate = FDelegate_PlayerGetNotificationById(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr PlayerGetNotificationByIdSelf(const FRequest_PlayerGetNotificationByIdSelf& Request, const FDelegate_PlayerGetNotificationByIdSelf& Delegate = FDelegate_PlayerGetNotificationByIdSelf(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr PlayerGetNotificationsPage(const FRequest_PlayerGetNotificationsPage& Request, const FDelegate_PlayerGetNotificationsPage& Delegate = FDelegate_PlayerGetNotificationsPage(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr PlayerGetNotificationsPageSelf(const FRequest_PlayerGetNotificationsPageSelf& Request, const FDelegate_PlayerGetNotificationsPageSelf& Delegate = FDelegate_PlayerGetNotificationsPageSelf(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr PlayerLongPollForNotifications(const FRequest_PlayerLongPollForNotifications& Request, const FDelegate_PlayerLongPollForNotifications& Delegate = FDelegate_PlayerLongPollForNotifications(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr PlayerLongPollForNotificationsSelf(const FRequest_PlayerLongPollForNotificationsSelf& Request, const FDelegate_PlayerLongPollForNotificationsSelf& Delegate = FDelegate_PlayerLongPollForNotificationsSelf(), int32 Priority = DefaultRallyHereAPIPriority);

private:
	void OnPlayerCreateNotificationResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_PlayerCreateNotification Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnPlayerCreateNotificationSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_PlayerCreateNotificationSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnPlayerGetNotificationByIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_PlayerGetNotificationById Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnPlayerGetNotificationByIdSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_PlayerGetNotificationByIdSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnPlayerGetNotificationsPageResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_PlayerGetNotificationsPage Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnPlayerGetNotificationsPageSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_PlayerGetNotificationsPageSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnPlayerLongPollForNotificationsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_PlayerLongPollForNotifications Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnPlayerLongPollForNotificationsSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_PlayerLongPollForNotificationsSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};



}
