// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "AdditionalJoinParams.h"
#include "RankData.h"
#include "TicketData.generated.h"

/** @defgroup RHAPI_TicketData RallyHere API Model TicketData
 *  @{
 */

/**
 * @brief 
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_TicketData : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	/** @brief Unique ID for this ticket */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString TicketId{  };
	/** @brief Gets the value of TicketId */
	FString& GetTicketId() { return TicketId; }
	/** @brief Gets the value of TicketId */
	const FString& GetTicketId() const { return TicketId; }
	/** @brief Sets the value of TicketId */
	void SetTicketId(const FString& NewValue) { TicketId = NewValue;   }
	/** @brief Sets the value of TicketId using move semantics */
	void SetTicketId(FString&& NewValue) { TicketId = NewValue;   }

	/** @brief List of Player UUIDS that are associated with this ticket */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TArray<FGuid> PlayerUuids_Optional{  };
	/** @brief true if PlayerUuids_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool PlayerUuids_IsSet{ false };
	/** @brief Gets the value of PlayerUuids_Optional, regardless of it having been set */
	TArray<FGuid>& GetPlayerUuids() { return PlayerUuids_Optional; }
	/** @brief Gets the value of PlayerUuids_Optional, regardless of it having been set */
	const TArray<FGuid>& GetPlayerUuids() const { return PlayerUuids_Optional; }
	/** @brief Gets the value of PlayerUuids_Optional, if it has been set, otherwise it returns DefaultValue */
	const TArray<FGuid>& GetPlayerUuids(const TArray<FGuid>& DefaultValue) const { if (PlayerUuids_IsSet) return PlayerUuids_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of PlayerUuids_Optional and returns true if it has been set, otherwise returns false */
	bool GetPlayerUuids(TArray<FGuid>& OutValue) const { if (PlayerUuids_IsSet) OutValue = PlayerUuids_Optional; return PlayerUuids_IsSet; }
	/** @brief Returns a pointer to PlayerUuids_Optional, if it has been set, otherwise returns nullptr */
	TArray<FGuid>* GetPlayerUuidsOrNull() { if (PlayerUuids_IsSet) return (&PlayerUuids_Optional); return nullptr; }
	/** @brief Returns a pointer to PlayerUuids_Optional, if it has been set, otherwise returns nullptr */
	const TArray<FGuid>* GetPlayerUuidsOrNull() const { if (PlayerUuids_IsSet) return (&PlayerUuids_Optional); return nullptr; }
	/** @brief Sets the value of PlayerUuids_Optional and also sets PlayerUuids_IsSet to true */
	void SetPlayerUuids(const TArray<FGuid>& NewValue) { PlayerUuids_Optional = NewValue; PlayerUuids_IsSet = true;  }
	/** @brief Sets the value of PlayerUuids_Optional and also sets PlayerUuids_IsSet to true using move semantics */
	void SetPlayerUuids(TArray<FGuid>&& NewValue) { PlayerUuids_Optional = NewValue; PlayerUuids_IsSet = true;  }
	/** @brief Clears the value of PlayerUuids_Optional and sets PlayerUuids_IsSet to false */
	void ClearPlayerUuids() { PlayerUuids_IsSet = false;  }
	/** @brief Checks whether PlayerUuids_Optional has been set */
	bool IsPlayerUuidsSet() const { return PlayerUuids_IsSet; }

	/** @brief Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FDateTime QueueJoinDatetime{  };
	/** @brief Gets the value of QueueJoinDatetime */
	FDateTime& GetQueueJoinDatetime() { return QueueJoinDatetime; }
	/** @brief Gets the value of QueueJoinDatetime */
	const FDateTime& GetQueueJoinDatetime() const { return QueueJoinDatetime; }
	/** @brief Sets the value of QueueJoinDatetime */
	void SetQueueJoinDatetime(const FDateTime& NewValue) { QueueJoinDatetime = NewValue;   }
	/** @brief Sets the value of QueueJoinDatetime using move semantics */
	void SetQueueJoinDatetime(FDateTime&& NewValue) { QueueJoinDatetime = NewValue;   }

	/** @brief Which region this ticket was created for */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString RegionId{  };
	/** @brief Gets the value of RegionId */
	FString& GetRegionId() { return RegionId; }
	/** @brief Gets the value of RegionId */
	const FString& GetRegionId() const { return RegionId; }
	/** @brief Sets the value of RegionId */
	void SetRegionId(const FString& NewValue) { RegionId = NewValue;   }
	/** @brief Sets the value of RegionId using move semantics */
	void SetRegionId(FString&& NewValue) { RegionId = NewValue;   }

	/** @brief Which queue was used to create this ticket */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString QueueId{  };
	/** @brief Gets the value of QueueId */
	FString& GetQueueId() { return QueueId; }
	/** @brief Gets the value of QueueId */
	const FString& GetQueueId() const { return QueueId; }
	/** @brief Sets the value of QueueId */
	void SetQueueId(const FString& NewValue) { QueueId = NewValue;   }
	/** @brief Sets the value of QueueId using move semantics */
	void SetQueueId(FString&& NewValue) { QueueId = NewValue;   }

	/** @brief List of profiles that were being considered for this ticket */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TArray<FString> ProfileIds{  };
	/** @brief Gets the value of ProfileIds */
	TArray<FString>& GetProfileIds() { return ProfileIds; }
	/** @brief Gets the value of ProfileIds */
	const TArray<FString>& GetProfileIds() const { return ProfileIds; }
	/** @brief Sets the value of ProfileIds */
	void SetProfileIds(const TArray<FString>& NewValue) { ProfileIds = NewValue;   }
	/** @brief Sets the value of ProfileIds using move semantics */
	void SetProfileIds(TArray<FString>&& NewValue) { ProfileIds = NewValue;   }

	/** @brief Additional join params specified on queue join */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_AdditionalJoinParams AdditionalJoinParams_Optional{  };
	/** @brief true if AdditionalJoinParams_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool AdditionalJoinParams_IsSet{ false };
	/** @brief Gets the value of AdditionalJoinParams_Optional, regardless of it having been set */
	FRHAPI_AdditionalJoinParams& GetAdditionalJoinParams() { return AdditionalJoinParams_Optional; }
	/** @brief Gets the value of AdditionalJoinParams_Optional, regardless of it having been set */
	const FRHAPI_AdditionalJoinParams& GetAdditionalJoinParams() const { return AdditionalJoinParams_Optional; }
	/** @brief Gets the value of AdditionalJoinParams_Optional, if it has been set, otherwise it returns DefaultValue */
	const FRHAPI_AdditionalJoinParams& GetAdditionalJoinParams(const FRHAPI_AdditionalJoinParams& DefaultValue) const { if (AdditionalJoinParams_IsSet) return AdditionalJoinParams_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of AdditionalJoinParams_Optional and returns true if it has been set, otherwise returns false */
	bool GetAdditionalJoinParams(FRHAPI_AdditionalJoinParams& OutValue) const { if (AdditionalJoinParams_IsSet) OutValue = AdditionalJoinParams_Optional; return AdditionalJoinParams_IsSet; }
	/** @brief Returns a pointer to AdditionalJoinParams_Optional, if it has been set, otherwise returns nullptr */
	FRHAPI_AdditionalJoinParams* GetAdditionalJoinParamsOrNull() { if (AdditionalJoinParams_IsSet) return (&AdditionalJoinParams_Optional); return nullptr; }
	/** @brief Returns a pointer to AdditionalJoinParams_Optional, if it has been set, otherwise returns nullptr */
	const FRHAPI_AdditionalJoinParams* GetAdditionalJoinParamsOrNull() const { if (AdditionalJoinParams_IsSet) return (&AdditionalJoinParams_Optional); return nullptr; }
	/** @brief Sets the value of AdditionalJoinParams_Optional and also sets AdditionalJoinParams_IsSet to true */
	void SetAdditionalJoinParams(const FRHAPI_AdditionalJoinParams& NewValue) { AdditionalJoinParams_Optional = NewValue; AdditionalJoinParams_IsSet = true;  }
	/** @brief Sets the value of AdditionalJoinParams_Optional and also sets AdditionalJoinParams_IsSet to true using move semantics */
	void SetAdditionalJoinParams(FRHAPI_AdditionalJoinParams&& NewValue) { AdditionalJoinParams_Optional = NewValue; AdditionalJoinParams_IsSet = true;  }
	/** @brief Clears the value of AdditionalJoinParams_Optional and sets AdditionalJoinParams_IsSet to false */
	void ClearAdditionalJoinParams() { AdditionalJoinParams_IsSet = false;  }
	/** @brief Checks whether AdditionalJoinParams_Optional has been set */
	bool IsAdditionalJoinParamsSet() const { return AdditionalJoinParams_IsSet; }

	/** @brief List of rank data on the ticket */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TArray<FRHAPI_RankData> RankData_Optional{  };
	/** @brief true if RankData_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool RankData_IsSet{ false };
	/** @brief Gets the value of RankData_Optional, regardless of it having been set */
	TArray<FRHAPI_RankData>& GetRankData() { return RankData_Optional; }
	/** @brief Gets the value of RankData_Optional, regardless of it having been set */
	const TArray<FRHAPI_RankData>& GetRankData() const { return RankData_Optional; }
	/** @brief Gets the value of RankData_Optional, if it has been set, otherwise it returns DefaultValue */
	const TArray<FRHAPI_RankData>& GetRankData(const TArray<FRHAPI_RankData>& DefaultValue) const { if (RankData_IsSet) return RankData_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of RankData_Optional and returns true if it has been set, otherwise returns false */
	bool GetRankData(TArray<FRHAPI_RankData>& OutValue) const { if (RankData_IsSet) OutValue = RankData_Optional; return RankData_IsSet; }
	/** @brief Returns a pointer to RankData_Optional, if it has been set, otherwise returns nullptr */
	TArray<FRHAPI_RankData>* GetRankDataOrNull() { if (RankData_IsSet) return (&RankData_Optional); return nullptr; }
	/** @brief Returns a pointer to RankData_Optional, if it has been set, otherwise returns nullptr */
	const TArray<FRHAPI_RankData>* GetRankDataOrNull() const { if (RankData_IsSet) return (&RankData_Optional); return nullptr; }
	/** @brief Sets the value of RankData_Optional and also sets RankData_IsSet to true */
	void SetRankData(const TArray<FRHAPI_RankData>& NewValue) { RankData_Optional = NewValue; RankData_IsSet = true;  }
	/** @brief Sets the value of RankData_Optional and also sets RankData_IsSet to true using move semantics */
	void SetRankData(TArray<FRHAPI_RankData>&& NewValue) { RankData_Optional = NewValue; RankData_IsSet = true;  }
	/** @brief Clears the value of RankData_Optional and sets RankData_IsSet to false */
	void ClearRankData() { RankData_IsSet = false;  }
	/** @brief Checks whether RankData_Optional has been set */
	bool IsRankDataSet() const { return RankData_IsSet; }
};

/** @} */
