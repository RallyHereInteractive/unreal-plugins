// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "InventoryBucket.h"
#include "InventoryType.h"
#include "InventoryRecord.generated.h"

/** @defgroup RHAPI_InventoryRecord RallyHere API Model InventoryRecord
 *  @{
 */

/**
 * @brief Inventory Record for a Player
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_InventoryRecord : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	/** @brief Unique ID for this Inventory Record. */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FGuid InventoryId{  };
	/** @brief Gets the value of InventoryId */
	FGuid& GetInventoryId() { return InventoryId; }
	/** @brief Gets the value of InventoryId */
	const FGuid& GetInventoryId() const { return InventoryId; }
	/** @brief Sets the value of InventoryId */
	void SetInventoryId(const FGuid& NewValue) { InventoryId = NewValue;  }
	/** @brief Sets the value of InventoryId using move semantics */
	void SetInventoryId(FGuid&& NewValue) { InventoryId = NewValue;  }

	/** @brief Type of Inventory Record. */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	ERHAPI_InventoryType Type{  };
	/** @brief Gets the value of Type */
	ERHAPI_InventoryType& GetType() { return Type; }
	/** @brief Gets the value of Type */
	const ERHAPI_InventoryType& GetType() const { return Type; }
	/** @brief Sets the value of Type */
	void SetType(const ERHAPI_InventoryType& NewValue) { Type = NewValue;  }
	/** @brief Sets the value of Type using move semantics */
	void SetType(ERHAPI_InventoryType&& NewValue) { Type = NewValue;  }

	/** @brief Legacy Inventory ID. */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int64 LegacyInventoryId_Optional{  };
	/** @brief true if LegacyInventoryId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool LegacyInventoryId_IsSet{ false };
	/** @brief Gets the value of LegacyInventoryId_Optional, regardless of it having been set */
	int64& GetLegacyInventoryId() { return LegacyInventoryId_Optional; }
	/** @brief Gets the value of LegacyInventoryId_Optional, regardless of it having been set */
	const int64& GetLegacyInventoryId() const { return LegacyInventoryId_Optional; }
	/** @brief Gets the value of LegacyInventoryId_Optional, if it has been set, otherwise it returns DefaultValue */
	const int64& GetLegacyInventoryId(const int64& DefaultValue) const { if (LegacyInventoryId_IsSet) return LegacyInventoryId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of LegacyInventoryId_Optional and returns true if it has been set, otherwise returns false */
	bool GetLegacyInventoryId(int64& OutValue) const { if (LegacyInventoryId_IsSet) OutValue = LegacyInventoryId_Optional; return LegacyInventoryId_IsSet; }
	/** @brief Returns a pointer to LegacyInventoryId_Optional, if it has been set, otherwise returns nullptr */
	int64* GetLegacyInventoryIdOrNull() { if (LegacyInventoryId_IsSet) return &LegacyInventoryId_Optional; return nullptr; }
	/** @brief Returns a pointer to LegacyInventoryId_Optional, if it has been set, otherwise returns nullptr */
	const int64* GetLegacyInventoryIdOrNull() const { if (LegacyInventoryId_IsSet) return &LegacyInventoryId_Optional; return nullptr; }
	/** @brief Sets the value of LegacyInventoryId_Optional and also sets LegacyInventoryId_IsSet to true */
	void SetLegacyInventoryId(const int64& NewValue) { LegacyInventoryId_Optional = NewValue; LegacyInventoryId_IsSet = true; }
	/** @brief Sets the value of LegacyInventoryId_Optional and also sets LegacyInventoryId_IsSet to true using move semantics */
	void SetLegacyInventoryId(int64&& NewValue) { LegacyInventoryId_Optional = NewValue; LegacyInventoryId_IsSet = true; }
	 /** @brief Clears the value of LegacyInventoryId_Optional and sets LegacyInventoryId_IsSet to false */
	void ClearLegacyInventoryId() { LegacyInventoryId_Optional = 0; LegacyInventoryId_IsSet = false; }
	/** @brief Returns true if LegacyInventoryId_Optional is set and matches the default value */
	bool IsLegacyInventoryIdDefaultValue() const { return LegacyInventoryId_IsSet && LegacyInventoryId_Optional == 0; }
	/** @brief Sets the value of LegacyInventoryId_Optional to its default and also sets LegacyInventoryId_IsSet to true */
	void SetLegacyInventoryIdToDefault() { LegacyInventoryId_Optional = 0; LegacyInventoryId_IsSet = true; }

	/** @brief Bucket for this Inventory Record. */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	ERHAPI_InventoryBucket Bucket_Optional{  };
	/** @brief true if Bucket_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Bucket_IsSet{ false };
	/** @brief Gets the value of Bucket_Optional, regardless of it having been set */
	ERHAPI_InventoryBucket& GetBucket() { return Bucket_Optional; }
	/** @brief Gets the value of Bucket_Optional, regardless of it having been set */
	const ERHAPI_InventoryBucket& GetBucket() const { return Bucket_Optional; }
	/** @brief Gets the value of Bucket_Optional, if it has been set, otherwise it returns DefaultValue */
	const ERHAPI_InventoryBucket& GetBucket(const ERHAPI_InventoryBucket& DefaultValue) const { if (Bucket_IsSet) return Bucket_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Bucket_Optional and returns true if it has been set, otherwise returns false */
	bool GetBucket(ERHAPI_InventoryBucket& OutValue) const { if (Bucket_IsSet) OutValue = Bucket_Optional; return Bucket_IsSet; }
	/** @brief Returns a pointer to Bucket_Optional, if it has been set, otherwise returns nullptr */
	ERHAPI_InventoryBucket* GetBucketOrNull() { if (Bucket_IsSet) return &Bucket_Optional; return nullptr; }
	/** @brief Returns a pointer to Bucket_Optional, if it has been set, otherwise returns nullptr */
	const ERHAPI_InventoryBucket* GetBucketOrNull() const { if (Bucket_IsSet) return &Bucket_Optional; return nullptr; }
	/** @brief Sets the value of Bucket_Optional and also sets Bucket_IsSet to true */
	void SetBucket(const ERHAPI_InventoryBucket& NewValue) { Bucket_Optional = NewValue; Bucket_IsSet = true; }
	/** @brief Sets the value of Bucket_Optional and also sets Bucket_IsSet to true using move semantics */
	void SetBucket(ERHAPI_InventoryBucket&& NewValue) { Bucket_Optional = NewValue; Bucket_IsSet = true; }
	 /** @brief Clears the value of Bucket_Optional and sets Bucket_IsSet to false */
	void ClearBucket() { Bucket_IsSet = false; }

	/** @brief Instance count for this Inventory Record. */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 Count{ 0 };
	/** @brief Gets the value of Count */
	int32& GetCount() { return Count; }
	/** @brief Gets the value of Count */
	const int32& GetCount() const { return Count; }
	/** @brief Sets the value of Count */
	void SetCount(const int32& NewValue) { Count = NewValue;  }
	/** @brief Sets the value of Count using move semantics */
	void SetCount(int32&& NewValue) { Count = NewValue;  }
	/** @brief Returns true if Count matches the default value */
	bool IsCountDefaultValue() const { return Count == 0; }
	/** @brief Sets the value of Count to its default  */
	void SetCountToDefault() { Count = 0;  }

	/** @brief Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FDateTime Acquired{  };
	/** @brief Gets the value of Acquired */
	FDateTime& GetAcquired() { return Acquired; }
	/** @brief Gets the value of Acquired */
	const FDateTime& GetAcquired() const { return Acquired; }
	/** @brief Sets the value of Acquired */
	void SetAcquired(const FDateTime& NewValue) { Acquired = NewValue;  }
	/** @brief Sets the value of Acquired using move semantics */
	void SetAcquired(FDateTime&& NewValue) { Acquired = NewValue;  }

	/** @brief Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FDateTime Expires_Optional{  };
	/** @brief true if Expires_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Expires_IsSet{ false };
	/** @brief Gets the value of Expires_Optional, regardless of it having been set */
	FDateTime& GetExpires() { return Expires_Optional; }
	/** @brief Gets the value of Expires_Optional, regardless of it having been set */
	const FDateTime& GetExpires() const { return Expires_Optional; }
	/** @brief Gets the value of Expires_Optional, if it has been set, otherwise it returns DefaultValue */
	const FDateTime& GetExpires(const FDateTime& DefaultValue) const { if (Expires_IsSet) return Expires_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Expires_Optional and returns true if it has been set, otherwise returns false */
	bool GetExpires(FDateTime& OutValue) const { if (Expires_IsSet) OutValue = Expires_Optional; return Expires_IsSet; }
	/** @brief Returns a pointer to Expires_Optional, if it has been set, otherwise returns nullptr */
	FDateTime* GetExpiresOrNull() { if (Expires_IsSet) return &Expires_Optional; return nullptr; }
	/** @brief Returns a pointer to Expires_Optional, if it has been set, otherwise returns nullptr */
	const FDateTime* GetExpiresOrNull() const { if (Expires_IsSet) return &Expires_Optional; return nullptr; }
	/** @brief Sets the value of Expires_Optional and also sets Expires_IsSet to true */
	void SetExpires(const FDateTime& NewValue) { Expires_Optional = NewValue; Expires_IsSet = true; }
	/** @brief Sets the value of Expires_Optional and also sets Expires_IsSet to true using move semantics */
	void SetExpires(FDateTime&& NewValue) { Expires_Optional = NewValue; Expires_IsSet = true; }
	 /** @brief Clears the value of Expires_Optional and sets Expires_IsSet to false */
	void ClearExpires() { Expires_IsSet = false; }

	/** @brief Arbitrary map of data for this Inventory Record. */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TMap<FString, FString> CustomData_Optional{  };
	/** @brief true if CustomData_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool CustomData_IsSet{ false };
	/** @brief Gets the value of CustomData_Optional, regardless of it having been set */
	TMap<FString, FString>& GetCustomData() { return CustomData_Optional; }
	/** @brief Gets the value of CustomData_Optional, regardless of it having been set */
	const TMap<FString, FString>& GetCustomData() const { return CustomData_Optional; }
	/** @brief Gets the value of CustomData_Optional, if it has been set, otherwise it returns DefaultValue */
	const TMap<FString, FString>& GetCustomData(const TMap<FString, FString>& DefaultValue) const { if (CustomData_IsSet) return CustomData_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of CustomData_Optional and returns true if it has been set, otherwise returns false */
	bool GetCustomData(TMap<FString, FString>& OutValue) const { if (CustomData_IsSet) OutValue = CustomData_Optional; return CustomData_IsSet; }
	/** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
	TMap<FString, FString>* GetCustomDataOrNull() { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
	/** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
	const TMap<FString, FString>* GetCustomDataOrNull() const { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
	/** @brief Sets the value of CustomData_Optional and also sets CustomData_IsSet to true */
	void SetCustomData(const TMap<FString, FString>& NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true; }
	/** @brief Sets the value of CustomData_Optional and also sets CustomData_IsSet to true using move semantics */
	void SetCustomData(TMap<FString, FString>&& NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true; }
	 /** @brief Clears the value of CustomData_Optional and sets CustomData_IsSet to false */
	void ClearCustomData() { CustomData_IsSet = false; }
};

/** @} */
