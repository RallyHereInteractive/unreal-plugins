// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "PriceBreakPointCurrency.h"
#include "PriceBreakpoint.generated.h"

/** @defgroup RHAPI_PriceBreakpoint RallyHere API Model PriceBreakpoint
 *  @{
 */

/**
 * @brief Price based on quantity and the Item ID of the currency used.
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_PriceBreakpoint : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FGuid PriceItemUuid_Optional{  };
	/** @brief true if PriceItemUuid_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool PriceItemUuid_IsSet{ false };
	/** @brief true if PriceItemUuid_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool PriceItemUuid_IsNull{ false };
	/** @brief Gets the value of PriceItemUuid_Optional, regardless of it having been set */
	FORCEINLINE FGuid& GetPriceItemUuid() { return PriceItemUuid_Optional; }
	/** @brief Gets the value of PriceItemUuid_Optional, regardless of it having been set */
	FORCEINLINE const FGuid& GetPriceItemUuid() const { return PriceItemUuid_Optional; }
	/** @brief Gets the value of PriceItemUuid_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FGuid& GetPriceItemUuid(const FGuid& DefaultValue) const { if (PriceItemUuid_IsSet) return PriceItemUuid_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of PriceItemUuid_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetPriceItemUuid(FGuid& OutValue) const { if (PriceItemUuid_IsSet && !PriceItemUuid_IsNull) OutValue = PriceItemUuid_Optional; return PriceItemUuid_IsSet; }
	/** @brief Returns a pointer to PriceItemUuid_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FGuid* GetPriceItemUuidOrNull() { if (PriceItemUuid_IsSet) return (PriceItemUuid_IsNull ? nullptr : &PriceItemUuid_Optional); return nullptr; }
	/** @brief Returns a pointer to PriceItemUuid_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FGuid* GetPriceItemUuidOrNull() const { if (PriceItemUuid_IsSet) return (PriceItemUuid_IsNull ? nullptr : &PriceItemUuid_Optional); return nullptr; }
	/** @brief Sets the value of PriceItemUuid_Optional and also sets PriceItemUuid_IsSet to true */
	FORCEINLINE void SetPriceItemUuid(const FGuid& NewValue) { PriceItemUuid_Optional = NewValue; PriceItemUuid_IsSet = true; PriceItemUuid_IsNull = false; }
	/** @brief Sets the value of PriceItemUuid_Optional and also sets PriceItemUuid_IsSet to true using move semantics */
	FORCEINLINE void SetPriceItemUuid(FGuid&& NewValue) { PriceItemUuid_Optional = NewValue; PriceItemUuid_IsSet = true; PriceItemUuid_IsNull = false; }
	/** @brief Clears the value of PriceItemUuid_Optional and sets PriceItemUuid_IsSet to false */
	void ClearPriceItemUuid() { PriceItemUuid_IsSet = false; PriceItemUuid_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetPriceItemUuidToNull() { PriceItemUuid_IsSet = true; PriceItemUuid_IsNull = true; }
	/** @brief Checks whether PriceItemUuid_Optional is set to null */
	FORCEINLINE bool IsPriceItemUuidNull() const { return PriceItemUuid_IsSet && PriceItemUuid_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 PriceItemId_Optional{ 0 };
	/** @brief true if PriceItemId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool PriceItemId_IsSet{ false };
	/** @brief true if PriceItemId_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool PriceItemId_IsNull{ false };
	/** @brief Gets the value of PriceItemId_Optional, regardless of it having been set */
	FORCEINLINE int32& GetPriceItemId() { return PriceItemId_Optional; }
	/** @brief Gets the value of PriceItemId_Optional, regardless of it having been set */
	FORCEINLINE const int32& GetPriceItemId() const { return PriceItemId_Optional; }
	/** @brief Gets the value of PriceItemId_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const int32& GetPriceItemId(const int32& DefaultValue) const { if (PriceItemId_IsSet) return PriceItemId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of PriceItemId_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetPriceItemId(int32& OutValue) const { if (PriceItemId_IsSet && !PriceItemId_IsNull) OutValue = PriceItemId_Optional; return PriceItemId_IsSet; }
	/** @brief Returns a pointer to PriceItemId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE int32* GetPriceItemIdOrNull() { if (PriceItemId_IsSet) return (PriceItemId_IsNull ? nullptr : &PriceItemId_Optional); return nullptr; }
	/** @brief Returns a pointer to PriceItemId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const int32* GetPriceItemIdOrNull() const { if (PriceItemId_IsSet) return (PriceItemId_IsNull ? nullptr : &PriceItemId_Optional); return nullptr; }
	/** @brief Sets the value of PriceItemId_Optional and also sets PriceItemId_IsSet to true */
	FORCEINLINE void SetPriceItemId(const int32& NewValue) { PriceItemId_Optional = NewValue; PriceItemId_IsSet = true; PriceItemId_IsNull = false; }
	/** @brief Sets the value of PriceItemId_Optional and also sets PriceItemId_IsSet to true using move semantics */
	FORCEINLINE void SetPriceItemId(int32&& NewValue) { PriceItemId_Optional = NewValue; PriceItemId_IsSet = true; PriceItemId_IsNull = false; }
	/** @brief Clears the value of PriceItemId_Optional and sets PriceItemId_IsSet to false */
	void ClearPriceItemId() { PriceItemId_Optional = 0; PriceItemId_IsSet = false; PriceItemId_IsNull = false; }
	/** @brief Returns the default value of PriceItemId */
	FORCEINLINE int32 GetDefaultValue_PriceItemId() { return 0; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetPriceItemIdToNull() { PriceItemId_IsSet = true; PriceItemId_IsNull = true; }
	/** @brief Checks whether PriceItemId_Optional is set to null */
	FORCEINLINE bool IsPriceItemIdNull() const { return PriceItemId_IsSet && PriceItemId_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 Quantity{ 0 };
	/** @brief Gets the value of Quantity */
	FORCEINLINE int32& GetQuantity() { return Quantity; }
	/** @brief Gets the value of Quantity */
	FORCEINLINE const int32& GetQuantity() const { return Quantity; }
	/** @brief Sets the value of Quantity */
	FORCEINLINE void SetQuantity(const int32& NewValue) { Quantity = NewValue;   }
	/** @brief Sets the value of Quantity using move semantics */
	FORCEINLINE void SetQuantity(int32&& NewValue) { Quantity = NewValue;   }
	/** @brief Returns the default value of Quantity */
	FORCEINLINE int32 GetDefaultValue_Quantity() { return 0; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 Price_Optional{ 0 };
	/** @brief true if Price_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Price_IsSet{ false };
	/** @brief true if Price_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Price_IsNull{ false };
	/** @brief Gets the value of Price_Optional, regardless of it having been set */
	FORCEINLINE int32& GetPrice() { return Price_Optional; }
	/** @brief Gets the value of Price_Optional, regardless of it having been set */
	FORCEINLINE const int32& GetPrice() const { return Price_Optional; }
	/** @brief Gets the value of Price_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const int32& GetPrice(const int32& DefaultValue) const { if (Price_IsSet) return Price_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Price_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetPrice(int32& OutValue) const { if (Price_IsSet && !Price_IsNull) OutValue = Price_Optional; return Price_IsSet; }
	/** @brief Returns a pointer to Price_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE int32* GetPriceOrNull() { if (Price_IsSet) return (Price_IsNull ? nullptr : &Price_Optional); return nullptr; }
	/** @brief Returns a pointer to Price_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const int32* GetPriceOrNull() const { if (Price_IsSet) return (Price_IsNull ? nullptr : &Price_Optional); return nullptr; }
	/** @brief Sets the value of Price_Optional and also sets Price_IsSet to true */
	FORCEINLINE void SetPrice(const int32& NewValue) { Price_Optional = NewValue; Price_IsSet = true; Price_IsNull = false; }
	/** @brief Sets the value of Price_Optional and also sets Price_IsSet to true using move semantics */
	FORCEINLINE void SetPrice(int32&& NewValue) { Price_Optional = NewValue; Price_IsSet = true; Price_IsNull = false; }
	/** @brief Clears the value of Price_Optional and sets Price_IsSet to false */
	void ClearPrice() { Price_Optional = 0; Price_IsSet = false; Price_IsNull = false; }
	/** @brief Returns the default value of Price */
	FORCEINLINE int32 GetDefaultValue_Price() { return 0; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetPriceToNull() { Price_IsSet = true; Price_IsNull = true; }
	/** @brief Checks whether Price_Optional is set to null */
	FORCEINLINE bool IsPriceNull() const { return Price_IsSet && Price_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TArray<FRHAPI_PriceBreakPointCurrency> Currencies_Optional{  };
	/** @brief true if Currencies_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Currencies_IsSet{ false };
	/** @brief true if Currencies_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Currencies_IsNull{ false };
	/** @brief Gets the value of Currencies_Optional, regardless of it having been set */
	FORCEINLINE TArray<FRHAPI_PriceBreakPointCurrency>& GetCurrencies() { return Currencies_Optional; }
	/** @brief Gets the value of Currencies_Optional, regardless of it having been set */
	FORCEINLINE const TArray<FRHAPI_PriceBreakPointCurrency>& GetCurrencies() const { return Currencies_Optional; }
	/** @brief Gets the value of Currencies_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const TArray<FRHAPI_PriceBreakPointCurrency>& GetCurrencies(const TArray<FRHAPI_PriceBreakPointCurrency>& DefaultValue) const { if (Currencies_IsSet) return Currencies_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Currencies_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetCurrencies(TArray<FRHAPI_PriceBreakPointCurrency>& OutValue) const { if (Currencies_IsSet && !Currencies_IsNull) OutValue = Currencies_Optional; return Currencies_IsSet; }
	/** @brief Returns a pointer to Currencies_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE TArray<FRHAPI_PriceBreakPointCurrency>* GetCurrenciesOrNull() { if (Currencies_IsSet) return (Currencies_IsNull ? nullptr : &Currencies_Optional); return nullptr; }
	/** @brief Returns a pointer to Currencies_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const TArray<FRHAPI_PriceBreakPointCurrency>* GetCurrenciesOrNull() const { if (Currencies_IsSet) return (Currencies_IsNull ? nullptr : &Currencies_Optional); return nullptr; }
	/** @brief Sets the value of Currencies_Optional and also sets Currencies_IsSet to true */
	FORCEINLINE void SetCurrencies(const TArray<FRHAPI_PriceBreakPointCurrency>& NewValue) { Currencies_Optional = NewValue; Currencies_IsSet = true; Currencies_IsNull = false; }
	/** @brief Sets the value of Currencies_Optional and also sets Currencies_IsSet to true using move semantics */
	FORCEINLINE void SetCurrencies(TArray<FRHAPI_PriceBreakPointCurrency>&& NewValue) { Currencies_Optional = NewValue; Currencies_IsSet = true; Currencies_IsNull = false; }
	/** @brief Clears the value of Currencies_Optional and sets Currencies_IsSet to false */
	void ClearCurrencies() { Currencies_IsSet = false; Currencies_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetCurrenciesToNull() { Currencies_IsSet = true; Currencies_IsNull = true; }
	/** @brief Checks whether Currencies_Optional is set to null */
	FORCEINLINE bool IsCurrenciesNull() const { return Currencies_IsSet && Currencies_IsNull; }
};

/** @} */
