// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereAPIBaseModel.h"
#include "HttpModule.h"
#include "Stats/Stats2.h"
#include "Async/TaskGraphInterfaces.h"
#include "Tickable.h"

DECLARE_STATS_GROUP(TEXT("RallyHereAPI"), STATGROUP_RallyHereAPI, STATCAT_Advanced);

namespace RallyHereAPI
{

class FRallyHereAPIHttpRequester;

struct FRallyHereAPIHttpRequestData
{
public:
	FRallyHereAPIHttpRequestData(const FHttpRequestRef& InHttpRequest, TSharedRef<FAPI> InAPI, int32 InPriority) :
	  HttpRequest(InHttpRequest),
	  API(InAPI),
	  Priority(InPriority)
	{
	}

	void SetMetadata(const FRequestMetadata& InMetadata)
	{
		Metadata = InMetadata;
	}

	void SetDelegate(const FHttpRequestCompleteDelegate& InDelegate)
	{
		ResponseDelegate = InDelegate;
	}

	FHttpRequestRef HttpRequest;
	FRequestMetadata Metadata;
	TSharedRef<FAPI> API;
	int32 Priority;
	FHttpRequestCompleteDelegate ResponseDelegate;
};

typedef TMap<int32, TArray<TSharedPtr<struct FRallyHereAPIHttpRequestData>, TInlineAllocator<10>>> HttpRequestMap;

class RALLYHEREAPI_API FRallyHereAPIHttpRequester : public TSharedFromThis<FRallyHereAPIHttpRequester>, public FTickableGameObject
{
public:
	FRallyHereAPIHttpRequester();
	virtual ~FRallyHereAPIHttpRequester() = default;

	static void Initialize()
	{
		if (!Singleton.IsValid())
		{
			Singleton = MakeShared<FRallyHereAPIHttpRequester>();
		}
	}

	static void Uninitialize()
	{
		if (Singleton.IsValid())
		{
			Singleton->FlushRequestQueue(true);
			Singleton.Reset();
		}
	}

	static FRallyHereAPIHttpRequester* Get()
	{
		return Singleton.Get();
	}

	static TSharedPtr<FRallyHereAPIHttpRequester> GetShared()
	{
		return Singleton;
	}

	void SetMaxSimultaneousRequests(int32 InNum) { MaxSimultaneousRequests = InNum; }

	void EnqueueHttpRequest(TSharedPtr<struct FRallyHereAPIHttpRequestData> RequestData);

	void OnResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FHttpRequestCompleteDelegate ResponseDelegate);

	// Immediately flushes all requests in the queue (useful in cases where the http system may be shutting down soon).  Only safe on the main game thread.
	void FlushRequestQueue(bool bIsExiting = false);

	// FTickableGameObject interface
	/** @brief Scan request queue to determine if any need to be kicked off. */
	virtual void Tick(float DeltaTime);
	/** @brief Poll controller is always tickable. */
	virtual bool IsTickable() const { return HttpRequestQueue.Num() > 0; }
	/** Gets the poll controller stat Id. */
	virtual TStatId GetStatId() const { RETURN_QUICK_DECLARE_CYCLE_STAT(FRallyHereAPIHttpRequester, STATGROUP_TaskGraphTasks); }

private:
	void TryExecuteNextRequest(bool bIsExiting = false);
	bool CanExecuteRequest() const { return HttpRequestQueue.Num() > 0 && (MaxSimultaneousRequests == 0 || InFlightRequestCount < MaxSimultaneousRequests); }

	static TSharedPtr<FRallyHereAPIHttpRequester> Singleton;

	HttpRequestMap HttpRequestQueue;

	int32 MaxSimultaneousRequests;
	int32 InFlightRequestCount;

	FCriticalSection RequestQueueLockCS;
};

}
