// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "ReportReason.h"
#include "PlayerReportCreate.generated.h"

/** @defgroup RHAPI_PlayerReportCreate RallyHere API Model PlayerReportCreate
 *  @{
 */

/**
 * @brief 
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_PlayerReportCreate : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FGuid SourcePlayerUuid_Optional{  };
	/** @brief true if SourcePlayerUuid_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool SourcePlayerUuid_IsSet{ false };
	/** @brief Gets the value of SourcePlayerUuid_Optional, regardless of it having been set */
	FGuid& GetSourcePlayerUuid() { return SourcePlayerUuid_Optional; }
	/** @brief Gets the value of SourcePlayerUuid_Optional, regardless of it having been set */
	const FGuid& GetSourcePlayerUuid() const { return SourcePlayerUuid_Optional; }
	/** @brief Gets the value of SourcePlayerUuid_Optional, if it has been set, otherwise it returns DefaultValue */
	const FGuid& GetSourcePlayerUuid(const FGuid& DefaultValue) const { if (SourcePlayerUuid_IsSet) return SourcePlayerUuid_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of SourcePlayerUuid_Optional and returns true if it has been set, otherwise returns false */
	bool GetSourcePlayerUuid(FGuid& OutValue) const { if (SourcePlayerUuid_IsSet) OutValue = SourcePlayerUuid_Optional; return SourcePlayerUuid_IsSet; }
	/** @brief Returns a pointer to SourcePlayerUuid_Optional, if it has been set, otherwise returns nullptr */
	FGuid* GetSourcePlayerUuidOrNull() { if (SourcePlayerUuid_IsSet) return &SourcePlayerUuid_Optional; return nullptr; }
	/** @brief Returns a pointer to SourcePlayerUuid_Optional, if it has been set, otherwise returns nullptr */
	const FGuid* GetSourcePlayerUuidOrNull() const { if (SourcePlayerUuid_IsSet) return &SourcePlayerUuid_Optional; return nullptr; }
	/** @brief Sets the value of SourcePlayerUuid_Optional and also sets SourcePlayerUuid_IsSet to true */
	void SetSourcePlayerUuid(FGuid NewValue) { SourcePlayerUuid_Optional = NewValue; SourcePlayerUuid_IsSet = true; }
	 /** @brief Clears the value of SourcePlayerUuid_Optional and sets SourcePlayerUuid_IsSet to false */
	void ClearSourcePlayerUuid() { SourcePlayerUuid_IsSet = false; }

	/** @brief The reason for the report */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	ERHAPI_ReportReason Reason{  };
	/** @brief Gets the value of Reason */
	ERHAPI_ReportReason& GetReason() { return Reason; }
	/** @brief Gets the value of Reason */
	const ERHAPI_ReportReason& GetReason() const { return Reason; }
	/** @brief Sets the value of Reason */
	void SetReason(ERHAPI_ReportReason NewValue) { Reason = NewValue;  }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString Description_Optional{  };
	/** @brief true if Description_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Description_IsSet{ false };
	/** @brief Gets the value of Description_Optional, regardless of it having been set */
	FString& GetDescription() { return Description_Optional; }
	/** @brief Gets the value of Description_Optional, regardless of it having been set */
	const FString& GetDescription() const { return Description_Optional; }
	/** @brief Gets the value of Description_Optional, if it has been set, otherwise it returns DefaultValue */
	const FString& GetDescription(const FString& DefaultValue) const { if (Description_IsSet) return Description_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Description_Optional and returns true if it has been set, otherwise returns false */
	bool GetDescription(FString& OutValue) const { if (Description_IsSet) OutValue = Description_Optional; return Description_IsSet; }
	/** @brief Returns a pointer to Description_Optional, if it has been set, otherwise returns nullptr */
	FString* GetDescriptionOrNull() { if (Description_IsSet) return &Description_Optional; return nullptr; }
	/** @brief Returns a pointer to Description_Optional, if it has been set, otherwise returns nullptr */
	const FString* GetDescriptionOrNull() const { if (Description_IsSet) return &Description_Optional; return nullptr; }
	/** @brief Sets the value of Description_Optional and also sets Description_IsSet to true */
	void SetDescription(FString NewValue) { Description_Optional = NewValue; Description_IsSet = true; }
	 /** @brief Clears the value of Description_Optional and sets Description_IsSet to false */
	void ClearDescription() { Description_IsSet = false; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString SessionId_Optional{  };
	/** @brief true if SessionId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool SessionId_IsSet{ false };
	/** @brief Gets the value of SessionId_Optional, regardless of it having been set */
	FString& GetSessionId() { return SessionId_Optional; }
	/** @brief Gets the value of SessionId_Optional, regardless of it having been set */
	const FString& GetSessionId() const { return SessionId_Optional; }
	/** @brief Gets the value of SessionId_Optional, if it has been set, otherwise it returns DefaultValue */
	const FString& GetSessionId(const FString& DefaultValue) const { if (SessionId_IsSet) return SessionId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of SessionId_Optional and returns true if it has been set, otherwise returns false */
	bool GetSessionId(FString& OutValue) const { if (SessionId_IsSet) OutValue = SessionId_Optional; return SessionId_IsSet; }
	/** @brief Returns a pointer to SessionId_Optional, if it has been set, otherwise returns nullptr */
	FString* GetSessionIdOrNull() { if (SessionId_IsSet) return &SessionId_Optional; return nullptr; }
	/** @brief Returns a pointer to SessionId_Optional, if it has been set, otherwise returns nullptr */
	const FString* GetSessionIdOrNull() const { if (SessionId_IsSet) return &SessionId_Optional; return nullptr; }
	/** @brief Sets the value of SessionId_Optional and also sets SessionId_IsSet to true */
	void SetSessionId(FString NewValue) { SessionId_Optional = NewValue; SessionId_IsSet = true; }
	 /** @brief Clears the value of SessionId_Optional and sets SessionId_IsSet to false */
	void ClearSessionId() { SessionId_IsSet = false; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString InstanceId_Optional{  };
	/** @brief true if InstanceId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool InstanceId_IsSet{ false };
	/** @brief Gets the value of InstanceId_Optional, regardless of it having been set */
	FString& GetInstanceId() { return InstanceId_Optional; }
	/** @brief Gets the value of InstanceId_Optional, regardless of it having been set */
	const FString& GetInstanceId() const { return InstanceId_Optional; }
	/** @brief Gets the value of InstanceId_Optional, if it has been set, otherwise it returns DefaultValue */
	const FString& GetInstanceId(const FString& DefaultValue) const { if (InstanceId_IsSet) return InstanceId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of InstanceId_Optional and returns true if it has been set, otherwise returns false */
	bool GetInstanceId(FString& OutValue) const { if (InstanceId_IsSet) OutValue = InstanceId_Optional; return InstanceId_IsSet; }
	/** @brief Returns a pointer to InstanceId_Optional, if it has been set, otherwise returns nullptr */
	FString* GetInstanceIdOrNull() { if (InstanceId_IsSet) return &InstanceId_Optional; return nullptr; }
	/** @brief Returns a pointer to InstanceId_Optional, if it has been set, otherwise returns nullptr */
	const FString* GetInstanceIdOrNull() const { if (InstanceId_IsSet) return &InstanceId_Optional; return nullptr; }
	/** @brief Sets the value of InstanceId_Optional and also sets InstanceId_IsSet to true */
	void SetInstanceId(FString NewValue) { InstanceId_Optional = NewValue; InstanceId_IsSet = true; }
	 /** @brief Clears the value of InstanceId_Optional and sets InstanceId_IsSet to false */
	void ClearInstanceId() { InstanceId_IsSet = false; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString MatchId_Optional{  };
	/** @brief true if MatchId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool MatchId_IsSet{ false };
	/** @brief Gets the value of MatchId_Optional, regardless of it having been set */
	FString& GetMatchId() { return MatchId_Optional; }
	/** @brief Gets the value of MatchId_Optional, regardless of it having been set */
	const FString& GetMatchId() const { return MatchId_Optional; }
	/** @brief Gets the value of MatchId_Optional, if it has been set, otherwise it returns DefaultValue */
	const FString& GetMatchId(const FString& DefaultValue) const { if (MatchId_IsSet) return MatchId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of MatchId_Optional and returns true if it has been set, otherwise returns false */
	bool GetMatchId(FString& OutValue) const { if (MatchId_IsSet) OutValue = MatchId_Optional; return MatchId_IsSet; }
	/** @brief Returns a pointer to MatchId_Optional, if it has been set, otherwise returns nullptr */
	FString* GetMatchIdOrNull() { if (MatchId_IsSet) return &MatchId_Optional; return nullptr; }
	/** @brief Returns a pointer to MatchId_Optional, if it has been set, otherwise returns nullptr */
	const FString* GetMatchIdOrNull() const { if (MatchId_IsSet) return &MatchId_Optional; return nullptr; }
	/** @brief Sets the value of MatchId_Optional and also sets MatchId_IsSet to true */
	void SetMatchId(FString NewValue) { MatchId_Optional = NewValue; MatchId_IsSet = true; }
	 /** @brief Clears the value of MatchId_Optional and sets MatchId_IsSet to false */
	void ClearMatchId() { MatchId_IsSet = false; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString MatchSegment_Optional{  };
	/** @brief true if MatchSegment_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool MatchSegment_IsSet{ false };
	/** @brief Gets the value of MatchSegment_Optional, regardless of it having been set */
	FString& GetMatchSegment() { return MatchSegment_Optional; }
	/** @brief Gets the value of MatchSegment_Optional, regardless of it having been set */
	const FString& GetMatchSegment() const { return MatchSegment_Optional; }
	/** @brief Gets the value of MatchSegment_Optional, if it has been set, otherwise it returns DefaultValue */
	const FString& GetMatchSegment(const FString& DefaultValue) const { if (MatchSegment_IsSet) return MatchSegment_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of MatchSegment_Optional and returns true if it has been set, otherwise returns false */
	bool GetMatchSegment(FString& OutValue) const { if (MatchSegment_IsSet) OutValue = MatchSegment_Optional; return MatchSegment_IsSet; }
	/** @brief Returns a pointer to MatchSegment_Optional, if it has been set, otherwise returns nullptr */
	FString* GetMatchSegmentOrNull() { if (MatchSegment_IsSet) return &MatchSegment_Optional; return nullptr; }
	/** @brief Returns a pointer to MatchSegment_Optional, if it has been set, otherwise returns nullptr */
	const FString* GetMatchSegmentOrNull() const { if (MatchSegment_IsSet) return &MatchSegment_Optional; return nullptr; }
	/** @brief Sets the value of MatchSegment_Optional and also sets MatchSegment_IsSet to true */
	void SetMatchSegment(FString NewValue) { MatchSegment_Optional = NewValue; MatchSegment_IsSet = true; }
	 /** @brief Clears the value of MatchSegment_Optional and sets MatchSegment_IsSet to false */
	void ClearMatchSegment() { MatchSegment_IsSet = false; }

	/** @brief Custom data for the report */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TMap<FString, FString> CustomData_Optional{  };
	/** @brief true if CustomData_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool CustomData_IsSet{ false };
	/** @brief Gets the value of CustomData_Optional, regardless of it having been set */
	TMap<FString, FString>& GetCustomData() { return CustomData_Optional; }
	/** @brief Gets the value of CustomData_Optional, regardless of it having been set */
	const TMap<FString, FString>& GetCustomData() const { return CustomData_Optional; }
	/** @brief Gets the value of CustomData_Optional, if it has been set, otherwise it returns DefaultValue */
	const TMap<FString, FString>& GetCustomData(const TMap<FString, FString>& DefaultValue) const { if (CustomData_IsSet) return CustomData_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of CustomData_Optional and returns true if it has been set, otherwise returns false */
	bool GetCustomData(TMap<FString, FString>& OutValue) const { if (CustomData_IsSet) OutValue = CustomData_Optional; return CustomData_IsSet; }
	/** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
	TMap<FString, FString>* GetCustomDataOrNull() { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
	/** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
	const TMap<FString, FString>* GetCustomDataOrNull() const { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
	/** @brief Sets the value of CustomData_Optional and also sets CustomData_IsSet to true */
	void SetCustomData(TMap<FString, FString> NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true; }
	 /** @brief Clears the value of CustomData_Optional and sets CustomData_IsSet to false */
	void ClearCustomData() { CustomData_IsSet = false; }
};

/** @} */
