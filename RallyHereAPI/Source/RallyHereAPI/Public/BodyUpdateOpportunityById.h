// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "OpportunityAbortReason.h"
#include "OpportunityState.h"
#include "BodyUpdateOpportunityById.generated.h"

/** @defgroup RHAPI_BodyUpdateOpportunityById RallyHere API Model BodyUpdateOpportunityById
 *  @{
 */

/**
 * @brief
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_BodyUpdateOpportunityById : public FRHAPI_Model
{
    GENERATED_BODY()

    /**
    * @brief Fills this object with data from the passed in JSON
    *
    * @param [in] JsonValue Data from the API call.
    *
    * @return true if parsing of the JSON data was successful.
    */
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

    /**
    * @brief Writes the data from this object into the specified JSON Writer stream
    *
    * @param [in] Writer JSON Writer stream to push .
    */
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /** @brief State of the opportunity */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    ERHAPI_OpportunityState State{  };
    /** @brief Gets the value of State */
    ERHAPI_OpportunityState& GetState() { return State; }
    /** @brief Gets the value of State */
    const ERHAPI_OpportunityState& GetState() const { return State; }
    /** @brief Sets the value of State */
    void SetState(ERHAPI_OpportunityState NewValue) { State = NewValue;  }

    /** @brief Reason for aborting the opportunity */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    ERHAPI_OpportunityAbortReason AbortReason_Optional{  };
    /** @brief true if AbortReason_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool AbortReason_IsSet{ false };
    /** @brief Gets the value of AbortReason_Optional, regardless of it having been set */
    ERHAPI_OpportunityAbortReason& GetAbortReason() { return AbortReason_Optional; }
    /** @brief Gets the value of AbortReason_Optional, regardless of it having been set */
    const ERHAPI_OpportunityAbortReason& GetAbortReason() const { return AbortReason_Optional; }
    /** @brief Gets the value of AbortReason_Optional, if it has been set, otherwise it returns DefaultValue */
    const ERHAPI_OpportunityAbortReason& GetAbortReason(const ERHAPI_OpportunityAbortReason& DefaultValue) const { if (AbortReason_IsSet) return AbortReason_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of AbortReason_Optional and returns true if it has been set, otherwise returns false */
    bool GetAbortReason(ERHAPI_OpportunityAbortReason& OutValue) const { if (AbortReason_IsSet) OutValue = AbortReason_Optional; return AbortReason_IsSet; }
    /** @brief Returns a pointer to AbortReason_Optional, if it has been set, otherwise returns nullptr */
    ERHAPI_OpportunityAbortReason* GetAbortReasonOrNull() { if (AbortReason_IsSet) return &AbortReason_Optional; return nullptr; }
    /** @brief Returns a pointer to AbortReason_Optional, if it has been set, otherwise returns nullptr */
    const ERHAPI_OpportunityAbortReason* GetAbortReasonOrNull() const { if (AbortReason_IsSet) return &AbortReason_Optional; return nullptr; }
    /** @brief Sets the value of AbortReason_Optional and also sets AbortReason_IsSet to true */
    void SetAbortReason(ERHAPI_OpportunityAbortReason NewValue) { AbortReason_Optional = NewValue; AbortReason_IsSet = true; }
     /** @brief Clears the value of AbortReason_Optional and sets AbortReason_IsSet to false */
    void ClearAbortReason() { AbortReason_IsSet = false; }

    /** @brief Number of seconds into the video when the abort happened */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 AbortSeconds_Optional{  };
    /** @brief true if AbortSeconds_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool AbortSeconds_IsSet{ false };
    /** @brief Gets the value of AbortSeconds_Optional, regardless of it having been set */
    int32& GetAbortSeconds() { return AbortSeconds_Optional; }
    /** @brief Gets the value of AbortSeconds_Optional, regardless of it having been set */
    const int32& GetAbortSeconds() const { return AbortSeconds_Optional; }
    /** @brief Gets the value of AbortSeconds_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetAbortSeconds(const int32& DefaultValue) const { if (AbortSeconds_IsSet) return AbortSeconds_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of AbortSeconds_Optional and returns true if it has been set, otherwise returns false */
    bool GetAbortSeconds(int32& OutValue) const { if (AbortSeconds_IsSet) OutValue = AbortSeconds_Optional; return AbortSeconds_IsSet; }
    /** @brief Returns a pointer to AbortSeconds_Optional, if it has been set, otherwise returns nullptr */
    int32* GetAbortSecondsOrNull() { if (AbortSeconds_IsSet) return &AbortSeconds_Optional; return nullptr; }
    /** @brief Returns a pointer to AbortSeconds_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetAbortSecondsOrNull() const { if (AbortSeconds_IsSet) return &AbortSeconds_Optional; return nullptr; }
    /** @brief Sets the value of AbortSeconds_Optional and also sets AbortSeconds_IsSet to true */
    void SetAbortSeconds(int32 NewValue) { AbortSeconds_Optional = NewValue; AbortSeconds_IsSet = true; }
     /** @brief Clears the value of AbortSeconds_Optional and sets AbortSeconds_IsSet to false */
    void ClearAbortSeconds() { AbortSeconds_Optional = 0; AbortSeconds_IsSet = false; }
    /** @brief Returns true if AbortSeconds_Optional is set and matches the default value */
    bool IsAbortSecondsDefaultValue() const { return AbortSeconds_IsSet && AbortSeconds_Optional == 0; }
    /** @brief Sets the value of AbortSeconds_Optional to its default and also sets AbortSeconds_IsSet to true */
    void SetAbortSecondsToDefault() { AbortSeconds_Optional = 0; AbortSeconds_IsSet = true; }
};

/** @} */
