// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereAPIAuthContext.h"
#include "RallyHereAPIHelpers.h"
#include "VivoxSessionActionSingle.h"
#include "VoipSessionType.h"
#include "HTTPValidationError.h"
#include "HzApiErrorModel.h"
#include "VoipTokenResponse.h"

namespace RallyHereAPI
{
using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

struct FRequest_GetVoipActionToken;
struct FResponse_GetVoipActionToken;
struct FRequest_GetVoipActionTokenMe;
struct FResponse_GetVoipActionTokenMe;
struct FRequest_GetVoipLoginToken;
struct FResponse_GetVoipLoginToken;

DECLARE_DELEGATE_OneParam(FDelegate_GetVoipActionToken, const FResponse_GetVoipActionToken&);
DECLARE_DELEGATE_OneParam(FDelegate_GetVoipActionTokenMe, const FResponse_GetVoipActionTokenMe&);
DECLARE_DELEGATE_OneParam(FDelegate_GetVoipLoginToken, const FResponse_GetVoipLoginToken&);

class RALLYHEREAPI_API FVOIPAPI : public FAPI
{
public:
	FVOIPAPI();
	virtual ~FVOIPAPI();

	FHttpRequestPtr GetVoipActionToken(const FRequest_GetVoipActionToken& Request, const FDelegate_GetVoipActionToken& Delegate = FDelegate_GetVoipActionToken(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetVoipActionTokenMe(const FRequest_GetVoipActionTokenMe& Request, const FDelegate_GetVoipActionTokenMe& Delegate = FDelegate_GetVoipActionTokenMe(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetVoipLoginToken(const FRequest_GetVoipLoginToken& Request, const FDelegate_GetVoipLoginToken& Delegate = FDelegate_GetVoipLoginToken(), int32 Priority = DefaultRallyHereAPIPriority);

private:
	void OnGetVoipActionTokenResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetVoipActionToken Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetVoipActionTokenMeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetVoipActionTokenMe Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetVoipLoginTokenResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetVoipLoginToken Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};

/* Get Voip Action Token
 *
 * Generate a token for one of the specific vivox actions except logging in
 * 
 * `JOIN` Required Permissions:
 * 
 * - For the player themselves : `session:vivox:join`
 * 
 * `JOIN_MUTED` Required Permissions:
 * 
 * - For the player themselves : `session:vivox:join_muted`
 * 
 * `KICK` Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:vivox:kick:all`
 * 
 * - For the player themselves : `session:vivox:kick:self`
 * 
 * or be leader of session and have Required Permissions:
 * 
 * - For any player (including themselves) : `session:vivox:kick:as-leader`
 * 
 * 
 * 
 * `MUTE` Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:vivox:mute:all`
 * 
 * - For the player themselves : `session:vivox:mute:self`
 * 
 * or be leader of session and have Required Permissions:
 * 
 * - For any player (including themselves) : `session:vivox:mute:as-leader`
 * 
 * 
 * 
 * `TRANSCRIBE` Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:vivox:transcribe:any`
 * 
 * - For the player themselves : `session:vivox:transcribe:as-member`
*/
struct RALLYHEREAPI_API FRequest_GetVoipActionToken : public FRequest
{
	FRequest_GetVoipActionToken();
	virtual ~FRequest_GetVoipActionToken() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	FName GetSimplifiedPathWithVerb() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
	FGuid PlayerUuid;
	ERHAPI_VivoxSessionActionSingle VivoxAction;
	FString SessionId;
	ERHAPI_VoipSessionType VoipSessionType;
	TOptional<bool> RefreshTtl;
};

struct RALLYHEREAPI_API FResponse_GetVoipActionToken : public FResponse
{
	FResponse_GetVoipActionToken(FRequestMetadata InRequestMetadata);
	virtual ~FResponse_GetVoipActionToken() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

	FRHAPI_VoipTokenResponse Content;


	// Manual Response Helpers
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_VoipTokenResponse& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_GetVoipActionToken
{
	typedef FRequest_GetVoipActionToken Request;
	typedef FResponse_GetVoipActionToken Response;
	typedef FDelegate_GetVoipActionToken Delegate;
	typedef FVOIPAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI->GetVoipActionToken(InRequest, InDelegate, Priority); }
};

/* Get Voip Action Token Me
 *
 * Generate a token for one of the specific vivox actions except logging in
 * 
 * `JOIN` Required Permissions:
 * 
 * - For the player themselves : `session:vivox:join`
 * 
 * `JOIN_MUTED` Required Permissions:
 * 
 * - For the player themselves : `session:vivox:join_muted`
 * 
 * `KICK` Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:vivox:kick:all`
 * 
 * - For the player themselves : `session:vivox:kick:self`
 * 
 * or be leader of session and have Required Permissions:
 * 
 * - For any player (including themselves) : `session:vivox:kick:as-leader`
 * 
 * 
 * 
 * `MUTE` Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:vivox:mute:all`
 * 
 * - For the player themselves : `session:vivox:mute:self`
 * 
 * or be leader of session and have Required Permissions:
 * 
 * - For any player (including themselves) : `session:vivox:kick:as-leader`
 * 
 * 
 * 
 * `TRANSCRIBE` Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:vivox:transcribe:any`
 * 
 * - For the player themselves : `session:vivox:transcribe:as-member`
*/
struct RALLYHEREAPI_API FRequest_GetVoipActionTokenMe : public FRequest
{
	FRequest_GetVoipActionTokenMe();
	virtual ~FRequest_GetVoipActionTokenMe() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	FName GetSimplifiedPathWithVerb() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
	ERHAPI_VivoxSessionActionSingle VivoxAction;
	FString SessionId;
	ERHAPI_VoipSessionType VoipSessionType;
	TOptional<bool> RefreshTtl;
};

struct RALLYHEREAPI_API FResponse_GetVoipActionTokenMe : public FResponse
{
	FResponse_GetVoipActionTokenMe(FRequestMetadata InRequestMetadata);
	virtual ~FResponse_GetVoipActionTokenMe() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

	FRHAPI_VoipTokenResponse Content;


	// Manual Response Helpers
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_VoipTokenResponse& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_GetVoipActionTokenMe
{
	typedef FRequest_GetVoipActionTokenMe Request;
	typedef FResponse_GetVoipActionTokenMe Response;
	typedef FDelegate_GetVoipActionTokenMe Delegate;
	typedef FVOIPAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI->GetVoipActionTokenMe(InRequest, InDelegate, Priority); }
};

/* Get Voip Login Token
 *
 * Generate a token to login with vivox
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:vivox:login`
*/
struct RALLYHEREAPI_API FRequest_GetVoipLoginToken : public FRequest
{
	FRequest_GetVoipLoginToken();
	virtual ~FRequest_GetVoipLoginToken() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	FName GetSimplifiedPathWithVerb() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
};

struct RALLYHEREAPI_API FResponse_GetVoipLoginToken : public FResponse
{
	FResponse_GetVoipLoginToken(FRequestMetadata InRequestMetadata);
	virtual ~FResponse_GetVoipLoginToken() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

	FRHAPI_VoipTokenResponse Content;


	// Manual Response Helpers
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_VoipTokenResponse& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

};

struct RALLYHEREAPI_API Traits_GetVoipLoginToken
{
	typedef FRequest_GetVoipLoginToken Request;
	typedef FResponse_GetVoipLoginToken Response;
	typedef FDelegate_GetVoipLoginToken Delegate;
	typedef FVOIPAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI->GetVoipLoginToken(InRequest, InDelegate, Priority); }
};


}
