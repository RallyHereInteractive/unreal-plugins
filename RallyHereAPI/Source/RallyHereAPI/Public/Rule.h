// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "Containers/Set.h"
#include "Operation.h"
#include "RuleType.h"
#include "Rule.generated.h"

/** @defgroup RHAPI_Rule RallyHere API Model Rule
 *  @{
 */

/**
 * @brief A rule to determine which MatchMakingTemplate should be used on a session entering matchmaking
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_Rule : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	/** @brief What type of rule this is */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	ERHAPI_RuleType RuleType{  };
	/** @brief Gets the value of RuleType */
	FORCEINLINE ERHAPI_RuleType& GetRuleType() { return RuleType; }
	/** @brief Gets the value of RuleType */
	FORCEINLINE const ERHAPI_RuleType& GetRuleType() const { return RuleType; }
	/** @brief Sets the value of RuleType */
	FORCEINLINE void SetRuleType(const ERHAPI_RuleType& NewValue) { RuleType = NewValue;   }
	/** @brief Sets the value of RuleType using move semantics */
	FORCEINLINE void SetRuleType(ERHAPI_RuleType&& NewValue) { RuleType = NewValue;   }

	/** @brief Comparison operation to be performed */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	ERHAPI_Operation ComparisonOperation{  };
	/** @brief Gets the value of ComparisonOperation */
	FORCEINLINE ERHAPI_Operation& GetComparisonOperation() { return ComparisonOperation; }
	/** @brief Gets the value of ComparisonOperation */
	FORCEINLINE const ERHAPI_Operation& GetComparisonOperation() const { return ComparisonOperation; }
	/** @brief Sets the value of ComparisonOperation */
	FORCEINLINE void SetComparisonOperation(const ERHAPI_Operation& NewValue) { ComparisonOperation = NewValue;   }
	/** @brief Sets the value of ComparisonOperation using move semantics */
	FORCEINLINE void SetComparisonOperation(ERHAPI_Operation&& NewValue) { ComparisonOperation = NewValue;   }

	/** @brief Integer Value to compare to */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 ComparisonValue_Optional{ 0 };
	/** @brief true if ComparisonValue_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool ComparisonValue_IsSet{ false };
	/** @brief Gets the value of ComparisonValue_Optional, regardless of it having been set */
	FORCEINLINE int32& GetComparisonValue() { return ComparisonValue_Optional; }
	/** @brief Gets the value of ComparisonValue_Optional, regardless of it having been set */
	FORCEINLINE const int32& GetComparisonValue() const { return ComparisonValue_Optional; }
	/** @brief Gets the value of ComparisonValue_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const int32& GetComparisonValue(const int32& DefaultValue) const { if (ComparisonValue_IsSet) return ComparisonValue_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of ComparisonValue_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetComparisonValue(int32& OutValue) const { if (ComparisonValue_IsSet) OutValue = ComparisonValue_Optional; return ComparisonValue_IsSet; }
	/** @brief Returns a pointer to ComparisonValue_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE int32* GetComparisonValueOrNull() { if (ComparisonValue_IsSet) return (&ComparisonValue_Optional); return nullptr; }
	/** @brief Returns a pointer to ComparisonValue_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const int32* GetComparisonValueOrNull() const { if (ComparisonValue_IsSet) return (&ComparisonValue_Optional); return nullptr; }
	/** @brief Sets the value of ComparisonValue_Optional and also sets ComparisonValue_IsSet to true */
	FORCEINLINE void SetComparisonValue(const int32& NewValue) { ComparisonValue_Optional = NewValue; ComparisonValue_IsSet = true;  }
	/** @brief Sets the value of ComparisonValue_Optional and also sets ComparisonValue_IsSet to true using move semantics */
	FORCEINLINE void SetComparisonValue(int32&& NewValue) { ComparisonValue_Optional = NewValue; ComparisonValue_IsSet = true;  }
	/** @brief Clears the value of ComparisonValue_Optional and sets ComparisonValue_IsSet to false */
	void ClearComparisonValue() { ComparisonValue_Optional = 0; ComparisonValue_IsSet = false;  }
	/** @brief Returns the default value of ComparisonValue */
	FORCEINLINE int32 GetDefaultValue_ComparisonValue() { return 0; }

	/** @brief Set of string values to compare to */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TSet<FString> ComparisonValueSet_Optional{  };
	/** @brief true if ComparisonValueSet_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool ComparisonValueSet_IsSet{ false };
	/** @brief Gets the value of ComparisonValueSet_Optional, regardless of it having been set */
	FORCEINLINE TSet<FString>& GetComparisonValueSet() { return ComparisonValueSet_Optional; }
	/** @brief Gets the value of ComparisonValueSet_Optional, regardless of it having been set */
	FORCEINLINE const TSet<FString>& GetComparisonValueSet() const { return ComparisonValueSet_Optional; }
	/** @brief Gets the value of ComparisonValueSet_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const TSet<FString>& GetComparisonValueSet(const TSet<FString>& DefaultValue) const { if (ComparisonValueSet_IsSet) return ComparisonValueSet_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of ComparisonValueSet_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetComparisonValueSet(TSet<FString>& OutValue) const { if (ComparisonValueSet_IsSet) OutValue = ComparisonValueSet_Optional; return ComparisonValueSet_IsSet; }
	/** @brief Returns a pointer to ComparisonValueSet_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE TSet<FString>* GetComparisonValueSetOrNull() { if (ComparisonValueSet_IsSet) return (&ComparisonValueSet_Optional); return nullptr; }
	/** @brief Returns a pointer to ComparisonValueSet_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const TSet<FString>* GetComparisonValueSetOrNull() const { if (ComparisonValueSet_IsSet) return (&ComparisonValueSet_Optional); return nullptr; }
	/** @brief Sets the value of ComparisonValueSet_Optional and also sets ComparisonValueSet_IsSet to true */
	FORCEINLINE void SetComparisonValueSet(const TSet<FString>& NewValue) { ComparisonValueSet_Optional = NewValue; ComparisonValueSet_IsSet = true;  }
	/** @brief Sets the value of ComparisonValueSet_Optional and also sets ComparisonValueSet_IsSet to true using move semantics */
	FORCEINLINE void SetComparisonValueSet(TSet<FString>&& NewValue) { ComparisonValueSet_Optional = NewValue; ComparisonValueSet_IsSet = true;  }
	/** @brief Clears the value of ComparisonValueSet_Optional and sets ComparisonValueSet_IsSet to false */
	void ClearComparisonValueSet() { ComparisonValueSet_IsSet = false;  }

	/** @brief Id of the item we are comparing if this is an inventory rule */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 ItemId_Optional{ 0 };
	/** @brief true if ItemId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool ItemId_IsSet{ false };
	/** @brief Gets the value of ItemId_Optional, regardless of it having been set */
	FORCEINLINE int32& GetItemId() { return ItemId_Optional; }
	/** @brief Gets the value of ItemId_Optional, regardless of it having been set */
	FORCEINLINE const int32& GetItemId() const { return ItemId_Optional; }
	/** @brief Gets the value of ItemId_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const int32& GetItemId(const int32& DefaultValue) const { if (ItemId_IsSet) return ItemId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of ItemId_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetItemId(int32& OutValue) const { if (ItemId_IsSet) OutValue = ItemId_Optional; return ItemId_IsSet; }
	/** @brief Returns a pointer to ItemId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE int32* GetItemIdOrNull() { if (ItemId_IsSet) return (&ItemId_Optional); return nullptr; }
	/** @brief Returns a pointer to ItemId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const int32* GetItemIdOrNull() const { if (ItemId_IsSet) return (&ItemId_Optional); return nullptr; }
	/** @brief Sets the value of ItemId_Optional and also sets ItemId_IsSet to true */
	FORCEINLINE void SetItemId(const int32& NewValue) { ItemId_Optional = NewValue; ItemId_IsSet = true;  }
	/** @brief Sets the value of ItemId_Optional and also sets ItemId_IsSet to true using move semantics */
	FORCEINLINE void SetItemId(int32&& NewValue) { ItemId_Optional = NewValue; ItemId_IsSet = true;  }
	/** @brief Clears the value of ItemId_Optional and sets ItemId_IsSet to false */
	void ClearItemId() { ItemId_Optional = 0; ItemId_IsSet = false;  }
	/** @brief Returns the default value of ItemId */
	FORCEINLINE int32 GetDefaultValue_ItemId() { return 0; }
};

/** @} */
