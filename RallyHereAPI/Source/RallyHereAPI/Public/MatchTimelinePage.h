// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "MatchTimelineEvent.h"
#include "MatchTimelinePage.generated.h"

/** @defgroup RHAPI_MatchTimelinePage RallyHere API Model MatchTimelinePage
 *  @{
 */

/**
 * @brief 
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_MatchTimelinePage : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	/** @brief Page of events */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TArray<FRHAPI_MatchTimelineEvent> Events_Optional{  };
	/** @brief true if Events_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Events_IsSet{ false };
	/** @brief Gets the value of Events_Optional, regardless of it having been set */
	FORCEINLINE TArray<FRHAPI_MatchTimelineEvent>& GetEvents() { return Events_Optional; }
	/** @brief Gets the value of Events_Optional, regardless of it having been set */
	FORCEINLINE const TArray<FRHAPI_MatchTimelineEvent>& GetEvents() const { return Events_Optional; }
	/** @brief Gets the value of Events_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const TArray<FRHAPI_MatchTimelineEvent>& GetEvents(const TArray<FRHAPI_MatchTimelineEvent>& DefaultValue) const { if (Events_IsSet) return Events_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Events_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetEvents(TArray<FRHAPI_MatchTimelineEvent>& OutValue) const { if (Events_IsSet) OutValue = Events_Optional; return Events_IsSet; }
	/** @brief Returns a pointer to Events_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE TArray<FRHAPI_MatchTimelineEvent>* GetEventsOrNull() { if (Events_IsSet) return (&Events_Optional); return nullptr; }
	/** @brief Returns a pointer to Events_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const TArray<FRHAPI_MatchTimelineEvent>* GetEventsOrNull() const { if (Events_IsSet) return (&Events_Optional); return nullptr; }
	/** @brief Sets the value of Events_Optional and also sets Events_IsSet to true */
	FORCEINLINE void SetEvents(const TArray<FRHAPI_MatchTimelineEvent>& NewValue) { Events_Optional = NewValue; Events_IsSet = true;  }
	/** @brief Sets the value of Events_Optional and also sets Events_IsSet to true using move semantics */
	FORCEINLINE void SetEvents(TArray<FRHAPI_MatchTimelineEvent>&& NewValue) { Events_Optional = NewValue; Events_IsSet = true;  }
	/** @brief Clears the value of Events_Optional and sets Events_IsSet to false */
	void ClearEvents() { Events_IsSet = false;  }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString Cursor_Optional{  };
	/** @brief true if Cursor_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Cursor_IsSet{ false };
	/** @brief true if Cursor_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Cursor_IsNull{ false };
	/** @brief Gets the value of Cursor_Optional, regardless of it having been set */
	FORCEINLINE FString& GetCursor() { return Cursor_Optional; }
	/** @brief Gets the value of Cursor_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetCursor() const { return Cursor_Optional; }
	/** @brief Gets the value of Cursor_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetCursor(const FString& DefaultValue) const { if (Cursor_IsSet) return Cursor_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Cursor_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetCursor(FString& OutValue) const { if (Cursor_IsSet && !Cursor_IsNull) OutValue = Cursor_Optional; return Cursor_IsSet; }
	/** @brief Returns a pointer to Cursor_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetCursorOrNull() { if (Cursor_IsSet) return (Cursor_IsNull ? nullptr : &Cursor_Optional); return nullptr; }
	/** @brief Returns a pointer to Cursor_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetCursorOrNull() const { if (Cursor_IsSet) return (Cursor_IsNull ? nullptr : &Cursor_Optional); return nullptr; }
	/** @brief Sets the value of Cursor_Optional and also sets Cursor_IsSet to true */
	FORCEINLINE void SetCursor(const FString& NewValue) { Cursor_Optional = NewValue; Cursor_IsSet = true; Cursor_IsNull = false; }
	/** @brief Sets the value of Cursor_Optional and also sets Cursor_IsSet to true using move semantics */
	FORCEINLINE void SetCursor(FString&& NewValue) { Cursor_Optional = NewValue; Cursor_IsSet = true; Cursor_IsNull = false; }
	/** @brief Clears the value of Cursor_Optional and sets Cursor_IsSet to false */
	void ClearCursor() { Cursor_IsSet = false; Cursor_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetCursorToNull() { Cursor_IsSet = true; Cursor_IsNull = true; }
	/** @brief Checks whether Cursor_Optional is set to null */
	FORCEINLINE bool IsCursorNull() const { return Cursor_IsSet && Cursor_IsNull; }
};

/** @} */
