// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "UnionCCU.generated.h"

/** @defgroup RHAPI_UnionCCU RallyHere API Model UnionCCU
 *  @{
 */

/**
 * @brief 
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_UnionCCU : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 Count{ 0 };
	/** @brief Gets the value of Count */
	int32& GetCount() { return Count; }
	/** @brief Gets the value of Count */
	const int32& GetCount() const { return Count; }
	/** @brief Sets the value of Count */
	void SetCount(const int32& NewValue) { Count = NewValue;  }
	/** @brief Sets the value of Count using move semantics */
	void SetCount(int32&& NewValue) { Count = NewValue;  }
	/** @brief Returns true if Count matches the default value */
	bool IsCountDefaultValue() const { return Count == 0; }
	/** @brief Sets the value of Count to its default  */
	void SetCountToDefault() { Count = 0;  }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TArray<FDateTime> Timestamps{  };
	/** @brief Gets the value of Timestamps */
	TArray<FDateTime>& GetTimestamps() { return Timestamps; }
	/** @brief Gets the value of Timestamps */
	const TArray<FDateTime>& GetTimestamps() const { return Timestamps; }
	/** @brief Sets the value of Timestamps */
	void SetTimestamps(const TArray<FDateTime>& NewValue) { Timestamps = NewValue;  }
	/** @brief Sets the value of Timestamps using move semantics */
	void SetTimestamps(TArray<FDateTime>&& NewValue) { Timestamps = NewValue;  }
};

/** @} */
