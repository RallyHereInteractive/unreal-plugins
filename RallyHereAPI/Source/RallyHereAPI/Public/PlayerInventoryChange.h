// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "InventoryRecord.h"
#include "PlayerInventoryChange.generated.h"

/** @defgroup RHAPI_PlayerInventoryChange RallyHere API Model PlayerInventoryChange
 *  @{
 */

/**
 * @brief Represents the change that occurred to an entry in the Player&#39;s Inventory. The before fields contain the state before the change, after fields contain the state after the change.
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_PlayerInventoryChange : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	/** @brief The Item ID of the Item before the change. */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 BeforeItemId_Optional{  };
	/** @brief true if BeforeItemId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool BeforeItemId_IsSet{ false };
	/** @brief Gets the value of BeforeItemId_Optional, regardless of it having been set */
	int32& GetBeforeItemId() { return BeforeItemId_Optional; }
	/** @brief Gets the value of BeforeItemId_Optional, regardless of it having been set */
	const int32& GetBeforeItemId() const { return BeforeItemId_Optional; }
	/** @brief Gets the value of BeforeItemId_Optional, if it has been set, otherwise it returns DefaultValue */
	const int32& GetBeforeItemId(const int32& DefaultValue) const { if (BeforeItemId_IsSet) return BeforeItemId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of BeforeItemId_Optional and returns true if it has been set, otherwise returns false */
	bool GetBeforeItemId(int32& OutValue) const { if (BeforeItemId_IsSet) OutValue = BeforeItemId_Optional; return BeforeItemId_IsSet; }
	/** @brief Returns a pointer to BeforeItemId_Optional, if it has been set, otherwise returns nullptr */
	int32* GetBeforeItemIdOrNull() { if (BeforeItemId_IsSet) return (&BeforeItemId_Optional); return nullptr; }
	/** @brief Returns a pointer to BeforeItemId_Optional, if it has been set, otherwise returns nullptr */
	const int32* GetBeforeItemIdOrNull() const { if (BeforeItemId_IsSet) return (&BeforeItemId_Optional); return nullptr; }
	/** @brief Sets the value of BeforeItemId_Optional and also sets BeforeItemId_IsSet to true */
	void SetBeforeItemId(const int32& NewValue) { BeforeItemId_Optional = NewValue; BeforeItemId_IsSet = true;  }
	/** @brief Sets the value of BeforeItemId_Optional and also sets BeforeItemId_IsSet to true using move semantics */
	void SetBeforeItemId(int32&& NewValue) { BeforeItemId_Optional = NewValue; BeforeItemId_IsSet = true;  }
	/** @brief Clears the value of BeforeItemId_Optional and sets BeforeItemId_IsSet to false */
	void ClearBeforeItemId() { BeforeItemId_Optional = 0; BeforeItemId_IsSet = false;  }
	/** @brief Checks whether BeforeItemId_Optional has been set */
	bool IsBeforeItemIdSet() const { return BeforeItemId_IsSet; }
	/** @brief Returns true if BeforeItemId_Optional is set and matches the default value */
	bool IsBeforeItemIdDefaultValue() const { return BeforeItemId_IsSet && BeforeItemId_Optional == 0; }
	/** @brief Sets the value of BeforeItemId_Optional to its default and also sets BeforeItemId_IsSet to true */
	void SetBeforeItemIdToDefault() { SetBeforeItemId(0); }

	/** @brief The Item ID of the Item after the change. */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 AfterItemId_Optional{  };
	/** @brief true if AfterItemId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool AfterItemId_IsSet{ false };
	/** @brief Gets the value of AfterItemId_Optional, regardless of it having been set */
	int32& GetAfterItemId() { return AfterItemId_Optional; }
	/** @brief Gets the value of AfterItemId_Optional, regardless of it having been set */
	const int32& GetAfterItemId() const { return AfterItemId_Optional; }
	/** @brief Gets the value of AfterItemId_Optional, if it has been set, otherwise it returns DefaultValue */
	const int32& GetAfterItemId(const int32& DefaultValue) const { if (AfterItemId_IsSet) return AfterItemId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of AfterItemId_Optional and returns true if it has been set, otherwise returns false */
	bool GetAfterItemId(int32& OutValue) const { if (AfterItemId_IsSet) OutValue = AfterItemId_Optional; return AfterItemId_IsSet; }
	/** @brief Returns a pointer to AfterItemId_Optional, if it has been set, otherwise returns nullptr */
	int32* GetAfterItemIdOrNull() { if (AfterItemId_IsSet) return (&AfterItemId_Optional); return nullptr; }
	/** @brief Returns a pointer to AfterItemId_Optional, if it has been set, otherwise returns nullptr */
	const int32* GetAfterItemIdOrNull() const { if (AfterItemId_IsSet) return (&AfterItemId_Optional); return nullptr; }
	/** @brief Sets the value of AfterItemId_Optional and also sets AfterItemId_IsSet to true */
	void SetAfterItemId(const int32& NewValue) { AfterItemId_Optional = NewValue; AfterItemId_IsSet = true;  }
	/** @brief Sets the value of AfterItemId_Optional and also sets AfterItemId_IsSet to true using move semantics */
	void SetAfterItemId(int32&& NewValue) { AfterItemId_Optional = NewValue; AfterItemId_IsSet = true;  }
	/** @brief Clears the value of AfterItemId_Optional and sets AfterItemId_IsSet to false */
	void ClearAfterItemId() { AfterItemId_Optional = 0; AfterItemId_IsSet = false;  }
	/** @brief Checks whether AfterItemId_Optional has been set */
	bool IsAfterItemIdSet() const { return AfterItemId_IsSet; }
	/** @brief Returns true if AfterItemId_Optional is set and matches the default value */
	bool IsAfterItemIdDefaultValue() const { return AfterItemId_IsSet && AfterItemId_Optional == 0; }
	/** @brief Sets the value of AfterItemId_Optional to its default and also sets AfterItemId_IsSet to true */
	void SetAfterItemIdToDefault() { SetAfterItemId(0); }

	/** @brief The Inventory Record before the change. */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_InventoryRecord Before_Optional{  };
	/** @brief true if Before_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Before_IsSet{ false };
	/** @brief Gets the value of Before_Optional, regardless of it having been set */
	FRHAPI_InventoryRecord& GetBefore() { return Before_Optional; }
	/** @brief Gets the value of Before_Optional, regardless of it having been set */
	const FRHAPI_InventoryRecord& GetBefore() const { return Before_Optional; }
	/** @brief Gets the value of Before_Optional, if it has been set, otherwise it returns DefaultValue */
	const FRHAPI_InventoryRecord& GetBefore(const FRHAPI_InventoryRecord& DefaultValue) const { if (Before_IsSet) return Before_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Before_Optional and returns true if it has been set, otherwise returns false */
	bool GetBefore(FRHAPI_InventoryRecord& OutValue) const { if (Before_IsSet) OutValue = Before_Optional; return Before_IsSet; }
	/** @brief Returns a pointer to Before_Optional, if it has been set, otherwise returns nullptr */
	FRHAPI_InventoryRecord* GetBeforeOrNull() { if (Before_IsSet) return (&Before_Optional); return nullptr; }
	/** @brief Returns a pointer to Before_Optional, if it has been set, otherwise returns nullptr */
	const FRHAPI_InventoryRecord* GetBeforeOrNull() const { if (Before_IsSet) return (&Before_Optional); return nullptr; }
	/** @brief Sets the value of Before_Optional and also sets Before_IsSet to true */
	void SetBefore(const FRHAPI_InventoryRecord& NewValue) { Before_Optional = NewValue; Before_IsSet = true;  }
	/** @brief Sets the value of Before_Optional and also sets Before_IsSet to true using move semantics */
	void SetBefore(FRHAPI_InventoryRecord&& NewValue) { Before_Optional = NewValue; Before_IsSet = true;  }
	/** @brief Clears the value of Before_Optional and sets Before_IsSet to false */
	void ClearBefore() { Before_IsSet = false;  }
	/** @brief Checks whether Before_Optional has been set */
	bool IsBeforeSet() const { return Before_IsSet; }

	/** @brief The Inventory Record after the change. */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_InventoryRecord After_Optional{  };
	/** @brief true if After_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool After_IsSet{ false };
	/** @brief Gets the value of After_Optional, regardless of it having been set */
	FRHAPI_InventoryRecord& GetAfter() { return After_Optional; }
	/** @brief Gets the value of After_Optional, regardless of it having been set */
	const FRHAPI_InventoryRecord& GetAfter() const { return After_Optional; }
	/** @brief Gets the value of After_Optional, if it has been set, otherwise it returns DefaultValue */
	const FRHAPI_InventoryRecord& GetAfter(const FRHAPI_InventoryRecord& DefaultValue) const { if (After_IsSet) return After_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of After_Optional and returns true if it has been set, otherwise returns false */
	bool GetAfter(FRHAPI_InventoryRecord& OutValue) const { if (After_IsSet) OutValue = After_Optional; return After_IsSet; }
	/** @brief Returns a pointer to After_Optional, if it has been set, otherwise returns nullptr */
	FRHAPI_InventoryRecord* GetAfterOrNull() { if (After_IsSet) return (&After_Optional); return nullptr; }
	/** @brief Returns a pointer to After_Optional, if it has been set, otherwise returns nullptr */
	const FRHAPI_InventoryRecord* GetAfterOrNull() const { if (After_IsSet) return (&After_Optional); return nullptr; }
	/** @brief Sets the value of After_Optional and also sets After_IsSet to true */
	void SetAfter(const FRHAPI_InventoryRecord& NewValue) { After_Optional = NewValue; After_IsSet = true;  }
	/** @brief Sets the value of After_Optional and also sets After_IsSet to true using move semantics */
	void SetAfter(FRHAPI_InventoryRecord&& NewValue) { After_Optional = NewValue; After_IsSet = true;  }
	/** @brief Clears the value of After_Optional and sets After_IsSet to false */
	void ClearAfter() { After_IsSet = false;  }
	/** @brief Checks whether After_Optional has been set */
	bool IsAfterSet() const { return After_IsSet; }
};

/** @} */
