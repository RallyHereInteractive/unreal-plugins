// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "CacheInfo.h"
#include "ExternalKeyEntitlement.h"
#include "LootEntitlement.h"
#include "Platform.h"
#include "PlatformSKU.generated.h"

/** @defgroup RHAPI_PlatformSKU RallyHere API Model PlatformSKU
 *  @{
 */

/**
 * @brief Platform SKU that can be converted to inventory or keys
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_PlatformSKU : public FRHAPI_Model
{
    GENERATED_BODY()

    /**
    * @brief Fills this object with data from the passed in JSON
    *
    * @param [in] JsonValue Data from the API call.
    *
    * @return true if parsing of the JSON data was successful.
    */
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

    /**
    * @brief Writes the data from this object into the specified JSON Writer stream
    *
    * @param [in] Writer JSON Writer stream to push .
    */
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /** @brief Custom data associated with the resource */
    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    TMap<FString, FString> CustomData_Optional{  };
    /** @brief true if CustomData_Optional has been set to a value */
    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    bool CustomData_IsSet{ false };
    /** @brief Gets the value of CustomData_Optional, regardless of it having been set */
    TMap<FString, FString>& GetCustomData() { return CustomData_Optional; }
    /** @brief Gets the value of CustomData_Optional, regardless of it having been set */
    const TMap<FString, FString>& GetCustomData() const { return CustomData_Optional; }
    /** @brief Gets the value of CustomData_Optional, if it has been set, otherwise it returns DefaultValue */
    const TMap<FString, FString>& GetCustomData(const TMap<FString, FString>& DefaultValue) const { if (CustomData_IsSet) return CustomData_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of CustomData_Optional and returns true if it has been set, otherwise returns false */
    bool GetCustomData(TMap<FString, FString>& OutValue) const { if (CustomData_IsSet) OutValue = CustomData_Optional; return CustomData_IsSet; }
    /** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
    TMap<FString, FString>* GetCustomDataOrNull() { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
    /** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
    const TMap<FString, FString>* GetCustomDataOrNull() const { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
    /** @brief Sets the value of CustomData_Optional and also sets CustomData_IsSet to true */
    void SetCustomData(TMap<FString, FString> NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true; }
     /** @brief Clears the value of CustomData_Optional and sets CustomData_IsSet to false */
    void ClearCustomData() { CustomData_IsSet = false; }

    /** @brief The platform of the SKU */
    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    ERHAPI_Platform Platform{  };
    /** @brief Gets the value of Platform */
    ERHAPI_Platform& GetPlatform() { return Platform; }
    /** @brief Gets the value of Platform */
    const ERHAPI_Platform& GetPlatform() const { return Platform; }
    /** @brief Sets the value of Platform */
    void SetPlatform(ERHAPI_Platform NewValue) { Platform = NewValue;  }

    /** @brief The SKU of the platform */
    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    FString Sku{  };
    /** @brief Gets the value of Sku */
    FString& GetSku() { return Sku; }
    /** @brief Gets the value of Sku */
    const FString& GetSku() const { return Sku; }
    /** @brief Sets the value of Sku */
    void SetSku(FString NewValue) { Sku = NewValue;  }

    /** @brief The Loot that will be granted to the player */
    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    FRHAPI_LootEntitlement LootEntitlement_Optional{  };
    /** @brief true if LootEntitlement_Optional has been set to a value */
    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    bool LootEntitlement_IsSet{ false };
    /** @brief Gets the value of LootEntitlement_Optional, regardless of it having been set */
    FRHAPI_LootEntitlement& GetLootEntitlement() { return LootEntitlement_Optional; }
    /** @brief Gets the value of LootEntitlement_Optional, regardless of it having been set */
    const FRHAPI_LootEntitlement& GetLootEntitlement() const { return LootEntitlement_Optional; }
    /** @brief Gets the value of LootEntitlement_Optional, if it has been set, otherwise it returns DefaultValue */
    const FRHAPI_LootEntitlement& GetLootEntitlement(const FRHAPI_LootEntitlement& DefaultValue) const { if (LootEntitlement_IsSet) return LootEntitlement_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of LootEntitlement_Optional and returns true if it has been set, otherwise returns false */
    bool GetLootEntitlement(FRHAPI_LootEntitlement& OutValue) const { if (LootEntitlement_IsSet) OutValue = LootEntitlement_Optional; return LootEntitlement_IsSet; }
    /** @brief Returns a pointer to LootEntitlement_Optional, if it has been set, otherwise returns nullptr */
    FRHAPI_LootEntitlement* GetLootEntitlementOrNull() { if (LootEntitlement_IsSet) return &LootEntitlement_Optional; return nullptr; }
    /** @brief Returns a pointer to LootEntitlement_Optional, if it has been set, otherwise returns nullptr */
    const FRHAPI_LootEntitlement* GetLootEntitlementOrNull() const { if (LootEntitlement_IsSet) return &LootEntitlement_Optional; return nullptr; }
    /** @brief Sets the value of LootEntitlement_Optional and also sets LootEntitlement_IsSet to true */
    void SetLootEntitlement(FRHAPI_LootEntitlement NewValue) { LootEntitlement_Optional = NewValue; LootEntitlement_IsSet = true; }
     /** @brief Clears the value of LootEntitlement_Optional and sets LootEntitlement_IsSet to false */
    void ClearLootEntitlement() { LootEntitlement_IsSet = false; }

    /** @brief The External Key Entitlement */
    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    FRHAPI_ExternalKeyEntitlement ExternalKeyEntitlement_Optional{  };
    /** @brief true if ExternalKeyEntitlement_Optional has been set to a value */
    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    bool ExternalKeyEntitlement_IsSet{ false };
    /** @brief Gets the value of ExternalKeyEntitlement_Optional, regardless of it having been set */
    FRHAPI_ExternalKeyEntitlement& GetExternalKeyEntitlement() { return ExternalKeyEntitlement_Optional; }
    /** @brief Gets the value of ExternalKeyEntitlement_Optional, regardless of it having been set */
    const FRHAPI_ExternalKeyEntitlement& GetExternalKeyEntitlement() const { return ExternalKeyEntitlement_Optional; }
    /** @brief Gets the value of ExternalKeyEntitlement_Optional, if it has been set, otherwise it returns DefaultValue */
    const FRHAPI_ExternalKeyEntitlement& GetExternalKeyEntitlement(const FRHAPI_ExternalKeyEntitlement& DefaultValue) const { if (ExternalKeyEntitlement_IsSet) return ExternalKeyEntitlement_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of ExternalKeyEntitlement_Optional and returns true if it has been set, otherwise returns false */
    bool GetExternalKeyEntitlement(FRHAPI_ExternalKeyEntitlement& OutValue) const { if (ExternalKeyEntitlement_IsSet) OutValue = ExternalKeyEntitlement_Optional; return ExternalKeyEntitlement_IsSet; }
    /** @brief Returns a pointer to ExternalKeyEntitlement_Optional, if it has been set, otherwise returns nullptr */
    FRHAPI_ExternalKeyEntitlement* GetExternalKeyEntitlementOrNull() { if (ExternalKeyEntitlement_IsSet) return &ExternalKeyEntitlement_Optional; return nullptr; }
    /** @brief Returns a pointer to ExternalKeyEntitlement_Optional, if it has been set, otherwise returns nullptr */
    const FRHAPI_ExternalKeyEntitlement* GetExternalKeyEntitlementOrNull() const { if (ExternalKeyEntitlement_IsSet) return &ExternalKeyEntitlement_Optional; return nullptr; }
    /** @brief Sets the value of ExternalKeyEntitlement_Optional and also sets ExternalKeyEntitlement_IsSet to true */
    void SetExternalKeyEntitlement(FRHAPI_ExternalKeyEntitlement NewValue) { ExternalKeyEntitlement_Optional = NewValue; ExternalKeyEntitlement_IsSet = true; }
     /** @brief Clears the value of ExternalKeyEntitlement_Optional and sets ExternalKeyEntitlement_IsSet to false */
    void ClearExternalKeyEntitlement() { ExternalKeyEntitlement_IsSet = false; }

    /** @brief Cache info for the Platform SKUs. */
    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    FRHAPI_CacheInfo CacheInfo_Optional{  };
    /** @brief true if CacheInfo_Optional has been set to a value */
    UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
    bool CacheInfo_IsSet{ false };
    /** @brief Gets the value of CacheInfo_Optional, regardless of it having been set */
    FRHAPI_CacheInfo& GetCacheInfo() { return CacheInfo_Optional; }
    /** @brief Gets the value of CacheInfo_Optional, regardless of it having been set */
    const FRHAPI_CacheInfo& GetCacheInfo() const { return CacheInfo_Optional; }
    /** @brief Gets the value of CacheInfo_Optional, if it has been set, otherwise it returns DefaultValue */
    const FRHAPI_CacheInfo& GetCacheInfo(const FRHAPI_CacheInfo& DefaultValue) const { if (CacheInfo_IsSet) return CacheInfo_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of CacheInfo_Optional and returns true if it has been set, otherwise returns false */
    bool GetCacheInfo(FRHAPI_CacheInfo& OutValue) const { if (CacheInfo_IsSet) OutValue = CacheInfo_Optional; return CacheInfo_IsSet; }
    /** @brief Returns a pointer to CacheInfo_Optional, if it has been set, otherwise returns nullptr */
    FRHAPI_CacheInfo* GetCacheInfoOrNull() { if (CacheInfo_IsSet) return &CacheInfo_Optional; return nullptr; }
    /** @brief Returns a pointer to CacheInfo_Optional, if it has been set, otherwise returns nullptr */
    const FRHAPI_CacheInfo* GetCacheInfoOrNull() const { if (CacheInfo_IsSet) return &CacheInfo_Optional; return nullptr; }
    /** @brief Sets the value of CacheInfo_Optional and also sets CacheInfo_IsSet to true */
    void SetCacheInfo(FRHAPI_CacheInfo NewValue) { CacheInfo_Optional = NewValue; CacheInfo_IsSet = true; }
     /** @brief Clears the value of CacheInfo_Optional and sets CacheInfo_IsSet to false */
    void ClearCacheInfo() { CacheInfo_IsSet = false; }
};

/** @} */
