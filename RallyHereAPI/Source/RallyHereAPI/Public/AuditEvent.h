// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "AdditionalJoinParams.h"
#include "ClientSettings.h"
#include "CrossplayPreferences.h"
#include "HostType.h"
#include "InstanceHealthStatus.h"
#include "InstanceJoinableStatus.h"
#include "InviteSource.h"
#include "JoinParams.h"
#include "Platform.h"
#include "SessionJoinability.h"
#include "SessionPlayerStatus.h"
#include "TeamUpdate.h"
#include "AuditEvent.generated.h"

/** @defgroup RHAPI_AuditEvent RallyHere API Model AuditEvent
 *  @{
 */

/**
 * @brief 
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_AuditEvent : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	/** @brief Name of the audit event you are creating. Customer created events will be prepended with 'customer.' */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString EventName{  };
	/** @brief Gets the value of EventName */
	FORCEINLINE FString& GetEventName() { return EventName; }
	/** @brief Gets the value of EventName */
	FORCEINLINE const FString& GetEventName() const { return EventName; }
	/** @brief Sets the value of EventName */
	FORCEINLINE void SetEventName(const FString& NewValue) { EventName = NewValue;   }
	/** @brief Sets the value of EventName using move semantics */
	FORCEINLINE void SetEventName(FString&& NewValue) { EventName = NewValue;   }

	/** @brief ID of the session this event occurred in */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString SessionId{  };
	/** @brief Gets the value of SessionId */
	FORCEINLINE FString& GetSessionId() { return SessionId; }
	/** @brief Gets the value of SessionId */
	FORCEINLINE const FString& GetSessionId() const { return SessionId; }
	/** @brief Sets the value of SessionId */
	FORCEINLINE void SetSessionId(const FString& NewValue) { SessionId = NewValue;   }
	/** @brief Sets the value of SessionId using move semantics */
	FORCEINLINE void SetSessionId(FString&& NewValue) { SessionId = NewValue;   }

	/** @brief Reason for this event to occur */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString Reason_Optional{  };
	/** @brief true if Reason_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Reason_IsSet{ false };
	/** @brief Gets the value of Reason_Optional, regardless of it having been set */
	FORCEINLINE FString& GetReason() { return Reason_Optional; }
	/** @brief Gets the value of Reason_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetReason() const { return Reason_Optional; }
	/** @brief Gets the value of Reason_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetReason(const FString& DefaultValue) const { if (Reason_IsSet) return Reason_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Reason_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetReason(FString& OutValue) const { if (Reason_IsSet) OutValue = Reason_Optional; return Reason_IsSet; }
	/** @brief Returns a pointer to Reason_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetReasonOrNull() { if (Reason_IsSet) return (&Reason_Optional); return nullptr; }
	/** @brief Returns a pointer to Reason_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetReasonOrNull() const { if (Reason_IsSet) return (&Reason_Optional); return nullptr; }
	/** @brief Sets the value of Reason_Optional and also sets Reason_IsSet to true */
	FORCEINLINE void SetReason(const FString& NewValue) { Reason_Optional = NewValue; Reason_IsSet = true;  }
	/** @brief Sets the value of Reason_Optional and also sets Reason_IsSet to true using move semantics */
	FORCEINLINE void SetReason(FString&& NewValue) { Reason_Optional = NewValue; Reason_IsSet = true;  }
	/** @brief Clears the value of Reason_Optional and sets Reason_IsSet to false */
	void ClearReason() { Reason_IsSet = false;  }

	/** @brief Custom data for this audit request */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TMap<FString, FString> CustomData_Optional{  };
	/** @brief true if CustomData_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool CustomData_IsSet{ false };
	/** @brief Gets the value of CustomData_Optional, regardless of it having been set */
	FORCEINLINE TMap<FString, FString>& GetCustomData() { return CustomData_Optional; }
	/** @brief Gets the value of CustomData_Optional, regardless of it having been set */
	FORCEINLINE const TMap<FString, FString>& GetCustomData() const { return CustomData_Optional; }
	/** @brief Gets the value of CustomData_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const TMap<FString, FString>& GetCustomData(const TMap<FString, FString>& DefaultValue) const { if (CustomData_IsSet) return CustomData_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of CustomData_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetCustomData(TMap<FString, FString>& OutValue) const { if (CustomData_IsSet) OutValue = CustomData_Optional; return CustomData_IsSet; }
	/** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE TMap<FString, FString>* GetCustomDataOrNull() { if (CustomData_IsSet) return (&CustomData_Optional); return nullptr; }
	/** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const TMap<FString, FString>* GetCustomDataOrNull() const { if (CustomData_IsSet) return (&CustomData_Optional); return nullptr; }
	/** @brief Sets the value of CustomData_Optional and also sets CustomData_IsSet to true */
	FORCEINLINE void SetCustomData(const TMap<FString, FString>& NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true;  }
	/** @brief Sets the value of CustomData_Optional and also sets CustomData_IsSet to true using move semantics */
	FORCEINLINE void SetCustomData(TMap<FString, FString>&& NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true;  }
	/** @brief Clears the value of CustomData_Optional and sets CustomData_IsSet to false */
	void ClearCustomData() { CustomData_IsSet = false;  }

	/** @brief Type of the session this event occurred in */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString SessionType_Optional{  };
	/** @brief true if SessionType_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool SessionType_IsSet{ false };
	/** @brief Gets the value of SessionType_Optional, regardless of it having been set */
	FORCEINLINE FString& GetSessionType() { return SessionType_Optional; }
	/** @brief Gets the value of SessionType_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetSessionType() const { return SessionType_Optional; }
	/** @brief Gets the value of SessionType_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetSessionType(const FString& DefaultValue) const { if (SessionType_IsSet) return SessionType_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of SessionType_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetSessionType(FString& OutValue) const { if (SessionType_IsSet) OutValue = SessionType_Optional; return SessionType_IsSet; }
	/** @brief Returns a pointer to SessionType_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetSessionTypeOrNull() { if (SessionType_IsSet) return (&SessionType_Optional); return nullptr; }
	/** @brief Returns a pointer to SessionType_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetSessionTypeOrNull() const { if (SessionType_IsSet) return (&SessionType_Optional); return nullptr; }
	/** @brief Sets the value of SessionType_Optional and also sets SessionType_IsSet to true */
	FORCEINLINE void SetSessionType(const FString& NewValue) { SessionType_Optional = NewValue; SessionType_IsSet = true;  }
	/** @brief Sets the value of SessionType_Optional and also sets SessionType_IsSet to true using move semantics */
	FORCEINLINE void SetSessionType(FString&& NewValue) { SessionType_Optional = NewValue; SessionType_IsSet = true;  }
	/** @brief Clears the value of SessionType_Optional and sets SessionType_IsSet to false */
	void ClearSessionType() { SessionType_IsSet = false;  }

	/** @brief Region ID for this event */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString RegionId_Optional{  };
	/** @brief true if RegionId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool RegionId_IsSet{ false };
	/** @brief Gets the value of RegionId_Optional, regardless of it having been set */
	FORCEINLINE FString& GetRegionId() { return RegionId_Optional; }
	/** @brief Gets the value of RegionId_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetRegionId() const { return RegionId_Optional; }
	/** @brief Gets the value of RegionId_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetRegionId(const FString& DefaultValue) const { if (RegionId_IsSet) return RegionId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of RegionId_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetRegionId(FString& OutValue) const { if (RegionId_IsSet) OutValue = RegionId_Optional; return RegionId_IsSet; }
	/** @brief Returns a pointer to RegionId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetRegionIdOrNull() { if (RegionId_IsSet) return (&RegionId_Optional); return nullptr; }
	/** @brief Returns a pointer to RegionId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetRegionIdOrNull() const { if (RegionId_IsSet) return (&RegionId_Optional); return nullptr; }
	/** @brief Sets the value of RegionId_Optional and also sets RegionId_IsSet to true */
	FORCEINLINE void SetRegionId(const FString& NewValue) { RegionId_Optional = NewValue; RegionId_IsSet = true;  }
	/** @brief Sets the value of RegionId_Optional and also sets RegionId_IsSet to true using move semantics */
	FORCEINLINE void SetRegionId(FString&& NewValue) { RegionId_Optional = NewValue; RegionId_IsSet = true;  }
	/** @brief Clears the value of RegionId_Optional and sets RegionId_IsSet to false */
	void ClearRegionId() { RegionId_IsSet = false;  }

	/** @brief Whether or not the session is publicly joinable */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Joinable_Optional{ false };
	/** @brief true if Joinable_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Joinable_IsSet{ false };
	/** @brief Gets the value of Joinable_Optional, regardless of it having been set */
	FORCEINLINE bool& GetJoinable() { return Joinable_Optional; }
	/** @brief Gets the value of Joinable_Optional, regardless of it having been set */
	FORCEINLINE const bool& GetJoinable() const { return Joinable_Optional; }
	/** @brief Gets the value of Joinable_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const bool& GetJoinable(const bool& DefaultValue) const { if (Joinable_IsSet) return Joinable_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Joinable_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetJoinable(bool& OutValue) const { if (Joinable_IsSet) OutValue = Joinable_Optional; return Joinable_IsSet; }
	/** @brief Returns a pointer to Joinable_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE bool* GetJoinableOrNull() { if (Joinable_IsSet) return (&Joinable_Optional); return nullptr; }
	/** @brief Returns a pointer to Joinable_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const bool* GetJoinableOrNull() const { if (Joinable_IsSet) return (&Joinable_Optional); return nullptr; }
	/** @brief Sets the value of Joinable_Optional and also sets Joinable_IsSet to true */
	FORCEINLINE void SetJoinable(const bool& NewValue) { Joinable_Optional = NewValue; Joinable_IsSet = true;  }
	/** @brief Sets the value of Joinable_Optional and also sets Joinable_IsSet to true using move semantics */
	FORCEINLINE void SetJoinable(bool&& NewValue) { Joinable_Optional = NewValue; Joinable_IsSet = true;  }
	/** @brief Clears the value of Joinable_Optional and sets Joinable_IsSet to false */
	void ClearJoinable() { Joinable_Optional = false; Joinable_IsSet = false;  }
	/** @brief Returns the default value of Joinable */
	FORCEINLINE bool GetDefaultValue_Joinable() { return false; }

	/** @brief Joinability flags about the session */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_SessionJoinability Joinability_Optional{  };
	/** @brief true if Joinability_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Joinability_IsSet{ false };
	/** @brief Gets the value of Joinability_Optional, regardless of it having been set */
	FORCEINLINE FRHAPI_SessionJoinability& GetJoinability() { return Joinability_Optional; }
	/** @brief Gets the value of Joinability_Optional, regardless of it having been set */
	FORCEINLINE const FRHAPI_SessionJoinability& GetJoinability() const { return Joinability_Optional; }
	/** @brief Gets the value of Joinability_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FRHAPI_SessionJoinability& GetJoinability(const FRHAPI_SessionJoinability& DefaultValue) const { if (Joinability_IsSet) return Joinability_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Joinability_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetJoinability(FRHAPI_SessionJoinability& OutValue) const { if (Joinability_IsSet) OutValue = Joinability_Optional; return Joinability_IsSet; }
	/** @brief Returns a pointer to Joinability_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FRHAPI_SessionJoinability* GetJoinabilityOrNull() { if (Joinability_IsSet) return (&Joinability_Optional); return nullptr; }
	/** @brief Returns a pointer to Joinability_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FRHAPI_SessionJoinability* GetJoinabilityOrNull() const { if (Joinability_IsSet) return (&Joinability_Optional); return nullptr; }
	/** @brief Sets the value of Joinability_Optional and also sets Joinability_IsSet to true */
	FORCEINLINE void SetJoinability(const FRHAPI_SessionJoinability& NewValue) { Joinability_Optional = NewValue; Joinability_IsSet = true;  }
	/** @brief Sets the value of Joinability_Optional and also sets Joinability_IsSet to true using move semantics */
	FORCEINLINE void SetJoinability(FRHAPI_SessionJoinability&& NewValue) { Joinability_Optional = NewValue; Joinability_IsSet = true;  }
	/** @brief Clears the value of Joinability_Optional and sets Joinability_IsSet to false */
	void ClearJoinability() { Joinability_IsSet = false;  }

	/** @brief Updated team numbers and sizes */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TArray<FRHAPI_TeamUpdate> UpdatedTeams_Optional{  };
	/** @brief true if UpdatedTeams_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool UpdatedTeams_IsSet{ false };
	/** @brief Gets the value of UpdatedTeams_Optional, regardless of it having been set */
	FORCEINLINE TArray<FRHAPI_TeamUpdate>& GetUpdatedTeams() { return UpdatedTeams_Optional; }
	/** @brief Gets the value of UpdatedTeams_Optional, regardless of it having been set */
	FORCEINLINE const TArray<FRHAPI_TeamUpdate>& GetUpdatedTeams() const { return UpdatedTeams_Optional; }
	/** @brief Gets the value of UpdatedTeams_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const TArray<FRHAPI_TeamUpdate>& GetUpdatedTeams(const TArray<FRHAPI_TeamUpdate>& DefaultValue) const { if (UpdatedTeams_IsSet) return UpdatedTeams_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of UpdatedTeams_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetUpdatedTeams(TArray<FRHAPI_TeamUpdate>& OutValue) const { if (UpdatedTeams_IsSet) OutValue = UpdatedTeams_Optional; return UpdatedTeams_IsSet; }
	/** @brief Returns a pointer to UpdatedTeams_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE TArray<FRHAPI_TeamUpdate>* GetUpdatedTeamsOrNull() { if (UpdatedTeams_IsSet) return (&UpdatedTeams_Optional); return nullptr; }
	/** @brief Returns a pointer to UpdatedTeams_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const TArray<FRHAPI_TeamUpdate>* GetUpdatedTeamsOrNull() const { if (UpdatedTeams_IsSet) return (&UpdatedTeams_Optional); return nullptr; }
	/** @brief Sets the value of UpdatedTeams_Optional and also sets UpdatedTeams_IsSet to true */
	FORCEINLINE void SetUpdatedTeams(const TArray<FRHAPI_TeamUpdate>& NewValue) { UpdatedTeams_Optional = NewValue; UpdatedTeams_IsSet = true;  }
	/** @brief Sets the value of UpdatedTeams_Optional and also sets UpdatedTeams_IsSet to true using move semantics */
	FORCEINLINE void SetUpdatedTeams(TArray<FRHAPI_TeamUpdate>&& NewValue) { UpdatedTeams_Optional = NewValue; UpdatedTeams_IsSet = true;  }
	/** @brief Clears the value of UpdatedTeams_Optional and sets UpdatedTeams_IsSet to false */
	void ClearUpdatedTeams() { UpdatedTeams_IsSet = false;  }

	/** @brief The source of an invite */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	ERHAPI_InviteSource Source_Optional{  };
	/** @brief true if Source_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Source_IsSet{ false };
	/** @brief Gets the value of Source_Optional, regardless of it having been set */
	FORCEINLINE ERHAPI_InviteSource& GetSource() { return Source_Optional; }
	/** @brief Gets the value of Source_Optional, regardless of it having been set */
	FORCEINLINE const ERHAPI_InviteSource& GetSource() const { return Source_Optional; }
	/** @brief Gets the value of Source_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const ERHAPI_InviteSource& GetSource(const ERHAPI_InviteSource& DefaultValue) const { if (Source_IsSet) return Source_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Source_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetSource(ERHAPI_InviteSource& OutValue) const { if (Source_IsSet) OutValue = Source_Optional; return Source_IsSet; }
	/** @brief Returns a pointer to Source_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE ERHAPI_InviteSource* GetSourceOrNull() { if (Source_IsSet) return (&Source_Optional); return nullptr; }
	/** @brief Returns a pointer to Source_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const ERHAPI_InviteSource* GetSourceOrNull() const { if (Source_IsSet) return (&Source_Optional); return nullptr; }
	/** @brief Sets the value of Source_Optional and also sets Source_IsSet to true */
	FORCEINLINE void SetSource(const ERHAPI_InviteSource& NewValue) { Source_Optional = NewValue; Source_IsSet = true;  }
	/** @brief Sets the value of Source_Optional and also sets Source_IsSet to true using move semantics */
	FORCEINLINE void SetSource(ERHAPI_InviteSource&& NewValue) { Source_Optional = NewValue; Source_IsSet = true;  }
	/** @brief Clears the value of Source_Optional and sets Source_IsSet to false */
	void ClearSource() { Source_IsSet = false;  }

	/** @brief UUID of a specific player being effected in this event */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FGuid PlayerUuid_Optional{  };
	/** @brief true if PlayerUuid_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool PlayerUuid_IsSet{ false };
	/** @brief Gets the value of PlayerUuid_Optional, regardless of it having been set */
	FORCEINLINE FGuid& GetPlayerUuid() { return PlayerUuid_Optional; }
	/** @brief Gets the value of PlayerUuid_Optional, regardless of it having been set */
	FORCEINLINE const FGuid& GetPlayerUuid() const { return PlayerUuid_Optional; }
	/** @brief Gets the value of PlayerUuid_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FGuid& GetPlayerUuid(const FGuid& DefaultValue) const { if (PlayerUuid_IsSet) return PlayerUuid_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of PlayerUuid_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetPlayerUuid(FGuid& OutValue) const { if (PlayerUuid_IsSet) OutValue = PlayerUuid_Optional; return PlayerUuid_IsSet; }
	/** @brief Returns a pointer to PlayerUuid_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FGuid* GetPlayerUuidOrNull() { if (PlayerUuid_IsSet) return (&PlayerUuid_Optional); return nullptr; }
	/** @brief Returns a pointer to PlayerUuid_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FGuid* GetPlayerUuidOrNull() const { if (PlayerUuid_IsSet) return (&PlayerUuid_Optional); return nullptr; }
	/** @brief Sets the value of PlayerUuid_Optional and also sets PlayerUuid_IsSet to true */
	FORCEINLINE void SetPlayerUuid(const FGuid& NewValue) { PlayerUuid_Optional = NewValue; PlayerUuid_IsSet = true;  }
	/** @brief Sets the value of PlayerUuid_Optional and also sets PlayerUuid_IsSet to true using move semantics */
	FORCEINLINE void SetPlayerUuid(FGuid&& NewValue) { PlayerUuid_Optional = NewValue; PlayerUuid_IsSet = true;  }
	/** @brief Clears the value of PlayerUuid_Optional and sets PlayerUuid_IsSet to false */
	void ClearPlayerUuid() { PlayerUuid_IsSet = false;  }

	/** @brief ID of the team being effected in this event */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 TeamId_Optional{ 0 };
	/** @brief true if TeamId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool TeamId_IsSet{ false };
	/** @brief Gets the value of TeamId_Optional, regardless of it having been set */
	FORCEINLINE int32& GetTeamId() { return TeamId_Optional; }
	/** @brief Gets the value of TeamId_Optional, regardless of it having been set */
	FORCEINLINE const int32& GetTeamId() const { return TeamId_Optional; }
	/** @brief Gets the value of TeamId_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const int32& GetTeamId(const int32& DefaultValue) const { if (TeamId_IsSet) return TeamId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of TeamId_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetTeamId(int32& OutValue) const { if (TeamId_IsSet) OutValue = TeamId_Optional; return TeamId_IsSet; }
	/** @brief Returns a pointer to TeamId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE int32* GetTeamIdOrNull() { if (TeamId_IsSet) return (&TeamId_Optional); return nullptr; }
	/** @brief Returns a pointer to TeamId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const int32* GetTeamIdOrNull() const { if (TeamId_IsSet) return (&TeamId_Optional); return nullptr; }
	/** @brief Sets the value of TeamId_Optional and also sets TeamId_IsSet to true */
	FORCEINLINE void SetTeamId(const int32& NewValue) { TeamId_Optional = NewValue; TeamId_IsSet = true;  }
	/** @brief Sets the value of TeamId_Optional and also sets TeamId_IsSet to true using move semantics */
	FORCEINLINE void SetTeamId(int32&& NewValue) { TeamId_Optional = NewValue; TeamId_IsSet = true;  }
	/** @brief Clears the value of TeamId_Optional and sets TeamId_IsSet to false */
	void ClearTeamId() { TeamId_Optional = 0; TeamId_IsSet = false;  }
	/** @brief Returns the default value of TeamId */
	FORCEINLINE int32 GetDefaultValue_TeamId() { return 0; }

	/** @brief ID of the session being invited in this event */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString InvitedSessionId_Optional{  };
	/** @brief true if InvitedSessionId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool InvitedSessionId_IsSet{ false };
	/** @brief Gets the value of InvitedSessionId_Optional, regardless of it having been set */
	FORCEINLINE FString& GetInvitedSessionId() { return InvitedSessionId_Optional; }
	/** @brief Gets the value of InvitedSessionId_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetInvitedSessionId() const { return InvitedSessionId_Optional; }
	/** @brief Gets the value of InvitedSessionId_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetInvitedSessionId(const FString& DefaultValue) const { if (InvitedSessionId_IsSet) return InvitedSessionId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of InvitedSessionId_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetInvitedSessionId(FString& OutValue) const { if (InvitedSessionId_IsSet) OutValue = InvitedSessionId_Optional; return InvitedSessionId_IsSet; }
	/** @brief Returns a pointer to InvitedSessionId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetInvitedSessionIdOrNull() { if (InvitedSessionId_IsSet) return (&InvitedSessionId_Optional); return nullptr; }
	/** @brief Returns a pointer to InvitedSessionId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetInvitedSessionIdOrNull() const { if (InvitedSessionId_IsSet) return (&InvitedSessionId_Optional); return nullptr; }
	/** @brief Sets the value of InvitedSessionId_Optional and also sets InvitedSessionId_IsSet to true */
	FORCEINLINE void SetInvitedSessionId(const FString& NewValue) { InvitedSessionId_Optional = NewValue; InvitedSessionId_IsSet = true;  }
	/** @brief Sets the value of InvitedSessionId_Optional and also sets InvitedSessionId_IsSet to true using move semantics */
	FORCEINLINE void SetInvitedSessionId(FString&& NewValue) { InvitedSessionId_Optional = NewValue; InvitedSessionId_IsSet = true;  }
	/** @brief Clears the value of InvitedSessionId_Optional and sets InvitedSessionId_IsSet to false */
	void ClearInvitedSessionId() { InvitedSessionId_IsSet = false;  }

	/** @brief ID of the session being removed in this event */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString RemovedSessionId_Optional{  };
	/** @brief true if RemovedSessionId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool RemovedSessionId_IsSet{ false };
	/** @brief Gets the value of RemovedSessionId_Optional, regardless of it having been set */
	FORCEINLINE FString& GetRemovedSessionId() { return RemovedSessionId_Optional; }
	/** @brief Gets the value of RemovedSessionId_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetRemovedSessionId() const { return RemovedSessionId_Optional; }
	/** @brief Gets the value of RemovedSessionId_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetRemovedSessionId(const FString& DefaultValue) const { if (RemovedSessionId_IsSet) return RemovedSessionId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of RemovedSessionId_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetRemovedSessionId(FString& OutValue) const { if (RemovedSessionId_IsSet) OutValue = RemovedSessionId_Optional; return RemovedSessionId_IsSet; }
	/** @brief Returns a pointer to RemovedSessionId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetRemovedSessionIdOrNull() { if (RemovedSessionId_IsSet) return (&RemovedSessionId_Optional); return nullptr; }
	/** @brief Returns a pointer to RemovedSessionId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetRemovedSessionIdOrNull() const { if (RemovedSessionId_IsSet) return (&RemovedSessionId_Optional); return nullptr; }
	/** @brief Sets the value of RemovedSessionId_Optional and also sets RemovedSessionId_IsSet to true */
	FORCEINLINE void SetRemovedSessionId(const FString& NewValue) { RemovedSessionId_Optional = NewValue; RemovedSessionId_IsSet = true;  }
	/** @brief Sets the value of RemovedSessionId_Optional and also sets RemovedSessionId_IsSet to true using move semantics */
	FORCEINLINE void SetRemovedSessionId(FString&& NewValue) { RemovedSessionId_Optional = NewValue; RemovedSessionId_IsSet = true;  }
	/** @brief Clears the value of RemovedSessionId_Optional and sets RemovedSessionId_IsSet to false */
	void ClearRemovedSessionId() { RemovedSessionId_IsSet = false;  }

	/** @brief Version updated in this event */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString Version_Optional{  };
	/** @brief true if Version_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Version_IsSet{ false };
	/** @brief Gets the value of Version_Optional, regardless of it having been set */
	FORCEINLINE FString& GetVersion() { return Version_Optional; }
	/** @brief Gets the value of Version_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetVersion() const { return Version_Optional; }
	/** @brief Gets the value of Version_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetVersion(const FString& DefaultValue) const { if (Version_IsSet) return Version_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Version_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetVersion(FString& OutValue) const { if (Version_IsSet) OutValue = Version_Optional; return Version_IsSet; }
	/** @brief Returns a pointer to Version_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetVersionOrNull() { if (Version_IsSet) return (&Version_Optional); return nullptr; }
	/** @brief Returns a pointer to Version_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetVersionOrNull() const { if (Version_IsSet) return (&Version_Optional); return nullptr; }
	/** @brief Sets the value of Version_Optional and also sets Version_IsSet to true */
	FORCEINLINE void SetVersion(const FString& NewValue) { Version_Optional = NewValue; Version_IsSet = true;  }
	/** @brief Sets the value of Version_Optional and also sets Version_IsSet to true using move semantics */
	FORCEINLINE void SetVersion(FString&& NewValue) { Version_Optional = NewValue; Version_IsSet = true;  }
	/** @brief Clears the value of Version_Optional and sets Version_IsSet to false */
	void ClearVersion() { Version_IsSet = false;  }

	/** @brief Client settings updated as part of this event */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_ClientSettings ClientSettings_Optional{  };
	/** @brief true if ClientSettings_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool ClientSettings_IsSet{ false };
	/** @brief Gets the value of ClientSettings_Optional, regardless of it having been set */
	FORCEINLINE FRHAPI_ClientSettings& GetClientSettings() { return ClientSettings_Optional; }
	/** @brief Gets the value of ClientSettings_Optional, regardless of it having been set */
	FORCEINLINE const FRHAPI_ClientSettings& GetClientSettings() const { return ClientSettings_Optional; }
	/** @brief Gets the value of ClientSettings_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FRHAPI_ClientSettings& GetClientSettings(const FRHAPI_ClientSettings& DefaultValue) const { if (ClientSettings_IsSet) return ClientSettings_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of ClientSettings_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetClientSettings(FRHAPI_ClientSettings& OutValue) const { if (ClientSettings_IsSet) OutValue = ClientSettings_Optional; return ClientSettings_IsSet; }
	/** @brief Returns a pointer to ClientSettings_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FRHAPI_ClientSettings* GetClientSettingsOrNull() { if (ClientSettings_IsSet) return (&ClientSettings_Optional); return nullptr; }
	/** @brief Returns a pointer to ClientSettings_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FRHAPI_ClientSettings* GetClientSettingsOrNull() const { if (ClientSettings_IsSet) return (&ClientSettings_Optional); return nullptr; }
	/** @brief Sets the value of ClientSettings_Optional and also sets ClientSettings_IsSet to true */
	FORCEINLINE void SetClientSettings(const FRHAPI_ClientSettings& NewValue) { ClientSettings_Optional = NewValue; ClientSettings_IsSet = true;  }
	/** @brief Sets the value of ClientSettings_Optional and also sets ClientSettings_IsSet to true using move semantics */
	FORCEINLINE void SetClientSettings(FRHAPI_ClientSettings&& NewValue) { ClientSettings_Optional = NewValue; ClientSettings_IsSet = true;  }
	/** @brief Clears the value of ClientSettings_Optional and sets ClientSettings_IsSet to false */
	void ClearClientSettings() { ClientSettings_IsSet = false;  }

	/** @brief Crossplay preferences updated as part of this event */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_CrossplayPreferences CrossplayPreferences_Optional{  };
	/** @brief true if CrossplayPreferences_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool CrossplayPreferences_IsSet{ false };
	/** @brief Gets the value of CrossplayPreferences_Optional, regardless of it having been set */
	FORCEINLINE FRHAPI_CrossplayPreferences& GetCrossplayPreferences() { return CrossplayPreferences_Optional; }
	/** @brief Gets the value of CrossplayPreferences_Optional, regardless of it having been set */
	FORCEINLINE const FRHAPI_CrossplayPreferences& GetCrossplayPreferences() const { return CrossplayPreferences_Optional; }
	/** @brief Gets the value of CrossplayPreferences_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FRHAPI_CrossplayPreferences& GetCrossplayPreferences(const FRHAPI_CrossplayPreferences& DefaultValue) const { if (CrossplayPreferences_IsSet) return CrossplayPreferences_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of CrossplayPreferences_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetCrossplayPreferences(FRHAPI_CrossplayPreferences& OutValue) const { if (CrossplayPreferences_IsSet) OutValue = CrossplayPreferences_Optional; return CrossplayPreferences_IsSet; }
	/** @brief Returns a pointer to CrossplayPreferences_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FRHAPI_CrossplayPreferences* GetCrossplayPreferencesOrNull() { if (CrossplayPreferences_IsSet) return (&CrossplayPreferences_Optional); return nullptr; }
	/** @brief Returns a pointer to CrossplayPreferences_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FRHAPI_CrossplayPreferences* GetCrossplayPreferencesOrNull() const { if (CrossplayPreferences_IsSet) return (&CrossplayPreferences_Optional); return nullptr; }
	/** @brief Sets the value of CrossplayPreferences_Optional and also sets CrossplayPreferences_IsSet to true */
	FORCEINLINE void SetCrossplayPreferences(const FRHAPI_CrossplayPreferences& NewValue) { CrossplayPreferences_Optional = NewValue; CrossplayPreferences_IsSet = true;  }
	/** @brief Sets the value of CrossplayPreferences_Optional and also sets CrossplayPreferences_IsSet to true using move semantics */
	FORCEINLINE void SetCrossplayPreferences(FRHAPI_CrossplayPreferences&& NewValue) { CrossplayPreferences_Optional = NewValue; CrossplayPreferences_IsSet = true;  }
	/** @brief Clears the value of CrossplayPreferences_Optional and sets CrossplayPreferences_IsSet to false */
	void ClearCrossplayPreferences() { CrossplayPreferences_IsSet = false;  }

	/** @brief Player's status updated as part of this event */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	ERHAPI_SessionPlayerStatus PlayerStatus_Optional{  };
	/** @brief true if PlayerStatus_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool PlayerStatus_IsSet{ false };
	/** @brief Gets the value of PlayerStatus_Optional, regardless of it having been set */
	FORCEINLINE ERHAPI_SessionPlayerStatus& GetPlayerStatus() { return PlayerStatus_Optional; }
	/** @brief Gets the value of PlayerStatus_Optional, regardless of it having been set */
	FORCEINLINE const ERHAPI_SessionPlayerStatus& GetPlayerStatus() const { return PlayerStatus_Optional; }
	/** @brief Gets the value of PlayerStatus_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const ERHAPI_SessionPlayerStatus& GetPlayerStatus(const ERHAPI_SessionPlayerStatus& DefaultValue) const { if (PlayerStatus_IsSet) return PlayerStatus_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of PlayerStatus_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetPlayerStatus(ERHAPI_SessionPlayerStatus& OutValue) const { if (PlayerStatus_IsSet) OutValue = PlayerStatus_Optional; return PlayerStatus_IsSet; }
	/** @brief Returns a pointer to PlayerStatus_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE ERHAPI_SessionPlayerStatus* GetPlayerStatusOrNull() { if (PlayerStatus_IsSet) return (&PlayerStatus_Optional); return nullptr; }
	/** @brief Returns a pointer to PlayerStatus_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const ERHAPI_SessionPlayerStatus* GetPlayerStatusOrNull() const { if (PlayerStatus_IsSet) return (&PlayerStatus_Optional); return nullptr; }
	/** @brief Sets the value of PlayerStatus_Optional and also sets PlayerStatus_IsSet to true */
	FORCEINLINE void SetPlayerStatus(const ERHAPI_SessionPlayerStatus& NewValue) { PlayerStatus_Optional = NewValue; PlayerStatus_IsSet = true;  }
	/** @brief Sets the value of PlayerStatus_Optional and also sets PlayerStatus_IsSet to true using move semantics */
	FORCEINLINE void SetPlayerStatus(ERHAPI_SessionPlayerStatus&& NewValue) { PlayerStatus_Optional = NewValue; PlayerStatus_IsSet = true;  }
	/** @brief Clears the value of PlayerStatus_Optional and sets PlayerStatus_IsSet to false */
	void ClearPlayerStatus() { PlayerStatus_IsSet = false;  }

	/** @brief Platform updated as part of this event */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	ERHAPI_Platform Platform_Optional{  };
	/** @brief true if Platform_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Platform_IsSet{ false };
	/** @brief Gets the value of Platform_Optional, regardless of it having been set */
	FORCEINLINE ERHAPI_Platform& GetPlatform() { return Platform_Optional; }
	/** @brief Gets the value of Platform_Optional, regardless of it having been set */
	FORCEINLINE const ERHAPI_Platform& GetPlatform() const { return Platform_Optional; }
	/** @brief Gets the value of Platform_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const ERHAPI_Platform& GetPlatform(const ERHAPI_Platform& DefaultValue) const { if (Platform_IsSet) return Platform_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Platform_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetPlatform(ERHAPI_Platform& OutValue) const { if (Platform_IsSet) OutValue = Platform_Optional; return Platform_IsSet; }
	/** @brief Returns a pointer to Platform_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE ERHAPI_Platform* GetPlatformOrNull() { if (Platform_IsSet) return (&Platform_Optional); return nullptr; }
	/** @brief Returns a pointer to Platform_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const ERHAPI_Platform* GetPlatformOrNull() const { if (Platform_IsSet) return (&Platform_Optional); return nullptr; }
	/** @brief Sets the value of Platform_Optional and also sets Platform_IsSet to true */
	FORCEINLINE void SetPlatform(const ERHAPI_Platform& NewValue) { Platform_Optional = NewValue; Platform_IsSet = true;  }
	/** @brief Sets the value of Platform_Optional and also sets Platform_IsSet to true using move semantics */
	FORCEINLINE void SetPlatform(ERHAPI_Platform&& NewValue) { Platform_Optional = NewValue; Platform_IsSet = true;  }
	/** @brief Clears the value of Platform_Optional and sets Platform_IsSet to false */
	void ClearPlatform() { Platform_IsSet = false;  }

	/** @brief ID of the platform session being effected in this event */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString PlatformSessionId_Optional{  };
	/** @brief true if PlatformSessionId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool PlatformSessionId_IsSet{ false };
	/** @brief Gets the value of PlatformSessionId_Optional, regardless of it having been set */
	FORCEINLINE FString& GetPlatformSessionId() { return PlatformSessionId_Optional; }
	/** @brief Gets the value of PlatformSessionId_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetPlatformSessionId() const { return PlatformSessionId_Optional; }
	/** @brief Gets the value of PlatformSessionId_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetPlatformSessionId(const FString& DefaultValue) const { if (PlatformSessionId_IsSet) return PlatformSessionId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of PlatformSessionId_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetPlatformSessionId(FString& OutValue) const { if (PlatformSessionId_IsSet) OutValue = PlatformSessionId_Optional; return PlatformSessionId_IsSet; }
	/** @brief Returns a pointer to PlatformSessionId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetPlatformSessionIdOrNull() { if (PlatformSessionId_IsSet) return (&PlatformSessionId_Optional); return nullptr; }
	/** @brief Returns a pointer to PlatformSessionId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetPlatformSessionIdOrNull() const { if (PlatformSessionId_IsSet) return (&PlatformSessionId_Optional); return nullptr; }
	/** @brief Sets the value of PlatformSessionId_Optional and also sets PlatformSessionId_IsSet to true */
	FORCEINLINE void SetPlatformSessionId(const FString& NewValue) { PlatformSessionId_Optional = NewValue; PlatformSessionId_IsSet = true;  }
	/** @brief Sets the value of PlatformSessionId_Optional and also sets PlatformSessionId_IsSet to true using move semantics */
	FORCEINLINE void SetPlatformSessionId(FString&& NewValue) { PlatformSessionId_Optional = NewValue; PlatformSessionId_IsSet = true;  }
	/** @brief Clears the value of PlatformSessionId_Optional and sets PlatformSessionId_IsSet to false */
	void ClearPlatformSessionId() { PlatformSessionId_IsSet = false;  }

	/** @brief ID of the instance being effected in this event */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString InstanceId_Optional{  };
	/** @brief true if InstanceId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool InstanceId_IsSet{ false };
	/** @brief Gets the value of InstanceId_Optional, regardless of it having been set */
	FORCEINLINE FString& GetInstanceId() { return InstanceId_Optional; }
	/** @brief Gets the value of InstanceId_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetInstanceId() const { return InstanceId_Optional; }
	/** @brief Gets the value of InstanceId_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetInstanceId(const FString& DefaultValue) const { if (InstanceId_IsSet) return InstanceId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of InstanceId_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetInstanceId(FString& OutValue) const { if (InstanceId_IsSet) OutValue = InstanceId_Optional; return InstanceId_IsSet; }
	/** @brief Returns a pointer to InstanceId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetInstanceIdOrNull() { if (InstanceId_IsSet) return (&InstanceId_Optional); return nullptr; }
	/** @brief Returns a pointer to InstanceId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetInstanceIdOrNull() const { if (InstanceId_IsSet) return (&InstanceId_Optional); return nullptr; }
	/** @brief Sets the value of InstanceId_Optional and also sets InstanceId_IsSet to true */
	FORCEINLINE void SetInstanceId(const FString& NewValue) { InstanceId_Optional = NewValue; InstanceId_IsSet = true;  }
	/** @brief Sets the value of InstanceId_Optional and also sets InstanceId_IsSet to true using move semantics */
	FORCEINLINE void SetInstanceId(FString&& NewValue) { InstanceId_Optional = NewValue; InstanceId_IsSet = true;  }
	/** @brief Clears the value of InstanceId_Optional and sets InstanceId_IsSet to false */
	void ClearInstanceId() { InstanceId_IsSet = false;  }

	/** @brief Type of the host being effected in this event */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	ERHAPI_HostType HostType_Optional{  };
	/** @brief true if HostType_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool HostType_IsSet{ false };
	/** @brief Gets the value of HostType_Optional, regardless of it having been set */
	FORCEINLINE ERHAPI_HostType& GetHostType() { return HostType_Optional; }
	/** @brief Gets the value of HostType_Optional, regardless of it having been set */
	FORCEINLINE const ERHAPI_HostType& GetHostType() const { return HostType_Optional; }
	/** @brief Gets the value of HostType_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const ERHAPI_HostType& GetHostType(const ERHAPI_HostType& DefaultValue) const { if (HostType_IsSet) return HostType_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of HostType_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetHostType(ERHAPI_HostType& OutValue) const { if (HostType_IsSet) OutValue = HostType_Optional; return HostType_IsSet; }
	/** @brief Returns a pointer to HostType_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE ERHAPI_HostType* GetHostTypeOrNull() { if (HostType_IsSet) return (&HostType_Optional); return nullptr; }
	/** @brief Returns a pointer to HostType_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const ERHAPI_HostType* GetHostTypeOrNull() const { if (HostType_IsSet) return (&HostType_Optional); return nullptr; }
	/** @brief Sets the value of HostType_Optional and also sets HostType_IsSet to true */
	FORCEINLINE void SetHostType(const ERHAPI_HostType& NewValue) { HostType_Optional = NewValue; HostType_IsSet = true;  }
	/** @brief Sets the value of HostType_Optional and also sets HostType_IsSet to true using move semantics */
	FORCEINLINE void SetHostType(ERHAPI_HostType&& NewValue) { HostType_Optional = NewValue; HostType_IsSet = true;  }
	/** @brief Clears the value of HostType_Optional and sets HostType_IsSet to false */
	void ClearHostType() { HostType_IsSet = false;  }

	/** @brief UUID of the player hosting during this event */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FGuid HostPlayerUuid_Optional{  };
	/** @brief true if HostPlayerUuid_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool HostPlayerUuid_IsSet{ false };
	/** @brief Gets the value of HostPlayerUuid_Optional, regardless of it having been set */
	FORCEINLINE FGuid& GetHostPlayerUuid() { return HostPlayerUuid_Optional; }
	/** @brief Gets the value of HostPlayerUuid_Optional, regardless of it having been set */
	FORCEINLINE const FGuid& GetHostPlayerUuid() const { return HostPlayerUuid_Optional; }
	/** @brief Gets the value of HostPlayerUuid_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FGuid& GetHostPlayerUuid(const FGuid& DefaultValue) const { if (HostPlayerUuid_IsSet) return HostPlayerUuid_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of HostPlayerUuid_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetHostPlayerUuid(FGuid& OutValue) const { if (HostPlayerUuid_IsSet) OutValue = HostPlayerUuid_Optional; return HostPlayerUuid_IsSet; }
	/** @brief Returns a pointer to HostPlayerUuid_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FGuid* GetHostPlayerUuidOrNull() { if (HostPlayerUuid_IsSet) return (&HostPlayerUuid_Optional); return nullptr; }
	/** @brief Returns a pointer to HostPlayerUuid_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FGuid* GetHostPlayerUuidOrNull() const { if (HostPlayerUuid_IsSet) return (&HostPlayerUuid_Optional); return nullptr; }
	/** @brief Sets the value of HostPlayerUuid_Optional and also sets HostPlayerUuid_IsSet to true */
	FORCEINLINE void SetHostPlayerUuid(const FGuid& NewValue) { HostPlayerUuid_Optional = NewValue; HostPlayerUuid_IsSet = true;  }
	/** @brief Sets the value of HostPlayerUuid_Optional and also sets HostPlayerUuid_IsSet to true using move semantics */
	FORCEINLINE void SetHostPlayerUuid(FGuid&& NewValue) { HostPlayerUuid_Optional = NewValue; HostPlayerUuid_IsSet = true;  }
	/** @brief Clears the value of HostPlayerUuid_Optional and sets HostPlayerUuid_IsSet to false */
	void ClearHostPlayerUuid() { HostPlayerUuid_IsSet = false;  }

	/** @brief ID of the instance request template being used in this event */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FGuid InstanceRequestTemplate_Optional{  };
	/** @brief true if InstanceRequestTemplate_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool InstanceRequestTemplate_IsSet{ false };
	/** @brief Gets the value of InstanceRequestTemplate_Optional, regardless of it having been set */
	FORCEINLINE FGuid& GetInstanceRequestTemplate() { return InstanceRequestTemplate_Optional; }
	/** @brief Gets the value of InstanceRequestTemplate_Optional, regardless of it having been set */
	FORCEINLINE const FGuid& GetInstanceRequestTemplate() const { return InstanceRequestTemplate_Optional; }
	/** @brief Gets the value of InstanceRequestTemplate_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FGuid& GetInstanceRequestTemplate(const FGuid& DefaultValue) const { if (InstanceRequestTemplate_IsSet) return InstanceRequestTemplate_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of InstanceRequestTemplate_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetInstanceRequestTemplate(FGuid& OutValue) const { if (InstanceRequestTemplate_IsSet) OutValue = InstanceRequestTemplate_Optional; return InstanceRequestTemplate_IsSet; }
	/** @brief Returns a pointer to InstanceRequestTemplate_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FGuid* GetInstanceRequestTemplateOrNull() { if (InstanceRequestTemplate_IsSet) return (&InstanceRequestTemplate_Optional); return nullptr; }
	/** @brief Returns a pointer to InstanceRequestTemplate_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FGuid* GetInstanceRequestTemplateOrNull() const { if (InstanceRequestTemplate_IsSet) return (&InstanceRequestTemplate_Optional); return nullptr; }
	/** @brief Sets the value of InstanceRequestTemplate_Optional and also sets InstanceRequestTemplate_IsSet to true */
	FORCEINLINE void SetInstanceRequestTemplate(const FGuid& NewValue) { InstanceRequestTemplate_Optional = NewValue; InstanceRequestTemplate_IsSet = true;  }
	/** @brief Sets the value of InstanceRequestTemplate_Optional and also sets InstanceRequestTemplate_IsSet to true using move semantics */
	FORCEINLINE void SetInstanceRequestTemplate(FGuid&& NewValue) { InstanceRequestTemplate_Optional = NewValue; InstanceRequestTemplate_IsSet = true;  }
	/** @brief Clears the value of InstanceRequestTemplate_Optional and sets InstanceRequestTemplate_IsSet to false */
	void ClearInstanceRequestTemplate() { InstanceRequestTemplate_IsSet = false;  }

	/** @brief Map being used in this event */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString Map_Optional{  };
	/** @brief true if Map_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Map_IsSet{ false };
	/** @brief Gets the value of Map_Optional, regardless of it having been set */
	FORCEINLINE FString& GetMap() { return Map_Optional; }
	/** @brief Gets the value of Map_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetMap() const { return Map_Optional; }
	/** @brief Gets the value of Map_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetMap(const FString& DefaultValue) const { if (Map_IsSet) return Map_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Map_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetMap(FString& OutValue) const { if (Map_IsSet) OutValue = Map_Optional; return Map_IsSet; }
	/** @brief Returns a pointer to Map_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetMapOrNull() { if (Map_IsSet) return (&Map_Optional); return nullptr; }
	/** @brief Returns a pointer to Map_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetMapOrNull() const { if (Map_IsSet) return (&Map_Optional); return nullptr; }
	/** @brief Sets the value of Map_Optional and also sets Map_IsSet to true */
	FORCEINLINE void SetMap(const FString& NewValue) { Map_Optional = NewValue; Map_IsSet = true;  }
	/** @brief Sets the value of Map_Optional and also sets Map_IsSet to true using move semantics */
	FORCEINLINE void SetMap(FString&& NewValue) { Map_Optional = NewValue; Map_IsSet = true;  }
	/** @brief Clears the value of Map_Optional and sets Map_IsSet to false */
	void ClearMap() { Map_IsSet = false;  }

	/** @brief Mode being used in this event */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString Mode_Optional{  };
	/** @brief true if Mode_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Mode_IsSet{ false };
	/** @brief Gets the value of Mode_Optional, regardless of it having been set */
	FORCEINLINE FString& GetMode() { return Mode_Optional; }
	/** @brief Gets the value of Mode_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetMode() const { return Mode_Optional; }
	/** @brief Gets the value of Mode_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetMode(const FString& DefaultValue) const { if (Mode_IsSet) return Mode_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Mode_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetMode(FString& OutValue) const { if (Mode_IsSet) OutValue = Mode_Optional; return Mode_IsSet; }
	/** @brief Returns a pointer to Mode_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetModeOrNull() { if (Mode_IsSet) return (&Mode_Optional); return nullptr; }
	/** @brief Returns a pointer to Mode_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetModeOrNull() const { if (Mode_IsSet) return (&Mode_Optional); return nullptr; }
	/** @brief Sets the value of Mode_Optional and also sets Mode_IsSet to true */
	FORCEINLINE void SetMode(const FString& NewValue) { Mode_Optional = NewValue; Mode_IsSet = true;  }
	/** @brief Sets the value of Mode_Optional and also sets Mode_IsSet to true using move semantics */
	FORCEINLINE void SetMode(FString&& NewValue) { Mode_Optional = NewValue; Mode_IsSet = true;  }
	/** @brief Clears the value of Mode_Optional and sets Mode_IsSet to false */
	void ClearMode() { Mode_IsSet = false;  }

	/** @brief Allocation ID of instance in this event */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString AllocationId_Optional{  };
	/** @brief true if AllocationId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool AllocationId_IsSet{ false };
	/** @brief Gets the value of AllocationId_Optional, regardless of it having been set */
	FORCEINLINE FString& GetAllocationId() { return AllocationId_Optional; }
	/** @brief Gets the value of AllocationId_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetAllocationId() const { return AllocationId_Optional; }
	/** @brief Gets the value of AllocationId_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetAllocationId(const FString& DefaultValue) const { if (AllocationId_IsSet) return AllocationId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of AllocationId_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetAllocationId(FString& OutValue) const { if (AllocationId_IsSet) OutValue = AllocationId_Optional; return AllocationId_IsSet; }
	/** @brief Returns a pointer to AllocationId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetAllocationIdOrNull() { if (AllocationId_IsSet) return (&AllocationId_Optional); return nullptr; }
	/** @brief Returns a pointer to AllocationId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetAllocationIdOrNull() const { if (AllocationId_IsSet) return (&AllocationId_Optional); return nullptr; }
	/** @brief Sets the value of AllocationId_Optional and also sets AllocationId_IsSet to true */
	FORCEINLINE void SetAllocationId(const FString& NewValue) { AllocationId_Optional = NewValue; AllocationId_IsSet = true;  }
	/** @brief Sets the value of AllocationId_Optional and also sets AllocationId_IsSet to true using move semantics */
	FORCEINLINE void SetAllocationId(FString&& NewValue) { AllocationId_Optional = NewValue; AllocationId_IsSet = true;  }
	/** @brief Clears the value of AllocationId_Optional and sets AllocationId_IsSet to false */
	void ClearAllocationId() { AllocationId_IsSet = false;  }

	/** @brief Instance's joinability status */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	ERHAPI_InstanceJoinableStatus JoinStatus_Optional{  };
	/** @brief true if JoinStatus_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool JoinStatus_IsSet{ false };
	/** @brief Gets the value of JoinStatus_Optional, regardless of it having been set */
	FORCEINLINE ERHAPI_InstanceJoinableStatus& GetJoinStatus() { return JoinStatus_Optional; }
	/** @brief Gets the value of JoinStatus_Optional, regardless of it having been set */
	FORCEINLINE const ERHAPI_InstanceJoinableStatus& GetJoinStatus() const { return JoinStatus_Optional; }
	/** @brief Gets the value of JoinStatus_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const ERHAPI_InstanceJoinableStatus& GetJoinStatus(const ERHAPI_InstanceJoinableStatus& DefaultValue) const { if (JoinStatus_IsSet) return JoinStatus_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of JoinStatus_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetJoinStatus(ERHAPI_InstanceJoinableStatus& OutValue) const { if (JoinStatus_IsSet) OutValue = JoinStatus_Optional; return JoinStatus_IsSet; }
	/** @brief Returns a pointer to JoinStatus_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE ERHAPI_InstanceJoinableStatus* GetJoinStatusOrNull() { if (JoinStatus_IsSet) return (&JoinStatus_Optional); return nullptr; }
	/** @brief Returns a pointer to JoinStatus_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const ERHAPI_InstanceJoinableStatus* GetJoinStatusOrNull() const { if (JoinStatus_IsSet) return (&JoinStatus_Optional); return nullptr; }
	/** @brief Sets the value of JoinStatus_Optional and also sets JoinStatus_IsSet to true */
	FORCEINLINE void SetJoinStatus(const ERHAPI_InstanceJoinableStatus& NewValue) { JoinStatus_Optional = NewValue; JoinStatus_IsSet = true;  }
	/** @brief Sets the value of JoinStatus_Optional and also sets JoinStatus_IsSet to true using move semantics */
	FORCEINLINE void SetJoinStatus(ERHAPI_InstanceJoinableStatus&& NewValue) { JoinStatus_Optional = NewValue; JoinStatus_IsSet = true;  }
	/** @brief Clears the value of JoinStatus_Optional and sets JoinStatus_IsSet to false */
	void ClearJoinStatus() { JoinStatus_IsSet = false;  }

	/** @brief Instance's join parameters for this event */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_JoinParams JoinParams_Optional{  };
	/** @brief true if JoinParams_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool JoinParams_IsSet{ false };
	/** @brief Gets the value of JoinParams_Optional, regardless of it having been set */
	FORCEINLINE FRHAPI_JoinParams& GetJoinParams() { return JoinParams_Optional; }
	/** @brief Gets the value of JoinParams_Optional, regardless of it having been set */
	FORCEINLINE const FRHAPI_JoinParams& GetJoinParams() const { return JoinParams_Optional; }
	/** @brief Gets the value of JoinParams_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FRHAPI_JoinParams& GetJoinParams(const FRHAPI_JoinParams& DefaultValue) const { if (JoinParams_IsSet) return JoinParams_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of JoinParams_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetJoinParams(FRHAPI_JoinParams& OutValue) const { if (JoinParams_IsSet) OutValue = JoinParams_Optional; return JoinParams_IsSet; }
	/** @brief Returns a pointer to JoinParams_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FRHAPI_JoinParams* GetJoinParamsOrNull() { if (JoinParams_IsSet) return (&JoinParams_Optional); return nullptr; }
	/** @brief Returns a pointer to JoinParams_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FRHAPI_JoinParams* GetJoinParamsOrNull() const { if (JoinParams_IsSet) return (&JoinParams_Optional); return nullptr; }
	/** @brief Sets the value of JoinParams_Optional and also sets JoinParams_IsSet to true */
	FORCEINLINE void SetJoinParams(const FRHAPI_JoinParams& NewValue) { JoinParams_Optional = NewValue; JoinParams_IsSet = true;  }
	/** @brief Sets the value of JoinParams_Optional and also sets JoinParams_IsSet to true using move semantics */
	FORCEINLINE void SetJoinParams(FRHAPI_JoinParams&& NewValue) { JoinParams_Optional = NewValue; JoinParams_IsSet = true;  }
	/** @brief Clears the value of JoinParams_Optional and sets JoinParams_IsSet to false */
	void ClearJoinParams() { JoinParams_IsSet = false;  }

	/** @brief Instance's health status for this event */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	ERHAPI_InstanceHealthStatus InstanceHealth_Optional{  };
	/** @brief true if InstanceHealth_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool InstanceHealth_IsSet{ false };
	/** @brief Gets the value of InstanceHealth_Optional, regardless of it having been set */
	FORCEINLINE ERHAPI_InstanceHealthStatus& GetInstanceHealth() { return InstanceHealth_Optional; }
	/** @brief Gets the value of InstanceHealth_Optional, regardless of it having been set */
	FORCEINLINE const ERHAPI_InstanceHealthStatus& GetInstanceHealth() const { return InstanceHealth_Optional; }
	/** @brief Gets the value of InstanceHealth_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const ERHAPI_InstanceHealthStatus& GetInstanceHealth(const ERHAPI_InstanceHealthStatus& DefaultValue) const { if (InstanceHealth_IsSet) return InstanceHealth_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of InstanceHealth_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetInstanceHealth(ERHAPI_InstanceHealthStatus& OutValue) const { if (InstanceHealth_IsSet) OutValue = InstanceHealth_Optional; return InstanceHealth_IsSet; }
	/** @brief Returns a pointer to InstanceHealth_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE ERHAPI_InstanceHealthStatus* GetInstanceHealthOrNull() { if (InstanceHealth_IsSet) return (&InstanceHealth_Optional); return nullptr; }
	/** @brief Returns a pointer to InstanceHealth_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const ERHAPI_InstanceHealthStatus* GetInstanceHealthOrNull() const { if (InstanceHealth_IsSet) return (&InstanceHealth_Optional); return nullptr; }
	/** @brief Sets the value of InstanceHealth_Optional and also sets InstanceHealth_IsSet to true */
	FORCEINLINE void SetInstanceHealth(const ERHAPI_InstanceHealthStatus& NewValue) { InstanceHealth_Optional = NewValue; InstanceHealth_IsSet = true;  }
	/** @brief Sets the value of InstanceHealth_Optional and also sets InstanceHealth_IsSet to true using move semantics */
	FORCEINLINE void SetInstanceHealth(ERHAPI_InstanceHealthStatus&& NewValue) { InstanceHealth_Optional = NewValue; InstanceHealth_IsSet = true;  }
	/** @brief Clears the value of InstanceHealth_Optional and sets InstanceHealth_IsSet to false */
	void ClearInstanceHealth() { InstanceHealth_IsSet = false;  }

	/** @brief ID for the queue in this event */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString QueueId_Optional{  };
	/** @brief true if QueueId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool QueueId_IsSet{ false };
	/** @brief Gets the value of QueueId_Optional, regardless of it having been set */
	FORCEINLINE FString& GetQueueId() { return QueueId_Optional; }
	/** @brief Gets the value of QueueId_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetQueueId() const { return QueueId_Optional; }
	/** @brief Gets the value of QueueId_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetQueueId(const FString& DefaultValue) const { if (QueueId_IsSet) return QueueId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of QueueId_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetQueueId(FString& OutValue) const { if (QueueId_IsSet) OutValue = QueueId_Optional; return QueueId_IsSet; }
	/** @brief Returns a pointer to QueueId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetQueueIdOrNull() { if (QueueId_IsSet) return (&QueueId_Optional); return nullptr; }
	/** @brief Returns a pointer to QueueId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetQueueIdOrNull() const { if (QueueId_IsSet) return (&QueueId_Optional); return nullptr; }
	/** @brief Sets the value of QueueId_Optional and also sets QueueId_IsSet to true */
	FORCEINLINE void SetQueueId(const FString& NewValue) { QueueId_Optional = NewValue; QueueId_IsSet = true;  }
	/** @brief Sets the value of QueueId_Optional and also sets QueueId_IsSet to true using move semantics */
	FORCEINLINE void SetQueueId(FString&& NewValue) { QueueId_Optional = NewValue; QueueId_IsSet = true;  }
	/** @brief Clears the value of QueueId_Optional and sets QueueId_IsSet to false */
	void ClearQueueId() { QueueId_IsSet = false;  }

	/** @brief Matchmaking ticket id in this event */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString TicketId_Optional{  };
	/** @brief true if TicketId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool TicketId_IsSet{ false };
	/** @brief Gets the value of TicketId_Optional, regardless of it having been set */
	FORCEINLINE FString& GetTicketId() { return TicketId_Optional; }
	/** @brief Gets the value of TicketId_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetTicketId() const { return TicketId_Optional; }
	/** @brief Gets the value of TicketId_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetTicketId(const FString& DefaultValue) const { if (TicketId_IsSet) return TicketId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of TicketId_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetTicketId(FString& OutValue) const { if (TicketId_IsSet) OutValue = TicketId_Optional; return TicketId_IsSet; }
	/** @brief Returns a pointer to TicketId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetTicketIdOrNull() { if (TicketId_IsSet) return (&TicketId_Optional); return nullptr; }
	/** @brief Returns a pointer to TicketId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetTicketIdOrNull() const { if (TicketId_IsSet) return (&TicketId_Optional); return nullptr; }
	/** @brief Sets the value of TicketId_Optional and also sets TicketId_IsSet to true */
	FORCEINLINE void SetTicketId(const FString& NewValue) { TicketId_Optional = NewValue; TicketId_IsSet = true;  }
	/** @brief Sets the value of TicketId_Optional and also sets TicketId_IsSet to true using move semantics */
	FORCEINLINE void SetTicketId(FString&& NewValue) { TicketId_Optional = NewValue; TicketId_IsSet = true;  }
	/** @brief Clears the value of TicketId_Optional and sets TicketId_IsSet to false */
	void ClearTicketId() { TicketId_IsSet = false;  }

	/** @brief Additional matchmaking parameters in this event */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_AdditionalJoinParams AdditionalParams_Optional{  };
	/** @brief true if AdditionalParams_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool AdditionalParams_IsSet{ false };
	/** @brief Gets the value of AdditionalParams_Optional, regardless of it having been set */
	FORCEINLINE FRHAPI_AdditionalJoinParams& GetAdditionalParams() { return AdditionalParams_Optional; }
	/** @brief Gets the value of AdditionalParams_Optional, regardless of it having been set */
	FORCEINLINE const FRHAPI_AdditionalJoinParams& GetAdditionalParams() const { return AdditionalParams_Optional; }
	/** @brief Gets the value of AdditionalParams_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FRHAPI_AdditionalJoinParams& GetAdditionalParams(const FRHAPI_AdditionalJoinParams& DefaultValue) const { if (AdditionalParams_IsSet) return AdditionalParams_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of AdditionalParams_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetAdditionalParams(FRHAPI_AdditionalJoinParams& OutValue) const { if (AdditionalParams_IsSet) OutValue = AdditionalParams_Optional; return AdditionalParams_IsSet; }
	/** @brief Returns a pointer to AdditionalParams_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FRHAPI_AdditionalJoinParams* GetAdditionalParamsOrNull() { if (AdditionalParams_IsSet) return (&AdditionalParams_Optional); return nullptr; }
	/** @brief Returns a pointer to AdditionalParams_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FRHAPI_AdditionalJoinParams* GetAdditionalParamsOrNull() const { if (AdditionalParams_IsSet) return (&AdditionalParams_Optional); return nullptr; }
	/** @brief Sets the value of AdditionalParams_Optional and also sets AdditionalParams_IsSet to true */
	FORCEINLINE void SetAdditionalParams(const FRHAPI_AdditionalJoinParams& NewValue) { AdditionalParams_Optional = NewValue; AdditionalParams_IsSet = true;  }
	/** @brief Sets the value of AdditionalParams_Optional and also sets AdditionalParams_IsSet to true using move semantics */
	FORCEINLINE void SetAdditionalParams(FRHAPI_AdditionalJoinParams&& NewValue) { AdditionalParams_Optional = NewValue; AdditionalParams_IsSet = true;  }
	/** @brief Clears the value of AdditionalParams_Optional and sets AdditionalParams_IsSet to false */
	void ClearAdditionalParams() { AdditionalParams_IsSet = false;  }

	/** @brief Map preferences in this event */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TArray<FString> MapPreferences_Optional{  };
	/** @brief true if MapPreferences_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool MapPreferences_IsSet{ false };
	/** @brief Gets the value of MapPreferences_Optional, regardless of it having been set */
	FORCEINLINE TArray<FString>& GetMapPreferences() { return MapPreferences_Optional; }
	/** @brief Gets the value of MapPreferences_Optional, regardless of it having been set */
	FORCEINLINE const TArray<FString>& GetMapPreferences() const { return MapPreferences_Optional; }
	/** @brief Gets the value of MapPreferences_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const TArray<FString>& GetMapPreferences(const TArray<FString>& DefaultValue) const { if (MapPreferences_IsSet) return MapPreferences_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of MapPreferences_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetMapPreferences(TArray<FString>& OutValue) const { if (MapPreferences_IsSet) OutValue = MapPreferences_Optional; return MapPreferences_IsSet; }
	/** @brief Returns a pointer to MapPreferences_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE TArray<FString>* GetMapPreferencesOrNull() { if (MapPreferences_IsSet) return (&MapPreferences_Optional); return nullptr; }
	/** @brief Returns a pointer to MapPreferences_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const TArray<FString>* GetMapPreferencesOrNull() const { if (MapPreferences_IsSet) return (&MapPreferences_Optional); return nullptr; }
	/** @brief Sets the value of MapPreferences_Optional and also sets MapPreferences_IsSet to true */
	FORCEINLINE void SetMapPreferences(const TArray<FString>& NewValue) { MapPreferences_Optional = NewValue; MapPreferences_IsSet = true;  }
	/** @brief Sets the value of MapPreferences_Optional and also sets MapPreferences_IsSet to true using move semantics */
	FORCEINLINE void SetMapPreferences(TArray<FString>&& NewValue) { MapPreferences_Optional = NewValue; MapPreferences_IsSet = true;  }
	/** @brief Clears the value of MapPreferences_Optional and sets MapPreferences_IsSet to false */
	void ClearMapPreferences() { MapPreferences_IsSet = false;  }

	/** @brief ID of the session that was/is in a matchmaking queue for this event */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString QueuedSessionId_Optional{  };
	/** @brief true if QueuedSessionId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool QueuedSessionId_IsSet{ false };
	/** @brief Gets the value of QueuedSessionId_Optional, regardless of it having been set */
	FORCEINLINE FString& GetQueuedSessionId() { return QueuedSessionId_Optional; }
	/** @brief Gets the value of QueuedSessionId_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetQueuedSessionId() const { return QueuedSessionId_Optional; }
	/** @brief Gets the value of QueuedSessionId_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetQueuedSessionId(const FString& DefaultValue) const { if (QueuedSessionId_IsSet) return QueuedSessionId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of QueuedSessionId_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetQueuedSessionId(FString& OutValue) const { if (QueuedSessionId_IsSet) OutValue = QueuedSessionId_Optional; return QueuedSessionId_IsSet; }
	/** @brief Returns a pointer to QueuedSessionId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetQueuedSessionIdOrNull() { if (QueuedSessionId_IsSet) return (&QueuedSessionId_Optional); return nullptr; }
	/** @brief Returns a pointer to QueuedSessionId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetQueuedSessionIdOrNull() const { if (QueuedSessionId_IsSet) return (&QueuedSessionId_Optional); return nullptr; }
	/** @brief Sets the value of QueuedSessionId_Optional and also sets QueuedSessionId_IsSet to true */
	FORCEINLINE void SetQueuedSessionId(const FString& NewValue) { QueuedSessionId_Optional = NewValue; QueuedSessionId_IsSet = true;  }
	/** @brief Sets the value of QueuedSessionId_Optional and also sets QueuedSessionId_IsSet to true using move semantics */
	FORCEINLINE void SetQueuedSessionId(FString&& NewValue) { QueuedSessionId_Optional = NewValue; QueuedSessionId_IsSet = true;  }
	/** @brief Clears the value of QueuedSessionId_Optional and sets QueuedSessionId_IsSet to false */
	void ClearQueuedSessionId() { QueuedSessionId_IsSet = false;  }

	/** @brief ID of a match that was associated with this session */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString MatchId_Optional{  };
	/** @brief true if MatchId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool MatchId_IsSet{ false };
	/** @brief Gets the value of MatchId_Optional, regardless of it having been set */
	FORCEINLINE FString& GetMatchId() { return MatchId_Optional; }
	/** @brief Gets the value of MatchId_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetMatchId() const { return MatchId_Optional; }
	/** @brief Gets the value of MatchId_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetMatchId(const FString& DefaultValue) const { if (MatchId_IsSet) return MatchId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of MatchId_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetMatchId(FString& OutValue) const { if (MatchId_IsSet) OutValue = MatchId_Optional; return MatchId_IsSet; }
	/** @brief Returns a pointer to MatchId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetMatchIdOrNull() { if (MatchId_IsSet) return (&MatchId_Optional); return nullptr; }
	/** @brief Returns a pointer to MatchId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetMatchIdOrNull() const { if (MatchId_IsSet) return (&MatchId_Optional); return nullptr; }
	/** @brief Sets the value of MatchId_Optional and also sets MatchId_IsSet to true */
	FORCEINLINE void SetMatchId(const FString& NewValue) { MatchId_Optional = NewValue; MatchId_IsSet = true;  }
	/** @brief Sets the value of MatchId_Optional and also sets MatchId_IsSet to true using move semantics */
	FORCEINLINE void SetMatchId(FString&& NewValue) { MatchId_Optional = NewValue; MatchId_IsSet = true;  }
	/** @brief Clears the value of MatchId_Optional and sets MatchId_IsSet to false */
	void ClearMatchId() { MatchId_IsSet = false;  }

	/** @brief The total time in seconds that the ticket waited before being assigned to a match */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 TicketWaitSeconds_Optional{ 0 };
	/** @brief true if TicketWaitSeconds_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool TicketWaitSeconds_IsSet{ false };
	/** @brief Gets the value of TicketWaitSeconds_Optional, regardless of it having been set */
	FORCEINLINE int32& GetTicketWaitSeconds() { return TicketWaitSeconds_Optional; }
	/** @brief Gets the value of TicketWaitSeconds_Optional, regardless of it having been set */
	FORCEINLINE const int32& GetTicketWaitSeconds() const { return TicketWaitSeconds_Optional; }
	/** @brief Gets the value of TicketWaitSeconds_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const int32& GetTicketWaitSeconds(const int32& DefaultValue) const { if (TicketWaitSeconds_IsSet) return TicketWaitSeconds_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of TicketWaitSeconds_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetTicketWaitSeconds(int32& OutValue) const { if (TicketWaitSeconds_IsSet) OutValue = TicketWaitSeconds_Optional; return TicketWaitSeconds_IsSet; }
	/** @brief Returns a pointer to TicketWaitSeconds_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE int32* GetTicketWaitSecondsOrNull() { if (TicketWaitSeconds_IsSet) return (&TicketWaitSeconds_Optional); return nullptr; }
	/** @brief Returns a pointer to TicketWaitSeconds_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const int32* GetTicketWaitSecondsOrNull() const { if (TicketWaitSeconds_IsSet) return (&TicketWaitSeconds_Optional); return nullptr; }
	/** @brief Sets the value of TicketWaitSeconds_Optional and also sets TicketWaitSeconds_IsSet to true */
	FORCEINLINE void SetTicketWaitSeconds(const int32& NewValue) { TicketWaitSeconds_Optional = NewValue; TicketWaitSeconds_IsSet = true;  }
	/** @brief Sets the value of TicketWaitSeconds_Optional and also sets TicketWaitSeconds_IsSet to true using move semantics */
	FORCEINLINE void SetTicketWaitSeconds(int32&& NewValue) { TicketWaitSeconds_Optional = NewValue; TicketWaitSeconds_IsSet = true;  }
	/** @brief Clears the value of TicketWaitSeconds_Optional and sets TicketWaitSeconds_IsSet to false */
	void ClearTicketWaitSeconds() { TicketWaitSeconds_Optional = 0; TicketWaitSeconds_IsSet = false;  }
	/** @brief Returns the default value of TicketWaitSeconds */
	FORCEINLINE int32 GetDefaultValue_TicketWaitSeconds() { return 0; }

	/** @brief ID of the MatchMakingProfile used to create this session */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString MatchMakingProfileId_Optional{  };
	/** @brief true if MatchMakingProfileId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool MatchMakingProfileId_IsSet{ false };
	/** @brief Gets the value of MatchMakingProfileId_Optional, regardless of it having been set */
	FORCEINLINE FString& GetMatchMakingProfileId() { return MatchMakingProfileId_Optional; }
	/** @brief Gets the value of MatchMakingProfileId_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetMatchMakingProfileId() const { return MatchMakingProfileId_Optional; }
	/** @brief Gets the value of MatchMakingProfileId_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetMatchMakingProfileId(const FString& DefaultValue) const { if (MatchMakingProfileId_IsSet) return MatchMakingProfileId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of MatchMakingProfileId_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetMatchMakingProfileId(FString& OutValue) const { if (MatchMakingProfileId_IsSet) OutValue = MatchMakingProfileId_Optional; return MatchMakingProfileId_IsSet; }
	/** @brief Returns a pointer to MatchMakingProfileId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetMatchMakingProfileIdOrNull() { if (MatchMakingProfileId_IsSet) return (&MatchMakingProfileId_Optional); return nullptr; }
	/** @brief Returns a pointer to MatchMakingProfileId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetMatchMakingProfileIdOrNull() const { if (MatchMakingProfileId_IsSet) return (&MatchMakingProfileId_Optional); return nullptr; }
	/** @brief Sets the value of MatchMakingProfileId_Optional and also sets MatchMakingProfileId_IsSet to true */
	FORCEINLINE void SetMatchMakingProfileId(const FString& NewValue) { MatchMakingProfileId_Optional = NewValue; MatchMakingProfileId_IsSet = true;  }
	/** @brief Sets the value of MatchMakingProfileId_Optional and also sets MatchMakingProfileId_IsSet to true using move semantics */
	FORCEINLINE void SetMatchMakingProfileId(FString&& NewValue) { MatchMakingProfileId_Optional = NewValue; MatchMakingProfileId_IsSet = true;  }
	/** @brief Clears the value of MatchMakingProfileId_Optional and sets MatchMakingProfileId_IsSet to false */
	void ClearMatchMakingProfileId() { MatchMakingProfileId_IsSet = false;  }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FGuid RequestingUserUuid_Optional{  };
	/** @brief true if RequestingUserUuid_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool RequestingUserUuid_IsSet{ false };
	/** @brief Gets the value of RequestingUserUuid_Optional, regardless of it having been set */
	FORCEINLINE FGuid& GetRequestingUserUuid() { return RequestingUserUuid_Optional; }
	/** @brief Gets the value of RequestingUserUuid_Optional, regardless of it having been set */
	FORCEINLINE const FGuid& GetRequestingUserUuid() const { return RequestingUserUuid_Optional; }
	/** @brief Gets the value of RequestingUserUuid_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FGuid& GetRequestingUserUuid(const FGuid& DefaultValue) const { if (RequestingUserUuid_IsSet) return RequestingUserUuid_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of RequestingUserUuid_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetRequestingUserUuid(FGuid& OutValue) const { if (RequestingUserUuid_IsSet) OutValue = RequestingUserUuid_Optional; return RequestingUserUuid_IsSet; }
	/** @brief Returns a pointer to RequestingUserUuid_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FGuid* GetRequestingUserUuidOrNull() { if (RequestingUserUuid_IsSet) return (&RequestingUserUuid_Optional); return nullptr; }
	/** @brief Returns a pointer to RequestingUserUuid_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FGuid* GetRequestingUserUuidOrNull() const { if (RequestingUserUuid_IsSet) return (&RequestingUserUuid_Optional); return nullptr; }
	/** @brief Sets the value of RequestingUserUuid_Optional and also sets RequestingUserUuid_IsSet to true */
	FORCEINLINE void SetRequestingUserUuid(const FGuid& NewValue) { RequestingUserUuid_Optional = NewValue; RequestingUserUuid_IsSet = true;  }
	/** @brief Sets the value of RequestingUserUuid_Optional and also sets RequestingUserUuid_IsSet to true using move semantics */
	FORCEINLINE void SetRequestingUserUuid(FGuid&& NewValue) { RequestingUserUuid_Optional = NewValue; RequestingUserUuid_IsSet = true;  }
	/** @brief Clears the value of RequestingUserUuid_Optional and sets RequestingUserUuid_IsSet to false */
	void ClearRequestingUserUuid() { RequestingUserUuid_IsSet = false;  }

	/** @brief Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FDateTime EventDatetime{  };
	/** @brief Gets the value of EventDatetime */
	FORCEINLINE FDateTime& GetEventDatetime() { return EventDatetime; }
	/** @brief Gets the value of EventDatetime */
	FORCEINLINE const FDateTime& GetEventDatetime() const { return EventDatetime; }
	/** @brief Sets the value of EventDatetime */
	FORCEINLINE void SetEventDatetime(const FDateTime& NewValue) { EventDatetime = NewValue;   }
	/** @brief Sets the value of EventDatetime using move semantics */
	FORCEINLINE void SetEventDatetime(FDateTime&& NewValue) { EventDatetime = NewValue;   }
};

/** @} */
