// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "UserLinkHistoryEntry.h"
#include "UserLinkHistory.generated.h"

/** @defgroup RHAPI_UserLinkHistory RallyHere API Model UserLinkHistory
 *  @{
 */

/**
 * @brief 
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_UserLinkHistory : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	/** @brief The link history entries */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TArray<FRHAPI_UserLinkHistoryEntry> Entries{  };
	/** @brief Gets the value of Entries */
	FORCEINLINE TArray<FRHAPI_UserLinkHistoryEntry>& GetEntries() { return Entries; }
	/** @brief Gets the value of Entries */
	FORCEINLINE const TArray<FRHAPI_UserLinkHistoryEntry>& GetEntries() const { return Entries; }
	/** @brief Sets the value of Entries */
	FORCEINLINE void SetEntries(const TArray<FRHAPI_UserLinkHistoryEntry>& NewValue) { Entries = NewValue;   }
	/** @brief Sets the value of Entries using move semantics */
	FORCEINLINE void SetEntries(TArray<FRHAPI_UserLinkHistoryEntry>&& NewValue) { Entries = NewValue;   }

	/** @brief Token to retrieve the next page of results */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString ContinuationToken_Optional{  };
	/** @brief true if ContinuationToken_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool ContinuationToken_IsSet{ false };
	/** @brief Gets the value of ContinuationToken_Optional, regardless of it having been set */
	FORCEINLINE FString& GetContinuationToken() { return ContinuationToken_Optional; }
	/** @brief Gets the value of ContinuationToken_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetContinuationToken() const { return ContinuationToken_Optional; }
	/** @brief Gets the value of ContinuationToken_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetContinuationToken(const FString& DefaultValue) const { if (ContinuationToken_IsSet) return ContinuationToken_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of ContinuationToken_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetContinuationToken(FString& OutValue) const { if (ContinuationToken_IsSet) OutValue = ContinuationToken_Optional; return ContinuationToken_IsSet; }
	/** @brief Returns a pointer to ContinuationToken_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetContinuationTokenOrNull() { if (ContinuationToken_IsSet) return (&ContinuationToken_Optional); return nullptr; }
	/** @brief Returns a pointer to ContinuationToken_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetContinuationTokenOrNull() const { if (ContinuationToken_IsSet) return (&ContinuationToken_Optional); return nullptr; }
	/** @brief Sets the value of ContinuationToken_Optional and also sets ContinuationToken_IsSet to true */
	FORCEINLINE void SetContinuationToken(const FString& NewValue) { ContinuationToken_Optional = NewValue; ContinuationToken_IsSet = true;  }
	/** @brief Sets the value of ContinuationToken_Optional and also sets ContinuationToken_IsSet to true using move semantics */
	FORCEINLINE void SetContinuationToken(FString&& NewValue) { ContinuationToken_Optional = NewValue; ContinuationToken_IsSet = true;  }
	/** @brief Clears the value of ContinuationToken_Optional and sets ContinuationToken_IsSet to false */
	void ClearContinuationToken() { ContinuationToken_IsSet = false;  }
};

/** @} */
