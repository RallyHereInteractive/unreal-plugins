// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "StageEntityType.h"
#include "StageMatchmakeParams.generated.h"

/** @defgroup RHAPI_StageMatchmakeParams RallyHere API Model StageMatchmakeParams
 *  @{
 */

/**
 * @brief Parameters used to select a stage to play against.  MMR considerations: if &#x60;mmr_internal_min&#x60; and &#x60;mmr_internal_max&#x60; are non-empty, a random stage will be returned within the given range. if &#x60;mmr_internal_min&#x60; and &#x60;mmr_internal_max&#x60; are empty, internally configured MMR ranges will be used to select a stage.
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_StageMatchmakeParams : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString V_Optional{  };
	/** @brief true if V_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool V_IsSet{ false };
	/** @brief true if V_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool V_IsNull{ false };
	/** @brief Gets the value of V_Optional, regardless of it having been set */
	FORCEINLINE FString& GetV() { return V_Optional; }
	/** @brief Gets the value of V_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetV() const { return V_Optional; }
	/** @brief Gets the value of V_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetV(const FString& DefaultValue) const { if (V_IsSet) return V_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of V_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetV(FString& OutValue) const { if (V_IsSet && !V_IsNull) OutValue = V_Optional; return V_IsSet; }
	/** @brief Returns a pointer to V_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetVOrNull() { if (V_IsSet) return (V_IsNull ? nullptr : &V_Optional); return nullptr; }
	/** @brief Returns a pointer to V_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetVOrNull() const { if (V_IsSet) return (V_IsNull ? nullptr : &V_Optional); return nullptr; }
	/** @brief Sets the value of V_Optional and also sets V_IsSet to true */
	FORCEINLINE void SetV(const FString& NewValue) { V_Optional = NewValue; V_IsSet = true; V_IsNull = false; }
	/** @brief Sets the value of V_Optional and also sets V_IsSet to true using move semantics */
	FORCEINLINE void SetV(FString&& NewValue) { V_Optional = NewValue; V_IsSet = true; V_IsNull = false; }
	/** @brief Clears the value of V_Optional and sets V_IsSet to false */
	void ClearV() { V_IsSet = false; V_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetVToNull() { V_IsSet = true; V_IsNull = true; }
	/** @brief Checks whether V_Optional is set to null */
	FORCEINLINE bool IsVNull() const { return V_IsSet && V_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString Type1_Optional{  };
	/** @brief true if Type1_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Type1_IsSet{ false };
	/** @brief true if Type1_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Type1_IsNull{ false };
	/** @brief Gets the value of Type1_Optional, regardless of it having been set */
	FORCEINLINE FString& GetType1() { return Type1_Optional; }
	/** @brief Gets the value of Type1_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetType1() const { return Type1_Optional; }
	/** @brief Gets the value of Type1_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetType1(const FString& DefaultValue) const { if (Type1_IsSet) return Type1_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Type1_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetType1(FString& OutValue) const { if (Type1_IsSet && !Type1_IsNull) OutValue = Type1_Optional; return Type1_IsSet; }
	/** @brief Returns a pointer to Type1_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetType1OrNull() { if (Type1_IsSet) return (Type1_IsNull ? nullptr : &Type1_Optional); return nullptr; }
	/** @brief Returns a pointer to Type1_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetType1OrNull() const { if (Type1_IsSet) return (Type1_IsNull ? nullptr : &Type1_Optional); return nullptr; }
	/** @brief Sets the value of Type1_Optional and also sets Type1_IsSet to true */
	FORCEINLINE void SetType1(const FString& NewValue) { Type1_Optional = NewValue; Type1_IsSet = true; Type1_IsNull = false; }
	/** @brief Sets the value of Type1_Optional and also sets Type1_IsSet to true using move semantics */
	FORCEINLINE void SetType1(FString&& NewValue) { Type1_Optional = NewValue; Type1_IsSet = true; Type1_IsNull = false; }
	/** @brief Clears the value of Type1_Optional and sets Type1_IsSet to false */
	void ClearType1() { Type1_IsSet = false; Type1_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetType1ToNull() { Type1_IsSet = true; Type1_IsNull = true; }
	/** @brief Checks whether Type1_Optional is set to null */
	FORCEINLINE bool IsType1Null() const { return Type1_IsSet && Type1_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString Type2_Optional{  };
	/** @brief true if Type2_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Type2_IsSet{ false };
	/** @brief true if Type2_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Type2_IsNull{ false };
	/** @brief Gets the value of Type2_Optional, regardless of it having been set */
	FORCEINLINE FString& GetType2() { return Type2_Optional; }
	/** @brief Gets the value of Type2_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetType2() const { return Type2_Optional; }
	/** @brief Gets the value of Type2_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetType2(const FString& DefaultValue) const { if (Type2_IsSet) return Type2_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Type2_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetType2(FString& OutValue) const { if (Type2_IsSet && !Type2_IsNull) OutValue = Type2_Optional; return Type2_IsSet; }
	/** @brief Returns a pointer to Type2_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetType2OrNull() { if (Type2_IsSet) return (Type2_IsNull ? nullptr : &Type2_Optional); return nullptr; }
	/** @brief Returns a pointer to Type2_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetType2OrNull() const { if (Type2_IsSet) return (Type2_IsNull ? nullptr : &Type2_Optional); return nullptr; }
	/** @brief Sets the value of Type2_Optional and also sets Type2_IsSet to true */
	FORCEINLINE void SetType2(const FString& NewValue) { Type2_Optional = NewValue; Type2_IsSet = true; Type2_IsNull = false; }
	/** @brief Sets the value of Type2_Optional and also sets Type2_IsSet to true using move semantics */
	FORCEINLINE void SetType2(FString&& NewValue) { Type2_Optional = NewValue; Type2_IsSet = true; Type2_IsNull = false; }
	/** @brief Clears the value of Type2_Optional and sets Type2_IsSet to false */
	void ClearType2() { Type2_IsSet = false; Type2_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetType2ToNull() { Type2_IsSet = true; Type2_IsNull = true; }
	/** @brief Checks whether Type2_Optional is set to null */
	FORCEINLINE bool IsType2Null() const { return Type2_IsSet && Type2_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString Type3_Optional{  };
	/** @brief true if Type3_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Type3_IsSet{ false };
	/** @brief true if Type3_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Type3_IsNull{ false };
	/** @brief Gets the value of Type3_Optional, regardless of it having been set */
	FORCEINLINE FString& GetType3() { return Type3_Optional; }
	/** @brief Gets the value of Type3_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetType3() const { return Type3_Optional; }
	/** @brief Gets the value of Type3_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetType3(const FString& DefaultValue) const { if (Type3_IsSet) return Type3_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Type3_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetType3(FString& OutValue) const { if (Type3_IsSet && !Type3_IsNull) OutValue = Type3_Optional; return Type3_IsSet; }
	/** @brief Returns a pointer to Type3_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetType3OrNull() { if (Type3_IsSet) return (Type3_IsNull ? nullptr : &Type3_Optional); return nullptr; }
	/** @brief Returns a pointer to Type3_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetType3OrNull() const { if (Type3_IsSet) return (Type3_IsNull ? nullptr : &Type3_Optional); return nullptr; }
	/** @brief Sets the value of Type3_Optional and also sets Type3_IsSet to true */
	FORCEINLINE void SetType3(const FString& NewValue) { Type3_Optional = NewValue; Type3_IsSet = true; Type3_IsNull = false; }
	/** @brief Sets the value of Type3_Optional and also sets Type3_IsSet to true using move semantics */
	FORCEINLINE void SetType3(FString&& NewValue) { Type3_Optional = NewValue; Type3_IsSet = true; Type3_IsNull = false; }
	/** @brief Clears the value of Type3_Optional and sets Type3_IsSet to false */
	void ClearType3() { Type3_IsSet = false; Type3_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetType3ToNull() { Type3_IsSet = true; Type3_IsNull = true; }
	/** @brief Checks whether Type3_Optional is set to null */
	FORCEINLINE bool IsType3Null() const { return Type3_IsSet && Type3_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString Type4_Optional{  };
	/** @brief true if Type4_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Type4_IsSet{ false };
	/** @brief true if Type4_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Type4_IsNull{ false };
	/** @brief Gets the value of Type4_Optional, regardless of it having been set */
	FORCEINLINE FString& GetType4() { return Type4_Optional; }
	/** @brief Gets the value of Type4_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetType4() const { return Type4_Optional; }
	/** @brief Gets the value of Type4_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetType4(const FString& DefaultValue) const { if (Type4_IsSet) return Type4_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Type4_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetType4(FString& OutValue) const { if (Type4_IsSet && !Type4_IsNull) OutValue = Type4_Optional; return Type4_IsSet; }
	/** @brief Returns a pointer to Type4_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetType4OrNull() { if (Type4_IsSet) return (Type4_IsNull ? nullptr : &Type4_Optional); return nullptr; }
	/** @brief Returns a pointer to Type4_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetType4OrNull() const { if (Type4_IsSet) return (Type4_IsNull ? nullptr : &Type4_Optional); return nullptr; }
	/** @brief Sets the value of Type4_Optional and also sets Type4_IsSet to true */
	FORCEINLINE void SetType4(const FString& NewValue) { Type4_Optional = NewValue; Type4_IsSet = true; Type4_IsNull = false; }
	/** @brief Sets the value of Type4_Optional and also sets Type4_IsSet to true using move semantics */
	FORCEINLINE void SetType4(FString&& NewValue) { Type4_Optional = NewValue; Type4_IsSet = true; Type4_IsNull = false; }
	/** @brief Clears the value of Type4_Optional and sets Type4_IsSet to false */
	void ClearType4() { Type4_IsSet = false; Type4_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetType4ToNull() { Type4_IsSet = true; Type4_IsNull = true; }
	/** @brief Checks whether Type4_Optional is set to null */
	FORCEINLINE bool IsType4Null() const { return Type4_IsSet && Type4_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 Index_Optional{ 0 };
	/** @brief true if Index_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Index_IsSet{ false };
	/** @brief true if Index_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Index_IsNull{ false };
	/** @brief Gets the value of Index_Optional, regardless of it having been set */
	FORCEINLINE int32& GetIndex() { return Index_Optional; }
	/** @brief Gets the value of Index_Optional, regardless of it having been set */
	FORCEINLINE const int32& GetIndex() const { return Index_Optional; }
	/** @brief Gets the value of Index_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const int32& GetIndex(const int32& DefaultValue) const { if (Index_IsSet) return Index_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Index_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetIndex(int32& OutValue) const { if (Index_IsSet && !Index_IsNull) OutValue = Index_Optional; return Index_IsSet; }
	/** @brief Returns a pointer to Index_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE int32* GetIndexOrNull() { if (Index_IsSet) return (Index_IsNull ? nullptr : &Index_Optional); return nullptr; }
	/** @brief Returns a pointer to Index_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const int32* GetIndexOrNull() const { if (Index_IsSet) return (Index_IsNull ? nullptr : &Index_Optional); return nullptr; }
	/** @brief Sets the value of Index_Optional and also sets Index_IsSet to true */
	FORCEINLINE void SetIndex(const int32& NewValue) { Index_Optional = NewValue; Index_IsSet = true; Index_IsNull = false; }
	/** @brief Sets the value of Index_Optional and also sets Index_IsSet to true using move semantics */
	FORCEINLINE void SetIndex(int32&& NewValue) { Index_Optional = NewValue; Index_IsSet = true; Index_IsNull = false; }
	/** @brief Clears the value of Index_Optional and sets Index_IsSet to false */
	void ClearIndex() { Index_Optional = 0; Index_IsSet = false; Index_IsNull = false; }
	/** @brief Returns the default value of Index */
	FORCEINLINE int32 GetDefaultValue_Index() { return 0; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetIndexToNull() { Index_IsSet = true; Index_IsNull = true; }
	/** @brief Checks whether Index_Optional is set to null */
	FORCEINLINE bool IsIndexNull() const { return Index_IsSet && Index_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	float MmrInternalMin_Optional{  };
	/** @brief true if MmrInternalMin_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool MmrInternalMin_IsSet{ false };
	/** @brief true if MmrInternalMin_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool MmrInternalMin_IsNull{ false };
	/** @brief Gets the value of MmrInternalMin_Optional, regardless of it having been set */
	FORCEINLINE float& GetMmrInternalMin() { return MmrInternalMin_Optional; }
	/** @brief Gets the value of MmrInternalMin_Optional, regardless of it having been set */
	FORCEINLINE const float& GetMmrInternalMin() const { return MmrInternalMin_Optional; }
	/** @brief Gets the value of MmrInternalMin_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const float& GetMmrInternalMin(const float& DefaultValue) const { if (MmrInternalMin_IsSet) return MmrInternalMin_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of MmrInternalMin_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetMmrInternalMin(float& OutValue) const { if (MmrInternalMin_IsSet && !MmrInternalMin_IsNull) OutValue = MmrInternalMin_Optional; return MmrInternalMin_IsSet; }
	/** @brief Returns a pointer to MmrInternalMin_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE float* GetMmrInternalMinOrNull() { if (MmrInternalMin_IsSet) return (MmrInternalMin_IsNull ? nullptr : &MmrInternalMin_Optional); return nullptr; }
	/** @brief Returns a pointer to MmrInternalMin_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const float* GetMmrInternalMinOrNull() const { if (MmrInternalMin_IsSet) return (MmrInternalMin_IsNull ? nullptr : &MmrInternalMin_Optional); return nullptr; }
	/** @brief Sets the value of MmrInternalMin_Optional and also sets MmrInternalMin_IsSet to true */
	FORCEINLINE void SetMmrInternalMin(const float& NewValue) { MmrInternalMin_Optional = NewValue; MmrInternalMin_IsSet = true; MmrInternalMin_IsNull = false; }
	/** @brief Sets the value of MmrInternalMin_Optional and also sets MmrInternalMin_IsSet to true using move semantics */
	FORCEINLINE void SetMmrInternalMin(float&& NewValue) { MmrInternalMin_Optional = NewValue; MmrInternalMin_IsSet = true; MmrInternalMin_IsNull = false; }
	/** @brief Clears the value of MmrInternalMin_Optional and sets MmrInternalMin_IsSet to false */
	void ClearMmrInternalMin() { MmrInternalMin_IsSet = false; MmrInternalMin_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetMmrInternalMinToNull() { MmrInternalMin_IsSet = true; MmrInternalMin_IsNull = true; }
	/** @brief Checks whether MmrInternalMin_Optional is set to null */
	FORCEINLINE bool IsMmrInternalMinNull() const { return MmrInternalMin_IsSet && MmrInternalMin_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	float MmrInternalMax_Optional{  };
	/** @brief true if MmrInternalMax_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool MmrInternalMax_IsSet{ false };
	/** @brief true if MmrInternalMax_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool MmrInternalMax_IsNull{ false };
	/** @brief Gets the value of MmrInternalMax_Optional, regardless of it having been set */
	FORCEINLINE float& GetMmrInternalMax() { return MmrInternalMax_Optional; }
	/** @brief Gets the value of MmrInternalMax_Optional, regardless of it having been set */
	FORCEINLINE const float& GetMmrInternalMax() const { return MmrInternalMax_Optional; }
	/** @brief Gets the value of MmrInternalMax_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const float& GetMmrInternalMax(const float& DefaultValue) const { if (MmrInternalMax_IsSet) return MmrInternalMax_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of MmrInternalMax_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetMmrInternalMax(float& OutValue) const { if (MmrInternalMax_IsSet && !MmrInternalMax_IsNull) OutValue = MmrInternalMax_Optional; return MmrInternalMax_IsSet; }
	/** @brief Returns a pointer to MmrInternalMax_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE float* GetMmrInternalMaxOrNull() { if (MmrInternalMax_IsSet) return (MmrInternalMax_IsNull ? nullptr : &MmrInternalMax_Optional); return nullptr; }
	/** @brief Returns a pointer to MmrInternalMax_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const float* GetMmrInternalMaxOrNull() const { if (MmrInternalMax_IsSet) return (MmrInternalMax_IsNull ? nullptr : &MmrInternalMax_Optional); return nullptr; }
	/** @brief Sets the value of MmrInternalMax_Optional and also sets MmrInternalMax_IsSet to true */
	FORCEINLINE void SetMmrInternalMax(const float& NewValue) { MmrInternalMax_Optional = NewValue; MmrInternalMax_IsSet = true; MmrInternalMax_IsNull = false; }
	/** @brief Sets the value of MmrInternalMax_Optional and also sets MmrInternalMax_IsSet to true using move semantics */
	FORCEINLINE void SetMmrInternalMax(float&& NewValue) { MmrInternalMax_Optional = NewValue; MmrInternalMax_IsSet = true; MmrInternalMax_IsNull = false; }
	/** @brief Clears the value of MmrInternalMax_Optional and sets MmrInternalMax_IsSet to false */
	void ClearMmrInternalMax() { MmrInternalMax_IsSet = false; MmrInternalMax_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetMmrInternalMaxToNull() { MmrInternalMax_IsSet = true; MmrInternalMax_IsNull = true; }
	/** @brief Checks whether MmrInternalMax_Optional is set to null */
	FORCEINLINE bool IsMmrInternalMaxNull() const { return MmrInternalMax_IsSet && MmrInternalMax_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	ERHAPI_StageEntityType EntityType_Optional{  };
	/** @brief true if EntityType_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool EntityType_IsSet{ false };
	/** @brief true if EntityType_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool EntityType_IsNull{ false };
	/** @brief Gets the value of EntityType_Optional, regardless of it having been set */
	FORCEINLINE ERHAPI_StageEntityType& GetEntityType() { return EntityType_Optional; }
	/** @brief Gets the value of EntityType_Optional, regardless of it having been set */
	FORCEINLINE const ERHAPI_StageEntityType& GetEntityType() const { return EntityType_Optional; }
	/** @brief Gets the value of EntityType_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const ERHAPI_StageEntityType& GetEntityType(const ERHAPI_StageEntityType& DefaultValue) const { if (EntityType_IsSet) return EntityType_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of EntityType_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetEntityType(ERHAPI_StageEntityType& OutValue) const { if (EntityType_IsSet && !EntityType_IsNull) OutValue = EntityType_Optional; return EntityType_IsSet; }
	/** @brief Returns a pointer to EntityType_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE ERHAPI_StageEntityType* GetEntityTypeOrNull() { if (EntityType_IsSet) return (EntityType_IsNull ? nullptr : &EntityType_Optional); return nullptr; }
	/** @brief Returns a pointer to EntityType_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const ERHAPI_StageEntityType* GetEntityTypeOrNull() const { if (EntityType_IsSet) return (EntityType_IsNull ? nullptr : &EntityType_Optional); return nullptr; }
	/** @brief Sets the value of EntityType_Optional and also sets EntityType_IsSet to true */
	FORCEINLINE void SetEntityType(const ERHAPI_StageEntityType& NewValue) { EntityType_Optional = NewValue; EntityType_IsSet = true; EntityType_IsNull = false; }
	/** @brief Sets the value of EntityType_Optional and also sets EntityType_IsSet to true using move semantics */
	FORCEINLINE void SetEntityType(ERHAPI_StageEntityType&& NewValue) { EntityType_Optional = NewValue; EntityType_IsSet = true; EntityType_IsNull = false; }
	/** @brief Clears the value of EntityType_Optional and sets EntityType_IsSet to false */
	void ClearEntityType() { EntityType_IsSet = false; EntityType_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetEntityTypeToNull() { EntityType_IsSet = true; EntityType_IsNull = true; }
	/** @brief Checks whether EntityType_Optional is set to null */
	FORCEINLINE bool IsEntityTypeNull() const { return EntityType_IsSet && EntityType_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString EntityId_Optional{  };
	/** @brief true if EntityId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool EntityId_IsSet{ false };
	/** @brief true if EntityId_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool EntityId_IsNull{ false };
	/** @brief Gets the value of EntityId_Optional, regardless of it having been set */
	FORCEINLINE FString& GetEntityId() { return EntityId_Optional; }
	/** @brief Gets the value of EntityId_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetEntityId() const { return EntityId_Optional; }
	/** @brief Gets the value of EntityId_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetEntityId(const FString& DefaultValue) const { if (EntityId_IsSet) return EntityId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of EntityId_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetEntityId(FString& OutValue) const { if (EntityId_IsSet && !EntityId_IsNull) OutValue = EntityId_Optional; return EntityId_IsSet; }
	/** @brief Returns a pointer to EntityId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetEntityIdOrNull() { if (EntityId_IsSet) return (EntityId_IsNull ? nullptr : &EntityId_Optional); return nullptr; }
	/** @brief Returns a pointer to EntityId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetEntityIdOrNull() const { if (EntityId_IsSet) return (EntityId_IsNull ? nullptr : &EntityId_Optional); return nullptr; }
	/** @brief Sets the value of EntityId_Optional and also sets EntityId_IsSet to true */
	FORCEINLINE void SetEntityId(const FString& NewValue) { EntityId_Optional = NewValue; EntityId_IsSet = true; EntityId_IsNull = false; }
	/** @brief Sets the value of EntityId_Optional and also sets EntityId_IsSet to true using move semantics */
	FORCEINLINE void SetEntityId(FString&& NewValue) { EntityId_Optional = NewValue; EntityId_IsSet = true; EntityId_IsNull = false; }
	/** @brief Clears the value of EntityId_Optional and sets EntityId_IsSet to false */
	void ClearEntityId() { EntityId_IsSet = false; EntityId_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetEntityIdToNull() { EntityId_IsSet = true; EntityId_IsNull = true; }
	/** @brief Checks whether EntityId_Optional is set to null */
	FORCEINLINE bool IsEntityIdNull() const { return EntityId_IsSet && EntityId_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	float MmrInternalOverride_Optional{  };
	/** @brief true if MmrInternalOverride_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool MmrInternalOverride_IsSet{ false };
	/** @brief true if MmrInternalOverride_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool MmrInternalOverride_IsNull{ false };
	/** @brief Gets the value of MmrInternalOverride_Optional, regardless of it having been set */
	FORCEINLINE float& GetMmrInternalOverride() { return MmrInternalOverride_Optional; }
	/** @brief Gets the value of MmrInternalOverride_Optional, regardless of it having been set */
	FORCEINLINE const float& GetMmrInternalOverride() const { return MmrInternalOverride_Optional; }
	/** @brief Gets the value of MmrInternalOverride_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const float& GetMmrInternalOverride(const float& DefaultValue) const { if (MmrInternalOverride_IsSet) return MmrInternalOverride_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of MmrInternalOverride_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetMmrInternalOverride(float& OutValue) const { if (MmrInternalOverride_IsSet && !MmrInternalOverride_IsNull) OutValue = MmrInternalOverride_Optional; return MmrInternalOverride_IsSet; }
	/** @brief Returns a pointer to MmrInternalOverride_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE float* GetMmrInternalOverrideOrNull() { if (MmrInternalOverride_IsSet) return (MmrInternalOverride_IsNull ? nullptr : &MmrInternalOverride_Optional); return nullptr; }
	/** @brief Returns a pointer to MmrInternalOverride_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const float* GetMmrInternalOverrideOrNull() const { if (MmrInternalOverride_IsSet) return (MmrInternalOverride_IsNull ? nullptr : &MmrInternalOverride_Optional); return nullptr; }
	/** @brief Sets the value of MmrInternalOverride_Optional and also sets MmrInternalOverride_IsSet to true */
	FORCEINLINE void SetMmrInternalOverride(const float& NewValue) { MmrInternalOverride_Optional = NewValue; MmrInternalOverride_IsSet = true; MmrInternalOverride_IsNull = false; }
	/** @brief Sets the value of MmrInternalOverride_Optional and also sets MmrInternalOverride_IsSet to true using move semantics */
	FORCEINLINE void SetMmrInternalOverride(float&& NewValue) { MmrInternalOverride_Optional = NewValue; MmrInternalOverride_IsSet = true; MmrInternalOverride_IsNull = false; }
	/** @brief Clears the value of MmrInternalOverride_Optional and sets MmrInternalOverride_IsSet to false */
	void ClearMmrInternalOverride() { MmrInternalOverride_IsSet = false; MmrInternalOverride_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetMmrInternalOverrideToNull() { MmrInternalOverride_IsSet = true; MmrInternalOverride_IsNull = true; }
	/** @brief Checks whether MmrInternalOverride_Optional is set to null */
	FORCEINLINE bool IsMmrInternalOverrideNull() const { return MmrInternalOverride_IsSet && MmrInternalOverride_IsNull; }
};

/** @} */
