// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereAPIAuthContext.h"
#include "RallyHereAPIHelpers.h"
#include "HTTPValidationError.h"
#include "HzApiErrorModel.h"
#include "PlayerRankRequestResponse.h"
#include "PlayerRankRequestResponseV2.h"
#include "PlayerRankUpdateRequest.h"
#include "PlayerRankUpdateResponse.h"
#include "PlayerRankUpdateResponseV2.h"
#include "RankConfigRequestResponse.h"
#include "RankConfigRequestResponseV2.h"
#include "RankUpdateRequest.h"

namespace RallyHereAPI
{
using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

struct FRequest_GetAllPlayerUuidRanks;
struct FResponse_GetAllPlayerUuidRanks;
struct FRequest_GetAllPlayerUuidRanksSelf;
struct FResponse_GetAllPlayerUuidRanksSelf;
struct FRequest_GetAllPlayerUuidRanksSelfV2;
struct FResponse_GetAllPlayerUuidRanksSelfV2;
struct FRequest_GetAllPlayerUuidRanksV2;
struct FResponse_GetAllPlayerUuidRanksV2;
struct FRequest_GetAllRankConfig;
struct FResponse_GetAllRankConfig;
struct FRequest_GetAllRankConfigV2;
struct FResponse_GetAllRankConfigV2;
struct FRequest_GetPlayerUuidRank;
struct FResponse_GetPlayerUuidRank;
struct FRequest_GetPlayerUuidRankSelf;
struct FResponse_GetPlayerUuidRankSelf;
struct FRequest_GetPlayerUuidRankSelfV2;
struct FResponse_GetPlayerUuidRankSelfV2;
struct FRequest_GetPlayerUuidRankV2;
struct FResponse_GetPlayerUuidRankV2;
struct FRequest_GetRankConfig;
struct FResponse_GetRankConfig;
struct FRequest_GetRankConfigV2;
struct FResponse_GetRankConfigV2;
struct FRequest_UpdatePlayerUuidRank;
struct FResponse_UpdatePlayerUuidRank;
struct FRequest_UpdatePlayerUuidRankSelf;
struct FResponse_UpdatePlayerUuidRankSelf;
struct FRequest_UpdatePlayerUuidRankSelfV2;
struct FResponse_UpdatePlayerUuidRankSelfV2;
struct FRequest_UpdatePlayerUuidRankV2;
struct FResponse_UpdatePlayerUuidRankV2;
struct FRequest_UpdateRankingsV1;
struct FResponse_UpdateRankingsV1;

DECLARE_DELEGATE_OneParam(FDelegate_GetAllPlayerUuidRanks, const FResponse_GetAllPlayerUuidRanks&);
DECLARE_DELEGATE_OneParam(FDelegate_GetAllPlayerUuidRanksSelf, const FResponse_GetAllPlayerUuidRanksSelf&);
DECLARE_DELEGATE_OneParam(FDelegate_GetAllPlayerUuidRanksSelfV2, const FResponse_GetAllPlayerUuidRanksSelfV2&);
DECLARE_DELEGATE_OneParam(FDelegate_GetAllPlayerUuidRanksV2, const FResponse_GetAllPlayerUuidRanksV2&);
DECLARE_DELEGATE_OneParam(FDelegate_GetAllRankConfig, const FResponse_GetAllRankConfig&);
DECLARE_DELEGATE_OneParam(FDelegate_GetAllRankConfigV2, const FResponse_GetAllRankConfigV2&);
DECLARE_DELEGATE_OneParam(FDelegate_GetPlayerUuidRank, const FResponse_GetPlayerUuidRank&);
DECLARE_DELEGATE_OneParam(FDelegate_GetPlayerUuidRankSelf, const FResponse_GetPlayerUuidRankSelf&);
DECLARE_DELEGATE_OneParam(FDelegate_GetPlayerUuidRankSelfV2, const FResponse_GetPlayerUuidRankSelfV2&);
DECLARE_DELEGATE_OneParam(FDelegate_GetPlayerUuidRankV2, const FResponse_GetPlayerUuidRankV2&);
DECLARE_DELEGATE_OneParam(FDelegate_GetRankConfig, const FResponse_GetRankConfig&);
DECLARE_DELEGATE_OneParam(FDelegate_GetRankConfigV2, const FResponse_GetRankConfigV2&);
DECLARE_DELEGATE_OneParam(FDelegate_UpdatePlayerUuidRank, const FResponse_UpdatePlayerUuidRank&);
DECLARE_DELEGATE_OneParam(FDelegate_UpdatePlayerUuidRankSelf, const FResponse_UpdatePlayerUuidRankSelf&);
DECLARE_DELEGATE_OneParam(FDelegate_UpdatePlayerUuidRankSelfV2, const FResponse_UpdatePlayerUuidRankSelfV2&);
DECLARE_DELEGATE_OneParam(FDelegate_UpdatePlayerUuidRankV2, const FResponse_UpdatePlayerUuidRankV2&);
DECLARE_DELEGATE_OneParam(FDelegate_UpdateRankingsV1, const FResponse_UpdateRankingsV1&);

class RALLYHEREAPI_API FRankAPI : public FAPI
{
public:
    FRankAPI();
    virtual ~FRankAPI();

    FHttpRequestPtr GetAllPlayerUuidRanks(const FRequest_GetAllPlayerUuidRanks& Request, const FDelegate_GetAllPlayerUuidRanks& Delegate = FDelegate_GetAllPlayerUuidRanks(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr GetAllPlayerUuidRanksSelf(const FRequest_GetAllPlayerUuidRanksSelf& Request, const FDelegate_GetAllPlayerUuidRanksSelf& Delegate = FDelegate_GetAllPlayerUuidRanksSelf(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr GetAllPlayerUuidRanksSelfV2(const FRequest_GetAllPlayerUuidRanksSelfV2& Request, const FDelegate_GetAllPlayerUuidRanksSelfV2& Delegate = FDelegate_GetAllPlayerUuidRanksSelfV2(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr GetAllPlayerUuidRanksV2(const FRequest_GetAllPlayerUuidRanksV2& Request, const FDelegate_GetAllPlayerUuidRanksV2& Delegate = FDelegate_GetAllPlayerUuidRanksV2(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr GetAllRankConfig(const FRequest_GetAllRankConfig& Request, const FDelegate_GetAllRankConfig& Delegate = FDelegate_GetAllRankConfig(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr GetAllRankConfigV2(const FRequest_GetAllRankConfigV2& Request, const FDelegate_GetAllRankConfigV2& Delegate = FDelegate_GetAllRankConfigV2(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr GetPlayerUuidRank(const FRequest_GetPlayerUuidRank& Request, const FDelegate_GetPlayerUuidRank& Delegate = FDelegate_GetPlayerUuidRank(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr GetPlayerUuidRankSelf(const FRequest_GetPlayerUuidRankSelf& Request, const FDelegate_GetPlayerUuidRankSelf& Delegate = FDelegate_GetPlayerUuidRankSelf(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr GetPlayerUuidRankSelfV2(const FRequest_GetPlayerUuidRankSelfV2& Request, const FDelegate_GetPlayerUuidRankSelfV2& Delegate = FDelegate_GetPlayerUuidRankSelfV2(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr GetPlayerUuidRankV2(const FRequest_GetPlayerUuidRankV2& Request, const FDelegate_GetPlayerUuidRankV2& Delegate = FDelegate_GetPlayerUuidRankV2(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr GetRankConfig(const FRequest_GetRankConfig& Request, const FDelegate_GetRankConfig& Delegate = FDelegate_GetRankConfig(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr GetRankConfigV2(const FRequest_GetRankConfigV2& Request, const FDelegate_GetRankConfigV2& Delegate = FDelegate_GetRankConfigV2(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr UpdatePlayerUuidRank(const FRequest_UpdatePlayerUuidRank& Request, const FDelegate_UpdatePlayerUuidRank& Delegate = FDelegate_UpdatePlayerUuidRank(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr UpdatePlayerUuidRankSelf(const FRequest_UpdatePlayerUuidRankSelf& Request, const FDelegate_UpdatePlayerUuidRankSelf& Delegate = FDelegate_UpdatePlayerUuidRankSelf(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr UpdatePlayerUuidRankSelfV2(const FRequest_UpdatePlayerUuidRankSelfV2& Request, const FDelegate_UpdatePlayerUuidRankSelfV2& Delegate = FDelegate_UpdatePlayerUuidRankSelfV2(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr UpdatePlayerUuidRankV2(const FRequest_UpdatePlayerUuidRankV2& Request, const FDelegate_UpdatePlayerUuidRankV2& Delegate = FDelegate_UpdatePlayerUuidRankV2(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr UpdateRankingsV1(const FRequest_UpdateRankingsV1& Request, const FDelegate_UpdateRankingsV1& Delegate = FDelegate_UpdateRankingsV1(), int32 Priority = DefaultRallyHereAPIPriority);

private:
    void OnGetAllPlayerUuidRanksResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAllPlayerUuidRanks Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetAllPlayerUuidRanksSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAllPlayerUuidRanksSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetAllPlayerUuidRanksSelfV2Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAllPlayerUuidRanksSelfV2 Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetAllPlayerUuidRanksV2Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAllPlayerUuidRanksV2 Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetAllRankConfigResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAllRankConfig Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetAllRankConfigV2Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAllRankConfigV2 Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetPlayerUuidRankResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlayerUuidRank Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetPlayerUuidRankSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlayerUuidRankSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetPlayerUuidRankSelfV2Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlayerUuidRankSelfV2 Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetPlayerUuidRankV2Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlayerUuidRankV2 Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetRankConfigResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetRankConfig Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetRankConfigV2Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetRankConfigV2 Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnUpdatePlayerUuidRankResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdatePlayerUuidRank Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnUpdatePlayerUuidRankSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdatePlayerUuidRankSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnUpdatePlayerUuidRankSelfV2Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdatePlayerUuidRankSelfV2 Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnUpdatePlayerUuidRankV2Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdatePlayerUuidRankV2 Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnUpdateRankingsV1Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdateRankingsV1 Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};

/* Get All Player Uuid Ranks
 *
 * Get all of a specific player's ranks
 * 
 * Required Permissions: `rank:read:self` for players acting on themselves,
 * otherwise `rank:read:any`
 * **DEPRECATED** Use the V2 endpoint
*/
struct RALLYHEREAPI_API FRequest_GetAllPlayerUuidRanks : public FRequest
{
    FRequest_GetAllPlayerUuidRanks();
    virtual ~FRequest_GetAllPlayerUuidRanks() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid PlayerUuid;
};

struct RALLYHEREAPI_API FResponse_GetAllPlayerUuidRanks : public FResponse
{
    FResponse_GetAllPlayerUuidRanks(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetAllPlayerUuidRanks() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_PlayerRankRequestResponse Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_PlayerRankRequestResponse& OutContent) const;

    /* Response 403
    Forbidden
    */
    bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_GetAllPlayerUuidRanks
{
    typedef FRequest_GetAllPlayerUuidRanks Request;
    typedef FResponse_GetAllPlayerUuidRanks Response;
    typedef FDelegate_GetAllPlayerUuidRanks Delegate;
    typedef FRankAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.GetAllPlayerUuidRanks(InRequest, InDelegate, Priority); }
};

/* Get All Player Uuid Ranks Self
 *
 * Get all of current player's ranks
 * 
 * Required Permissions: `rank:read:self`
 * **DEPRECATED** Use the V2 endpoints
*/
struct RALLYHEREAPI_API FRequest_GetAllPlayerUuidRanksSelf : public FRequest
{
    FRequest_GetAllPlayerUuidRanksSelf();
    virtual ~FRequest_GetAllPlayerUuidRanksSelf() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
};

struct RALLYHEREAPI_API FResponse_GetAllPlayerUuidRanksSelf : public FResponse
{
    FResponse_GetAllPlayerUuidRanksSelf(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetAllPlayerUuidRanksSelf() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_PlayerRankRequestResponse Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_PlayerRankRequestResponse& OutContent) const;

    /* Response 403
    Forbidden
    */
    bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

};

struct RALLYHEREAPI_API Traits_GetAllPlayerUuidRanksSelf
{
    typedef FRequest_GetAllPlayerUuidRanksSelf Request;
    typedef FResponse_GetAllPlayerUuidRanksSelf Response;
    typedef FDelegate_GetAllPlayerUuidRanksSelf Delegate;
    typedef FRankAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.GetAllPlayerUuidRanksSelf(InRequest, InDelegate, Priority); }
};

/* Get All Player Uuid Ranks Self V2
 *
 * Get all of current player's ranks
 * 
 * Required Permissions: `rank:read:self`
*/
struct RALLYHEREAPI_API FRequest_GetAllPlayerUuidRanksSelfV2 : public FRequest
{
    FRequest_GetAllPlayerUuidRanksSelfV2();
    virtual ~FRequest_GetAllPlayerUuidRanksSelfV2() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
};

struct RALLYHEREAPI_API FResponse_GetAllPlayerUuidRanksSelfV2 : public FResponse
{
    FResponse_GetAllPlayerUuidRanksSelfV2(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetAllPlayerUuidRanksSelfV2() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_PlayerRankRequestResponseV2 Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_PlayerRankRequestResponseV2& OutContent) const;

    /* Response 403
    Forbidden
    */
    bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

};

struct RALLYHEREAPI_API Traits_GetAllPlayerUuidRanksSelfV2
{
    typedef FRequest_GetAllPlayerUuidRanksSelfV2 Request;
    typedef FResponse_GetAllPlayerUuidRanksSelfV2 Response;
    typedef FDelegate_GetAllPlayerUuidRanksSelfV2 Delegate;
    typedef FRankAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.GetAllPlayerUuidRanksSelfV2(InRequest, InDelegate, Priority); }
};

/* Get All Player Uuid Ranks V2
 *
 * Get all of a specific player's ranks
 * 
 * Required Permissions: `rank:read:self` for players acting on themselves,
 * otherwise `rank:read:any`
*/
struct RALLYHEREAPI_API FRequest_GetAllPlayerUuidRanksV2 : public FRequest
{
    FRequest_GetAllPlayerUuidRanksV2();
    virtual ~FRequest_GetAllPlayerUuidRanksV2() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid PlayerUuid;
};

struct RALLYHEREAPI_API FResponse_GetAllPlayerUuidRanksV2 : public FResponse
{
    FResponse_GetAllPlayerUuidRanksV2(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetAllPlayerUuidRanksV2() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_PlayerRankRequestResponseV2 Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_PlayerRankRequestResponseV2& OutContent) const;

    /* Response 403
    Forbidden
    */
    bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_GetAllPlayerUuidRanksV2
{
    typedef FRequest_GetAllPlayerUuidRanksV2 Request;
    typedef FResponse_GetAllPlayerUuidRanksV2 Response;
    typedef FDelegate_GetAllPlayerUuidRanksV2 Delegate;
    typedef FRankAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.GetAllPlayerUuidRanksV2(InRequest, InDelegate, Priority); }
};

/* Get All Rank Config
 *
 * Get all rank configuration
 * 
 * Required Permissions: `rank:read:config`
 * **DEPRECATED** Use the v2 endpoint
*/
struct RALLYHEREAPI_API FRequest_GetAllRankConfig : public FRequest
{
    FRequest_GetAllRankConfig();
    virtual ~FRequest_GetAllRankConfig() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
};

struct RALLYHEREAPI_API FResponse_GetAllRankConfig : public FResponse
{
    FResponse_GetAllRankConfig(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetAllRankConfig() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_RankConfigRequestResponse Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_RankConfigRequestResponse& OutContent) const;

    /* Response 403
    Forbidden
    */
    bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

};

struct RALLYHEREAPI_API Traits_GetAllRankConfig
{
    typedef FRequest_GetAllRankConfig Request;
    typedef FResponse_GetAllRankConfig Response;
    typedef FDelegate_GetAllRankConfig Delegate;
    typedef FRankAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.GetAllRankConfig(InRequest, InDelegate, Priority); }
};

/* Get All Rank Config V2
 *
 * Get all rank configuration
 * 
 * Required Permissions: `rank:read:config`
*/
struct RALLYHEREAPI_API FRequest_GetAllRankConfigV2 : public FRequest
{
    FRequest_GetAllRankConfigV2();
    virtual ~FRequest_GetAllRankConfigV2() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
};

struct RALLYHEREAPI_API FResponse_GetAllRankConfigV2 : public FResponse
{
    FResponse_GetAllRankConfigV2(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetAllRankConfigV2() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_RankConfigRequestResponseV2 Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_RankConfigRequestResponseV2& OutContent) const;

    /* Response 403
    Forbidden
    */
    bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

};

struct RALLYHEREAPI_API Traits_GetAllRankConfigV2
{
    typedef FRequest_GetAllRankConfigV2 Request;
    typedef FResponse_GetAllRankConfigV2 Response;
    typedef FDelegate_GetAllRankConfigV2 Delegate;
    typedef FRankAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.GetAllRankConfigV2(InRequest, InDelegate, Priority); }
};

/* Get Player Uuid Rank
 *
 * Get a specific player's rank for a specific rank id
 *             
 * Required Permissions: `rank:read:self` for players acting on themselves, 
 * otherwise `rank:read:any`
 * **DEPRECATED** Use the V2 endpoint
*/
struct RALLYHEREAPI_API FRequest_GetPlayerUuidRank : public FRequest
{
    FRequest_GetPlayerUuidRank();
    virtual ~FRequest_GetPlayerUuidRank() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid PlayerUuid;
    int32 RankId = 0;
};

struct RALLYHEREAPI_API FResponse_GetPlayerUuidRank : public FResponse
{
    FResponse_GetPlayerUuidRank(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetPlayerUuidRank() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_PlayerRankRequestResponse Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_PlayerRankRequestResponse& OutContent) const;

    /* Response 403
    Forbidden
    */
    bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_GetPlayerUuidRank
{
    typedef FRequest_GetPlayerUuidRank Request;
    typedef FResponse_GetPlayerUuidRank Response;
    typedef FDelegate_GetPlayerUuidRank Delegate;
    typedef FRankAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.GetPlayerUuidRank(InRequest, InDelegate, Priority); }
};

/* Get Player Uuid Rank Self
 *
 * Get current player's rank for a specific rank id
 *             
 * Required Permissions: `rank:read:self`
 * **DEPRECATED** Use the V2 endpoint
*/
struct RALLYHEREAPI_API FRequest_GetPlayerUuidRankSelf : public FRequest
{
    FRequest_GetPlayerUuidRankSelf();
    virtual ~FRequest_GetPlayerUuidRankSelf() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    int32 RankId = 0;
};

struct RALLYHEREAPI_API FResponse_GetPlayerUuidRankSelf : public FResponse
{
    FResponse_GetPlayerUuidRankSelf(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetPlayerUuidRankSelf() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_PlayerRankRequestResponse Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_PlayerRankRequestResponse& OutContent) const;

    /* Response 403
    Forbidden
    */
    bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_GetPlayerUuidRankSelf
{
    typedef FRequest_GetPlayerUuidRankSelf Request;
    typedef FResponse_GetPlayerUuidRankSelf Response;
    typedef FDelegate_GetPlayerUuidRankSelf Delegate;
    typedef FRankAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.GetPlayerUuidRankSelf(InRequest, InDelegate, Priority); }
};

/* Get Player Uuid Rank Self V2
 *
 * Get current player's rank for a specific rank id
 * 
 * Required Permissions: `rank:read:self`
*/
struct RALLYHEREAPI_API FRequest_GetPlayerUuidRankSelfV2 : public FRequest
{
    FRequest_GetPlayerUuidRankSelfV2();
    virtual ~FRequest_GetPlayerUuidRankSelfV2() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString RankId;
};

struct RALLYHEREAPI_API FResponse_GetPlayerUuidRankSelfV2 : public FResponse
{
    FResponse_GetPlayerUuidRankSelfV2(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetPlayerUuidRankSelfV2() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_PlayerRankRequestResponseV2 Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_PlayerRankRequestResponseV2& OutContent) const;

    /* Response 403
    Forbidden
    */
    bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_GetPlayerUuidRankSelfV2
{
    typedef FRequest_GetPlayerUuidRankSelfV2 Request;
    typedef FResponse_GetPlayerUuidRankSelfV2 Response;
    typedef FDelegate_GetPlayerUuidRankSelfV2 Delegate;
    typedef FRankAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.GetPlayerUuidRankSelfV2(InRequest, InDelegate, Priority); }
};

/* Get Player Uuid Rank V2
 *
 * Get a specific player's rank for a specific rank id
 * 
 * Required Permissions: `rank:read:self` for players acting on themselves, 
 * otherwise `rank:read:any`
*/
struct RALLYHEREAPI_API FRequest_GetPlayerUuidRankV2 : public FRequest
{
    FRequest_GetPlayerUuidRankV2();
    virtual ~FRequest_GetPlayerUuidRankV2() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid PlayerUuid;
    FString RankId;
};

struct RALLYHEREAPI_API FResponse_GetPlayerUuidRankV2 : public FResponse
{
    FResponse_GetPlayerUuidRankV2(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetPlayerUuidRankV2() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_PlayerRankRequestResponseV2 Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_PlayerRankRequestResponseV2& OutContent) const;

    /* Response 403
    Forbidden
    */
    bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_GetPlayerUuidRankV2
{
    typedef FRequest_GetPlayerUuidRankV2 Request;
    typedef FResponse_GetPlayerUuidRankV2 Response;
    typedef FDelegate_GetPlayerUuidRankV2 Delegate;
    typedef FRankAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.GetPlayerUuidRankV2(InRequest, InDelegate, Priority); }
};

/* Get Rank Config
 *
 * Get rank configuration for specific rank id
 * 
 * Required Permissions: `rank:read:config`
 * **DEPRECATED** Use V2 endpoint instead
*/
struct RALLYHEREAPI_API FRequest_GetRankConfig : public FRequest
{
    FRequest_GetRankConfig();
    virtual ~FRequest_GetRankConfig() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    int32 RankId = 0;
};

struct RALLYHEREAPI_API FResponse_GetRankConfig : public FResponse
{
    FResponse_GetRankConfig(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetRankConfig() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_RankConfigRequestResponse Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_RankConfigRequestResponse& OutContent) const;

    /* Response 403
    Forbidden
    */
    bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_GetRankConfig
{
    typedef FRequest_GetRankConfig Request;
    typedef FResponse_GetRankConfig Response;
    typedef FDelegate_GetRankConfig Delegate;
    typedef FRankAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.GetRankConfig(InRequest, InDelegate, Priority); }
};

/* Get Rank Config V2
 *
 * Get rank configuration for specific rank id
 * 
 * Required Permissions: `rank:read:config`
*/
struct RALLYHEREAPI_API FRequest_GetRankConfigV2 : public FRequest
{
    FRequest_GetRankConfigV2();
    virtual ~FRequest_GetRankConfigV2() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString RankId;
};

struct RALLYHEREAPI_API FResponse_GetRankConfigV2 : public FResponse
{
    FResponse_GetRankConfigV2(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetRankConfigV2() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_RankConfigRequestResponseV2 Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_RankConfigRequestResponseV2& OutContent) const;

    /* Response 403
    Forbidden
    */
    bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_GetRankConfigV2
{
    typedef FRequest_GetRankConfigV2 Request;
    typedef FResponse_GetRankConfigV2 Response;
    typedef FDelegate_GetRankConfigV2 Delegate;
    typedef FRankAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.GetRankConfigV2(InRequest, InDelegate, Priority); }
};

/* Update Player Uuid Rank
 *
 * Update a specific player's ranks to those that are provided. Ranks are taken as is
 * 
 * Required Permissions: `rank:update:self` for players acting on themselves, 
 * otherwise `rank:update:any`
 * **DEPRECATED** Use V2 endpoints
*/
struct RALLYHEREAPI_API FRequest_UpdatePlayerUuidRank : public FRequest
{
    FRequest_UpdatePlayerUuidRank();
    virtual ~FRequest_UpdatePlayerUuidRank() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid PlayerUuid;
    int32 RankId = 0;
    FRHAPI_PlayerRankUpdateRequest PlayerRankUpdateRequest;
};

struct RALLYHEREAPI_API FResponse_UpdatePlayerUuidRank : public FResponse
{
    FResponse_UpdatePlayerUuidRank(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_UpdatePlayerUuidRank() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_PlayerRankUpdateResponse Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_PlayerRankUpdateResponse& OutContent) const;

    /* Response 403
    Forbidden
    */
    bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_UpdatePlayerUuidRank
{
    typedef FRequest_UpdatePlayerUuidRank Request;
    typedef FResponse_UpdatePlayerUuidRank Response;
    typedef FDelegate_UpdatePlayerUuidRank Delegate;
    typedef FRankAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.UpdatePlayerUuidRank(InRequest, InDelegate, Priority); }
};

/* Update Player Uuid Rank Self
 *
 * Update current player's ranks to those that are provided. Ranks are taken as is 
 * 
 * Required Permissions: `rank:update:self`
 * **DEPRECATED** Use the V2 endpoint
*/
struct RALLYHEREAPI_API FRequest_UpdatePlayerUuidRankSelf : public FRequest
{
    FRequest_UpdatePlayerUuidRankSelf();
    virtual ~FRequest_UpdatePlayerUuidRankSelf() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    int32 RankId = 0;
    FRHAPI_PlayerRankUpdateRequest PlayerRankUpdateRequest;
};

struct RALLYHEREAPI_API FResponse_UpdatePlayerUuidRankSelf : public FResponse
{
    FResponse_UpdatePlayerUuidRankSelf(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_UpdatePlayerUuidRankSelf() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_PlayerRankUpdateResponse Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_PlayerRankUpdateResponse& OutContent) const;

    /* Response 403
    Forbidden
    */
    bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_UpdatePlayerUuidRankSelf
{
    typedef FRequest_UpdatePlayerUuidRankSelf Request;
    typedef FResponse_UpdatePlayerUuidRankSelf Response;
    typedef FDelegate_UpdatePlayerUuidRankSelf Delegate;
    typedef FRankAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.UpdatePlayerUuidRankSelf(InRequest, InDelegate, Priority); }
};

/* Update Player Uuid Rank Self V2
 *
 * Update current player's ranks to those that are provided. Ranks are taken as is 
 * 
 * Required Permissions: `rank:update:self`
*/
struct RALLYHEREAPI_API FRequest_UpdatePlayerUuidRankSelfV2 : public FRequest
{
    FRequest_UpdatePlayerUuidRankSelfV2();
    virtual ~FRequest_UpdatePlayerUuidRankSelfV2() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString RankId;
    FRHAPI_PlayerRankUpdateRequest PlayerRankUpdateRequest;
};

struct RALLYHEREAPI_API FResponse_UpdatePlayerUuidRankSelfV2 : public FResponse
{
    FResponse_UpdatePlayerUuidRankSelfV2(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_UpdatePlayerUuidRankSelfV2() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_PlayerRankUpdateResponseV2 Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_PlayerRankUpdateResponseV2& OutContent) const;

    /* Response 403
    Forbidden
    */
    bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_UpdatePlayerUuidRankSelfV2
{
    typedef FRequest_UpdatePlayerUuidRankSelfV2 Request;
    typedef FResponse_UpdatePlayerUuidRankSelfV2 Response;
    typedef FDelegate_UpdatePlayerUuidRankSelfV2 Delegate;
    typedef FRankAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.UpdatePlayerUuidRankSelfV2(InRequest, InDelegate, Priority); }
};

/* Update Player Uuid Rank V2
 *
 * Update a specific player's ranks to those that are provided. Ranks are taken as is
 * 
 * Required Permissions: `rank:update:self` for players acting on themselves, 
 * otherwise `rank:update:any`
*/
struct RALLYHEREAPI_API FRequest_UpdatePlayerUuidRankV2 : public FRequest
{
    FRequest_UpdatePlayerUuidRankV2();
    virtual ~FRequest_UpdatePlayerUuidRankV2() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid PlayerUuid;
    FString RankId;
    FRHAPI_PlayerRankUpdateRequest PlayerRankUpdateRequest;
};

struct RALLYHEREAPI_API FResponse_UpdatePlayerUuidRankV2 : public FResponse
{
    FResponse_UpdatePlayerUuidRankV2(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_UpdatePlayerUuidRankV2() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_PlayerRankUpdateResponseV2 Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_PlayerRankUpdateResponseV2& OutContent) const;

    /* Response 403
    Forbidden
    */
    bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_UpdatePlayerUuidRankV2
{
    typedef FRequest_UpdatePlayerUuidRankV2 Request;
    typedef FResponse_UpdatePlayerUuidRankV2 Response;
    typedef FDelegate_UpdatePlayerUuidRankV2 Delegate;
    typedef FRankAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.UpdatePlayerUuidRankV2(InRequest, InDelegate, Priority); }
};

/* Update Rankings V1
 *
 * Calculate and update on players and persist their new ranks
 * Requires at least two teams, and the player's ranks before the last match was played
 * 
 * Required Permissions: `rank:update:any`
 * **DEPRECATED** Use the v2 endpoint instead
*/
struct RALLYHEREAPI_API FRequest_UpdateRankingsV1 : public FRequest
{
    FRequest_UpdateRankingsV1();
    virtual ~FRequest_UpdateRankingsV1() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FRHAPI_RankUpdateRequest RankUpdateRequest;
};

struct RALLYHEREAPI_API FResponse_UpdateRankingsV1 : public FResponse
{
    FResponse_UpdateRankingsV1(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_UpdateRankingsV1() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_PlayerRankUpdateResponse Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_PlayerRankUpdateResponse& OutContent) const;

    /* Response 403
    Forbidden
    */
    bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_UpdateRankingsV1
{
    typedef FRequest_UpdateRankingsV1 Request;
    typedef FResponse_UpdateRankingsV1 Response;
    typedef FDelegate_UpdateRankingsV1 Delegate;
    typedef FRankAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.UpdateRankingsV1(InRequest, InDelegate, Priority); }
};


}
