// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereAPIAuthContext.h"
#include "RallyHereAPIHelpers.h"
#include "CalculateRankRequest.h"
#include "CalculateRankResponse.h"
#include "HTTPValidationError.h"
#include "HzApiErrorModel.h"
#include "PlayerRankRequestResponse.h"
#include "PlayerRankRequestResponseV2.h"
#include "PlayerRankUpdateRequest.h"
#include "PlayerRankUpdateResponse.h"
#include "PlayerRankUpdateResponseV2.h"
#include "RankConfigRequestResponseV3.h"
#include "RankUpdateRequest.h"
#include "RankUpdateRequestV2.h"

namespace RallyHereAPI
{
using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

// forward declaration
class FRankAPI;

/**
 * @brief Calculate V2 Ranks
 * Calculate a rank update on players and persist their new ranks
 * Requires at least two teams, and the players' ranks before the last match was played
 * 
 * Required Permissions: `rank:update:any`
*/
struct RALLYHEREAPI_API FRequest_CalculateV2Ranks : public FRequest
{
	FRequest_CalculateV2Ranks();
	virtual ~FRequest_CalculateV2Ranks() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FRHAPI_RankUpdateRequestV2 RankUpdateRequestV2;
};

/** The response type for FRequest_CalculateV2Ranks */
struct RALLYHEREAPI_API FResponse_CalculateV2Ranks : public FResponse
{
	FResponse_CalculateV2Ranks(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_CalculateV2Ranks() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

protected:
	/** Variant type representing the potential content responses for this call */
	typedef TVariant<FRHAPI_PlayerRankUpdateResponseV2, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> ContentVariantType;
	
	/** A variant containing the parsed content */
	ContentVariantType ParsedContent;

	/** A parsed map of the headers from the request */
	TMap<FString, FString> HeadersMap;

public:
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @param [out] OutContent A copy of the response data, if the type matched
	 * @return Whether or not the response was of the given type
	 */
	template<typename T>
	bool TryGetContent(T& OutContent)const { const T* OutContentPtr = ParsedContent.TryGet<T>(); if (OutContentPtr != nullptr) OutContent = *OutContentPtr; return OutContentPtr != nullptr; }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @param [out] OutContent A copy of the response data, if the type matched
	 * @return Whether or not the response was of the given type
	 */
	template<typename T>
	bool TryGetContent(TOptional<T>& OutContent)const { const T* OutContentPtr = ParsedContent.TryGet<T>(); if (OutContentPtr != nullptr) OutContent = *OutContentPtr; else OutContent.Reset(); return OutContentPtr != nullptr; }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @return A pointer to the content, if it was the specified type.  The memory is owned by the response object!
	 */
	template<typename T>
	const T* TryGetContentAsPointer() const { return ParsedContent.TryGet<T>(); }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @return A optional object to the content, if it was the specified type.  The memory is owned by the returned optional object, which contains a copy of the value, if valid.
	 */
	template<typename T>
	const TOptional<T> TryGetContentAsOptional() const { const auto Ptr = TryGetContentAsPointer<T>(); return Ptr != nullptr ? *Ptr : TOptional<T>(); }
	
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @param [out] OutValue A string to store the header value to, if found
	 * @return Whether or not the header was found
	 */
	bool TryGetHeader(const FString& Header, FString& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; return OutValuePtr != nullptr; }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @param [out] OutValue A TOptional<FString> to store the header value to, if found
	 * @return Whether or not the header was found
	 */
	bool TryGetHeader(const FString& Header, TOptional<FString>& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; else OutValue.Reset(); return OutValuePtr != nullptr; }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @return A pointer to the header string value, if found.  The memory is owned by the response object!
	 */
	const FString* TryGetHeaderAsPointer(const FString& Header) const { return HeadersMap.Find(Header); }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @return An optional string of the header string value, if found.  The memory is owned by the returned optional object, which contains a copy of the value if valid.
	 */
	const TOptional<FString> TryGetHeaderAsOptional(const FString& Header) const { const auto Ptr = HeadersMap.Find(Header); return Ptr != nullptr ? *Ptr : TOptional<FString>(); }

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PlayerRankUpdateResponseV2 Content;
	

#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PlayerRankUpdateResponseV2& OutContent) const { return TryGetContent<FRHAPI_PlayerRankUpdateResponseV2>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PlayerRankUpdateResponseV2>& OutContent) const { return TryGetContent<FRHAPI_PlayerRankUpdateResponseV2>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PlayerRankUpdateResponseV2* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PlayerRankUpdateResponseV2>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PlayerRankUpdateResponseV2> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PlayerRankUpdateResponseV2>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PlayerRankUpdateResponseV2& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_CalculateV2Ranks */
DECLARE_DELEGATE_OneParam(FDelegate_CalculateV2Ranks, const FResponse_CalculateV2Ranks&);

/** @brief A helper metadata object for CalculateV2Ranks that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_CalculateV2Ranks
{
	/** The request type */
	typedef FRequest_CalculateV2Ranks Request;
	/** The response type */
	typedef FResponse_CalculateV2Ranks Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_CalculateV2Ranks Delegate;
	/** The API object that supports this API call */
	typedef FRankAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Calculate V3 Ranks
 * Calculate a rank update on players and return the results without persisting them
 * Requires at least two teams, the players' ranks before the last match was played, and parameters on how to calculate the rank changes
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `rank:*`, `rank:calculate`
*/
struct RALLYHEREAPI_API FRequest_CalculateV3Ranks : public FRequest
{
	FRequest_CalculateV3Ranks();
	virtual ~FRequest_CalculateV3Ranks() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FRHAPI_CalculateRankRequest CalculateRankRequest;
};

/** The response type for FRequest_CalculateV3Ranks */
struct RALLYHEREAPI_API FResponse_CalculateV3Ranks : public FResponse
{
	FResponse_CalculateV3Ranks(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_CalculateV3Ranks() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

protected:
	/** Variant type representing the potential content responses for this call */
	typedef TVariant<FRHAPI_CalculateRankResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> ContentVariantType;
	
	/** A variant containing the parsed content */
	ContentVariantType ParsedContent;

	/** A parsed map of the headers from the request */
	TMap<FString, FString> HeadersMap;

public:
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @param [out] OutContent A copy of the response data, if the type matched
	 * @return Whether or not the response was of the given type
	 */
	template<typename T>
	bool TryGetContent(T& OutContent)const { const T* OutContentPtr = ParsedContent.TryGet<T>(); if (OutContentPtr != nullptr) OutContent = *OutContentPtr; return OutContentPtr != nullptr; }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @param [out] OutContent A copy of the response data, if the type matched
	 * @return Whether or not the response was of the given type
	 */
	template<typename T>
	bool TryGetContent(TOptional<T>& OutContent)const { const T* OutContentPtr = ParsedContent.TryGet<T>(); if (OutContentPtr != nullptr) OutContent = *OutContentPtr; else OutContent.Reset(); return OutContentPtr != nullptr; }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @return A pointer to the content, if it was the specified type.  The memory is owned by the response object!
	 */
	template<typename T>
	const T* TryGetContentAsPointer() const { return ParsedContent.TryGet<T>(); }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @return A optional object to the content, if it was the specified type.  The memory is owned by the returned optional object, which contains a copy of the value, if valid.
	 */
	template<typename T>
	const TOptional<T> TryGetContentAsOptional() const { const auto Ptr = TryGetContentAsPointer<T>(); return Ptr != nullptr ? *Ptr : TOptional<T>(); }
	
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @param [out] OutValue A string to store the header value to, if found
	 * @return Whether or not the header was found
	 */
	bool TryGetHeader(const FString& Header, FString& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; return OutValuePtr != nullptr; }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @param [out] OutValue A TOptional<FString> to store the header value to, if found
	 * @return Whether or not the header was found
	 */
	bool TryGetHeader(const FString& Header, TOptional<FString>& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; else OutValue.Reset(); return OutValuePtr != nullptr; }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @return A pointer to the header string value, if found.  The memory is owned by the response object!
	 */
	const FString* TryGetHeaderAsPointer(const FString& Header) const { return HeadersMap.Find(Header); }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @return An optional string of the header string value, if found.  The memory is owned by the returned optional object, which contains a copy of the value if valid.
	 */
	const TOptional<FString> TryGetHeaderAsOptional(const FString& Header) const { const auto Ptr = HeadersMap.Find(Header); return Ptr != nullptr ? *Ptr : TOptional<FString>(); }

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_CalculateRankResponse Content;
	

#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_CalculateRankResponse& OutContent) const { return TryGetContent<FRHAPI_CalculateRankResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_CalculateRankResponse>& OutContent) const { return TryGetContent<FRHAPI_CalculateRankResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_CalculateRankResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_CalculateRankResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_CalculateRankResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_CalculateRankResponse>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_CalculateRankResponse& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_CalculateV3Ranks */
DECLARE_DELEGATE_OneParam(FDelegate_CalculateV3Ranks, const FResponse_CalculateV3Ranks&);

/** @brief A helper metadata object for CalculateV3Ranks that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_CalculateV3Ranks
{
	/** The request type */
	typedef FRequest_CalculateV3Ranks Request;
	/** The response type */
	typedef FResponse_CalculateV3Ranks Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_CalculateV3Ranks Delegate;
	/** The API object that supports this API call */
	typedef FRankAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get All Player Uuid Ranks
 * Get all of a specific player's ranks
 * 
 * Required Permissions: `rank:read:self` for players acting on themselves,
 * otherwise `rank:read:any`
 * **DEPRECATED** Use the V2 endpoint
*/
struct RALLYHEREAPI_API FRequest_GetAllPlayerUuidRanks : public FRequest
{
	FRequest_GetAllPlayerUuidRanks();
	virtual ~FRequest_GetAllPlayerUuidRanks() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FGuid PlayerUuid;
};

/** The response type for FRequest_GetAllPlayerUuidRanks */
struct RALLYHEREAPI_API FResponse_GetAllPlayerUuidRanks : public FResponse
{
	FResponse_GetAllPlayerUuidRanks(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetAllPlayerUuidRanks() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

protected:
	/** Variant type representing the potential content responses for this call */
	typedef TVariant<FRHAPI_PlayerRankRequestResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> ContentVariantType;
	
	/** A variant containing the parsed content */
	ContentVariantType ParsedContent;

	/** A parsed map of the headers from the request */
	TMap<FString, FString> HeadersMap;

public:
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @param [out] OutContent A copy of the response data, if the type matched
	 * @return Whether or not the response was of the given type
	 */
	template<typename T>
	bool TryGetContent(T& OutContent)const { const T* OutContentPtr = ParsedContent.TryGet<T>(); if (OutContentPtr != nullptr) OutContent = *OutContentPtr; return OutContentPtr != nullptr; }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @param [out] OutContent A copy of the response data, if the type matched
	 * @return Whether or not the response was of the given type
	 */
	template<typename T>
	bool TryGetContent(TOptional<T>& OutContent)const { const T* OutContentPtr = ParsedContent.TryGet<T>(); if (OutContentPtr != nullptr) OutContent = *OutContentPtr; else OutContent.Reset(); return OutContentPtr != nullptr; }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @return A pointer to the content, if it was the specified type.  The memory is owned by the response object!
	 */
	template<typename T>
	const T* TryGetContentAsPointer() const { return ParsedContent.TryGet<T>(); }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @return A optional object to the content, if it was the specified type.  The memory is owned by the returned optional object, which contains a copy of the value, if valid.
	 */
	template<typename T>
	const TOptional<T> TryGetContentAsOptional() const { const auto Ptr = TryGetContentAsPointer<T>(); return Ptr != nullptr ? *Ptr : TOptional<T>(); }
	
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @param [out] OutValue A string to store the header value to, if found
	 * @return Whether or not the header was found
	 */
	bool TryGetHeader(const FString& Header, FString& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; return OutValuePtr != nullptr; }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @param [out] OutValue A TOptional<FString> to store the header value to, if found
	 * @return Whether or not the header was found
	 */
	bool TryGetHeader(const FString& Header, TOptional<FString>& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; else OutValue.Reset(); return OutValuePtr != nullptr; }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @return A pointer to the header string value, if found.  The memory is owned by the response object!
	 */
	const FString* TryGetHeaderAsPointer(const FString& Header) const { return HeadersMap.Find(Header); }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @return An optional string of the header string value, if found.  The memory is owned by the returned optional object, which contains a copy of the value if valid.
	 */
	const TOptional<FString> TryGetHeaderAsOptional(const FString& Header) const { const auto Ptr = HeadersMap.Find(Header); return Ptr != nullptr ? *Ptr : TOptional<FString>(); }

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PlayerRankRequestResponse Content;
	

#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PlayerRankRequestResponse& OutContent) const { return TryGetContent<FRHAPI_PlayerRankRequestResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PlayerRankRequestResponse>& OutContent) const { return TryGetContent<FRHAPI_PlayerRankRequestResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PlayerRankRequestResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PlayerRankRequestResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PlayerRankRequestResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PlayerRankRequestResponse>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PlayerRankRequestResponse& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetAllPlayerUuidRanks */
DECLARE_DELEGATE_OneParam(FDelegate_GetAllPlayerUuidRanks, const FResponse_GetAllPlayerUuidRanks&);

/** @brief A helper metadata object for GetAllPlayerUuidRanks that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetAllPlayerUuidRanks
{
	/** The request type */
	typedef FRequest_GetAllPlayerUuidRanks Request;
	/** The response type */
	typedef FResponse_GetAllPlayerUuidRanks Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetAllPlayerUuidRanks Delegate;
	/** The API object that supports this API call */
	typedef FRankAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get All Player Uuid Ranks Self
 * Get all of current player's ranks
 * 
 * Required Permissions: `rank:read:self`
 * **DEPRECATED** Use the V2 endpoints
*/
struct RALLYHEREAPI_API FRequest_GetAllPlayerUuidRanksSelf : public FRequest
{
	FRequest_GetAllPlayerUuidRanksSelf();
	virtual ~FRequest_GetAllPlayerUuidRanksSelf() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
};

/** The response type for FRequest_GetAllPlayerUuidRanksSelf */
struct RALLYHEREAPI_API FResponse_GetAllPlayerUuidRanksSelf : public FResponse
{
	FResponse_GetAllPlayerUuidRanksSelf(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetAllPlayerUuidRanksSelf() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

protected:
	/** Variant type representing the potential content responses for this call */
	typedef TVariant<FRHAPI_PlayerRankRequestResponse, FRHAPI_HzApiErrorModel> ContentVariantType;
	
	/** A variant containing the parsed content */
	ContentVariantType ParsedContent;

	/** A parsed map of the headers from the request */
	TMap<FString, FString> HeadersMap;

public:
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @param [out] OutContent A copy of the response data, if the type matched
	 * @return Whether or not the response was of the given type
	 */
	template<typename T>
	bool TryGetContent(T& OutContent)const { const T* OutContentPtr = ParsedContent.TryGet<T>(); if (OutContentPtr != nullptr) OutContent = *OutContentPtr; return OutContentPtr != nullptr; }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @param [out] OutContent A copy of the response data, if the type matched
	 * @return Whether or not the response was of the given type
	 */
	template<typename T>
	bool TryGetContent(TOptional<T>& OutContent)const { const T* OutContentPtr = ParsedContent.TryGet<T>(); if (OutContentPtr != nullptr) OutContent = *OutContentPtr; else OutContent.Reset(); return OutContentPtr != nullptr; }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @return A pointer to the content, if it was the specified type.  The memory is owned by the response object!
	 */
	template<typename T>
	const T* TryGetContentAsPointer() const { return ParsedContent.TryGet<T>(); }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @return A optional object to the content, if it was the specified type.  The memory is owned by the returned optional object, which contains a copy of the value, if valid.
	 */
	template<typename T>
	const TOptional<T> TryGetContentAsOptional() const { const auto Ptr = TryGetContentAsPointer<T>(); return Ptr != nullptr ? *Ptr : TOptional<T>(); }
	
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @param [out] OutValue A string to store the header value to, if found
	 * @return Whether or not the header was found
	 */
	bool TryGetHeader(const FString& Header, FString& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; return OutValuePtr != nullptr; }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @param [out] OutValue A TOptional<FString> to store the header value to, if found
	 * @return Whether or not the header was found
	 */
	bool TryGetHeader(const FString& Header, TOptional<FString>& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; else OutValue.Reset(); return OutValuePtr != nullptr; }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @return A pointer to the header string value, if found.  The memory is owned by the response object!
	 */
	const FString* TryGetHeaderAsPointer(const FString& Header) const { return HeadersMap.Find(Header); }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @return An optional string of the header string value, if found.  The memory is owned by the returned optional object, which contains a copy of the value if valid.
	 */
	const TOptional<FString> TryGetHeaderAsOptional(const FString& Header) const { const auto Ptr = HeadersMap.Find(Header); return Ptr != nullptr ? *Ptr : TOptional<FString>(); }

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PlayerRankRequestResponse Content;
	

#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PlayerRankRequestResponse& OutContent) const { return TryGetContent<FRHAPI_PlayerRankRequestResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PlayerRankRequestResponse>& OutContent) const { return TryGetContent<FRHAPI_PlayerRankRequestResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PlayerRankRequestResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PlayerRankRequestResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PlayerRankRequestResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PlayerRankRequestResponse>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PlayerRankRequestResponse& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

};

/** The delegate class for FRequest_GetAllPlayerUuidRanksSelf */
DECLARE_DELEGATE_OneParam(FDelegate_GetAllPlayerUuidRanksSelf, const FResponse_GetAllPlayerUuidRanksSelf&);

/** @brief A helper metadata object for GetAllPlayerUuidRanksSelf that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetAllPlayerUuidRanksSelf
{
	/** The request type */
	typedef FRequest_GetAllPlayerUuidRanksSelf Request;
	/** The response type */
	typedef FResponse_GetAllPlayerUuidRanksSelf Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetAllPlayerUuidRanksSelf Delegate;
	/** The API object that supports this API call */
	typedef FRankAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get All Player Uuid Ranks Self V2
 * Get all of current player's ranks
 * 
 * Required Permissions: `rank:read:self`
*/
struct RALLYHEREAPI_API FRequest_GetAllPlayerUuidRanksSelfV2 : public FRequest
{
	FRequest_GetAllPlayerUuidRanksSelfV2();
	virtual ~FRequest_GetAllPlayerUuidRanksSelfV2() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
};

/** The response type for FRequest_GetAllPlayerUuidRanksSelfV2 */
struct RALLYHEREAPI_API FResponse_GetAllPlayerUuidRanksSelfV2 : public FResponse
{
	FResponse_GetAllPlayerUuidRanksSelfV2(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetAllPlayerUuidRanksSelfV2() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

protected:
	/** Variant type representing the potential content responses for this call */
	typedef TVariant<FRHAPI_PlayerRankRequestResponseV2, FRHAPI_HzApiErrorModel> ContentVariantType;
	
	/** A variant containing the parsed content */
	ContentVariantType ParsedContent;

	/** A parsed map of the headers from the request */
	TMap<FString, FString> HeadersMap;

public:
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @param [out] OutContent A copy of the response data, if the type matched
	 * @return Whether or not the response was of the given type
	 */
	template<typename T>
	bool TryGetContent(T& OutContent)const { const T* OutContentPtr = ParsedContent.TryGet<T>(); if (OutContentPtr != nullptr) OutContent = *OutContentPtr; return OutContentPtr != nullptr; }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @param [out] OutContent A copy of the response data, if the type matched
	 * @return Whether or not the response was of the given type
	 */
	template<typename T>
	bool TryGetContent(TOptional<T>& OutContent)const { const T* OutContentPtr = ParsedContent.TryGet<T>(); if (OutContentPtr != nullptr) OutContent = *OutContentPtr; else OutContent.Reset(); return OutContentPtr != nullptr; }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @return A pointer to the content, if it was the specified type.  The memory is owned by the response object!
	 */
	template<typename T>
	const T* TryGetContentAsPointer() const { return ParsedContent.TryGet<T>(); }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @return A optional object to the content, if it was the specified type.  The memory is owned by the returned optional object, which contains a copy of the value, if valid.
	 */
	template<typename T>
	const TOptional<T> TryGetContentAsOptional() const { const auto Ptr = TryGetContentAsPointer<T>(); return Ptr != nullptr ? *Ptr : TOptional<T>(); }
	
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @param [out] OutValue A string to store the header value to, if found
	 * @return Whether or not the header was found
	 */
	bool TryGetHeader(const FString& Header, FString& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; return OutValuePtr != nullptr; }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @param [out] OutValue A TOptional<FString> to store the header value to, if found
	 * @return Whether or not the header was found
	 */
	bool TryGetHeader(const FString& Header, TOptional<FString>& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; else OutValue.Reset(); return OutValuePtr != nullptr; }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @return A pointer to the header string value, if found.  The memory is owned by the response object!
	 */
	const FString* TryGetHeaderAsPointer(const FString& Header) const { return HeadersMap.Find(Header); }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @return An optional string of the header string value, if found.  The memory is owned by the returned optional object, which contains a copy of the value if valid.
	 */
	const TOptional<FString> TryGetHeaderAsOptional(const FString& Header) const { const auto Ptr = HeadersMap.Find(Header); return Ptr != nullptr ? *Ptr : TOptional<FString>(); }

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PlayerRankRequestResponseV2 Content;
	

#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PlayerRankRequestResponseV2& OutContent) const { return TryGetContent<FRHAPI_PlayerRankRequestResponseV2>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PlayerRankRequestResponseV2>& OutContent) const { return TryGetContent<FRHAPI_PlayerRankRequestResponseV2>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PlayerRankRequestResponseV2* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PlayerRankRequestResponseV2>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PlayerRankRequestResponseV2> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PlayerRankRequestResponseV2>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PlayerRankRequestResponseV2& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

};

/** The delegate class for FRequest_GetAllPlayerUuidRanksSelfV2 */
DECLARE_DELEGATE_OneParam(FDelegate_GetAllPlayerUuidRanksSelfV2, const FResponse_GetAllPlayerUuidRanksSelfV2&);

/** @brief A helper metadata object for GetAllPlayerUuidRanksSelfV2 that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetAllPlayerUuidRanksSelfV2
{
	/** The request type */
	typedef FRequest_GetAllPlayerUuidRanksSelfV2 Request;
	/** The response type */
	typedef FResponse_GetAllPlayerUuidRanksSelfV2 Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetAllPlayerUuidRanksSelfV2 Delegate;
	/** The API object that supports this API call */
	typedef FRankAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get All Player Uuid Ranks V2
 * Get all of a specific player's ranks
 * 
 * Required Permissions: `rank:read:self` for players acting on themselves,
 * otherwise `rank:read:any`
*/
struct RALLYHEREAPI_API FRequest_GetAllPlayerUuidRanksV2 : public FRequest
{
	FRequest_GetAllPlayerUuidRanksV2();
	virtual ~FRequest_GetAllPlayerUuidRanksV2() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FGuid PlayerUuid;
};

/** The response type for FRequest_GetAllPlayerUuidRanksV2 */
struct RALLYHEREAPI_API FResponse_GetAllPlayerUuidRanksV2 : public FResponse
{
	FResponse_GetAllPlayerUuidRanksV2(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetAllPlayerUuidRanksV2() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

protected:
	/** Variant type representing the potential content responses for this call */
	typedef TVariant<FRHAPI_PlayerRankRequestResponseV2, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> ContentVariantType;
	
	/** A variant containing the parsed content */
	ContentVariantType ParsedContent;

	/** A parsed map of the headers from the request */
	TMap<FString, FString> HeadersMap;

public:
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @param [out] OutContent A copy of the response data, if the type matched
	 * @return Whether or not the response was of the given type
	 */
	template<typename T>
	bool TryGetContent(T& OutContent)const { const T* OutContentPtr = ParsedContent.TryGet<T>(); if (OutContentPtr != nullptr) OutContent = *OutContentPtr; return OutContentPtr != nullptr; }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @param [out] OutContent A copy of the response data, if the type matched
	 * @return Whether or not the response was of the given type
	 */
	template<typename T>
	bool TryGetContent(TOptional<T>& OutContent)const { const T* OutContentPtr = ParsedContent.TryGet<T>(); if (OutContentPtr != nullptr) OutContent = *OutContentPtr; else OutContent.Reset(); return OutContentPtr != nullptr; }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @return A pointer to the content, if it was the specified type.  The memory is owned by the response object!
	 */
	template<typename T>
	const T* TryGetContentAsPointer() const { return ParsedContent.TryGet<T>(); }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @return A optional object to the content, if it was the specified type.  The memory is owned by the returned optional object, which contains a copy of the value, if valid.
	 */
	template<typename T>
	const TOptional<T> TryGetContentAsOptional() const { const auto Ptr = TryGetContentAsPointer<T>(); return Ptr != nullptr ? *Ptr : TOptional<T>(); }
	
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @param [out] OutValue A string to store the header value to, if found
	 * @return Whether or not the header was found
	 */
	bool TryGetHeader(const FString& Header, FString& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; return OutValuePtr != nullptr; }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @param [out] OutValue A TOptional<FString> to store the header value to, if found
	 * @return Whether or not the header was found
	 */
	bool TryGetHeader(const FString& Header, TOptional<FString>& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; else OutValue.Reset(); return OutValuePtr != nullptr; }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @return A pointer to the header string value, if found.  The memory is owned by the response object!
	 */
	const FString* TryGetHeaderAsPointer(const FString& Header) const { return HeadersMap.Find(Header); }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @return An optional string of the header string value, if found.  The memory is owned by the returned optional object, which contains a copy of the value if valid.
	 */
	const TOptional<FString> TryGetHeaderAsOptional(const FString& Header) const { const auto Ptr = HeadersMap.Find(Header); return Ptr != nullptr ? *Ptr : TOptional<FString>(); }

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PlayerRankRequestResponseV2 Content;
	

#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PlayerRankRequestResponseV2& OutContent) const { return TryGetContent<FRHAPI_PlayerRankRequestResponseV2>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PlayerRankRequestResponseV2>& OutContent) const { return TryGetContent<FRHAPI_PlayerRankRequestResponseV2>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PlayerRankRequestResponseV2* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PlayerRankRequestResponseV2>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PlayerRankRequestResponseV2> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PlayerRankRequestResponseV2>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PlayerRankRequestResponseV2& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetAllPlayerUuidRanksV2 */
DECLARE_DELEGATE_OneParam(FDelegate_GetAllPlayerUuidRanksV2, const FResponse_GetAllPlayerUuidRanksV2&);

/** @brief A helper metadata object for GetAllPlayerUuidRanksV2 that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetAllPlayerUuidRanksV2
{
	/** The request type */
	typedef FRequest_GetAllPlayerUuidRanksV2 Request;
	/** The response type */
	typedef FResponse_GetAllPlayerUuidRanksV2 Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetAllPlayerUuidRanksV2 Delegate;
	/** The API object that supports this API call */
	typedef FRankAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get All Rank Config V3
 * Get all rank configuration
 * 
 * Required Permissions: `rank:read:config`
*/
struct RALLYHEREAPI_API FRequest_GetAllRankConfigV3 : public FRequest
{
	FRequest_GetAllRankConfigV3();
	virtual ~FRequest_GetAllRankConfigV3() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
};

/** The response type for FRequest_GetAllRankConfigV3 */
struct RALLYHEREAPI_API FResponse_GetAllRankConfigV3 : public FResponse
{
	FResponse_GetAllRankConfigV3(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetAllRankConfigV3() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

protected:
	/** Variant type representing the potential content responses for this call */
	typedef TVariant<FRHAPI_RankConfigRequestResponseV3, FRHAPI_HzApiErrorModel> ContentVariantType;
	
	/** A variant containing the parsed content */
	ContentVariantType ParsedContent;

	/** A parsed map of the headers from the request */
	TMap<FString, FString> HeadersMap;

public:
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @param [out] OutContent A copy of the response data, if the type matched
	 * @return Whether or not the response was of the given type
	 */
	template<typename T>
	bool TryGetContent(T& OutContent)const { const T* OutContentPtr = ParsedContent.TryGet<T>(); if (OutContentPtr != nullptr) OutContent = *OutContentPtr; return OutContentPtr != nullptr; }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @param [out] OutContent A copy of the response data, if the type matched
	 * @return Whether or not the response was of the given type
	 */
	template<typename T>
	bool TryGetContent(TOptional<T>& OutContent)const { const T* OutContentPtr = ParsedContent.TryGet<T>(); if (OutContentPtr != nullptr) OutContent = *OutContentPtr; else OutContent.Reset(); return OutContentPtr != nullptr; }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @return A pointer to the content, if it was the specified type.  The memory is owned by the response object!
	 */
	template<typename T>
	const T* TryGetContentAsPointer() const { return ParsedContent.TryGet<T>(); }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @return A optional object to the content, if it was the specified type.  The memory is owned by the returned optional object, which contains a copy of the value, if valid.
	 */
	template<typename T>
	const TOptional<T> TryGetContentAsOptional() const { const auto Ptr = TryGetContentAsPointer<T>(); return Ptr != nullptr ? *Ptr : TOptional<T>(); }
	
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @param [out] OutValue A string to store the header value to, if found
	 * @return Whether or not the header was found
	 */
	bool TryGetHeader(const FString& Header, FString& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; return OutValuePtr != nullptr; }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @param [out] OutValue A TOptional<FString> to store the header value to, if found
	 * @return Whether or not the header was found
	 */
	bool TryGetHeader(const FString& Header, TOptional<FString>& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; else OutValue.Reset(); return OutValuePtr != nullptr; }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @return A pointer to the header string value, if found.  The memory is owned by the response object!
	 */
	const FString* TryGetHeaderAsPointer(const FString& Header) const { return HeadersMap.Find(Header); }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @return An optional string of the header string value, if found.  The memory is owned by the returned optional object, which contains a copy of the value if valid.
	 */
	const TOptional<FString> TryGetHeaderAsOptional(const FString& Header) const { const auto Ptr = HeadersMap.Find(Header); return Ptr != nullptr ? *Ptr : TOptional<FString>(); }

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_RankConfigRequestResponseV3 Content;
	

#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_RankConfigRequestResponseV3& OutContent) const { return TryGetContent<FRHAPI_RankConfigRequestResponseV3>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_RankConfigRequestResponseV3>& OutContent) const { return TryGetContent<FRHAPI_RankConfigRequestResponseV3>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_RankConfigRequestResponseV3* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_RankConfigRequestResponseV3>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_RankConfigRequestResponseV3> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_RankConfigRequestResponseV3>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_RankConfigRequestResponseV3& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

};

/** The delegate class for FRequest_GetAllRankConfigV3 */
DECLARE_DELEGATE_OneParam(FDelegate_GetAllRankConfigV3, const FResponse_GetAllRankConfigV3&);

/** @brief A helper metadata object for GetAllRankConfigV3 that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetAllRankConfigV3
{
	/** The request type */
	typedef FRequest_GetAllRankConfigV3 Request;
	/** The response type */
	typedef FResponse_GetAllRankConfigV3 Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetAllRankConfigV3 Delegate;
	/** The API object that supports this API call */
	typedef FRankAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Player Uuid Rank
 * Get a specific player's rank for a specific rank id
 *             
 * Required Permissions: `rank:read:self` for players acting on themselves, 
 * otherwise `rank:read:any`
 * **DEPRECATED** Use the V2 endpoint
*/
struct RALLYHEREAPI_API FRequest_GetPlayerUuidRank : public FRequest
{
	FRequest_GetPlayerUuidRank();
	virtual ~FRequest_GetPlayerUuidRank() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FGuid PlayerUuid;
	int32 RankId = 0;
};

/** The response type for FRequest_GetPlayerUuidRank */
struct RALLYHEREAPI_API FResponse_GetPlayerUuidRank : public FResponse
{
	FResponse_GetPlayerUuidRank(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetPlayerUuidRank() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

protected:
	/** Variant type representing the potential content responses for this call */
	typedef TVariant<FRHAPI_PlayerRankRequestResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> ContentVariantType;
	
	/** A variant containing the parsed content */
	ContentVariantType ParsedContent;

	/** A parsed map of the headers from the request */
	TMap<FString, FString> HeadersMap;

public:
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @param [out] OutContent A copy of the response data, if the type matched
	 * @return Whether or not the response was of the given type
	 */
	template<typename T>
	bool TryGetContent(T& OutContent)const { const T* OutContentPtr = ParsedContent.TryGet<T>(); if (OutContentPtr != nullptr) OutContent = *OutContentPtr; return OutContentPtr != nullptr; }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @param [out] OutContent A copy of the response data, if the type matched
	 * @return Whether or not the response was of the given type
	 */
	template<typename T>
	bool TryGetContent(TOptional<T>& OutContent)const { const T* OutContentPtr = ParsedContent.TryGet<T>(); if (OutContentPtr != nullptr) OutContent = *OutContentPtr; else OutContent.Reset(); return OutContentPtr != nullptr; }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @return A pointer to the content, if it was the specified type.  The memory is owned by the response object!
	 */
	template<typename T>
	const T* TryGetContentAsPointer() const { return ParsedContent.TryGet<T>(); }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @return A optional object to the content, if it was the specified type.  The memory is owned by the returned optional object, which contains a copy of the value, if valid.
	 */
	template<typename T>
	const TOptional<T> TryGetContentAsOptional() const { const auto Ptr = TryGetContentAsPointer<T>(); return Ptr != nullptr ? *Ptr : TOptional<T>(); }
	
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @param [out] OutValue A string to store the header value to, if found
	 * @return Whether or not the header was found
	 */
	bool TryGetHeader(const FString& Header, FString& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; return OutValuePtr != nullptr; }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @param [out] OutValue A TOptional<FString> to store the header value to, if found
	 * @return Whether or not the header was found
	 */
	bool TryGetHeader(const FString& Header, TOptional<FString>& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; else OutValue.Reset(); return OutValuePtr != nullptr; }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @return A pointer to the header string value, if found.  The memory is owned by the response object!
	 */
	const FString* TryGetHeaderAsPointer(const FString& Header) const { return HeadersMap.Find(Header); }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @return An optional string of the header string value, if found.  The memory is owned by the returned optional object, which contains a copy of the value if valid.
	 */
	const TOptional<FString> TryGetHeaderAsOptional(const FString& Header) const { const auto Ptr = HeadersMap.Find(Header); return Ptr != nullptr ? *Ptr : TOptional<FString>(); }

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PlayerRankRequestResponse Content;
	

#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PlayerRankRequestResponse& OutContent) const { return TryGetContent<FRHAPI_PlayerRankRequestResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PlayerRankRequestResponse>& OutContent) const { return TryGetContent<FRHAPI_PlayerRankRequestResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PlayerRankRequestResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PlayerRankRequestResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PlayerRankRequestResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PlayerRankRequestResponse>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PlayerRankRequestResponse& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetPlayerUuidRank */
DECLARE_DELEGATE_OneParam(FDelegate_GetPlayerUuidRank, const FResponse_GetPlayerUuidRank&);

/** @brief A helper metadata object for GetPlayerUuidRank that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetPlayerUuidRank
{
	/** The request type */
	typedef FRequest_GetPlayerUuidRank Request;
	/** The response type */
	typedef FResponse_GetPlayerUuidRank Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetPlayerUuidRank Delegate;
	/** The API object that supports this API call */
	typedef FRankAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Player Uuid Rank Self
 * Get current player's rank for a specific rank id
 *             
 * Required Permissions: `rank:read:self`
 * **DEPRECATED** Use the V2 endpoint
*/
struct RALLYHEREAPI_API FRequest_GetPlayerUuidRankSelf : public FRequest
{
	FRequest_GetPlayerUuidRankSelf();
	virtual ~FRequest_GetPlayerUuidRankSelf() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	int32 RankId = 0;
};

/** The response type for FRequest_GetPlayerUuidRankSelf */
struct RALLYHEREAPI_API FResponse_GetPlayerUuidRankSelf : public FResponse
{
	FResponse_GetPlayerUuidRankSelf(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetPlayerUuidRankSelf() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

protected:
	/** Variant type representing the potential content responses for this call */
	typedef TVariant<FRHAPI_PlayerRankRequestResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> ContentVariantType;
	
	/** A variant containing the parsed content */
	ContentVariantType ParsedContent;

	/** A parsed map of the headers from the request */
	TMap<FString, FString> HeadersMap;

public:
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @param [out] OutContent A copy of the response data, if the type matched
	 * @return Whether or not the response was of the given type
	 */
	template<typename T>
	bool TryGetContent(T& OutContent)const { const T* OutContentPtr = ParsedContent.TryGet<T>(); if (OutContentPtr != nullptr) OutContent = *OutContentPtr; return OutContentPtr != nullptr; }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @param [out] OutContent A copy of the response data, if the type matched
	 * @return Whether or not the response was of the given type
	 */
	template<typename T>
	bool TryGetContent(TOptional<T>& OutContent)const { const T* OutContentPtr = ParsedContent.TryGet<T>(); if (OutContentPtr != nullptr) OutContent = *OutContentPtr; else OutContent.Reset(); return OutContentPtr != nullptr; }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @return A pointer to the content, if it was the specified type.  The memory is owned by the response object!
	 */
	template<typename T>
	const T* TryGetContentAsPointer() const { return ParsedContent.TryGet<T>(); }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @return A optional object to the content, if it was the specified type.  The memory is owned by the returned optional object, which contains a copy of the value, if valid.
	 */
	template<typename T>
	const TOptional<T> TryGetContentAsOptional() const { const auto Ptr = TryGetContentAsPointer<T>(); return Ptr != nullptr ? *Ptr : TOptional<T>(); }
	
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @param [out] OutValue A string to store the header value to, if found
	 * @return Whether or not the header was found
	 */
	bool TryGetHeader(const FString& Header, FString& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; return OutValuePtr != nullptr; }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @param [out] OutValue A TOptional<FString> to store the header value to, if found
	 * @return Whether or not the header was found
	 */
	bool TryGetHeader(const FString& Header, TOptional<FString>& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; else OutValue.Reset(); return OutValuePtr != nullptr; }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @return A pointer to the header string value, if found.  The memory is owned by the response object!
	 */
	const FString* TryGetHeaderAsPointer(const FString& Header) const { return HeadersMap.Find(Header); }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @return An optional string of the header string value, if found.  The memory is owned by the returned optional object, which contains a copy of the value if valid.
	 */
	const TOptional<FString> TryGetHeaderAsOptional(const FString& Header) const { const auto Ptr = HeadersMap.Find(Header); return Ptr != nullptr ? *Ptr : TOptional<FString>(); }

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PlayerRankRequestResponse Content;
	

#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PlayerRankRequestResponse& OutContent) const { return TryGetContent<FRHAPI_PlayerRankRequestResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PlayerRankRequestResponse>& OutContent) const { return TryGetContent<FRHAPI_PlayerRankRequestResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PlayerRankRequestResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PlayerRankRequestResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PlayerRankRequestResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PlayerRankRequestResponse>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PlayerRankRequestResponse& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetPlayerUuidRankSelf */
DECLARE_DELEGATE_OneParam(FDelegate_GetPlayerUuidRankSelf, const FResponse_GetPlayerUuidRankSelf&);

/** @brief A helper metadata object for GetPlayerUuidRankSelf that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetPlayerUuidRankSelf
{
	/** The request type */
	typedef FRequest_GetPlayerUuidRankSelf Request;
	/** The response type */
	typedef FResponse_GetPlayerUuidRankSelf Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetPlayerUuidRankSelf Delegate;
	/** The API object that supports this API call */
	typedef FRankAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Player Uuid Rank Self V2
 * Get current player's rank for a specific rank id
 * 
 * Required Permissions: `rank:read:self`
*/
struct RALLYHEREAPI_API FRequest_GetPlayerUuidRankSelfV2 : public FRequest
{
	FRequest_GetPlayerUuidRankSelfV2();
	virtual ~FRequest_GetPlayerUuidRankSelfV2() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString RankId;
};

/** The response type for FRequest_GetPlayerUuidRankSelfV2 */
struct RALLYHEREAPI_API FResponse_GetPlayerUuidRankSelfV2 : public FResponse
{
	FResponse_GetPlayerUuidRankSelfV2(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetPlayerUuidRankSelfV2() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

protected:
	/** Variant type representing the potential content responses for this call */
	typedef TVariant<FRHAPI_PlayerRankRequestResponseV2, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> ContentVariantType;
	
	/** A variant containing the parsed content */
	ContentVariantType ParsedContent;

	/** A parsed map of the headers from the request */
	TMap<FString, FString> HeadersMap;

public:
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @param [out] OutContent A copy of the response data, if the type matched
	 * @return Whether or not the response was of the given type
	 */
	template<typename T>
	bool TryGetContent(T& OutContent)const { const T* OutContentPtr = ParsedContent.TryGet<T>(); if (OutContentPtr != nullptr) OutContent = *OutContentPtr; return OutContentPtr != nullptr; }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @param [out] OutContent A copy of the response data, if the type matched
	 * @return Whether or not the response was of the given type
	 */
	template<typename T>
	bool TryGetContent(TOptional<T>& OutContent)const { const T* OutContentPtr = ParsedContent.TryGet<T>(); if (OutContentPtr != nullptr) OutContent = *OutContentPtr; else OutContent.Reset(); return OutContentPtr != nullptr; }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @return A pointer to the content, if it was the specified type.  The memory is owned by the response object!
	 */
	template<typename T>
	const T* TryGetContentAsPointer() const { return ParsedContent.TryGet<T>(); }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @return A optional object to the content, if it was the specified type.  The memory is owned by the returned optional object, which contains a copy of the value, if valid.
	 */
	template<typename T>
	const TOptional<T> TryGetContentAsOptional() const { const auto Ptr = TryGetContentAsPointer<T>(); return Ptr != nullptr ? *Ptr : TOptional<T>(); }
	
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @param [out] OutValue A string to store the header value to, if found
	 * @return Whether or not the header was found
	 */
	bool TryGetHeader(const FString& Header, FString& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; return OutValuePtr != nullptr; }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @param [out] OutValue A TOptional<FString> to store the header value to, if found
	 * @return Whether or not the header was found
	 */
	bool TryGetHeader(const FString& Header, TOptional<FString>& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; else OutValue.Reset(); return OutValuePtr != nullptr; }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @return A pointer to the header string value, if found.  The memory is owned by the response object!
	 */
	const FString* TryGetHeaderAsPointer(const FString& Header) const { return HeadersMap.Find(Header); }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @return An optional string of the header string value, if found.  The memory is owned by the returned optional object, which contains a copy of the value if valid.
	 */
	const TOptional<FString> TryGetHeaderAsOptional(const FString& Header) const { const auto Ptr = HeadersMap.Find(Header); return Ptr != nullptr ? *Ptr : TOptional<FString>(); }

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PlayerRankRequestResponseV2 Content;
	

#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PlayerRankRequestResponseV2& OutContent) const { return TryGetContent<FRHAPI_PlayerRankRequestResponseV2>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PlayerRankRequestResponseV2>& OutContent) const { return TryGetContent<FRHAPI_PlayerRankRequestResponseV2>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PlayerRankRequestResponseV2* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PlayerRankRequestResponseV2>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PlayerRankRequestResponseV2> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PlayerRankRequestResponseV2>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PlayerRankRequestResponseV2& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetPlayerUuidRankSelfV2 */
DECLARE_DELEGATE_OneParam(FDelegate_GetPlayerUuidRankSelfV2, const FResponse_GetPlayerUuidRankSelfV2&);

/** @brief A helper metadata object for GetPlayerUuidRankSelfV2 that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetPlayerUuidRankSelfV2
{
	/** The request type */
	typedef FRequest_GetPlayerUuidRankSelfV2 Request;
	/** The response type */
	typedef FResponse_GetPlayerUuidRankSelfV2 Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetPlayerUuidRankSelfV2 Delegate;
	/** The API object that supports this API call */
	typedef FRankAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Player Uuid Rank V2
 * Get a specific player's rank for a specific rank id
 * 
 * Required Permissions: `rank:read:self` for players acting on themselves, 
 * otherwise `rank:read:any`
*/
struct RALLYHEREAPI_API FRequest_GetPlayerUuidRankV2 : public FRequest
{
	FRequest_GetPlayerUuidRankV2();
	virtual ~FRequest_GetPlayerUuidRankV2() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FGuid PlayerUuid;
	FString RankId;
};

/** The response type for FRequest_GetPlayerUuidRankV2 */
struct RALLYHEREAPI_API FResponse_GetPlayerUuidRankV2 : public FResponse
{
	FResponse_GetPlayerUuidRankV2(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetPlayerUuidRankV2() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

protected:
	/** Variant type representing the potential content responses for this call */
	typedef TVariant<FRHAPI_PlayerRankRequestResponseV2, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> ContentVariantType;
	
	/** A variant containing the parsed content */
	ContentVariantType ParsedContent;

	/** A parsed map of the headers from the request */
	TMap<FString, FString> HeadersMap;

public:
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @param [out] OutContent A copy of the response data, if the type matched
	 * @return Whether or not the response was of the given type
	 */
	template<typename T>
	bool TryGetContent(T& OutContent)const { const T* OutContentPtr = ParsedContent.TryGet<T>(); if (OutContentPtr != nullptr) OutContent = *OutContentPtr; return OutContentPtr != nullptr; }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @param [out] OutContent A copy of the response data, if the type matched
	 * @return Whether or not the response was of the given type
	 */
	template<typename T>
	bool TryGetContent(TOptional<T>& OutContent)const { const T* OutContentPtr = ParsedContent.TryGet<T>(); if (OutContentPtr != nullptr) OutContent = *OutContentPtr; else OutContent.Reset(); return OutContentPtr != nullptr; }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @return A pointer to the content, if it was the specified type.  The memory is owned by the response object!
	 */
	template<typename T>
	const T* TryGetContentAsPointer() const { return ParsedContent.TryGet<T>(); }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @return A optional object to the content, if it was the specified type.  The memory is owned by the returned optional object, which contains a copy of the value, if valid.
	 */
	template<typename T>
	const TOptional<T> TryGetContentAsOptional() const { const auto Ptr = TryGetContentAsPointer<T>(); return Ptr != nullptr ? *Ptr : TOptional<T>(); }
	
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @param [out] OutValue A string to store the header value to, if found
	 * @return Whether or not the header was found
	 */
	bool TryGetHeader(const FString& Header, FString& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; return OutValuePtr != nullptr; }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @param [out] OutValue A TOptional<FString> to store the header value to, if found
	 * @return Whether or not the header was found
	 */
	bool TryGetHeader(const FString& Header, TOptional<FString>& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; else OutValue.Reset(); return OutValuePtr != nullptr; }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @return A pointer to the header string value, if found.  The memory is owned by the response object!
	 */
	const FString* TryGetHeaderAsPointer(const FString& Header) const { return HeadersMap.Find(Header); }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @return An optional string of the header string value, if found.  The memory is owned by the returned optional object, which contains a copy of the value if valid.
	 */
	const TOptional<FString> TryGetHeaderAsOptional(const FString& Header) const { const auto Ptr = HeadersMap.Find(Header); return Ptr != nullptr ? *Ptr : TOptional<FString>(); }

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PlayerRankRequestResponseV2 Content;
	

#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PlayerRankRequestResponseV2& OutContent) const { return TryGetContent<FRHAPI_PlayerRankRequestResponseV2>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PlayerRankRequestResponseV2>& OutContent) const { return TryGetContent<FRHAPI_PlayerRankRequestResponseV2>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PlayerRankRequestResponseV2* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PlayerRankRequestResponseV2>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PlayerRankRequestResponseV2> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PlayerRankRequestResponseV2>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PlayerRankRequestResponseV2& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetPlayerUuidRankV2 */
DECLARE_DELEGATE_OneParam(FDelegate_GetPlayerUuidRankV2, const FResponse_GetPlayerUuidRankV2&);

/** @brief A helper metadata object for GetPlayerUuidRankV2 that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetPlayerUuidRankV2
{
	/** The request type */
	typedef FRequest_GetPlayerUuidRankV2 Request;
	/** The response type */
	typedef FResponse_GetPlayerUuidRankV2 Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetPlayerUuidRankV2 Delegate;
	/** The API object that supports this API call */
	typedef FRankAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Rank Config V3
 * Get rank configuration for specific rank id
 * 
 * Required Permissions: `rank:read:config`
*/
struct RALLYHEREAPI_API FRequest_GetRankConfigV3 : public FRequest
{
	FRequest_GetRankConfigV3();
	virtual ~FRequest_GetRankConfigV3() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString RankId;
};

/** The response type for FRequest_GetRankConfigV3 */
struct RALLYHEREAPI_API FResponse_GetRankConfigV3 : public FResponse
{
	FResponse_GetRankConfigV3(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetRankConfigV3() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

protected:
	/** Variant type representing the potential content responses for this call */
	typedef TVariant<FRHAPI_RankConfigRequestResponseV3, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> ContentVariantType;
	
	/** A variant containing the parsed content */
	ContentVariantType ParsedContent;

	/** A parsed map of the headers from the request */
	TMap<FString, FString> HeadersMap;

public:
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @param [out] OutContent A copy of the response data, if the type matched
	 * @return Whether or not the response was of the given type
	 */
	template<typename T>
	bool TryGetContent(T& OutContent)const { const T* OutContentPtr = ParsedContent.TryGet<T>(); if (OutContentPtr != nullptr) OutContent = *OutContentPtr; return OutContentPtr != nullptr; }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @param [out] OutContent A copy of the response data, if the type matched
	 * @return Whether or not the response was of the given type
	 */
	template<typename T>
	bool TryGetContent(TOptional<T>& OutContent)const { const T* OutContentPtr = ParsedContent.TryGet<T>(); if (OutContentPtr != nullptr) OutContent = *OutContentPtr; else OutContent.Reset(); return OutContentPtr != nullptr; }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @return A pointer to the content, if it was the specified type.  The memory is owned by the response object!
	 */
	template<typename T>
	const T* TryGetContentAsPointer() const { return ParsedContent.TryGet<T>(); }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @return A optional object to the content, if it was the specified type.  The memory is owned by the returned optional object, which contains a copy of the value, if valid.
	 */
	template<typename T>
	const TOptional<T> TryGetContentAsOptional() const { const auto Ptr = TryGetContentAsPointer<T>(); return Ptr != nullptr ? *Ptr : TOptional<T>(); }
	
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @param [out] OutValue A string to store the header value to, if found
	 * @return Whether or not the header was found
	 */
	bool TryGetHeader(const FString& Header, FString& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; return OutValuePtr != nullptr; }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @param [out] OutValue A TOptional<FString> to store the header value to, if found
	 * @return Whether or not the header was found
	 */
	bool TryGetHeader(const FString& Header, TOptional<FString>& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; else OutValue.Reset(); return OutValuePtr != nullptr; }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @return A pointer to the header string value, if found.  The memory is owned by the response object!
	 */
	const FString* TryGetHeaderAsPointer(const FString& Header) const { return HeadersMap.Find(Header); }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @return An optional string of the header string value, if found.  The memory is owned by the returned optional object, which contains a copy of the value if valid.
	 */
	const TOptional<FString> TryGetHeaderAsOptional(const FString& Header) const { const auto Ptr = HeadersMap.Find(Header); return Ptr != nullptr ? *Ptr : TOptional<FString>(); }

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_RankConfigRequestResponseV3 Content;
	

#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_RankConfigRequestResponseV3& OutContent) const { return TryGetContent<FRHAPI_RankConfigRequestResponseV3>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_RankConfigRequestResponseV3>& OutContent) const { return TryGetContent<FRHAPI_RankConfigRequestResponseV3>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_RankConfigRequestResponseV3* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_RankConfigRequestResponseV3>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_RankConfigRequestResponseV3> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_RankConfigRequestResponseV3>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_RankConfigRequestResponseV3& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetRankConfigV3 */
DECLARE_DELEGATE_OneParam(FDelegate_GetRankConfigV3, const FResponse_GetRankConfigV3&);

/** @brief A helper metadata object for GetRankConfigV3 that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetRankConfigV3
{
	/** The request type */
	typedef FRequest_GetRankConfigV3 Request;
	/** The response type */
	typedef FResponse_GetRankConfigV3 Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetRankConfigV3 Delegate;
	/** The API object that supports this API call */
	typedef FRankAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Update Player Uuid Rank
 * Update a specific player's ranks to those that are provided. Ranks are taken as is
 * 
 * Required Permissions: `rank:update:self` for players acting on themselves, 
 * otherwise `rank:update:any`
 * **DEPRECATED** Use V2 endpoints
*/
struct RALLYHEREAPI_API FRequest_UpdatePlayerUuidRank : public FRequest
{
	FRequest_UpdatePlayerUuidRank();
	virtual ~FRequest_UpdatePlayerUuidRank() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FGuid PlayerUuid;
	int32 RankId = 0;
	FRHAPI_PlayerRankUpdateRequest PlayerRankUpdateRequest;
};

/** The response type for FRequest_UpdatePlayerUuidRank */
struct RALLYHEREAPI_API FResponse_UpdatePlayerUuidRank : public FResponse
{
	FResponse_UpdatePlayerUuidRank(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_UpdatePlayerUuidRank() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

protected:
	/** Variant type representing the potential content responses for this call */
	typedef TVariant<FRHAPI_PlayerRankUpdateResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> ContentVariantType;
	
	/** A variant containing the parsed content */
	ContentVariantType ParsedContent;

	/** A parsed map of the headers from the request */
	TMap<FString, FString> HeadersMap;

public:
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @param [out] OutContent A copy of the response data, if the type matched
	 * @return Whether or not the response was of the given type
	 */
	template<typename T>
	bool TryGetContent(T& OutContent)const { const T* OutContentPtr = ParsedContent.TryGet<T>(); if (OutContentPtr != nullptr) OutContent = *OutContentPtr; return OutContentPtr != nullptr; }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @param [out] OutContent A copy of the response data, if the type matched
	 * @return Whether or not the response was of the given type
	 */
	template<typename T>
	bool TryGetContent(TOptional<T>& OutContent)const { const T* OutContentPtr = ParsedContent.TryGet<T>(); if (OutContentPtr != nullptr) OutContent = *OutContentPtr; else OutContent.Reset(); return OutContentPtr != nullptr; }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @return A pointer to the content, if it was the specified type.  The memory is owned by the response object!
	 */
	template<typename T>
	const T* TryGetContentAsPointer() const { return ParsedContent.TryGet<T>(); }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @return A optional object to the content, if it was the specified type.  The memory is owned by the returned optional object, which contains a copy of the value, if valid.
	 */
	template<typename T>
	const TOptional<T> TryGetContentAsOptional() const { const auto Ptr = TryGetContentAsPointer<T>(); return Ptr != nullptr ? *Ptr : TOptional<T>(); }
	
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @param [out] OutValue A string to store the header value to, if found
	 * @return Whether or not the header was found
	 */
	bool TryGetHeader(const FString& Header, FString& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; return OutValuePtr != nullptr; }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @param [out] OutValue A TOptional<FString> to store the header value to, if found
	 * @return Whether or not the header was found
	 */
	bool TryGetHeader(const FString& Header, TOptional<FString>& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; else OutValue.Reset(); return OutValuePtr != nullptr; }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @return A pointer to the header string value, if found.  The memory is owned by the response object!
	 */
	const FString* TryGetHeaderAsPointer(const FString& Header) const { return HeadersMap.Find(Header); }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @return An optional string of the header string value, if found.  The memory is owned by the returned optional object, which contains a copy of the value if valid.
	 */
	const TOptional<FString> TryGetHeaderAsOptional(const FString& Header) const { const auto Ptr = HeadersMap.Find(Header); return Ptr != nullptr ? *Ptr : TOptional<FString>(); }

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PlayerRankUpdateResponse Content;
	

#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PlayerRankUpdateResponse& OutContent) const { return TryGetContent<FRHAPI_PlayerRankUpdateResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PlayerRankUpdateResponse>& OutContent) const { return TryGetContent<FRHAPI_PlayerRankUpdateResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PlayerRankUpdateResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PlayerRankUpdateResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PlayerRankUpdateResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PlayerRankUpdateResponse>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PlayerRankUpdateResponse& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_UpdatePlayerUuidRank */
DECLARE_DELEGATE_OneParam(FDelegate_UpdatePlayerUuidRank, const FResponse_UpdatePlayerUuidRank&);

/** @brief A helper metadata object for UpdatePlayerUuidRank that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_UpdatePlayerUuidRank
{
	/** The request type */
	typedef FRequest_UpdatePlayerUuidRank Request;
	/** The response type */
	typedef FResponse_UpdatePlayerUuidRank Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_UpdatePlayerUuidRank Delegate;
	/** The API object that supports this API call */
	typedef FRankAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Update Player Uuid Rank Self
 * Update current player's ranks to those that are provided. Ranks are taken as is 
 * 
 * Required Permissions: `rank:update:self`
 * **DEPRECATED** Use the V2 endpoint
*/
struct RALLYHEREAPI_API FRequest_UpdatePlayerUuidRankSelf : public FRequest
{
	FRequest_UpdatePlayerUuidRankSelf();
	virtual ~FRequest_UpdatePlayerUuidRankSelf() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	int32 RankId = 0;
	FRHAPI_PlayerRankUpdateRequest PlayerRankUpdateRequest;
};

/** The response type for FRequest_UpdatePlayerUuidRankSelf */
struct RALLYHEREAPI_API FResponse_UpdatePlayerUuidRankSelf : public FResponse
{
	FResponse_UpdatePlayerUuidRankSelf(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_UpdatePlayerUuidRankSelf() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

protected:
	/** Variant type representing the potential content responses for this call */
	typedef TVariant<FRHAPI_PlayerRankUpdateResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> ContentVariantType;
	
	/** A variant containing the parsed content */
	ContentVariantType ParsedContent;

	/** A parsed map of the headers from the request */
	TMap<FString, FString> HeadersMap;

public:
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @param [out] OutContent A copy of the response data, if the type matched
	 * @return Whether or not the response was of the given type
	 */
	template<typename T>
	bool TryGetContent(T& OutContent)const { const T* OutContentPtr = ParsedContent.TryGet<T>(); if (OutContentPtr != nullptr) OutContent = *OutContentPtr; return OutContentPtr != nullptr; }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @param [out] OutContent A copy of the response data, if the type matched
	 * @return Whether or not the response was of the given type
	 */
	template<typename T>
	bool TryGetContent(TOptional<T>& OutContent)const { const T* OutContentPtr = ParsedContent.TryGet<T>(); if (OutContentPtr != nullptr) OutContent = *OutContentPtr; else OutContent.Reset(); return OutContentPtr != nullptr; }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @return A pointer to the content, if it was the specified type.  The memory is owned by the response object!
	 */
	template<typename T>
	const T* TryGetContentAsPointer() const { return ParsedContent.TryGet<T>(); }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @return A optional object to the content, if it was the specified type.  The memory is owned by the returned optional object, which contains a copy of the value, if valid.
	 */
	template<typename T>
	const TOptional<T> TryGetContentAsOptional() const { const auto Ptr = TryGetContentAsPointer<T>(); return Ptr != nullptr ? *Ptr : TOptional<T>(); }
	
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @param [out] OutValue A string to store the header value to, if found
	 * @return Whether or not the header was found
	 */
	bool TryGetHeader(const FString& Header, FString& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; return OutValuePtr != nullptr; }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @param [out] OutValue A TOptional<FString> to store the header value to, if found
	 * @return Whether or not the header was found
	 */
	bool TryGetHeader(const FString& Header, TOptional<FString>& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; else OutValue.Reset(); return OutValuePtr != nullptr; }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @return A pointer to the header string value, if found.  The memory is owned by the response object!
	 */
	const FString* TryGetHeaderAsPointer(const FString& Header) const { return HeadersMap.Find(Header); }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @return An optional string of the header string value, if found.  The memory is owned by the returned optional object, which contains a copy of the value if valid.
	 */
	const TOptional<FString> TryGetHeaderAsOptional(const FString& Header) const { const auto Ptr = HeadersMap.Find(Header); return Ptr != nullptr ? *Ptr : TOptional<FString>(); }

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PlayerRankUpdateResponse Content;
	

#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PlayerRankUpdateResponse& OutContent) const { return TryGetContent<FRHAPI_PlayerRankUpdateResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PlayerRankUpdateResponse>& OutContent) const { return TryGetContent<FRHAPI_PlayerRankUpdateResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PlayerRankUpdateResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PlayerRankUpdateResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PlayerRankUpdateResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PlayerRankUpdateResponse>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PlayerRankUpdateResponse& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_UpdatePlayerUuidRankSelf */
DECLARE_DELEGATE_OneParam(FDelegate_UpdatePlayerUuidRankSelf, const FResponse_UpdatePlayerUuidRankSelf&);

/** @brief A helper metadata object for UpdatePlayerUuidRankSelf that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_UpdatePlayerUuidRankSelf
{
	/** The request type */
	typedef FRequest_UpdatePlayerUuidRankSelf Request;
	/** The response type */
	typedef FResponse_UpdatePlayerUuidRankSelf Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_UpdatePlayerUuidRankSelf Delegate;
	/** The API object that supports this API call */
	typedef FRankAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Update Player Uuid Rank Self V2
 * Update current player's ranks to those that are provided. Ranks are taken as is 
 * 
 * Required Permissions: `rank:update:self`
*/
struct RALLYHEREAPI_API FRequest_UpdatePlayerUuidRankSelfV2 : public FRequest
{
	FRequest_UpdatePlayerUuidRankSelfV2();
	virtual ~FRequest_UpdatePlayerUuidRankSelfV2() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString RankId;
	FRHAPI_PlayerRankUpdateRequest PlayerRankUpdateRequest;
};

/** The response type for FRequest_UpdatePlayerUuidRankSelfV2 */
struct RALLYHEREAPI_API FResponse_UpdatePlayerUuidRankSelfV2 : public FResponse
{
	FResponse_UpdatePlayerUuidRankSelfV2(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_UpdatePlayerUuidRankSelfV2() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

protected:
	/** Variant type representing the potential content responses for this call */
	typedef TVariant<FRHAPI_PlayerRankUpdateResponseV2, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> ContentVariantType;
	
	/** A variant containing the parsed content */
	ContentVariantType ParsedContent;

	/** A parsed map of the headers from the request */
	TMap<FString, FString> HeadersMap;

public:
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @param [out] OutContent A copy of the response data, if the type matched
	 * @return Whether or not the response was of the given type
	 */
	template<typename T>
	bool TryGetContent(T& OutContent)const { const T* OutContentPtr = ParsedContent.TryGet<T>(); if (OutContentPtr != nullptr) OutContent = *OutContentPtr; return OutContentPtr != nullptr; }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @param [out] OutContent A copy of the response data, if the type matched
	 * @return Whether or not the response was of the given type
	 */
	template<typename T>
	bool TryGetContent(TOptional<T>& OutContent)const { const T* OutContentPtr = ParsedContent.TryGet<T>(); if (OutContentPtr != nullptr) OutContent = *OutContentPtr; else OutContent.Reset(); return OutContentPtr != nullptr; }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @return A pointer to the content, if it was the specified type.  The memory is owned by the response object!
	 */
	template<typename T>
	const T* TryGetContentAsPointer() const { return ParsedContent.TryGet<T>(); }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @return A optional object to the content, if it was the specified type.  The memory is owned by the returned optional object, which contains a copy of the value, if valid.
	 */
	template<typename T>
	const TOptional<T> TryGetContentAsOptional() const { const auto Ptr = TryGetContentAsPointer<T>(); return Ptr != nullptr ? *Ptr : TOptional<T>(); }
	
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @param [out] OutValue A string to store the header value to, if found
	 * @return Whether or not the header was found
	 */
	bool TryGetHeader(const FString& Header, FString& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; return OutValuePtr != nullptr; }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @param [out] OutValue A TOptional<FString> to store the header value to, if found
	 * @return Whether or not the header was found
	 */
	bool TryGetHeader(const FString& Header, TOptional<FString>& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; else OutValue.Reset(); return OutValuePtr != nullptr; }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @return A pointer to the header string value, if found.  The memory is owned by the response object!
	 */
	const FString* TryGetHeaderAsPointer(const FString& Header) const { return HeadersMap.Find(Header); }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @return An optional string of the header string value, if found.  The memory is owned by the returned optional object, which contains a copy of the value if valid.
	 */
	const TOptional<FString> TryGetHeaderAsOptional(const FString& Header) const { const auto Ptr = HeadersMap.Find(Header); return Ptr != nullptr ? *Ptr : TOptional<FString>(); }

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PlayerRankUpdateResponseV2 Content;
	

#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PlayerRankUpdateResponseV2& OutContent) const { return TryGetContent<FRHAPI_PlayerRankUpdateResponseV2>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PlayerRankUpdateResponseV2>& OutContent) const { return TryGetContent<FRHAPI_PlayerRankUpdateResponseV2>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PlayerRankUpdateResponseV2* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PlayerRankUpdateResponseV2>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PlayerRankUpdateResponseV2> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PlayerRankUpdateResponseV2>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PlayerRankUpdateResponseV2& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_UpdatePlayerUuidRankSelfV2 */
DECLARE_DELEGATE_OneParam(FDelegate_UpdatePlayerUuidRankSelfV2, const FResponse_UpdatePlayerUuidRankSelfV2&);

/** @brief A helper metadata object for UpdatePlayerUuidRankSelfV2 that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_UpdatePlayerUuidRankSelfV2
{
	/** The request type */
	typedef FRequest_UpdatePlayerUuidRankSelfV2 Request;
	/** The response type */
	typedef FResponse_UpdatePlayerUuidRankSelfV2 Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_UpdatePlayerUuidRankSelfV2 Delegate;
	/** The API object that supports this API call */
	typedef FRankAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Update Player Uuid Rank V2
 * Update a specific player's ranks to those that are provided. Ranks are taken as is
 * 
 * Required Permissions: `rank:update:self` for players acting on themselves, 
 * otherwise `rank:update:any`
*/
struct RALLYHEREAPI_API FRequest_UpdatePlayerUuidRankV2 : public FRequest
{
	FRequest_UpdatePlayerUuidRankV2();
	virtual ~FRequest_UpdatePlayerUuidRankV2() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FGuid PlayerUuid;
	FString RankId;
	FRHAPI_PlayerRankUpdateRequest PlayerRankUpdateRequest;
};

/** The response type for FRequest_UpdatePlayerUuidRankV2 */
struct RALLYHEREAPI_API FResponse_UpdatePlayerUuidRankV2 : public FResponse
{
	FResponse_UpdatePlayerUuidRankV2(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_UpdatePlayerUuidRankV2() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

protected:
	/** Variant type representing the potential content responses for this call */
	typedef TVariant<FRHAPI_PlayerRankUpdateResponseV2, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> ContentVariantType;
	
	/** A variant containing the parsed content */
	ContentVariantType ParsedContent;

	/** A parsed map of the headers from the request */
	TMap<FString, FString> HeadersMap;

public:
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @param [out] OutContent A copy of the response data, if the type matched
	 * @return Whether or not the response was of the given type
	 */
	template<typename T>
	bool TryGetContent(T& OutContent)const { const T* OutContentPtr = ParsedContent.TryGet<T>(); if (OutContentPtr != nullptr) OutContent = *OutContentPtr; return OutContentPtr != nullptr; }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @param [out] OutContent A copy of the response data, if the type matched
	 * @return Whether or not the response was of the given type
	 */
	template<typename T>
	bool TryGetContent(TOptional<T>& OutContent)const { const T* OutContentPtr = ParsedContent.TryGet<T>(); if (OutContentPtr != nullptr) OutContent = *OutContentPtr; else OutContent.Reset(); return OutContentPtr != nullptr; }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @return A pointer to the content, if it was the specified type.  The memory is owned by the response object!
	 */
	template<typename T>
	const T* TryGetContentAsPointer() const { return ParsedContent.TryGet<T>(); }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @return A optional object to the content, if it was the specified type.  The memory is owned by the returned optional object, which contains a copy of the value, if valid.
	 */
	template<typename T>
	const TOptional<T> TryGetContentAsOptional() const { const auto Ptr = TryGetContentAsPointer<T>(); return Ptr != nullptr ? *Ptr : TOptional<T>(); }
	
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @param [out] OutValue A string to store the header value to, if found
	 * @return Whether or not the header was found
	 */
	bool TryGetHeader(const FString& Header, FString& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; return OutValuePtr != nullptr; }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @param [out] OutValue A TOptional<FString> to store the header value to, if found
	 * @return Whether or not the header was found
	 */
	bool TryGetHeader(const FString& Header, TOptional<FString>& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; else OutValue.Reset(); return OutValuePtr != nullptr; }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @return A pointer to the header string value, if found.  The memory is owned by the response object!
	 */
	const FString* TryGetHeaderAsPointer(const FString& Header) const { return HeadersMap.Find(Header); }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @return An optional string of the header string value, if found.  The memory is owned by the returned optional object, which contains a copy of the value if valid.
	 */
	const TOptional<FString> TryGetHeaderAsOptional(const FString& Header) const { const auto Ptr = HeadersMap.Find(Header); return Ptr != nullptr ? *Ptr : TOptional<FString>(); }

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PlayerRankUpdateResponseV2 Content;
	

#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PlayerRankUpdateResponseV2& OutContent) const { return TryGetContent<FRHAPI_PlayerRankUpdateResponseV2>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PlayerRankUpdateResponseV2>& OutContent) const { return TryGetContent<FRHAPI_PlayerRankUpdateResponseV2>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PlayerRankUpdateResponseV2* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PlayerRankUpdateResponseV2>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PlayerRankUpdateResponseV2> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PlayerRankUpdateResponseV2>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PlayerRankUpdateResponseV2& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_UpdatePlayerUuidRankV2 */
DECLARE_DELEGATE_OneParam(FDelegate_UpdatePlayerUuidRankV2, const FResponse_UpdatePlayerUuidRankV2&);

/** @brief A helper metadata object for UpdatePlayerUuidRankV2 that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_UpdatePlayerUuidRankV2
{
	/** The request type */
	typedef FRequest_UpdatePlayerUuidRankV2 Request;
	/** The response type */
	typedef FResponse_UpdatePlayerUuidRankV2 Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_UpdatePlayerUuidRankV2 Delegate;
	/** The API object that supports this API call */
	typedef FRankAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Update Rankings V1
 * Calculate and update on players and persist their new ranks
 * Requires at least two teams, and the player's ranks before the last match was played
 * 
 * Required Permissions: `rank:update:any`
 * **DEPRECATED** Use the v2 endpoint instead
*/
struct RALLYHEREAPI_API FRequest_UpdateRankingsV1 : public FRequest
{
	FRequest_UpdateRankingsV1();
	virtual ~FRequest_UpdateRankingsV1() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FRHAPI_RankUpdateRequest RankUpdateRequest;
};

/** The response type for FRequest_UpdateRankingsV1 */
struct RALLYHEREAPI_API FResponse_UpdateRankingsV1 : public FResponse
{
	FResponse_UpdateRankingsV1(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_UpdateRankingsV1() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

protected:
	/** Variant type representing the potential content responses for this call */
	typedef TVariant<FRHAPI_PlayerRankUpdateResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> ContentVariantType;
	
	/** A variant containing the parsed content */
	ContentVariantType ParsedContent;

	/** A parsed map of the headers from the request */
	TMap<FString, FString> HeadersMap;

public:
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @param [out] OutContent A copy of the response data, if the type matched
	 * @return Whether or not the response was of the given type
	 */
	template<typename T>
	bool TryGetContent(T& OutContent)const { const T* OutContentPtr = ParsedContent.TryGet<T>(); if (OutContentPtr != nullptr) OutContent = *OutContentPtr; return OutContentPtr != nullptr; }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @param [out] OutContent A copy of the response data, if the type matched
	 * @return Whether or not the response was of the given type
	 */
	template<typename T>
	bool TryGetContent(TOptional<T>& OutContent)const { const T* OutContentPtr = ParsedContent.TryGet<T>(); if (OutContentPtr != nullptr) OutContent = *OutContentPtr; else OutContent.Reset(); return OutContentPtr != nullptr; }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @return A pointer to the content, if it was the specified type.  The memory is owned by the response object!
	 */
	template<typename T>
	const T* TryGetContentAsPointer() const { return ParsedContent.TryGet<T>(); }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @return A optional object to the content, if it was the specified type.  The memory is owned by the returned optional object, which contains a copy of the value, if valid.
	 */
	template<typename T>
	const TOptional<T> TryGetContentAsOptional() const { const auto Ptr = TryGetContentAsPointer<T>(); return Ptr != nullptr ? *Ptr : TOptional<T>(); }
	
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @param [out] OutValue A string to store the header value to, if found
	 * @return Whether or not the header was found
	 */
	bool TryGetHeader(const FString& Header, FString& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; return OutValuePtr != nullptr; }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @param [out] OutValue A TOptional<FString> to store the header value to, if found
	 * @return Whether or not the header was found
	 */
	bool TryGetHeader(const FString& Header, TOptional<FString>& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; else OutValue.Reset(); return OutValuePtr != nullptr; }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @return A pointer to the header string value, if found.  The memory is owned by the response object!
	 */
	const FString* TryGetHeaderAsPointer(const FString& Header) const { return HeadersMap.Find(Header); }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @return An optional string of the header string value, if found.  The memory is owned by the returned optional object, which contains a copy of the value if valid.
	 */
	const TOptional<FString> TryGetHeaderAsOptional(const FString& Header) const { const auto Ptr = HeadersMap.Find(Header); return Ptr != nullptr ? *Ptr : TOptional<FString>(); }

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PlayerRankUpdateResponse Content;
	

#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PlayerRankUpdateResponse& OutContent) const { return TryGetContent<FRHAPI_PlayerRankUpdateResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PlayerRankUpdateResponse>& OutContent) const { return TryGetContent<FRHAPI_PlayerRankUpdateResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PlayerRankUpdateResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PlayerRankUpdateResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PlayerRankUpdateResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PlayerRankUpdateResponse>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PlayerRankUpdateResponse& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_UpdateRankingsV1 */
DECLARE_DELEGATE_OneParam(FDelegate_UpdateRankingsV1, const FResponse_UpdateRankingsV1&);

/** @brief A helper metadata object for UpdateRankingsV1 that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_UpdateRankingsV1
{
	/** The request type */
	typedef FRequest_UpdateRankingsV1 Request;
	/** The response type */
	typedef FResponse_UpdateRankingsV1 Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_UpdateRankingsV1 Delegate;
	/** The API object that supports this API call */
	typedef FRankAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};


/** The API class itself, which will handle calls to */
class RALLYHEREAPI_API FRankAPI : public FAPI
{
public:
	FRankAPI();
	virtual ~FRankAPI();

	FHttpRequestPtr CalculateV2Ranks(const FRequest_CalculateV2Ranks& Request, const FDelegate_CalculateV2Ranks& Delegate = FDelegate_CalculateV2Ranks(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr CalculateV3Ranks(const FRequest_CalculateV3Ranks& Request, const FDelegate_CalculateV3Ranks& Delegate = FDelegate_CalculateV3Ranks(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetAllPlayerUuidRanks(const FRequest_GetAllPlayerUuidRanks& Request, const FDelegate_GetAllPlayerUuidRanks& Delegate = FDelegate_GetAllPlayerUuidRanks(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetAllPlayerUuidRanksSelf(const FRequest_GetAllPlayerUuidRanksSelf& Request, const FDelegate_GetAllPlayerUuidRanksSelf& Delegate = FDelegate_GetAllPlayerUuidRanksSelf(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetAllPlayerUuidRanksSelfV2(const FRequest_GetAllPlayerUuidRanksSelfV2& Request, const FDelegate_GetAllPlayerUuidRanksSelfV2& Delegate = FDelegate_GetAllPlayerUuidRanksSelfV2(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetAllPlayerUuidRanksV2(const FRequest_GetAllPlayerUuidRanksV2& Request, const FDelegate_GetAllPlayerUuidRanksV2& Delegate = FDelegate_GetAllPlayerUuidRanksV2(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetAllRankConfigV3(const FRequest_GetAllRankConfigV3& Request, const FDelegate_GetAllRankConfigV3& Delegate = FDelegate_GetAllRankConfigV3(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetPlayerUuidRank(const FRequest_GetPlayerUuidRank& Request, const FDelegate_GetPlayerUuidRank& Delegate = FDelegate_GetPlayerUuidRank(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetPlayerUuidRankSelf(const FRequest_GetPlayerUuidRankSelf& Request, const FDelegate_GetPlayerUuidRankSelf& Delegate = FDelegate_GetPlayerUuidRankSelf(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetPlayerUuidRankSelfV2(const FRequest_GetPlayerUuidRankSelfV2& Request, const FDelegate_GetPlayerUuidRankSelfV2& Delegate = FDelegate_GetPlayerUuidRankSelfV2(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetPlayerUuidRankV2(const FRequest_GetPlayerUuidRankV2& Request, const FDelegate_GetPlayerUuidRankV2& Delegate = FDelegate_GetPlayerUuidRankV2(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetRankConfigV3(const FRequest_GetRankConfigV3& Request, const FDelegate_GetRankConfigV3& Delegate = FDelegate_GetRankConfigV3(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr UpdatePlayerUuidRank(const FRequest_UpdatePlayerUuidRank& Request, const FDelegate_UpdatePlayerUuidRank& Delegate = FDelegate_UpdatePlayerUuidRank(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr UpdatePlayerUuidRankSelf(const FRequest_UpdatePlayerUuidRankSelf& Request, const FDelegate_UpdatePlayerUuidRankSelf& Delegate = FDelegate_UpdatePlayerUuidRankSelf(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr UpdatePlayerUuidRankSelfV2(const FRequest_UpdatePlayerUuidRankSelfV2& Request, const FDelegate_UpdatePlayerUuidRankSelfV2& Delegate = FDelegate_UpdatePlayerUuidRankSelfV2(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr UpdatePlayerUuidRankV2(const FRequest_UpdatePlayerUuidRankV2& Request, const FDelegate_UpdatePlayerUuidRankV2& Delegate = FDelegate_UpdatePlayerUuidRankV2(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr UpdateRankingsV1(const FRequest_UpdateRankingsV1& Request, const FDelegate_UpdateRankingsV1& Delegate = FDelegate_UpdateRankingsV1(), int32 Priority = DefaultRallyHereAPIPriority);

private:
	void OnCalculateV2RanksResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_CalculateV2Ranks Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnCalculateV3RanksResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_CalculateV3Ranks Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetAllPlayerUuidRanksResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAllPlayerUuidRanks Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetAllPlayerUuidRanksSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAllPlayerUuidRanksSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetAllPlayerUuidRanksSelfV2Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAllPlayerUuidRanksSelfV2 Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetAllPlayerUuidRanksV2Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAllPlayerUuidRanksV2 Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetAllRankConfigV3Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAllRankConfigV3 Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetPlayerUuidRankResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlayerUuidRank Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetPlayerUuidRankSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlayerUuidRankSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetPlayerUuidRankSelfV2Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlayerUuidRankSelfV2 Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetPlayerUuidRankV2Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlayerUuidRankV2 Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetRankConfigV3Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetRankConfigV3 Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnUpdatePlayerUuidRankResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdatePlayerUuidRank Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnUpdatePlayerUuidRankSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdatePlayerUuidRankSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnUpdatePlayerUuidRankSelfV2Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdatePlayerUuidRankSelfV2 Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnUpdatePlayerUuidRankV2Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdatePlayerUuidRankV2 Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnUpdateRankingsV1Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdateRankingsV1 Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};



}
