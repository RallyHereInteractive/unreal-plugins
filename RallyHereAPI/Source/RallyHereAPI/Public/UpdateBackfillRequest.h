// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "AdditionalJoinParams.h"
#include "BackfillTeam.h"
#include "UpdateBackfillRequest.generated.h"

/** @defgroup RHAPI_UpdateBackfillRequest RallyHere API Model UpdateBackfillRequest
 *  @{
 */

/**
 * @brief 
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_UpdateBackfillRequest : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	/** @brief The instance ID for this backfill request */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString InstanceId{  };
	/** @brief Gets the value of InstanceId */
	FString& GetInstanceId() { return InstanceId; }
	/** @brief Gets the value of InstanceId */
	const FString& GetInstanceId() const { return InstanceId; }
	/** @brief Sets the value of InstanceId */
	void SetInstanceId(const FString& NewValue) { InstanceId = NewValue;   }
	/** @brief Sets the value of InstanceId using move semantics */
	void SetInstanceId(FString&& NewValue) { InstanceId = NewValue;   }

	/** @brief Additional fields put on the matchmaking ticket for open match to search with (see https://openmatch.dev/site/docs/reference/api/#searchfields) */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_AdditionalJoinParams AdditionalJoinParams_Optional{  };
	/** @brief true if AdditionalJoinParams_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool AdditionalJoinParams_IsSet{ false };
	/** @brief Gets the value of AdditionalJoinParams_Optional, regardless of it having been set */
	FRHAPI_AdditionalJoinParams& GetAdditionalJoinParams() { return AdditionalJoinParams_Optional; }
	/** @brief Gets the value of AdditionalJoinParams_Optional, regardless of it having been set */
	const FRHAPI_AdditionalJoinParams& GetAdditionalJoinParams() const { return AdditionalJoinParams_Optional; }
	/** @brief Gets the value of AdditionalJoinParams_Optional, if it has been set, otherwise it returns DefaultValue */
	const FRHAPI_AdditionalJoinParams& GetAdditionalJoinParams(const FRHAPI_AdditionalJoinParams& DefaultValue) const { if (AdditionalJoinParams_IsSet) return AdditionalJoinParams_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of AdditionalJoinParams_Optional and returns true if it has been set, otherwise returns false */
	bool GetAdditionalJoinParams(FRHAPI_AdditionalJoinParams& OutValue) const { if (AdditionalJoinParams_IsSet) OutValue = AdditionalJoinParams_Optional; return AdditionalJoinParams_IsSet; }
	/** @brief Returns a pointer to AdditionalJoinParams_Optional, if it has been set, otherwise returns nullptr */
	FRHAPI_AdditionalJoinParams* GetAdditionalJoinParamsOrNull() { if (AdditionalJoinParams_IsSet) return (&AdditionalJoinParams_Optional); return nullptr; }
	/** @brief Returns a pointer to AdditionalJoinParams_Optional, if it has been set, otherwise returns nullptr */
	const FRHAPI_AdditionalJoinParams* GetAdditionalJoinParamsOrNull() const { if (AdditionalJoinParams_IsSet) return (&AdditionalJoinParams_Optional); return nullptr; }
	/** @brief Sets the value of AdditionalJoinParams_Optional and also sets AdditionalJoinParams_IsSet to true */
	void SetAdditionalJoinParams(const FRHAPI_AdditionalJoinParams& NewValue) { AdditionalJoinParams_Optional = NewValue; AdditionalJoinParams_IsSet = true;  }
	/** @brief Sets the value of AdditionalJoinParams_Optional and also sets AdditionalJoinParams_IsSet to true using move semantics */
	void SetAdditionalJoinParams(FRHAPI_AdditionalJoinParams&& NewValue) { AdditionalJoinParams_Optional = NewValue; AdditionalJoinParams_IsSet = true;  }
	/** @brief Clears the value of AdditionalJoinParams_Optional and sets AdditionalJoinParams_IsSet to false */
	void ClearAdditionalJoinParams() { AdditionalJoinParams_IsSet = false;  }
	/** @brief Checks whether AdditionalJoinParams_Optional has been set */
	bool IsAdditionalJoinParamsSet() const { return AdditionalJoinParams_IsSet; }

	/** @brief The teams and number of players that need to be backfilled. Leaving this out (or supplying an empty list) is treated as no players are currently required */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TArray<FRHAPI_BackfillTeam> Teams_Optional{  };
	/** @brief true if Teams_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Teams_IsSet{ false };
	/** @brief Gets the value of Teams_Optional, regardless of it having been set */
	TArray<FRHAPI_BackfillTeam>& GetTeams() { return Teams_Optional; }
	/** @brief Gets the value of Teams_Optional, regardless of it having been set */
	const TArray<FRHAPI_BackfillTeam>& GetTeams() const { return Teams_Optional; }
	/** @brief Gets the value of Teams_Optional, if it has been set, otherwise it returns DefaultValue */
	const TArray<FRHAPI_BackfillTeam>& GetTeams(const TArray<FRHAPI_BackfillTeam>& DefaultValue) const { if (Teams_IsSet) return Teams_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Teams_Optional and returns true if it has been set, otherwise returns false */
	bool GetTeams(TArray<FRHAPI_BackfillTeam>& OutValue) const { if (Teams_IsSet) OutValue = Teams_Optional; return Teams_IsSet; }
	/** @brief Returns a pointer to Teams_Optional, if it has been set, otherwise returns nullptr */
	TArray<FRHAPI_BackfillTeam>* GetTeamsOrNull() { if (Teams_IsSet) return (&Teams_Optional); return nullptr; }
	/** @brief Returns a pointer to Teams_Optional, if it has been set, otherwise returns nullptr */
	const TArray<FRHAPI_BackfillTeam>* GetTeamsOrNull() const { if (Teams_IsSet) return (&Teams_Optional); return nullptr; }
	/** @brief Sets the value of Teams_Optional and also sets Teams_IsSet to true */
	void SetTeams(const TArray<FRHAPI_BackfillTeam>& NewValue) { Teams_Optional = NewValue; Teams_IsSet = true;  }
	/** @brief Sets the value of Teams_Optional and also sets Teams_IsSet to true using move semantics */
	void SetTeams(TArray<FRHAPI_BackfillTeam>&& NewValue) { Teams_Optional = NewValue; Teams_IsSet = true;  }
	/** @brief Clears the value of Teams_Optional and sets Teams_IsSet to false */
	void ClearTeams() { Teams_IsSet = false;  }
	/** @brief Checks whether Teams_Optional has been set */
	bool IsTeamsSet() const { return Teams_IsSet; }
};

/** @} */
