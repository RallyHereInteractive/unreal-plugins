// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "Platform.h"
#include "SessionEvent.generated.h"

/** @defgroup RHAPI_SessionEvent RallyHere API Model SessionEvent
 *  @{
 */

/**
 * @brief Information about an event that occurred in a session
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_SessionEvent : public FRHAPI_Model
{
    GENERATED_BODY()

    /**
    * @brief Fills this object with data from the passed in JSON
    *
    * @param [in] JsonValue Data from the API call.
    *
    * @return true if parsing of the JSON data was successful.
    */
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

    /**
    * @brief Writes the data from this object into the specified JSON Writer stream
    *
    * @param [in] Writer JSON Writer stream to push .
    */
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /** @brief Code that identifies this type of event.  See CommonEventCode for common examples. */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString EventCode{  };
    /** @brief Gets the value of EventCode */
    FString& GetEventCode() { return EventCode; }
    /** @brief Gets the value of EventCode */
    const FString& GetEventCode() const { return EventCode; }
    /** @brief Sets the value of EventCode */
    void SetEventCode(FString NewValue) { EventCode = NewValue;  }

    /** @brief Description metadata about the event */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString Description_Optional{  };
    /** @brief true if Description_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Description_IsSet{ false };
    /** @brief Gets the value of Description_Optional, regardless of it having been set */
    FString& GetDescription() { return Description_Optional; }
    /** @brief Gets the value of Description_Optional, regardless of it having been set */
    const FString& GetDescription() const { return Description_Optional; }
    /** @brief Gets the value of Description_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetDescription(const FString& DefaultValue) const { if (Description_IsSet) return Description_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Description_Optional and returns true if it has been set, otherwise returns false */
    bool GetDescription(FString& OutValue) const { if (Description_IsSet) OutValue = Description_Optional; return Description_IsSet; }
    /** @brief Returns a pointer to Description_Optional, if it has been set, otherwise returns nullptr */
    FString* GetDescriptionOrNull() { if (Description_IsSet) return &Description_Optional; return nullptr; }
    /** @brief Returns a pointer to Description_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetDescriptionOrNull() const { if (Description_IsSet) return &Description_Optional; return nullptr; }
    /** @brief Sets the value of Description_Optional and also sets Description_IsSet to true */
    void SetDescription(FString NewValue) { Description_Optional = NewValue; Description_IsSet = true; }
     /** @brief Clears the value of Description_Optional and sets Description_IsSet to false */
    void ClearDescription() { Description_Optional = TEXT(""); Description_IsSet = false; }
    /** @brief Returns true if Description_Optional is set and matches the default value */
    bool IsDescriptionDefaultValue() const { return Description_IsSet && Description_Optional == TEXT(""); }
    /** @brief Sets the value of Description_Optional to its default and also sets Description_IsSet to true */
    void SetDescriptionToDefault() { Description_Optional = TEXT(""); Description_IsSet = true; }

    /** @brief Player who triggered the event */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 SourcePlayerId_Optional{  };
    /** @brief true if SourcePlayerId_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool SourcePlayerId_IsSet{ false };
    /** @brief Gets the value of SourcePlayerId_Optional, regardless of it having been set */
    int32& GetSourcePlayerId() { return SourcePlayerId_Optional; }
    /** @brief Gets the value of SourcePlayerId_Optional, regardless of it having been set */
    const int32& GetSourcePlayerId() const { return SourcePlayerId_Optional; }
    /** @brief Gets the value of SourcePlayerId_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetSourcePlayerId(const int32& DefaultValue) const { if (SourcePlayerId_IsSet) return SourcePlayerId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of SourcePlayerId_Optional and returns true if it has been set, otherwise returns false */
    bool GetSourcePlayerId(int32& OutValue) const { if (SourcePlayerId_IsSet) OutValue = SourcePlayerId_Optional; return SourcePlayerId_IsSet; }
    /** @brief Returns a pointer to SourcePlayerId_Optional, if it has been set, otherwise returns nullptr */
    int32* GetSourcePlayerIdOrNull() { if (SourcePlayerId_IsSet) return &SourcePlayerId_Optional; return nullptr; }
    /** @brief Returns a pointer to SourcePlayerId_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetSourcePlayerIdOrNull() const { if (SourcePlayerId_IsSet) return &SourcePlayerId_Optional; return nullptr; }
    /** @brief Sets the value of SourcePlayerId_Optional and also sets SourcePlayerId_IsSet to true */
    void SetSourcePlayerId(int32 NewValue) { SourcePlayerId_Optional = NewValue; SourcePlayerId_IsSet = true; }
     /** @brief Clears the value of SourcePlayerId_Optional and sets SourcePlayerId_IsSet to false */
    void ClearSourcePlayerId() { SourcePlayerId_Optional = 0; SourcePlayerId_IsSet = false; }
    /** @brief Returns true if SourcePlayerId_Optional is set and matches the default value */
    bool IsSourcePlayerIdDefaultValue() const { return SourcePlayerId_IsSet && SourcePlayerId_Optional == 0; }
    /** @brief Sets the value of SourcePlayerId_Optional to its default and also sets SourcePlayerId_IsSet to true */
    void SetSourcePlayerIdToDefault() { SourcePlayerId_Optional = 0; SourcePlayerId_IsSet = true; }

    /** @brief Player who triggered the event */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FGuid SourcePlayerUuid_Optional{  };
    /** @brief true if SourcePlayerUuid_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool SourcePlayerUuid_IsSet{ false };
    /** @brief Gets the value of SourcePlayerUuid_Optional, regardless of it having been set */
    FGuid& GetSourcePlayerUuid() { return SourcePlayerUuid_Optional; }
    /** @brief Gets the value of SourcePlayerUuid_Optional, regardless of it having been set */
    const FGuid& GetSourcePlayerUuid() const { return SourcePlayerUuid_Optional; }
    /** @brief Gets the value of SourcePlayerUuid_Optional, if it has been set, otherwise it returns DefaultValue */
    const FGuid& GetSourcePlayerUuid(const FGuid& DefaultValue) const { if (SourcePlayerUuid_IsSet) return SourcePlayerUuid_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of SourcePlayerUuid_Optional and returns true if it has been set, otherwise returns false */
    bool GetSourcePlayerUuid(FGuid& OutValue) const { if (SourcePlayerUuid_IsSet) OutValue = SourcePlayerUuid_Optional; return SourcePlayerUuid_IsSet; }
    /** @brief Returns a pointer to SourcePlayerUuid_Optional, if it has been set, otherwise returns nullptr */
    FGuid* GetSourcePlayerUuidOrNull() { if (SourcePlayerUuid_IsSet) return &SourcePlayerUuid_Optional; return nullptr; }
    /** @brief Returns a pointer to SourcePlayerUuid_Optional, if it has been set, otherwise returns nullptr */
    const FGuid* GetSourcePlayerUuidOrNull() const { if (SourcePlayerUuid_IsSet) return &SourcePlayerUuid_Optional; return nullptr; }
    /** @brief Sets the value of SourcePlayerUuid_Optional and also sets SourcePlayerUuid_IsSet to true */
    void SetSourcePlayerUuid(FGuid NewValue) { SourcePlayerUuid_Optional = NewValue; SourcePlayerUuid_IsSet = true; }
     /** @brief Clears the value of SourcePlayerUuid_Optional and sets SourcePlayerUuid_IsSet to false */
    void ClearSourcePlayerUuid() { SourcePlayerUuid_IsSet = false; }

    /** @brief Player who the event was targetted toward, if relevant */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    int32 TargetPlayerId_Optional{  };
    /** @brief true if TargetPlayerId_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool TargetPlayerId_IsSet{ false };
    /** @brief Gets the value of TargetPlayerId_Optional, regardless of it having been set */
    int32& GetTargetPlayerId() { return TargetPlayerId_Optional; }
    /** @brief Gets the value of TargetPlayerId_Optional, regardless of it having been set */
    const int32& GetTargetPlayerId() const { return TargetPlayerId_Optional; }
    /** @brief Gets the value of TargetPlayerId_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetTargetPlayerId(const int32& DefaultValue) const { if (TargetPlayerId_IsSet) return TargetPlayerId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of TargetPlayerId_Optional and returns true if it has been set, otherwise returns false */
    bool GetTargetPlayerId(int32& OutValue) const { if (TargetPlayerId_IsSet) OutValue = TargetPlayerId_Optional; return TargetPlayerId_IsSet; }
    /** @brief Returns a pointer to TargetPlayerId_Optional, if it has been set, otherwise returns nullptr */
    int32* GetTargetPlayerIdOrNull() { if (TargetPlayerId_IsSet) return &TargetPlayerId_Optional; return nullptr; }
    /** @brief Returns a pointer to TargetPlayerId_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetTargetPlayerIdOrNull() const { if (TargetPlayerId_IsSet) return &TargetPlayerId_Optional; return nullptr; }
    /** @brief Sets the value of TargetPlayerId_Optional and also sets TargetPlayerId_IsSet to true */
    void SetTargetPlayerId(int32 NewValue) { TargetPlayerId_Optional = NewValue; TargetPlayerId_IsSet = true; }
     /** @brief Clears the value of TargetPlayerId_Optional and sets TargetPlayerId_IsSet to false */
    void ClearTargetPlayerId() { TargetPlayerId_Optional = 0; TargetPlayerId_IsSet = false; }
    /** @brief Returns true if TargetPlayerId_Optional is set and matches the default value */
    bool IsTargetPlayerIdDefaultValue() const { return TargetPlayerId_IsSet && TargetPlayerId_Optional == 0; }
    /** @brief Sets the value of TargetPlayerId_Optional to its default and also sets TargetPlayerId_IsSet to true */
    void SetTargetPlayerIdToDefault() { TargetPlayerId_Optional = 0; TargetPlayerId_IsSet = true; }

    /** @brief Player who the event was targetted toward, if relevant */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FGuid TargetPlayerUuid_Optional{  };
    /** @brief true if TargetPlayerUuid_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool TargetPlayerUuid_IsSet{ false };
    /** @brief Gets the value of TargetPlayerUuid_Optional, regardless of it having been set */
    FGuid& GetTargetPlayerUuid() { return TargetPlayerUuid_Optional; }
    /** @brief Gets the value of TargetPlayerUuid_Optional, regardless of it having been set */
    const FGuid& GetTargetPlayerUuid() const { return TargetPlayerUuid_Optional; }
    /** @brief Gets the value of TargetPlayerUuid_Optional, if it has been set, otherwise it returns DefaultValue */
    const FGuid& GetTargetPlayerUuid(const FGuid& DefaultValue) const { if (TargetPlayerUuid_IsSet) return TargetPlayerUuid_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of TargetPlayerUuid_Optional and returns true if it has been set, otherwise returns false */
    bool GetTargetPlayerUuid(FGuid& OutValue) const { if (TargetPlayerUuid_IsSet) OutValue = TargetPlayerUuid_Optional; return TargetPlayerUuid_IsSet; }
    /** @brief Returns a pointer to TargetPlayerUuid_Optional, if it has been set, otherwise returns nullptr */
    FGuid* GetTargetPlayerUuidOrNull() { if (TargetPlayerUuid_IsSet) return &TargetPlayerUuid_Optional; return nullptr; }
    /** @brief Returns a pointer to TargetPlayerUuid_Optional, if it has been set, otherwise returns nullptr */
    const FGuid* GetTargetPlayerUuidOrNull() const { if (TargetPlayerUuid_IsSet) return &TargetPlayerUuid_Optional; return nullptr; }
    /** @brief Sets the value of TargetPlayerUuid_Optional and also sets TargetPlayerUuid_IsSet to true */
    void SetTargetPlayerUuid(FGuid NewValue) { TargetPlayerUuid_Optional = NewValue; TargetPlayerUuid_IsSet = true; }
     /** @brief Clears the value of TargetPlayerUuid_Optional and sets TargetPlayerUuid_IsSet to false */
    void ClearTargetPlayerUuid() { TargetPlayerUuid_IsSet = false; }

    /** @brief Instance that was active at the time of the event */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString Instance_Optional{  };
    /** @brief true if Instance_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Instance_IsSet{ false };
    /** @brief Gets the value of Instance_Optional, regardless of it having been set */
    FString& GetInstance() { return Instance_Optional; }
    /** @brief Gets the value of Instance_Optional, regardless of it having been set */
    const FString& GetInstance() const { return Instance_Optional; }
    /** @brief Gets the value of Instance_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetInstance(const FString& DefaultValue) const { if (Instance_IsSet) return Instance_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Instance_Optional and returns true if it has been set, otherwise returns false */
    bool GetInstance(FString& OutValue) const { if (Instance_IsSet) OutValue = Instance_Optional; return Instance_IsSet; }
    /** @brief Returns a pointer to Instance_Optional, if it has been set, otherwise returns nullptr */
    FString* GetInstanceOrNull() { if (Instance_IsSet) return &Instance_Optional; return nullptr; }
    /** @brief Returns a pointer to Instance_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetInstanceOrNull() const { if (Instance_IsSet) return &Instance_Optional; return nullptr; }
    /** @brief Sets the value of Instance_Optional and also sets Instance_IsSet to true */
    void SetInstance(FString NewValue) { Instance_Optional = NewValue; Instance_IsSet = true; }
     /** @brief Clears the value of Instance_Optional and sets Instance_IsSet to false */
    void ClearInstance() { Instance_IsSet = false; }

    /** @brief Match that was active at the time of the event */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString Match_Optional{  };
    /** @brief true if Match_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Match_IsSet{ false };
    /** @brief Gets the value of Match_Optional, regardless of it having been set */
    FString& GetMatch() { return Match_Optional; }
    /** @brief Gets the value of Match_Optional, regardless of it having been set */
    const FString& GetMatch() const { return Match_Optional; }
    /** @brief Gets the value of Match_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetMatch(const FString& DefaultValue) const { if (Match_IsSet) return Match_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Match_Optional and returns true if it has been set, otherwise returns false */
    bool GetMatch(FString& OutValue) const { if (Match_IsSet) OutValue = Match_Optional; return Match_IsSet; }
    /** @brief Returns a pointer to Match_Optional, if it has been set, otherwise returns nullptr */
    FString* GetMatchOrNull() { if (Match_IsSet) return &Match_Optional; return nullptr; }
    /** @brief Returns a pointer to Match_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetMatchOrNull() const { if (Match_IsSet) return &Match_Optional; return nullptr; }
    /** @brief Sets the value of Match_Optional and also sets Match_IsSet to true */
    void SetMatch(FString NewValue) { Match_Optional = NewValue; Match_IsSet = true; }
     /** @brief Clears the value of Match_Optional and sets Match_IsSet to false */
    void ClearMatch() { Match_IsSet = false; }

    /** @brief Relevant platform */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    ERHAPI_Platform Platform_Optional{  };
    /** @brief true if Platform_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool Platform_IsSet{ false };
    /** @brief Gets the value of Platform_Optional, regardless of it having been set */
    ERHAPI_Platform& GetPlatform() { return Platform_Optional; }
    /** @brief Gets the value of Platform_Optional, regardless of it having been set */
    const ERHAPI_Platform& GetPlatform() const { return Platform_Optional; }
    /** @brief Gets the value of Platform_Optional, if it has been set, otherwise it returns DefaultValue */
    const ERHAPI_Platform& GetPlatform(const ERHAPI_Platform& DefaultValue) const { if (Platform_IsSet) return Platform_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Platform_Optional and returns true if it has been set, otherwise returns false */
    bool GetPlatform(ERHAPI_Platform& OutValue) const { if (Platform_IsSet) OutValue = Platform_Optional; return Platform_IsSet; }
    /** @brief Returns a pointer to Platform_Optional, if it has been set, otherwise returns nullptr */
    ERHAPI_Platform* GetPlatformOrNull() { if (Platform_IsSet) return &Platform_Optional; return nullptr; }
    /** @brief Returns a pointer to Platform_Optional, if it has been set, otherwise returns nullptr */
    const ERHAPI_Platform* GetPlatformOrNull() const { if (Platform_IsSet) return &Platform_Optional; return nullptr; }
    /** @brief Sets the value of Platform_Optional and also sets Platform_IsSet to true */
    void SetPlatform(ERHAPI_Platform NewValue) { Platform_Optional = NewValue; Platform_IsSet = true; }
     /** @brief Clears the value of Platform_Optional and sets Platform_IsSet to false */
    void ClearPlatform() { Platform_IsSet = false; }

    /** @brief Relevant platform session id */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FString PlatformSessionIdBase64_Optional{  };
    /** @brief true if PlatformSessionIdBase64_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool PlatformSessionIdBase64_IsSet{ false };
    /** @brief Gets the value of PlatformSessionIdBase64_Optional, regardless of it having been set */
    FString& GetPlatformSessionIdBase64() { return PlatformSessionIdBase64_Optional; }
    /** @brief Gets the value of PlatformSessionIdBase64_Optional, regardless of it having been set */
    const FString& GetPlatformSessionIdBase64() const { return PlatformSessionIdBase64_Optional; }
    /** @brief Gets the value of PlatformSessionIdBase64_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetPlatformSessionIdBase64(const FString& DefaultValue) const { if (PlatformSessionIdBase64_IsSet) return PlatformSessionIdBase64_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of PlatformSessionIdBase64_Optional and returns true if it has been set, otherwise returns false */
    bool GetPlatformSessionIdBase64(FString& OutValue) const { if (PlatformSessionIdBase64_IsSet) OutValue = PlatformSessionIdBase64_Optional; return PlatformSessionIdBase64_IsSet; }
    /** @brief Returns a pointer to PlatformSessionIdBase64_Optional, if it has been set, otherwise returns nullptr */
    FString* GetPlatformSessionIdBase64OrNull() { if (PlatformSessionIdBase64_IsSet) return &PlatformSessionIdBase64_Optional; return nullptr; }
    /** @brief Returns a pointer to PlatformSessionIdBase64_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetPlatformSessionIdBase64OrNull() const { if (PlatformSessionIdBase64_IsSet) return &PlatformSessionIdBase64_Optional; return nullptr; }
    /** @brief Sets the value of PlatformSessionIdBase64_Optional and also sets PlatformSessionIdBase64_IsSet to true */
    void SetPlatformSessionIdBase64(FString NewValue) { PlatformSessionIdBase64_Optional = NewValue; PlatformSessionIdBase64_IsSet = true; }
     /** @brief Clears the value of PlatformSessionIdBase64_Optional and sets PlatformSessionIdBase64_IsSet to false */
    void ClearPlatformSessionIdBase64() { PlatformSessionIdBase64_IsSet = false; }

    /** @brief custom data about this event */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    TMap<FString, FString> CustomData_Optional{  };
    /** @brief true if CustomData_Optional has been set to a value */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    bool CustomData_IsSet{ false };
    /** @brief Gets the value of CustomData_Optional, regardless of it having been set */
    TMap<FString, FString>& GetCustomData() { return CustomData_Optional; }
    /** @brief Gets the value of CustomData_Optional, regardless of it having been set */
    const TMap<FString, FString>& GetCustomData() const { return CustomData_Optional; }
    /** @brief Gets the value of CustomData_Optional, if it has been set, otherwise it returns DefaultValue */
    const TMap<FString, FString>& GetCustomData(const TMap<FString, FString>& DefaultValue) const { if (CustomData_IsSet) return CustomData_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of CustomData_Optional and returns true if it has been set, otherwise returns false */
    bool GetCustomData(TMap<FString, FString>& OutValue) const { if (CustomData_IsSet) OutValue = CustomData_Optional; return CustomData_IsSet; }
    /** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
    TMap<FString, FString>* GetCustomDataOrNull() { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
    /** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
    const TMap<FString, FString>* GetCustomDataOrNull() const { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
    /** @brief Sets the value of CustomData_Optional and also sets CustomData_IsSet to true */
    void SetCustomData(TMap<FString, FString> NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true; }
     /** @brief Clears the value of CustomData_Optional and sets CustomData_IsSet to false */
    void ClearCustomData() { CustomData_IsSet = false; }

    /** @brief Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone */
    UPROPERTY(BlueprintReadOnly, Category = "RallyHere")
    FDateTime Timestamp{  };
    /** @brief Gets the value of Timestamp */
    FDateTime& GetTimestamp() { return Timestamp; }
    /** @brief Gets the value of Timestamp */
    const FDateTime& GetTimestamp() const { return Timestamp; }
    /** @brief Sets the value of Timestamp */
    void SetTimestamp(FDateTime NewValue) { Timestamp = NewValue;  }
};

/** @} */
