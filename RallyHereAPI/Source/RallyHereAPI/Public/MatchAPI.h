// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereAPIAuthContext.h"
#include "RallyHereAPIHelpers.h"
#include "MatchState.h"
#include "HTTPValidationError.h"
#include "HzApiErrorModel.h"
#include "MatchPlayerRequest.h"
#include "MatchPlayerWithMatch.h"
#include "MatchRequest.h"
#include "MatchSegmentPatchRequest.h"
#include "MatchSegmentRequest.h"
#include "MatchSegmentWithPlayers.h"
#include "MatchWithPlayers.h"
#include "PagedMatchResponse.h"
#include "PagedPlayerMatchResponse.h"
#include "PlayerStatsResponse.h"

namespace RallyHereAPI
{
using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

// forward declaration
class FMatchAPI;

/**
 * @brief Create Match
 * Create match by match_id.
 * 
 * Required Permissions:
 * 
 * - For any match any of: `match:*`, `match:match:edit:any`
 * 
 * - For match if the player is the host any of: `match:*`, `match:match:edit:any`, `match:match:edit:authority`
*/
struct RALLYHEREAPI_API FRequest_CreateMatch : public FRequest
{
	FRequest_CreateMatch();
	virtual ~FRequest_CreateMatch() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FRHAPI_MatchRequest MatchRequest;
};

/** The response type for FRequest_CreateMatch */
struct RALLYHEREAPI_API FResponse_CreateMatch : public FResponseAccessorTemplate<FRHAPI_MatchWithPlayers, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_MatchWithPlayers, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_CreateMatch(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_CreateMatch() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_MatchWithPlayers Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_MatchWithPlayers& OutContent) const { return TryGetContent<FRHAPI_MatchWithPlayers>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_MatchWithPlayers>& OutContent) const { return TryGetContent<FRHAPI_MatchWithPlayers>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_MatchWithPlayers* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_MatchWithPlayers>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_MatchWithPlayers> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_MatchWithPlayers>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_MatchWithPlayers& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_CreateMatch */
DECLARE_DELEGATE_OneParam(FDelegate_CreateMatch, const FResponse_CreateMatch&);

/** @brief A helper metadata object for CreateMatch that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_CreateMatch
{
	/** The request type */
	typedef FRequest_CreateMatch Request;
	/** The response type */
	typedef FResponse_CreateMatch Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_CreateMatch Delegate;
	/** The API object that supports this API call */
	typedef FMatchAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Create Match Player
 * Create player match record for the provided player_uuid and match_id
 * 
 * Must have one of the following permissions: any of: `match:*`, `match:match:edit:any`
 * 
 * Or you have AuthPermissions.MATCH_MATCH_EDIT_AUTHORITY and are the host of the match.
*/
struct RALLYHEREAPI_API FRequest_CreateMatchPlayer : public FRequest
{
	FRequest_CreateMatchPlayer();
	virtual ~FRequest_CreateMatchPlayer() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FGuid PlayerUuid;
	FString MatchId;
	FRHAPI_MatchPlayerRequest MatchPlayerRequest;
};

/** The response type for FRequest_CreateMatchPlayer */
struct RALLYHEREAPI_API FResponse_CreateMatchPlayer : public FResponseAccessorTemplate<FRHAPI_MatchPlayerWithMatch, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_MatchPlayerWithMatch, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_CreateMatchPlayer(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_CreateMatchPlayer() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_MatchPlayerWithMatch Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_MatchPlayerWithMatch& OutContent) const { return TryGetContent<FRHAPI_MatchPlayerWithMatch>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_MatchPlayerWithMatch>& OutContent) const { return TryGetContent<FRHAPI_MatchPlayerWithMatch>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_MatchPlayerWithMatch* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_MatchPlayerWithMatch>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_MatchPlayerWithMatch> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_MatchPlayerWithMatch>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_MatchPlayerWithMatch& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_CreateMatchPlayer */
DECLARE_DELEGATE_OneParam(FDelegate_CreateMatchPlayer, const FResponse_CreateMatchPlayer&);

/** @brief A helper metadata object for CreateMatchPlayer that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_CreateMatchPlayer
{
	/** The request type */
	typedef FRequest_CreateMatchPlayer Request;
	/** The response type */
	typedef FResponse_CreateMatchPlayer Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_CreateMatchPlayer Delegate;
	/** The API object that supports this API call */
	typedef FMatchAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Create Match Segment
 * Create match segment by match_id.
 * 
 * - For any match segment any of: `match:*`, `match:match:edit:any`
 * 
 * - For match segment if the player is the host any of: `match:*`, `match:match:edit:any`, `match:match:edit:authority`
*/
struct RALLYHEREAPI_API FRequest_CreateMatchSegment : public FRequest
{
	FRequest_CreateMatchSegment();
	virtual ~FRequest_CreateMatchSegment() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString MatchId;
	FRHAPI_MatchSegmentRequest MatchSegmentRequest;
};

/** The response type for FRequest_CreateMatchSegment */
struct RALLYHEREAPI_API FResponse_CreateMatchSegment : public FResponseAccessorTemplate<FRHAPI_MatchSegmentWithPlayers, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_MatchSegmentWithPlayers, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_CreateMatchSegment(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_CreateMatchSegment() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_MatchSegmentWithPlayers Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_MatchSegmentWithPlayers& OutContent) const { return TryGetContent<FRHAPI_MatchSegmentWithPlayers>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_MatchSegmentWithPlayers>& OutContent) const { return TryGetContent<FRHAPI_MatchSegmentWithPlayers>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_MatchSegmentWithPlayers* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_MatchSegmentWithPlayers>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_MatchSegmentWithPlayers> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_MatchSegmentWithPlayers>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_MatchSegmentWithPlayers& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_CreateMatchSegment */
DECLARE_DELEGATE_OneParam(FDelegate_CreateMatchSegment, const FResponse_CreateMatchSegment&);

/** @brief A helper metadata object for CreateMatchSegment that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_CreateMatchSegment
{
	/** The request type */
	typedef FRequest_CreateMatchSegment Request;
	/** The response type */
	typedef FResponse_CreateMatchSegment Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_CreateMatchSegment Delegate;
	/** The API object that supports this API call */
	typedef FMatchAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Delete Match
 * Delete match by match_id
 * 
 * Required Permissions:
 * 
 * - For any match any of: `match:*`, `match:match:edit:any`
*/
struct RALLYHEREAPI_API FRequest_DeleteMatch : public FRequest
{
	FRequest_DeleteMatch();
	virtual ~FRequest_DeleteMatch() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString MatchId;
};

/** The response type for FRequest_DeleteMatch */
struct RALLYHEREAPI_API FResponse_DeleteMatch : public FResponseAccessorTemplate< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_DeleteMatch(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_DeleteMatch() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT

#endif //ALLOW_LEGACY_RESPONSE_CONTENT


	// Individual Response Helpers	
	/* Response 204
	Successful Response
	*/

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_DeleteMatch */
DECLARE_DELEGATE_OneParam(FDelegate_DeleteMatch, const FResponse_DeleteMatch&);

/** @brief A helper metadata object for DeleteMatch that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_DeleteMatch
{
	/** The request type */
	typedef FRequest_DeleteMatch Request;
	/** The response type */
	typedef FResponse_DeleteMatch Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_DeleteMatch Delegate;
	/** The API object that supports this API call */
	typedef FMatchAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Delete Match Player
 * Delete player by player_uuid and match_id
 * 
 * Required Permissions:
 * 
 * - For any match any of: `match:*`, `match:match:edit:any`
*/
struct RALLYHEREAPI_API FRequest_DeleteMatchPlayer : public FRequest
{
	FRequest_DeleteMatchPlayer();
	virtual ~FRequest_DeleteMatchPlayer() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FGuid PlayerUuid;
	FString MatchId;
};

/** The response type for FRequest_DeleteMatchPlayer */
struct RALLYHEREAPI_API FResponse_DeleteMatchPlayer : public FResponseAccessorTemplate< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_DeleteMatchPlayer(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_DeleteMatchPlayer() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT

#endif //ALLOW_LEGACY_RESPONSE_CONTENT


	// Individual Response Helpers	
	/* Response 204
	Successful Response
	*/

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_DeleteMatchPlayer */
DECLARE_DELEGATE_OneParam(FDelegate_DeleteMatchPlayer, const FResponse_DeleteMatchPlayer&);

/** @brief A helper metadata object for DeleteMatchPlayer that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_DeleteMatchPlayer
{
	/** The request type */
	typedef FRequest_DeleteMatchPlayer Request;
	/** The response type */
	typedef FResponse_DeleteMatchPlayer Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_DeleteMatchPlayer Delegate;
	/** The API object that supports this API call */
	typedef FMatchAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Delete Match Segment
 * Delete match segment by match_id and segment_id
 * 
 * Required Permissions:
 * 
 * - For any match any of: `match:*`, `match:match:edit:any`
*/
struct RALLYHEREAPI_API FRequest_DeleteMatchSegment : public FRequest
{
	FRequest_DeleteMatchSegment();
	virtual ~FRequest_DeleteMatchSegment() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString MatchId;
	FString SegmentId;
};

/** The response type for FRequest_DeleteMatchSegment */
struct RALLYHEREAPI_API FResponse_DeleteMatchSegment : public FResponseAccessorTemplate< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_DeleteMatchSegment(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_DeleteMatchSegment() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT

#endif //ALLOW_LEGACY_RESPONSE_CONTENT


	// Individual Response Helpers	
	/* Response 204
	Successful Response
	*/

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_DeleteMatchSegment */
DECLARE_DELEGATE_OneParam(FDelegate_DeleteMatchSegment, const FResponse_DeleteMatchSegment&);

/** @brief A helper metadata object for DeleteMatchSegment that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_DeleteMatchSegment
{
	/** The request type */
	typedef FRequest_DeleteMatchSegment Request;
	/** The response type */
	typedef FResponse_DeleteMatchSegment Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_DeleteMatchSegment Delegate;
	/** The API object that supports this API call */
	typedef FMatchAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Match
 * Get match segment by match_id.
 * 
 * Required Permissions:
 * 
 * - For any match any of: `match:*`, `match:match:any:read`
 * 
 * - For match if the player was in match any of: `match:*`, `match:match:player:read`
*/
struct RALLYHEREAPI_API FRequest_GetMatch : public FRequest
{
	FRequest_GetMatch();
	virtual ~FRequest_GetMatch() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString MatchId;
};

/** The response type for FRequest_GetMatch */
struct RALLYHEREAPI_API FResponse_GetMatch : public FResponseAccessorTemplate<FRHAPI_MatchWithPlayers, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_MatchWithPlayers, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetMatch(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetMatch() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_MatchWithPlayers Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_MatchWithPlayers& OutContent) const { return TryGetContent<FRHAPI_MatchWithPlayers>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_MatchWithPlayers>& OutContent) const { return TryGetContent<FRHAPI_MatchWithPlayers>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_MatchWithPlayers* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_MatchWithPlayers>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_MatchWithPlayers> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_MatchWithPlayers>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_MatchWithPlayers& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetMatch */
DECLARE_DELEGATE_OneParam(FDelegate_GetMatch, const FResponse_GetMatch&);

/** @brief A helper metadata object for GetMatch that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetMatch
{
	/** The request type */
	typedef FRequest_GetMatch Request;
	/** The response type */
	typedef FResponse_GetMatch Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetMatch Delegate;
	/** The API object that supports this API call */
	typedef FMatchAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Match Player
 * Get a player match record for the provided player_uuid and match_id
 * 
 * any of: `match:*`, `match:match:player:read`, `match:player:any:read` 
 *     
 * : `match:player:self:read`
*/
struct RALLYHEREAPI_API FRequest_GetMatchPlayer : public FRequest
{
	FRequest_GetMatchPlayer();
	virtual ~FRequest_GetMatchPlayer() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FGuid PlayerUuid;
	FString MatchId;
};

/** The response type for FRequest_GetMatchPlayer */
struct RALLYHEREAPI_API FResponse_GetMatchPlayer : public FResponseAccessorTemplate<FRHAPI_MatchPlayerWithMatch, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_MatchPlayerWithMatch, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetMatchPlayer(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetMatchPlayer() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_MatchPlayerWithMatch Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_MatchPlayerWithMatch& OutContent) const { return TryGetContent<FRHAPI_MatchPlayerWithMatch>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_MatchPlayerWithMatch>& OutContent) const { return TryGetContent<FRHAPI_MatchPlayerWithMatch>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_MatchPlayerWithMatch* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_MatchPlayerWithMatch>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_MatchPlayerWithMatch> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_MatchPlayerWithMatch>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_MatchPlayerWithMatch& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetMatchPlayer */
DECLARE_DELEGATE_OneParam(FDelegate_GetMatchPlayer, const FResponse_GetMatchPlayer&);

/** @brief A helper metadata object for GetMatchPlayer that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetMatchPlayer
{
	/** The request type */
	typedef FRequest_GetMatchPlayer Request;
	/** The response type */
	typedef FResponse_GetMatchPlayer Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetMatchPlayer Delegate;
	/** The API object that supports this API call */
	typedef FMatchAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Match Segment
 * Get match segment by match_id and segment_id.
 * 
 * - For any match any of: `match:*`, `match:match:any:read`
 * 
 * - For match if the player was in match any of: `match:*`, `match:match:player:read`
*/
struct RALLYHEREAPI_API FRequest_GetMatchSegment : public FRequest
{
	FRequest_GetMatchSegment();
	virtual ~FRequest_GetMatchSegment() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString MatchId;
	FString SegmentId;
};

/** The response type for FRequest_GetMatchSegment */
struct RALLYHEREAPI_API FResponse_GetMatchSegment : public FResponseAccessorTemplate<FRHAPI_MatchSegmentWithPlayers, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_MatchSegmentWithPlayers, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetMatchSegment(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetMatchSegment() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_MatchSegmentWithPlayers Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_MatchSegmentWithPlayers& OutContent) const { return TryGetContent<FRHAPI_MatchSegmentWithPlayers>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_MatchSegmentWithPlayers>& OutContent) const { return TryGetContent<FRHAPI_MatchSegmentWithPlayers>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_MatchSegmentWithPlayers* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_MatchSegmentWithPlayers>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_MatchSegmentWithPlayers> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_MatchSegmentWithPlayers>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_MatchSegmentWithPlayers& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetMatchSegment */
DECLARE_DELEGATE_OneParam(FDelegate_GetMatchSegment, const FResponse_GetMatchSegment&);

/** @brief A helper metadata object for GetMatchSegment that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetMatchSegment
{
	/** The request type */
	typedef FRequest_GetMatchSegment Request;
	/** The response type */
	typedef FResponse_GetMatchSegment Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetMatchSegment Delegate;
	/** The API object that supports this API call */
	typedef FMatchAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Matches
 * Get pages of matches based on provided filters.
 * 
 * Required Permissions:
 * 
 * - For any match any of: `match:*`, `match:match:any:read`
*/
struct RALLYHEREAPI_API FRequest_GetMatches : public FRequest
{
	FRequest_GetMatches();
	virtual ~FRequest_GetMatches() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	TOptional<FString> Cursor;
	/* The maximum number of elements to be returned per call */
	TOptional<int32> PageSize;
	TOptional<FString> InstanceId;
	TOptional<FString> AllocationId;
	TOptional<FString> SessionId;
	TOptional<FString> HostPlayerUuid;
	TOptional<FString> RegionId;
	TOptional<FString> PlayerUuid;
	TOptional<FString> Type;
	TOptional<ERHAPI_MatchState> State;
	TOptional<bool> IncludeSegments;
	TOptional<bool> IncludePlayers;
};

/** The response type for FRequest_GetMatches */
struct RALLYHEREAPI_API FResponse_GetMatches : public FResponseAccessorTemplate<FRHAPI_PagedMatchResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_PagedMatchResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetMatches(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetMatches() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PagedMatchResponse Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PagedMatchResponse& OutContent) const { return TryGetContent<FRHAPI_PagedMatchResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PagedMatchResponse>& OutContent) const { return TryGetContent<FRHAPI_PagedMatchResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PagedMatchResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PagedMatchResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PagedMatchResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PagedMatchResponse>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PagedMatchResponse& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetMatches */
DECLARE_DELEGATE_OneParam(FDelegate_GetMatches, const FResponse_GetMatches&);

/** @brief A helper metadata object for GetMatches that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetMatches
{
	/** The request type */
	typedef FRequest_GetMatches Request;
	/** The response type */
	typedef FResponse_GetMatches Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetMatches Delegate;
	/** The API object that supports this API call */
	typedef FMatchAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Player Matches Self
 * Get all matches for self. Only provides matches for the player_uuid in the provided token.
 * 
 * any of: `match:*`, `match:match:player:read`, `match:player:any:read` 
 *     
 * : `match:player:self:read`
*/
struct RALLYHEREAPI_API FRequest_GetPlayerMatchesSelf : public FRequest
{
	FRequest_GetPlayerMatchesSelf();
	virtual ~FRequest_GetPlayerMatchesSelf() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	TOptional<FString> Cursor;
	/* The maximum number of elements to be returned per call */
	TOptional<int32> PageSize;
};

/** The response type for FRequest_GetPlayerMatchesSelf */
struct RALLYHEREAPI_API FResponse_GetPlayerMatchesSelf : public FResponseAccessorTemplate<FRHAPI_PagedPlayerMatchResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_PagedPlayerMatchResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetPlayerMatchesSelf(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetPlayerMatchesSelf() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PagedPlayerMatchResponse Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PagedPlayerMatchResponse& OutContent) const { return TryGetContent<FRHAPI_PagedPlayerMatchResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PagedPlayerMatchResponse>& OutContent) const { return TryGetContent<FRHAPI_PagedPlayerMatchResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PagedPlayerMatchResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PagedPlayerMatchResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PagedPlayerMatchResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PagedPlayerMatchResponse>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PagedPlayerMatchResponse& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetPlayerMatchesSelf */
DECLARE_DELEGATE_OneParam(FDelegate_GetPlayerMatchesSelf, const FResponse_GetPlayerMatchesSelf&);

/** @brief A helper metadata object for GetPlayerMatchesSelf that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetPlayerMatchesSelf
{
	/** The request type */
	typedef FRequest_GetPlayerMatchesSelf Request;
	/** The response type */
	typedef FResponse_GetPlayerMatchesSelf Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetPlayerMatchesSelf Delegate;
	/** The API object that supports this API call */
	typedef FMatchAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Player Stats
 * Get player stats for the provided player_uuid,.
 * 
 * any of: `match:*`, `match:match:player:read`, `match:player:any:read` 
 *     
 * : `match:player:self:read`
*/
struct RALLYHEREAPI_API FRequest_GetPlayerStats : public FRequest
{
	FRequest_GetPlayerStats();
	virtual ~FRequest_GetPlayerStats() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FGuid PlayerUuid;
};

/** The response type for FRequest_GetPlayerStats */
struct RALLYHEREAPI_API FResponse_GetPlayerStats : public FResponseAccessorTemplate<FRHAPI_PlayerStatsResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_PlayerStatsResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetPlayerStats(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetPlayerStats() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PlayerStatsResponse Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PlayerStatsResponse& OutContent) const { return TryGetContent<FRHAPI_PlayerStatsResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PlayerStatsResponse>& OutContent) const { return TryGetContent<FRHAPI_PlayerStatsResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PlayerStatsResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PlayerStatsResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PlayerStatsResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PlayerStatsResponse>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PlayerStatsResponse& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetPlayerStats */
DECLARE_DELEGATE_OneParam(FDelegate_GetPlayerStats, const FResponse_GetPlayerStats&);

/** @brief A helper metadata object for GetPlayerStats that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetPlayerStats
{
	/** The request type */
	typedef FRequest_GetPlayerStats Request;
	/** The response type */
	typedef FResponse_GetPlayerStats Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetPlayerStats Delegate;
	/** The API object that supports this API call */
	typedef FMatchAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Players Matches
 * Get All matches for a provided player_uuid.
 * 
 * any of: `match:*`, `match:match:player:read`, `match:player:any:read` 
 *     
 * : `match:player:self:read`
*/
struct RALLYHEREAPI_API FRequest_GetPlayersMatches : public FRequest
{
	FRequest_GetPlayersMatches();
	virtual ~FRequest_GetPlayersMatches() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FGuid PlayerUuid;
	TOptional<FString> Cursor;
	/* The maximum number of elements to be returned per call */
	TOptional<int32> PageSize;
};

/** The response type for FRequest_GetPlayersMatches */
struct RALLYHEREAPI_API FResponse_GetPlayersMatches : public FResponseAccessorTemplate<FRHAPI_PagedPlayerMatchResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_PagedPlayerMatchResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetPlayersMatches(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetPlayersMatches() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PagedPlayerMatchResponse Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PagedPlayerMatchResponse& OutContent) const { return TryGetContent<FRHAPI_PagedPlayerMatchResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PagedPlayerMatchResponse>& OutContent) const { return TryGetContent<FRHAPI_PagedPlayerMatchResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PagedPlayerMatchResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PagedPlayerMatchResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PagedPlayerMatchResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PagedPlayerMatchResponse>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PagedPlayerMatchResponse& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetPlayersMatches */
DECLARE_DELEGATE_OneParam(FDelegate_GetPlayersMatches, const FResponse_GetPlayersMatches&);

/** @brief A helper metadata object for GetPlayersMatches that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetPlayersMatches
{
	/** The request type */
	typedef FRequest_GetPlayersMatches Request;
	/** The response type */
	typedef FResponse_GetPlayersMatches Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetPlayersMatches Delegate;
	/** The API object that supports this API call */
	typedef FMatchAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Patch Match
 * Update match by match_id only with provided fields.
 * 
 * Match must be in pending state to be updated.
 * 
 * Required Permissions:
 * 
 * - For any match any of: `match:*`, `match:match:edit:any`
 * 
 * - For match if the player is the host any of: `match:*`, `match:match:edit:any`, `match:match:edit:authority`
*/
struct RALLYHEREAPI_API FRequest_PatchMatch : public FRequest
{
	FRequest_PatchMatch();
	virtual ~FRequest_PatchMatch() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString MatchId;
	FRHAPI_MatchRequest MatchRequest;
};

/** The response type for FRequest_PatchMatch */
struct RALLYHEREAPI_API FResponse_PatchMatch : public FResponseAccessorTemplate<FRHAPI_MatchWithPlayers, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_MatchWithPlayers, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_PatchMatch(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_PatchMatch() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_MatchWithPlayers Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_MatchWithPlayers& OutContent) const { return TryGetContent<FRHAPI_MatchWithPlayers>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_MatchWithPlayers>& OutContent) const { return TryGetContent<FRHAPI_MatchWithPlayers>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_MatchWithPlayers* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_MatchWithPlayers>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_MatchWithPlayers> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_MatchWithPlayers>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_MatchWithPlayers& OutContent) const;

	/* Response 400
	Bad Request
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_PatchMatch */
DECLARE_DELEGATE_OneParam(FDelegate_PatchMatch, const FResponse_PatchMatch&);

/** @brief A helper metadata object for PatchMatch that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_PatchMatch
{
	/** The request type */
	typedef FRequest_PatchMatch Request;
	/** The response type */
	typedef FResponse_PatchMatch Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_PatchMatch Delegate;
	/** The API object that supports this API call */
	typedef FMatchAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Patch Match Player
 * Update player match record for the provided player_uuid " "and match_id only with provided fields.
 * 
 * Match must still be in a pending state.
 * 
 * Required Permissions:   
 * 
 * - For any match any of: `match:*`, `match:match:edit:any`
 * 
 * - For match if the player is the host any of: `match:*`, `match:match:edit:any`, `match:match:edit:authority`
*/
struct RALLYHEREAPI_API FRequest_PatchMatchPlayer : public FRequest
{
	FRequest_PatchMatchPlayer();
	virtual ~FRequest_PatchMatchPlayer() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FGuid PlayerUuid;
	FString MatchId;
	FRHAPI_MatchPlayerRequest MatchPlayerRequest;
};

/** The response type for FRequest_PatchMatchPlayer */
struct RALLYHEREAPI_API FResponse_PatchMatchPlayer : public FResponseAccessorTemplate<FRHAPI_MatchPlayerWithMatch, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_MatchPlayerWithMatch, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_PatchMatchPlayer(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_PatchMatchPlayer() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_MatchPlayerWithMatch Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_MatchPlayerWithMatch& OutContent) const { return TryGetContent<FRHAPI_MatchPlayerWithMatch>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_MatchPlayerWithMatch>& OutContent) const { return TryGetContent<FRHAPI_MatchPlayerWithMatch>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_MatchPlayerWithMatch* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_MatchPlayerWithMatch>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_MatchPlayerWithMatch> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_MatchPlayerWithMatch>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_MatchPlayerWithMatch& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_PatchMatchPlayer */
DECLARE_DELEGATE_OneParam(FDelegate_PatchMatchPlayer, const FResponse_PatchMatchPlayer&);

/** @brief A helper metadata object for PatchMatchPlayer that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_PatchMatchPlayer
{
	/** The request type */
	typedef FRequest_PatchMatchPlayer Request;
	/** The response type */
	typedef FResponse_PatchMatchPlayer Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_PatchMatchPlayer Delegate;
	/** The API object that supports this API call */
	typedef FMatchAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Patch Match Segment
 * Update match segment by match_id and segment_id only with provided fields.
 * 
 * Match must be in pending state to be updated.
 * 
 * Required Permissions:
 * 
 * - For any match segment any of: `match:*`, `match:match:edit:any`
 * 
 * - For match segment if the player is the host any of: `match:*`, `match:match:edit:any`, `match:match:edit:authority`
*/
struct RALLYHEREAPI_API FRequest_PatchMatchSegment : public FRequest
{
	FRequest_PatchMatchSegment();
	virtual ~FRequest_PatchMatchSegment() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString MatchId;
	FString SegmentId;
	FRHAPI_MatchSegmentPatchRequest MatchSegmentPatchRequest;
};

/** The response type for FRequest_PatchMatchSegment */
struct RALLYHEREAPI_API FResponse_PatchMatchSegment : public FResponseAccessorTemplate<FRHAPI_MatchSegmentWithPlayers, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_MatchSegmentWithPlayers, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_PatchMatchSegment(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_PatchMatchSegment() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_MatchSegmentWithPlayers Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_MatchSegmentWithPlayers& OutContent) const { return TryGetContent<FRHAPI_MatchSegmentWithPlayers>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_MatchSegmentWithPlayers>& OutContent) const { return TryGetContent<FRHAPI_MatchSegmentWithPlayers>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_MatchSegmentWithPlayers* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_MatchSegmentWithPlayers>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_MatchSegmentWithPlayers> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_MatchSegmentWithPlayers>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_MatchSegmentWithPlayers& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_PatchMatchSegment */
DECLARE_DELEGATE_OneParam(FDelegate_PatchMatchSegment, const FResponse_PatchMatchSegment&);

/** @brief A helper metadata object for PatchMatchSegment that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_PatchMatchSegment
{
	/** The request type */
	typedef FRequest_PatchMatchSegment Request;
	/** The response type */
	typedef FResponse_PatchMatchSegment Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_PatchMatchSegment Delegate;
	/** The API object that supports this API call */
	typedef FMatchAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Update Match
 * Update match by match_id.
 * 
 * Match must be in pending state to be updated.
 * 
 * Required Permissions:
 * 
 * - For any match any of: `match:*`, `match:match:edit:any`
 * 
 * - For match if the player is the host any of: `match:*`, `match:match:edit:any`, `match:match:edit:authority`
*/
struct RALLYHEREAPI_API FRequest_UpdateMatch : public FRequest
{
	FRequest_UpdateMatch();
	virtual ~FRequest_UpdateMatch() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString MatchId;
	FRHAPI_MatchRequest MatchRequest;
};

/** The response type for FRequest_UpdateMatch */
struct RALLYHEREAPI_API FResponse_UpdateMatch : public FResponseAccessorTemplate<FRHAPI_MatchWithPlayers, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_MatchWithPlayers, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_UpdateMatch(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_UpdateMatch() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_MatchWithPlayers Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_MatchWithPlayers& OutContent) const { return TryGetContent<FRHAPI_MatchWithPlayers>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_MatchWithPlayers>& OutContent) const { return TryGetContent<FRHAPI_MatchWithPlayers>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_MatchWithPlayers* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_MatchWithPlayers>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_MatchWithPlayers> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_MatchWithPlayers>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_MatchWithPlayers& OutContent) const;

	/* Response 400
	Bad Request
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_UpdateMatch */
DECLARE_DELEGATE_OneParam(FDelegate_UpdateMatch, const FResponse_UpdateMatch&);

/** @brief A helper metadata object for UpdateMatch that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_UpdateMatch
{
	/** The request type */
	typedef FRequest_UpdateMatch Request;
	/** The response type */
	typedef FResponse_UpdateMatch Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_UpdateMatch Delegate;
	/** The API object that supports this API call */
	typedef FMatchAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Update Match Player
 * Update player match record for the provided player_uuid and match_id
 *     
 * Match must be in pending state to be updated.
 *     
 * any of: `match:*`, `match:match:edit:any` - update any match.
 * 
 * any of: `match:*`, `match:match:edit:any`, `match:match:edit:authority` - update match if the player is the host of the match.
*/
struct RALLYHEREAPI_API FRequest_UpdateMatchPlayer : public FRequest
{
	FRequest_UpdateMatchPlayer();
	virtual ~FRequest_UpdateMatchPlayer() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FGuid PlayerUuid;
	FString MatchId;
	FRHAPI_MatchPlayerRequest MatchPlayerRequest;
};

/** The response type for FRequest_UpdateMatchPlayer */
struct RALLYHEREAPI_API FResponse_UpdateMatchPlayer : public FResponseAccessorTemplate<FRHAPI_MatchPlayerWithMatch, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_MatchPlayerWithMatch, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_UpdateMatchPlayer(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_UpdateMatchPlayer() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_MatchPlayerWithMatch Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_MatchPlayerWithMatch& OutContent) const { return TryGetContent<FRHAPI_MatchPlayerWithMatch>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_MatchPlayerWithMatch>& OutContent) const { return TryGetContent<FRHAPI_MatchPlayerWithMatch>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_MatchPlayerWithMatch* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_MatchPlayerWithMatch>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_MatchPlayerWithMatch> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_MatchPlayerWithMatch>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_MatchPlayerWithMatch& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_UpdateMatchPlayer */
DECLARE_DELEGATE_OneParam(FDelegate_UpdateMatchPlayer, const FResponse_UpdateMatchPlayer&);

/** @brief A helper metadata object for UpdateMatchPlayer that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_UpdateMatchPlayer
{
	/** The request type */
	typedef FRequest_UpdateMatchPlayer Request;
	/** The response type */
	typedef FResponse_UpdateMatchPlayer Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_UpdateMatchPlayer Delegate;
	/** The API object that supports this API call */
	typedef FMatchAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Update Match Segment
 * Update match segment by match_id and segment_id.
 * 
 * Match must be in pending state to be updated.
 * 
 * Required Permissions:
 * 
 * - For any match segment any of: `match:*`, `match:match:edit:any`
 * 
 * - For match segment if the player is the host any of: `match:*`, `match:match:edit:any`, `match:match:edit:authority`
*/
struct RALLYHEREAPI_API FRequest_UpdateMatchSegment : public FRequest
{
	FRequest_UpdateMatchSegment();
	virtual ~FRequest_UpdateMatchSegment() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString MatchId;
	FString SegmentId;
	FRHAPI_MatchSegmentRequest MatchSegmentRequest;
};

/** The response type for FRequest_UpdateMatchSegment */
struct RALLYHEREAPI_API FResponse_UpdateMatchSegment : public FResponseAccessorTemplate<FRHAPI_MatchSegmentWithPlayers, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_MatchSegmentWithPlayers, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_UpdateMatchSegment(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_UpdateMatchSegment() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_MatchSegmentWithPlayers Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_MatchSegmentWithPlayers& OutContent) const { return TryGetContent<FRHAPI_MatchSegmentWithPlayers>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_MatchSegmentWithPlayers>& OutContent) const { return TryGetContent<FRHAPI_MatchSegmentWithPlayers>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_MatchSegmentWithPlayers* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_MatchSegmentWithPlayers>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_MatchSegmentWithPlayers> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_MatchSegmentWithPlayers>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_MatchSegmentWithPlayers& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_UpdateMatchSegment */
DECLARE_DELEGATE_OneParam(FDelegate_UpdateMatchSegment, const FResponse_UpdateMatchSegment&);

/** @brief A helper metadata object for UpdateMatchSegment that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_UpdateMatchSegment
{
	/** The request type */
	typedef FRequest_UpdateMatchSegment Request;
	/** The response type */
	typedef FResponse_UpdateMatchSegment Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_UpdateMatchSegment Delegate;
	/** The API object that supports this API call */
	typedef FMatchAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};


/** The API class itself, which will handle calls to */
class RALLYHEREAPI_API FMatchAPI : public FAPI
{
public:
	FMatchAPI();
	virtual ~FMatchAPI();

	FHttpRequestPtr CreateMatch(const FRequest_CreateMatch& Request, const FDelegate_CreateMatch& Delegate = FDelegate_CreateMatch(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnCreateMatchResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_CreateMatch Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr CreateMatchPlayer(const FRequest_CreateMatchPlayer& Request, const FDelegate_CreateMatchPlayer& Delegate = FDelegate_CreateMatchPlayer(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnCreateMatchPlayerResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_CreateMatchPlayer Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr CreateMatchSegment(const FRequest_CreateMatchSegment& Request, const FDelegate_CreateMatchSegment& Delegate = FDelegate_CreateMatchSegment(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnCreateMatchSegmentResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_CreateMatchSegment Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr DeleteMatch(const FRequest_DeleteMatch& Request, const FDelegate_DeleteMatch& Delegate = FDelegate_DeleteMatch(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnDeleteMatchResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_DeleteMatch Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr DeleteMatchPlayer(const FRequest_DeleteMatchPlayer& Request, const FDelegate_DeleteMatchPlayer& Delegate = FDelegate_DeleteMatchPlayer(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnDeleteMatchPlayerResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_DeleteMatchPlayer Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr DeleteMatchSegment(const FRequest_DeleteMatchSegment& Request, const FDelegate_DeleteMatchSegment& Delegate = FDelegate_DeleteMatchSegment(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnDeleteMatchSegmentResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_DeleteMatchSegment Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetMatch(const FRequest_GetMatch& Request, const FDelegate_GetMatch& Delegate = FDelegate_GetMatch(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetMatchResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetMatch Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetMatchPlayer(const FRequest_GetMatchPlayer& Request, const FDelegate_GetMatchPlayer& Delegate = FDelegate_GetMatchPlayer(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetMatchPlayerResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetMatchPlayer Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetMatchSegment(const FRequest_GetMatchSegment& Request, const FDelegate_GetMatchSegment& Delegate = FDelegate_GetMatchSegment(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetMatchSegmentResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetMatchSegment Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetMatches(const FRequest_GetMatches& Request, const FDelegate_GetMatches& Delegate = FDelegate_GetMatches(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetMatchesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetMatches Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetPlayerMatchesSelf(const FRequest_GetPlayerMatchesSelf& Request, const FDelegate_GetPlayerMatchesSelf& Delegate = FDelegate_GetPlayerMatchesSelf(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetPlayerMatchesSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlayerMatchesSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetPlayerStats(const FRequest_GetPlayerStats& Request, const FDelegate_GetPlayerStats& Delegate = FDelegate_GetPlayerStats(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetPlayerStatsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlayerStats Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetPlayersMatches(const FRequest_GetPlayersMatches& Request, const FDelegate_GetPlayersMatches& Delegate = FDelegate_GetPlayersMatches(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetPlayersMatchesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlayersMatches Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr PatchMatch(const FRequest_PatchMatch& Request, const FDelegate_PatchMatch& Delegate = FDelegate_PatchMatch(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnPatchMatchResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_PatchMatch Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr PatchMatchPlayer(const FRequest_PatchMatchPlayer& Request, const FDelegate_PatchMatchPlayer& Delegate = FDelegate_PatchMatchPlayer(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnPatchMatchPlayerResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_PatchMatchPlayer Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr PatchMatchSegment(const FRequest_PatchMatchSegment& Request, const FDelegate_PatchMatchSegment& Delegate = FDelegate_PatchMatchSegment(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnPatchMatchSegmentResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_PatchMatchSegment Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr UpdateMatch(const FRequest_UpdateMatch& Request, const FDelegate_UpdateMatch& Delegate = FDelegate_UpdateMatch(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnUpdateMatchResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdateMatch Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr UpdateMatchPlayer(const FRequest_UpdateMatchPlayer& Request, const FDelegate_UpdateMatchPlayer& Delegate = FDelegate_UpdateMatchPlayer(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnUpdateMatchPlayerResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdateMatchPlayer Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr UpdateMatchSegment(const FRequest_UpdateMatchSegment& Request, const FDelegate_UpdateMatchSegment& Delegate = FDelegate_UpdateMatchSegment(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnUpdateMatchSegmentResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdateMatchSegment Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};



}
