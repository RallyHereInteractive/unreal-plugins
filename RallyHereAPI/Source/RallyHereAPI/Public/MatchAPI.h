// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereAPIAuthContext.h"
#include "RallyHereAPIHelpers.h"
#include "HTTPValidationError.h"
#include "HzApiErrorModel.h"
#include "MatchPlayerRequest.h"
#include "MatchPlayerWithMatch.h"
#include "MatchRequest.h"
#include "MatchWithPlayers.h"
#include "PagedMatchResponse.h"
#include "PagedPlayerMatchResponse.h"

namespace RallyHereAPI
{
using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

struct FRequest_CreateMatch;
struct FResponse_CreateMatch;
struct FRequest_CreatePlayerMatch;
struct FResponse_CreatePlayerMatch;
struct FRequest_DeleteMatch;
struct FResponse_DeleteMatch;
struct FRequest_DeletePlayerMatch;
struct FResponse_DeletePlayerMatch;
struct FRequest_GetMatch;
struct FResponse_GetMatch;
struct FRequest_GetMatches;
struct FResponse_GetMatches;
struct FRequest_GetPlayerMatch;
struct FResponse_GetPlayerMatch;
struct FRequest_GetPlayerMatchesSelf;
struct FResponse_GetPlayerMatchesSelf;
struct FRequest_GetPlayersMatches;
struct FResponse_GetPlayersMatches;
struct FRequest_PatchMatch;
struct FResponse_PatchMatch;
struct FRequest_PatchPlayerMatch;
struct FResponse_PatchPlayerMatch;
struct FRequest_UpdateMatch;
struct FResponse_UpdateMatch;
struct FRequest_UpdatePlayerMatch;
struct FResponse_UpdatePlayerMatch;

DECLARE_DELEGATE_OneParam(FDelegate_CreateMatch, const FResponse_CreateMatch&);
DECLARE_DELEGATE_OneParam(FDelegate_CreatePlayerMatch, const FResponse_CreatePlayerMatch&);
DECLARE_DELEGATE_OneParam(FDelegate_DeleteMatch, const FResponse_DeleteMatch&);
DECLARE_DELEGATE_OneParam(FDelegate_DeletePlayerMatch, const FResponse_DeletePlayerMatch&);
DECLARE_DELEGATE_OneParam(FDelegate_GetMatch, const FResponse_GetMatch&);
DECLARE_DELEGATE_OneParam(FDelegate_GetMatches, const FResponse_GetMatches&);
DECLARE_DELEGATE_OneParam(FDelegate_GetPlayerMatch, const FResponse_GetPlayerMatch&);
DECLARE_DELEGATE_OneParam(FDelegate_GetPlayerMatchesSelf, const FResponse_GetPlayerMatchesSelf&);
DECLARE_DELEGATE_OneParam(FDelegate_GetPlayersMatches, const FResponse_GetPlayersMatches&);
DECLARE_DELEGATE_OneParam(FDelegate_PatchMatch, const FResponse_PatchMatch&);
DECLARE_DELEGATE_OneParam(FDelegate_PatchPlayerMatch, const FResponse_PatchPlayerMatch&);
DECLARE_DELEGATE_OneParam(FDelegate_UpdateMatch, const FResponse_UpdateMatch&);
DECLARE_DELEGATE_OneParam(FDelegate_UpdatePlayerMatch, const FResponse_UpdatePlayerMatch&);

class RALLYHEREAPI_API FMatchAPI : public FAPI
{
public:
    FMatchAPI();
    virtual ~FMatchAPI();

    FHttpRequestPtr CreateMatch(const FRequest_CreateMatch& Request, const FDelegate_CreateMatch& Delegate = FDelegate_CreateMatch(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr CreatePlayerMatch(const FRequest_CreatePlayerMatch& Request, const FDelegate_CreatePlayerMatch& Delegate = FDelegate_CreatePlayerMatch(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr DeleteMatch(const FRequest_DeleteMatch& Request, const FDelegate_DeleteMatch& Delegate = FDelegate_DeleteMatch(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr DeletePlayerMatch(const FRequest_DeletePlayerMatch& Request, const FDelegate_DeletePlayerMatch& Delegate = FDelegate_DeletePlayerMatch(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr GetMatch(const FRequest_GetMatch& Request, const FDelegate_GetMatch& Delegate = FDelegate_GetMatch(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr GetMatches(const FRequest_GetMatches& Request, const FDelegate_GetMatches& Delegate = FDelegate_GetMatches(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr GetPlayerMatch(const FRequest_GetPlayerMatch& Request, const FDelegate_GetPlayerMatch& Delegate = FDelegate_GetPlayerMatch(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr GetPlayerMatchesSelf(const FRequest_GetPlayerMatchesSelf& Request, const FDelegate_GetPlayerMatchesSelf& Delegate = FDelegate_GetPlayerMatchesSelf(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr GetPlayersMatches(const FRequest_GetPlayersMatches& Request, const FDelegate_GetPlayersMatches& Delegate = FDelegate_GetPlayersMatches(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr PatchMatch(const FRequest_PatchMatch& Request, const FDelegate_PatchMatch& Delegate = FDelegate_PatchMatch(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr PatchPlayerMatch(const FRequest_PatchPlayerMatch& Request, const FDelegate_PatchPlayerMatch& Delegate = FDelegate_PatchPlayerMatch(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr UpdateMatch(const FRequest_UpdateMatch& Request, const FDelegate_UpdateMatch& Delegate = FDelegate_UpdateMatch(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr UpdatePlayerMatch(const FRequest_UpdatePlayerMatch& Request, const FDelegate_UpdatePlayerMatch& Delegate = FDelegate_UpdatePlayerMatch(), int32 Priority = DefaultRallyHereAPIPriority);

private:
    void OnCreateMatchResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_CreateMatch Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnCreatePlayerMatchResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_CreatePlayerMatch Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnDeleteMatchResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_DeleteMatch Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnDeletePlayerMatchResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_DeletePlayerMatch Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetMatchResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetMatch Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetMatchesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetMatches Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetPlayerMatchResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlayerMatch Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetPlayerMatchesSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlayerMatchesSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetPlayersMatchesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlayersMatches Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnPatchMatchResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_PatchMatch Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnPatchPlayerMatchResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_PatchPlayerMatch Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnUpdateMatchResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdateMatch Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnUpdatePlayerMatchResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdatePlayerMatch Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};

/* Create Match
 *
 * Create match by match_id
*/
struct RALLYHEREAPI_API FRequest_CreateMatch : public FRequest
{
    FRequest_CreateMatch();
    virtual ~FRequest_CreateMatch() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FRHAPI_MatchRequest MatchRequest;
};

struct RALLYHEREAPI_API FResponse_CreateMatch : public FResponse
{
    FResponse_CreateMatch(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_CreateMatch() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_MatchWithPlayers Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_MatchWithPlayers& OutContent) const;

    /* Response 403
    Forbidden
    */
    bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_CreateMatch
{
    typedef FRequest_CreateMatch Request;
    typedef FResponse_CreateMatch Response;
    typedef FDelegate_CreateMatch Delegate;
    typedef FMatchAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.CreateMatch(InRequest, InDelegate, Priority); }
};

/* Create Player Match
 *
 * Create player match record for the provided player_uuid and match_id
*/
struct RALLYHEREAPI_API FRequest_CreatePlayerMatch : public FRequest
{
    FRequest_CreatePlayerMatch();
    virtual ~FRequest_CreatePlayerMatch() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid PlayerUuid;
    FString MatchId;
    FRHAPI_MatchPlayerRequest MatchPlayerRequest;
};

struct RALLYHEREAPI_API FResponse_CreatePlayerMatch : public FResponse
{
    FResponse_CreatePlayerMatch(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_CreatePlayerMatch() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_MatchPlayerWithMatch Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_MatchPlayerWithMatch& OutContent) const;

    /* Response 403
    Forbidden
    */
    bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_CreatePlayerMatch
{
    typedef FRequest_CreatePlayerMatch Request;
    typedef FResponse_CreatePlayerMatch Response;
    typedef FDelegate_CreatePlayerMatch Delegate;
    typedef FMatchAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.CreatePlayerMatch(InRequest, InDelegate, Priority); }
};

/* Delete Match
 *
 * Delete match by match_id
*/
struct RALLYHEREAPI_API FRequest_DeleteMatch : public FRequest
{
    FRequest_DeleteMatch();
    virtual ~FRequest_DeleteMatch() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString MatchId;
};

struct RALLYHEREAPI_API FResponse_DeleteMatch : public FResponse
{
    FResponse_DeleteMatch(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_DeleteMatch() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */

    /* Response 403
    Forbidden
    */
    bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_DeleteMatch
{
    typedef FRequest_DeleteMatch Request;
    typedef FResponse_DeleteMatch Response;
    typedef FDelegate_DeleteMatch Delegate;
    typedef FMatchAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.DeleteMatch(InRequest, InDelegate, Priority); }
};

/* Delete Player Match
 *
 * Delete player by player_uuid and match_id
*/
struct RALLYHEREAPI_API FRequest_DeletePlayerMatch : public FRequest
{
    FRequest_DeletePlayerMatch();
    virtual ~FRequest_DeletePlayerMatch() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid PlayerUuid;
    FString MatchId;
};

struct RALLYHEREAPI_API FResponse_DeletePlayerMatch : public FResponse
{
    FResponse_DeletePlayerMatch(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_DeletePlayerMatch() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */

    /* Response 403
    Forbidden
    */
    bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_DeletePlayerMatch
{
    typedef FRequest_DeletePlayerMatch Request;
    typedef FResponse_DeletePlayerMatch Response;
    typedef FDelegate_DeletePlayerMatch Delegate;
    typedef FMatchAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.DeletePlayerMatch(InRequest, InDelegate, Priority); }
};

/* Get Match
 *
 * Get match by match_id
*/
struct RALLYHEREAPI_API FRequest_GetMatch : public FRequest
{
    FRequest_GetMatch();
    virtual ~FRequest_GetMatch() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString MatchId;
};

struct RALLYHEREAPI_API FResponse_GetMatch : public FResponse
{
    FResponse_GetMatch(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetMatch() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_MatchWithPlayers Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_MatchWithPlayers& OutContent) const;

    /* Response 403
    Forbidden
    */
    bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_GetMatch
{
    typedef FRequest_GetMatch Request;
    typedef FResponse_GetMatch Response;
    typedef FDelegate_GetMatch Delegate;
    typedef FMatchAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.GetMatch(InRequest, InDelegate, Priority); }
};

/* Get Matches
 *
 * Get pages of matches
*/
struct RALLYHEREAPI_API FRequest_GetMatches : public FRequest
{
    FRequest_GetMatches();
    virtual ~FRequest_GetMatches() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    TOptional<FString> Cursor;
    /* The maximum number of elements to be returned per call */
    TOptional<int32> PageSize;
    TOptional<FString> InstanceId;
    TOptional<FString> AllocationId;
    TOptional<FString> SessionId;
    TOptional<FString> HostPlayerUuid;
    TOptional<FString> RegionId;
    TOptional<FString> PlayerUuid;
};

struct RALLYHEREAPI_API FResponse_GetMatches : public FResponse
{
    FResponse_GetMatches(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetMatches() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_PagedMatchResponse Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_PagedMatchResponse& OutContent) const;

    /* Response 403
    Forbidden
    */
    bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_GetMatches
{
    typedef FRequest_GetMatches Request;
    typedef FResponse_GetMatches Response;
    typedef FDelegate_GetMatches Delegate;
    typedef FMatchAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.GetMatches(InRequest, InDelegate, Priority); }
};

/* Get Player Match
 *
 * Get a player match record for the provided player_uuid and match_id
*/
struct RALLYHEREAPI_API FRequest_GetPlayerMatch : public FRequest
{
    FRequest_GetPlayerMatch();
    virtual ~FRequest_GetPlayerMatch() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid PlayerUuid;
    FString MatchId;
};

struct RALLYHEREAPI_API FResponse_GetPlayerMatch : public FResponse
{
    FResponse_GetPlayerMatch(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetPlayerMatch() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_MatchPlayerWithMatch Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_MatchPlayerWithMatch& OutContent) const;

    /* Response 403
    Forbidden
    */
    bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_GetPlayerMatch
{
    typedef FRequest_GetPlayerMatch Request;
    typedef FResponse_GetPlayerMatch Response;
    typedef FDelegate_GetPlayerMatch Delegate;
    typedef FMatchAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.GetPlayerMatch(InRequest, InDelegate, Priority); }
};

/* Get Player Matches Self
 *
 * Get all matches for self
*/
struct RALLYHEREAPI_API FRequest_GetPlayerMatchesSelf : public FRequest
{
    FRequest_GetPlayerMatchesSelf();
    virtual ~FRequest_GetPlayerMatchesSelf() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    TOptional<FString> Cursor;
    /* The maximum number of elements to be returned per call */
    TOptional<int32> PageSize;
};

struct RALLYHEREAPI_API FResponse_GetPlayerMatchesSelf : public FResponse
{
    FResponse_GetPlayerMatchesSelf(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetPlayerMatchesSelf() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_PagedPlayerMatchResponse Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_PagedPlayerMatchResponse& OutContent) const;

    /* Response 403
    Forbidden
    */
    bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_GetPlayerMatchesSelf
{
    typedef FRequest_GetPlayerMatchesSelf Request;
    typedef FResponse_GetPlayerMatchesSelf Response;
    typedef FDelegate_GetPlayerMatchesSelf Delegate;
    typedef FMatchAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.GetPlayerMatchesSelf(InRequest, InDelegate, Priority); }
};

/* Get Players Matches
 *
 * Get All matches for a provided player_uuid
*/
struct RALLYHEREAPI_API FRequest_GetPlayersMatches : public FRequest
{
    FRequest_GetPlayersMatches();
    virtual ~FRequest_GetPlayersMatches() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid PlayerUuid;
    TOptional<FString> Cursor;
    /* The maximum number of elements to be returned per call */
    TOptional<int32> PageSize;
};

struct RALLYHEREAPI_API FResponse_GetPlayersMatches : public FResponse
{
    FResponse_GetPlayersMatches(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetPlayersMatches() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_PagedPlayerMatchResponse Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_PagedPlayerMatchResponse& OutContent) const;

    /* Response 403
    Forbidden
    */
    bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_GetPlayersMatches
{
    typedef FRequest_GetPlayersMatches Request;
    typedef FResponse_GetPlayersMatches Response;
    typedef FDelegate_GetPlayersMatches Delegate;
    typedef FMatchAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.GetPlayersMatches(InRequest, InDelegate, Priority); }
};

/* Patch Match
 *
 * Update match by match_id only with provided fields
*/
struct RALLYHEREAPI_API FRequest_PatchMatch : public FRequest
{
    FRequest_PatchMatch();
    virtual ~FRequest_PatchMatch() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString MatchId;
    FRHAPI_MatchRequest MatchRequest;
};

struct RALLYHEREAPI_API FResponse_PatchMatch : public FResponse
{
    FResponse_PatchMatch(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_PatchMatch() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_MatchWithPlayers Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_MatchWithPlayers& OutContent) const;

    /* Response 403
    Forbidden
    */
    bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_PatchMatch
{
    typedef FRequest_PatchMatch Request;
    typedef FResponse_PatchMatch Response;
    typedef FDelegate_PatchMatch Delegate;
    typedef FMatchAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.PatchMatch(InRequest, InDelegate, Priority); }
};

/* Patch Player Match
 *
 * Update player match record for the provided player_uuid and match_id only with provided fields
*/
struct RALLYHEREAPI_API FRequest_PatchPlayerMatch : public FRequest
{
    FRequest_PatchPlayerMatch();
    virtual ~FRequest_PatchPlayerMatch() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid PlayerUuid;
    FString MatchId;
    FRHAPI_MatchPlayerRequest MatchPlayerRequest;
};

struct RALLYHEREAPI_API FResponse_PatchPlayerMatch : public FResponse
{
    FResponse_PatchPlayerMatch(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_PatchPlayerMatch() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_MatchPlayerWithMatch Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_MatchPlayerWithMatch& OutContent) const;

    /* Response 403
    Forbidden
    */
    bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_PatchPlayerMatch
{
    typedef FRequest_PatchPlayerMatch Request;
    typedef FResponse_PatchPlayerMatch Response;
    typedef FDelegate_PatchPlayerMatch Delegate;
    typedef FMatchAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.PatchPlayerMatch(InRequest, InDelegate, Priority); }
};

/* Update Match
 *
 * Update match by match_id
*/
struct RALLYHEREAPI_API FRequest_UpdateMatch : public FRequest
{
    FRequest_UpdateMatch();
    virtual ~FRequest_UpdateMatch() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString MatchId;
    FRHAPI_MatchRequest MatchRequest;
};

struct RALLYHEREAPI_API FResponse_UpdateMatch : public FResponse
{
    FResponse_UpdateMatch(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_UpdateMatch() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_MatchWithPlayers Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_MatchWithPlayers& OutContent) const;

    /* Response 403
    Forbidden
    */
    bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_UpdateMatch
{
    typedef FRequest_UpdateMatch Request;
    typedef FResponse_UpdateMatch Response;
    typedef FDelegate_UpdateMatch Delegate;
    typedef FMatchAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.UpdateMatch(InRequest, InDelegate, Priority); }
};

/* Update Player Match
 *
 * Update player match record for the provided player_uuid and match_id
*/
struct RALLYHEREAPI_API FRequest_UpdatePlayerMatch : public FRequest
{
    FRequest_UpdatePlayerMatch();
    virtual ~FRequest_UpdatePlayerMatch() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid PlayerUuid;
    FString MatchId;
    FRHAPI_MatchPlayerRequest MatchPlayerRequest;
};

struct RALLYHEREAPI_API FResponse_UpdatePlayerMatch : public FResponse
{
    FResponse_UpdatePlayerMatch(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_UpdatePlayerMatch() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_MatchPlayerWithMatch Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_MatchPlayerWithMatch& OutContent) const;

    /* Response 403
    Forbidden
    */
    bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_UpdatePlayerMatch
{
    typedef FRequest_UpdatePlayerMatch Request;
    typedef FResponse_UpdatePlayerMatch Response;
    typedef FDelegate_UpdatePlayerMatch Delegate;
    typedef FMatchAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.UpdatePlayerMatch(InRequest, InDelegate, Priority); }
};


}
