// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "Platform.h"
#include "PersonOperationRequest.generated.h"

/** @defgroup RHAPI_PersonOperationRequest RallyHere API Model PersonOperationRequest
 *  @{
 */

/**
 * @brief Model for doing operations on a specific person.  If person information is not provided, the information from the token claims will be used instead.  Priority for finding the person ID:  1. If the &#x60;person_id&#x60; is provided directly 2. If the &#x60;platform&#x60; and &#x60;platform_user_id&#x60; are provided, the &#x60;person_id&#x60; of that platform user is used. 3. If the Authorization header contains a user token, the platform and platform user id from the token are used to find the &#x60;person_id&#x60;.
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_PersonOperationRequest : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	/** @brief Person ID */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FGuid PersonId_Optional{  };
	/** @brief true if PersonId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool PersonId_IsSet{ false };
	/** @brief Gets the value of PersonId_Optional, regardless of it having been set */
	FGuid& GetPersonId() { return PersonId_Optional; }
	/** @brief Gets the value of PersonId_Optional, regardless of it having been set */
	const FGuid& GetPersonId() const { return PersonId_Optional; }
	/** @brief Gets the value of PersonId_Optional, if it has been set, otherwise it returns DefaultValue */
	const FGuid& GetPersonId(const FGuid& DefaultValue) const { if (PersonId_IsSet) return PersonId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of PersonId_Optional and returns true if it has been set, otherwise returns false */
	bool GetPersonId(FGuid& OutValue) const { if (PersonId_IsSet) OutValue = PersonId_Optional; return PersonId_IsSet; }
	/** @brief Returns a pointer to PersonId_Optional, if it has been set, otherwise returns nullptr */
	FGuid* GetPersonIdOrNull() { if (PersonId_IsSet) return (&PersonId_Optional); return nullptr; }
	/** @brief Returns a pointer to PersonId_Optional, if it has been set, otherwise returns nullptr */
	const FGuid* GetPersonIdOrNull() const { if (PersonId_IsSet) return (&PersonId_Optional); return nullptr; }
	/** @brief Sets the value of PersonId_Optional and also sets PersonId_IsSet to true */
	void SetPersonId(const FGuid& NewValue) { PersonId_Optional = NewValue; PersonId_IsSet = true;  }
	/** @brief Sets the value of PersonId_Optional and also sets PersonId_IsSet to true using move semantics */
	void SetPersonId(FGuid&& NewValue) { PersonId_Optional = NewValue; PersonId_IsSet = true;  }
	 /** @brief Clears the value of PersonId_Optional and sets PersonId_IsSet to false */
	void ClearPersonId() { PersonId_IsSet = false;  }

	/** @brief Platform ID */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	ERHAPI_Platform Platform_Optional{  };
	/** @brief true if Platform_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Platform_IsSet{ false };
	/** @brief Gets the value of Platform_Optional, regardless of it having been set */
	ERHAPI_Platform& GetPlatform() { return Platform_Optional; }
	/** @brief Gets the value of Platform_Optional, regardless of it having been set */
	const ERHAPI_Platform& GetPlatform() const { return Platform_Optional; }
	/** @brief Gets the value of Platform_Optional, if it has been set, otherwise it returns DefaultValue */
	const ERHAPI_Platform& GetPlatform(const ERHAPI_Platform& DefaultValue) const { if (Platform_IsSet) return Platform_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Platform_Optional and returns true if it has been set, otherwise returns false */
	bool GetPlatform(ERHAPI_Platform& OutValue) const { if (Platform_IsSet) OutValue = Platform_Optional; return Platform_IsSet; }
	/** @brief Returns a pointer to Platform_Optional, if it has been set, otherwise returns nullptr */
	ERHAPI_Platform* GetPlatformOrNull() { if (Platform_IsSet) return (&Platform_Optional); return nullptr; }
	/** @brief Returns a pointer to Platform_Optional, if it has been set, otherwise returns nullptr */
	const ERHAPI_Platform* GetPlatformOrNull() const { if (Platform_IsSet) return (&Platform_Optional); return nullptr; }
	/** @brief Sets the value of Platform_Optional and also sets Platform_IsSet to true */
	void SetPlatform(const ERHAPI_Platform& NewValue) { Platform_Optional = NewValue; Platform_IsSet = true;  }
	/** @brief Sets the value of Platform_Optional and also sets Platform_IsSet to true using move semantics */
	void SetPlatform(ERHAPI_Platform&& NewValue) { Platform_Optional = NewValue; Platform_IsSet = true;  }
	 /** @brief Clears the value of Platform_Optional and sets Platform_IsSet to false */
	void ClearPlatform() { Platform_IsSet = false;  }

	/** @brief Platform User ID */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString PlatformUserId_Optional{  };
	/** @brief true if PlatformUserId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool PlatformUserId_IsSet{ false };
	/** @brief Gets the value of PlatformUserId_Optional, regardless of it having been set */
	FString& GetPlatformUserId() { return PlatformUserId_Optional; }
	/** @brief Gets the value of PlatformUserId_Optional, regardless of it having been set */
	const FString& GetPlatformUserId() const { return PlatformUserId_Optional; }
	/** @brief Gets the value of PlatformUserId_Optional, if it has been set, otherwise it returns DefaultValue */
	const FString& GetPlatformUserId(const FString& DefaultValue) const { if (PlatformUserId_IsSet) return PlatformUserId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of PlatformUserId_Optional and returns true if it has been set, otherwise returns false */
	bool GetPlatformUserId(FString& OutValue) const { if (PlatformUserId_IsSet) OutValue = PlatformUserId_Optional; return PlatformUserId_IsSet; }
	/** @brief Returns a pointer to PlatformUserId_Optional, if it has been set, otherwise returns nullptr */
	FString* GetPlatformUserIdOrNull() { if (PlatformUserId_IsSet) return (&PlatformUserId_Optional); return nullptr; }
	/** @brief Returns a pointer to PlatformUserId_Optional, if it has been set, otherwise returns nullptr */
	const FString* GetPlatformUserIdOrNull() const { if (PlatformUserId_IsSet) return (&PlatformUserId_Optional); return nullptr; }
	/** @brief Sets the value of PlatformUserId_Optional and also sets PlatformUserId_IsSet to true */
	void SetPlatformUserId(const FString& NewValue) { PlatformUserId_Optional = NewValue; PlatformUserId_IsSet = true;  }
	/** @brief Sets the value of PlatformUserId_Optional and also sets PlatformUserId_IsSet to true using move semantics */
	void SetPlatformUserId(FString&& NewValue) { PlatformUserId_Optional = NewValue; PlatformUserId_IsSet = true;  }
	 /** @brief Clears the value of PlatformUserId_Optional and sets PlatformUserId_IsSet to false */
	void ClearPlatformUserId() { PlatformUserId_IsSet = false;  }
};

/** @} */
