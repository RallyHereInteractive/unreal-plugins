// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereAPIAuthContext.h"
#include "RallyHereAPIHelpers.h"
#include "HTTPValidationError.h"
#include "HzApiErrorModel.h"
#include "SetSinglePlayerSettingRequest.h"
#include "SettingData.h"
#include "SettingType.h"
#include "SettingTypeVersion.h"

namespace RallyHereAPI
{
using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

struct FRequest_DeleteAllPlayerIdSettingsForSettingType;
struct FResponse_DeleteAllPlayerIdSettingsForSettingType;
struct FRequest_DeleteAllPlayerUuidSettingsForSettingType;
struct FResponse_DeleteAllPlayerUuidSettingsForSettingType;
struct FRequest_DeleteAllPlayerUuidSettingsForSettingTypeSelf;
struct FResponse_DeleteAllPlayerUuidSettingsForSettingTypeSelf;
struct FRequest_DeleteSinglePlayerIdSetting;
struct FResponse_DeleteSinglePlayerIdSetting;
struct FRequest_DeleteSinglePlayerUuidSetting;
struct FResponse_DeleteSinglePlayerUuidSetting;
struct FRequest_DeleteSinglePlayerUuidSettingSelf;
struct FResponse_DeleteSinglePlayerUuidSettingSelf;
struct FRequest_GetAllPlayerIdSettingsForSettingType;
struct FResponse_GetAllPlayerIdSettingsForSettingType;
struct FRequest_GetAllPlayerUuidSettingsForSettingType;
struct FResponse_GetAllPlayerUuidSettingsForSettingType;
struct FRequest_GetAllPlayerUuidSettingsForSettingTypeSelf;
struct FResponse_GetAllPlayerUuidSettingsForSettingTypeSelf;
struct FRequest_GetConfigForAllSettingTypes;
struct FResponse_GetConfigForAllSettingTypes;
struct FRequest_GetConfigForSingleSettingTypeAllVersions;
struct FResponse_GetConfigForSingleSettingTypeAllVersions;
struct FRequest_GetConfigForSingleSettingTypeAndVersion;
struct FResponse_GetConfigForSingleSettingTypeAndVersion;
struct FRequest_GetSinglePlayerIdSetting;
struct FResponse_GetSinglePlayerIdSetting;
struct FRequest_GetSinglePlayerUuidSetting;
struct FResponse_GetSinglePlayerUuidSetting;
struct FRequest_GetSinglePlayerUuidSettingSelf;
struct FResponse_GetSinglePlayerUuidSettingSelf;
struct FRequest_SetSinglePlayerIdSetting;
struct FResponse_SetSinglePlayerIdSetting;
struct FRequest_SetSinglePlayerUuidSetting;
struct FResponse_SetSinglePlayerUuidSetting;
struct FRequest_SetSinglePlayerUuidSettingSelf;
struct FResponse_SetSinglePlayerUuidSettingSelf;

DECLARE_DELEGATE_OneParam(FDelegate_DeleteAllPlayerIdSettingsForSettingType, const FResponse_DeleteAllPlayerIdSettingsForSettingType&);
DECLARE_DELEGATE_OneParam(FDelegate_DeleteAllPlayerUuidSettingsForSettingType, const FResponse_DeleteAllPlayerUuidSettingsForSettingType&);
DECLARE_DELEGATE_OneParam(FDelegate_DeleteAllPlayerUuidSettingsForSettingTypeSelf, const FResponse_DeleteAllPlayerUuidSettingsForSettingTypeSelf&);
DECLARE_DELEGATE_OneParam(FDelegate_DeleteSinglePlayerIdSetting, const FResponse_DeleteSinglePlayerIdSetting&);
DECLARE_DELEGATE_OneParam(FDelegate_DeleteSinglePlayerUuidSetting, const FResponse_DeleteSinglePlayerUuidSetting&);
DECLARE_DELEGATE_OneParam(FDelegate_DeleteSinglePlayerUuidSettingSelf, const FResponse_DeleteSinglePlayerUuidSettingSelf&);
DECLARE_DELEGATE_OneParam(FDelegate_GetAllPlayerIdSettingsForSettingType, const FResponse_GetAllPlayerIdSettingsForSettingType&);
DECLARE_DELEGATE_OneParam(FDelegate_GetAllPlayerUuidSettingsForSettingType, const FResponse_GetAllPlayerUuidSettingsForSettingType&);
DECLARE_DELEGATE_OneParam(FDelegate_GetAllPlayerUuidSettingsForSettingTypeSelf, const FResponse_GetAllPlayerUuidSettingsForSettingTypeSelf&);
DECLARE_DELEGATE_OneParam(FDelegate_GetConfigForAllSettingTypes, const FResponse_GetConfigForAllSettingTypes&);
DECLARE_DELEGATE_OneParam(FDelegate_GetConfigForSingleSettingTypeAllVersions, const FResponse_GetConfigForSingleSettingTypeAllVersions&);
DECLARE_DELEGATE_OneParam(FDelegate_GetConfigForSingleSettingTypeAndVersion, const FResponse_GetConfigForSingleSettingTypeAndVersion&);
DECLARE_DELEGATE_OneParam(FDelegate_GetSinglePlayerIdSetting, const FResponse_GetSinglePlayerIdSetting&);
DECLARE_DELEGATE_OneParam(FDelegate_GetSinglePlayerUuidSetting, const FResponse_GetSinglePlayerUuidSetting&);
DECLARE_DELEGATE_OneParam(FDelegate_GetSinglePlayerUuidSettingSelf, const FResponse_GetSinglePlayerUuidSettingSelf&);
DECLARE_DELEGATE_OneParam(FDelegate_SetSinglePlayerIdSetting, const FResponse_SetSinglePlayerIdSetting&);
DECLARE_DELEGATE_OneParam(FDelegate_SetSinglePlayerUuidSetting, const FResponse_SetSinglePlayerUuidSetting&);
DECLARE_DELEGATE_OneParam(FDelegate_SetSinglePlayerUuidSettingSelf, const FResponse_SetSinglePlayerUuidSettingSelf&);

class RALLYHEREAPI_API FSettingsAPI : public FAPI
{
public:
	FSettingsAPI();
	virtual ~FSettingsAPI();

	FHttpRequestPtr DeleteAllPlayerIdSettingsForSettingType(const FRequest_DeleteAllPlayerIdSettingsForSettingType& Request, const FDelegate_DeleteAllPlayerIdSettingsForSettingType& Delegate = FDelegate_DeleteAllPlayerIdSettingsForSettingType(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr DeleteAllPlayerUuidSettingsForSettingType(const FRequest_DeleteAllPlayerUuidSettingsForSettingType& Request, const FDelegate_DeleteAllPlayerUuidSettingsForSettingType& Delegate = FDelegate_DeleteAllPlayerUuidSettingsForSettingType(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr DeleteAllPlayerUuidSettingsForSettingTypeSelf(const FRequest_DeleteAllPlayerUuidSettingsForSettingTypeSelf& Request, const FDelegate_DeleteAllPlayerUuidSettingsForSettingTypeSelf& Delegate = FDelegate_DeleteAllPlayerUuidSettingsForSettingTypeSelf(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr DeleteSinglePlayerIdSetting(const FRequest_DeleteSinglePlayerIdSetting& Request, const FDelegate_DeleteSinglePlayerIdSetting& Delegate = FDelegate_DeleteSinglePlayerIdSetting(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr DeleteSinglePlayerUuidSetting(const FRequest_DeleteSinglePlayerUuidSetting& Request, const FDelegate_DeleteSinglePlayerUuidSetting& Delegate = FDelegate_DeleteSinglePlayerUuidSetting(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr DeleteSinglePlayerUuidSettingSelf(const FRequest_DeleteSinglePlayerUuidSettingSelf& Request, const FDelegate_DeleteSinglePlayerUuidSettingSelf& Delegate = FDelegate_DeleteSinglePlayerUuidSettingSelf(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetAllPlayerIdSettingsForSettingType(const FRequest_GetAllPlayerIdSettingsForSettingType& Request, const FDelegate_GetAllPlayerIdSettingsForSettingType& Delegate = FDelegate_GetAllPlayerIdSettingsForSettingType(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetAllPlayerUuidSettingsForSettingType(const FRequest_GetAllPlayerUuidSettingsForSettingType& Request, const FDelegate_GetAllPlayerUuidSettingsForSettingType& Delegate = FDelegate_GetAllPlayerUuidSettingsForSettingType(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetAllPlayerUuidSettingsForSettingTypeSelf(const FRequest_GetAllPlayerUuidSettingsForSettingTypeSelf& Request, const FDelegate_GetAllPlayerUuidSettingsForSettingTypeSelf& Delegate = FDelegate_GetAllPlayerUuidSettingsForSettingTypeSelf(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetConfigForAllSettingTypes(const FRequest_GetConfigForAllSettingTypes& Request, const FDelegate_GetConfigForAllSettingTypes& Delegate = FDelegate_GetConfigForAllSettingTypes(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetConfigForSingleSettingTypeAllVersions(const FRequest_GetConfigForSingleSettingTypeAllVersions& Request, const FDelegate_GetConfigForSingleSettingTypeAllVersions& Delegate = FDelegate_GetConfigForSingleSettingTypeAllVersions(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetConfigForSingleSettingTypeAndVersion(const FRequest_GetConfigForSingleSettingTypeAndVersion& Request, const FDelegate_GetConfigForSingleSettingTypeAndVersion& Delegate = FDelegate_GetConfigForSingleSettingTypeAndVersion(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetSinglePlayerIdSetting(const FRequest_GetSinglePlayerIdSetting& Request, const FDelegate_GetSinglePlayerIdSetting& Delegate = FDelegate_GetSinglePlayerIdSetting(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetSinglePlayerUuidSetting(const FRequest_GetSinglePlayerUuidSetting& Request, const FDelegate_GetSinglePlayerUuidSetting& Delegate = FDelegate_GetSinglePlayerUuidSetting(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetSinglePlayerUuidSettingSelf(const FRequest_GetSinglePlayerUuidSettingSelf& Request, const FDelegate_GetSinglePlayerUuidSettingSelf& Delegate = FDelegate_GetSinglePlayerUuidSettingSelf(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr SetSinglePlayerIdSetting(const FRequest_SetSinglePlayerIdSetting& Request, const FDelegate_SetSinglePlayerIdSetting& Delegate = FDelegate_SetSinglePlayerIdSetting(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr SetSinglePlayerUuidSetting(const FRequest_SetSinglePlayerUuidSetting& Request, const FDelegate_SetSinglePlayerUuidSetting& Delegate = FDelegate_SetSinglePlayerUuidSetting(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr SetSinglePlayerUuidSettingSelf(const FRequest_SetSinglePlayerUuidSettingSelf& Request, const FDelegate_SetSinglePlayerUuidSettingSelf& Delegate = FDelegate_SetSinglePlayerUuidSettingSelf(), int32 Priority = DefaultRallyHereAPIPriority);

private:
	void OnDeleteAllPlayerIdSettingsForSettingTypeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_DeleteAllPlayerIdSettingsForSettingType Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnDeleteAllPlayerUuidSettingsForSettingTypeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_DeleteAllPlayerUuidSettingsForSettingType Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnDeleteAllPlayerUuidSettingsForSettingTypeSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_DeleteAllPlayerUuidSettingsForSettingTypeSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnDeleteSinglePlayerIdSettingResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_DeleteSinglePlayerIdSetting Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnDeleteSinglePlayerUuidSettingResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_DeleteSinglePlayerUuidSetting Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnDeleteSinglePlayerUuidSettingSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_DeleteSinglePlayerUuidSettingSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetAllPlayerIdSettingsForSettingTypeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAllPlayerIdSettingsForSettingType Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetAllPlayerUuidSettingsForSettingTypeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAllPlayerUuidSettingsForSettingType Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetAllPlayerUuidSettingsForSettingTypeSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAllPlayerUuidSettingsForSettingTypeSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetConfigForAllSettingTypesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetConfigForAllSettingTypes Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetConfigForSingleSettingTypeAllVersionsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetConfigForSingleSettingTypeAllVersions Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetConfigForSingleSettingTypeAndVersionResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetConfigForSingleSettingTypeAndVersion Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetSinglePlayerIdSettingResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetSinglePlayerIdSetting Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetSinglePlayerUuidSettingResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetSinglePlayerUuidSetting Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetSinglePlayerUuidSettingSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetSinglePlayerUuidSettingSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnSetSinglePlayerIdSettingResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SetSinglePlayerIdSetting Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnSetSinglePlayerUuidSettingResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SetSinglePlayerUuidSetting Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnSetSinglePlayerUuidSettingSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SetSinglePlayerUuidSettingSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};

/* Delete All Player Id Settings For Setting Type
 *
 * Delete all player setting for a specific type
 * 
 * Required Permissions: `setting:write` for any player.  `setting:write:self` for the player of the access token.
 * 
 * **DEPRECATED** - Use v2 instead
*/
struct RALLYHEREAPI_API FRequest_DeleteAllPlayerIdSettingsForSettingType : public FRequest
{
	FRequest_DeleteAllPlayerIdSettingsForSettingType();
	virtual ~FRequest_DeleteAllPlayerIdSettingsForSettingType() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
	int32 PlayerId = 0;
	FString SettingTypeId;
};

struct RALLYHEREAPI_API FResponse_DeleteAllPlayerIdSettingsForSettingType : public FResponse
{
	FResponse_DeleteAllPlayerIdSettingsForSettingType(FRequestMetadata InRequestMetadata);
	virtual ~FResponse_DeleteAllPlayerIdSettingsForSettingType() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

	FRHAPI_JsonValue Content;


	// Manual Response Helpers
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_JsonValue& OutContent) const;

	/* Response 400
	 Error Codes: - `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator 
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	 Error Codes: - `setting_type_id_not_found` - The setting type ID was not found - `does_not_exist` - Setting Key(s) do not exist         
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_DeleteAllPlayerIdSettingsForSettingType
{
	typedef FRequest_DeleteAllPlayerIdSettingsForSettingType Request;
	typedef FResponse_DeleteAllPlayerIdSettingsForSettingType Response;
	typedef FDelegate_DeleteAllPlayerIdSettingsForSettingType Delegate;
	typedef FSettingsAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.DeleteAllPlayerIdSettingsForSettingType(InRequest, InDelegate, Priority); }
};

/* Delete All Player Uuid Settings For Setting Type
 *
 * Delete all player setting for a specific type
 * 
 * Required Permissions: `setting:write` for any player.  `setting:write:self` for the player of the access token.
*/
struct RALLYHEREAPI_API FRequest_DeleteAllPlayerUuidSettingsForSettingType : public FRequest
{
	FRequest_DeleteAllPlayerUuidSettingsForSettingType();
	virtual ~FRequest_DeleteAllPlayerUuidSettingsForSettingType() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
	/* Player to delete setting for */
	FGuid PlayerUuid;
	/* Setting Type to delete settings for.  Must be one of the known setting types */
	FString SettingTypeId;
};

struct RALLYHEREAPI_API FResponse_DeleteAllPlayerUuidSettingsForSettingType : public FResponse
{
	FResponse_DeleteAllPlayerUuidSettingsForSettingType(FRequestMetadata InRequestMetadata);
	virtual ~FResponse_DeleteAllPlayerUuidSettingsForSettingType() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

	FRHAPI_JsonValue Content;


	// Manual Response Helpers
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_JsonValue& OutContent) const;

	/* Response 400
	 Error Codes: - `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator 
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	 Error Codes: - `setting_type_id_not_found` - The setting type ID was not found - `does_not_exist` - Setting Key(s) do not exist         
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_DeleteAllPlayerUuidSettingsForSettingType
{
	typedef FRequest_DeleteAllPlayerUuidSettingsForSettingType Request;
	typedef FResponse_DeleteAllPlayerUuidSettingsForSettingType Response;
	typedef FDelegate_DeleteAllPlayerUuidSettingsForSettingType Delegate;
	typedef FSettingsAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.DeleteAllPlayerUuidSettingsForSettingType(InRequest, InDelegate, Priority); }
};

/* Delete All Player Uuid Settings For Setting Type Self
 *
 * Delete all player setting for a specific type
 * 
 * Required Permissions: `setting:write` or `setting:write:self`
*/
struct RALLYHEREAPI_API FRequest_DeleteAllPlayerUuidSettingsForSettingTypeSelf : public FRequest
{
	FRequest_DeleteAllPlayerUuidSettingsForSettingTypeSelf();
	virtual ~FRequest_DeleteAllPlayerUuidSettingsForSettingTypeSelf() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
	/* Setting Type to delete settings for.  Must be one of the known setting types */
	FString SettingTypeId;
};

struct RALLYHEREAPI_API FResponse_DeleteAllPlayerUuidSettingsForSettingTypeSelf : public FResponse
{
	FResponse_DeleteAllPlayerUuidSettingsForSettingTypeSelf(FRequestMetadata InRequestMetadata);
	virtual ~FResponse_DeleteAllPlayerUuidSettingsForSettingTypeSelf() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

	FRHAPI_JsonValue Content;


	// Manual Response Helpers
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_JsonValue& OutContent) const;

	/* Response 400
	 Error Codes: - `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator 
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	 Error Codes: - `setting_type_id_not_found` - The setting type ID was not found - `does_not_exist` - Setting Key(s) do not exist         
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_DeleteAllPlayerUuidSettingsForSettingTypeSelf
{
	typedef FRequest_DeleteAllPlayerUuidSettingsForSettingTypeSelf Request;
	typedef FResponse_DeleteAllPlayerUuidSettingsForSettingTypeSelf Response;
	typedef FDelegate_DeleteAllPlayerUuidSettingsForSettingTypeSelf Delegate;
	typedef FSettingsAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.DeleteAllPlayerUuidSettingsForSettingTypeSelf(InRequest, InDelegate, Priority); }
};

/* Delete Single Player Id Setting
 *
 * Delete a single player setting
 *     
 * Required Permissions: `setting:write` for any player.  `setting:write:self` for the player of the access token.
 *     
 * **DEPRECATED** - Use v2 instead
*/
struct RALLYHEREAPI_API FRequest_DeleteSinglePlayerIdSetting : public FRequest
{
	FRequest_DeleteSinglePlayerIdSetting();
	virtual ~FRequest_DeleteSinglePlayerIdSetting() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
	/* Player to delete setting for */
	int32 PlayerId = 0;
	/* Setting Type to delete settings for.  Must be one of the known setting types */
	FString SettingTypeId;
	/* Setting Key to delete setting for */
	FString Key;
};

struct RALLYHEREAPI_API FResponse_DeleteSinglePlayerIdSetting : public FResponse
{
	FResponse_DeleteSinglePlayerIdSetting(FRequestMetadata InRequestMetadata);
	virtual ~FResponse_DeleteSinglePlayerIdSetting() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

	FRHAPI_JsonValue Content;


	// Manual Response Helpers
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_JsonValue& OutContent) const;

	/* Response 400
	 Error Codes: - `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator 
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	 Error Codes: - `setting_type_id_not_found` - The setting type ID was not found - `does_not_exist` - Setting Key(s) do not exist         
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_DeleteSinglePlayerIdSetting
{
	typedef FRequest_DeleteSinglePlayerIdSetting Request;
	typedef FResponse_DeleteSinglePlayerIdSetting Response;
	typedef FDelegate_DeleteSinglePlayerIdSetting Delegate;
	typedef FSettingsAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.DeleteSinglePlayerIdSetting(InRequest, InDelegate, Priority); }
};

/* Delete Single Player Uuid Setting
 *
 * Delete a single player setting
 * 
 * Required Permissions: `setting:write` for any player.  `setting:write:self` for the player of the access token.
*/
struct RALLYHEREAPI_API FRequest_DeleteSinglePlayerUuidSetting : public FRequest
{
	FRequest_DeleteSinglePlayerUuidSetting();
	virtual ~FRequest_DeleteSinglePlayerUuidSetting() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
	/* Player to delete setting for */
	FGuid PlayerUuid;
	/* Setting Type to delete settings for.  Must be one of the known setting types */
	FString SettingTypeId;
	/* Setting Key to delete setting for */
	FString Key;
};

struct RALLYHEREAPI_API FResponse_DeleteSinglePlayerUuidSetting : public FResponse
{
	FResponse_DeleteSinglePlayerUuidSetting(FRequestMetadata InRequestMetadata);
	virtual ~FResponse_DeleteSinglePlayerUuidSetting() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

	FRHAPI_JsonValue Content;


	// Manual Response Helpers
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_JsonValue& OutContent) const;

	/* Response 400
	 Error Codes: - `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator 
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	 Error Codes: - `setting_type_id_not_found` - The setting type ID was not found - `does_not_exist` - Setting Key(s) do not exist         
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_DeleteSinglePlayerUuidSetting
{
	typedef FRequest_DeleteSinglePlayerUuidSetting Request;
	typedef FResponse_DeleteSinglePlayerUuidSetting Response;
	typedef FDelegate_DeleteSinglePlayerUuidSetting Delegate;
	typedef FSettingsAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.DeleteSinglePlayerUuidSetting(InRequest, InDelegate, Priority); }
};

/* Delete Single Player Uuid Setting Self
 *
 * Delete a single player setting
 * 
 * Required Permissions: `setting:write` or `setting:write:self`
*/
struct RALLYHEREAPI_API FRequest_DeleteSinglePlayerUuidSettingSelf : public FRequest
{
	FRequest_DeleteSinglePlayerUuidSettingSelf();
	virtual ~FRequest_DeleteSinglePlayerUuidSettingSelf() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
	/* Setting Type to delete settings for.  Must be one of the known setting types */
	FString SettingTypeId;
	/* Setting Key to delete setting for */
	FString Key;
};

struct RALLYHEREAPI_API FResponse_DeleteSinglePlayerUuidSettingSelf : public FResponse
{
	FResponse_DeleteSinglePlayerUuidSettingSelf(FRequestMetadata InRequestMetadata);
	virtual ~FResponse_DeleteSinglePlayerUuidSettingSelf() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

	FRHAPI_JsonValue Content;


	// Manual Response Helpers
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_JsonValue& OutContent) const;

	/* Response 400
	 Error Codes: - `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator 
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	 Error Codes: - `setting_type_id_not_found` - The setting type ID was not found - `does_not_exist` - Setting Key(s) do not exist         
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_DeleteSinglePlayerUuidSettingSelf
{
	typedef FRequest_DeleteSinglePlayerUuidSettingSelf Request;
	typedef FResponse_DeleteSinglePlayerUuidSettingSelf Response;
	typedef FDelegate_DeleteSinglePlayerUuidSettingSelf Delegate;
	typedef FSettingsAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.DeleteSinglePlayerUuidSettingSelf(InRequest, InDelegate, Priority); }
};

/* Get All Player Id Settings For Setting Type
 *
 * Get a list of all player settings for a specific Setting Type.
 * 
 * Required Permissions: `setting:read` for any player.  `setting:read:self` for the player of the access token.
 * 
 * **DEPRECATED** - Use v2 instead
*/
struct RALLYHEREAPI_API FRequest_GetAllPlayerIdSettingsForSettingType : public FRequest
{
	FRequest_GetAllPlayerIdSettingsForSettingType();
	virtual ~FRequest_GetAllPlayerIdSettingsForSettingType() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
	/* Player to get settings for */
	int32 PlayerId = 0;
	/* Setting Type to get settings for. Must be one of the known setting types */
	FString SettingTypeId;
	/* Setting Key to get settings for. If not specified, all settings for the setting type will be returned */
	TOptional<TArray<FString>> Key;
};

struct RALLYHEREAPI_API FResponse_GetAllPlayerIdSettingsForSettingType : public FResponse
{
	FResponse_GetAllPlayerIdSettingsForSettingType(FRequestMetadata InRequestMetadata);
	virtual ~FResponse_GetAllPlayerIdSettingsForSettingType() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

	TMap<FString, FRHAPI_SettingData> Content;


	// Manual Response Helpers
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(TMap<FString, FRHAPI_SettingData>& OutContent) const;

	/* Response 400
	 Error Codes: - `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator 
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	 Error Codes: - `setting_type_id_not_found` - The setting type ID was not found         
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_GetAllPlayerIdSettingsForSettingType
{
	typedef FRequest_GetAllPlayerIdSettingsForSettingType Request;
	typedef FResponse_GetAllPlayerIdSettingsForSettingType Response;
	typedef FDelegate_GetAllPlayerIdSettingsForSettingType Delegate;
	typedef FSettingsAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.GetAllPlayerIdSettingsForSettingType(InRequest, InDelegate, Priority); }
};

/* Get All Player Uuid Settings For Setting Type
 *
 * Get a list of all player settings for a specific Setting Type
 * 
 * Required Permissions: `setting:read` for any player.  `setting:read:self` for the player of the access token.
*/
struct RALLYHEREAPI_API FRequest_GetAllPlayerUuidSettingsForSettingType : public FRequest
{
	FRequest_GetAllPlayerUuidSettingsForSettingType();
	virtual ~FRequest_GetAllPlayerUuidSettingsForSettingType() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
	/* Player to get settings for */
	FGuid PlayerUuid;
	/* Setting Type to get settings for. Must be one of the known setting types */
	FString SettingTypeId;
	/* Setting Key to get settings for. If not specified, all settings for the setting type will be returned */
	TOptional<TArray<FString>> Key;
};

struct RALLYHEREAPI_API FResponse_GetAllPlayerUuidSettingsForSettingType : public FResponse
{
	FResponse_GetAllPlayerUuidSettingsForSettingType(FRequestMetadata InRequestMetadata);
	virtual ~FResponse_GetAllPlayerUuidSettingsForSettingType() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

	TMap<FString, FRHAPI_SettingData> Content;


	// Manual Response Helpers
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(TMap<FString, FRHAPI_SettingData>& OutContent) const;

	/* Response 400
	 Error Codes: - `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator 
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	 Error Codes: - `setting_type_id_not_found` - The setting type ID was not found         
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_GetAllPlayerUuidSettingsForSettingType
{
	typedef FRequest_GetAllPlayerUuidSettingsForSettingType Request;
	typedef FResponse_GetAllPlayerUuidSettingsForSettingType Response;
	typedef FDelegate_GetAllPlayerUuidSettingsForSettingType Delegate;
	typedef FSettingsAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.GetAllPlayerUuidSettingsForSettingType(InRequest, InDelegate, Priority); }
};

/* Get All Player Uuid Settings For Setting Type Self
 *
 * Get a list of all player settings for a specific Setting Type
 * 
 * Required Permissions: `setting:read` or `setting:read:self`
*/
struct RALLYHEREAPI_API FRequest_GetAllPlayerUuidSettingsForSettingTypeSelf : public FRequest
{
	FRequest_GetAllPlayerUuidSettingsForSettingTypeSelf();
	virtual ~FRequest_GetAllPlayerUuidSettingsForSettingTypeSelf() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
	/* Setting Type to get settings for. Must be one of the known setting types */
	FString SettingTypeId;
	/* Setting Key to get settings for. If not specified, all settings for the setting type will be returned */
	TOptional<TArray<FString>> Key;
};

struct RALLYHEREAPI_API FResponse_GetAllPlayerUuidSettingsForSettingTypeSelf : public FResponse
{
	FResponse_GetAllPlayerUuidSettingsForSettingTypeSelf(FRequestMetadata InRequestMetadata);
	virtual ~FResponse_GetAllPlayerUuidSettingsForSettingTypeSelf() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

	TMap<FString, FRHAPI_SettingData> Content;


	// Manual Response Helpers
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(TMap<FString, FRHAPI_SettingData>& OutContent) const;

	/* Response 400
	 Error Codes: - `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator 
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	 Error Codes: - `setting_type_id_not_found` - The setting type ID was not found         
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_GetAllPlayerUuidSettingsForSettingTypeSelf
{
	typedef FRequest_GetAllPlayerUuidSettingsForSettingTypeSelf Request;
	typedef FResponse_GetAllPlayerUuidSettingsForSettingTypeSelf Response;
	typedef FDelegate_GetAllPlayerUuidSettingsForSettingTypeSelf Delegate;
	typedef FSettingsAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.GetAllPlayerUuidSettingsForSettingTypeSelf(InRequest, InDelegate, Priority); }
};

/* Get Config For All Setting Types
 *
 * Get all setting types and their configuration.
 *     
 * Required Permissions: `setting-config:read`
*/
struct RALLYHEREAPI_API FRequest_GetConfigForAllSettingTypes : public FRequest
{
	FRequest_GetConfigForAllSettingTypes();
	virtual ~FRequest_GetConfigForAllSettingTypes() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
};

struct RALLYHEREAPI_API FResponse_GetConfigForAllSettingTypes : public FResponse
{
	FResponse_GetConfigForAllSettingTypes(FRequestMetadata InRequestMetadata);
	virtual ~FResponse_GetConfigForAllSettingTypes() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

	TMap<FString, FRHAPI_SettingType> Content;


	// Manual Response Helpers
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(TMap<FString, FRHAPI_SettingType>& OutContent) const;

};

struct RALLYHEREAPI_API Traits_GetConfigForAllSettingTypes
{
	typedef FRequest_GetConfigForAllSettingTypes Request;
	typedef FResponse_GetConfigForAllSettingTypes Response;
	typedef FDelegate_GetConfigForAllSettingTypes Delegate;
	typedef FSettingsAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.GetConfigForAllSettingTypes(InRequest, InDelegate, Priority); }
};

/* Get Config For Single Setting Type All Versions
 *
 * Get a configuration and all versions for a given setting type ID.
 *     
 * Required Permissions: `setting-config:read`
*/
struct RALLYHEREAPI_API FRequest_GetConfigForSingleSettingTypeAllVersions : public FRequest
{
	FRequest_GetConfigForSingleSettingTypeAllVersions();
	virtual ~FRequest_GetConfigForSingleSettingTypeAllVersions() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
	FString SettingTypeId;
};

struct RALLYHEREAPI_API FResponse_GetConfigForSingleSettingTypeAllVersions : public FResponse
{
	FResponse_GetConfigForSingleSettingTypeAllVersions(FRequestMetadata InRequestMetadata);
	virtual ~FResponse_GetConfigForSingleSettingTypeAllVersions() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

	TMap<FString, FRHAPI_SettingTypeVersion> Content;


	// Manual Response Helpers
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(TMap<FString, FRHAPI_SettingTypeVersion>& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	 Error Codes: - `setting_type_id_not_found` - The setting type ID was not found         
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_GetConfigForSingleSettingTypeAllVersions
{
	typedef FRequest_GetConfigForSingleSettingTypeAllVersions Request;
	typedef FResponse_GetConfigForSingleSettingTypeAllVersions Response;
	typedef FDelegate_GetConfigForSingleSettingTypeAllVersions Delegate;
	typedef FSettingsAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.GetConfigForSingleSettingTypeAllVersions(InRequest, InDelegate, Priority); }
};

/* Get Config For Single Setting Type And Version
 *
 * Get a specific version of a specific setting type.
*/
struct RALLYHEREAPI_API FRequest_GetConfigForSingleSettingTypeAndVersion : public FRequest
{
	FRequest_GetConfigForSingleSettingTypeAndVersion();
	virtual ~FRequest_GetConfigForSingleSettingTypeAndVersion() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
	FString SettingTypeId;
	int32 SettingVersionId = 0;
};

struct RALLYHEREAPI_API FResponse_GetConfigForSingleSettingTypeAndVersion : public FResponse
{
	FResponse_GetConfigForSingleSettingTypeAndVersion(FRequestMetadata InRequestMetadata);
	virtual ~FResponse_GetConfigForSingleSettingTypeAndVersion() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

	FRHAPI_SettingTypeVersion Content;


	// Manual Response Helpers
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_SettingTypeVersion& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	 Error Codes: - `setting_type_id_not_found` - The setting type ID was not found - `setting_version_id_not_found` - The setting Version was not found for that type         
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_GetConfigForSingleSettingTypeAndVersion
{
	typedef FRequest_GetConfigForSingleSettingTypeAndVersion Request;
	typedef FResponse_GetConfigForSingleSettingTypeAndVersion Response;
	typedef FDelegate_GetConfigForSingleSettingTypeAndVersion Delegate;
	typedef FSettingsAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.GetConfigForSingleSettingTypeAndVersion(InRequest, InDelegate, Priority); }
};

/* Get Single Player Id Setting
 *
 * Get a single player setting
 * 
 * Required Permissions: `setting:read` for any player.  `setting:read:self` for the player of the access token.
 * 
 * **DEPRECATED** - Use v2 instead
*/
struct RALLYHEREAPI_API FRequest_GetSinglePlayerIdSetting : public FRequest
{
	FRequest_GetSinglePlayerIdSetting();
	virtual ~FRequest_GetSinglePlayerIdSetting() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
	/* Player to get settings for */
	int32 PlayerId = 0;
	/* Setting Type to get settings for. Must be one of the known setting types */
	FString SettingTypeId;
	/* Setting Key to get settings for */
	FString Key;
};

struct RALLYHEREAPI_API FResponse_GetSinglePlayerIdSetting : public FResponse
{
	FResponse_GetSinglePlayerIdSetting(FRequestMetadata InRequestMetadata);
	virtual ~FResponse_GetSinglePlayerIdSetting() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

	FRHAPI_SettingData Content;


	// Manual Response Helpers
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_SettingData& OutContent) const;

	/* Response 400
	 Error Codes: - `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator 
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	 Error Codes: - `setting_type_id_not_found` - The setting type ID was not found - `not_found` - The setting key was not found         
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_GetSinglePlayerIdSetting
{
	typedef FRequest_GetSinglePlayerIdSetting Request;
	typedef FResponse_GetSinglePlayerIdSetting Response;
	typedef FDelegate_GetSinglePlayerIdSetting Delegate;
	typedef FSettingsAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.GetSinglePlayerIdSetting(InRequest, InDelegate, Priority); }
};

/* Get Single Player Uuid Setting
 *
 * Get a single player setting
 * 
 * Required Permissions: `setting:read` for any player.  `setting:read:self` for the player of the access token.
*/
struct RALLYHEREAPI_API FRequest_GetSinglePlayerUuidSetting : public FRequest
{
	FRequest_GetSinglePlayerUuidSetting();
	virtual ~FRequest_GetSinglePlayerUuidSetting() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
	/* Player to get settings for */
	FGuid PlayerUuid;
	/* Setting Type to get settings for. Must be one of the known setting types */
	FString SettingTypeId;
	/* Setting Key to get settings for */
	FString Key;
};

struct RALLYHEREAPI_API FResponse_GetSinglePlayerUuidSetting : public FResponse
{
	FResponse_GetSinglePlayerUuidSetting(FRequestMetadata InRequestMetadata);
	virtual ~FResponse_GetSinglePlayerUuidSetting() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

	FRHAPI_SettingData Content;


	// Manual Response Helpers
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_SettingData& OutContent) const;

	/* Response 400
	 Error Codes: - `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator 
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	 Error Codes: - `setting_type_id_not_found` - The setting type ID was not found - `not_found` - The setting key was not found         
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_GetSinglePlayerUuidSetting
{
	typedef FRequest_GetSinglePlayerUuidSetting Request;
	typedef FResponse_GetSinglePlayerUuidSetting Response;
	typedef FDelegate_GetSinglePlayerUuidSetting Delegate;
	typedef FSettingsAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.GetSinglePlayerUuidSetting(InRequest, InDelegate, Priority); }
};

/* Get Single Player Uuid Setting Self
 *
 * Get a single player setting
 * 
 * Required Permissions: `setting:read` or `setting:read:self`
*/
struct RALLYHEREAPI_API FRequest_GetSinglePlayerUuidSettingSelf : public FRequest
{
	FRequest_GetSinglePlayerUuidSettingSelf();
	virtual ~FRequest_GetSinglePlayerUuidSettingSelf() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
	/* Setting Type to get settings for. Must be one of the known setting types */
	FString SettingTypeId;
	/* Setting Key to get settings for */
	FString Key;
};

struct RALLYHEREAPI_API FResponse_GetSinglePlayerUuidSettingSelf : public FResponse
{
	FResponse_GetSinglePlayerUuidSettingSelf(FRequestMetadata InRequestMetadata);
	virtual ~FResponse_GetSinglePlayerUuidSettingSelf() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

	FRHAPI_SettingData Content;


	// Manual Response Helpers
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_SettingData& OutContent) const;

	/* Response 400
	 Error Codes: - `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator 
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	 Error Codes: - `setting_type_id_not_found` - The setting type ID was not found - `not_found` - The setting key was not found         
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_GetSinglePlayerUuidSettingSelf
{
	typedef FRequest_GetSinglePlayerUuidSettingSelf Request;
	typedef FResponse_GetSinglePlayerUuidSettingSelf Response;
	typedef FDelegate_GetSinglePlayerUuidSettingSelf Delegate;
	typedef FSettingsAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.GetSinglePlayerUuidSettingSelf(InRequest, InDelegate, Priority); }
};

/* Set Single Player Id Setting
 *
 * Update the value of a single player setting.
 * 
 * Required Permissions: `setting:write` for any player.  `setting:write:self` for the player of the access token.
 * 
 * If Legacy types are enabled, to maintain compatibility with legacy applications, the following settings have special-case handling:
 * * Setting Type `case` - Version `1` - key `create` - creates a new case set and returns the new key and data in the response. 
 * * Setting Type `case` - Version `1` - key is integer - Modify an existing case set.  If it does not exist, a 404 response with the `does_not_exist` error code. 
 * * Setting Type `loadout` - Version `1` - key `create` - creates a new loadout and returns the new key and data in the response.  All items keys will be given a new key 
 * * Setting Type `loadout` - Version `1` - key is integer - Modify an existing loadout.  If it does not exist, a 404 response with the `does_not_exist` error code.  When modifying loadout items, item keys that convert into integers/longs are treated as updates (and will error the update if they are not valid), all others are treated as creates and will be given a new key. 
 * 
 * **DEPRECATED** - Use the v2 endpoint instead.  This endpoint will be removed in a future release.
*/
struct RALLYHEREAPI_API FRequest_SetSinglePlayerIdSetting : public FRequest
{
	FRequest_SetSinglePlayerIdSetting();
	virtual ~FRequest_SetSinglePlayerIdSetting() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
	/* Player to update setting for */
	int32 PlayerId = 0;
	/* Setting Type to update settings for. Must be one of the known setting types */
	FString SettingTypeId;
	/* Setting Key to update setting for.  Must conform to the setting type key format */
	FString Key;
	FRHAPI_SetSinglePlayerSettingRequest SetSinglePlayerSettingRequest;
};

struct RALLYHEREAPI_API FResponse_SetSinglePlayerIdSetting : public FResponse
{
	FResponse_SetSinglePlayerIdSetting(FRequestMetadata InRequestMetadata);
	virtual ~FResponse_SetSinglePlayerIdSetting() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

	TMap<FString, FRHAPI_SettingData> Content;


	// Manual Response Helpers
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(TMap<FString, FRHAPI_SettingData>& OutContent) const;

	/* Response 400
	 Error Codes: - `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator - `setting_version_invalid` - Setting Version is not valid for the provided type - `update_not_enabled` - Setting Type Version has updates disabled - `setting_key_invalid` - Setting Key does not meet requirements for that type/version - `setting_value_invalid` - Setting value failed validation against the jsonschema defined for the type/version.  See response description for more details 
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	 Error Codes: - `setting_type_id_not_found` - The setting type ID was not found - `does_not_exist` - Setting Key(s) do not exist - This will only occur for legacy setting types.         
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

	/* Response 500
	 Error Codes: - `setting_type_version_schema_invalid` - Setting type/version jsonschema is invalid and could not be used to validate the setting value.  See response description for more details.         
	*/
	bool TryGetContentFor500(FRHAPI_HzApiErrorModel& OutContent) const;

};

struct RALLYHEREAPI_API Traits_SetSinglePlayerIdSetting
{
	typedef FRequest_SetSinglePlayerIdSetting Request;
	typedef FResponse_SetSinglePlayerIdSetting Response;
	typedef FDelegate_SetSinglePlayerIdSetting Delegate;
	typedef FSettingsAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.SetSinglePlayerIdSetting(InRequest, InDelegate, Priority); }
};

/* Set Single Player Uuid Setting
 *
 * Update the value of a single player setting.
 *     
 * Required Permissions: `setting:write` for any player.  `setting:write:self` for the player of the access token.
 * 
 * If Legacy types are enabled, to maintain compatibility with legacy applications, the following settings have special-case handling:
 * * Setting Type `case` - Version `1` - key `create` - creates a new case set and returns the new key and data in the response. 
 * * Setting Type `case` - Version `1` - key is integer - Modify an existing case set.  If it does not exist, a 404 response with the `does_not_exist` error code. 
 * * Setting Type `loadout` - Version `1` - key `create` - creates a new loadout and returns the new key and data in the response.  All items keys will be given a new key 
 * * Setting Type `loadout` - Version `1` - key is integer - Modify an existing loadout.  If it does not exist, a 404 response with the `does_not_exist` error code.  When modifying loadout items, item keys that convert into integers/longs are treated as updates (and will error the update if they are not valid), all others are treated as creates and will be given a new key.
*/
struct RALLYHEREAPI_API FRequest_SetSinglePlayerUuidSetting : public FRequest
{
	FRequest_SetSinglePlayerUuidSetting();
	virtual ~FRequest_SetSinglePlayerUuidSetting() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
	/* Player to update setting for */
	FGuid PlayerUuid;
	/* Setting Type to update settings for. Must be one of the known setting types */
	FString SettingTypeId;
	/* Setting Key to update setting for.  Must conform to the setting type key format */
	FString Key;
	FRHAPI_SetSinglePlayerSettingRequest SetSinglePlayerSettingRequest;
};

struct RALLYHEREAPI_API FResponse_SetSinglePlayerUuidSetting : public FResponse
{
	FResponse_SetSinglePlayerUuidSetting(FRequestMetadata InRequestMetadata);
	virtual ~FResponse_SetSinglePlayerUuidSetting() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

	TMap<FString, FRHAPI_SettingData> Content;


	// Manual Response Helpers
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(TMap<FString, FRHAPI_SettingData>& OutContent) const;

	/* Response 400
	 Error Codes: - `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator - `setting_version_invalid` - Setting Version is not valid for the provided type - `update_not_enabled` - Setting Type Version has updates disabled - `setting_key_invalid` - Setting Key does not meet requirements for that type/version - `setting_value_invalid` - Setting value failed validation against the jsonschema defined for the type/version.  See response description for more details 
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	 Error Codes: - `setting_type_id_not_found` - The setting type ID was not found - `does_not_exist` - Setting Key(s) do not exist - This will only occur for legacy setting types.         
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

	/* Response 500
	 Error Codes: - `setting_type_version_schema_invalid` - Setting type/version jsonschema is invalid and could not be used to validate the setting value.  See response description for more details.         
	*/
	bool TryGetContentFor500(FRHAPI_HzApiErrorModel& OutContent) const;

};

struct RALLYHEREAPI_API Traits_SetSinglePlayerUuidSetting
{
	typedef FRequest_SetSinglePlayerUuidSetting Request;
	typedef FResponse_SetSinglePlayerUuidSetting Response;
	typedef FDelegate_SetSinglePlayerUuidSetting Delegate;
	typedef FSettingsAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.SetSinglePlayerUuidSetting(InRequest, InDelegate, Priority); }
};

/* Set Single Player Uuid Setting Self
 *
 * Update the value of a single player setting.
 *     
 * Required Permissions: `setting:write` or `setting:write:self`
 * 
 * If Legacy types are enabled, to maintain compatibility with legacy applications, the following settings have special-case handling:
 * * Setting Type `case` - Version `1` - key `create` - creates a new case set and returns the new key and data in the response. 
 * * Setting Type `case` - Version `1` - key is integer - Modify an existing case set.  If it does not exist, a 404 response with the `does_not_exist` error code. 
 * * Setting Type `loadout` - Version `1` - key `create` - creates a new loadout and returns the new key and data in the response.  All items keys will be given a new key 
 * * Setting Type `loadout` - Version `1` - key is integer - Modify an existing loadout.  If it does not exist, a 404 response with the `does_not_exist` error code.  When modifying loadout items, item keys that convert into integers/longs are treated as updates (and will error the update if they are not valid), all others are treated as creates and will be given a new key.
*/
struct RALLYHEREAPI_API FRequest_SetSinglePlayerUuidSettingSelf : public FRequest
{
	FRequest_SetSinglePlayerUuidSettingSelf();
	virtual ~FRequest_SetSinglePlayerUuidSettingSelf() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
	/* Setting Type to update settings for. Must be one of the known setting types */
	FString SettingTypeId;
	/* Setting Key to update setting for.  Must conform to the setting type key format */
	FString Key;
	FRHAPI_SetSinglePlayerSettingRequest SetSinglePlayerSettingRequest;
};

struct RALLYHEREAPI_API FResponse_SetSinglePlayerUuidSettingSelf : public FResponse
{
	FResponse_SetSinglePlayerUuidSettingSelf(FRequestMetadata InRequestMetadata);
	virtual ~FResponse_SetSinglePlayerUuidSettingSelf() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

	TMap<FString, FRHAPI_SettingData> Content;


	// Manual Response Helpers
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(TMap<FString, FRHAPI_SettingData>& OutContent) const;

	/* Response 400
	 Error Codes: - `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator - `setting_version_invalid` - Setting Version is not valid for the provided type - `update_not_enabled` - Setting Type Version has updates disabled - `setting_key_invalid` - Setting Key does not meet requirements for that type/version - `setting_value_invalid` - Setting value failed validation against the jsonschema defined for the type/version.  See response description for more details 
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	 Error Codes: - `setting_type_id_not_found` - The setting type ID was not found - `does_not_exist` - Setting Key(s) do not exist - This will only occur for legacy setting types.         
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

	/* Response 500
	 Error Codes: - `setting_type_version_schema_invalid` - Setting type/version jsonschema is invalid and could not be used to validate the setting value.  See response description for more details.         
	*/
	bool TryGetContentFor500(FRHAPI_HzApiErrorModel& OutContent) const;

};

struct RALLYHEREAPI_API Traits_SetSinglePlayerUuidSettingSelf
{
	typedef FRequest_SetSinglePlayerUuidSettingSelf Request;
	typedef FResponse_SetSinglePlayerUuidSettingSelf Response;
	typedef FDelegate_SetSinglePlayerUuidSettingSelf Delegate;
	typedef FSettingsAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.SetSinglePlayerUuidSettingSelf(InRequest, InDelegate, Priority); }
};


}
