// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereAPIAuthContext.h"
#include "RallyHereAPIHelpers.h"
#include "HTTPValidationError.h"
#include "HzApiErrorModel.h"
#include "SetSinglePlayerSettingRequest.h"
#include "SettingData.h"
#include "SettingType.h"
#include "SettingTypeVersion.h"

namespace RallyHereAPI
{
using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

// forward declaration
class FSettingsAPI;

/**
 * @brief Delete All Player Id Settings For Setting Type
 * **DEPRECATED** - Use v2 instead. Delete all player setting documents for a specific type
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `setting:*:*`, `setting:write`
 * 
 * - For the player themselves : `setting:write:self`
*/
struct RALLYHEREAPI_API FRequest_DeleteAllPlayerIdSettingsForSettingType : public FRequest
{
	FRequest_DeleteAllPlayerIdSettingsForSettingType();
	virtual ~FRequest_DeleteAllPlayerIdSettingsForSettingType() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	int32 PlayerId = 0;
	FString SettingTypeId;
	/* Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.  See https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information */
	TOptional<FString> IfMatch;
	/* Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.    See https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information */
	TOptional<FString> IfNoneMatch;
	/* Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.  See https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information */
	TOptional<FString> IfUnmodifiedSince;
};

/** The response type for FRequest_DeleteAllPlayerIdSettingsForSettingType */
struct RALLYHEREAPI_API FResponse_DeleteAllPlayerIdSettingsForSettingType : public FResponseAccessorTemplate<FRHAPI_JsonValue, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_JsonValue, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_DeleteAllPlayerIdSettingsForSettingType(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_DeleteAllPlayerIdSettingsForSettingType() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_JsonValue Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_JsonValue& OutContent) const { return TryGetContent<FRHAPI_JsonValue>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_JsonValue>& OutContent) const { return TryGetContent<FRHAPI_JsonValue>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_JsonValue* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_JsonValue>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_JsonValue> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_JsonValue>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_JsonValue& OutContent) const;

	/* Response 400
	 Error Codes: - `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator 
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	 Error Codes: - `setting_type_id_not_found` - The setting type ID was not found - `does_not_exist` - Setting Key(s) do not exist         
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 412
	The resource does not meet the provided preconditions.
	*/

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_DeleteAllPlayerIdSettingsForSettingType */
DECLARE_DELEGATE_OneParam(FDelegate_DeleteAllPlayerIdSettingsForSettingType, const FResponse_DeleteAllPlayerIdSettingsForSettingType&);

/** @brief A helper metadata object for DeleteAllPlayerIdSettingsForSettingType that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_DeleteAllPlayerIdSettingsForSettingType
{
	/** The request type */
	typedef FRequest_DeleteAllPlayerIdSettingsForSettingType Request;
	/** The response type */
	typedef FResponse_DeleteAllPlayerIdSettingsForSettingType Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_DeleteAllPlayerIdSettingsForSettingType Delegate;
	/** The API object that supports this API call */
	typedef FSettingsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Delete All Player Uuid Settings For Setting Type
 * Delete all player setting documents for a specific type
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `setting:*:*`, `setting:write`
 * 
 * - For the player themselves : `setting:write:self`
*/
struct RALLYHEREAPI_API FRequest_DeleteAllPlayerUuidSettingsForSettingType : public FRequest
{
	FRequest_DeleteAllPlayerUuidSettingsForSettingType();
	virtual ~FRequest_DeleteAllPlayerUuidSettingsForSettingType() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	/* Player to delete setting for */
	FGuid PlayerUuid;
	/* Setting Type to delete settings for.  Must be one of the known setting types */
	FString SettingTypeId;
	/* Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.  See https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information */
	TOptional<FString> IfMatch;
	/* Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.    See https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information */
	TOptional<FString> IfNoneMatch;
	/* Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.  See https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information */
	TOptional<FString> IfUnmodifiedSince;
};

/** The response type for FRequest_DeleteAllPlayerUuidSettingsForSettingType */
struct RALLYHEREAPI_API FResponse_DeleteAllPlayerUuidSettingsForSettingType : public FResponseAccessorTemplate<FRHAPI_JsonValue, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_JsonValue, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_DeleteAllPlayerUuidSettingsForSettingType(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_DeleteAllPlayerUuidSettingsForSettingType() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_JsonValue Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_JsonValue& OutContent) const { return TryGetContent<FRHAPI_JsonValue>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_JsonValue>& OutContent) const { return TryGetContent<FRHAPI_JsonValue>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_JsonValue* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_JsonValue>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_JsonValue> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_JsonValue>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_JsonValue& OutContent) const;

	/* Response 400
	 Error Codes: - `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator 
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	 Error Codes: - `setting_type_id_not_found` - The setting type ID was not found - `does_not_exist` - Setting Key(s) do not exist         
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 412
	The resource does not meet the provided preconditions.
	*/

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_DeleteAllPlayerUuidSettingsForSettingType */
DECLARE_DELEGATE_OneParam(FDelegate_DeleteAllPlayerUuidSettingsForSettingType, const FResponse_DeleteAllPlayerUuidSettingsForSettingType&);

/** @brief A helper metadata object for DeleteAllPlayerUuidSettingsForSettingType that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_DeleteAllPlayerUuidSettingsForSettingType
{
	/** The request type */
	typedef FRequest_DeleteAllPlayerUuidSettingsForSettingType Request;
	/** The response type */
	typedef FResponse_DeleteAllPlayerUuidSettingsForSettingType Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_DeleteAllPlayerUuidSettingsForSettingType Delegate;
	/** The API object that supports this API call */
	typedef FSettingsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Delete All Player Uuid Settings For Setting Type Self
 * Delete all player setting documents for a specific type
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `setting:*:*`, `setting:write`
 * 
 * - For the player themselves : `setting:write:self`
*/
struct RALLYHEREAPI_API FRequest_DeleteAllPlayerUuidSettingsForSettingTypeSelf : public FRequest
{
	FRequest_DeleteAllPlayerUuidSettingsForSettingTypeSelf();
	virtual ~FRequest_DeleteAllPlayerUuidSettingsForSettingTypeSelf() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	/* Setting Type to delete settings for.  Must be one of the known setting types */
	FString SettingTypeId;
	/* Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.  See https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information */
	TOptional<FString> IfMatch;
	/* Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.    See https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information */
	TOptional<FString> IfNoneMatch;
	/* Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.  See https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information */
	TOptional<FString> IfUnmodifiedSince;
};

/** The response type for FRequest_DeleteAllPlayerUuidSettingsForSettingTypeSelf */
struct RALLYHEREAPI_API FResponse_DeleteAllPlayerUuidSettingsForSettingTypeSelf : public FResponseAccessorTemplate<FRHAPI_JsonValue, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_JsonValue, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_DeleteAllPlayerUuidSettingsForSettingTypeSelf(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_DeleteAllPlayerUuidSettingsForSettingTypeSelf() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_JsonValue Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_JsonValue& OutContent) const { return TryGetContent<FRHAPI_JsonValue>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_JsonValue>& OutContent) const { return TryGetContent<FRHAPI_JsonValue>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_JsonValue* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_JsonValue>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_JsonValue> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_JsonValue>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_JsonValue& OutContent) const;

	/* Response 400
	 Error Codes: - `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator 
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	 Error Codes: - `setting_type_id_not_found` - The setting type ID was not found - `does_not_exist` - Setting Key(s) do not exist         
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 412
	The resource does not meet the provided preconditions.
	*/

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_DeleteAllPlayerUuidSettingsForSettingTypeSelf */
DECLARE_DELEGATE_OneParam(FDelegate_DeleteAllPlayerUuidSettingsForSettingTypeSelf, const FResponse_DeleteAllPlayerUuidSettingsForSettingTypeSelf&);

/** @brief A helper metadata object for DeleteAllPlayerUuidSettingsForSettingTypeSelf that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_DeleteAllPlayerUuidSettingsForSettingTypeSelf
{
	/** The request type */
	typedef FRequest_DeleteAllPlayerUuidSettingsForSettingTypeSelf Request;
	/** The response type */
	typedef FResponse_DeleteAllPlayerUuidSettingsForSettingTypeSelf Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_DeleteAllPlayerUuidSettingsForSettingTypeSelf Delegate;
	/** The API object that supports this API call */
	typedef FSettingsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Delete Single Player Id Setting
 * **DEPRECATED** - Use v2 instead. Delete a single player setting document
 *     
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `setting:*:*`, `setting:write`
 * 
 * - For the player themselves : `setting:write:self`
*/
struct RALLYHEREAPI_API FRequest_DeleteSinglePlayerIdSetting : public FRequest
{
	FRequest_DeleteSinglePlayerIdSetting();
	virtual ~FRequest_DeleteSinglePlayerIdSetting() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	/* Player to delete setting for */
	int32 PlayerId = 0;
	/* Setting Type to delete settings for.  Must be one of the known setting types */
	FString SettingTypeId;
	/* Setting Key to delete setting for */
	FString Key;
	/* Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.  See https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information */
	TOptional<FString> IfMatch;
	/* Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.    See https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information */
	TOptional<FString> IfNoneMatch;
	/* Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.  See https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information */
	TOptional<FString> IfUnmodifiedSince;
};

/** The response type for FRequest_DeleteSinglePlayerIdSetting */
struct RALLYHEREAPI_API FResponse_DeleteSinglePlayerIdSetting : public FResponseAccessorTemplate<FRHAPI_JsonValue, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_JsonValue, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_DeleteSinglePlayerIdSetting(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_DeleteSinglePlayerIdSetting() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_JsonValue Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_JsonValue& OutContent) const { return TryGetContent<FRHAPI_JsonValue>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_JsonValue>& OutContent) const { return TryGetContent<FRHAPI_JsonValue>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_JsonValue* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_JsonValue>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_JsonValue> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_JsonValue>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_JsonValue& OutContent) const;

	/* Response 400
	 Error Codes: - `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator 
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	 Error Codes: - `setting_type_id_not_found` - The setting type ID was not found - `does_not_exist` - Setting Key(s) do not exist         
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 412
	The resource does not meet the provided preconditions.
	*/

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_DeleteSinglePlayerIdSetting */
DECLARE_DELEGATE_OneParam(FDelegate_DeleteSinglePlayerIdSetting, const FResponse_DeleteSinglePlayerIdSetting&);

/** @brief A helper metadata object for DeleteSinglePlayerIdSetting that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_DeleteSinglePlayerIdSetting
{
	/** The request type */
	typedef FRequest_DeleteSinglePlayerIdSetting Request;
	/** The response type */
	typedef FResponse_DeleteSinglePlayerIdSetting Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_DeleteSinglePlayerIdSetting Delegate;
	/** The API object that supports this API call */
	typedef FSettingsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Delete Single Player Uuid Setting
 * Delete a single player setting document
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `setting:*:*`, `setting:write`
 * 
 * - For the player themselves : `setting:write:self`
*/
struct RALLYHEREAPI_API FRequest_DeleteSinglePlayerUuidSetting : public FRequest
{
	FRequest_DeleteSinglePlayerUuidSetting();
	virtual ~FRequest_DeleteSinglePlayerUuidSetting() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	/* Player to delete setting for */
	FGuid PlayerUuid;
	/* Setting Type to delete settings for.  Must be one of the known setting types */
	FString SettingTypeId;
	/* Setting Key to delete setting for */
	FString Key;
	/* Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.  See https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information */
	TOptional<FString> IfMatch;
	/* Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.    See https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information */
	TOptional<FString> IfNoneMatch;
	/* Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.  See https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information */
	TOptional<FString> IfUnmodifiedSince;
};

/** The response type for FRequest_DeleteSinglePlayerUuidSetting */
struct RALLYHEREAPI_API FResponse_DeleteSinglePlayerUuidSetting : public FResponseAccessorTemplate<FRHAPI_JsonValue, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_JsonValue, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_DeleteSinglePlayerUuidSetting(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_DeleteSinglePlayerUuidSetting() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_JsonValue Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_JsonValue& OutContent) const { return TryGetContent<FRHAPI_JsonValue>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_JsonValue>& OutContent) const { return TryGetContent<FRHAPI_JsonValue>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_JsonValue* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_JsonValue>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_JsonValue> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_JsonValue>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_JsonValue& OutContent) const;

	/* Response 400
	 Error Codes: - `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator 
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	 Error Codes: - `setting_type_id_not_found` - The setting type ID was not found - `does_not_exist` - Setting Key(s) do not exist         
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 412
	The resource does not meet the provided preconditions.
	*/

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_DeleteSinglePlayerUuidSetting */
DECLARE_DELEGATE_OneParam(FDelegate_DeleteSinglePlayerUuidSetting, const FResponse_DeleteSinglePlayerUuidSetting&);

/** @brief A helper metadata object for DeleteSinglePlayerUuidSetting that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_DeleteSinglePlayerUuidSetting
{
	/** The request type */
	typedef FRequest_DeleteSinglePlayerUuidSetting Request;
	/** The response type */
	typedef FResponse_DeleteSinglePlayerUuidSetting Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_DeleteSinglePlayerUuidSetting Delegate;
	/** The API object that supports this API call */
	typedef FSettingsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Delete Single Player Uuid Setting Self
 * Delete a single player setting document
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `setting:*:*`, `setting:write`
 * 
 * - For the player themselves : `setting:write:self`
*/
struct RALLYHEREAPI_API FRequest_DeleteSinglePlayerUuidSettingSelf : public FRequest
{
	FRequest_DeleteSinglePlayerUuidSettingSelf();
	virtual ~FRequest_DeleteSinglePlayerUuidSettingSelf() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	/* Setting Type to delete settings for.  Must be one of the known setting types */
	FString SettingTypeId;
	/* Setting Key to delete setting for */
	FString Key;
	/* Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.  See https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information */
	TOptional<FString> IfMatch;
	/* Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.    See https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information */
	TOptional<FString> IfNoneMatch;
	/* Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.  See https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information */
	TOptional<FString> IfUnmodifiedSince;
};

/** The response type for FRequest_DeleteSinglePlayerUuidSettingSelf */
struct RALLYHEREAPI_API FResponse_DeleteSinglePlayerUuidSettingSelf : public FResponseAccessorTemplate<FRHAPI_JsonValue, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_JsonValue, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_DeleteSinglePlayerUuidSettingSelf(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_DeleteSinglePlayerUuidSettingSelf() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_JsonValue Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_JsonValue& OutContent) const { return TryGetContent<FRHAPI_JsonValue>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_JsonValue>& OutContent) const { return TryGetContent<FRHAPI_JsonValue>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_JsonValue* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_JsonValue>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_JsonValue> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_JsonValue>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_JsonValue& OutContent) const;

	/* Response 400
	 Error Codes: - `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator 
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	 Error Codes: - `setting_type_id_not_found` - The setting type ID was not found - `does_not_exist` - Setting Key(s) do not exist         
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 412
	The resource does not meet the provided preconditions.
	*/

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_DeleteSinglePlayerUuidSettingSelf */
DECLARE_DELEGATE_OneParam(FDelegate_DeleteSinglePlayerUuidSettingSelf, const FResponse_DeleteSinglePlayerUuidSettingSelf&);

/** @brief A helper metadata object for DeleteSinglePlayerUuidSettingSelf that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_DeleteSinglePlayerUuidSettingSelf
{
	/** The request type */
	typedef FRequest_DeleteSinglePlayerUuidSettingSelf Request;
	/** The response type */
	typedef FResponse_DeleteSinglePlayerUuidSettingSelf Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_DeleteSinglePlayerUuidSettingSelf Delegate;
	/** The API object that supports this API call */
	typedef FSettingsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get All Player Id Settings For Setting Type
 * **DEPRECATED** - Use v2 instead.  Get a list of all player setting documents for a specific Setting Type.
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `setting:*:*`, `setting:read`
 * 
 * - For the player themselves : `setting:read:self`
*/
struct RALLYHEREAPI_API FRequest_GetAllPlayerIdSettingsForSettingType : public FRequest
{
	FRequest_GetAllPlayerIdSettingsForSettingType();
	virtual ~FRequest_GetAllPlayerIdSettingsForSettingType() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	/* Player to get settings for */
	int32 PlayerId = 0;
	/* Setting Type to get settings for. Must be one of the known setting types */
	FString SettingTypeId;
	/* Setting Key to get settings for. If not specified, all settings for the setting type will be returned */
	TOptional<TArray<FString>> Key;
	/* Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.  See https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information */
	TOptional<FString> IfMatch;
	/* Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.    See https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information */
	TOptional<FString> IfNoneMatch;
	/* Precondition check if the resource's Last-Modified date is newer than the provided date.  Ignored if the If-None-Match header is provided.  Only valid for GET/HEAD endpoints.  See https://www.rfc-editor.org/rfc/rfc9110#name-if-modified-since for more information */
	TOptional<FString> IfModifiedSince;
	/* Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.  See https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information */
	TOptional<FString> IfUnmodifiedSince;
};

/** The response type for FRequest_GetAllPlayerIdSettingsForSettingType */
struct RALLYHEREAPI_API FResponse_GetAllPlayerIdSettingsForSettingType : public FResponseAccessorTemplate<TMap<FString, FRHAPI_SettingData>, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<TMap<FString, FRHAPI_SettingData>, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetAllPlayerIdSettingsForSettingType(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetAllPlayerIdSettingsForSettingType() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	TMap<FString, FRHAPI_SettingData> Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;	/* The Last-Modified date for the resource.  Used for caching and preconditions. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FDateTime> LastModified;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TMap<FString, FRHAPI_SettingData>& OutContent) const { return TryGetContent<TMap<FString, FRHAPI_SettingData>>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<TMap<FString, FRHAPI_SettingData>>& OutContent) const { return TryGetContent<TMap<FString, FRHAPI_SettingData>>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const TMap<FString, FRHAPI_SettingData>* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<TMap<FString, FRHAPI_SettingData>>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<TMap<FString, FRHAPI_SettingData>> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<TMap<FString, FRHAPI_SettingData>>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_LastModified(FString& OutValue) const { return TryGetHeader(TEXT("Last-Modified"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_LastModified(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("Last-Modified"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_LastModified() const { return TryGetHeaderAsPointer(TEXT("Last-Modified")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_LastModified() const { return TryGetHeaderAsOptional(TEXT("Last-Modified")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(TMap<FString, FRHAPI_SettingData>& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;
	/* The Last-Modified date for the resource.  Used for caching and preconditions. */
	TOptional<FDateTime> GetHeader200_LastModified() const;

	/* Response 304
	The resource has not been modified from the provided preconditions.
	*/
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader304_ETag() const;
	/* The Last-Modified date for the resource.  Used for caching and preconditions. */
	TOptional<FDateTime> GetHeader304_LastModified() const;

	/* Response 400
	 Error Codes: - `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator 
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	 Error Codes: - `setting_type_id_not_found` - The setting type ID was not found         
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 412
	The resource does not meet the provided preconditions.
	*/

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetAllPlayerIdSettingsForSettingType */
DECLARE_DELEGATE_OneParam(FDelegate_GetAllPlayerIdSettingsForSettingType, const FResponse_GetAllPlayerIdSettingsForSettingType&);

/** @brief A helper metadata object for GetAllPlayerIdSettingsForSettingType that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetAllPlayerIdSettingsForSettingType
{
	/** The request type */
	typedef FRequest_GetAllPlayerIdSettingsForSettingType Request;
	/** The response type */
	typedef FResponse_GetAllPlayerIdSettingsForSettingType Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetAllPlayerIdSettingsForSettingType Delegate;
	/** The API object that supports this API call */
	typedef FSettingsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get All Player Uuid Settings For Setting Type
 * Get a list of all player setting documents for a specific Setting Type
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `setting:*:*`, `setting:read`
 * 
 * - For the player themselves : `setting:read:self`
*/
struct RALLYHEREAPI_API FRequest_GetAllPlayerUuidSettingsForSettingType : public FRequest
{
	FRequest_GetAllPlayerUuidSettingsForSettingType();
	virtual ~FRequest_GetAllPlayerUuidSettingsForSettingType() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	/* Player to get settings for */
	FGuid PlayerUuid;
	/* Setting Type to get settings for. Must be one of the known setting types */
	FString SettingTypeId;
	/* Setting Key to get settings for. If not specified, all settings for the setting type will be returned */
	TOptional<TArray<FString>> Key;
	/* Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.  See https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information */
	TOptional<FString> IfMatch;
	/* Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.    See https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information */
	TOptional<FString> IfNoneMatch;
	/* Precondition check if the resource's Last-Modified date is newer than the provided date.  Ignored if the If-None-Match header is provided.  Only valid for GET/HEAD endpoints.  See https://www.rfc-editor.org/rfc/rfc9110#name-if-modified-since for more information */
	TOptional<FString> IfModifiedSince;
	/* Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.  See https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information */
	TOptional<FString> IfUnmodifiedSince;
};

/** The response type for FRequest_GetAllPlayerUuidSettingsForSettingType */
struct RALLYHEREAPI_API FResponse_GetAllPlayerUuidSettingsForSettingType : public FResponseAccessorTemplate<TMap<FString, FRHAPI_SettingData>, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<TMap<FString, FRHAPI_SettingData>, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetAllPlayerUuidSettingsForSettingType(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetAllPlayerUuidSettingsForSettingType() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	TMap<FString, FRHAPI_SettingData> Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;	/* The Last-Modified date for the resource.  Used for caching and preconditions. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FDateTime> LastModified;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TMap<FString, FRHAPI_SettingData>& OutContent) const { return TryGetContent<TMap<FString, FRHAPI_SettingData>>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<TMap<FString, FRHAPI_SettingData>>& OutContent) const { return TryGetContent<TMap<FString, FRHAPI_SettingData>>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const TMap<FString, FRHAPI_SettingData>* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<TMap<FString, FRHAPI_SettingData>>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<TMap<FString, FRHAPI_SettingData>> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<TMap<FString, FRHAPI_SettingData>>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_LastModified(FString& OutValue) const { return TryGetHeader(TEXT("Last-Modified"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_LastModified(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("Last-Modified"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_LastModified() const { return TryGetHeaderAsPointer(TEXT("Last-Modified")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_LastModified() const { return TryGetHeaderAsOptional(TEXT("Last-Modified")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(TMap<FString, FRHAPI_SettingData>& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;
	/* The Last-Modified date for the resource.  Used for caching and preconditions. */
	TOptional<FDateTime> GetHeader200_LastModified() const;

	/* Response 304
	The resource has not been modified from the provided preconditions.
	*/
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader304_ETag() const;
	/* The Last-Modified date for the resource.  Used for caching and preconditions. */
	TOptional<FDateTime> GetHeader304_LastModified() const;

	/* Response 400
	 Error Codes: - `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator 
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	 Error Codes: - `setting_type_id_not_found` - The setting type ID was not found         
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 412
	The resource does not meet the provided preconditions.
	*/

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetAllPlayerUuidSettingsForSettingType */
DECLARE_DELEGATE_OneParam(FDelegate_GetAllPlayerUuidSettingsForSettingType, const FResponse_GetAllPlayerUuidSettingsForSettingType&);

/** @brief A helper metadata object for GetAllPlayerUuidSettingsForSettingType that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetAllPlayerUuidSettingsForSettingType
{
	/** The request type */
	typedef FRequest_GetAllPlayerUuidSettingsForSettingType Request;
	/** The response type */
	typedef FResponse_GetAllPlayerUuidSettingsForSettingType Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetAllPlayerUuidSettingsForSettingType Delegate;
	/** The API object that supports this API call */
	typedef FSettingsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get All Player Uuid Settings For Setting Type Self
 * Get a list of all player setting documents for a specific Setting Type
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `setting:*:*`, `setting:read`
 * 
 * - For the player themselves : `setting:read:self`
*/
struct RALLYHEREAPI_API FRequest_GetAllPlayerUuidSettingsForSettingTypeSelf : public FRequest
{
	FRequest_GetAllPlayerUuidSettingsForSettingTypeSelf();
	virtual ~FRequest_GetAllPlayerUuidSettingsForSettingTypeSelf() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	/* Setting Type to get settings for. Must be one of the known setting types */
	FString SettingTypeId;
	/* Setting Key to get settings for. If not specified, all settings for the setting type will be returned */
	TOptional<TArray<FString>> Key;
	/* Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.  See https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information */
	TOptional<FString> IfMatch;
	/* Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.    See https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information */
	TOptional<FString> IfNoneMatch;
	/* Precondition check if the resource's Last-Modified date is newer than the provided date.  Ignored if the If-None-Match header is provided.  Only valid for GET/HEAD endpoints.  See https://www.rfc-editor.org/rfc/rfc9110#name-if-modified-since for more information */
	TOptional<FString> IfModifiedSince;
	/* Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.  See https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information */
	TOptional<FString> IfUnmodifiedSince;
};

/** The response type for FRequest_GetAllPlayerUuidSettingsForSettingTypeSelf */
struct RALLYHEREAPI_API FResponse_GetAllPlayerUuidSettingsForSettingTypeSelf : public FResponseAccessorTemplate<TMap<FString, FRHAPI_SettingData>, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<TMap<FString, FRHAPI_SettingData>, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetAllPlayerUuidSettingsForSettingTypeSelf(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetAllPlayerUuidSettingsForSettingTypeSelf() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	TMap<FString, FRHAPI_SettingData> Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;	/* The Last-Modified date for the resource.  Used for caching and preconditions. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FDateTime> LastModified;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TMap<FString, FRHAPI_SettingData>& OutContent) const { return TryGetContent<TMap<FString, FRHAPI_SettingData>>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<TMap<FString, FRHAPI_SettingData>>& OutContent) const { return TryGetContent<TMap<FString, FRHAPI_SettingData>>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const TMap<FString, FRHAPI_SettingData>* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<TMap<FString, FRHAPI_SettingData>>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<TMap<FString, FRHAPI_SettingData>> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<TMap<FString, FRHAPI_SettingData>>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_LastModified(FString& OutValue) const { return TryGetHeader(TEXT("Last-Modified"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_LastModified(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("Last-Modified"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_LastModified() const { return TryGetHeaderAsPointer(TEXT("Last-Modified")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_LastModified() const { return TryGetHeaderAsOptional(TEXT("Last-Modified")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(TMap<FString, FRHAPI_SettingData>& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;
	/* The Last-Modified date for the resource.  Used for caching and preconditions. */
	TOptional<FDateTime> GetHeader200_LastModified() const;

	/* Response 304
	The resource has not been modified from the provided preconditions.
	*/
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader304_ETag() const;
	/* The Last-Modified date for the resource.  Used for caching and preconditions. */
	TOptional<FDateTime> GetHeader304_LastModified() const;

	/* Response 400
	 Error Codes: - `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator 
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	 Error Codes: - `setting_type_id_not_found` - The setting type ID was not found         
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 412
	The resource does not meet the provided preconditions.
	*/

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetAllPlayerUuidSettingsForSettingTypeSelf */
DECLARE_DELEGATE_OneParam(FDelegate_GetAllPlayerUuidSettingsForSettingTypeSelf, const FResponse_GetAllPlayerUuidSettingsForSettingTypeSelf&);

/** @brief A helper metadata object for GetAllPlayerUuidSettingsForSettingTypeSelf that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetAllPlayerUuidSettingsForSettingTypeSelf
{
	/** The request type */
	typedef FRequest_GetAllPlayerUuidSettingsForSettingTypeSelf Request;
	/** The response type */
	typedef FResponse_GetAllPlayerUuidSettingsForSettingTypeSelf Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetAllPlayerUuidSettingsForSettingTypeSelf Delegate;
	/** The API object that supports this API call */
	typedef FSettingsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Config For All Setting Types
 * Get all setting types and their configuration.
 *     
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `setting-config:read`, `setting:*:*`
*/
struct RALLYHEREAPI_API FRequest_GetConfigForAllSettingTypes : public FRequest
{
	FRequest_GetConfigForAllSettingTypes();
	virtual ~FRequest_GetConfigForAllSettingTypes() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	/* Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.  See https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information */
	TOptional<FString> IfMatch;
	/* Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.    See https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information */
	TOptional<FString> IfNoneMatch;
	/* Precondition check if the resource's Last-Modified date is newer than the provided date.  Ignored if the If-None-Match header is provided.  Only valid for GET/HEAD endpoints.  See https://www.rfc-editor.org/rfc/rfc9110#name-if-modified-since for more information */
	TOptional<FString> IfModifiedSince;
	/* Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.  See https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information */
	TOptional<FString> IfUnmodifiedSince;
};

/** The response type for FRequest_GetConfigForAllSettingTypes */
struct RALLYHEREAPI_API FResponse_GetConfigForAllSettingTypes : public FResponseAccessorTemplate<TMap<FString, FRHAPI_SettingType>, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<TMap<FString, FRHAPI_SettingType>, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetConfigForAllSettingTypes(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetConfigForAllSettingTypes() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	TMap<FString, FRHAPI_SettingType> Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;	/* The Last-Modified date for the resource.  Used for caching and preconditions. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FDateTime> LastModified;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TMap<FString, FRHAPI_SettingType>& OutContent) const { return TryGetContent<TMap<FString, FRHAPI_SettingType>>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<TMap<FString, FRHAPI_SettingType>>& OutContent) const { return TryGetContent<TMap<FString, FRHAPI_SettingType>>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const TMap<FString, FRHAPI_SettingType>* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<TMap<FString, FRHAPI_SettingType>>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<TMap<FString, FRHAPI_SettingType>> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<TMap<FString, FRHAPI_SettingType>>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_LastModified(FString& OutValue) const { return TryGetHeader(TEXT("Last-Modified"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_LastModified(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("Last-Modified"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_LastModified() const { return TryGetHeaderAsPointer(TEXT("Last-Modified")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_LastModified() const { return TryGetHeaderAsOptional(TEXT("Last-Modified")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(TMap<FString, FRHAPI_SettingType>& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;
	/* The Last-Modified date for the resource.  Used for caching and preconditions. */
	TOptional<FDateTime> GetHeader200_LastModified() const;

	/* Response 304
	The resource has not been modified from the provided preconditions.
	*/
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader304_ETag() const;
	/* The Last-Modified date for the resource.  Used for caching and preconditions. */
	TOptional<FDateTime> GetHeader304_LastModified() const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 412
	The resource does not meet the provided preconditions.
	*/

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetConfigForAllSettingTypes */
DECLARE_DELEGATE_OneParam(FDelegate_GetConfigForAllSettingTypes, const FResponse_GetConfigForAllSettingTypes&);

/** @brief A helper metadata object for GetConfigForAllSettingTypes that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetConfigForAllSettingTypes
{
	/** The request type */
	typedef FRequest_GetConfigForAllSettingTypes Request;
	/** The response type */
	typedef FResponse_GetConfigForAllSettingTypes Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetConfigForAllSettingTypes Delegate;
	/** The API object that supports this API call */
	typedef FSettingsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Config For Single Setting Type All Versions
 * Get a configuration and all versions for a given setting type ID.
 *     
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `setting-config:read`, `setting:*:*`
*/
struct RALLYHEREAPI_API FRequest_GetConfigForSingleSettingTypeAllVersions : public FRequest
{
	FRequest_GetConfigForSingleSettingTypeAllVersions();
	virtual ~FRequest_GetConfigForSingleSettingTypeAllVersions() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString SettingTypeId;
	/* Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.  See https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information */
	TOptional<FString> IfMatch;
	/* Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.    See https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information */
	TOptional<FString> IfNoneMatch;
	/* Precondition check if the resource's Last-Modified date is newer than the provided date.  Ignored if the If-None-Match header is provided.  Only valid for GET/HEAD endpoints.  See https://www.rfc-editor.org/rfc/rfc9110#name-if-modified-since for more information */
	TOptional<FString> IfModifiedSince;
	/* Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.  See https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information */
	TOptional<FString> IfUnmodifiedSince;
};

/** The response type for FRequest_GetConfigForSingleSettingTypeAllVersions */
struct RALLYHEREAPI_API FResponse_GetConfigForSingleSettingTypeAllVersions : public FResponseAccessorTemplate<TMap<FString, FRHAPI_SettingTypeVersion>, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<TMap<FString, FRHAPI_SettingTypeVersion>, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetConfigForSingleSettingTypeAllVersions(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetConfigForSingleSettingTypeAllVersions() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	TMap<FString, FRHAPI_SettingTypeVersion> Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;	/* The Last-Modified date for the resource.  Used for caching and preconditions. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FDateTime> LastModified;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TMap<FString, FRHAPI_SettingTypeVersion>& OutContent) const { return TryGetContent<TMap<FString, FRHAPI_SettingTypeVersion>>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<TMap<FString, FRHAPI_SettingTypeVersion>>& OutContent) const { return TryGetContent<TMap<FString, FRHAPI_SettingTypeVersion>>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const TMap<FString, FRHAPI_SettingTypeVersion>* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<TMap<FString, FRHAPI_SettingTypeVersion>>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<TMap<FString, FRHAPI_SettingTypeVersion>> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<TMap<FString, FRHAPI_SettingTypeVersion>>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_LastModified(FString& OutValue) const { return TryGetHeader(TEXT("Last-Modified"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_LastModified(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("Last-Modified"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_LastModified() const { return TryGetHeaderAsPointer(TEXT("Last-Modified")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_LastModified() const { return TryGetHeaderAsOptional(TEXT("Last-Modified")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(TMap<FString, FRHAPI_SettingTypeVersion>& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;
	/* The Last-Modified date for the resource.  Used for caching and preconditions. */
	TOptional<FDateTime> GetHeader200_LastModified() const;

	/* Response 304
	The resource has not been modified from the provided preconditions.
	*/
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader304_ETag() const;
	/* The Last-Modified date for the resource.  Used for caching and preconditions. */
	TOptional<FDateTime> GetHeader304_LastModified() const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	 Error Codes: - `setting_type_id_not_found` - The setting type ID was not found 
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 412
	The resource does not meet the provided preconditions.
	*/

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetConfigForSingleSettingTypeAllVersions */
DECLARE_DELEGATE_OneParam(FDelegate_GetConfigForSingleSettingTypeAllVersions, const FResponse_GetConfigForSingleSettingTypeAllVersions&);

/** @brief A helper metadata object for GetConfigForSingleSettingTypeAllVersions that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetConfigForSingleSettingTypeAllVersions
{
	/** The request type */
	typedef FRequest_GetConfigForSingleSettingTypeAllVersions Request;
	/** The response type */
	typedef FResponse_GetConfigForSingleSettingTypeAllVersions Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetConfigForSingleSettingTypeAllVersions Delegate;
	/** The API object that supports this API call */
	typedef FSettingsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Config For Single Setting Type And Version
 * Get a specific version of a specific setting type.
 *     
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `setting-config:read`, `setting:*:*`
*/
struct RALLYHEREAPI_API FRequest_GetConfigForSingleSettingTypeAndVersion : public FRequest
{
	FRequest_GetConfigForSingleSettingTypeAndVersion();
	virtual ~FRequest_GetConfigForSingleSettingTypeAndVersion() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString SettingTypeId;
	int32 SettingVersionId = 0;
	/* Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.  See https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information */
	TOptional<FString> IfMatch;
	/* Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.    See https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information */
	TOptional<FString> IfNoneMatch;
	/* Precondition check if the resource's Last-Modified date is newer than the provided date.  Ignored if the If-None-Match header is provided.  Only valid for GET/HEAD endpoints.  See https://www.rfc-editor.org/rfc/rfc9110#name-if-modified-since for more information */
	TOptional<FString> IfModifiedSince;
	/* Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.  See https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information */
	TOptional<FString> IfUnmodifiedSince;
};

/** The response type for FRequest_GetConfigForSingleSettingTypeAndVersion */
struct RALLYHEREAPI_API FResponse_GetConfigForSingleSettingTypeAndVersion : public FResponseAccessorTemplate<FRHAPI_SettingTypeVersion, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_SettingTypeVersion, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetConfigForSingleSettingTypeAndVersion(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetConfigForSingleSettingTypeAndVersion() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_SettingTypeVersion Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;	/* The Last-Modified date for the resource.  Used for caching and preconditions. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FDateTime> LastModified;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_SettingTypeVersion& OutContent) const { return TryGetContent<FRHAPI_SettingTypeVersion>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_SettingTypeVersion>& OutContent) const { return TryGetContent<FRHAPI_SettingTypeVersion>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_SettingTypeVersion* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_SettingTypeVersion>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_SettingTypeVersion> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_SettingTypeVersion>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_LastModified(FString& OutValue) const { return TryGetHeader(TEXT("Last-Modified"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_LastModified(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("Last-Modified"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_LastModified() const { return TryGetHeaderAsPointer(TEXT("Last-Modified")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_LastModified() const { return TryGetHeaderAsOptional(TEXT("Last-Modified")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_SettingTypeVersion& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;
	/* The Last-Modified date for the resource.  Used for caching and preconditions. */
	TOptional<FDateTime> GetHeader200_LastModified() const;

	/* Response 304
	The resource has not been modified from the provided preconditions.
	*/
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader304_ETag() const;
	/* The Last-Modified date for the resource.  Used for caching and preconditions. */
	TOptional<FDateTime> GetHeader304_LastModified() const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	 Error Codes: - `setting_type_id_not_found` - The setting type ID was not found - `setting_version_id_not_found` - The setting Version was not found for that type 
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 412
	The resource does not meet the provided preconditions.
	*/

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetConfigForSingleSettingTypeAndVersion */
DECLARE_DELEGATE_OneParam(FDelegate_GetConfigForSingleSettingTypeAndVersion, const FResponse_GetConfigForSingleSettingTypeAndVersion&);

/** @brief A helper metadata object for GetConfigForSingleSettingTypeAndVersion that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetConfigForSingleSettingTypeAndVersion
{
	/** The request type */
	typedef FRequest_GetConfigForSingleSettingTypeAndVersion Request;
	/** The response type */
	typedef FResponse_GetConfigForSingleSettingTypeAndVersion Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetConfigForSingleSettingTypeAndVersion Delegate;
	/** The API object that supports this API call */
	typedef FSettingsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Single Player Id Setting
 * **DEPRECATED** - Use v2 instead.  Get a single player setting document
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `setting:*:*`, `setting:read`
 * 
 * - For the player themselves : `setting:read:self`
*/
struct RALLYHEREAPI_API FRequest_GetSinglePlayerIdSetting : public FRequest
{
	FRequest_GetSinglePlayerIdSetting();
	virtual ~FRequest_GetSinglePlayerIdSetting() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	/* Player to get settings for */
	int32 PlayerId = 0;
	/* Setting Type to get settings for. Must be one of the known setting types */
	FString SettingTypeId;
	/* Setting Key to get settings for */
	FString Key;
	/* Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.  See https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information */
	TOptional<FString> IfMatch;
	/* Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.    See https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information */
	TOptional<FString> IfNoneMatch;
	/* Precondition check if the resource's Last-Modified date is newer than the provided date.  Ignored if the If-None-Match header is provided.  Only valid for GET/HEAD endpoints.  See https://www.rfc-editor.org/rfc/rfc9110#name-if-modified-since for more information */
	TOptional<FString> IfModifiedSince;
	/* Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.  See https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information */
	TOptional<FString> IfUnmodifiedSince;
};

/** The response type for FRequest_GetSinglePlayerIdSetting */
struct RALLYHEREAPI_API FResponse_GetSinglePlayerIdSetting : public FResponseAccessorTemplate<FRHAPI_SettingData, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_SettingData, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetSinglePlayerIdSetting(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetSinglePlayerIdSetting() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_SettingData Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;	/* The Last-Modified date for the resource.  Used for caching and preconditions. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FDateTime> LastModified;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_SettingData& OutContent) const { return TryGetContent<FRHAPI_SettingData>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_SettingData>& OutContent) const { return TryGetContent<FRHAPI_SettingData>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_SettingData* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_SettingData>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_SettingData> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_SettingData>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_LastModified(FString& OutValue) const { return TryGetHeader(TEXT("Last-Modified"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_LastModified(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("Last-Modified"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_LastModified() const { return TryGetHeaderAsPointer(TEXT("Last-Modified")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_LastModified() const { return TryGetHeaderAsOptional(TEXT("Last-Modified")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_SettingData& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;
	/* The Last-Modified date for the resource.  Used for caching and preconditions. */
	TOptional<FDateTime> GetHeader200_LastModified() const;

	/* Response 304
	The resource has not been modified from the provided preconditions.
	*/
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader304_ETag() const;
	/* The Last-Modified date for the resource.  Used for caching and preconditions. */
	TOptional<FDateTime> GetHeader304_LastModified() const;

	/* Response 400
	 Error Codes: - `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator 
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	 Error Codes: - `setting_type_id_not_found` - The setting type ID was not found - `not_found` - The setting key was not found         
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 412
	The resource does not meet the provided preconditions.
	*/

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetSinglePlayerIdSetting */
DECLARE_DELEGATE_OneParam(FDelegate_GetSinglePlayerIdSetting, const FResponse_GetSinglePlayerIdSetting&);

/** @brief A helper metadata object for GetSinglePlayerIdSetting that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetSinglePlayerIdSetting
{
	/** The request type */
	typedef FRequest_GetSinglePlayerIdSetting Request;
	/** The response type */
	typedef FResponse_GetSinglePlayerIdSetting Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetSinglePlayerIdSetting Delegate;
	/** The API object that supports this API call */
	typedef FSettingsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Single Player Uuid Setting
 * Get a single player setting document
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `setting:*:*`, `setting:read`
 * 
 * - For the player themselves : `setting:read:self`
*/
struct RALLYHEREAPI_API FRequest_GetSinglePlayerUuidSetting : public FRequest
{
	FRequest_GetSinglePlayerUuidSetting();
	virtual ~FRequest_GetSinglePlayerUuidSetting() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	/* Player to get settings for */
	FGuid PlayerUuid;
	/* Setting Type to get settings for. Must be one of the known setting types */
	FString SettingTypeId;
	/* Setting Key to get settings for */
	FString Key;
	/* Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.  See https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information */
	TOptional<FString> IfMatch;
	/* Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.    See https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information */
	TOptional<FString> IfNoneMatch;
	/* Precondition check if the resource's Last-Modified date is newer than the provided date.  Ignored if the If-None-Match header is provided.  Only valid for GET/HEAD endpoints.  See https://www.rfc-editor.org/rfc/rfc9110#name-if-modified-since for more information */
	TOptional<FString> IfModifiedSince;
	/* Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.  See https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information */
	TOptional<FString> IfUnmodifiedSince;
};

/** The response type for FRequest_GetSinglePlayerUuidSetting */
struct RALLYHEREAPI_API FResponse_GetSinglePlayerUuidSetting : public FResponseAccessorTemplate<FRHAPI_SettingData, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_SettingData, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetSinglePlayerUuidSetting(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetSinglePlayerUuidSetting() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_SettingData Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;	/* The Last-Modified date for the resource.  Used for caching and preconditions. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FDateTime> LastModified;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_SettingData& OutContent) const { return TryGetContent<FRHAPI_SettingData>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_SettingData>& OutContent) const { return TryGetContent<FRHAPI_SettingData>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_SettingData* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_SettingData>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_SettingData> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_SettingData>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_LastModified(FString& OutValue) const { return TryGetHeader(TEXT("Last-Modified"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_LastModified(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("Last-Modified"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_LastModified() const { return TryGetHeaderAsPointer(TEXT("Last-Modified")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_LastModified() const { return TryGetHeaderAsOptional(TEXT("Last-Modified")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_SettingData& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;
	/* The Last-Modified date for the resource.  Used for caching and preconditions. */
	TOptional<FDateTime> GetHeader200_LastModified() const;

	/* Response 304
	The resource has not been modified from the provided preconditions.
	*/
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader304_ETag() const;
	/* The Last-Modified date for the resource.  Used for caching and preconditions. */
	TOptional<FDateTime> GetHeader304_LastModified() const;

	/* Response 400
	 Error Codes: - `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator 
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	 Error Codes: - `setting_type_id_not_found` - The setting type ID was not found - `not_found` - The setting key was not found         
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 412
	The resource does not meet the provided preconditions.
	*/

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetSinglePlayerUuidSetting */
DECLARE_DELEGATE_OneParam(FDelegate_GetSinglePlayerUuidSetting, const FResponse_GetSinglePlayerUuidSetting&);

/** @brief A helper metadata object for GetSinglePlayerUuidSetting that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetSinglePlayerUuidSetting
{
	/** The request type */
	typedef FRequest_GetSinglePlayerUuidSetting Request;
	/** The response type */
	typedef FResponse_GetSinglePlayerUuidSetting Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetSinglePlayerUuidSetting Delegate;
	/** The API object that supports this API call */
	typedef FSettingsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Single Player Uuid Setting Self
 * Get a single player setting document
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `setting:*:*`, `setting:read`
 * 
 * - For the player themselves : `setting:read:self`
*/
struct RALLYHEREAPI_API FRequest_GetSinglePlayerUuidSettingSelf : public FRequest
{
	FRequest_GetSinglePlayerUuidSettingSelf();
	virtual ~FRequest_GetSinglePlayerUuidSettingSelf() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	/* Setting Type to get settings for. Must be one of the known setting types */
	FString SettingTypeId;
	/* Setting Key to get settings for */
	FString Key;
	/* Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.  See https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information */
	TOptional<FString> IfMatch;
	/* Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.    See https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information */
	TOptional<FString> IfNoneMatch;
	/* Precondition check if the resource's Last-Modified date is newer than the provided date.  Ignored if the If-None-Match header is provided.  Only valid for GET/HEAD endpoints.  See https://www.rfc-editor.org/rfc/rfc9110#name-if-modified-since for more information */
	TOptional<FString> IfModifiedSince;
	/* Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.  See https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information */
	TOptional<FString> IfUnmodifiedSince;
};

/** The response type for FRequest_GetSinglePlayerUuidSettingSelf */
struct RALLYHEREAPI_API FResponse_GetSinglePlayerUuidSettingSelf : public FResponseAccessorTemplate<FRHAPI_SettingData, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_SettingData, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetSinglePlayerUuidSettingSelf(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetSinglePlayerUuidSettingSelf() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_SettingData Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;	/* The Last-Modified date for the resource.  Used for caching and preconditions. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FDateTime> LastModified;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_SettingData& OutContent) const { return TryGetContent<FRHAPI_SettingData>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_SettingData>& OutContent) const { return TryGetContent<FRHAPI_SettingData>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_SettingData* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_SettingData>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_SettingData> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_SettingData>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_LastModified(FString& OutValue) const { return TryGetHeader(TEXT("Last-Modified"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_LastModified(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("Last-Modified"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_LastModified() const { return TryGetHeaderAsPointer(TEXT("Last-Modified")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_LastModified() const { return TryGetHeaderAsOptional(TEXT("Last-Modified")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_SettingData& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;
	/* The Last-Modified date for the resource.  Used for caching and preconditions. */
	TOptional<FDateTime> GetHeader200_LastModified() const;

	/* Response 304
	The resource has not been modified from the provided preconditions.
	*/
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader304_ETag() const;
	/* The Last-Modified date for the resource.  Used for caching and preconditions. */
	TOptional<FDateTime> GetHeader304_LastModified() const;

	/* Response 400
	 Error Codes: - `setting_type_not_supported` - The setting type is not supported at this time.  Contact an administrator 
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	 Error Codes: - `setting_type_id_not_found` - The setting type ID was not found - `not_found` - The setting key was not found         
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 412
	The resource does not meet the provided preconditions.
	*/

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetSinglePlayerUuidSettingSelf */
DECLARE_DELEGATE_OneParam(FDelegate_GetSinglePlayerUuidSettingSelf, const FResponse_GetSinglePlayerUuidSettingSelf&);

/** @brief A helper metadata object for GetSinglePlayerUuidSettingSelf that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetSinglePlayerUuidSettingSelf
{
	/** The request type */
	typedef FRequest_GetSinglePlayerUuidSettingSelf Request;
	/** The response type */
	typedef FResponse_GetSinglePlayerUuidSettingSelf Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetSinglePlayerUuidSettingSelf Delegate;
	/** The API object that supports this API call */
	typedef FSettingsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Set Single Player Id Setting
 * **DEPRECATED** - Use the v2 endpoint instead.  This endpoint will be removed in a future release.  Update the value of a single player setting document.
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `setting:*:*`, `setting:write`
 * 
 * - For the player themselves : `setting:write:self`
 * 
 * 
 * If Legacy types are enabled, to maintain compatibility with legacy applications, the following settings have special-case handling:
 * * Setting Type `case` - Version `1` - key `create` - creates a new case set and returns the new key and document in the response. 
 * * Setting Type `case` - Version `1` - key is integer - Modify an existing case set.  If it does not exist, a 404 response with the `does_not_exist` error code. 
 * * Setting Type `loadout` - Version `1` - key `create` - creates a new loadout and returns the new key and document in the response.  All items keys will be given a new key 
 * * Setting Type `loadout` - Version `1` - key is integer - Modify an existing loadout.  If it does not exist, a 404 response with the `does_not_exist` error code.  When modifying loadout items, item keys that convert into integers/longs are treated as updates (and will error the update if they are not valid), all others are treated as creates and will be given a new key.
*/
struct RALLYHEREAPI_API FRequest_SetSinglePlayerIdSetting : public FRequest
{
	FRequest_SetSinglePlayerIdSetting();
	virtual ~FRequest_SetSinglePlayerIdSetting() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	/* Player to update setting for */
	int32 PlayerId = 0;
	/* Setting Type to update settings for. Must be one of the known setting types */
	FString SettingTypeId;
	/* Setting Key to update setting for.  Must conform to the setting type key format */
	FString Key;
	FRHAPI_SetSinglePlayerSettingRequest SetSinglePlayerSettingRequest;
	/* Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.  See https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information */
	TOptional<FString> IfMatch;
	/* Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.    See https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information */
	TOptional<FString> IfNoneMatch;
	/* Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.  See https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information */
	TOptional<FString> IfUnmodifiedSince;
};

/** The response type for FRequest_SetSinglePlayerIdSetting */
struct RALLYHEREAPI_API FResponse_SetSinglePlayerIdSetting : public FResponseAccessorTemplate<TMap<FString, FRHAPI_SettingData>, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<TMap<FString, FRHAPI_SettingData>, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_SetSinglePlayerIdSetting(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_SetSinglePlayerIdSetting() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	TMap<FString, FRHAPI_SettingData> Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;	/* The Last-Modified date for the resource.  Used for caching and preconditions. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FDateTime> LastModified;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TMap<FString, FRHAPI_SettingData>& OutContent) const { return TryGetContent<TMap<FString, FRHAPI_SettingData>>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<TMap<FString, FRHAPI_SettingData>>& OutContent) const { return TryGetContent<TMap<FString, FRHAPI_SettingData>>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const TMap<FString, FRHAPI_SettingData>* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<TMap<FString, FRHAPI_SettingData>>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<TMap<FString, FRHAPI_SettingData>> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<TMap<FString, FRHAPI_SettingData>>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_LastModified(FString& OutValue) const { return TryGetHeader(TEXT("Last-Modified"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_LastModified(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("Last-Modified"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_LastModified() const { return TryGetHeaderAsPointer(TEXT("Last-Modified")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_LastModified() const { return TryGetHeaderAsOptional(TEXT("Last-Modified")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(TMap<FString, FRHAPI_SettingData>& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;
	/* The Last-Modified date for the resource.  Used for caching and preconditions. */
	TOptional<FDateTime> GetHeader200_LastModified() const;

	/* Response 304
	The resource has not been modified from the provided preconditions.
	*/
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader304_ETag() const;
	/* The Last-Modified date for the resource.  Used for caching and preconditions. */
	TOptional<FDateTime> GetHeader304_LastModified() const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 412
	The resource does not meet the provided preconditions.
	*/

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_SetSinglePlayerIdSetting */
DECLARE_DELEGATE_OneParam(FDelegate_SetSinglePlayerIdSetting, const FResponse_SetSinglePlayerIdSetting&);

/** @brief A helper metadata object for SetSinglePlayerIdSetting that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_SetSinglePlayerIdSetting
{
	/** The request type */
	typedef FRequest_SetSinglePlayerIdSetting Request;
	/** The response type */
	typedef FResponse_SetSinglePlayerIdSetting Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_SetSinglePlayerIdSetting Delegate;
	/** The API object that supports this API call */
	typedef FSettingsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Set Single Player Uuid Setting
 * Update the value of a single player setting document.
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `setting:*:*`, `setting:write`
 * 
 * - For the player themselves : `setting:write:self`
 * 
 * 
 * If Legacy types are enabled, to maintain compatibility with legacy applications, the following settings have special-case handling:
 * * Setting Type `case` - Version `1` - key `create` - creates a new case set and returns the new key and document in the response. 
 * * Setting Type `case` - Version `1` - key is integer - Modify an existing case set.  If it does not exist, a 404 response with the `does_not_exist` error code. 
 * * Setting Type `loadout` - Version `1` - key `create` - creates a new loadout and returns the new key and document in the response.  All items keys will be given a new key 
 * * Setting Type `loadout` - Version `1` - key is integer - Modify an existing loadout.  If it does not exist, a 404 response with the `does_not_exist` error code.  When modifying loadout items, item keys that convert into integers/longs are treated as updates (and will error the update if they are not valid), all others are treated as creates and will be given a new key.
*/
struct RALLYHEREAPI_API FRequest_SetSinglePlayerUuidSetting : public FRequest
{
	FRequest_SetSinglePlayerUuidSetting();
	virtual ~FRequest_SetSinglePlayerUuidSetting() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	/* Player to update setting for */
	FGuid PlayerUuid;
	/* Setting Type to update settings for. Must be one of the known setting types */
	FString SettingTypeId;
	/* Setting Key to update setting for.  Must conform to the setting type key format */
	FString Key;
	FRHAPI_SetSinglePlayerSettingRequest SetSinglePlayerSettingRequest;
	/* Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.  See https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information */
	TOptional<FString> IfMatch;
	/* Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.    See https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information */
	TOptional<FString> IfNoneMatch;
	/* Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.  See https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information */
	TOptional<FString> IfUnmodifiedSince;
};

/** The response type for FRequest_SetSinglePlayerUuidSetting */
struct RALLYHEREAPI_API FResponse_SetSinglePlayerUuidSetting : public FResponseAccessorTemplate<TMap<FString, FRHAPI_SettingData>, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<TMap<FString, FRHAPI_SettingData>, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_SetSinglePlayerUuidSetting(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_SetSinglePlayerUuidSetting() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	TMap<FString, FRHAPI_SettingData> Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;	/* The Last-Modified date for the resource.  Used for caching and preconditions. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FDateTime> LastModified;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TMap<FString, FRHAPI_SettingData>& OutContent) const { return TryGetContent<TMap<FString, FRHAPI_SettingData>>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<TMap<FString, FRHAPI_SettingData>>& OutContent) const { return TryGetContent<TMap<FString, FRHAPI_SettingData>>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const TMap<FString, FRHAPI_SettingData>* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<TMap<FString, FRHAPI_SettingData>>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<TMap<FString, FRHAPI_SettingData>> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<TMap<FString, FRHAPI_SettingData>>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_LastModified(FString& OutValue) const { return TryGetHeader(TEXT("Last-Modified"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_LastModified(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("Last-Modified"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_LastModified() const { return TryGetHeaderAsPointer(TEXT("Last-Modified")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_LastModified() const { return TryGetHeaderAsOptional(TEXT("Last-Modified")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(TMap<FString, FRHAPI_SettingData>& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;
	/* The Last-Modified date for the resource.  Used for caching and preconditions. */
	TOptional<FDateTime> GetHeader200_LastModified() const;

	/* Response 304
	The resource has not been modified from the provided preconditions.
	*/
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader304_ETag() const;
	/* The Last-Modified date for the resource.  Used for caching and preconditions. */
	TOptional<FDateTime> GetHeader304_LastModified() const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 412
	The resource does not meet the provided preconditions.
	*/

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_SetSinglePlayerUuidSetting */
DECLARE_DELEGATE_OneParam(FDelegate_SetSinglePlayerUuidSetting, const FResponse_SetSinglePlayerUuidSetting&);

/** @brief A helper metadata object for SetSinglePlayerUuidSetting that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_SetSinglePlayerUuidSetting
{
	/** The request type */
	typedef FRequest_SetSinglePlayerUuidSetting Request;
	/** The response type */
	typedef FResponse_SetSinglePlayerUuidSetting Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_SetSinglePlayerUuidSetting Delegate;
	/** The API object that supports this API call */
	typedef FSettingsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Set Single Player Uuid Setting Self
 * Update the value of a single player setting document.
 *     
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `setting:*:*`, `setting:write`
 * 
 * - For the player themselves : `setting:write:self`
 * 
 * 
 * If Legacy types are enabled, to maintain compatibility with legacy applications, the following settings have special-case handling:
 * * Setting Type `case` - Version `1` - key `create` - creates a new case set and returns the new key and document in the response. 
 * * Setting Type `case` - Version `1` - key is integer - Modify an existing case set.  If it does not exist, a 404 response with the `does_not_exist` error code. 
 * * Setting Type `loadout` - Version `1` - key `create` - creates a new loadout and returns the new key and document in the response.  All items keys will be given a new key 
 * * Setting Type `loadout` - Version `1` - key is integer - Modify an existing loadout.  If it does not exist, a 404 response with the `does_not_exist` error code.  When modifying loadout items, item keys that convert into integers/longs are treated as updates (and will error the update if they are not valid), all others are treated as creates and will be given a new key.
*/
struct RALLYHEREAPI_API FRequest_SetSinglePlayerUuidSettingSelf : public FRequest
{
	FRequest_SetSinglePlayerUuidSettingSelf();
	virtual ~FRequest_SetSinglePlayerUuidSettingSelf() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	/* Setting Type to update settings for. Must be one of the known setting types */
	FString SettingTypeId;
	/* Setting Key to update setting for.  Must conform to the setting type key format */
	FString Key;
	FRHAPI_SetSinglePlayerSettingRequest SetSinglePlayerSettingRequest;
	/* Precondition check if the resource's current ETag matches the provided values.  * can be used to match any existing value.  See https://www.rfc-editor.org/rfc/rfc9110#name-if-match for more information */
	TOptional<FString> IfMatch;
	/* Precondition check if the resource's current ETag does NOT match the provided values.  * can be used to match existing value, causing the request to fail.    See https://www.rfc-editor.org/rfc/rfc9110#name-if-none-match for more information */
	TOptional<FString> IfNoneMatch;
	/* Precondition check if the resource's Last-Modified date is older than the provided date.  Ignored if the If-Match header is provided.  See https://www.rfc-editor.org/rfc/rfc9110#name-if-unmodified-since for more information */
	TOptional<FString> IfUnmodifiedSince;
};

/** The response type for FRequest_SetSinglePlayerUuidSettingSelf */
struct RALLYHEREAPI_API FResponse_SetSinglePlayerUuidSettingSelf : public FResponseAccessorTemplate<TMap<FString, FRHAPI_SettingData>, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<TMap<FString, FRHAPI_SettingData>, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_SetSinglePlayerUuidSettingSelf(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_SetSinglePlayerUuidSettingSelf() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	TMap<FString, FRHAPI_SettingData> Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;	/* The Last-Modified date for the resource.  Used for caching and preconditions. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FDateTime> LastModified;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TMap<FString, FRHAPI_SettingData>& OutContent) const { return TryGetContent<TMap<FString, FRHAPI_SettingData>>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<TMap<FString, FRHAPI_SettingData>>& OutContent) const { return TryGetContent<TMap<FString, FRHAPI_SettingData>>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const TMap<FString, FRHAPI_SettingData>* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<TMap<FString, FRHAPI_SettingData>>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<TMap<FString, FRHAPI_SettingData>> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<TMap<FString, FRHAPI_SettingData>>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_LastModified(FString& OutValue) const { return TryGetHeader(TEXT("Last-Modified"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_LastModified(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("Last-Modified"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_LastModified() const { return TryGetHeaderAsPointer(TEXT("Last-Modified")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_LastModified() const { return TryGetHeaderAsOptional(TEXT("Last-Modified")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(TMap<FString, FRHAPI_SettingData>& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;
	/* The Last-Modified date for the resource.  Used for caching and preconditions. */
	TOptional<FDateTime> GetHeader200_LastModified() const;

	/* Response 304
	The resource has not been modified from the provided preconditions.
	*/
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader304_ETag() const;
	/* The Last-Modified date for the resource.  Used for caching and preconditions. */
	TOptional<FDateTime> GetHeader304_LastModified() const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 412
	The resource does not meet the provided preconditions.
	*/

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_SetSinglePlayerUuidSettingSelf */
DECLARE_DELEGATE_OneParam(FDelegate_SetSinglePlayerUuidSettingSelf, const FResponse_SetSinglePlayerUuidSettingSelf&);

/** @brief A helper metadata object for SetSinglePlayerUuidSettingSelf that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_SetSinglePlayerUuidSettingSelf
{
	/** The request type */
	typedef FRequest_SetSinglePlayerUuidSettingSelf Request;
	/** The response type */
	typedef FResponse_SetSinglePlayerUuidSettingSelf Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_SetSinglePlayerUuidSettingSelf Delegate;
	/** The API object that supports this API call */
	typedef FSettingsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};


/** The API class itself, which will handle calls to */
class RALLYHEREAPI_API FSettingsAPI : public FAPI
{
public:
	FSettingsAPI();
	virtual ~FSettingsAPI();

	FHttpRequestPtr DeleteAllPlayerIdSettingsForSettingType(const FRequest_DeleteAllPlayerIdSettingsForSettingType& Request, const FDelegate_DeleteAllPlayerIdSettingsForSettingType& Delegate = FDelegate_DeleteAllPlayerIdSettingsForSettingType(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnDeleteAllPlayerIdSettingsForSettingTypeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_DeleteAllPlayerIdSettingsForSettingType Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr DeleteAllPlayerUuidSettingsForSettingType(const FRequest_DeleteAllPlayerUuidSettingsForSettingType& Request, const FDelegate_DeleteAllPlayerUuidSettingsForSettingType& Delegate = FDelegate_DeleteAllPlayerUuidSettingsForSettingType(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnDeleteAllPlayerUuidSettingsForSettingTypeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_DeleteAllPlayerUuidSettingsForSettingType Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr DeleteAllPlayerUuidSettingsForSettingTypeSelf(const FRequest_DeleteAllPlayerUuidSettingsForSettingTypeSelf& Request, const FDelegate_DeleteAllPlayerUuidSettingsForSettingTypeSelf& Delegate = FDelegate_DeleteAllPlayerUuidSettingsForSettingTypeSelf(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnDeleteAllPlayerUuidSettingsForSettingTypeSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_DeleteAllPlayerUuidSettingsForSettingTypeSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr DeleteSinglePlayerIdSetting(const FRequest_DeleteSinglePlayerIdSetting& Request, const FDelegate_DeleteSinglePlayerIdSetting& Delegate = FDelegate_DeleteSinglePlayerIdSetting(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnDeleteSinglePlayerIdSettingResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_DeleteSinglePlayerIdSetting Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr DeleteSinglePlayerUuidSetting(const FRequest_DeleteSinglePlayerUuidSetting& Request, const FDelegate_DeleteSinglePlayerUuidSetting& Delegate = FDelegate_DeleteSinglePlayerUuidSetting(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnDeleteSinglePlayerUuidSettingResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_DeleteSinglePlayerUuidSetting Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr DeleteSinglePlayerUuidSettingSelf(const FRequest_DeleteSinglePlayerUuidSettingSelf& Request, const FDelegate_DeleteSinglePlayerUuidSettingSelf& Delegate = FDelegate_DeleteSinglePlayerUuidSettingSelf(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnDeleteSinglePlayerUuidSettingSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_DeleteSinglePlayerUuidSettingSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetAllPlayerIdSettingsForSettingType(const FRequest_GetAllPlayerIdSettingsForSettingType& Request, const FDelegate_GetAllPlayerIdSettingsForSettingType& Delegate = FDelegate_GetAllPlayerIdSettingsForSettingType(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetAllPlayerIdSettingsForSettingTypeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAllPlayerIdSettingsForSettingType Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetAllPlayerUuidSettingsForSettingType(const FRequest_GetAllPlayerUuidSettingsForSettingType& Request, const FDelegate_GetAllPlayerUuidSettingsForSettingType& Delegate = FDelegate_GetAllPlayerUuidSettingsForSettingType(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetAllPlayerUuidSettingsForSettingTypeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAllPlayerUuidSettingsForSettingType Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetAllPlayerUuidSettingsForSettingTypeSelf(const FRequest_GetAllPlayerUuidSettingsForSettingTypeSelf& Request, const FDelegate_GetAllPlayerUuidSettingsForSettingTypeSelf& Delegate = FDelegate_GetAllPlayerUuidSettingsForSettingTypeSelf(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetAllPlayerUuidSettingsForSettingTypeSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAllPlayerUuidSettingsForSettingTypeSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetConfigForAllSettingTypes(const FRequest_GetConfigForAllSettingTypes& Request, const FDelegate_GetConfigForAllSettingTypes& Delegate = FDelegate_GetConfigForAllSettingTypes(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetConfigForAllSettingTypesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetConfigForAllSettingTypes Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetConfigForSingleSettingTypeAllVersions(const FRequest_GetConfigForSingleSettingTypeAllVersions& Request, const FDelegate_GetConfigForSingleSettingTypeAllVersions& Delegate = FDelegate_GetConfigForSingleSettingTypeAllVersions(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetConfigForSingleSettingTypeAllVersionsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetConfigForSingleSettingTypeAllVersions Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetConfigForSingleSettingTypeAndVersion(const FRequest_GetConfigForSingleSettingTypeAndVersion& Request, const FDelegate_GetConfigForSingleSettingTypeAndVersion& Delegate = FDelegate_GetConfigForSingleSettingTypeAndVersion(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetConfigForSingleSettingTypeAndVersionResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetConfigForSingleSettingTypeAndVersion Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetSinglePlayerIdSetting(const FRequest_GetSinglePlayerIdSetting& Request, const FDelegate_GetSinglePlayerIdSetting& Delegate = FDelegate_GetSinglePlayerIdSetting(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetSinglePlayerIdSettingResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetSinglePlayerIdSetting Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetSinglePlayerUuidSetting(const FRequest_GetSinglePlayerUuidSetting& Request, const FDelegate_GetSinglePlayerUuidSetting& Delegate = FDelegate_GetSinglePlayerUuidSetting(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetSinglePlayerUuidSettingResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetSinglePlayerUuidSetting Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetSinglePlayerUuidSettingSelf(const FRequest_GetSinglePlayerUuidSettingSelf& Request, const FDelegate_GetSinglePlayerUuidSettingSelf& Delegate = FDelegate_GetSinglePlayerUuidSettingSelf(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetSinglePlayerUuidSettingSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetSinglePlayerUuidSettingSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr SetSinglePlayerIdSetting(const FRequest_SetSinglePlayerIdSetting& Request, const FDelegate_SetSinglePlayerIdSetting& Delegate = FDelegate_SetSinglePlayerIdSetting(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnSetSinglePlayerIdSettingResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SetSinglePlayerIdSetting Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr SetSinglePlayerUuidSetting(const FRequest_SetSinglePlayerUuidSetting& Request, const FDelegate_SetSinglePlayerUuidSetting& Delegate = FDelegate_SetSinglePlayerUuidSetting(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnSetSinglePlayerUuidSettingResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SetSinglePlayerUuidSetting Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr SetSinglePlayerUuidSettingSelf(const FRequest_SetSinglePlayerUuidSettingSelf& Request, const FDelegate_SetSinglePlayerUuidSettingSelf& Delegate = FDelegate_SetSinglePlayerUuidSettingSelf(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnSetSinglePlayerUuidSettingSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SetSinglePlayerUuidSettingSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};



}
