// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "StageEntityType.h"
#include "EntityMMBucketRunStatsUpdate.generated.h"

/** @defgroup RHAPI_EntityMMBucketRunStatsUpdate RallyHere API Model EntityMMBucketRunStatsUpdate
 *  @{
 */

/**
 * @brief 
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_EntityMMBucketRunStatsUpdate : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString Type1_Optional{  };
	/** @brief true if Type1_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Type1_IsSet{ false };
	/** @brief true if Type1_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Type1_IsNull{ false };
	/** @brief Gets the value of Type1_Optional, regardless of it having been set */
	FORCEINLINE FString& GetType1() { return Type1_Optional; }
	/** @brief Gets the value of Type1_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetType1() const { return Type1_Optional; }
	/** @brief Gets the value of Type1_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetType1(const FString& DefaultValue) const { if (Type1_IsSet) return Type1_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Type1_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetType1(FString& OutValue) const { if (Type1_IsSet && !Type1_IsNull) OutValue = Type1_Optional; return Type1_IsSet; }
	/** @brief Returns a pointer to Type1_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetType1OrNull() { if (Type1_IsSet) return (Type1_IsNull ? nullptr : &Type1_Optional); return nullptr; }
	/** @brief Returns a pointer to Type1_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetType1OrNull() const { if (Type1_IsSet) return (Type1_IsNull ? nullptr : &Type1_Optional); return nullptr; }
	/** @brief Sets the value of Type1_Optional and also sets Type1_IsSet to true */
	FORCEINLINE void SetType1(const FString& NewValue) { Type1_Optional = NewValue; Type1_IsSet = true; Type1_IsNull = false; }
	/** @brief Sets the value of Type1_Optional and also sets Type1_IsSet to true using move semantics */
	FORCEINLINE void SetType1(FString&& NewValue) { Type1_Optional = NewValue; Type1_IsSet = true; Type1_IsNull = false; }
	/** @brief Clears the value of Type1_Optional and sets Type1_IsSet to false */
	void ClearType1() { Type1_IsSet = false; Type1_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetType1ToNull() { Type1_IsSet = true; Type1_IsNull = true; }
	/** @brief Checks whether Type1_Optional is set to null */
	FORCEINLINE bool IsType1Null() const { return Type1_IsSet && Type1_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString Type2_Optional{  };
	/** @brief true if Type2_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Type2_IsSet{ false };
	/** @brief true if Type2_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Type2_IsNull{ false };
	/** @brief Gets the value of Type2_Optional, regardless of it having been set */
	FORCEINLINE FString& GetType2() { return Type2_Optional; }
	/** @brief Gets the value of Type2_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetType2() const { return Type2_Optional; }
	/** @brief Gets the value of Type2_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetType2(const FString& DefaultValue) const { if (Type2_IsSet) return Type2_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Type2_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetType2(FString& OutValue) const { if (Type2_IsSet && !Type2_IsNull) OutValue = Type2_Optional; return Type2_IsSet; }
	/** @brief Returns a pointer to Type2_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetType2OrNull() { if (Type2_IsSet) return (Type2_IsNull ? nullptr : &Type2_Optional); return nullptr; }
	/** @brief Returns a pointer to Type2_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetType2OrNull() const { if (Type2_IsSet) return (Type2_IsNull ? nullptr : &Type2_Optional); return nullptr; }
	/** @brief Sets the value of Type2_Optional and also sets Type2_IsSet to true */
	FORCEINLINE void SetType2(const FString& NewValue) { Type2_Optional = NewValue; Type2_IsSet = true; Type2_IsNull = false; }
	/** @brief Sets the value of Type2_Optional and also sets Type2_IsSet to true using move semantics */
	FORCEINLINE void SetType2(FString&& NewValue) { Type2_Optional = NewValue; Type2_IsSet = true; Type2_IsNull = false; }
	/** @brief Clears the value of Type2_Optional and sets Type2_IsSet to false */
	void ClearType2() { Type2_IsSet = false; Type2_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetType2ToNull() { Type2_IsSet = true; Type2_IsNull = true; }
	/** @brief Checks whether Type2_Optional is set to null */
	FORCEINLINE bool IsType2Null() const { return Type2_IsSet && Type2_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString Type3_Optional{  };
	/** @brief true if Type3_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Type3_IsSet{ false };
	/** @brief true if Type3_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Type3_IsNull{ false };
	/** @brief Gets the value of Type3_Optional, regardless of it having been set */
	FORCEINLINE FString& GetType3() { return Type3_Optional; }
	/** @brief Gets the value of Type3_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetType3() const { return Type3_Optional; }
	/** @brief Gets the value of Type3_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetType3(const FString& DefaultValue) const { if (Type3_IsSet) return Type3_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Type3_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetType3(FString& OutValue) const { if (Type3_IsSet && !Type3_IsNull) OutValue = Type3_Optional; return Type3_IsSet; }
	/** @brief Returns a pointer to Type3_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetType3OrNull() { if (Type3_IsSet) return (Type3_IsNull ? nullptr : &Type3_Optional); return nullptr; }
	/** @brief Returns a pointer to Type3_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetType3OrNull() const { if (Type3_IsSet) return (Type3_IsNull ? nullptr : &Type3_Optional); return nullptr; }
	/** @brief Sets the value of Type3_Optional and also sets Type3_IsSet to true */
	FORCEINLINE void SetType3(const FString& NewValue) { Type3_Optional = NewValue; Type3_IsSet = true; Type3_IsNull = false; }
	/** @brief Sets the value of Type3_Optional and also sets Type3_IsSet to true using move semantics */
	FORCEINLINE void SetType3(FString&& NewValue) { Type3_Optional = NewValue; Type3_IsSet = true; Type3_IsNull = false; }
	/** @brief Clears the value of Type3_Optional and sets Type3_IsSet to false */
	void ClearType3() { Type3_IsSet = false; Type3_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetType3ToNull() { Type3_IsSet = true; Type3_IsNull = true; }
	/** @brief Checks whether Type3_Optional is set to null */
	FORCEINLINE bool IsType3Null() const { return Type3_IsSet && Type3_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString Type4_Optional{  };
	/** @brief true if Type4_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Type4_IsSet{ false };
	/** @brief true if Type4_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Type4_IsNull{ false };
	/** @brief Gets the value of Type4_Optional, regardless of it having been set */
	FORCEINLINE FString& GetType4() { return Type4_Optional; }
	/** @brief Gets the value of Type4_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetType4() const { return Type4_Optional; }
	/** @brief Gets the value of Type4_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetType4(const FString& DefaultValue) const { if (Type4_IsSet) return Type4_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Type4_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetType4(FString& OutValue) const { if (Type4_IsSet && !Type4_IsNull) OutValue = Type4_Optional; return Type4_IsSet; }
	/** @brief Returns a pointer to Type4_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetType4OrNull() { if (Type4_IsSet) return (Type4_IsNull ? nullptr : &Type4_Optional); return nullptr; }
	/** @brief Returns a pointer to Type4_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetType4OrNull() const { if (Type4_IsSet) return (Type4_IsNull ? nullptr : &Type4_Optional); return nullptr; }
	/** @brief Sets the value of Type4_Optional and also sets Type4_IsSet to true */
	FORCEINLINE void SetType4(const FString& NewValue) { Type4_Optional = NewValue; Type4_IsSet = true; Type4_IsNull = false; }
	/** @brief Sets the value of Type4_Optional and also sets Type4_IsSet to true using move semantics */
	FORCEINLINE void SetType4(FString&& NewValue) { Type4_Optional = NewValue; Type4_IsSet = true; Type4_IsNull = false; }
	/** @brief Clears the value of Type4_Optional and sets Type4_IsSet to false */
	void ClearType4() { Type4_IsSet = false; Type4_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetType4ToNull() { Type4_IsSet = true; Type4_IsNull = true; }
	/** @brief Checks whether Type4_Optional is set to null */
	FORCEINLINE bool IsType4Null() const { return Type4_IsSet && Type4_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	ERHAPI_StageEntityType EntityType{  };
	/** @brief Gets the value of EntityType */
	FORCEINLINE ERHAPI_StageEntityType& GetEntityType() { return EntityType; }
	/** @brief Gets the value of EntityType */
	FORCEINLINE const ERHAPI_StageEntityType& GetEntityType() const { return EntityType; }
	/** @brief Sets the value of EntityType */
	FORCEINLINE void SetEntityType(const ERHAPI_StageEntityType& NewValue) { EntityType = NewValue;   }
	/** @brief Sets the value of EntityType using move semantics */
	FORCEINLINE void SetEntityType(ERHAPI_StageEntityType&& NewValue) { EntityType = NewValue;   }

	/** @brief Entity ID */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString EntityId{  };
	/** @brief Gets the value of EntityId */
	FORCEINLINE FString& GetEntityId() { return EntityId; }
	/** @brief Gets the value of EntityId */
	FORCEINLINE const FString& GetEntityId() const { return EntityId; }
	/** @brief Sets the value of EntityId */
	FORCEINLINE void SetEntityId(const FString& NewValue) { EntityId = NewValue;   }
	/** @brief Sets the value of EntityId using move semantics */
	FORCEINLINE void SetEntityId(FString&& NewValue) { EntityId = NewValue;   }

	/** @brief Total number of stages won */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 StageWins_Optional{ 0 };
	/** @brief true if StageWins_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool StageWins_IsSet{ false };
	/** @brief Gets the value of StageWins_Optional, regardless of it having been set */
	FORCEINLINE int32& GetStageWins() { return StageWins_Optional; }
	/** @brief Gets the value of StageWins_Optional, regardless of it having been set */
	FORCEINLINE const int32& GetStageWins() const { return StageWins_Optional; }
	/** @brief Gets the value of StageWins_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const int32& GetStageWins(const int32& DefaultValue) const { if (StageWins_IsSet) return StageWins_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of StageWins_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetStageWins(int32& OutValue) const { if (StageWins_IsSet) OutValue = StageWins_Optional; return StageWins_IsSet; }
	/** @brief Returns a pointer to StageWins_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE int32* GetStageWinsOrNull() { if (StageWins_IsSet) return (&StageWins_Optional); return nullptr; }
	/** @brief Returns a pointer to StageWins_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const int32* GetStageWinsOrNull() const { if (StageWins_IsSet) return (&StageWins_Optional); return nullptr; }
	/** @brief Sets the value of StageWins_Optional and also sets StageWins_IsSet to true */
	FORCEINLINE void SetStageWins(const int32& NewValue) { StageWins_Optional = NewValue; StageWins_IsSet = true;  }
	/** @brief Sets the value of StageWins_Optional and also sets StageWins_IsSet to true using move semantics */
	FORCEINLINE void SetStageWins(int32&& NewValue) { StageWins_Optional = NewValue; StageWins_IsSet = true;  }
	/** @brief Clears the value of StageWins_Optional and sets StageWins_IsSet to false */
	void ClearStageWins() { StageWins_Optional = 0; StageWins_IsSet = false;  }
	/** @brief Returns the default value of StageWins */
	FORCEINLINE int32 GetDefaultValue_StageWins() { return 0; }

	/** @brief Total number of stages lost */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 StageLosses_Optional{ 0 };
	/** @brief true if StageLosses_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool StageLosses_IsSet{ false };
	/** @brief Gets the value of StageLosses_Optional, regardless of it having been set */
	FORCEINLINE int32& GetStageLosses() { return StageLosses_Optional; }
	/** @brief Gets the value of StageLosses_Optional, regardless of it having been set */
	FORCEINLINE const int32& GetStageLosses() const { return StageLosses_Optional; }
	/** @brief Gets the value of StageLosses_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const int32& GetStageLosses(const int32& DefaultValue) const { if (StageLosses_IsSet) return StageLosses_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of StageLosses_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetStageLosses(int32& OutValue) const { if (StageLosses_IsSet) OutValue = StageLosses_Optional; return StageLosses_IsSet; }
	/** @brief Returns a pointer to StageLosses_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE int32* GetStageLossesOrNull() { if (StageLosses_IsSet) return (&StageLosses_Optional); return nullptr; }
	/** @brief Returns a pointer to StageLosses_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const int32* GetStageLossesOrNull() const { if (StageLosses_IsSet) return (&StageLosses_Optional); return nullptr; }
	/** @brief Sets the value of StageLosses_Optional and also sets StageLosses_IsSet to true */
	FORCEINLINE void SetStageLosses(const int32& NewValue) { StageLosses_Optional = NewValue; StageLosses_IsSet = true;  }
	/** @brief Sets the value of StageLosses_Optional and also sets StageLosses_IsSet to true using move semantics */
	FORCEINLINE void SetStageLosses(int32&& NewValue) { StageLosses_Optional = NewValue; StageLosses_IsSet = true;  }
	/** @brief Clears the value of StageLosses_Optional and sets StageLosses_IsSet to false */
	void ClearStageLosses() { StageLosses_Optional = 0; StageLosses_IsSet = false;  }
	/** @brief Returns the default value of StageLosses */
	FORCEINLINE int32 GetDefaultValue_StageLosses() { return 0; }

	/** @brief Total number of stages incomplete */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 StageIncompletes_Optional{ 0 };
	/** @brief true if StageIncompletes_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool StageIncompletes_IsSet{ false };
	/** @brief Gets the value of StageIncompletes_Optional, regardless of it having been set */
	FORCEINLINE int32& GetStageIncompletes() { return StageIncompletes_Optional; }
	/** @brief Gets the value of StageIncompletes_Optional, regardless of it having been set */
	FORCEINLINE const int32& GetStageIncompletes() const { return StageIncompletes_Optional; }
	/** @brief Gets the value of StageIncompletes_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const int32& GetStageIncompletes(const int32& DefaultValue) const { if (StageIncompletes_IsSet) return StageIncompletes_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of StageIncompletes_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetStageIncompletes(int32& OutValue) const { if (StageIncompletes_IsSet) OutValue = StageIncompletes_Optional; return StageIncompletes_IsSet; }
	/** @brief Returns a pointer to StageIncompletes_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE int32* GetStageIncompletesOrNull() { if (StageIncompletes_IsSet) return (&StageIncompletes_Optional); return nullptr; }
	/** @brief Returns a pointer to StageIncompletes_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const int32* GetStageIncompletesOrNull() const { if (StageIncompletes_IsSet) return (&StageIncompletes_Optional); return nullptr; }
	/** @brief Sets the value of StageIncompletes_Optional and also sets StageIncompletes_IsSet to true */
	FORCEINLINE void SetStageIncompletes(const int32& NewValue) { StageIncompletes_Optional = NewValue; StageIncompletes_IsSet = true;  }
	/** @brief Sets the value of StageIncompletes_Optional and also sets StageIncompletes_IsSet to true using move semantics */
	FORCEINLINE void SetStageIncompletes(int32&& NewValue) { StageIncompletes_Optional = NewValue; StageIncompletes_IsSet = true;  }
	/** @brief Clears the value of StageIncompletes_Optional and sets StageIncompletes_IsSet to false */
	void ClearStageIncompletes() { StageIncompletes_Optional = 0; StageIncompletes_IsSet = false;  }
	/** @brief Returns the default value of StageIncompletes */
	FORCEINLINE int32 GetDefaultValue_StageIncompletes() { return 0; }

	/** @brief Total number of successful runs */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 RunWins_Optional{ 0 };
	/** @brief true if RunWins_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool RunWins_IsSet{ false };
	/** @brief Gets the value of RunWins_Optional, regardless of it having been set */
	FORCEINLINE int32& GetRunWins() { return RunWins_Optional; }
	/** @brief Gets the value of RunWins_Optional, regardless of it having been set */
	FORCEINLINE const int32& GetRunWins() const { return RunWins_Optional; }
	/** @brief Gets the value of RunWins_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const int32& GetRunWins(const int32& DefaultValue) const { if (RunWins_IsSet) return RunWins_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of RunWins_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetRunWins(int32& OutValue) const { if (RunWins_IsSet) OutValue = RunWins_Optional; return RunWins_IsSet; }
	/** @brief Returns a pointer to RunWins_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE int32* GetRunWinsOrNull() { if (RunWins_IsSet) return (&RunWins_Optional); return nullptr; }
	/** @brief Returns a pointer to RunWins_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const int32* GetRunWinsOrNull() const { if (RunWins_IsSet) return (&RunWins_Optional); return nullptr; }
	/** @brief Sets the value of RunWins_Optional and also sets RunWins_IsSet to true */
	FORCEINLINE void SetRunWins(const int32& NewValue) { RunWins_Optional = NewValue; RunWins_IsSet = true;  }
	/** @brief Sets the value of RunWins_Optional and also sets RunWins_IsSet to true using move semantics */
	FORCEINLINE void SetRunWins(int32&& NewValue) { RunWins_Optional = NewValue; RunWins_IsSet = true;  }
	/** @brief Clears the value of RunWins_Optional and sets RunWins_IsSet to false */
	void ClearRunWins() { RunWins_Optional = 0; RunWins_IsSet = false;  }
	/** @brief Returns the default value of RunWins */
	FORCEINLINE int32 GetDefaultValue_RunWins() { return 0; }

	/** @brief Total number of failed runs */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 RunLosses_Optional{ 0 };
	/** @brief true if RunLosses_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool RunLosses_IsSet{ false };
	/** @brief Gets the value of RunLosses_Optional, regardless of it having been set */
	FORCEINLINE int32& GetRunLosses() { return RunLosses_Optional; }
	/** @brief Gets the value of RunLosses_Optional, regardless of it having been set */
	FORCEINLINE const int32& GetRunLosses() const { return RunLosses_Optional; }
	/** @brief Gets the value of RunLosses_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const int32& GetRunLosses(const int32& DefaultValue) const { if (RunLosses_IsSet) return RunLosses_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of RunLosses_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetRunLosses(int32& OutValue) const { if (RunLosses_IsSet) OutValue = RunLosses_Optional; return RunLosses_IsSet; }
	/** @brief Returns a pointer to RunLosses_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE int32* GetRunLossesOrNull() { if (RunLosses_IsSet) return (&RunLosses_Optional); return nullptr; }
	/** @brief Returns a pointer to RunLosses_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const int32* GetRunLossesOrNull() const { if (RunLosses_IsSet) return (&RunLosses_Optional); return nullptr; }
	/** @brief Sets the value of RunLosses_Optional and also sets RunLosses_IsSet to true */
	FORCEINLINE void SetRunLosses(const int32& NewValue) { RunLosses_Optional = NewValue; RunLosses_IsSet = true;  }
	/** @brief Sets the value of RunLosses_Optional and also sets RunLosses_IsSet to true using move semantics */
	FORCEINLINE void SetRunLosses(int32&& NewValue) { RunLosses_Optional = NewValue; RunLosses_IsSet = true;  }
	/** @brief Clears the value of RunLosses_Optional and sets RunLosses_IsSet to false */
	void ClearRunLosses() { RunLosses_Optional = 0; RunLosses_IsSet = false;  }
	/** @brief Returns the default value of RunLosses */
	FORCEINLINE int32 GetDefaultValue_RunLosses() { return 0; }

	/** @brief Total number of runs */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 RunCount_Optional{ 0 };
	/** @brief true if RunCount_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool RunCount_IsSet{ false };
	/** @brief Gets the value of RunCount_Optional, regardless of it having been set */
	FORCEINLINE int32& GetRunCount() { return RunCount_Optional; }
	/** @brief Gets the value of RunCount_Optional, regardless of it having been set */
	FORCEINLINE const int32& GetRunCount() const { return RunCount_Optional; }
	/** @brief Gets the value of RunCount_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const int32& GetRunCount(const int32& DefaultValue) const { if (RunCount_IsSet) return RunCount_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of RunCount_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetRunCount(int32& OutValue) const { if (RunCount_IsSet) OutValue = RunCount_Optional; return RunCount_IsSet; }
	/** @brief Returns a pointer to RunCount_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE int32* GetRunCountOrNull() { if (RunCount_IsSet) return (&RunCount_Optional); return nullptr; }
	/** @brief Returns a pointer to RunCount_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const int32* GetRunCountOrNull() const { if (RunCount_IsSet) return (&RunCount_Optional); return nullptr; }
	/** @brief Sets the value of RunCount_Optional and also sets RunCount_IsSet to true */
	FORCEINLINE void SetRunCount(const int32& NewValue) { RunCount_Optional = NewValue; RunCount_IsSet = true;  }
	/** @brief Sets the value of RunCount_Optional and also sets RunCount_IsSet to true using move semantics */
	FORCEINLINE void SetRunCount(int32&& NewValue) { RunCount_Optional = NewValue; RunCount_IsSet = true;  }
	/** @brief Clears the value of RunCount_Optional and sets RunCount_IsSet to false */
	void ClearRunCount() { RunCount_Optional = 0; RunCount_IsSet = false;  }
	/** @brief Returns the default value of RunCount */
	FORCEINLINE int32 GetDefaultValue_RunCount() { return 0; }

	/** @brief Total number of placement matches this player has played for this MM bucket */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 PlacementsComplete_Optional{ 0 };
	/** @brief true if PlacementsComplete_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool PlacementsComplete_IsSet{ false };
	/** @brief Gets the value of PlacementsComplete_Optional, regardless of it having been set */
	FORCEINLINE int32& GetPlacementsComplete() { return PlacementsComplete_Optional; }
	/** @brief Gets the value of PlacementsComplete_Optional, regardless of it having been set */
	FORCEINLINE const int32& GetPlacementsComplete() const { return PlacementsComplete_Optional; }
	/** @brief Gets the value of PlacementsComplete_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const int32& GetPlacementsComplete(const int32& DefaultValue) const { if (PlacementsComplete_IsSet) return PlacementsComplete_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of PlacementsComplete_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetPlacementsComplete(int32& OutValue) const { if (PlacementsComplete_IsSet) OutValue = PlacementsComplete_Optional; return PlacementsComplete_IsSet; }
	/** @brief Returns a pointer to PlacementsComplete_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE int32* GetPlacementsCompleteOrNull() { if (PlacementsComplete_IsSet) return (&PlacementsComplete_Optional); return nullptr; }
	/** @brief Returns a pointer to PlacementsComplete_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const int32* GetPlacementsCompleteOrNull() const { if (PlacementsComplete_IsSet) return (&PlacementsComplete_Optional); return nullptr; }
	/** @brief Sets the value of PlacementsComplete_Optional and also sets PlacementsComplete_IsSet to true */
	FORCEINLINE void SetPlacementsComplete(const int32& NewValue) { PlacementsComplete_Optional = NewValue; PlacementsComplete_IsSet = true;  }
	/** @brief Sets the value of PlacementsComplete_Optional and also sets PlacementsComplete_IsSet to true using move semantics */
	FORCEINLINE void SetPlacementsComplete(int32&& NewValue) { PlacementsComplete_Optional = NewValue; PlacementsComplete_IsSet = true;  }
	/** @brief Clears the value of PlacementsComplete_Optional and sets PlacementsComplete_IsSet to false */
	void ClearPlacementsComplete() { PlacementsComplete_Optional = 0; PlacementsComplete_IsSet = false;  }
	/** @brief Returns the default value of PlacementsComplete */
	FORCEINLINE int32 GetDefaultValue_PlacementsComplete() { return 0; }

	/** @brief Internal MMR used for comparison against other players during matchmaking */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	float MmrInternal_Optional{  };
	/** @brief true if MmrInternal_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool MmrInternal_IsSet{ false };
	/** @brief Gets the value of MmrInternal_Optional, regardless of it having been set */
	FORCEINLINE float& GetMmrInternal() { return MmrInternal_Optional; }
	/** @brief Gets the value of MmrInternal_Optional, regardless of it having been set */
	FORCEINLINE const float& GetMmrInternal() const { return MmrInternal_Optional; }
	/** @brief Gets the value of MmrInternal_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const float& GetMmrInternal(const float& DefaultValue) const { if (MmrInternal_IsSet) return MmrInternal_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of MmrInternal_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetMmrInternal(float& OutValue) const { if (MmrInternal_IsSet) OutValue = MmrInternal_Optional; return MmrInternal_IsSet; }
	/** @brief Returns a pointer to MmrInternal_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE float* GetMmrInternalOrNull() { if (MmrInternal_IsSet) return (&MmrInternal_Optional); return nullptr; }
	/** @brief Returns a pointer to MmrInternal_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const float* GetMmrInternalOrNull() const { if (MmrInternal_IsSet) return (&MmrInternal_Optional); return nullptr; }
	/** @brief Sets the value of MmrInternal_Optional and also sets MmrInternal_IsSet to true */
	FORCEINLINE void SetMmrInternal(const float& NewValue) { MmrInternal_Optional = NewValue; MmrInternal_IsSet = true;  }
	/** @brief Sets the value of MmrInternal_Optional and also sets MmrInternal_IsSet to true using move semantics */
	FORCEINLINE void SetMmrInternal(float&& NewValue) { MmrInternal_Optional = NewValue; MmrInternal_IsSet = true;  }
	/** @brief Clears the value of MmrInternal_Optional and sets MmrInternal_IsSet to false */
	void ClearMmrInternal() { MmrInternal_IsSet = false;  }

	/** @brief Visual MMR used for progression tracking in the matchmaking system */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	float MmrVis_Optional{  };
	/** @brief true if MmrVis_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool MmrVis_IsSet{ false };
	/** @brief Gets the value of MmrVis_Optional, regardless of it having been set */
	FORCEINLINE float& GetMmrVis() { return MmrVis_Optional; }
	/** @brief Gets the value of MmrVis_Optional, regardless of it having been set */
	FORCEINLINE const float& GetMmrVis() const { return MmrVis_Optional; }
	/** @brief Gets the value of MmrVis_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const float& GetMmrVis(const float& DefaultValue) const { if (MmrVis_IsSet) return MmrVis_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of MmrVis_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetMmrVis(float& OutValue) const { if (MmrVis_IsSet) OutValue = MmrVis_Optional; return MmrVis_IsSet; }
	/** @brief Returns a pointer to MmrVis_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE float* GetMmrVisOrNull() { if (MmrVis_IsSet) return (&MmrVis_Optional); return nullptr; }
	/** @brief Returns a pointer to MmrVis_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const float* GetMmrVisOrNull() const { if (MmrVis_IsSet) return (&MmrVis_Optional); return nullptr; }
	/** @brief Sets the value of MmrVis_Optional and also sets MmrVis_IsSet to true */
	FORCEINLINE void SetMmrVis(const float& NewValue) { MmrVis_Optional = NewValue; MmrVis_IsSet = true;  }
	/** @brief Sets the value of MmrVis_Optional and also sets MmrVis_IsSet to true using move semantics */
	FORCEINLINE void SetMmrVis(float&& NewValue) { MmrVis_Optional = NewValue; MmrVis_IsSet = true;  }
	/** @brief Clears the value of MmrVis_Optional and sets MmrVis_IsSet to false */
	void ClearMmrVis() { MmrVis_IsSet = false;  }
};

/** @} */
