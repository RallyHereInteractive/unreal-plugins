// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "KVV1.generated.h"

/** @defgroup RHAPI_KVV1 RallyHere API Model KVV1
 *  @{
 */

/**
 * @brief A key/value pair that represents a setting to be used by the client.
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_KVV1 : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	/** @brief The key for the setting */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString Key{  };
	/** @brief Gets the value of Key */
	FORCEINLINE FString& GetKey() { return Key; }
	/** @brief Gets the value of Key */
	FORCEINLINE const FString& GetKey() const { return Key; }
	/** @brief Sets the value of Key */
	FORCEINLINE void SetKey(const FString& NewValue) { Key = NewValue;   }
	/** @brief Sets the value of Key using move semantics */
	FORCEINLINE void SetKey(FString&& NewValue) { Key = NewValue;   }

	/** @brief The value for the setting */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString Value{  };
	/** @brief Gets the value of Value */
	FORCEINLINE FString& GetValue() { return Value; }
	/** @brief Gets the value of Value */
	FORCEINLINE const FString& GetValue() const { return Value; }
	/** @brief Sets the value of Value */
	FORCEINLINE void SetValue(const FString& NewValue) { Value = NewValue;   }
	/** @brief Sets the value of Value using move semantics */
	FORCEINLINE void SetValue(FString&& NewValue) { Value = NewValue;   }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString Notes_Optional{  };
	/** @brief true if Notes_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Notes_IsSet{ false };
	/** @brief true if Notes_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Notes_IsNull{ false };
	/** @brief Gets the value of Notes_Optional, regardless of it having been set */
	FORCEINLINE FString& GetNotes() { return Notes_Optional; }
	/** @brief Gets the value of Notes_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetNotes() const { return Notes_Optional; }
	/** @brief Gets the value of Notes_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetNotes(const FString& DefaultValue) const { if (Notes_IsSet) return Notes_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Notes_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetNotes(FString& OutValue) const { if (Notes_IsSet && !Notes_IsNull) OutValue = Notes_Optional; return Notes_IsSet; }
	/** @brief Returns a pointer to Notes_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetNotesOrNull() { if (Notes_IsSet) return (Notes_IsNull ? nullptr : &Notes_Optional); return nullptr; }
	/** @brief Returns a pointer to Notes_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetNotesOrNull() const { if (Notes_IsSet) return (Notes_IsNull ? nullptr : &Notes_Optional); return nullptr; }
	/** @brief Sets the value of Notes_Optional and also sets Notes_IsSet to true */
	FORCEINLINE void SetNotes(const FString& NewValue) { Notes_Optional = NewValue; Notes_IsSet = true; Notes_IsNull = false; }
	/** @brief Sets the value of Notes_Optional and also sets Notes_IsSet to true using move semantics */
	FORCEINLINE void SetNotes(FString&& NewValue) { Notes_Optional = NewValue; Notes_IsSet = true; Notes_IsNull = false; }
	/** @brief Clears the value of Notes_Optional and sets Notes_IsSet to false */
	void ClearNotes() { Notes_IsSet = false; Notes_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetNotesToNull() { Notes_IsSet = true; Notes_IsNull = true; }
	/** @brief Checks whether Notes_Optional is set to null */
	FORCEINLINE bool IsNotesNull() const { return Notes_IsSet && Notes_IsNull; }
};

/** @} */
