// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "CacheInfo.h"
#include "PriceBreakpoint.h"
#include "PricePoint.generated.h"

/** @defgroup RHAPI_PricePoint RallyHere API Model PricePoint
 *  @{
 */

/**
 * @brief A collection of Price Breakpoints (volume pricing).
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_PricePoint : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	/** @brief Custom data associated with the resource */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TMap<FString, FString> CustomData_Optional{  };
	/** @brief true if CustomData_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool CustomData_IsSet{ false };
	/** @brief Gets the value of CustomData_Optional, regardless of it having been set */
	FORCEINLINE TMap<FString, FString>& GetCustomData() { return CustomData_Optional; }
	/** @brief Gets the value of CustomData_Optional, regardless of it having been set */
	FORCEINLINE const TMap<FString, FString>& GetCustomData() const { return CustomData_Optional; }
	/** @brief Gets the value of CustomData_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const TMap<FString, FString>& GetCustomData(const TMap<FString, FString>& DefaultValue) const { if (CustomData_IsSet) return CustomData_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of CustomData_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetCustomData(TMap<FString, FString>& OutValue) const { if (CustomData_IsSet) OutValue = CustomData_Optional; return CustomData_IsSet; }
	/** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE TMap<FString, FString>* GetCustomDataOrNull() { if (CustomData_IsSet) return (&CustomData_Optional); return nullptr; }
	/** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const TMap<FString, FString>* GetCustomDataOrNull() const { if (CustomData_IsSet) return (&CustomData_Optional); return nullptr; }
	/** @brief Sets the value of CustomData_Optional and also sets CustomData_IsSet to true */
	FORCEINLINE void SetCustomData(const TMap<FString, FString>& NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true;  }
	/** @brief Sets the value of CustomData_Optional and also sets CustomData_IsSet to true using move semantics */
	FORCEINLINE void SetCustomData(TMap<FString, FString>&& NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true;  }
	/** @brief Clears the value of CustomData_Optional and sets CustomData_IsSet to false */
	void ClearCustomData() { CustomData_IsSet = false;  }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString Name_Optional{  };
	/** @brief true if Name_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Name_IsSet{ false };
	/** @brief true if Name_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Name_IsNull{ false };
	/** @brief Gets the value of Name_Optional, regardless of it having been set */
	FORCEINLINE FString& GetName() { return Name_Optional; }
	/** @brief Gets the value of Name_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetName() const { return Name_Optional; }
	/** @brief Gets the value of Name_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetName(const FString& DefaultValue) const { if (Name_IsSet) return Name_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Name_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetName(FString& OutValue) const { if (Name_IsSet && !Name_IsNull) OutValue = Name_Optional; return Name_IsSet; }
	/** @brief Returns a pointer to Name_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetNameOrNull() { if (Name_IsSet) return (Name_IsNull ? nullptr : &Name_Optional); return nullptr; }
	/** @brief Returns a pointer to Name_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetNameOrNull() const { if (Name_IsSet) return (Name_IsNull ? nullptr : &Name_Optional); return nullptr; }
	/** @brief Sets the value of Name_Optional and also sets Name_IsSet to true */
	FORCEINLINE void SetName(const FString& NewValue) { Name_Optional = NewValue; Name_IsSet = true; Name_IsNull = false; }
	/** @brief Sets the value of Name_Optional and also sets Name_IsSet to true using move semantics */
	FORCEINLINE void SetName(FString&& NewValue) { Name_Optional = NewValue; Name_IsSet = true; Name_IsNull = false; }
	/** @brief Clears the value of Name_Optional and sets Name_IsSet to false */
	void ClearName() { Name_IsSet = false; Name_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetNameToNull() { Name_IsSet = true; Name_IsNull = true; }
	/** @brief Checks whether Name_Optional is set to null */
	FORCEINLINE bool IsNameNull() const { return Name_IsSet && Name_IsNull; }

	/** @brief Forces the quantity to be equal to a quantity on a Price Breakpoint. */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool StrictFlag_Optional{ false };
	/** @brief true if StrictFlag_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool StrictFlag_IsSet{ false };
	/** @brief Gets the value of StrictFlag_Optional, regardless of it having been set */
	FORCEINLINE bool& GetStrictFlag() { return StrictFlag_Optional; }
	/** @brief Gets the value of StrictFlag_Optional, regardless of it having been set */
	FORCEINLINE const bool& GetStrictFlag() const { return StrictFlag_Optional; }
	/** @brief Gets the value of StrictFlag_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const bool& GetStrictFlag(const bool& DefaultValue) const { if (StrictFlag_IsSet) return StrictFlag_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of StrictFlag_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetStrictFlag(bool& OutValue) const { if (StrictFlag_IsSet) OutValue = StrictFlag_Optional; return StrictFlag_IsSet; }
	/** @brief Returns a pointer to StrictFlag_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE bool* GetStrictFlagOrNull() { if (StrictFlag_IsSet) return (&StrictFlag_Optional); return nullptr; }
	/** @brief Returns a pointer to StrictFlag_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const bool* GetStrictFlagOrNull() const { if (StrictFlag_IsSet) return (&StrictFlag_Optional); return nullptr; }
	/** @brief Sets the value of StrictFlag_Optional and also sets StrictFlag_IsSet to true */
	FORCEINLINE void SetStrictFlag(const bool& NewValue) { StrictFlag_Optional = NewValue; StrictFlag_IsSet = true;  }
	/** @brief Sets the value of StrictFlag_Optional and also sets StrictFlag_IsSet to true using move semantics */
	FORCEINLINE void SetStrictFlag(bool&& NewValue) { StrictFlag_Optional = NewValue; StrictFlag_IsSet = true;  }
	/** @brief Clears the value of StrictFlag_Optional and sets StrictFlag_IsSet to false */
	void ClearStrictFlag() { StrictFlag_Optional = false; StrictFlag_IsSet = false;  }
	/** @brief Returns the default value of StrictFlag */
	FORCEINLINE bool GetDefaultValue_StrictFlag() { return false; }

	/** @brief Only allows quantity to be fulfilled up the highest quantity on the Price Breakpoints */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool CapFlag_Optional{ false };
	/** @brief true if CapFlag_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool CapFlag_IsSet{ false };
	/** @brief Gets the value of CapFlag_Optional, regardless of it having been set */
	FORCEINLINE bool& GetCapFlag() { return CapFlag_Optional; }
	/** @brief Gets the value of CapFlag_Optional, regardless of it having been set */
	FORCEINLINE const bool& GetCapFlag() const { return CapFlag_Optional; }
	/** @brief Gets the value of CapFlag_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const bool& GetCapFlag(const bool& DefaultValue) const { if (CapFlag_IsSet) return CapFlag_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of CapFlag_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetCapFlag(bool& OutValue) const { if (CapFlag_IsSet) OutValue = CapFlag_Optional; return CapFlag_IsSet; }
	/** @brief Returns a pointer to CapFlag_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE bool* GetCapFlagOrNull() { if (CapFlag_IsSet) return (&CapFlag_Optional); return nullptr; }
	/** @brief Returns a pointer to CapFlag_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const bool* GetCapFlagOrNull() const { if (CapFlag_IsSet) return (&CapFlag_Optional); return nullptr; }
	/** @brief Sets the value of CapFlag_Optional and also sets CapFlag_IsSet to true */
	FORCEINLINE void SetCapFlag(const bool& NewValue) { CapFlag_Optional = NewValue; CapFlag_IsSet = true;  }
	/** @brief Sets the value of CapFlag_Optional and also sets CapFlag_IsSet to true using move semantics */
	FORCEINLINE void SetCapFlag(bool&& NewValue) { CapFlag_Optional = NewValue; CapFlag_IsSet = true;  }
	/** @brief Clears the value of CapFlag_Optional and sets CapFlag_IsSet to false */
	void ClearCapFlag() { CapFlag_Optional = false; CapFlag_IsSet = false;  }
	/** @brief Returns the default value of CapFlag */
	FORCEINLINE bool GetDefaultValue_CapFlag() { return false; }

	/** @brief Current Price Breakpoints. */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TArray<FRHAPI_PriceBreakpoint> CurrentBreakpoints_Optional{  };
	/** @brief true if CurrentBreakpoints_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool CurrentBreakpoints_IsSet{ false };
	/** @brief Gets the value of CurrentBreakpoints_Optional, regardless of it having been set */
	FORCEINLINE TArray<FRHAPI_PriceBreakpoint>& GetCurrentBreakpoints() { return CurrentBreakpoints_Optional; }
	/** @brief Gets the value of CurrentBreakpoints_Optional, regardless of it having been set */
	FORCEINLINE const TArray<FRHAPI_PriceBreakpoint>& GetCurrentBreakpoints() const { return CurrentBreakpoints_Optional; }
	/** @brief Gets the value of CurrentBreakpoints_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const TArray<FRHAPI_PriceBreakpoint>& GetCurrentBreakpoints(const TArray<FRHAPI_PriceBreakpoint>& DefaultValue) const { if (CurrentBreakpoints_IsSet) return CurrentBreakpoints_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of CurrentBreakpoints_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetCurrentBreakpoints(TArray<FRHAPI_PriceBreakpoint>& OutValue) const { if (CurrentBreakpoints_IsSet) OutValue = CurrentBreakpoints_Optional; return CurrentBreakpoints_IsSet; }
	/** @brief Returns a pointer to CurrentBreakpoints_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE TArray<FRHAPI_PriceBreakpoint>* GetCurrentBreakpointsOrNull() { if (CurrentBreakpoints_IsSet) return (&CurrentBreakpoints_Optional); return nullptr; }
	/** @brief Returns a pointer to CurrentBreakpoints_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const TArray<FRHAPI_PriceBreakpoint>* GetCurrentBreakpointsOrNull() const { if (CurrentBreakpoints_IsSet) return (&CurrentBreakpoints_Optional); return nullptr; }
	/** @brief Sets the value of CurrentBreakpoints_Optional and also sets CurrentBreakpoints_IsSet to true */
	FORCEINLINE void SetCurrentBreakpoints(const TArray<FRHAPI_PriceBreakpoint>& NewValue) { CurrentBreakpoints_Optional = NewValue; CurrentBreakpoints_IsSet = true;  }
	/** @brief Sets the value of CurrentBreakpoints_Optional and also sets CurrentBreakpoints_IsSet to true using move semantics */
	FORCEINLINE void SetCurrentBreakpoints(TArray<FRHAPI_PriceBreakpoint>&& NewValue) { CurrentBreakpoints_Optional = NewValue; CurrentBreakpoints_IsSet = true;  }
	/** @brief Clears the value of CurrentBreakpoints_Optional and sets CurrentBreakpoints_IsSet to false */
	void ClearCurrentBreakpoints() { CurrentBreakpoints_IsSet = false;  }

	/** @brief Previous Price Breakpoints. */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TArray<FRHAPI_PriceBreakpoint> PreSaleBreakpoints_Optional{  };
	/** @brief true if PreSaleBreakpoints_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool PreSaleBreakpoints_IsSet{ false };
	/** @brief Gets the value of PreSaleBreakpoints_Optional, regardless of it having been set */
	FORCEINLINE TArray<FRHAPI_PriceBreakpoint>& GetPreSaleBreakpoints() { return PreSaleBreakpoints_Optional; }
	/** @brief Gets the value of PreSaleBreakpoints_Optional, regardless of it having been set */
	FORCEINLINE const TArray<FRHAPI_PriceBreakpoint>& GetPreSaleBreakpoints() const { return PreSaleBreakpoints_Optional; }
	/** @brief Gets the value of PreSaleBreakpoints_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const TArray<FRHAPI_PriceBreakpoint>& GetPreSaleBreakpoints(const TArray<FRHAPI_PriceBreakpoint>& DefaultValue) const { if (PreSaleBreakpoints_IsSet) return PreSaleBreakpoints_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of PreSaleBreakpoints_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetPreSaleBreakpoints(TArray<FRHAPI_PriceBreakpoint>& OutValue) const { if (PreSaleBreakpoints_IsSet) OutValue = PreSaleBreakpoints_Optional; return PreSaleBreakpoints_IsSet; }
	/** @brief Returns a pointer to PreSaleBreakpoints_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE TArray<FRHAPI_PriceBreakpoint>* GetPreSaleBreakpointsOrNull() { if (PreSaleBreakpoints_IsSet) return (&PreSaleBreakpoints_Optional); return nullptr; }
	/** @brief Returns a pointer to PreSaleBreakpoints_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const TArray<FRHAPI_PriceBreakpoint>* GetPreSaleBreakpointsOrNull() const { if (PreSaleBreakpoints_IsSet) return (&PreSaleBreakpoints_Optional); return nullptr; }
	/** @brief Sets the value of PreSaleBreakpoints_Optional and also sets PreSaleBreakpoints_IsSet to true */
	FORCEINLINE void SetPreSaleBreakpoints(const TArray<FRHAPI_PriceBreakpoint>& NewValue) { PreSaleBreakpoints_Optional = NewValue; PreSaleBreakpoints_IsSet = true;  }
	/** @brief Sets the value of PreSaleBreakpoints_Optional and also sets PreSaleBreakpoints_IsSet to true using move semantics */
	FORCEINLINE void SetPreSaleBreakpoints(TArray<FRHAPI_PriceBreakpoint>&& NewValue) { PreSaleBreakpoints_Optional = NewValue; PreSaleBreakpoints_IsSet = true;  }
	/** @brief Clears the value of PreSaleBreakpoints_Optional and sets PreSaleBreakpoints_IsSet to false */
	void ClearPreSaleBreakpoints() { PreSaleBreakpoints_IsSet = false;  }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_CacheInfo CacheInfo_Optional{  };
	/** @brief true if CacheInfo_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool CacheInfo_IsSet{ false };
	/** @brief true if CacheInfo_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool CacheInfo_IsNull{ false };
	/** @brief Gets the value of CacheInfo_Optional, regardless of it having been set */
	FORCEINLINE FRHAPI_CacheInfo& GetCacheInfo() { return CacheInfo_Optional; }
	/** @brief Gets the value of CacheInfo_Optional, regardless of it having been set */
	FORCEINLINE const FRHAPI_CacheInfo& GetCacheInfo() const { return CacheInfo_Optional; }
	/** @brief Gets the value of CacheInfo_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FRHAPI_CacheInfo& GetCacheInfo(const FRHAPI_CacheInfo& DefaultValue) const { if (CacheInfo_IsSet) return CacheInfo_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of CacheInfo_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetCacheInfo(FRHAPI_CacheInfo& OutValue) const { if (CacheInfo_IsSet && !CacheInfo_IsNull) OutValue = CacheInfo_Optional; return CacheInfo_IsSet; }
	/** @brief Returns a pointer to CacheInfo_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FRHAPI_CacheInfo* GetCacheInfoOrNull() { if (CacheInfo_IsSet) return (CacheInfo_IsNull ? nullptr : &CacheInfo_Optional); return nullptr; }
	/** @brief Returns a pointer to CacheInfo_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FRHAPI_CacheInfo* GetCacheInfoOrNull() const { if (CacheInfo_IsSet) return (CacheInfo_IsNull ? nullptr : &CacheInfo_Optional); return nullptr; }
	/** @brief Sets the value of CacheInfo_Optional and also sets CacheInfo_IsSet to true */
	FORCEINLINE void SetCacheInfo(const FRHAPI_CacheInfo& NewValue) { CacheInfo_Optional = NewValue; CacheInfo_IsSet = true; CacheInfo_IsNull = false; }
	/** @brief Sets the value of CacheInfo_Optional and also sets CacheInfo_IsSet to true using move semantics */
	FORCEINLINE void SetCacheInfo(FRHAPI_CacheInfo&& NewValue) { CacheInfo_Optional = NewValue; CacheInfo_IsSet = true; CacheInfo_IsNull = false; }
	/** @brief Clears the value of CacheInfo_Optional and sets CacheInfo_IsSet to false */
	void ClearCacheInfo() { CacheInfo_IsSet = false; CacheInfo_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetCacheInfoToNull() { CacheInfo_IsSet = true; CacheInfo_IsNull = true; }
	/** @brief Checks whether CacheInfo_Optional is set to null */
	FORCEINLINE bool IsCacheInfoNull() const { return CacheInfo_IsSet && CacheInfo_IsNull; }
};

/** @} */
