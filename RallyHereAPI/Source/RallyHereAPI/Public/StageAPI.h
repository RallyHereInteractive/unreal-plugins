// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereAPIAuthContext.h"
#include "RallyHereAPIHelpers.h"
#include "SortDirection.h"
#include "StageEntityType.h"
#include "StageSearchSort.h"
#include "EntityMMBucketRunStats.h"
#include "EntityMMBucketRunStatsMulti.h"
#include "EntityMMBucketRunStatsUpdate.h"
#include "EntityRunCompleteRequest.h"
#include "HTTPValidationError.h"
#include "HzApiErrorModel.h"
#include "MMRStats.h"
#include "Stage.h"
#include "StageCreateRequest.h"
#include "StageMatchmakeParams.h"
#include "StageSearchResults.h"
#include "StageUpdate.h"

namespace RallyHereAPI
{
using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

// forward declaration
class FStageAPI;

/**
 * @brief Create Stages
 * Create many stages
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `stage:*`, `stage:write:any`
 * 
 * - For the player themselves : `stage:write:self`
*/
struct RALLYHEREAPI_API FRequest_CreateStages : public FRequest
{
	FRequest_CreateStages();
	virtual ~FRequest_CreateStages() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FRHAPI_StageCreateRequest StageCreateRequest;
};

/** The response type for FRequest_CreateStages */
struct RALLYHEREAPI_API FResponse_CreateStages : public FResponseAccessorTemplate<FRHAPI_JsonObject, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_JsonObject, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_CreateStages(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_CreateStages() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_JsonObject Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_JsonObject& OutContent) const { return TryGetContent<FRHAPI_JsonObject>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_JsonObject>& OutContent) const { return TryGetContent<FRHAPI_JsonObject>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_JsonObject* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_JsonObject>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_JsonObject> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_JsonObject>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_JsonObject& OutContent) const;

	/* Response 400
	 Error Codes: - `invalid_owner` - Owner of the requested stage is invalid.  Ensure the type is correct and the id is non-empty 
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_CreateStages */
DECLARE_DELEGATE_OneParam(FDelegate_CreateStages, const FResponse_CreateStages&);

/** @brief A helper metadata object for CreateStages that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_CreateStages
{
	/** The request type */
	typedef FRequest_CreateStages Request;
	/** The response type */
	typedef FResponse_CreateStages Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_CreateStages Delegate;
	/** The API object that supports this API call */
	typedef FStageAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Delete Stage
 * Create or Update a stage by ID
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `stage:*`, `stage:write:any`
 * 
 * - For the player themselves : `stage:write:self`
*/
struct RALLYHEREAPI_API FRequest_DeleteStage : public FRequest
{
	FRequest_DeleteStage();
	virtual ~FRequest_DeleteStage() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString StageId;
};

/** The response type for FRequest_DeleteStage */
struct RALLYHEREAPI_API FResponse_DeleteStage : public FResponseAccessorTemplate<FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_DeleteStage(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_DeleteStage() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT

#endif //ALLOW_LEGACY_RESPONSE_CONTENT


	// Individual Response Helpers	
	/* Response 204
	Successful Response
	*/

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_DeleteStage */
DECLARE_DELEGATE_OneParam(FDelegate_DeleteStage, const FResponse_DeleteStage&);

/** @brief A helper metadata object for DeleteStage that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_DeleteStage
{
	/** The request type */
	typedef FRequest_DeleteStage Request;
	/** The response type */
	typedef FResponse_DeleteStage Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_DeleteStage Delegate;
	/** The API object that supports this API call */
	typedef FStageAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Entity Run Stats
 * Get the aggregated stats about an entity for specific matchmaking bucket(s)
 * 
 * Required Permissions:
 * 
 * - For any entity (including themselves) any of: `stage:*`, `stage:stats:read:any`
 * 
 * - For the entity themselves : `stage:stats:read:self`
*/
struct RALLYHEREAPI_API FRequest_GetEntityRunStats : public FRequest
{
	FRequest_GetEntityRunStats();
	virtual ~FRequest_GetEntityRunStats() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	ERHAPI_StageEntityType EntityType;
	FString EntityId;
	TOptional<FString> Type1;
	TOptional<FString> Type2;
	TOptional<FString> Type3;
	TOptional<FString> Type4;
};

/** The response type for FRequest_GetEntityRunStats */
struct RALLYHEREAPI_API FResponse_GetEntityRunStats : public FResponseAccessorTemplate<FRHAPI_EntityMMBucketRunStatsMulti, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_EntityMMBucketRunStatsMulti, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetEntityRunStats(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetEntityRunStats() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_EntityMMBucketRunStatsMulti Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_EntityMMBucketRunStatsMulti& OutContent) const { return TryGetContent<FRHAPI_EntityMMBucketRunStatsMulti>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_EntityMMBucketRunStatsMulti>& OutContent) const { return TryGetContent<FRHAPI_EntityMMBucketRunStatsMulti>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_EntityMMBucketRunStatsMulti* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_EntityMMBucketRunStatsMulti>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_EntityMMBucketRunStatsMulti> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_EntityMMBucketRunStatsMulti>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_EntityMMBucketRunStatsMulti& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetEntityRunStats */
DECLARE_DELEGATE_OneParam(FDelegate_GetEntityRunStats, const FResponse_GetEntityRunStats&);

/** @brief A helper metadata object for GetEntityRunStats that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetEntityRunStats
{
	/** The request type */
	typedef FRequest_GetEntityRunStats Request;
	/** The response type */
	typedef FResponse_GetEntityRunStats Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetEntityRunStats Delegate;
	/** The API object that supports this API call */
	typedef FStageAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Mmr Stats
 * Calculate stats about MMR bucket density
 * 
 * Required Permissions:
 * 
 * - For any entity (including themselves) : `stage:*`
*/
struct RALLYHEREAPI_API FRequest_GetMmrStats : public FRequest
{
	FRequest_GetMmrStats();
	virtual ~FRequest_GetMmrStats() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	TOptional<TArray<float>> Buckets;
};

/** The response type for FRequest_GetMmrStats */
struct RALLYHEREAPI_API FResponse_GetMmrStats : public FResponseAccessorTemplate<FRHAPI_MMRStats, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_MMRStats, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetMmrStats(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetMmrStats() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_MMRStats Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_MMRStats& OutContent) const { return TryGetContent<FRHAPI_MMRStats>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_MMRStats>& OutContent) const { return TryGetContent<FRHAPI_MMRStats>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_MMRStats* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_MMRStats>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_MMRStats> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_MMRStats>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_MMRStats& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetMmrStats */
DECLARE_DELEGATE_OneParam(FDelegate_GetMmrStats, const FResponse_GetMmrStats&);

/** @brief A helper metadata object for GetMmrStats that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetMmrStats
{
	/** The request type */
	typedef FRequest_GetMmrStats Request;
	/** The response type */
	typedef FResponse_GetMmrStats Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetMmrStats Delegate;
	/** The API object that supports this API call */
	typedef FStageAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Stage
 * Get a stage by stage_id
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `stage:*`, `stage:read:any`
 * 
 * - For the player themselves : `stage:read:self`
*/
struct RALLYHEREAPI_API FRequest_GetStage : public FRequest
{
	FRequest_GetStage();
	virtual ~FRequest_GetStage() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString StageId;
};

/** The response type for FRequest_GetStage */
struct RALLYHEREAPI_API FResponse_GetStage : public FResponseAccessorTemplate<FRHAPI_Stage, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_Stage, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetStage(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetStage() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_Stage Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_Stage& OutContent) const { return TryGetContent<FRHAPI_Stage>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_Stage>& OutContent) const { return TryGetContent<FRHAPI_Stage>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_Stage* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_Stage>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_Stage> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_Stage>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_Stage& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	 Error Codes: - `not_found` - No data found 
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetStage */
DECLARE_DELEGATE_OneParam(FDelegate_GetStage, const FResponse_GetStage&);

/** @brief A helper metadata object for GetStage that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetStage
{
	/** The request type */
	typedef FRequest_GetStage Request;
	/** The response type */
	typedef FResponse_GetStage Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetStage Delegate;
	/** The API object that supports this API call */
	typedef FStageAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Matchmake Stage
 * Matchmake against the requested parameters to find a stage to play against
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `stage:*`, `stage:matchmake`
*/
struct RALLYHEREAPI_API FRequest_MatchmakeStage : public FRequest
{
	FRequest_MatchmakeStage();
	virtual ~FRequest_MatchmakeStage() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FRHAPI_StageMatchmakeParams StageMatchmakeParams;
};

/** The response type for FRequest_MatchmakeStage */
struct RALLYHEREAPI_API FResponse_MatchmakeStage : public FResponseAccessorTemplate<FRHAPI_Stage, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_Stage, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_MatchmakeStage(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_MatchmakeStage() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_Stage Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_Stage& OutContent) const { return TryGetContent<FRHAPI_Stage>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_Stage>& OutContent) const { return TryGetContent<FRHAPI_Stage>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_Stage* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_Stage>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_Stage> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_Stage>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_Stage& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	 Error Codes: - `not_found` - No data found 
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_MatchmakeStage */
DECLARE_DELEGATE_OneParam(FDelegate_MatchmakeStage, const FResponse_MatchmakeStage&);

/** @brief A helper metadata object for MatchmakeStage that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_MatchmakeStage
{
	/** The request type */
	typedef FRequest_MatchmakeStage Request;
	/** The response type */
	typedef FResponse_MatchmakeStage Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_MatchmakeStage Delegate;
	/** The API object that supports this API call */
	typedef FStageAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Search Stages
 * Search all stages
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `stage:*`, `stage:search`
*/
struct RALLYHEREAPI_API FRequest_SearchStages : public FRequest
{
	FRequest_SearchStages();
	virtual ~FRequest_SearchStages() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	TOptional<FString> Cursor;
	TOptional<int32> PageSize;
	TOptional<ERHAPI_StageEntityType> OwnerEntityType;
	TOptional<FString> OwnerEntityId;
	TOptional<FString> GameVersion;
	TOptional<FString> V;
	TOptional<FString> Type1;
	TOptional<FString> Type2;
	TOptional<FString> Type3;
	TOptional<FString> Type4;
	TOptional<int32> Index;
	TOptional<FString> MatchId;
	TOptional<int32> Stat1;
	TOptional<int32> Stat2;
	TOptional<int32> Stat3;
	TOptional<int32> Stat4;
	/* min (inclusive) mmr internal value */
	TOptional<float> MmrInternalMin;
	/* max (exclusive) mmr internal value */
	TOptional<float> MmrInternalMax;
	/* min (inclusive) mmr visual value */
	TOptional<float> MmrVisMin;
	/* max (exclusive) mmr visual value */
	TOptional<float> MmrVisMax;
	/* include blob in the response data.  Results are much quicker without returning the blob */
	TOptional<bool> IncludeBlob;
	TOptional<TArray<ERHAPI_StageSearchSort>> SortBy;
	TOptional<TArray<ERHAPI_SortDirection>> Sort;
};

/** The response type for FRequest_SearchStages */
struct RALLYHEREAPI_API FResponse_SearchStages : public FResponseAccessorTemplate<FRHAPI_StageSearchResults, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_StageSearchResults, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_SearchStages(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_SearchStages() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_StageSearchResults Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_StageSearchResults& OutContent) const { return TryGetContent<FRHAPI_StageSearchResults>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_StageSearchResults>& OutContent) const { return TryGetContent<FRHAPI_StageSearchResults>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_StageSearchResults* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_StageSearchResults>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_StageSearchResults> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_StageSearchResults>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_StageSearchResults& OutContent) const;

	/* Response 400
	 Error Codes: - `invalid_cursor` - Cursor is invalid or malformed 
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_SearchStages */
DECLARE_DELEGATE_OneParam(FDelegate_SearchStages, const FResponse_SearchStages&);

/** @brief A helper metadata object for SearchStages that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_SearchStages
{
	/** The request type */
	typedef FRequest_SearchStages Request;
	/** The response type */
	typedef FResponse_SearchStages Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_SearchStages Delegate;
	/** The API object that supports this API call */
	typedef FStageAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Submit Completed Run
 * Add the stats about this run to the entity's aggregated stats from all runs.
 * 
 * Required Permissions:
 * 
 * - For any entity (including themselves) any of: `stage:*`, `stage:stats:write:any`
 * 
 * - For the entity themselves : `stage:stats:write:self`
 * 
 * If explicitly setting the run as a placement or manually changing mmr values, Required Permissions:
 * 
 * - For any entity (including themselves) any of: `stage:*`, `stage:stats:fullwrite`
*/
struct RALLYHEREAPI_API FRequest_SubmitCompletedRun : public FRequest
{
	FRequest_SubmitCompletedRun();
	virtual ~FRequest_SubmitCompletedRun() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FRHAPI_EntityRunCompleteRequest EntityRunCompleteRequest;
};

/** The response type for FRequest_SubmitCompletedRun */
struct RALLYHEREAPI_API FResponse_SubmitCompletedRun : public FResponseAccessorTemplate<FRHAPI_JsonObject, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_JsonObject, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_SubmitCompletedRun(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_SubmitCompletedRun() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_JsonObject Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_JsonObject& OutContent) const { return TryGetContent<FRHAPI_JsonObject>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_JsonObject>& OutContent) const { return TryGetContent<FRHAPI_JsonObject>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_JsonObject* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_JsonObject>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_JsonObject> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_JsonObject>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_JsonObject& OutContent) const;

	/* Response 400
	 Error Codes: - `invalid_owner` - Owner of the requested stage is invalid.  Ensure the type is correct and the id is non-empty 
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_SubmitCompletedRun */
DECLARE_DELEGATE_OneParam(FDelegate_SubmitCompletedRun, const FResponse_SubmitCompletedRun&);

/** @brief A helper metadata object for SubmitCompletedRun that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_SubmitCompletedRun
{
	/** The request type */
	typedef FRequest_SubmitCompletedRun Request;
	/** The response type */
	typedef FResponse_SubmitCompletedRun Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_SubmitCompletedRun Delegate;
	/** The API object that supports this API call */
	typedef FStageAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Update Entity Run Stats
 * Update the aggregated stats about an entity for specific matchmaking bucket
 * 
 * Required Permissions:
 * 
 * - For any entity (including themselves) any of: `stage:*`, `stage:stats:write:any`
 * 
 * - For the entity themselves : `stage:stats:write:self`
 * Required Permissions:
 * 
 * - For any entity (including themselves) any of: `stage:*`, `stage:stats:fullwrite`
*/
struct RALLYHEREAPI_API FRequest_UpdateEntityRunStats : public FRequest
{
	FRequest_UpdateEntityRunStats();
	virtual ~FRequest_UpdateEntityRunStats() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FRHAPI_EntityMMBucketRunStatsUpdate EntityMMBucketRunStatsUpdate;
};

/** The response type for FRequest_UpdateEntityRunStats */
struct RALLYHEREAPI_API FResponse_UpdateEntityRunStats : public FResponseAccessorTemplate<FRHAPI_EntityMMBucketRunStats, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_EntityMMBucketRunStats, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_UpdateEntityRunStats(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_UpdateEntityRunStats() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_EntityMMBucketRunStats Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_EntityMMBucketRunStats& OutContent) const { return TryGetContent<FRHAPI_EntityMMBucketRunStats>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_EntityMMBucketRunStats>& OutContent) const { return TryGetContent<FRHAPI_EntityMMBucketRunStats>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_EntityMMBucketRunStats* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_EntityMMBucketRunStats>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_EntityMMBucketRunStats> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_EntityMMBucketRunStats>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_EntityMMBucketRunStats& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_UpdateEntityRunStats */
DECLARE_DELEGATE_OneParam(FDelegate_UpdateEntityRunStats, const FResponse_UpdateEntityRunStats&);

/** @brief A helper metadata object for UpdateEntityRunStats that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_UpdateEntityRunStats
{
	/** The request type */
	typedef FRequest_UpdateEntityRunStats Request;
	/** The response type */
	typedef FResponse_UpdateEntityRunStats Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_UpdateEntityRunStats Delegate;
	/** The API object that supports this API call */
	typedef FStageAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Update Stage
 * Create or Update a stage by ID
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `stage:*`, `stage:write:any`
 * 
 * - For the player themselves : `stage:write:self`
*/
struct RALLYHEREAPI_API FRequest_UpdateStage : public FRequest
{
	FRequest_UpdateStage();
	virtual ~FRequest_UpdateStage() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString StageId;
	FRHAPI_StageUpdate StageUpdate;
};

/** The response type for FRequest_UpdateStage */
struct RALLYHEREAPI_API FResponse_UpdateStage : public FResponseAccessorTemplate<FRHAPI_Stage, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_Stage, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_UpdateStage(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_UpdateStage() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_Stage Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_Stage& OutContent) const { return TryGetContent<FRHAPI_Stage>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_Stage>& OutContent) const { return TryGetContent<FRHAPI_Stage>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_Stage* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_Stage>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_Stage> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_Stage>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_Stage& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_UpdateStage */
DECLARE_DELEGATE_OneParam(FDelegate_UpdateStage, const FResponse_UpdateStage&);

/** @brief A helper metadata object for UpdateStage that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_UpdateStage
{
	/** The request type */
	typedef FRequest_UpdateStage Request;
	/** The response type */
	typedef FResponse_UpdateStage Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_UpdateStage Delegate;
	/** The API object that supports this API call */
	typedef FStageAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};


/** The API class itself, which will handle calls to */
class RALLYHEREAPI_API FStageAPI : public FAPI
{
public:
	FStageAPI();
	virtual ~FStageAPI();

	FHttpRequestPtr CreateStages(const FRequest_CreateStages& Request, const FDelegate_CreateStages& Delegate = FDelegate_CreateStages(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnCreateStagesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_CreateStages Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr DeleteStage(const FRequest_DeleteStage& Request, const FDelegate_DeleteStage& Delegate = FDelegate_DeleteStage(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnDeleteStageResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_DeleteStage Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetEntityRunStats(const FRequest_GetEntityRunStats& Request, const FDelegate_GetEntityRunStats& Delegate = FDelegate_GetEntityRunStats(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetEntityRunStatsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetEntityRunStats Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetMmrStats(const FRequest_GetMmrStats& Request, const FDelegate_GetMmrStats& Delegate = FDelegate_GetMmrStats(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetMmrStatsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetMmrStats Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetStage(const FRequest_GetStage& Request, const FDelegate_GetStage& Delegate = FDelegate_GetStage(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetStageResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetStage Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr MatchmakeStage(const FRequest_MatchmakeStage& Request, const FDelegate_MatchmakeStage& Delegate = FDelegate_MatchmakeStage(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnMatchmakeStageResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_MatchmakeStage Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr SearchStages(const FRequest_SearchStages& Request, const FDelegate_SearchStages& Delegate = FDelegate_SearchStages(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnSearchStagesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SearchStages Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr SubmitCompletedRun(const FRequest_SubmitCompletedRun& Request, const FDelegate_SubmitCompletedRun& Delegate = FDelegate_SubmitCompletedRun(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnSubmitCompletedRunResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SubmitCompletedRun Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr UpdateEntityRunStats(const FRequest_UpdateEntityRunStats& Request, const FDelegate_UpdateEntityRunStats& Delegate = FDelegate_UpdateEntityRunStats(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnUpdateEntityRunStatsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdateEntityRunStats Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr UpdateStage(const FRequest_UpdateStage& Request, const FDelegate_UpdateStage& Delegate = FDelegate_UpdateStage(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnUpdateStageResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdateStage Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};



}
