// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "QueueConfig.generated.h"

/** @defgroup RHAPI_QueueConfig RallyHere API Model QueueConfig
 *  @{
 */

/**
 * @brief DEPRECATED - V1 Configuration about a specific queue
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_QueueConfig : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	/** @brief ID to uniquely identify this queue */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString QueueId{  };
	/** @brief Gets the value of QueueId */
	FORCEINLINE FString& GetQueueId() { return QueueId; }
	/** @brief Gets the value of QueueId */
	FORCEINLINE const FString& GetQueueId() const { return QueueId; }
	/** @brief Sets the value of QueueId */
	FORCEINLINE void SetQueueId(const FString& NewValue) { QueueId = NewValue;   }
	/** @brief Sets the value of QueueId using move semantics */
	FORCEINLINE void SetQueueId(FString&& NewValue) { QueueId = NewValue;   }

	/** @brief Flag for whether or not the queue is active, and can be joined or sessions created from it */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Active{ false };
	/** @brief Gets the value of Active */
	FORCEINLINE bool& GetActive() { return Active; }
	/** @brief Gets the value of Active */
	FORCEINLINE const bool& GetActive() const { return Active; }
	/** @brief Sets the value of Active */
	FORCEINLINE void SetActive(const bool& NewValue) { Active = NewValue;   }
	/** @brief Sets the value of Active using move semantics */
	FORCEINLINE void SetActive(bool&& NewValue) { Active = NewValue;   }
	/** @brief Returns the default value of Active */
	FORCEINLINE bool GetDefaultValue_Active() { return false; }

	/** @brief Which rank this queue should use MMR from to make matches from, and update at the end of match (1v1 MMR or 2v2 MMR for example) */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 RankingType{ 0 };
	/** @brief Gets the value of RankingType */
	FORCEINLINE int32& GetRankingType() { return RankingType; }
	/** @brief Gets the value of RankingType */
	FORCEINLINE const int32& GetRankingType() const { return RankingType; }
	/** @brief Sets the value of RankingType */
	FORCEINLINE void SetRankingType(const int32& NewValue) { RankingType = NewValue;   }
	/** @brief Sets the value of RankingType using move semantics */
	FORCEINLINE void SetRankingType(int32&& NewValue) { RankingType = NewValue;   }
	/** @brief Returns the default value of RankingType */
	FORCEINLINE int32 GetDefaultValue_RankingType() { return 0; }

	/** @brief The number of sides a game in this queue will have (2 in a 1v1 and 3 in a 1v1v1 for example */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 NumSides{ 0 };
	/** @brief Gets the value of NumSides */
	FORCEINLINE int32& GetNumSides() { return NumSides; }
	/** @brief Gets the value of NumSides */
	FORCEINLINE const int32& GetNumSides() const { return NumSides; }
	/** @brief Sets the value of NumSides */
	FORCEINLINE void SetNumSides(const int32& NewValue) { NumSides = NewValue;   }
	/** @brief Sets the value of NumSides using move semantics */
	FORCEINLINE void SetNumSides(int32&& NewValue) { NumSides = NewValue;   }
	/** @brief Returns the default value of NumSides */
	FORCEINLINE int32 GetDefaultValue_NumSides() { return 0; }

	/** @brief The maximum number of players that can be on each team */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 MaxPlayersPerSide{ 0 };
	/** @brief Gets the value of MaxPlayersPerSide */
	FORCEINLINE int32& GetMaxPlayersPerSide() { return MaxPlayersPerSide; }
	/** @brief Gets the value of MaxPlayersPerSide */
	FORCEINLINE const int32& GetMaxPlayersPerSide() const { return MaxPlayersPerSide; }
	/** @brief Sets the value of MaxPlayersPerSide */
	FORCEINLINE void SetMaxPlayersPerSide(const int32& NewValue) { MaxPlayersPerSide = NewValue;   }
	/** @brief Sets the value of MaxPlayersPerSide using move semantics */
	FORCEINLINE void SetMaxPlayersPerSide(int32&& NewValue) { MaxPlayersPerSide = NewValue;   }
	/** @brief Returns the default value of MaxPlayersPerSide */
	FORCEINLINE int32 GetDefaultValue_MaxPlayersPerSide() { return 0; }

	/** @brief The minimum number of players that can be on each team */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 MinPlayersPerSide{ 0 };
	/** @brief Gets the value of MinPlayersPerSide */
	FORCEINLINE int32& GetMinPlayersPerSide() { return MinPlayersPerSide; }
	/** @brief Gets the value of MinPlayersPerSide */
	FORCEINLINE const int32& GetMinPlayersPerSide() const { return MinPlayersPerSide; }
	/** @brief Sets the value of MinPlayersPerSide */
	FORCEINLINE void SetMinPlayersPerSide(const int32& NewValue) { MinPlayersPerSide = NewValue;   }
	/** @brief Sets the value of MinPlayersPerSide using move semantics */
	FORCEINLINE void SetMinPlayersPerSide(int32&& NewValue) { MinPlayersPerSide = NewValue;   }
	/** @brief Returns the default value of MinPlayersPerSide */
	FORCEINLINE int32 GetDefaultValue_MinPlayersPerSide() { return 0; }

	/** @brief The maximum size of a group that can join this queue */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 MaxQueueGroupSize{ 0 };
	/** @brief Gets the value of MaxQueueGroupSize */
	FORCEINLINE int32& GetMaxQueueGroupSize() { return MaxQueueGroupSize; }
	/** @brief Gets the value of MaxQueueGroupSize */
	FORCEINLINE const int32& GetMaxQueueGroupSize() const { return MaxQueueGroupSize; }
	/** @brief Sets the value of MaxQueueGroupSize */
	FORCEINLINE void SetMaxQueueGroupSize(const int32& NewValue) { MaxQueueGroupSize = NewValue;   }
	/** @brief Sets the value of MaxQueueGroupSize using move semantics */
	FORCEINLINE void SetMaxQueueGroupSize(int32&& NewValue) { MaxQueueGroupSize = NewValue;   }
	/** @brief Returns the default value of MaxQueueGroupSize */
	FORCEINLINE int32 GetDefaultValue_MaxQueueGroupSize() { return 0; }

	/** @brief ID for which group of matchmaking templates/rules will be used when joining this queue */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FGuid MatchMakingTemplateGroupId{  };
	/** @brief Gets the value of MatchMakingTemplateGroupId */
	FORCEINLINE FGuid& GetMatchMakingTemplateGroupId() { return MatchMakingTemplateGroupId; }
	/** @brief Gets the value of MatchMakingTemplateGroupId */
	FORCEINLINE const FGuid& GetMatchMakingTemplateGroupId() const { return MatchMakingTemplateGroupId; }
	/** @brief Sets the value of MatchMakingTemplateGroupId */
	FORCEINLINE void SetMatchMakingTemplateGroupId(const FGuid& NewValue) { MatchMakingTemplateGroupId = NewValue;   }
	/** @brief Sets the value of MatchMakingTemplateGroupId using move semantics */
	FORCEINLINE void SetMatchMakingTemplateGroupId(FGuid&& NewValue) { MatchMakingTemplateGroupId = NewValue;   }
};

/** @} */
