// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "LootPriceCurrency.h"
#include "LootPriceCurrencies.generated.h"

/** @defgroup RHAPI_LootPriceCurrencies RallyHere API Model LootPriceCurrencies
 *  @{
 */

/**
 * @brief Single price that the loot can be purchased with.  Note that all currencies of this list will be spent together.
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_LootPriceCurrencies : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	/** @brief All required currencies to use this price for purchase.  All currencies in this list are spent together. */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TArray<FRHAPI_LootPriceCurrency> Currencies_Optional{  };
	/** @brief true if Currencies_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Currencies_IsSet{ false };
	/** @brief Gets the value of Currencies_Optional, regardless of it having been set */
	TArray<FRHAPI_LootPriceCurrency>& GetCurrencies() { return Currencies_Optional; }
	/** @brief Gets the value of Currencies_Optional, regardless of it having been set */
	const TArray<FRHAPI_LootPriceCurrency>& GetCurrencies() const { return Currencies_Optional; }
	/** @brief Gets the value of Currencies_Optional, if it has been set, otherwise it returns DefaultValue */
	const TArray<FRHAPI_LootPriceCurrency>& GetCurrencies(const TArray<FRHAPI_LootPriceCurrency>& DefaultValue) const { if (Currencies_IsSet) return Currencies_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Currencies_Optional and returns true if it has been set, otherwise returns false */
	bool GetCurrencies(TArray<FRHAPI_LootPriceCurrency>& OutValue) const { if (Currencies_IsSet) OutValue = Currencies_Optional; return Currencies_IsSet; }
	/** @brief Returns a pointer to Currencies_Optional, if it has been set, otherwise returns nullptr */
	TArray<FRHAPI_LootPriceCurrency>* GetCurrenciesOrNull() { if (Currencies_IsSet) return (&Currencies_Optional); return nullptr; }
	/** @brief Returns a pointer to Currencies_Optional, if it has been set, otherwise returns nullptr */
	const TArray<FRHAPI_LootPriceCurrency>* GetCurrenciesOrNull() const { if (Currencies_IsSet) return (&Currencies_Optional); return nullptr; }
	/** @brief Sets the value of Currencies_Optional and also sets Currencies_IsSet to true */
	void SetCurrencies(const TArray<FRHAPI_LootPriceCurrency>& NewValue) { Currencies_Optional = NewValue; Currencies_IsSet = true;  }
	/** @brief Sets the value of Currencies_Optional and also sets Currencies_IsSet to true using move semantics */
	void SetCurrencies(TArray<FRHAPI_LootPriceCurrency>&& NewValue) { Currencies_Optional = NewValue; Currencies_IsSet = true;  }
	/** @brief Clears the value of Currencies_Optional and sets Currencies_IsSet to false */
	void ClearCurrencies() { Currencies_IsSet = false;  }
	/** @brief Checks whether Currencies_Optional has been set */
	bool IsCurrenciesSet() const { return Currencies_IsSet; }
};

/** @} */
