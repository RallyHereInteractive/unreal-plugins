// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "Containers/Set.h"
#include "MatchMakingTemplateV2.h"
#include "MatchMakingTemplateGroupV2.generated.h"

/** @defgroup RHAPI_MatchMakingTemplateGroupV2 RallyHere API Model MatchMakingTemplateGroupV2
 *  @{
 */

/**
 * @brief A collection of MatchMakingTemplates that may be used when a session enters a queue. The first template that satisfies the necessary rules will be used
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_MatchMakingTemplateGroupV2 : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	/** @brief ID for this set of potential matchmaking templates */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FGuid MatchMakingTemplateGroupId{  };
	/** @brief Gets the value of MatchMakingTemplateGroupId */
	FGuid& GetMatchMakingTemplateGroupId() { return MatchMakingTemplateGroupId; }
	/** @brief Gets the value of MatchMakingTemplateGroupId */
	const FGuid& GetMatchMakingTemplateGroupId() const { return MatchMakingTemplateGroupId; }
	/** @brief Sets the value of MatchMakingTemplateGroupId */
	void SetMatchMakingTemplateGroupId(const FGuid& NewValue) { MatchMakingTemplateGroupId = NewValue;   }
	/** @brief Sets the value of MatchMakingTemplateGroupId using move semantics */
	void SetMatchMakingTemplateGroupId(FGuid&& NewValue) { MatchMakingTemplateGroupId = NewValue;   }

	/** @brief List of the different matchmaking templates that could be used. The config is chosen based on a set of rules in each MatchMakingTemplate object. If there are no rules, it's the default template */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TArray<FRHAPI_MatchMakingTemplateV2> TemplateOptions{  };
	/** @brief Gets the value of TemplateOptions */
	TArray<FRHAPI_MatchMakingTemplateV2>& GetTemplateOptions() { return TemplateOptions; }
	/** @brief Gets the value of TemplateOptions */
	const TArray<FRHAPI_MatchMakingTemplateV2>& GetTemplateOptions() const { return TemplateOptions; }
	/** @brief Sets the value of TemplateOptions */
	void SetTemplateOptions(const TArray<FRHAPI_MatchMakingTemplateV2>& NewValue) { TemplateOptions = NewValue;   }
	/** @brief Sets the value of TemplateOptions using move semantics */
	void SetTemplateOptions(TArray<FRHAPI_MatchMakingTemplateV2>&& NewValue) { TemplateOptions = NewValue;   }

	/** @brief Set of all the item ids that are required to validate every rule contained in this template group */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TSet<int32> RequiredItemIds_Optional{  };
	/** @brief true if RequiredItemIds_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool RequiredItemIds_IsSet{ false };
	/** @brief Gets the value of RequiredItemIds_Optional, regardless of it having been set */
	TSet<int32>& GetRequiredItemIds() { return RequiredItemIds_Optional; }
	/** @brief Gets the value of RequiredItemIds_Optional, regardless of it having been set */
	const TSet<int32>& GetRequiredItemIds() const { return RequiredItemIds_Optional; }
	/** @brief Gets the value of RequiredItemIds_Optional, if it has been set, otherwise it returns DefaultValue */
	const TSet<int32>& GetRequiredItemIds(const TSet<int32>& DefaultValue) const { if (RequiredItemIds_IsSet) return RequiredItemIds_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of RequiredItemIds_Optional and returns true if it has been set, otherwise returns false */
	bool GetRequiredItemIds(TSet<int32>& OutValue) const { if (RequiredItemIds_IsSet) OutValue = RequiredItemIds_Optional; return RequiredItemIds_IsSet; }
	/** @brief Returns a pointer to RequiredItemIds_Optional, if it has been set, otherwise returns nullptr */
	TSet<int32>* GetRequiredItemIdsOrNull() { if (RequiredItemIds_IsSet) return (&RequiredItemIds_Optional); return nullptr; }
	/** @brief Returns a pointer to RequiredItemIds_Optional, if it has been set, otherwise returns nullptr */
	const TSet<int32>* GetRequiredItemIdsOrNull() const { if (RequiredItemIds_IsSet) return (&RequiredItemIds_Optional); return nullptr; }
	/** @brief Sets the value of RequiredItemIds_Optional and also sets RequiredItemIds_IsSet to true */
	void SetRequiredItemIds(const TSet<int32>& NewValue) { RequiredItemIds_Optional = NewValue; RequiredItemIds_IsSet = true;  }
	/** @brief Sets the value of RequiredItemIds_Optional and also sets RequiredItemIds_IsSet to true using move semantics */
	void SetRequiredItemIds(TSet<int32>&& NewValue) { RequiredItemIds_Optional = NewValue; RequiredItemIds_IsSet = true;  }
	/** @brief Clears the value of RequiredItemIds_Optional and sets RequiredItemIds_IsSet to false */
	void ClearRequiredItemIds() { RequiredItemIds_IsSet = false;  }
	/** @brief Checks whether RequiredItemIds_Optional has been set */
	bool IsRequiredItemIdsSet() const { return RequiredItemIds_IsSet; }

	/** @brief Whether or not the rulesets under this group will require us to query all players inventory, or just the leader's */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool RequiresAllPlayersItems_Optional{ false };
	/** @brief true if RequiresAllPlayersItems_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool RequiresAllPlayersItems_IsSet{ false };
	/** @brief Gets the value of RequiresAllPlayersItems_Optional, regardless of it having been set */
	bool& GetRequiresAllPlayersItems() { return RequiresAllPlayersItems_Optional; }
	/** @brief Gets the value of RequiresAllPlayersItems_Optional, regardless of it having been set */
	const bool& GetRequiresAllPlayersItems() const { return RequiresAllPlayersItems_Optional; }
	/** @brief Gets the value of RequiresAllPlayersItems_Optional, if it has been set, otherwise it returns DefaultValue */
	const bool& GetRequiresAllPlayersItems(const bool& DefaultValue) const { if (RequiresAllPlayersItems_IsSet) return RequiresAllPlayersItems_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of RequiresAllPlayersItems_Optional and returns true if it has been set, otherwise returns false */
	bool GetRequiresAllPlayersItems(bool& OutValue) const { if (RequiresAllPlayersItems_IsSet) OutValue = RequiresAllPlayersItems_Optional; return RequiresAllPlayersItems_IsSet; }
	/** @brief Returns a pointer to RequiresAllPlayersItems_Optional, if it has been set, otherwise returns nullptr */
	bool* GetRequiresAllPlayersItemsOrNull() { if (RequiresAllPlayersItems_IsSet) return (&RequiresAllPlayersItems_Optional); return nullptr; }
	/** @brief Returns a pointer to RequiresAllPlayersItems_Optional, if it has been set, otherwise returns nullptr */
	const bool* GetRequiresAllPlayersItemsOrNull() const { if (RequiresAllPlayersItems_IsSet) return (&RequiresAllPlayersItems_Optional); return nullptr; }
	/** @brief Sets the value of RequiresAllPlayersItems_Optional and also sets RequiresAllPlayersItems_IsSet to true */
	void SetRequiresAllPlayersItems(const bool& NewValue) { RequiresAllPlayersItems_Optional = NewValue; RequiresAllPlayersItems_IsSet = true;  }
	/** @brief Sets the value of RequiresAllPlayersItems_Optional and also sets RequiresAllPlayersItems_IsSet to true using move semantics */
	void SetRequiresAllPlayersItems(bool&& NewValue) { RequiresAllPlayersItems_Optional = NewValue; RequiresAllPlayersItems_IsSet = true;  }
	/** @brief Clears the value of RequiresAllPlayersItems_Optional and sets RequiresAllPlayersItems_IsSet to false */
	void ClearRequiresAllPlayersItems() { RequiresAllPlayersItems_Optional = false; RequiresAllPlayersItems_IsSet = false;  }
	/** @brief Checks whether RequiresAllPlayersItems_Optional has been set */
	bool IsRequiresAllPlayersItemsSet() const { return RequiresAllPlayersItems_IsSet; }
	/** @brief Returns true if RequiresAllPlayersItems_Optional is set and matches the default value */
	bool IsRequiresAllPlayersItemsDefaultValue() const { return RequiresAllPlayersItems_IsSet && RequiresAllPlayersItems_Optional == false; }
	/** @brief Sets the value of RequiresAllPlayersItems_Optional to its default and also sets RequiresAllPlayersItems_IsSet to true */
	void SetRequiresAllPlayersItemsToDefault() { SetRequiresAllPlayersItems(false); }

	/** @brief Whether or not the rulesets under this group will require us to validate session data */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool IncludesSessionRule_Optional{ false };
	/** @brief true if IncludesSessionRule_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool IncludesSessionRule_IsSet{ false };
	/** @brief Gets the value of IncludesSessionRule_Optional, regardless of it having been set */
	bool& GetIncludesSessionRule() { return IncludesSessionRule_Optional; }
	/** @brief Gets the value of IncludesSessionRule_Optional, regardless of it having been set */
	const bool& GetIncludesSessionRule() const { return IncludesSessionRule_Optional; }
	/** @brief Gets the value of IncludesSessionRule_Optional, if it has been set, otherwise it returns DefaultValue */
	const bool& GetIncludesSessionRule(const bool& DefaultValue) const { if (IncludesSessionRule_IsSet) return IncludesSessionRule_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of IncludesSessionRule_Optional and returns true if it has been set, otherwise returns false */
	bool GetIncludesSessionRule(bool& OutValue) const { if (IncludesSessionRule_IsSet) OutValue = IncludesSessionRule_Optional; return IncludesSessionRule_IsSet; }
	/** @brief Returns a pointer to IncludesSessionRule_Optional, if it has been set, otherwise returns nullptr */
	bool* GetIncludesSessionRuleOrNull() { if (IncludesSessionRule_IsSet) return (&IncludesSessionRule_Optional); return nullptr; }
	/** @brief Returns a pointer to IncludesSessionRule_Optional, if it has been set, otherwise returns nullptr */
	const bool* GetIncludesSessionRuleOrNull() const { if (IncludesSessionRule_IsSet) return (&IncludesSessionRule_Optional); return nullptr; }
	/** @brief Sets the value of IncludesSessionRule_Optional and also sets IncludesSessionRule_IsSet to true */
	void SetIncludesSessionRule(const bool& NewValue) { IncludesSessionRule_Optional = NewValue; IncludesSessionRule_IsSet = true;  }
	/** @brief Sets the value of IncludesSessionRule_Optional and also sets IncludesSessionRule_IsSet to true using move semantics */
	void SetIncludesSessionRule(bool&& NewValue) { IncludesSessionRule_Optional = NewValue; IncludesSessionRule_IsSet = true;  }
	/** @brief Clears the value of IncludesSessionRule_Optional and sets IncludesSessionRule_IsSet to false */
	void ClearIncludesSessionRule() { IncludesSessionRule_Optional = false; IncludesSessionRule_IsSet = false;  }
	/** @brief Checks whether IncludesSessionRule_Optional has been set */
	bool IsIncludesSessionRuleSet() const { return IncludesSessionRule_IsSet; }
	/** @brief Returns true if IncludesSessionRule_Optional is set and matches the default value */
	bool IsIncludesSessionRuleDefaultValue() const { return IncludesSessionRule_IsSet && IncludesSessionRule_Optional == false; }
	/** @brief Sets the value of IncludesSessionRule_Optional to its default and also sets IncludesSessionRule_IsSet to true */
	void SetIncludesSessionRuleToDefault() { SetIncludesSessionRule(false); }
};

/** @} */
