// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereAPIAuthContext.h"
#include "RallyHereAPIHelpers.h"
#include "AuditResponse.h"
#include "CreateAuditRequest.h"
#include "HTTPValidationError.h"
#include "HzApiErrorModel.h"

namespace RallyHereAPI
{
using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

struct FRequest_CreateSessionAudit;
struct FResponse_CreateSessionAudit;
struct FRequest_GetSessionAudit;
struct FResponse_GetSessionAudit;

DECLARE_DELEGATE_OneParam(FDelegate_CreateSessionAudit, const FResponse_CreateSessionAudit&);
DECLARE_DELEGATE_OneParam(FDelegate_GetSessionAudit, const FResponse_GetSessionAudit&);

class RALLYHEREAPI_API FSessionAuditAPI : public FAPI
{
public:
	FSessionAuditAPI();
	virtual ~FSessionAuditAPI();

	FHttpRequestPtr CreateSessionAudit(const FRequest_CreateSessionAudit& Request, const FDelegate_CreateSessionAudit& Delegate = FDelegate_CreateSessionAudit(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetSessionAudit(const FRequest_GetSessionAudit& Request, const FDelegate_GetSessionAudit& Delegate = FDelegate_GetSessionAudit(), int32 Priority = DefaultRallyHereAPIPriority);

private:
	void OnCreateSessionAuditResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_CreateSessionAudit Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetSessionAuditResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetSessionAudit Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};

/* Create Session Audit
 *
 * Create an audit event in the log for this session.
 * Internal session operations will create new events that are accessible from the get request.
 * 
 * Player clients and instances are expected to create events here when something occurs on their clients that is
 * relevant. Customer created events will be prepended with 'customer.'
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session-audit:update:all`, `session:*`
 * 
 * 
 * 
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session-audit:update:self`, `session:*`
 * 
 *  for sessions you are a member of
 * 
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session-player-audit:update:all`, `session:*`
 * 
 *  to read audit information about any player
 * 
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session-player-audit:update:self`, `session:*`
 * 
 *  to read audit information about yourself
*/
struct RALLYHEREAPI_API FRequest_CreateSessionAudit : public FRequest
{
	FRequest_CreateSessionAudit();
	virtual ~FRequest_CreateSessionAudit() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	FName GetSimplifiedPathWithVerb() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
	FRHAPI_CreateAuditRequest CreateAuditRequest;
};

struct RALLYHEREAPI_API FResponse_CreateSessionAudit : public FResponse
{
	FResponse_CreateSessionAudit(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_CreateSessionAudit() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

protected:
	typedef TVariant<FRHAPI_JsonValue, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> ContentVariantType;
	ContentVariantType ParsedContent;

	TMap<FString, FString> HeadersMap;

public:
	template<typename T>
	bool TryGetContent(T& OutResponse)const { const T* OutResponsePtr = ParsedContent.TryGet<T>(); if (OutResponsePtr != nullptr) OutResponse = *OutResponsePtr; return OutResponsePtr != nullptr; }
	template<typename T>
	const T* TryGetContent() const { return ParsedContent.TryGet<T>(); }
	
	bool TryGetHeader(const FString& Header, FString& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; return OutValuePtr != nullptr; }
	const FString* TryGetHeader(const FString& Header) const { return HeadersMap.Find(Header); }

#if ALLOW_LEGACY_RESPONSE_CONTENT
	// Default Response Content
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_JsonValue Content;
	

#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	const FRHAPI_JsonValue* TryGetDefaultContent() const { return ParsedContent.TryGet<FRHAPI_JsonValue>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_JsonValue& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Session doesn't exist.  See error code for more info
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_CreateSessionAudit
{
	typedef FRequest_CreateSessionAudit Request;
	typedef FResponse_CreateSessionAudit Response;
	typedef FDelegate_CreateSessionAudit Delegate;
	typedef FSessionAuditAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI->CreateSessionAudit(InRequest, InDelegate, Priority); }
};

/* Get Session Audit
 *
 * Get all audit events for a specific session or player. Empty list means there is no audit history.
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session-audit:read:all`, `session:*`
 * 
 *  for all sessions
 * 
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session-audit:read:self`, `session:*`
 * 
 *  for sessions you are a member of
 * 
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session-player-audit:read:all`, `session:*`
 * 
 *  to read audit information about any player
 * 
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session-player-audit:read:self`, `session:*`
 * 
 *  to read audit information about yourself
*/
struct RALLYHEREAPI_API FRequest_GetSessionAudit : public FRequest
{
	FRequest_GetSessionAudit();
	virtual ~FRequest_GetSessionAudit() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	FName GetSimplifiedPathWithVerb() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
	TOptional<FString> SessionId;
	TOptional<FGuid> PlayerUuid;
	TOptional<int32> PageNum;
	TOptional<int32> PageSize;
	TOptional<FDateTime> StartDate;
	TOptional<FDateTime> EndDate;
};

struct RALLYHEREAPI_API FResponse_GetSessionAudit : public FResponse
{
	FResponse_GetSessionAudit(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetSessionAudit() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

protected:
	typedef TVariant<FRHAPI_AuditResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> ContentVariantType;
	ContentVariantType ParsedContent;

	TMap<FString, FString> HeadersMap;

public:
	template<typename T>
	bool TryGetContent(T& OutResponse)const { const T* OutResponsePtr = ParsedContent.TryGet<T>(); if (OutResponsePtr != nullptr) OutResponse = *OutResponsePtr; return OutResponsePtr != nullptr; }
	template<typename T>
	const T* TryGetContent() const { return ParsedContent.TryGet<T>(); }
	
	bool TryGetHeader(const FString& Header, FString& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; return OutValuePtr != nullptr; }
	const FString* TryGetHeader(const FString& Header) const { return HeadersMap.Find(Header); }

#if ALLOW_LEGACY_RESPONSE_CONTENT
	// Default Response Content
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_AuditResponse Content;
	

#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	const FRHAPI_AuditResponse* TryGetDefaultContent() const { return ParsedContent.TryGet<FRHAPI_AuditResponse>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_AuditResponse& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_GetSessionAudit
{
	typedef FRequest_GetSessionAudit Request;
	typedef FResponse_GetSessionAudit Response;
	typedef FDelegate_GetSessionAudit Delegate;
	typedef FSessionAuditAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI->GetSessionAudit(InRequest, InDelegate, Priority); }
};


}
