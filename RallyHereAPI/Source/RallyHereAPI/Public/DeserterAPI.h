// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereAPIAuthContext.h"
#include "RallyHereAPIHelpers.h"
#include "AllPlayerDeserterStatuses.h"
#include "DeserterConfig.h"
#include "DeserterConfigResponse.h"
#include "DeserterUpdateRequest.h"
#include "HTTPValidationError.h"
#include "HzApiErrorModel.h"
#include "PlayerDeserterStatus.h"

namespace RallyHereAPI
{
using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

struct FRequest_ClearAllDeserter;
struct FResponse_ClearAllDeserter;
struct FRequest_ClearSpecificDeserter;
struct FResponse_ClearSpecificDeserter;
struct FRequest_DeleteAllPlayerDeserter;
struct FResponse_DeleteAllPlayerDeserter;
struct FRequest_DeletePlayerDeserter;
struct FResponse_DeletePlayerDeserter;
struct FRequest_GetAllDeserterConfigs;
struct FResponse_GetAllDeserterConfigs;
struct FRequest_GetAllPlayerDeserters;
struct FResponse_GetAllPlayerDeserters;
struct FRequest_GetPlayerDeserter;
struct FResponse_GetPlayerDeserter;
struct FRequest_GetSpecificDeserterConfig;
struct FResponse_GetSpecificDeserterConfig;
struct FRequest_PutPlayerDeserter;
struct FResponse_PutPlayerDeserter;

DECLARE_DELEGATE_OneParam(FDelegate_ClearAllDeserter, const FResponse_ClearAllDeserter&);
DECLARE_DELEGATE_OneParam(FDelegate_ClearSpecificDeserter, const FResponse_ClearSpecificDeserter&);
DECLARE_DELEGATE_OneParam(FDelegate_DeleteAllPlayerDeserter, const FResponse_DeleteAllPlayerDeserter&);
DECLARE_DELEGATE_OneParam(FDelegate_DeletePlayerDeserter, const FResponse_DeletePlayerDeserter&);
DECLARE_DELEGATE_OneParam(FDelegate_GetAllDeserterConfigs, const FResponse_GetAllDeserterConfigs&);
DECLARE_DELEGATE_OneParam(FDelegate_GetAllPlayerDeserters, const FResponse_GetAllPlayerDeserters&);
DECLARE_DELEGATE_OneParam(FDelegate_GetPlayerDeserter, const FResponse_GetPlayerDeserter&);
DECLARE_DELEGATE_OneParam(FDelegate_GetSpecificDeserterConfig, const FResponse_GetSpecificDeserterConfig&);
DECLARE_DELEGATE_OneParam(FDelegate_PutPlayerDeserter, const FResponse_PutPlayerDeserter&);

class RALLYHEREAPI_API FDeserterAPI : public FAPI
{
public:
	FDeserterAPI();
	virtual ~FDeserterAPI();

	FHttpRequestPtr ClearAllDeserter(const FRequest_ClearAllDeserter& Request, const FDelegate_ClearAllDeserter& Delegate = FDelegate_ClearAllDeserter(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr ClearSpecificDeserter(const FRequest_ClearSpecificDeserter& Request, const FDelegate_ClearSpecificDeserter& Delegate = FDelegate_ClearSpecificDeserter(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr DeleteAllPlayerDeserter(const FRequest_DeleteAllPlayerDeserter& Request, const FDelegate_DeleteAllPlayerDeserter& Delegate = FDelegate_DeleteAllPlayerDeserter(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr DeletePlayerDeserter(const FRequest_DeletePlayerDeserter& Request, const FDelegate_DeletePlayerDeserter& Delegate = FDelegate_DeletePlayerDeserter(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetAllDeserterConfigs(const FRequest_GetAllDeserterConfigs& Request, const FDelegate_GetAllDeserterConfigs& Delegate = FDelegate_GetAllDeserterConfigs(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetAllPlayerDeserters(const FRequest_GetAllPlayerDeserters& Request, const FDelegate_GetAllPlayerDeserters& Delegate = FDelegate_GetAllPlayerDeserters(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetPlayerDeserter(const FRequest_GetPlayerDeserter& Request, const FDelegate_GetPlayerDeserter& Delegate = FDelegate_GetPlayerDeserter(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetSpecificDeserterConfig(const FRequest_GetSpecificDeserterConfig& Request, const FDelegate_GetSpecificDeserterConfig& Delegate = FDelegate_GetSpecificDeserterConfig(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr PutPlayerDeserter(const FRequest_PutPlayerDeserter& Request, const FDelegate_PutPlayerDeserter& Delegate = FDelegate_PutPlayerDeserter(), int32 Priority = DefaultRallyHereAPIPriority);

private:
	void OnClearAllDeserterResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_ClearAllDeserter Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnClearSpecificDeserterResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_ClearSpecificDeserter Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnDeleteAllPlayerDeserterResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_DeleteAllPlayerDeserter Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnDeletePlayerDeserterResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_DeletePlayerDeserter Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetAllDeserterConfigsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAllDeserterConfigs Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetAllPlayerDesertersResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAllPlayerDeserters Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetPlayerDeserterResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlayerDeserter Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetSpecificDeserterConfigResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetSpecificDeserterConfig Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnPutPlayerDeserterResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_PutPlayerDeserter Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};

/* Clear All Deserter
 *
 * Clear deserter status for all deserter ids
*/
struct RALLYHEREAPI_API FRequest_ClearAllDeserter : public FRequest
{
	FRequest_ClearAllDeserter();
	virtual ~FRequest_ClearAllDeserter() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	FName GetSimplifiedPathWithVerb() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
};

struct RALLYHEREAPI_API FResponse_ClearAllDeserter : public FResponse
{
	FResponse_ClearAllDeserter(FRequestMetadata InRequestMetadata);
	virtual ~FResponse_ClearAllDeserter() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

	


	// Manual Response Helpers
	/* Response 204
	Successful Response
	*/

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

};

struct RALLYHEREAPI_API Traits_ClearAllDeserter
{
	typedef FRequest_ClearAllDeserter Request;
	typedef FResponse_ClearAllDeserter Response;
	typedef FDelegate_ClearAllDeserter Delegate;
	typedef FDeserterAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI->ClearAllDeserter(InRequest, InDelegate, Priority); }
};

/* Clear Specific Deserter
 *
 * Clear deserter status for a specific deserter id
*/
struct RALLYHEREAPI_API FRequest_ClearSpecificDeserter : public FRequest
{
	FRequest_ClearSpecificDeserter();
	virtual ~FRequest_ClearSpecificDeserter() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	FName GetSimplifiedPathWithVerb() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
	FString DeserterId;
};

struct RALLYHEREAPI_API FResponse_ClearSpecificDeserter : public FResponse
{
	FResponse_ClearSpecificDeserter(FRequestMetadata InRequestMetadata);
	virtual ~FResponse_ClearSpecificDeserter() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

	


	// Manual Response Helpers
	/* Response 204
	Successful Response
	*/

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_ClearSpecificDeserter
{
	typedef FRequest_ClearSpecificDeserter Request;
	typedef FResponse_ClearSpecificDeserter Response;
	typedef FDelegate_ClearSpecificDeserter Delegate;
	typedef FDeserterAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI->ClearSpecificDeserter(InRequest, InDelegate, Priority); }
};

/* Delete All Player Deserter
 *
 * Delete all of a player's deserter statuses
*/
struct RALLYHEREAPI_API FRequest_DeleteAllPlayerDeserter : public FRequest
{
	FRequest_DeleteAllPlayerDeserter();
	virtual ~FRequest_DeleteAllPlayerDeserter() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	FName GetSimplifiedPathWithVerb() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
	FGuid PlayerUuid;
};

struct RALLYHEREAPI_API FResponse_DeleteAllPlayerDeserter : public FResponse
{
	FResponse_DeleteAllPlayerDeserter(FRequestMetadata InRequestMetadata);
	virtual ~FResponse_DeleteAllPlayerDeserter() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

	


	// Manual Response Helpers
	/* Response 204
	Successful Response
	*/

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_DeleteAllPlayerDeserter
{
	typedef FRequest_DeleteAllPlayerDeserter Request;
	typedef FResponse_DeleteAllPlayerDeserter Response;
	typedef FDelegate_DeleteAllPlayerDeserter Delegate;
	typedef FDeserterAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI->DeleteAllPlayerDeserter(InRequest, InDelegate, Priority); }
};

/* Delete Player Deserter
 *
 * Delete a single deserter status for a specific player
*/
struct RALLYHEREAPI_API FRequest_DeletePlayerDeserter : public FRequest
{
	FRequest_DeletePlayerDeserter();
	virtual ~FRequest_DeletePlayerDeserter() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	FName GetSimplifiedPathWithVerb() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
	FString DeserterId;
	FGuid PlayerUuid;
};

struct RALLYHEREAPI_API FResponse_DeletePlayerDeserter : public FResponse
{
	FResponse_DeletePlayerDeserter(FRequestMetadata InRequestMetadata);
	virtual ~FResponse_DeletePlayerDeserter() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

	


	// Manual Response Helpers
	/* Response 204
	Successful Response
	*/

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_DeletePlayerDeserter
{
	typedef FRequest_DeletePlayerDeserter Request;
	typedef FResponse_DeletePlayerDeserter Response;
	typedef FDelegate_DeletePlayerDeserter Delegate;
	typedef FDeserterAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI->DeletePlayerDeserter(InRequest, InDelegate, Priority); }
};

/* Get All Deserter Configs
 *
 * Get all deserter configs
*/
struct RALLYHEREAPI_API FRequest_GetAllDeserterConfigs : public FRequest
{
	FRequest_GetAllDeserterConfigs();
	virtual ~FRequest_GetAllDeserterConfigs() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	FName GetSimplifiedPathWithVerb() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
};

struct RALLYHEREAPI_API FResponse_GetAllDeserterConfigs : public FResponse
{
	FResponse_GetAllDeserterConfigs(FRequestMetadata InRequestMetadata);
	virtual ~FResponse_GetAllDeserterConfigs() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

	FRHAPI_DeserterConfigResponse Content;


	// Manual Response Helpers
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_DeserterConfigResponse& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

};

struct RALLYHEREAPI_API Traits_GetAllDeserterConfigs
{
	typedef FRequest_GetAllDeserterConfigs Request;
	typedef FResponse_GetAllDeserterConfigs Response;
	typedef FDelegate_GetAllDeserterConfigs Delegate;
	typedef FDeserterAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI->GetAllDeserterConfigs(InRequest, InDelegate, Priority); }
};

/* Get All Player Deserters
 *
 * Get a specific player's deserter status
*/
struct RALLYHEREAPI_API FRequest_GetAllPlayerDeserters : public FRequest
{
	FRequest_GetAllPlayerDeserters();
	virtual ~FRequest_GetAllPlayerDeserters() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	FName GetSimplifiedPathWithVerb() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
	FGuid PlayerUuid;
};

struct RALLYHEREAPI_API FResponse_GetAllPlayerDeserters : public FResponse
{
	FResponse_GetAllPlayerDeserters(FRequestMetadata InRequestMetadata);
	virtual ~FResponse_GetAllPlayerDeserters() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

	FRHAPI_AllPlayerDeserterStatuses Content;


	// Manual Response Helpers
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_AllPlayerDeserterStatuses& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_GetAllPlayerDeserters
{
	typedef FRequest_GetAllPlayerDeserters Request;
	typedef FResponse_GetAllPlayerDeserters Response;
	typedef FDelegate_GetAllPlayerDeserters Delegate;
	typedef FDeserterAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI->GetAllPlayerDeserters(InRequest, InDelegate, Priority); }
};

/* Get Player Deserter
 *
 * Get a specific player's deserter status
*/
struct RALLYHEREAPI_API FRequest_GetPlayerDeserter : public FRequest
{
	FRequest_GetPlayerDeserter();
	virtual ~FRequest_GetPlayerDeserter() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	FName GetSimplifiedPathWithVerb() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
	FString DeserterId;
	FGuid PlayerUuid;
};

struct RALLYHEREAPI_API FResponse_GetPlayerDeserter : public FResponse
{
	FResponse_GetPlayerDeserter(FRequestMetadata InRequestMetadata);
	virtual ~FResponse_GetPlayerDeserter() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

	FRHAPI_PlayerDeserterStatus Content;


	// Manual Response Helpers
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PlayerDeserterStatus& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_GetPlayerDeserter
{
	typedef FRequest_GetPlayerDeserter Request;
	typedef FResponse_GetPlayerDeserter Response;
	typedef FDelegate_GetPlayerDeserter Delegate;
	typedef FDeserterAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI->GetPlayerDeserter(InRequest, InDelegate, Priority); }
};

/* Get Specific Deserter Config
 *
 * Get specific deserter configs
*/
struct RALLYHEREAPI_API FRequest_GetSpecificDeserterConfig : public FRequest
{
	FRequest_GetSpecificDeserterConfig();
	virtual ~FRequest_GetSpecificDeserterConfig() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	FName GetSimplifiedPathWithVerb() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
	FString DeserterId;
};

struct RALLYHEREAPI_API FResponse_GetSpecificDeserterConfig : public FResponse
{
	FResponse_GetSpecificDeserterConfig(FRequestMetadata InRequestMetadata);
	virtual ~FResponse_GetSpecificDeserterConfig() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

	FRHAPI_DeserterConfig Content;


	// Manual Response Helpers
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_DeserterConfig& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_GetSpecificDeserterConfig
{
	typedef FRequest_GetSpecificDeserterConfig Request;
	typedef FResponse_GetSpecificDeserterConfig Response;
	typedef FDelegate_GetSpecificDeserterConfig Delegate;
	typedef FDeserterAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI->GetSpecificDeserterConfig(InRequest, InDelegate, Priority); }
};

/* Put Player Deserter
 *
 * Update a specific player's deserter status
*/
struct RALLYHEREAPI_API FRequest_PutPlayerDeserter : public FRequest
{
	FRequest_PutPlayerDeserter();
	virtual ~FRequest_PutPlayerDeserter() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	FName GetSimplifiedPathWithVerb() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
	FString DeserterId;
	FGuid PlayerUuid;
	FRHAPI_DeserterUpdateRequest DeserterUpdateRequest;
};

struct RALLYHEREAPI_API FResponse_PutPlayerDeserter : public FResponse
{
	FResponse_PutPlayerDeserter(FRequestMetadata InRequestMetadata);
	virtual ~FResponse_PutPlayerDeserter() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

	FRHAPI_PlayerDeserterStatus Content;


	// Manual Response Helpers
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PlayerDeserterStatus& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_PutPlayerDeserter
{
	typedef FRequest_PutPlayerDeserter Request;
	typedef FResponse_PutPlayerDeserter Response;
	typedef FDelegate_PutPlayerDeserter Delegate;
	typedef FDeserterAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI->PutPlayerDeserter(InRequest, InDelegate, Priority); }
};


}
