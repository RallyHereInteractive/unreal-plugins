// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "Region.generated.h"

/** @defgroup RHAPI_Region RallyHere API Model Region
 *  @{
 */

/**
 * @brief Information about a specific region
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_Region : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	/** @brief ID for this region */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString RegionId{  };
	/** @brief Gets the value of RegionId */
	FString& GetRegionId() { return RegionId; }
	/** @brief Gets the value of RegionId */
	const FString& GetRegionId() const { return RegionId; }
	/** @brief Sets the value of RegionId */
	void SetRegionId(FString NewValue) { RegionId = NewValue;  }

	/** @brief The sorting priority order for this region */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 SortOrder{ 0 };
	/** @brief Gets the value of SortOrder */
	int32& GetSortOrder() { return SortOrder; }
	/** @brief Gets the value of SortOrder */
	const int32& GetSortOrder() const { return SortOrder; }
	/** @brief Sets the value of SortOrder */
	void SetSortOrder(int32 NewValue) { SortOrder = NewValue;  }
	/** @brief Returns true if SortOrder matches the default value */
	bool IsSortOrderDefaultValue() const { return SortOrder == 0; }
	/** @brief Sets the value of SortOrder to its default  */
	void SetSortOrderToDefault() { SortOrder = 0;  }

	/** @brief Indicates if the region is for custom games only */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool CustomOnly{ false };
	/** @brief Gets the value of CustomOnly */
	bool& GetCustomOnly() { return CustomOnly; }
	/** @brief Gets the value of CustomOnly */
	const bool& GetCustomOnly() const { return CustomOnly; }
	/** @brief Sets the value of CustomOnly */
	void SetCustomOnly(bool NewValue) { CustomOnly = NewValue;  }
	/** @brief Returns true if CustomOnly matches the default value */
	bool IsCustomOnlyDefaultValue() const { return CustomOnly == false; }
	/** @brief Sets the value of CustomOnly to its default  */
	void SetCustomOnlyToDefault() { CustomOnly = false;  }

	/** @brief Text description of the region */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString Description_Optional{  };
	/** @brief true if Description_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Description_IsSet{ false };
	/** @brief Gets the value of Description_Optional, regardless of it having been set */
	FString& GetDescription() { return Description_Optional; }
	/** @brief Gets the value of Description_Optional, regardless of it having been set */
	const FString& GetDescription() const { return Description_Optional; }
	/** @brief Gets the value of Description_Optional, if it has been set, otherwise it returns DefaultValue */
	const FString& GetDescription(const FString& DefaultValue) const { if (Description_IsSet) return Description_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Description_Optional and returns true if it has been set, otherwise returns false */
	bool GetDescription(FString& OutValue) const { if (Description_IsSet) OutValue = Description_Optional; return Description_IsSet; }
	/** @brief Returns a pointer to Description_Optional, if it has been set, otherwise returns nullptr */
	FString* GetDescriptionOrNull() { if (Description_IsSet) return &Description_Optional; return nullptr; }
	/** @brief Returns a pointer to Description_Optional, if it has been set, otherwise returns nullptr */
	const FString* GetDescriptionOrNull() const { if (Description_IsSet) return &Description_Optional; return nullptr; }
	/** @brief Sets the value of Description_Optional and also sets Description_IsSet to true */
	void SetDescription(FString NewValue) { Description_Optional = NewValue; Description_IsSet = true; }
	 /** @brief Clears the value of Description_Optional and sets Description_IsSet to false */
	void ClearDescription() { Description_IsSet = false; }
};

/** @} */
