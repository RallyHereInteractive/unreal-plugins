// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "Determiner.h"
#include "Rule.h"
#include "MatchMakingRuleset.generated.h"

/** @defgroup RHAPI_MatchMakingRuleset RallyHere API Model MatchMakingRuleset
 *  @{
 */

/**
 * @brief A collection of rules that are used to determine whether a MatchMakingTemplate should be used
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_MatchMakingRuleset : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	/** @brief A list of the rules to be checked for this ruleset */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TArray<FRHAPI_Rule> Rules{  };
	/** @brief Gets the value of Rules */
	TArray<FRHAPI_Rule>& GetRules() { return Rules; }
	/** @brief Gets the value of Rules */
	const TArray<FRHAPI_Rule>& GetRules() const { return Rules; }
	/** @brief Sets the value of Rules */
	void SetRules(const TArray<FRHAPI_Rule>& NewValue) { Rules = NewValue;  }
	/** @brief Sets the value of Rules using move semantics */
	void SetRules(TArray<FRHAPI_Rule>&& NewValue) { Rules = NewValue;  }

	/** @brief Determiner of how many rules must be satisfied in this rulest (all, any, one, none) */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	ERHAPI_Determiner Determiner_Optional{  };
	/** @brief true if Determiner_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Determiner_IsSet{ false };
	/** @brief Gets the value of Determiner_Optional, regardless of it having been set */
	ERHAPI_Determiner& GetDeterminer() { return Determiner_Optional; }
	/** @brief Gets the value of Determiner_Optional, regardless of it having been set */
	const ERHAPI_Determiner& GetDeterminer() const { return Determiner_Optional; }
	/** @brief Gets the value of Determiner_Optional, if it has been set, otherwise it returns DefaultValue */
	const ERHAPI_Determiner& GetDeterminer(const ERHAPI_Determiner& DefaultValue) const { if (Determiner_IsSet) return Determiner_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Determiner_Optional and returns true if it has been set, otherwise returns false */
	bool GetDeterminer(ERHAPI_Determiner& OutValue) const { if (Determiner_IsSet) OutValue = Determiner_Optional; return Determiner_IsSet; }
	/** @brief Returns a pointer to Determiner_Optional, if it has been set, otherwise returns nullptr */
	ERHAPI_Determiner* GetDeterminerOrNull() { if (Determiner_IsSet) return &Determiner_Optional; return nullptr; }
	/** @brief Returns a pointer to Determiner_Optional, if it has been set, otherwise returns nullptr */
	const ERHAPI_Determiner* GetDeterminerOrNull() const { if (Determiner_IsSet) return &Determiner_Optional; return nullptr; }
	/** @brief Sets the value of Determiner_Optional and also sets Determiner_IsSet to true */
	void SetDeterminer(const ERHAPI_Determiner& NewValue) { Determiner_Optional = NewValue; Determiner_IsSet = true; }
	/** @brief Sets the value of Determiner_Optional and also sets Determiner_IsSet to true using move semantics */
	void SetDeterminer(ERHAPI_Determiner&& NewValue) { Determiner_Optional = NewValue; Determiner_IsSet = true; }
	 /** @brief Clears the value of Determiner_Optional and sets Determiner_IsSet to false */
	void ClearDeterminer() { Determiner_IsSet = false; }
};

/** @} */
