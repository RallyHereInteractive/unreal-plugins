// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "Determiner.h"
#include "PlayersToValidate.h"
#include "Rule.h"
#include "MatchMakingRuleset.generated.h"

/** @defgroup RHAPI_MatchMakingRuleset RallyHere API Model MatchMakingRuleset
 *  @{
 */

/**
 * @brief A collection of rules that are used to determine whether a MatchMakingTemplate should be used
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_MatchMakingRuleset : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	/** @brief A list of the rules to be checked for this ruleset */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TArray<FRHAPI_Rule> Rules_Optional{  };
	/** @brief true if Rules_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Rules_IsSet{ false };
	/** @brief Gets the value of Rules_Optional, regardless of it having been set */
	FORCEINLINE TArray<FRHAPI_Rule>& GetRules() { return Rules_Optional; }
	/** @brief Gets the value of Rules_Optional, regardless of it having been set */
	FORCEINLINE const TArray<FRHAPI_Rule>& GetRules() const { return Rules_Optional; }
	/** @brief Gets the value of Rules_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const TArray<FRHAPI_Rule>& GetRules(const TArray<FRHAPI_Rule>& DefaultValue) const { if (Rules_IsSet) return Rules_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Rules_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetRules(TArray<FRHAPI_Rule>& OutValue) const { if (Rules_IsSet) OutValue = Rules_Optional; return Rules_IsSet; }
	/** @brief Returns a pointer to Rules_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE TArray<FRHAPI_Rule>* GetRulesOrNull() { if (Rules_IsSet) return (&Rules_Optional); return nullptr; }
	/** @brief Returns a pointer to Rules_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const TArray<FRHAPI_Rule>* GetRulesOrNull() const { if (Rules_IsSet) return (&Rules_Optional); return nullptr; }
	/** @brief Sets the value of Rules_Optional and also sets Rules_IsSet to true */
	FORCEINLINE void SetRules(const TArray<FRHAPI_Rule>& NewValue) { Rules_Optional = NewValue; Rules_IsSet = true;  }
	/** @brief Sets the value of Rules_Optional and also sets Rules_IsSet to true using move semantics */
	FORCEINLINE void SetRules(TArray<FRHAPI_Rule>&& NewValue) { Rules_Optional = NewValue; Rules_IsSet = true;  }
	/** @brief Clears the value of Rules_Optional and sets Rules_IsSet to false */
	void ClearRules() { Rules_IsSet = false;  }

	/** @brief Determiner of how many rules must be satisfied in this rulest (all, any, one, none) */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	ERHAPI_Determiner Determiner_Optional{  };
	/** @brief true if Determiner_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Determiner_IsSet{ false };
	/** @brief Gets the value of Determiner_Optional, regardless of it having been set */
	FORCEINLINE ERHAPI_Determiner& GetDeterminer() { return Determiner_Optional; }
	/** @brief Gets the value of Determiner_Optional, regardless of it having been set */
	FORCEINLINE const ERHAPI_Determiner& GetDeterminer() const { return Determiner_Optional; }
	/** @brief Gets the value of Determiner_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const ERHAPI_Determiner& GetDeterminer(const ERHAPI_Determiner& DefaultValue) const { if (Determiner_IsSet) return Determiner_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Determiner_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetDeterminer(ERHAPI_Determiner& OutValue) const { if (Determiner_IsSet) OutValue = Determiner_Optional; return Determiner_IsSet; }
	/** @brief Returns a pointer to Determiner_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE ERHAPI_Determiner* GetDeterminerOrNull() { if (Determiner_IsSet) return (&Determiner_Optional); return nullptr; }
	/** @brief Returns a pointer to Determiner_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const ERHAPI_Determiner* GetDeterminerOrNull() const { if (Determiner_IsSet) return (&Determiner_Optional); return nullptr; }
	/** @brief Sets the value of Determiner_Optional and also sets Determiner_IsSet to true */
	FORCEINLINE void SetDeterminer(const ERHAPI_Determiner& NewValue) { Determiner_Optional = NewValue; Determiner_IsSet = true;  }
	/** @brief Sets the value of Determiner_Optional and also sets Determiner_IsSet to true using move semantics */
	FORCEINLINE void SetDeterminer(ERHAPI_Determiner&& NewValue) { Determiner_Optional = NewValue; Determiner_IsSet = true;  }
	/** @brief Clears the value of Determiner_Optional and sets Determiner_IsSet to false */
	void ClearDeterminer() { Determiner_IsSet = false;  }

	/** @brief Which members of a session must be validated to satisfy this ruleset */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	ERHAPI_PlayersToValidate PlayersToValidate_Optional{  };
	/** @brief true if PlayersToValidate_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool PlayersToValidate_IsSet{ false };
	/** @brief Gets the value of PlayersToValidate_Optional, regardless of it having been set */
	FORCEINLINE ERHAPI_PlayersToValidate& GetPlayersToValidate() { return PlayersToValidate_Optional; }
	/** @brief Gets the value of PlayersToValidate_Optional, regardless of it having been set */
	FORCEINLINE const ERHAPI_PlayersToValidate& GetPlayersToValidate() const { return PlayersToValidate_Optional; }
	/** @brief Gets the value of PlayersToValidate_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const ERHAPI_PlayersToValidate& GetPlayersToValidate(const ERHAPI_PlayersToValidate& DefaultValue) const { if (PlayersToValidate_IsSet) return PlayersToValidate_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of PlayersToValidate_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetPlayersToValidate(ERHAPI_PlayersToValidate& OutValue) const { if (PlayersToValidate_IsSet) OutValue = PlayersToValidate_Optional; return PlayersToValidate_IsSet; }
	/** @brief Returns a pointer to PlayersToValidate_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE ERHAPI_PlayersToValidate* GetPlayersToValidateOrNull() { if (PlayersToValidate_IsSet) return (&PlayersToValidate_Optional); return nullptr; }
	/** @brief Returns a pointer to PlayersToValidate_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const ERHAPI_PlayersToValidate* GetPlayersToValidateOrNull() const { if (PlayersToValidate_IsSet) return (&PlayersToValidate_Optional); return nullptr; }
	/** @brief Sets the value of PlayersToValidate_Optional and also sets PlayersToValidate_IsSet to true */
	FORCEINLINE void SetPlayersToValidate(const ERHAPI_PlayersToValidate& NewValue) { PlayersToValidate_Optional = NewValue; PlayersToValidate_IsSet = true;  }
	/** @brief Sets the value of PlayersToValidate_Optional and also sets PlayersToValidate_IsSet to true using move semantics */
	FORCEINLINE void SetPlayersToValidate(ERHAPI_PlayersToValidate&& NewValue) { PlayersToValidate_Optional = NewValue; PlayersToValidate_IsSet = true;  }
	/** @brief Clears the value of PlayersToValidate_Optional and sets PlayersToValidate_IsSet to false */
	void ClearPlayersToValidate() { PlayersToValidate_IsSet = false;  }
};

/** @} */
