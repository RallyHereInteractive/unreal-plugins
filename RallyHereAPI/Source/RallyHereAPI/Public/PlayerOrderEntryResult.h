// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "PlayerOrderEntryResult.generated.h"


/**
 * @brief Result of a Player Order Entry.
 */
UENUM(BlueprintType)
enum class ERHAPI_PlayerOrderEntryResult : uint8
{
	Success UMETA(ToolTip="The Order Entry was successful."),
	InternalError UMETA(ToolTip="An internal error occurred when processing Order Entry."),
	InvalidEntryType UMETA(ToolTip="Order Entry type is invalid."),
	NotAllowedOnCurrentPortal UMETA(ToolTip="Order Entry is not allowed on the current platform."),
	LootNotFound UMETA(ToolTip="The Loot was not found."),
	LootNotActive UMETA(ToolTip="The Loot was not active at the time of processing."),
	PriceItemNotFound UMETA(ToolTip="The Item was configured as the Price was not found."),
	PriceNotAllowed UMETA(ToolTip="The Price is not allowed for the given Loot."),
	DynamicBundleInvalid UMETA(ToolTip="The given Dynamic Bundle was invalid."),
	TooManyRequests UMETA(ToolTip="Too many requests were made in during the evaluation window."),
	PriceDoesNotMatch UMETA(ToolTip="Given Price does not match the expected Price."),
	VendorVersionDoesNotMatch UMETA(ToolTip="Vendor version does not match the expected version."),
	DynamicBundleLtisDoNotMatch UMETA(ToolTip="Dynamic Bundle Loot does not match expected Loot."),
	CannotAffordPrice UMETA(ToolTip="Player cannot afford the given Price."),
	CannotAffordCoupon UMETA(ToolTip="Player cannot afford the given Coupon."),
	FailedToSpendPrice UMETA(ToolTip="Failed to spend the given Price."),
	FailedToSpendCoupon UMETA(ToolTip="Failed to spend the given Coupon."),
	LootNotForSaleWithPriceItem UMETA(ToolTip="The given Loot is not for sale with the given Price Item."),
	CouponsDisabled UMETA(ToolTip="Coupons are disabled."),
	CouponItemNotFound UMETA(ToolTip="The Item configured for the Coupon was not found."),
	CouponItemNotActive UMETA(ToolTip="The Coupon Item is not active."),
	CouponItemNotApplicableForQuantity UMETA(ToolTip="Coupon Item is not applicable for the given quantity."),
	CouponItemNotApplicableForPriceItem UMETA(ToolTip="Coupon Item is not applicable for the given Price Item."),
	CouponItemNotApplicableForLoot UMETA(ToolTip="Coupon Item is not applicable for the given Loot."),
	QuantityNotAllowed UMETA(ToolTip="Quantity is not allowed for the given Loot."),
	PromotionExpired UMETA(ToolTip="Promotion has expired."),
	PromotionNotFound UMETA(ToolTip="Promotion was not found."),
	PromotionNoUsesLeft UMETA(ToolTip="Promotion has no uses left."),
	PromotionNotAvailable UMETA(ToolTip="Promotion is not available."),
	PromotionClaimedAlready UMETA(ToolTip="Promotion has already been claimed."),
	DynamicBundlesNotAvailable UMETA(ToolTip="Dynamic Bundles are not available."),
	TransientSingleLootAlreadyApplied UMETA(ToolTip="Transient Single Loot has already been applied."),
	LootNotFillableFromClient UMETA(ToolTip="Loot is not claimable from the client."),
	PermissionDenied UMETA(ToolTip="Permission denied."),
	FailedToFindAnySubLoot UMETA(ToolTip="Failed to find any sub loot."),
	FailedToFillAnySubLoot UMETA(ToolTip="Failed to fill any sub loot."),
	FailedToFillAllRandom UMETA(ToolTip="Not all requested randomly sampled loot could be fulfilled."),
	CannotMeetLootBlocker UMETA(ToolTip="Loot fulfillment failed because the player failed a &#x60;check_less_than&#x60; Inventory Operation. This means the Players Inventory Quantity is equal or greater than Loot&#39;s quantity."),
	CannotMeetLootRequired UMETA(ToolTip="Loot fulfillment failed because the player failed a &#x60;check_greater_than_or_equal&#x60; or &#x60;check_greater_than_or_equal_and_subtract&#x60; Inventory Operation. This means the player has less than the Loot&#39;s required quantity."),
	FailedToConsumeLootRequired UMETA(ToolTip="Failed to consume the given Loot required."),
	FailedToSubmitNewOrder UMETA(ToolTip="Failed to submit a new order."),
	FailedToModifyInventory UMETA(ToolTip="Failed to modify inventory."),
	InventoryNotFound UMETA(ToolTip="Inventory was not found."),
	ItemNotFound UMETA(ToolTip="Item was not found."),
	ItemNotActive UMETA(ToolTip="Item is not active."),
	TooManyInvCustomAttributes UMETA(ToolTip="Too many inventory custom attributes provided."),
	AlwaysOwnedInventoryCannotBeModified UMETA(ToolTip="Always owned inventory cannot be modified."),
	AvailableUntilIsInPast UMETA(ToolTip="Available until is in the past."),
	Rollback UMETA(ToolTip="Order Entry was successfully fulfilled, but was rolled back."),
	NotStarted UMETA(ToolTip="Order Entry fulfillment has not started."),
	EntitledLootNotFound UMETA(ToolTip="Entitled Loot was not found"),
};
RALLYHEREAPI_API FString EnumToString(const ERHAPI_PlayerOrderEntryResult& EnumValue);
RALLYHEREAPI_API bool EnumFromString(const FString& EnumAsString, ERHAPI_PlayerOrderEntryResult& EnumValue);
RALLYHEREAPI_API FStringFormatArg ToStringFormatArg(const ERHAPI_PlayerOrderEntryResult& Value);
RALLYHEREAPI_API void WriteJsonValue(TSharedRef<TJsonWriter<>>& Writer, const ERHAPI_PlayerOrderEntryResult& Value);
RALLYHEREAPI_API bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, ERHAPI_PlayerOrderEntryResult& Value);
