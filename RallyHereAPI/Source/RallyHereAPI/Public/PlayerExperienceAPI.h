// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereAPIAuthContext.h"
#include "RallyHereAPIHelpers.h"
#include "HTTPValidationError.h"
#include "HzApiErrorModel.h"
#include "PexClientPagedResponse.h"
#include "PexClientRequest.h"
#include "PexHostPagedResponse.h"
#include "PexHostRequest.h"

namespace RallyHereAPI
{
using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

// forward declaration
class FPlayerExperienceAPI;

/**
 * @brief Create Pex Host
 * Create PEX Host
 * 
 * Required Permissions:
 * 
 * - For any pex host any of: `match:*`, `match:pex:host:write`
*/
struct RALLYHEREAPI_API FRequest_CreatePexHost : public FRequest
{
	FRequest_CreatePexHost();
	virtual ~FRequest_CreatePexHost() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FRHAPI_PexHostRequest PexHostRequest;
};

/** The response type for FRequest_CreatePexHost */
struct RALLYHEREAPI_API FResponse_CreatePexHost : public FResponseAccessorTemplate< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_CreatePexHost(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_CreatePexHost() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT

#endif //ALLOW_LEGACY_RESPONSE_CONTENT


	// Individual Response Helpers	
	/* Response 204
	Successful Response
	*/

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_CreatePexHost */
DECLARE_DELEGATE_OneParam(FDelegate_CreatePexHost, const FResponse_CreatePexHost&);

/** @brief A helper metadata object for CreatePexHost that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_CreatePexHost
{
	/** The request type */
	typedef FRequest_CreatePexHost Request;
	/** The response type */
	typedef FResponse_CreatePexHost Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_CreatePexHost Delegate;
	/** The API object that supports this API call */
	typedef FPlayerExperienceAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Create Pex Player
 * Create PEX Client
 * 
 * Required Permissions:
 * 
 * - For any pex client any of: `match:*`, `match:pex:client:write`
*/
struct RALLYHEREAPI_API FRequest_CreatePexPlayer : public FRequest
{
	FRequest_CreatePexPlayer();
	virtual ~FRequest_CreatePexPlayer() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FRHAPI_PexClientRequest PexClientRequest;
};

/** The response type for FRequest_CreatePexPlayer */
struct RALLYHEREAPI_API FResponse_CreatePexPlayer : public FResponseAccessorTemplate< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_CreatePexPlayer(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_CreatePexPlayer() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT

#endif //ALLOW_LEGACY_RESPONSE_CONTENT


	// Individual Response Helpers	
	/* Response 204
	Successful Response
	*/

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_CreatePexPlayer */
DECLARE_DELEGATE_OneParam(FDelegate_CreatePexPlayer, const FResponse_CreatePexPlayer&);

/** @brief A helper metadata object for CreatePexPlayer that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_CreatePexPlayer
{
	/** The request type */
	typedef FRequest_CreatePexPlayer Request;
	/** The response type */
	typedef FResponse_CreatePexPlayer Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_CreatePexPlayer Delegate;
	/** The API object that supports this API call */
	typedef FPlayerExperienceAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get All Pex Client Raw By Filter
 * Get pages of PEX client raw data based on provided filters
 * 
 * Required Permissions:
 * 
 * - For any pex client any of: `match:*`, `match:pex:read`
*/
struct RALLYHEREAPI_API FRequest_GetAllPexClientRawByFilter : public FRequest
{
	FRequest_GetAllPexClientRawByFilter();
	virtual ~FRequest_GetAllPexClientRawByFilter() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	TOptional<FString> Cursor;
	/* The maximum number of elements to be returned per call */
	TOptional<int32> PageSize;
	TOptional<FDateTime> ToDatetime;
	TOptional<FDateTime> FromDatetime;
	TOptional<FString> MatchId;
	TOptional<FString> RegionId;
	TOptional<FString> ServerId;
	TOptional<FString> AllocationId;
	TOptional<FString> DatacenterProvider;
	TOptional<FString> DatacenterLocation;
	TOptional<FString> MachineClass;
	TOptional<FString> AddressIp;
	TOptional<FString> MapName;
	TOptional<FString> GameMode;
	TOptional<FString> MatchmakingProfileId;
	TOptional<int32> ExpectedTeamSize;
	TOptional<int32> ExpectedPlayerCount;
	TOptional<FString> HostPlayerUuid;
	TOptional<FString> OwningPlayerUuid;
	TOptional<FString> Version;
	TOptional<FString> DeviceInfo;
	TOptional<FString> PlayerUuid;
};

/** The response type for FRequest_GetAllPexClientRawByFilter */
struct RALLYHEREAPI_API FResponse_GetAllPexClientRawByFilter : public FResponseAccessorTemplate<FRHAPI_PexClientPagedResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_PexClientPagedResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetAllPexClientRawByFilter(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetAllPexClientRawByFilter() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PexClientPagedResponse Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PexClientPagedResponse& OutContent) const { return TryGetContent<FRHAPI_PexClientPagedResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PexClientPagedResponse>& OutContent) const { return TryGetContent<FRHAPI_PexClientPagedResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PexClientPagedResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PexClientPagedResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PexClientPagedResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PexClientPagedResponse>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PexClientPagedResponse& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetAllPexClientRawByFilter */
DECLARE_DELEGATE_OneParam(FDelegate_GetAllPexClientRawByFilter, const FResponse_GetAllPexClientRawByFilter&);

/** @brief A helper metadata object for GetAllPexClientRawByFilter that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetAllPexClientRawByFilter
{
	/** The request type */
	typedef FRequest_GetAllPexClientRawByFilter Request;
	/** The response type */
	typedef FResponse_GetAllPexClientRawByFilter Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetAllPexClientRawByFilter Delegate;
	/** The API object that supports this API call */
	typedef FPlayerExperienceAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get All Pex Client Scores By Filter
 * Get pages of PEX client score data based on provided filters
 * 
 * Required Permissions:
 * 
 * - For any pex client any of: `match:*`, `match:pex:read`
*/
struct RALLYHEREAPI_API FRequest_GetAllPexClientScoresByFilter : public FRequest
{
	FRequest_GetAllPexClientScoresByFilter();
	virtual ~FRequest_GetAllPexClientScoresByFilter() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	TOptional<FString> Cursor;
	/* The maximum number of elements to be returned per call */
	TOptional<int32> PageSize;
	TOptional<FDateTime> ToDatetime;
	TOptional<FDateTime> FromDatetime;
	TOptional<FString> MatchId;
	TOptional<FString> RegionId;
	TOptional<FString> ServerId;
	TOptional<FString> AllocationId;
	TOptional<FString> DatacenterProvider;
	TOptional<FString> DatacenterLocation;
	TOptional<FString> MachineClass;
	TOptional<FString> AddressIp;
	TOptional<FString> MapName;
	TOptional<FString> GameMode;
	TOptional<FString> MatchmakingProfileId;
	TOptional<int32> ExpectedTeamSize;
	TOptional<int32> ExpectedPlayerCount;
	TOptional<FString> HostPlayerUuid;
	TOptional<FString> OwningPlayerUuid;
	TOptional<FString> Version;
	TOptional<FString> DeviceInfo;
	TOptional<FString> PlayerUuid;
};

/** The response type for FRequest_GetAllPexClientScoresByFilter */
struct RALLYHEREAPI_API FResponse_GetAllPexClientScoresByFilter : public FResponseAccessorTemplate<FRHAPI_PexClientPagedResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_PexClientPagedResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetAllPexClientScoresByFilter(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetAllPexClientScoresByFilter() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PexClientPagedResponse Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PexClientPagedResponse& OutContent) const { return TryGetContent<FRHAPI_PexClientPagedResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PexClientPagedResponse>& OutContent) const { return TryGetContent<FRHAPI_PexClientPagedResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PexClientPagedResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PexClientPagedResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PexClientPagedResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PexClientPagedResponse>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PexClientPagedResponse& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetAllPexClientScoresByFilter */
DECLARE_DELEGATE_OneParam(FDelegate_GetAllPexClientScoresByFilter, const FResponse_GetAllPexClientScoresByFilter&);

/** @brief A helper metadata object for GetAllPexClientScoresByFilter that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetAllPexClientScoresByFilter
{
	/** The request type */
	typedef FRequest_GetAllPexClientScoresByFilter Request;
	/** The response type */
	typedef FResponse_GetAllPexClientScoresByFilter Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetAllPexClientScoresByFilter Delegate;
	/** The API object that supports this API call */
	typedef FPlayerExperienceAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get All Pex Host Raw By Filter
 * Get pages of PEX host raw data based on provided filters
 * 
 * Required Permissions:
 * 
 * - For any pex host any of: `match:*`, `match:pex:read`
*/
struct RALLYHEREAPI_API FRequest_GetAllPexHostRawByFilter : public FRequest
{
	FRequest_GetAllPexHostRawByFilter();
	virtual ~FRequest_GetAllPexHostRawByFilter() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	TOptional<FString> Cursor;
	/* The maximum number of elements to be returned per call */
	TOptional<int32> PageSize;
	TOptional<FDateTime> ToDatetime;
	TOptional<FDateTime> FromDatetime;
	TOptional<FString> MatchId;
	TOptional<FString> RegionId;
	TOptional<FString> ServerId;
	TOptional<FString> AllocationId;
	TOptional<FString> DatacenterProvider;
	TOptional<FString> DatacenterLocation;
	TOptional<FString> MachineClass;
	TOptional<FString> AddressIp;
	TOptional<FString> MapName;
	TOptional<FString> GameMode;
	TOptional<FString> MatchmakingProfileId;
	TOptional<int32> ExpectedTeamSize;
	TOptional<int32> ExpectedPlayerCount;
	TOptional<FString> HostPlayerUuid;
	TOptional<FString> OwningPlayerUuid;
	TOptional<FString> Version;
	TOptional<FString> DeviceInfo;
};

/** The response type for FRequest_GetAllPexHostRawByFilter */
struct RALLYHEREAPI_API FResponse_GetAllPexHostRawByFilter : public FResponseAccessorTemplate<FRHAPI_PexHostPagedResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_PexHostPagedResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetAllPexHostRawByFilter(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetAllPexHostRawByFilter() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PexHostPagedResponse Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PexHostPagedResponse& OutContent) const { return TryGetContent<FRHAPI_PexHostPagedResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PexHostPagedResponse>& OutContent) const { return TryGetContent<FRHAPI_PexHostPagedResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PexHostPagedResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PexHostPagedResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PexHostPagedResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PexHostPagedResponse>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PexHostPagedResponse& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetAllPexHostRawByFilter */
DECLARE_DELEGATE_OneParam(FDelegate_GetAllPexHostRawByFilter, const FResponse_GetAllPexHostRawByFilter&);

/** @brief A helper metadata object for GetAllPexHostRawByFilter that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetAllPexHostRawByFilter
{
	/** The request type */
	typedef FRequest_GetAllPexHostRawByFilter Request;
	/** The response type */
	typedef FResponse_GetAllPexHostRawByFilter Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetAllPexHostRawByFilter Delegate;
	/** The API object that supports this API call */
	typedef FPlayerExperienceAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get All Pex Host Scores By Filter
 * Get pages of PEX host scores based on provided filters
 * 
 * Required Permissions:
 * 
 * - For any pex client any of: `match:*`, `match:pex:read`
*/
struct RALLYHEREAPI_API FRequest_GetAllPexHostScoresByFilter : public FRequest
{
	FRequest_GetAllPexHostScoresByFilter();
	virtual ~FRequest_GetAllPexHostScoresByFilter() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	TOptional<FString> Cursor;
	/* The maximum number of elements to be returned per call */
	TOptional<int32> PageSize;
	TOptional<FDateTime> ToDatetime;
	TOptional<FDateTime> FromDatetime;
	TOptional<FString> MatchId;
	TOptional<FString> RegionId;
	TOptional<FString> ServerId;
	TOptional<FString> AllocationId;
	TOptional<FString> DatacenterProvider;
	TOptional<FString> DatacenterLocation;
	TOptional<FString> MachineClass;
	TOptional<FString> AddressIp;
	TOptional<FString> MapName;
	TOptional<FString> GameMode;
	TOptional<FString> MatchmakingProfileId;
	TOptional<int32> ExpectedTeamSize;
	TOptional<int32> ExpectedPlayerCount;
	TOptional<FString> HostPlayerUuid;
	TOptional<FString> OwningPlayerUuid;
	TOptional<FString> Version;
	TOptional<FString> DeviceInfo;
};

/** The response type for FRequest_GetAllPexHostScoresByFilter */
struct RALLYHEREAPI_API FResponse_GetAllPexHostScoresByFilter : public FResponseAccessorTemplate<FRHAPI_PexHostPagedResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_PexHostPagedResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetAllPexHostScoresByFilter(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetAllPexHostScoresByFilter() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PexHostPagedResponse Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PexHostPagedResponse& OutContent) const { return TryGetContent<FRHAPI_PexHostPagedResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PexHostPagedResponse>& OutContent) const { return TryGetContent<FRHAPI_PexHostPagedResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PexHostPagedResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PexHostPagedResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PexHostPagedResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PexHostPagedResponse>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PexHostPagedResponse& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetAllPexHostScoresByFilter */
DECLARE_DELEGATE_OneParam(FDelegate_GetAllPexHostScoresByFilter, const FResponse_GetAllPexHostScoresByFilter&);

/** @brief A helper metadata object for GetAllPexHostScoresByFilter that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetAllPexHostScoresByFilter
{
	/** The request type */
	typedef FRequest_GetAllPexHostScoresByFilter Request;
	/** The response type */
	typedef FResponse_GetAllPexHostScoresByFilter Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetAllPexHostScoresByFilter Delegate;
	/** The API object that supports this API call */
	typedef FPlayerExperienceAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};


/** The API class itself, which will handle calls to */
class RALLYHEREAPI_API FPlayerExperienceAPI : public FAPI
{
public:
	FPlayerExperienceAPI();
	virtual ~FPlayerExperienceAPI();

	FHttpRequestPtr CreatePexHost(const FRequest_CreatePexHost& Request, const FDelegate_CreatePexHost& Delegate = FDelegate_CreatePexHost(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnCreatePexHostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_CreatePexHost Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr CreatePexPlayer(const FRequest_CreatePexPlayer& Request, const FDelegate_CreatePexPlayer& Delegate = FDelegate_CreatePexPlayer(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnCreatePexPlayerResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_CreatePexPlayer Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetAllPexClientRawByFilter(const FRequest_GetAllPexClientRawByFilter& Request, const FDelegate_GetAllPexClientRawByFilter& Delegate = FDelegate_GetAllPexClientRawByFilter(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetAllPexClientRawByFilterResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAllPexClientRawByFilter Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetAllPexClientScoresByFilter(const FRequest_GetAllPexClientScoresByFilter& Request, const FDelegate_GetAllPexClientScoresByFilter& Delegate = FDelegate_GetAllPexClientScoresByFilter(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetAllPexClientScoresByFilterResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAllPexClientScoresByFilter Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetAllPexHostRawByFilter(const FRequest_GetAllPexHostRawByFilter& Request, const FDelegate_GetAllPexHostRawByFilter& Delegate = FDelegate_GetAllPexHostRawByFilter(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetAllPexHostRawByFilterResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAllPexHostRawByFilter Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetAllPexHostScoresByFilter(const FRequest_GetAllPexHostScoresByFilter& Request, const FDelegate_GetAllPexHostScoresByFilter& Delegate = FDelegate_GetAllPexHostScoresByFilter(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetAllPexHostScoresByFilterResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAllPexHostScoresByFilter Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};



}
