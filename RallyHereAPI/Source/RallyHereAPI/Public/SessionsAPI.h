// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereAPIAuthContext.h"
#include "RallyHereAPIHelpers.h"
#include "Platform.h"
#include "BrowserInfo.h"
#include "BrowserResponse.h"
#include "ConnectionInfo.h"
#include "CreateOrJoinRequest.h"
#include "HTTPValidationError.h"
#include "HzApiErrorModel.h"
#include "InstanceFubar.h"
#include "InstanceInfo.h"
#include "InstanceInfoUpdate.h"
#include "InstanceRequest.h"
#include "MatchCreateRequest.h"
#include "MatchCreateResponse.h"
#include "MatchMakingSessionRequest.h"
#include "PlatformSession.h"
#include "PlayerSessions.h"
#include "QueueJoinRequest.h"
#include "QueueJoinResponse.h"
#include "SelfSessionPlayerUpdateRequest.h"
#include "Session.h"
#include "SessionEventCreateRequest.h"
#include "SessionEvents.h"
#include "SessionJoinResponse.h"
#include "SessionPlayerUpdateRequest.h"
#include "SessionPlayerUpdateResponse.h"
#include "SessionTemplate.h"
#include "SessionTemplates.h"
#include "SessionUpdate.h"

namespace RallyHereAPI
{
using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

struct FRequest_AddPlatformSessionToRallyHereSession;
struct FResponse_AddPlatformSessionToRallyHereSession;
struct FRequest_CreateInstanceRequest;
struct FResponse_CreateInstanceRequest;
struct FRequest_CreateMatch;
struct FResponse_CreateMatch;
struct FRequest_CreateOrJoinSession;
struct FResponse_CreateOrJoinSession;
struct FRequest_CreateSessionEvent;
struct FResponse_CreateSessionEvent;
struct FRequest_DeleteBrowserInfo;
struct FResponse_DeleteBrowserInfo;
struct FRequest_EndInstance;
struct FResponse_EndInstance;
struct FRequest_EndMatch;
struct FResponse_EndMatch;
struct FRequest_GetAllSessionTemplates;
struct FResponse_GetAllSessionTemplates;
struct FRequest_GetBrowserSessionsByType;
struct FResponse_GetBrowserSessionsByType;
struct FRequest_GetConnectionInfoSelf;
struct FResponse_GetConnectionInfoSelf;
struct FRequest_GetPlatformSessionInfo;
struct FResponse_GetPlatformSessionInfo;
struct FRequest_GetPlayerSessions;
struct FResponse_GetPlayerSessions;
struct FRequest_GetPlayerSessionsByUuid;
struct FResponse_GetPlayerSessionsByUuid;
struct FRequest_GetPlayerSessionsSelf;
struct FResponse_GetPlayerSessionsSelf;
struct FRequest_GetSessionByAllocationId;
struct FResponse_GetSessionByAllocationId;
struct FRequest_GetSessionById;
struct FResponse_GetSessionById;
struct FRequest_GetSessionEvents;
struct FResponse_GetSessionEvents;
struct FRequest_GetSessionTemplateByType;
struct FResponse_GetSessionTemplateByType;
struct FRequest_JoinQueue;
struct FResponse_JoinQueue;
struct FRequest_JoinSessionByIdSelf;
struct FResponse_JoinSessionByIdSelf;
struct FRequest_JoinSessionByPlatformSessionByUuid;
struct FResponse_JoinSessionByPlatformSessionByUuid;
struct FRequest_JoinSessionByPlatformSessionIdSelf;
struct FResponse_JoinSessionByPlatformSessionIdSelf;
struct FRequest_KickPlayerFromSessionById;
struct FResponse_KickPlayerFromSessionById;
struct FRequest_KickPlayerFromSessionByUuid;
struct FResponse_KickPlayerFromSessionByUuid;
struct FRequest_KickPlayerFromSessionByUuidLongPath;
struct FResponse_KickPlayerFromSessionByUuidLongPath;
struct FRequest_LeaveQueue;
struct FResponse_LeaveQueue;
struct FRequest_LeaveSessionByIdSelf;
struct FResponse_LeaveSessionByIdSelf;
struct FRequest_LeaveSessionByPlatformSessionByUuid;
struct FResponse_LeaveSessionByPlatformSessionByUuid;
struct FRequest_LeaveSessionByPlatformSessionSelf;
struct FResponse_LeaveSessionByPlatformSessionSelf;
struct FRequest_PostBrowserInfo;
struct FResponse_PostBrowserInfo;
struct FRequest_ReportFubar;
struct FResponse_ReportFubar;
struct FRequest_SessiongetPlayerSessionsByUuid;
struct FResponse_SessiongetPlayerSessionsByUuid;
struct FRequest_StartMatch;
struct FResponse_StartMatch;
struct FRequest_UpdateBrowserInfo;
struct FResponse_UpdateBrowserInfo;
struct FRequest_UpdateInstanceInfo;
struct FResponse_UpdateInstanceInfo;
struct FRequest_UpdateMatchInfo;
struct FResponse_UpdateMatchInfo;
struct FRequest_UpdateSessionById;
struct FResponse_UpdateSessionById;
struct FRequest_UpdateSessionPlayerById;
struct FResponse_UpdateSessionPlayerById;
struct FRequest_UpdateSessionPlayerByUuid;
struct FResponse_UpdateSessionPlayerByUuid;
struct FRequest_UpdateSessionPlayerByUuidLongPath;
struct FResponse_UpdateSessionPlayerByUuidLongPath;

DECLARE_DELEGATE_OneParam(FDelegate_AddPlatformSessionToRallyHereSession, const FResponse_AddPlatformSessionToRallyHereSession&);
DECLARE_DELEGATE_OneParam(FDelegate_CreateInstanceRequest, const FResponse_CreateInstanceRequest&);
DECLARE_DELEGATE_OneParam(FDelegate_CreateMatch, const FResponse_CreateMatch&);
DECLARE_DELEGATE_OneParam(FDelegate_CreateOrJoinSession, const FResponse_CreateOrJoinSession&);
DECLARE_DELEGATE_OneParam(FDelegate_CreateSessionEvent, const FResponse_CreateSessionEvent&);
DECLARE_DELEGATE_OneParam(FDelegate_DeleteBrowserInfo, const FResponse_DeleteBrowserInfo&);
DECLARE_DELEGATE_OneParam(FDelegate_EndInstance, const FResponse_EndInstance&);
DECLARE_DELEGATE_OneParam(FDelegate_EndMatch, const FResponse_EndMatch&);
DECLARE_DELEGATE_OneParam(FDelegate_GetAllSessionTemplates, const FResponse_GetAllSessionTemplates&);
DECLARE_DELEGATE_OneParam(FDelegate_GetBrowserSessionsByType, const FResponse_GetBrowserSessionsByType&);
DECLARE_DELEGATE_OneParam(FDelegate_GetConnectionInfoSelf, const FResponse_GetConnectionInfoSelf&);
DECLARE_DELEGATE_OneParam(FDelegate_GetPlatformSessionInfo, const FResponse_GetPlatformSessionInfo&);
DECLARE_DELEGATE_OneParam(FDelegate_GetPlayerSessions, const FResponse_GetPlayerSessions&);
DECLARE_DELEGATE_OneParam(FDelegate_GetPlayerSessionsByUuid, const FResponse_GetPlayerSessionsByUuid&);
DECLARE_DELEGATE_OneParam(FDelegate_GetPlayerSessionsSelf, const FResponse_GetPlayerSessionsSelf&);
DECLARE_DELEGATE_OneParam(FDelegate_GetSessionByAllocationId, const FResponse_GetSessionByAllocationId&);
DECLARE_DELEGATE_OneParam(FDelegate_GetSessionById, const FResponse_GetSessionById&);
DECLARE_DELEGATE_OneParam(FDelegate_GetSessionEvents, const FResponse_GetSessionEvents&);
DECLARE_DELEGATE_OneParam(FDelegate_GetSessionTemplateByType, const FResponse_GetSessionTemplateByType&);
DECLARE_DELEGATE_OneParam(FDelegate_JoinQueue, const FResponse_JoinQueue&);
DECLARE_DELEGATE_OneParam(FDelegate_JoinSessionByIdSelf, const FResponse_JoinSessionByIdSelf&);
DECLARE_DELEGATE_OneParam(FDelegate_JoinSessionByPlatformSessionByUuid, const FResponse_JoinSessionByPlatformSessionByUuid&);
DECLARE_DELEGATE_OneParam(FDelegate_JoinSessionByPlatformSessionIdSelf, const FResponse_JoinSessionByPlatformSessionIdSelf&);
DECLARE_DELEGATE_OneParam(FDelegate_KickPlayerFromSessionById, const FResponse_KickPlayerFromSessionById&);
DECLARE_DELEGATE_OneParam(FDelegate_KickPlayerFromSessionByUuid, const FResponse_KickPlayerFromSessionByUuid&);
DECLARE_DELEGATE_OneParam(FDelegate_KickPlayerFromSessionByUuidLongPath, const FResponse_KickPlayerFromSessionByUuidLongPath&);
DECLARE_DELEGATE_OneParam(FDelegate_LeaveQueue, const FResponse_LeaveQueue&);
DECLARE_DELEGATE_OneParam(FDelegate_LeaveSessionByIdSelf, const FResponse_LeaveSessionByIdSelf&);
DECLARE_DELEGATE_OneParam(FDelegate_LeaveSessionByPlatformSessionByUuid, const FResponse_LeaveSessionByPlatformSessionByUuid&);
DECLARE_DELEGATE_OneParam(FDelegate_LeaveSessionByPlatformSessionSelf, const FResponse_LeaveSessionByPlatformSessionSelf&);
DECLARE_DELEGATE_OneParam(FDelegate_PostBrowserInfo, const FResponse_PostBrowserInfo&);
DECLARE_DELEGATE_OneParam(FDelegate_ReportFubar, const FResponse_ReportFubar&);
DECLARE_DELEGATE_OneParam(FDelegate_SessiongetPlayerSessionsByUuid, const FResponse_SessiongetPlayerSessionsByUuid&);
DECLARE_DELEGATE_OneParam(FDelegate_StartMatch, const FResponse_StartMatch&);
DECLARE_DELEGATE_OneParam(FDelegate_UpdateBrowserInfo, const FResponse_UpdateBrowserInfo&);
DECLARE_DELEGATE_OneParam(FDelegate_UpdateInstanceInfo, const FResponse_UpdateInstanceInfo&);
DECLARE_DELEGATE_OneParam(FDelegate_UpdateMatchInfo, const FResponse_UpdateMatchInfo&);
DECLARE_DELEGATE_OneParam(FDelegate_UpdateSessionById, const FResponse_UpdateSessionById&);
DECLARE_DELEGATE_OneParam(FDelegate_UpdateSessionPlayerById, const FResponse_UpdateSessionPlayerById&);
DECLARE_DELEGATE_OneParam(FDelegate_UpdateSessionPlayerByUuid, const FResponse_UpdateSessionPlayerByUuid&);
DECLARE_DELEGATE_OneParam(FDelegate_UpdateSessionPlayerByUuidLongPath, const FResponse_UpdateSessionPlayerByUuidLongPath&);

class RALLYHEREAPI_API FSessionsAPI : public FAPI
{
public:
    FSessionsAPI();
    virtual ~FSessionsAPI();

    FHttpRequestPtr AddPlatformSessionToRallyHereSession(const FRequest_AddPlatformSessionToRallyHereSession& Request, const FDelegate_AddPlatformSessionToRallyHereSession& Delegate = FDelegate_AddPlatformSessionToRallyHereSession(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr CreateInstanceRequest(const FRequest_CreateInstanceRequest& Request, const FDelegate_CreateInstanceRequest& Delegate = FDelegate_CreateInstanceRequest(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr CreateMatch(const FRequest_CreateMatch& Request, const FDelegate_CreateMatch& Delegate = FDelegate_CreateMatch(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr CreateOrJoinSession(const FRequest_CreateOrJoinSession& Request, const FDelegate_CreateOrJoinSession& Delegate = FDelegate_CreateOrJoinSession(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr CreateSessionEvent(const FRequest_CreateSessionEvent& Request, const FDelegate_CreateSessionEvent& Delegate = FDelegate_CreateSessionEvent(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr DeleteBrowserInfo(const FRequest_DeleteBrowserInfo& Request, const FDelegate_DeleteBrowserInfo& Delegate = FDelegate_DeleteBrowserInfo(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr EndInstance(const FRequest_EndInstance& Request, const FDelegate_EndInstance& Delegate = FDelegate_EndInstance(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr EndMatch(const FRequest_EndMatch& Request, const FDelegate_EndMatch& Delegate = FDelegate_EndMatch(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr GetAllSessionTemplates(const FRequest_GetAllSessionTemplates& Request, const FDelegate_GetAllSessionTemplates& Delegate = FDelegate_GetAllSessionTemplates(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr GetBrowserSessionsByType(const FRequest_GetBrowserSessionsByType& Request, const FDelegate_GetBrowserSessionsByType& Delegate = FDelegate_GetBrowserSessionsByType(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr GetConnectionInfoSelf(const FRequest_GetConnectionInfoSelf& Request, const FDelegate_GetConnectionInfoSelf& Delegate = FDelegate_GetConnectionInfoSelf(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr GetPlatformSessionInfo(const FRequest_GetPlatformSessionInfo& Request, const FDelegate_GetPlatformSessionInfo& Delegate = FDelegate_GetPlatformSessionInfo(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr GetPlayerSessions(const FRequest_GetPlayerSessions& Request, const FDelegate_GetPlayerSessions& Delegate = FDelegate_GetPlayerSessions(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr GetPlayerSessionsByUuid(const FRequest_GetPlayerSessionsByUuid& Request, const FDelegate_GetPlayerSessionsByUuid& Delegate = FDelegate_GetPlayerSessionsByUuid(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr GetPlayerSessionsSelf(const FRequest_GetPlayerSessionsSelf& Request, const FDelegate_GetPlayerSessionsSelf& Delegate = FDelegate_GetPlayerSessionsSelf(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr GetSessionByAllocationId(const FRequest_GetSessionByAllocationId& Request, const FDelegate_GetSessionByAllocationId& Delegate = FDelegate_GetSessionByAllocationId(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr GetSessionById(const FRequest_GetSessionById& Request, const FDelegate_GetSessionById& Delegate = FDelegate_GetSessionById(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr GetSessionEvents(const FRequest_GetSessionEvents& Request, const FDelegate_GetSessionEvents& Delegate = FDelegate_GetSessionEvents(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr GetSessionTemplateByType(const FRequest_GetSessionTemplateByType& Request, const FDelegate_GetSessionTemplateByType& Delegate = FDelegate_GetSessionTemplateByType(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr JoinQueue(const FRequest_JoinQueue& Request, const FDelegate_JoinQueue& Delegate = FDelegate_JoinQueue(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr JoinSessionByIdSelf(const FRequest_JoinSessionByIdSelf& Request, const FDelegate_JoinSessionByIdSelf& Delegate = FDelegate_JoinSessionByIdSelf(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr JoinSessionByPlatformSessionByUuid(const FRequest_JoinSessionByPlatformSessionByUuid& Request, const FDelegate_JoinSessionByPlatformSessionByUuid& Delegate = FDelegate_JoinSessionByPlatformSessionByUuid(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr JoinSessionByPlatformSessionIdSelf(const FRequest_JoinSessionByPlatformSessionIdSelf& Request, const FDelegate_JoinSessionByPlatformSessionIdSelf& Delegate = FDelegate_JoinSessionByPlatformSessionIdSelf(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr KickPlayerFromSessionById(const FRequest_KickPlayerFromSessionById& Request, const FDelegate_KickPlayerFromSessionById& Delegate = FDelegate_KickPlayerFromSessionById(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr KickPlayerFromSessionByUuid(const FRequest_KickPlayerFromSessionByUuid& Request, const FDelegate_KickPlayerFromSessionByUuid& Delegate = FDelegate_KickPlayerFromSessionByUuid(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr KickPlayerFromSessionByUuidLongPath(const FRequest_KickPlayerFromSessionByUuidLongPath& Request, const FDelegate_KickPlayerFromSessionByUuidLongPath& Delegate = FDelegate_KickPlayerFromSessionByUuidLongPath(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr LeaveQueue(const FRequest_LeaveQueue& Request, const FDelegate_LeaveQueue& Delegate = FDelegate_LeaveQueue(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr LeaveSessionByIdSelf(const FRequest_LeaveSessionByIdSelf& Request, const FDelegate_LeaveSessionByIdSelf& Delegate = FDelegate_LeaveSessionByIdSelf(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr LeaveSessionByPlatformSessionByUuid(const FRequest_LeaveSessionByPlatformSessionByUuid& Request, const FDelegate_LeaveSessionByPlatformSessionByUuid& Delegate = FDelegate_LeaveSessionByPlatformSessionByUuid(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr LeaveSessionByPlatformSessionSelf(const FRequest_LeaveSessionByPlatformSessionSelf& Request, const FDelegate_LeaveSessionByPlatformSessionSelf& Delegate = FDelegate_LeaveSessionByPlatformSessionSelf(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr PostBrowserInfo(const FRequest_PostBrowserInfo& Request, const FDelegate_PostBrowserInfo& Delegate = FDelegate_PostBrowserInfo(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr ReportFubar(const FRequest_ReportFubar& Request, const FDelegate_ReportFubar& Delegate = FDelegate_ReportFubar(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr SessiongetPlayerSessionsByUuid(const FRequest_SessiongetPlayerSessionsByUuid& Request, const FDelegate_SessiongetPlayerSessionsByUuid& Delegate = FDelegate_SessiongetPlayerSessionsByUuid(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr StartMatch(const FRequest_StartMatch& Request, const FDelegate_StartMatch& Delegate = FDelegate_StartMatch(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr UpdateBrowserInfo(const FRequest_UpdateBrowserInfo& Request, const FDelegate_UpdateBrowserInfo& Delegate = FDelegate_UpdateBrowserInfo(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr UpdateInstanceInfo(const FRequest_UpdateInstanceInfo& Request, const FDelegate_UpdateInstanceInfo& Delegate = FDelegate_UpdateInstanceInfo(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr UpdateMatchInfo(const FRequest_UpdateMatchInfo& Request, const FDelegate_UpdateMatchInfo& Delegate = FDelegate_UpdateMatchInfo(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr UpdateSessionById(const FRequest_UpdateSessionById& Request, const FDelegate_UpdateSessionById& Delegate = FDelegate_UpdateSessionById(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr UpdateSessionPlayerById(const FRequest_UpdateSessionPlayerById& Request, const FDelegate_UpdateSessionPlayerById& Delegate = FDelegate_UpdateSessionPlayerById(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr UpdateSessionPlayerByUuid(const FRequest_UpdateSessionPlayerByUuid& Request, const FDelegate_UpdateSessionPlayerByUuid& Delegate = FDelegate_UpdateSessionPlayerByUuid(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr UpdateSessionPlayerByUuidLongPath(const FRequest_UpdateSessionPlayerByUuidLongPath& Request, const FDelegate_UpdateSessionPlayerByUuidLongPath& Delegate = FDelegate_UpdateSessionPlayerByUuidLongPath(), int32 Priority = DefaultRallyHereAPIPriority);

private:
    void OnAddPlatformSessionToRallyHereSessionResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_AddPlatformSessionToRallyHereSession Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnCreateInstanceRequestResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_CreateInstanceRequest Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnCreateMatchResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_CreateMatch Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnCreateOrJoinSessionResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_CreateOrJoinSession Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnCreateSessionEventResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_CreateSessionEvent Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnDeleteBrowserInfoResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_DeleteBrowserInfo Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnEndInstanceResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_EndInstance Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnEndMatchResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_EndMatch Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetAllSessionTemplatesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAllSessionTemplates Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetBrowserSessionsByTypeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetBrowserSessionsByType Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetConnectionInfoSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetConnectionInfoSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetPlatformSessionInfoResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlatformSessionInfo Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetPlayerSessionsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlayerSessions Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetPlayerSessionsByUuidResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlayerSessionsByUuid Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetPlayerSessionsSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlayerSessionsSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetSessionByAllocationIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetSessionByAllocationId Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetSessionByIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetSessionById Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetSessionEventsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetSessionEvents Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetSessionTemplateByTypeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetSessionTemplateByType Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnJoinQueueResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_JoinQueue Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnJoinSessionByIdSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_JoinSessionByIdSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnJoinSessionByPlatformSessionByUuidResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_JoinSessionByPlatformSessionByUuid Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnJoinSessionByPlatformSessionIdSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_JoinSessionByPlatformSessionIdSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnKickPlayerFromSessionByIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_KickPlayerFromSessionById Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnKickPlayerFromSessionByUuidResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_KickPlayerFromSessionByUuid Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnKickPlayerFromSessionByUuidLongPathResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_KickPlayerFromSessionByUuidLongPath Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnLeaveQueueResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_LeaveQueue Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnLeaveSessionByIdSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_LeaveSessionByIdSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnLeaveSessionByPlatformSessionByUuidResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_LeaveSessionByPlatformSessionByUuid Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnLeaveSessionByPlatformSessionSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_LeaveSessionByPlatformSessionSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnPostBrowserInfoResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_PostBrowserInfo Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnReportFubarResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_ReportFubar Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSessiongetPlayerSessionsByUuidResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SessiongetPlayerSessionsByUuid Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnStartMatchResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_StartMatch Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnUpdateBrowserInfoResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdateBrowserInfo Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnUpdateInstanceInfoResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdateInstanceInfo Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnUpdateMatchInfoResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdateMatchInfo Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnUpdateSessionByIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdateSessionById Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnUpdateSessionPlayerByIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdateSessionPlayerById Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnUpdateSessionPlayerByUuidResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdateSessionPlayerByUuid Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnUpdateSessionPlayerByUuidLongPathResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdateSessionPlayerByUuidLongPath Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};

/* Add Platform Session To Rally Here Session
 *
 * Add a platform session to an existing RallyHere session. The requesting player will be added to the platform session, and be made its leader  Required Permissions:   For any player (including themselves)any of: &#x60;session:*&#x60;, &#x60;session:update:platform&#x60;   Required Session Permissions: &#x60;SessionPermissions.active_in_session&#x60; for users that do not have the &#x60;session:update:any&#x60; auth permission
*/
struct RALLYHEREAPI_API FRequest_AddPlatformSessionToRallyHereSession : public FRequest
{
    FRequest_AddPlatformSessionToRallyHereSession();
    virtual ~FRequest_AddPlatformSessionToRallyHereSession() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    ERHAPI_Platform Platform;
    FString PlatformSessionIdBase64;
    FString SessionId;
};

struct RALLYHEREAPI_API FResponse_AddPlatformSessionToRallyHereSession : public FResponse
{
    FResponse_AddPlatformSessionToRallyHereSession(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_AddPlatformSessionToRallyHereSession() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    bool ParseHeaders() override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_PlatformSession Content;
    // Headers
    /* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
    TOptional<FString> ETag;
};

struct RALLYHEREAPI_API Traits_AddPlatformSessionToRallyHereSession
{
    typedef FRequest_AddPlatformSessionToRallyHereSession Request;
    typedef FResponse_AddPlatformSessionToRallyHereSession Response;
    typedef FDelegate_AddPlatformSessionToRallyHereSession Delegate;
    typedef FSessionsAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.AddPlatformSessionToRallyHereSession(InRequest, InDelegate, Priority); }
};

/* Create Instance Request
 *
 * Request an instance be spawned for the session, or register self as a host of the instance  Required Permissions:   For any player (including themselves)any of: &#x60;session:update:any&#x60;, &#x60;session:*&#x60;, &#x60;session:update:self&#x60;                Required Session Permissions: &#x60;SessionPermissions.session_admin&#x60; if user does not have the &#x60;session:update:any&#x60; auth permission
*/
struct RALLYHEREAPI_API FRequest_CreateInstanceRequest : public FRequest
{
    FRequest_CreateInstanceRequest();
    virtual ~FRequest_CreateInstanceRequest() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionId;
    FRHAPI_InstanceRequest InstanceRequest;
};

struct RALLYHEREAPI_API FResponse_CreateInstanceRequest : public FResponse
{
    FResponse_CreateInstanceRequest(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_CreateInstanceRequest() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_InstanceInfo Content;

};

struct RALLYHEREAPI_API Traits_CreateInstanceRequest
{
    typedef FRequest_CreateInstanceRequest Request;
    typedef FResponse_CreateInstanceRequest Response;
    typedef FDelegate_CreateInstanceRequest Delegate;
    typedef FSessionsAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.CreateInstanceRequest(InRequest, InDelegate, Priority); }
};

/* Create Match
 *
 * Create a match session based on matchmaking results. Only used by the matchmaking system, and not players  Required Permissions:   For any player (including themselves)any of: &#x60;session:update:any&#x60;, &#x60;session:*&#x60;   Required Session Permissions: None
*/
struct RALLYHEREAPI_API FRequest_CreateMatch : public FRequest
{
    FRequest_CreateMatch();
    virtual ~FRequest_CreateMatch() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FRHAPI_MatchMakingSessionRequest MatchMakingSessionRequest;
};

struct RALLYHEREAPI_API FResponse_CreateMatch : public FResponse
{
    FResponse_CreateMatch(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_CreateMatch() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_JsonValue Content;

};

struct RALLYHEREAPI_API Traits_CreateMatch
{
    typedef FRequest_CreateMatch Request;
    typedef FResponse_CreateMatch Response;
    typedef FDelegate_CreateMatch Delegate;
    typedef FSessionsAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.CreateMatch(InRequest, InDelegate, Priority); }
};

/* Create Or Join Session
 *
 * Join the first publicly available session of given type. If there is no public session, and the session type permits player made sessions, create a new session and put the player in it  Required Permissions:   For any player (including themselves)any of: &#x60;session:create&#x60;, &#x60;session:*&#x60;   Required Session Permissions: None
*/
struct RALLYHEREAPI_API FRequest_CreateOrJoinSession : public FRequest
{
    FRequest_CreateOrJoinSession();
    virtual ~FRequest_CreateOrJoinSession() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FRHAPI_CreateOrJoinRequest CreateOrJoinRequest;
};

struct RALLYHEREAPI_API FResponse_CreateOrJoinSession : public FResponse
{
    FResponse_CreateOrJoinSession(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_CreateOrJoinSession() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_SessionJoinResponse Content;

};

struct RALLYHEREAPI_API Traits_CreateOrJoinSession
{
    typedef FRequest_CreateOrJoinSession Request;
    typedef FResponse_CreateOrJoinSession Response;
    typedef FDelegate_CreateOrJoinSession Delegate;
    typedef FSessionsAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.CreateOrJoinSession(InRequest, InDelegate, Priority); }
};

/* Create Session Event
 *
 * Create an event in the log for this session. Internal session operations will create new events that are accessible from the get request.  Player clients and instances are expected to create events here when something occurs on their clients that is relevant.  Required Permissions:   For any player (including themselves)any of: &#x60;session:update:any&#x60;, &#x60;session:update:event&#x60;, &#x60;session:*&#x60;   Required Session Permissions: None
*/
struct RALLYHEREAPI_API FRequest_CreateSessionEvent : public FRequest
{
    FRequest_CreateSessionEvent();
    virtual ~FRequest_CreateSessionEvent() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionId;
    FRHAPI_SessionEventCreateRequest SessionEventCreateRequest;
};

struct RALLYHEREAPI_API FResponse_CreateSessionEvent : public FResponse
{
    FResponse_CreateSessionEvent(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_CreateSessionEvent() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_JsonValue Content;

};

struct RALLYHEREAPI_API Traits_CreateSessionEvent
{
    typedef FRequest_CreateSessionEvent Request;
    typedef FResponse_CreateSessionEvent Response;
    typedef FDelegate_CreateSessionEvent Delegate;
    typedef FSessionsAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.CreateSessionEvent(InRequest, InDelegate, Priority); }
};

/* Delete Browser Info
 *
 * Delete the session from the public browser  Required Permissions:   For any player (including themselves)any of: &#x60;session:update:browser&#x60;, &#x60;session:*&#x60;   Required Session Permissions: &#x60;SessionPermissions.session_admin&#x60; if user does not have the &#x60;session:*&#x60; auth permission
*/
struct RALLYHEREAPI_API FRequest_DeleteBrowserInfo : public FRequest
{
    FRequest_DeleteBrowserInfo();
    virtual ~FRequest_DeleteBrowserInfo() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionId;
};

struct RALLYHEREAPI_API FResponse_DeleteBrowserInfo : public FResponse
{
    FResponse_DeleteBrowserInfo(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_DeleteBrowserInfo() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    

};

struct RALLYHEREAPI_API Traits_DeleteBrowserInfo
{
    typedef FRequest_DeleteBrowserInfo Request;
    typedef FResponse_DeleteBrowserInfo Response;
    typedef FDelegate_DeleteBrowserInfo Delegate;
    typedef FSessionsAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.DeleteBrowserInfo(InRequest, InDelegate, Priority); }
};

/* End Instance
 *
 * Unregister the instance from the session.  Required Permissions:   For any player (including themselves)any of: &#x60;session:update:any&#x60;, &#x60;session:*&#x60;, &#x60;session:update:self&#x60;                Required Session Permissions: &#x60;SessionPermissions.session_host&#x60; if user does not have the &#x60;session:update:any&#x60; auth permission
*/
struct RALLYHEREAPI_API FRequest_EndInstance : public FRequest
{
    FRequest_EndInstance();
    virtual ~FRequest_EndInstance() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionId;
};

struct RALLYHEREAPI_API FResponse_EndInstance : public FResponse
{
    FResponse_EndInstance(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_EndInstance() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    bool ParseHeaders() override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    
    // Headers
    /* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
    TOptional<FString> ETag;
};

struct RALLYHEREAPI_API Traits_EndInstance
{
    typedef FRequest_EndInstance Request;
    typedef FResponse_EndInstance Response;
    typedef FDelegate_EndInstance Delegate;
    typedef FSessionsAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.EndInstance(InRequest, InDelegate, Priority); }
};

/* End Match
 *
 * Unregister the match from the session.                 Required Permissions:   For any player (including themselves)any of: &#x60;session:update:any&#x60;, &#x60;session:*&#x60;, &#x60;session:update:self&#x60;                Required Session Permissions: &#x60;SessionPermissions.session_admin&#x60; if user does not have the &#x60;session:update:any&#x60; auth permission
*/
struct RALLYHEREAPI_API FRequest_EndMatch : public FRequest
{
    FRequest_EndMatch();
    virtual ~FRequest_EndMatch() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionId;
};

struct RALLYHEREAPI_API FResponse_EndMatch : public FResponse
{
    FResponse_EndMatch(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_EndMatch() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_JsonValue Content;

};

struct RALLYHEREAPI_API Traits_EndMatch
{
    typedef FRequest_EndMatch Request;
    typedef FResponse_EndMatch Response;
    typedef FDelegate_EndMatch Delegate;
    typedef FSessionsAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.EndMatch(InRequest, InDelegate, Priority); }
};

/* Get All Session Templates
 *
 * Get the config about all session templates  Required Permissions:   For any player (including themselves)any of: &#x60;session:*&#x60;, &#x60;session:read:config&#x60;   Required Session Permissions: None
*/
struct RALLYHEREAPI_API FRequest_GetAllSessionTemplates : public FRequest
{
    FRequest_GetAllSessionTemplates();
    virtual ~FRequest_GetAllSessionTemplates() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed. */
    TOptional<FString> IfNoneMatch;
};

struct RALLYHEREAPI_API FResponse_GetAllSessionTemplates : public FResponse
{
    FResponse_GetAllSessionTemplates(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetAllSessionTemplates() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    bool ParseHeaders() override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_SessionTemplates Content;
    // Headers
    /* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
    TOptional<FString> ETag;
};

struct RALLYHEREAPI_API Traits_GetAllSessionTemplates
{
    typedef FRequest_GetAllSessionTemplates Request;
    typedef FResponse_GetAllSessionTemplates Response;
    typedef FDelegate_GetAllSessionTemplates Delegate;
    typedef FSessionsAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.GetAllSessionTemplates(InRequest, InDelegate, Priority); }
};

/* Get Browser Sessions By Type
 *
 * Get all public sessions of a specific type  Required Permissions:   For any player (including themselves)any of: &#x60;session:*&#x60;, &#x60;session:read:browser&#x60;   Required Permissions: None
*/
struct RALLYHEREAPI_API FRequest_GetBrowserSessionsByType : public FRequest
{
    FRequest_GetBrowserSessionsByType();
    virtual ~FRequest_GetBrowserSessionsByType() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionType;
    TOptional<int32> Cursor;
    TOptional<int32> PageSize;
};

struct RALLYHEREAPI_API FResponse_GetBrowserSessionsByType : public FResponse
{
    FResponse_GetBrowserSessionsByType(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetBrowserSessionsByType() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    bool ParseHeaders() override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_BrowserResponse Content;
    // Headers
    /* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
    TOptional<FString> ETag;
};

struct RALLYHEREAPI_API Traits_GetBrowserSessionsByType
{
    typedef FRequest_GetBrowserSessionsByType Request;
    typedef FResponse_GetBrowserSessionsByType Response;
    typedef FDelegate_GetBrowserSessionsByType Delegate;
    typedef FSessionsAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.GetBrowserSessionsByType(InRequest, InDelegate, Priority); }
};

/* Get Connection Info Self
 *
 * Get public connection info for self  Required Permissions:   For any player (including themselves)any of: &#x60;session:*&#x60;, &#x60;session:read:config&#x60;   Required Permissions: None
*/
struct RALLYHEREAPI_API FRequest_GetConnectionInfoSelf : public FRequest
{
    FRequest_GetConnectionInfoSelf();
    virtual ~FRequest_GetConnectionInfoSelf() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    TOptional<FString> XForwardedFor;
};

struct RALLYHEREAPI_API FResponse_GetConnectionInfoSelf : public FResponse
{
    FResponse_GetConnectionInfoSelf(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetConnectionInfoSelf() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_ConnectionInfo Content;

};

struct RALLYHEREAPI_API Traits_GetConnectionInfoSelf
{
    typedef FRequest_GetConnectionInfoSelf Request;
    typedef FResponse_GetConnectionInfoSelf Response;
    typedef FDelegate_GetConnectionInfoSelf Delegate;
    typedef FSessionsAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.GetConnectionInfoSelf(InRequest, InDelegate, Priority); }
};

/* Get Platform Session Info
 *
 * Get information about a platform session  Required Permissions:   For any player (including themselves)any of: &#x60;session:*&#x60;, &#x60;session:read:platform&#x60;   Required Session Permissions: &#x60;SessionPermissions.active_in_session&#x60; for users that do not have the &#x60;session:read:any&#x60; auth permission
*/
struct RALLYHEREAPI_API FRequest_GetPlatformSessionInfo : public FRequest
{
    FRequest_GetPlatformSessionInfo();
    virtual ~FRequest_GetPlatformSessionInfo() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    ERHAPI_Platform Platform;
    FString PlatformSessionIdBase64;
    /* If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed. */
    TOptional<FString> IfNoneMatch;
};

struct RALLYHEREAPI_API FResponse_GetPlatformSessionInfo : public FResponse
{
    FResponse_GetPlatformSessionInfo(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetPlatformSessionInfo() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    bool ParseHeaders() override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_PlatformSession Content;
    // Headers
    /* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
    TOptional<FString> ETag;
};

struct RALLYHEREAPI_API Traits_GetPlatformSessionInfo
{
    typedef FRequest_GetPlatformSessionInfo Request;
    typedef FResponse_GetPlatformSessionInfo Response;
    typedef FDelegate_GetPlatformSessionInfo Delegate;
    typedef FSessionsAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.GetPlatformSessionInfo(InRequest, InDelegate, Priority); }
};

/* Get Player Sessions
 *
 * Get Sessions associated with a player by id  Required Permissions:   For any player (including themselves)any of: &#x60;session:*&#x60;, &#x60;session:read-player:any&#x60;  For the player themselves: &#x60;session:read-player:self&#x60;  Required Session Permissions: None  **DEPRECATED** - Use player/uuid endpoint instead
*/
struct RALLYHEREAPI_API FRequest_GetPlayerSessions : public FRequest
{
    FRequest_GetPlayerSessions();
    virtual ~FRequest_GetPlayerSessions() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    int32 PlayerId = 0;
};

struct RALLYHEREAPI_API FResponse_GetPlayerSessions : public FResponse
{
    FResponse_GetPlayerSessions(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetPlayerSessions() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_PlayerSessions Content;

};

struct RALLYHEREAPI_API Traits_GetPlayerSessions
{
    typedef FRequest_GetPlayerSessions Request;
    typedef FResponse_GetPlayerSessions Response;
    typedef FDelegate_GetPlayerSessions Delegate;
    typedef FSessionsAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.GetPlayerSessions(InRequest, InDelegate, Priority); }
};

/* Get Player Sessions By Uuid
 *
 * Get Sessions associated with a player by uuid  Required Permissions:   For any player (including themselves)any of: &#x60;session:*&#x60;, &#x60;session:read-player:any&#x60;  For the player themselves: &#x60;session:read-player:self&#x60;  Required Session Permissions: None
*/
struct RALLYHEREAPI_API FRequest_GetPlayerSessionsByUuid : public FRequest
{
    FRequest_GetPlayerSessionsByUuid();
    virtual ~FRequest_GetPlayerSessionsByUuid() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid PlayerUuid;
    /* If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed. */
    TOptional<FString> IfNoneMatch;
};

struct RALLYHEREAPI_API FResponse_GetPlayerSessionsByUuid : public FResponse
{
    FResponse_GetPlayerSessionsByUuid(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetPlayerSessionsByUuid() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    bool ParseHeaders() override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_PlayerSessions Content;
    // Headers
    /* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
    TOptional<FString> ETag;
};

struct RALLYHEREAPI_API Traits_GetPlayerSessionsByUuid
{
    typedef FRequest_GetPlayerSessionsByUuid Request;
    typedef FResponse_GetPlayerSessionsByUuid Response;
    typedef FDelegate_GetPlayerSessionsByUuid Delegate;
    typedef FSessionsAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.GetPlayerSessionsByUuid(InRequest, InDelegate, Priority); }
};

/* Get Player Sessions Self
 *
 * Get Sessions associated the current player  Required Auth Permissions: &#x60;session:read-player:self&#x60;              Required Session Permissions: None
*/
struct RALLYHEREAPI_API FRequest_GetPlayerSessionsSelf : public FRequest
{
    FRequest_GetPlayerSessionsSelf();
    virtual ~FRequest_GetPlayerSessionsSelf() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed. */
    TOptional<FString> IfNoneMatch;
};

struct RALLYHEREAPI_API FResponse_GetPlayerSessionsSelf : public FResponse
{
    FResponse_GetPlayerSessionsSelf(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetPlayerSessionsSelf() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    bool ParseHeaders() override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_PlayerSessions Content;
    // Headers
    /* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
    TOptional<FString> ETag;
};

struct RALLYHEREAPI_API Traits_GetPlayerSessionsSelf
{
    typedef FRequest_GetPlayerSessionsSelf Request;
    typedef FResponse_GetPlayerSessionsSelf Response;
    typedef FDelegate_GetPlayerSessionsSelf Delegate;
    typedef FSessionsAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.GetPlayerSessionsSelf(InRequest, InDelegate, Priority); }
};

/* Get Session By Allocation Id
 *
 * Get session by allocation ID. Returns the same limited results as getting the session by session id  Required Permissions:   For any player (including themselves)any of: &#x60;session:*&#x60;, &#x60;session:read:allocation&#x60;   Required Session Permissions: None
*/
struct RALLYHEREAPI_API FRequest_GetSessionByAllocationId : public FRequest
{
    FRequest_GetSessionByAllocationId();
    virtual ~FRequest_GetSessionByAllocationId() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString AllocationId;
    /* If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed. */
    TOptional<FString> IfNoneMatch;
};

struct RALLYHEREAPI_API FResponse_GetSessionByAllocationId : public FResponse
{
    FResponse_GetSessionByAllocationId(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetSessionByAllocationId() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    bool ParseHeaders() override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_Session Content;
    // Headers
    /* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
    TOptional<FString> ETag;
};

struct RALLYHEREAPI_API Traits_GetSessionByAllocationId
{
    typedef FRequest_GetSessionByAllocationId Request;
    typedef FResponse_GetSessionByAllocationId Response;
    typedef FDelegate_GetSessionByAllocationId Delegate;
    typedef FSessionsAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.GetSessionByAllocationId(InRequest, InDelegate, Priority); }
};

/* Get Session By Id
 *
 * Get Session by ID. This request will return limited results for non-members of the session, such as excluding info for  how to connect to the instance. Elevated permissions can bypass that restriction  Required Permissions:   For any player (including themselves)any of: &#x60;session:read:any&#x60;, &#x60;session:*&#x60;, &#x60;session:read:self&#x60;   Required Session Permissions: None for limited results. &#x60;SessionPermissions.active_in_session&#x60; to get complete results for users who do not have the &#x60;session:read:any&#x60; auth permission
*/
struct RALLYHEREAPI_API FRequest_GetSessionById : public FRequest
{
    FRequest_GetSessionById();
    virtual ~FRequest_GetSessionById() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionId;
    /* If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed. */
    TOptional<FString> IfNoneMatch;
};

struct RALLYHEREAPI_API FResponse_GetSessionById : public FResponse
{
    FResponse_GetSessionById(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetSessionById() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    bool ParseHeaders() override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_Session Content;
    // Headers
    /* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
    TOptional<FString> ETag;
};

struct RALLYHEREAPI_API Traits_GetSessionById
{
    typedef FRequest_GetSessionById Request;
    typedef FResponse_GetSessionById Response;
    typedef FDelegate_GetSessionById Delegate;
    typedef FSessionsAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.GetSessionById(InRequest, InDelegate, Priority); }
};

/* Get Session Events
 *
 * Get all events for the session.  Empty list means there is no event history for it.  Required Permissions:   For any player (including themselves)any of: &#x60;session:*&#x60;, &#x60;session:read:event&#x60;, &#x60;session:read-player:any&#x60;   Required Session Permissions: None
*/
struct RALLYHEREAPI_API FRequest_GetSessionEvents : public FRequest
{
    FRequest_GetSessionEvents();
    virtual ~FRequest_GetSessionEvents() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionId;
    TOptional<int32> PageNum;
    TOptional<int32> PageSize;
};

struct RALLYHEREAPI_API FResponse_GetSessionEvents : public FResponse
{
    FResponse_GetSessionEvents(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetSessionEvents() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_SessionEvents Content;

};

struct RALLYHEREAPI_API Traits_GetSessionEvents
{
    typedef FRequest_GetSessionEvents Request;
    typedef FResponse_GetSessionEvents Response;
    typedef FDelegate_GetSessionEvents Delegate;
    typedef FSessionsAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.GetSessionEvents(InRequest, InDelegate, Priority); }
};

/* Get Session Template By Type
 *
 * Get config about a session template by ID  Required Permissions:   For any player (including themselves)any of: &#x60;session:*&#x60;, &#x60;session:read:config&#x60;   Required Session Permissions: None
*/
struct RALLYHEREAPI_API FRequest_GetSessionTemplateByType : public FRequest
{
    FRequest_GetSessionTemplateByType();
    virtual ~FRequest_GetSessionTemplateByType() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionType;
    /* If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed. */
    TOptional<FString> IfNoneMatch;
};

struct RALLYHEREAPI_API FResponse_GetSessionTemplateByType : public FResponse
{
    FResponse_GetSessionTemplateByType(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetSessionTemplateByType() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    bool ParseHeaders() override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_SessionTemplate Content;
    // Headers
    /* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
    TOptional<FString> ETag;
};

struct RALLYHEREAPI_API Traits_GetSessionTemplateByType
{
    typedef FRequest_GetSessionTemplateByType Request;
    typedef FResponse_GetSessionTemplateByType Response;
    typedef FDelegate_GetSessionTemplateByType Delegate;
    typedef FSessionsAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.GetSessionTemplateByType(InRequest, InDelegate, Priority); }
};

/* Join Queue
 *
 * Add session to a matchmaking queue  Required Permissions:   For any player (including themselves)any of: &#x60;session:update:any&#x60;, &#x60;session:*&#x60;, &#x60;session:update:self&#x60;   Required Session Permissions: &#x60;SessionPermissions.session_admin&#x60;
*/
struct RALLYHEREAPI_API FRequest_JoinQueue : public FRequest
{
    FRequest_JoinQueue();
    virtual ~FRequest_JoinQueue() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionId;
    FRHAPI_QueueJoinRequest QueueJoinRequest;
};

struct RALLYHEREAPI_API FResponse_JoinQueue : public FResponse
{
    FResponse_JoinQueue(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_JoinQueue() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_QueueJoinResponse Content;

};

struct RALLYHEREAPI_API Traits_JoinQueue
{
    typedef FRequest_JoinQueue Request;
    typedef FResponse_JoinQueue Response;
    typedef FDelegate_JoinQueue Delegate;
    typedef FSessionsAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.JoinQueue(InRequest, InDelegate, Priority); }
};

/* Join Session By Id Self
 *
 * Join a session with currently authed player  Required Permissions:   For any player (including themselves)any of: &#x60;session:*&#x60;, &#x60;session:update-player:any&#x60;  For the player themselves: &#x60;session:update-player:self&#x60;  Required Session Permissions: None
*/
struct RALLYHEREAPI_API FRequest_JoinSessionByIdSelf : public FRequest
{
    FRequest_JoinSessionByIdSelf();
    virtual ~FRequest_JoinSessionByIdSelf() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionId;
    FRHAPI_SelfSessionPlayerUpdateRequest SelfSessionPlayerUpdateRequest;
};

struct RALLYHEREAPI_API FResponse_JoinSessionByIdSelf : public FResponse
{
    FResponse_JoinSessionByIdSelf(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_JoinSessionByIdSelf() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    bool ParseHeaders() override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_SessionPlayerUpdateResponse Content;
    // Headers
    /* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
    TOptional<FString> ETag;
};

struct RALLYHEREAPI_API Traits_JoinSessionByIdSelf
{
    typedef FRequest_JoinSessionByIdSelf Request;
    typedef FResponse_JoinSessionByIdSelf Response;
    typedef FDelegate_JoinSessionByIdSelf Delegate;
    typedef FSessionsAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.JoinSessionByIdSelf(InRequest, InDelegate, Priority); }
};

/* Join Session By Platform Session By Uuid
 *
 * Join a platform session by platform ID and parent platform session id  Required Permissions:   For any player (including themselves)any of: &#x60;session:*&#x60;, &#x60;session:update-player:any&#x60;  For the player themselves: &#x60;session:update-player:self&#x60;  Required Session Permissions: None
*/
struct RALLYHEREAPI_API FRequest_JoinSessionByPlatformSessionByUuid : public FRequest
{
    FRequest_JoinSessionByPlatformSessionByUuid();
    virtual ~FRequest_JoinSessionByPlatformSessionByUuid() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString PlatformSessionIdBase64;
    FGuid PlayerUuid;
    ERHAPI_Platform Platform;
    FRHAPI_SelfSessionPlayerUpdateRequest SelfSessionPlayerUpdateRequest;
    TOptional<int32> PlayerId;
};

struct RALLYHEREAPI_API FResponse_JoinSessionByPlatformSessionByUuid : public FResponse
{
    FResponse_JoinSessionByPlatformSessionByUuid(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_JoinSessionByPlatformSessionByUuid() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    bool ParseHeaders() override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_Session Content;
    // Headers
    /* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
    TOptional<FString> ETag;
};

struct RALLYHEREAPI_API Traits_JoinSessionByPlatformSessionByUuid
{
    typedef FRequest_JoinSessionByPlatformSessionByUuid Request;
    typedef FResponse_JoinSessionByPlatformSessionByUuid Response;
    typedef FDelegate_JoinSessionByPlatformSessionByUuid Delegate;
    typedef FSessionsAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.JoinSessionByPlatformSessionByUuid(InRequest, InDelegate, Priority); }
};

/* Join Session By Platform Session Id Self
 *
 * Join a platform session by ID, and the parent session  Required Permissions:   For any player (including themselves)any of: &#x60;session:*&#x60;, &#x60;session:update-player:any&#x60;  For the player themselves: &#x60;session:update-player:self&#x60;  Required Session Permissions: None
*/
struct RALLYHEREAPI_API FRequest_JoinSessionByPlatformSessionIdSelf : public FRequest
{
    FRequest_JoinSessionByPlatformSessionIdSelf();
    virtual ~FRequest_JoinSessionByPlatformSessionIdSelf() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString PlatformSessionIdBase64;
    ERHAPI_Platform Platform;
    FRHAPI_SelfSessionPlayerUpdateRequest SelfSessionPlayerUpdateRequest;
};

struct RALLYHEREAPI_API FResponse_JoinSessionByPlatformSessionIdSelf : public FResponse
{
    FResponse_JoinSessionByPlatformSessionIdSelf(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_JoinSessionByPlatformSessionIdSelf() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    bool ParseHeaders() override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_Session Content;
    // Headers
    /* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
    TOptional<FString> ETag;
};

struct RALLYHEREAPI_API Traits_JoinSessionByPlatformSessionIdSelf
{
    typedef FRequest_JoinSessionByPlatformSessionIdSelf Request;
    typedef FResponse_JoinSessionByPlatformSessionIdSelf Response;
    typedef FDelegate_JoinSessionByPlatformSessionIdSelf Delegate;
    typedef FSessionsAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.JoinSessionByPlatformSessionIdSelf(InRequest, InDelegate, Priority); }
};

/* Kick Player From Session By Id
 *
 * Kick or Remove a player from a session, or cancel an invite for a player to the session  Required Permissions:   For any player (including themselves)any of: &#x60;session:update-player:self&#x60;, &#x60;session:*&#x60;, &#x60;session:update-player:any&#x60;   Required Session Permissions: None for players operating on themselves. &#x60;SessionPermissions.session_admin&#x60; for operating on other players in your session  **DEPRECATED** - Use the player/uuid endpoint instead
*/
struct RALLYHEREAPI_API FRequest_KickPlayerFromSessionById : public FRequest
{
    FRequest_KickPlayerFromSessionById();
    virtual ~FRequest_KickPlayerFromSessionById() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionId;
    int32 PlayerId = 0;
};

struct RALLYHEREAPI_API FResponse_KickPlayerFromSessionById : public FResponse
{
    FResponse_KickPlayerFromSessionById(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_KickPlayerFromSessionById() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    

};

struct RALLYHEREAPI_API Traits_KickPlayerFromSessionById
{
    typedef FRequest_KickPlayerFromSessionById Request;
    typedef FResponse_KickPlayerFromSessionById Response;
    typedef FDelegate_KickPlayerFromSessionById Delegate;
    typedef FSessionsAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.KickPlayerFromSessionById(InRequest, InDelegate, Priority); }
};

/* Kick Player From Session By Uuid
 *
 * Kick or Remove a player from a session, or cancel an invite for a player to the session  Required Permissions:   For any player (including themselves)any of: &#x60;session:update-player:self&#x60;, &#x60;session:*&#x60;, &#x60;session:update-player:any&#x60;   Required Session Permissions: None for users operating on themselves.  &#x60;SessionPermissions.session_admin&#x60; for operating on other players in your session
*/
struct RALLYHEREAPI_API FRequest_KickPlayerFromSessionByUuid : public FRequest
{
    FRequest_KickPlayerFromSessionByUuid();
    virtual ~FRequest_KickPlayerFromSessionByUuid() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionId;
    FGuid PlayerUuid;
};

struct RALLYHEREAPI_API FResponse_KickPlayerFromSessionByUuid : public FResponse
{
    FResponse_KickPlayerFromSessionByUuid(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_KickPlayerFromSessionByUuid() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    bool ParseHeaders() override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    
    // Headers
    /* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
    TOptional<FString> ETag;
};

struct RALLYHEREAPI_API Traits_KickPlayerFromSessionByUuid
{
    typedef FRequest_KickPlayerFromSessionByUuid Request;
    typedef FResponse_KickPlayerFromSessionByUuid Response;
    typedef FDelegate_KickPlayerFromSessionByUuid Delegate;
    typedef FSessionsAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.KickPlayerFromSessionByUuid(InRequest, InDelegate, Priority); }
};

/* Kick Player From Session By Uuid Long Path
 *
 * Kick or Remove a player from a session, or cancel an invite for a player to the session  Required Permissions:   For any player (including themselves)any of: &#x60;session:update-player:self&#x60;, &#x60;session:*&#x60;, &#x60;session:update-player:any&#x60;   Required Session Permissions: None for users operating on themselves.  &#x60;SessionPermissions.session_admin&#x60; for operating on other players in your session **DEPRECATED** - Use player/{player_uuid} endpoint instead
*/
struct RALLYHEREAPI_API FRequest_KickPlayerFromSessionByUuidLongPath : public FRequest
{
    FRequest_KickPlayerFromSessionByUuidLongPath();
    virtual ~FRequest_KickPlayerFromSessionByUuidLongPath() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionId;
    FGuid PlayerUuid;
};

struct RALLYHEREAPI_API FResponse_KickPlayerFromSessionByUuidLongPath : public FResponse
{
    FResponse_KickPlayerFromSessionByUuidLongPath(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_KickPlayerFromSessionByUuidLongPath() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    bool ParseHeaders() override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    
    // Headers
    /* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
    TOptional<FString> ETag;
};

struct RALLYHEREAPI_API Traits_KickPlayerFromSessionByUuidLongPath
{
    typedef FRequest_KickPlayerFromSessionByUuidLongPath Request;
    typedef FResponse_KickPlayerFromSessionByUuidLongPath Response;
    typedef FDelegate_KickPlayerFromSessionByUuidLongPath Delegate;
    typedef FSessionsAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.KickPlayerFromSessionByUuidLongPath(InRequest, InDelegate, Priority); }
};

/* Leave Queue
 *
 * Remove session from a matchmaking queue  Required Permissions:   For any player (including themselves)any of: &#x60;session:update:any&#x60;, &#x60;session:*&#x60;, &#x60;session:update:self&#x60;                  Required Session Permissions: &#x60;SessionPermissions.session_admin&#x60;
*/
struct RALLYHEREAPI_API FRequest_LeaveQueue : public FRequest
{
    FRequest_LeaveQueue();
    virtual ~FRequest_LeaveQueue() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionId;
};

struct RALLYHEREAPI_API FResponse_LeaveQueue : public FResponse
{
    FResponse_LeaveQueue(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_LeaveQueue() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    

};

struct RALLYHEREAPI_API Traits_LeaveQueue
{
    typedef FRequest_LeaveQueue Request;
    typedef FResponse_LeaveQueue Response;
    typedef FDelegate_LeaveQueue Delegate;
    typedef FSessionsAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.LeaveQueue(InRequest, InDelegate, Priority); }
};

/* Leave Session By Id Self
 *
 * Leave a session with currently authed player  Required Permissions:   For any player (including themselves): &#x60;session:*&#x60;  For the player themselves: &#x60;session:update:self&#x60;  Required Permissions: None
*/
struct RALLYHEREAPI_API FRequest_LeaveSessionByIdSelf : public FRequest
{
    FRequest_LeaveSessionByIdSelf();
    virtual ~FRequest_LeaveSessionByIdSelf() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionId;
};

struct RALLYHEREAPI_API FResponse_LeaveSessionByIdSelf : public FResponse
{
    FResponse_LeaveSessionByIdSelf(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_LeaveSessionByIdSelf() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    

};

struct RALLYHEREAPI_API Traits_LeaveSessionByIdSelf
{
    typedef FRequest_LeaveSessionByIdSelf Request;
    typedef FResponse_LeaveSessionByIdSelf Response;
    typedef FDelegate_LeaveSessionByIdSelf Delegate;
    typedef FSessionsAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.LeaveSessionByIdSelf(InRequest, InDelegate, Priority); }
};

/* Leave Session By Platform Session By Uuid
 *
 * Leave a platform session by platform ID and parent platform session id  Required Permissions:   For any player (including themselves)any of: &#x60;session:*&#x60;, &#x60;session:update-player:any&#x60;  For the player themselves: &#x60;session:update-player:self&#x60;  Required Session Permissions: None
*/
struct RALLYHEREAPI_API FRequest_LeaveSessionByPlatformSessionByUuid : public FRequest
{
    FRequest_LeaveSessionByPlatformSessionByUuid();
    virtual ~FRequest_LeaveSessionByPlatformSessionByUuid() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString PlatformSessionIdBase64;
    ERHAPI_Platform Platform;
    FGuid PlayerUuid;
};

struct RALLYHEREAPI_API FResponse_LeaveSessionByPlatformSessionByUuid : public FResponse
{
    FResponse_LeaveSessionByPlatformSessionByUuid(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_LeaveSessionByPlatformSessionByUuid() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    

};

struct RALLYHEREAPI_API Traits_LeaveSessionByPlatformSessionByUuid
{
    typedef FRequest_LeaveSessionByPlatformSessionByUuid Request;
    typedef FResponse_LeaveSessionByPlatformSessionByUuid Response;
    typedef FDelegate_LeaveSessionByPlatformSessionByUuid Delegate;
    typedef FSessionsAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.LeaveSessionByPlatformSessionByUuid(InRequest, InDelegate, Priority); }
};

/* Leave Session By Platform Session Self
 *
 * Leave a platform session by platform ID and parent platform session id  Required Permissions:   For any player (including themselves)any of: &#x60;session:*&#x60;, &#x60;session:update-player:any&#x60;  For the player themselves: &#x60;session:update-player:self&#x60;  Required Session Permissions: None
*/
struct RALLYHEREAPI_API FRequest_LeaveSessionByPlatformSessionSelf : public FRequest
{
    FRequest_LeaveSessionByPlatformSessionSelf();
    virtual ~FRequest_LeaveSessionByPlatformSessionSelf() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString PlatformSessionIdBase64;
    ERHAPI_Platform Platform;
};

struct RALLYHEREAPI_API FResponse_LeaveSessionByPlatformSessionSelf : public FResponse
{
    FResponse_LeaveSessionByPlatformSessionSelf(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_LeaveSessionByPlatformSessionSelf() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    

};

struct RALLYHEREAPI_API Traits_LeaveSessionByPlatformSessionSelf
{
    typedef FRequest_LeaveSessionByPlatformSessionSelf Request;
    typedef FResponse_LeaveSessionByPlatformSessionSelf Response;
    typedef FDelegate_LeaveSessionByPlatformSessionSelf Delegate;
    typedef FSessionsAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.LeaveSessionByPlatformSessionSelf(InRequest, InDelegate, Priority); }
};

/* Post Browser Info
 *
 * Register session in the public browser  Required Permissions:   For any player (including themselves)any of: &#x60;session:update:browser&#x60;, &#x60;session:*&#x60;   Required Session Permissions: &#x60;SessionPermissions.session_admin&#x60; if user does not have the &#x60;session:*&#x60; auth permission
*/
struct RALLYHEREAPI_API FRequest_PostBrowserInfo : public FRequest
{
    FRequest_PostBrowserInfo();
    virtual ~FRequest_PostBrowserInfo() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionId;
    FRHAPI_BrowserInfo BrowserInfo;
};

struct RALLYHEREAPI_API FResponse_PostBrowserInfo : public FResponse
{
    FResponse_PostBrowserInfo(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_PostBrowserInfo() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_BrowserInfo Content;

};

struct RALLYHEREAPI_API Traits_PostBrowserInfo
{
    typedef FRequest_PostBrowserInfo Request;
    typedef FResponse_PostBrowserInfo Response;
    typedef FDelegate_PostBrowserInfo Delegate;
    typedef FSessionsAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.PostBrowserInfo(InRequest, InDelegate, Priority); }
};

/* Report Fubar
 *
 * Report an instance as fubar with a reason and optional metadata. Results will be graphed on your product&#39;s grafana page  Required Permissions:   For any player (including themselves)any of: &#x60;session:*&#x60;, &#x60;session:update:fubar&#x60;   Required Session Permissions: &#x60;SessionPermissions.session_admin&#x60;
*/
struct RALLYHEREAPI_API FRequest_ReportFubar : public FRequest
{
    FRequest_ReportFubar();
    virtual ~FRequest_ReportFubar() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionId;
    FRHAPI_InstanceFubar InstanceFubar;
};

struct RALLYHEREAPI_API FResponse_ReportFubar : public FResponse
{
    FResponse_ReportFubar(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_ReportFubar() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_JsonObject Content;

};

struct RALLYHEREAPI_API Traits_ReportFubar
{
    typedef FRequest_ReportFubar Request;
    typedef FResponse_ReportFubar Response;
    typedef FDelegate_ReportFubar Delegate;
    typedef FSessionsAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.ReportFubar(InRequest, InDelegate, Priority); }
};

/* Get Player Sessions By Uuid
 *
 * Get Sessions associated with a player by uuid  Required Permissions:   For any player (including themselves)any of: &#x60;session:*&#x60;, &#x60;session:read-player:any&#x60;  For the player themselves: &#x60;session:read-player:self&#x60;  Required Session Permissions: None **DEPRECATED** - Use player/{player_uuid} endpoint instead
*/
struct RALLYHEREAPI_API FRequest_SessiongetPlayerSessionsByUuid : public FRequest
{
    FRequest_SessiongetPlayerSessionsByUuid();
    virtual ~FRequest_SessiongetPlayerSessionsByUuid() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid PlayerUuid;
    /* If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed. */
    TOptional<FString> IfNoneMatch;
};

struct RALLYHEREAPI_API FResponse_SessiongetPlayerSessionsByUuid : public FResponse
{
    FResponse_SessiongetPlayerSessionsByUuid(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SessiongetPlayerSessionsByUuid() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    bool ParseHeaders() override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_PlayerSessions Content;
    // Headers
    /* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
    TOptional<FString> ETag;
};

struct RALLYHEREAPI_API Traits_SessiongetPlayerSessionsByUuid
{
    typedef FRequest_SessiongetPlayerSessionsByUuid Request;
    typedef FResponse_SessiongetPlayerSessionsByUuid Response;
    typedef FDelegate_SessiongetPlayerSessionsByUuid Delegate;
    typedef FSessionsAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.SessiongetPlayerSessionsByUuid(InRequest, InDelegate, Priority); }
};

/* Start Match
 *
 * Begin a new match for the current session, on the current instance  Required Permissions:   For any player (including themselves)any of: &#x60;session:update:any&#x60;, &#x60;session:*&#x60;, &#x60;session:update:self&#x60;                Required Session Permissions: &#x60;SessionPermissions.session_admin&#x60; if user does not have the &#x60;session:update:any&#x60; auth permission
*/
struct RALLYHEREAPI_API FRequest_StartMatch : public FRequest
{
    FRequest_StartMatch();
    virtual ~FRequest_StartMatch() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionId;
    FRHAPI_MatchCreateRequest MatchCreateRequest;
};

struct RALLYHEREAPI_API FResponse_StartMatch : public FResponse
{
    FResponse_StartMatch(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_StartMatch() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_MatchCreateResponse Content;

};

struct RALLYHEREAPI_API Traits_StartMatch
{
    typedef FRequest_StartMatch Request;
    typedef FResponse_StartMatch Response;
    typedef FDelegate_StartMatch Delegate;
    typedef FSessionsAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.StartMatch(InRequest, InDelegate, Priority); }
};

/* Update Browser Info
 *
 * Update the browser info for the session  Required Permissions:   For any player (including themselves)any of: &#x60;session:update:browser&#x60;, &#x60;session:*&#x60;   Required Session Permissions: &#x60;SessionPermissions.session_admin&#x60; if user does not have the &#x60;session:*&#x60; auth permission
*/
struct RALLYHEREAPI_API FRequest_UpdateBrowserInfo : public FRequest
{
    FRequest_UpdateBrowserInfo();
    virtual ~FRequest_UpdateBrowserInfo() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionId;
    FRHAPI_BrowserInfo BrowserInfo;
};

struct RALLYHEREAPI_API FResponse_UpdateBrowserInfo : public FResponse
{
    FResponse_UpdateBrowserInfo(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_UpdateBrowserInfo() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_BrowserInfo Content;

};

struct RALLYHEREAPI_API Traits_UpdateBrowserInfo
{
    typedef FRequest_UpdateBrowserInfo Request;
    typedef FResponse_UpdateBrowserInfo Response;
    typedef FDelegate_UpdateBrowserInfo Delegate;
    typedef FSessionsAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.UpdateBrowserInfo(InRequest, InDelegate, Priority); }
};

/* Update Instance Info
 *
 * Update info about the instance. If the instance was a result of the instance allocation system, then it will have an allocation id. Allocated instances must send their allocation id for updates to ensure they are still the proper allocation.  Required Permissions:   For any player (including themselves)any of: &#x60;session:update:any&#x60;, &#x60;session:*&#x60;, &#x60;session:update:self&#x60;                Required Session Permissions: &#x60;SessionPermissions.session_host&#x60; if user does not have the &#x60;session:update:any&#x60; auth permission
*/
struct RALLYHEREAPI_API FRequest_UpdateInstanceInfo : public FRequest
{
    FRequest_UpdateInstanceInfo();
    virtual ~FRequest_UpdateInstanceInfo() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionId;
    FRHAPI_InstanceInfoUpdate InstanceInfoUpdate;
};

struct RALLYHEREAPI_API FResponse_UpdateInstanceInfo : public FResponse
{
    FResponse_UpdateInstanceInfo(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_UpdateInstanceInfo() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_InstanceInfo Content;

};

struct RALLYHEREAPI_API Traits_UpdateInstanceInfo
{
    typedef FRequest_UpdateInstanceInfo Request;
    typedef FResponse_UpdateInstanceInfo Response;
    typedef FDelegate_UpdateInstanceInfo Delegate;
    typedef FSessionsAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.UpdateInstanceInfo(InRequest, InDelegate, Priority); }
};

/* Update Match Info
 *
 * Update info about a match  Required Permissions:   For any player (including themselves)any of: &#x60;session:update:any&#x60;, &#x60;session:*&#x60;, &#x60;session:update:self&#x60;                Required Session Permissions: &#x60;SessionPermissions.session_admin&#x60; if user does not have the &#x60;session:update:any&#x60; auth permission
*/
struct RALLYHEREAPI_API FRequest_UpdateMatchInfo : public FRequest
{
    FRequest_UpdateMatchInfo();
    virtual ~FRequest_UpdateMatchInfo() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionId;
    FRHAPI_MatchCreateRequest MatchCreateRequest;
};

struct RALLYHEREAPI_API FResponse_UpdateMatchInfo : public FResponse
{
    FResponse_UpdateMatchInfo(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_UpdateMatchInfo() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_JsonValue Content;

};

struct RALLYHEREAPI_API Traits_UpdateMatchInfo
{
    typedef FRequest_UpdateMatchInfo Request;
    typedef FResponse_UpdateMatchInfo Response;
    typedef FDelegate_UpdateMatchInfo Delegate;
    typedef FSessionsAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.UpdateMatchInfo(InRequest, InDelegate, Priority); }
};

/* Update Session By Id
 *
 * Update session info by session id  Required Permissions:   For any player (including themselves)any of: &#x60;session:update:any&#x60;, &#x60;session:*&#x60;, &#x60;session:update:self&#x60;   Required Session Permissions: &#x60;SessionPermissions.session_admin&#x60; for users who do not have the &#x60;session:update:any&#x60; auth permission
*/
struct RALLYHEREAPI_API FRequest_UpdateSessionById : public FRequest
{
    FRequest_UpdateSessionById();
    virtual ~FRequest_UpdateSessionById() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionId;
    FRHAPI_SessionUpdate SessionUpdate;
};

struct RALLYHEREAPI_API FResponse_UpdateSessionById : public FResponse
{
    FResponse_UpdateSessionById(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_UpdateSessionById() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    bool ParseHeaders() override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_Session Content;
    // Headers
    /* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
    TOptional<FString> ETag;
};

struct RALLYHEREAPI_API Traits_UpdateSessionById
{
    typedef FRequest_UpdateSessionById Request;
    typedef FResponse_UpdateSessionById Response;
    typedef FDelegate_UpdateSessionById Delegate;
    typedef FSessionsAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.UpdateSessionById(InRequest, InDelegate, Priority); }
};

/* Update Session Player By Id
 *
 * Add or invite a player to the session, or change the status of a player already in the session  Required Permissions:   For any player (including themselves)any of: &#x60;session:*&#x60;, &#x60;session:promote:self&#x60;, &#x60;session:promote:any&#x60;   Required Session Permissions: None if session is publicly joinable or the player has been invited. &#x60;SessionPermissions.session_admin&#x60; for other operations  **DEPRECATED** - Use the player/uuid endpoint instead
*/
struct RALLYHEREAPI_API FRequest_UpdateSessionPlayerById : public FRequest
{
    FRequest_UpdateSessionPlayerById();
    virtual ~FRequest_UpdateSessionPlayerById() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionId;
    int32 PlayerId = 0;
    FRHAPI_SessionPlayerUpdateRequest SessionPlayerUpdateRequest;
};

struct RALLYHEREAPI_API FResponse_UpdateSessionPlayerById : public FResponse
{
    FResponse_UpdateSessionPlayerById(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_UpdateSessionPlayerById() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_SessionPlayerUpdateResponse Content;

};

struct RALLYHEREAPI_API Traits_UpdateSessionPlayerById
{
    typedef FRequest_UpdateSessionPlayerById Request;
    typedef FResponse_UpdateSessionPlayerById Response;
    typedef FDelegate_UpdateSessionPlayerById Delegate;
    typedef FSessionsAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.UpdateSessionPlayerById(InRequest, InDelegate, Priority); }
};

/* Update Session Player By Uuid
 *
 * Add or invite a player to the session, or change the status of a player already in the session  Required Permissions:   For any player (including themselves)any of: &#x60;session:*&#x60;, &#x60;session:promote:self&#x60;, &#x60;session:promote:any&#x60;   Required Session Permissions: None if session is publicly joinable or the player has been invited.  &#x60;SessionPermissions.session_admin&#x60; for other operations
*/
struct RALLYHEREAPI_API FRequest_UpdateSessionPlayerByUuid : public FRequest
{
    FRequest_UpdateSessionPlayerByUuid();
    virtual ~FRequest_UpdateSessionPlayerByUuid() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionId;
    FGuid PlayerUuid;
    FRHAPI_SessionPlayerUpdateRequest SessionPlayerUpdateRequest;
};

struct RALLYHEREAPI_API FResponse_UpdateSessionPlayerByUuid : public FResponse
{
    FResponse_UpdateSessionPlayerByUuid(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_UpdateSessionPlayerByUuid() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    bool ParseHeaders() override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_SessionPlayerUpdateResponse Content;
    // Headers
    /* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
    TOptional<FString> ETag;
};

struct RALLYHEREAPI_API Traits_UpdateSessionPlayerByUuid
{
    typedef FRequest_UpdateSessionPlayerByUuid Request;
    typedef FResponse_UpdateSessionPlayerByUuid Response;
    typedef FDelegate_UpdateSessionPlayerByUuid Delegate;
    typedef FSessionsAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.UpdateSessionPlayerByUuid(InRequest, InDelegate, Priority); }
};

/* Update Session Player By Uuid Long Path
 *
 * Add or invite a player to the session, or change the status of a player already in the session  Required Permissions:   For any player (including themselves)any of: &#x60;session:*&#x60;, &#x60;session:promote:self&#x60;, &#x60;session:promote:any&#x60;   Required Session Permissions: None if session is publicly joinable or the player has been invited.  &#x60;SessionPermissions.session_admin&#x60; for other operations **DEPRECATED** - Use player/{player_uuid} endpoint instead
*/
struct RALLYHEREAPI_API FRequest_UpdateSessionPlayerByUuidLongPath : public FRequest
{
    FRequest_UpdateSessionPlayerByUuidLongPath();
    virtual ~FRequest_UpdateSessionPlayerByUuidLongPath() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString SessionId;
    FGuid PlayerUuid;
    FRHAPI_SessionPlayerUpdateRequest SessionPlayerUpdateRequest;
};

struct RALLYHEREAPI_API FResponse_UpdateSessionPlayerByUuidLongPath : public FResponse
{
    FResponse_UpdateSessionPlayerByUuidLongPath(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_UpdateSessionPlayerByUuidLongPath() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    bool ParseHeaders() override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_SessionPlayerUpdateResponse Content;
    // Headers
    /* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
    TOptional<FString> ETag;
};

struct RALLYHEREAPI_API Traits_UpdateSessionPlayerByUuidLongPath
{
    typedef FRequest_UpdateSessionPlayerByUuidLongPath Request;
    typedef FResponse_UpdateSessionPlayerByUuidLongPath Response;
    typedef FDelegate_UpdateSessionPlayerByUuidLongPath Delegate;
    typedef FSessionsAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.UpdateSessionPlayerByUuidLongPath(InRequest, InDelegate, Priority); }
};


}
