// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereAPIAuthContext.h"
#include "RallyHereAPIHelpers.h"
#include "DeleteTicketReason.h"
#include "Platform.h"
#include "VivoxSessionActionSingle.h"
#include "VoipSessionType.h"
#include "AcknowledgeBackfillRequest.h"
#include "AcknowledgeBackfillResponse.h"
#include "AuditResponse.h"
#include "BackfillSettingsResponse.h"
#include "BaseBackfillRequest.h"
#include "BrowserInfo.h"
#include "BrowserResponse.h"
#include "ConnectionInfo.h"
#include "CreateAuditRequest.h"
#include "CreateOrJoinRequest.h"
#include "HTTPValidationError.h"
#include "HzApiErrorModel.h"
#include "InstanceHealthSettingsResponse.h"
#include "InstanceHealthStatusResponse.h"
#include "InstanceHealthStatusUpdate.h"
#include "InstanceInfo.h"
#include "InstanceInfoUpdate.h"
#include "InstanceLaunchTemplate.h"
#include "InstanceRequest.h"
#include "InstanceRequestTemplate.h"
#include "MatchMakingProfile.h"
#include "MatchMakingProfileV2.h"
#include "MatchMakingSessionRequest.h"
#include "MatchMakingTemplateGroup.h"
#include "MatchMakingTemplateGroupV2.h"
#include "PlatformSession.h"
#include "PlayerSessions.h"
#include "QueueJoinRequest.h"
#include "QueueJoinResponse.h"
#include "QueuesResponse.h"
#include "QueuesResponseV2.h"
#include "RegionsResponse.h"
#include "SelfSessionPlayerUpdateRequest.h"
#include "Session.h"
#include "SessionInviteRequest.h"
#include "SessionInviteResponse.h"
#include "SessionJoinResponse.h"
#include "SessionPlayerUpdateRequest.h"
#include "SessionPlayerUpdateResponse.h"
#include "SessionTeam.h"
#include "SessionTemplate.h"
#include "SessionTemplates.h"
#include "SessionUpdate.h"
#include "TeamUpdate.h"
#include "UpdateBackfillRequest.h"
#include "VoipTokenResponse.h"

namespace RallyHereAPI
{
using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

// forward declaration
class FSessionsAPI;

/**
 * @brief Acknowledge Backfill Request
 * Acknowledge a backfill request, and keep it alive. If an acknowledgment is missed, open-match will delete the backfill object
*/
struct RALLYHEREAPI_API FRequest_AcknowledgeBackfillRequest : public FRequest
{
	FRequest_AcknowledgeBackfillRequest();
	virtual ~FRequest_AcknowledgeBackfillRequest() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString SessionId;
	FRHAPI_AcknowledgeBackfillRequest AcknowledgeBackfillRequest;
	TOptional<bool> RefreshTtl;
};

/** The response type for FRequest_AcknowledgeBackfillRequest */
struct RALLYHEREAPI_API FResponse_AcknowledgeBackfillRequest : public FResponseAccessorTemplate<FRHAPI_AcknowledgeBackfillResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_AcknowledgeBackfillResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_AcknowledgeBackfillRequest(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_AcknowledgeBackfillRequest() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_AcknowledgeBackfillResponse Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_AcknowledgeBackfillResponse& OutContent) const { return TryGetContent<FRHAPI_AcknowledgeBackfillResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_AcknowledgeBackfillResponse>& OutContent) const { return TryGetContent<FRHAPI_AcknowledgeBackfillResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_AcknowledgeBackfillResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_AcknowledgeBackfillResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_AcknowledgeBackfillResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_AcknowledgeBackfillResponse>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_AcknowledgeBackfillResponse& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Backfill resource could not be found on the session, or in the open-match system
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_AcknowledgeBackfillRequest */
DECLARE_DELEGATE_OneParam(FDelegate_AcknowledgeBackfillRequest, const FResponse_AcknowledgeBackfillRequest&);

/** @brief A helper metadata object for AcknowledgeBackfillRequest that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_AcknowledgeBackfillRequest
{
	/** The request type */
	typedef FRequest_AcknowledgeBackfillRequest Request;
	/** The response type */
	typedef FResponse_AcknowledgeBackfillRequest Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_AcknowledgeBackfillRequest Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Add Platform Session To Rally Here Session
 * Add a platform session to an existing RallyHere session. The requesting player will be added to the platform session
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:update:platform`
 * 
 * 
 * 
 * Required Session Permissions: `SessionPermissions.active_in_session` for users that do not have the `session:update:any` auth permission
*/
struct RALLYHEREAPI_API FRequest_AddPlatformSessionToRallyHereSession : public FRequest
{
	FRequest_AddPlatformSessionToRallyHereSession();
	virtual ~FRequest_AddPlatformSessionToRallyHereSession() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	ERHAPI_Platform Platform;
	FString PlatformSessionIdBase64;
	FString SessionId;
	TOptional<bool> RefreshTtl;
};

/** The response type for FRequest_AddPlatformSessionToRallyHereSession */
struct RALLYHEREAPI_API FResponse_AddPlatformSessionToRallyHereSession : public FResponseAccessorTemplate<FRHAPI_PlatformSession, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_PlatformSession, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_AddPlatformSessionToRallyHereSession(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_AddPlatformSessionToRallyHereSession() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PlatformSession Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PlatformSession& OutContent) const { return TryGetContent<FRHAPI_PlatformSession>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PlatformSession>& OutContent) const { return TryGetContent<FRHAPI_PlatformSession>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PlatformSession* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PlatformSession>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PlatformSession> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PlatformSession>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PlatformSession& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 403
	User is not authenticated, or does not have sufficient role access to perform request
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Platform Session or Platform Player doesn't exist.  See error code for more info
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 409
	Service was unable to fulfill the request at this time and should be retried after the Retry-After wait time
	*/
	bool TryGetContentFor409(FRHAPI_HzApiErrorModel& OutContent) const;
	/* Number of seconds after which to retry the request */
	TOptional<int32> GetHeader409_RetryAfter() const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_AddPlatformSessionToRallyHereSession */
DECLARE_DELEGATE_OneParam(FDelegate_AddPlatformSessionToRallyHereSession, const FResponse_AddPlatformSessionToRallyHereSession&);

/** @brief A helper metadata object for AddPlatformSessionToRallyHereSession that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_AddPlatformSessionToRallyHereSession
{
	/** The request type */
	typedef FRequest_AddPlatformSessionToRallyHereSession Request;
	/** The response type */
	typedef FResponse_AddPlatformSessionToRallyHereSession Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_AddPlatformSessionToRallyHereSession Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Backfill Config
 * Get config about how often backfill heartbeats must be sent in order to prevent the backfill resource from being deleted
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:read:config`
*/
struct RALLYHEREAPI_API FRequest_BackfillConfig : public FRequest
{
	FRequest_BackfillConfig();
	virtual ~FRequest_BackfillConfig() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
};

/** The response type for FRequest_BackfillConfig */
struct RALLYHEREAPI_API FResponse_BackfillConfig : public FResponseAccessorTemplate<FRHAPI_BackfillSettingsResponse, FRHAPI_HzApiErrorModel>
{
	typedef FResponseAccessorTemplate<FRHAPI_BackfillSettingsResponse, FRHAPI_HzApiErrorModel> Super;

	FResponse_BackfillConfig(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_BackfillConfig() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_BackfillSettingsResponse Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_BackfillSettingsResponse& OutContent) const { return TryGetContent<FRHAPI_BackfillSettingsResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_BackfillSettingsResponse>& OutContent) const { return TryGetContent<FRHAPI_BackfillSettingsResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_BackfillSettingsResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_BackfillSettingsResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_BackfillSettingsResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_BackfillSettingsResponse>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_BackfillSettingsResponse& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

};

/** The delegate class for FRequest_BackfillConfig */
DECLARE_DELEGATE_OneParam(FDelegate_BackfillConfig, const FResponse_BackfillConfig&);

/** @brief A helper metadata object for BackfillConfig that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_BackfillConfig
{
	/** The request type */
	typedef FRequest_BackfillConfig Request;
	/** The response type */
	typedef FResponse_BackfillConfig Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_BackfillConfig Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Create Instance Request
 * Request an instance be spawned for the session, or register self as a host of the instance
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:update:any`, `session:update:self`
 * 
 * 
 * 
 * Required Session Permissions: `SessionPermissions.session_admin` if user does not have the `session:update:any` auth permission
*/
struct RALLYHEREAPI_API FRequest_CreateInstanceRequest : public FRequest
{
	FRequest_CreateInstanceRequest();
	virtual ~FRequest_CreateInstanceRequest() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString SessionId;
	FRHAPI_InstanceRequest InstanceRequest;
};

/** The response type for FRequest_CreateInstanceRequest */
struct RALLYHEREAPI_API FResponse_CreateInstanceRequest : public FResponseAccessorTemplate<FRHAPI_InstanceInfo, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_InstanceInfo, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_CreateInstanceRequest(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_CreateInstanceRequest() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_InstanceInfo Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_InstanceInfo& OutContent) const { return TryGetContent<FRHAPI_InstanceInfo>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_InstanceInfo>& OutContent) const { return TryGetContent<FRHAPI_InstanceInfo>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_InstanceInfo* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_InstanceInfo>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_InstanceInfo> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_InstanceInfo>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_InstanceInfo& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_CreateInstanceRequest */
DECLARE_DELEGATE_OneParam(FDelegate_CreateInstanceRequest, const FResponse_CreateInstanceRequest&);

/** @brief A helper metadata object for CreateInstanceRequest that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_CreateInstanceRequest
{
	/** The request type */
	typedef FRequest_CreateInstanceRequest Request;
	/** The response type */
	typedef FResponse_CreateInstanceRequest Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_CreateInstanceRequest Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Create Matchmade Session
 * Create a match session based on matchmaking results.
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:create:matchmade`
 * 
 * 
 * 
 * Required Session Permissions: None
*/
struct RALLYHEREAPI_API FRequest_CreateMatchmadeSession : public FRequest
{
	FRequest_CreateMatchmadeSession();
	virtual ~FRequest_CreateMatchmadeSession() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FRHAPI_MatchMakingSessionRequest MatchMakingSessionRequest;
};

/** The response type for FRequest_CreateMatchmadeSession */
struct RALLYHEREAPI_API FResponse_CreateMatchmadeSession : public FResponseAccessorTemplate<FRHAPI_JsonValue, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_JsonValue, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_CreateMatchmadeSession(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_CreateMatchmadeSession() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_JsonValue Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_JsonValue& OutContent) const { return TryGetContent<FRHAPI_JsonValue>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_JsonValue>& OutContent) const { return TryGetContent<FRHAPI_JsonValue>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_JsonValue* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_JsonValue>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_JsonValue> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_JsonValue>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_JsonValue& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Session doesn't exist or Player is not a member of the session.  See error code for more info
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_CreateMatchmadeSession */
DECLARE_DELEGATE_OneParam(FDelegate_CreateMatchmadeSession, const FResponse_CreateMatchmadeSession&);

/** @brief A helper metadata object for CreateMatchmadeSession that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_CreateMatchmadeSession
{
	/** The request type */
	typedef FRequest_CreateMatchmadeSession Request;
	/** The response type */
	typedef FResponse_CreateMatchmadeSession Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_CreateMatchmadeSession Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Create Or Join Session
 * Join the first publicly available session of given type. If there is no public session, and the session type
 * permits player made sessions, create a new session and put the player in it
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:create`
 * 
 * 
 * 
 * Required Session Permissions: None
*/
struct RALLYHEREAPI_API FRequest_CreateOrJoinSession : public FRequest
{
	FRequest_CreateOrJoinSession();
	virtual ~FRequest_CreateOrJoinSession() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FRHAPI_CreateOrJoinRequest CreateOrJoinRequest;
};

/** The response type for FRequest_CreateOrJoinSession */
struct RALLYHEREAPI_API FResponse_CreateOrJoinSession : public FResponseAccessorTemplate<FRHAPI_SessionJoinResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_SessionJoinResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_CreateOrJoinSession(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_CreateOrJoinSession() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_SessionJoinResponse Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_SessionJoinResponse& OutContent) const { return TryGetContent<FRHAPI_SessionJoinResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_SessionJoinResponse>& OutContent) const { return TryGetContent<FRHAPI_SessionJoinResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_SessionJoinResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_SessionJoinResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_SessionJoinResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_SessionJoinResponse>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_SessionJoinResponse& OutContent) const;

	/* Response 400
	Bad Request
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_CreateOrJoinSession */
DECLARE_DELEGATE_OneParam(FDelegate_CreateOrJoinSession, const FResponse_CreateOrJoinSession&);

/** @brief A helper metadata object for CreateOrJoinSession that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_CreateOrJoinSession
{
	/** The request type */
	typedef FRequest_CreateOrJoinSession Request;
	/** The response type */
	typedef FResponse_CreateOrJoinSession Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_CreateOrJoinSession Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Create Session Audit
 * Create an audit event in the log for this session.
 * Internal session operations will create new events that are accessible from the get request.
 * 
 * Player clients and instances are expected to create events here when something occurs on their clients that is
 * relevant. Customer created events will be prepended with 'customer.'
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session-audit:update:all`, `session:*`
 * 
 * 
 * 
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session-audit:update:self`, `session:*`
 * 
 *  for sessions you are a member of
 * 
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session-player-audit:update:all`, `session:*`
 * 
 *  to read audit information about any player
 * 
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session-player-audit:update:self`, `session:*`
 * 
 *  to read audit information about yourself
*/
struct RALLYHEREAPI_API FRequest_CreateSessionAudit : public FRequest
{
	FRequest_CreateSessionAudit();
	virtual ~FRequest_CreateSessionAudit() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FRHAPI_CreateAuditRequest CreateAuditRequest;
};

/** The response type for FRequest_CreateSessionAudit */
struct RALLYHEREAPI_API FResponse_CreateSessionAudit : public FResponseAccessorTemplate<FRHAPI_JsonValue, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_JsonValue, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_CreateSessionAudit(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_CreateSessionAudit() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_JsonValue Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_JsonValue& OutContent) const { return TryGetContent<FRHAPI_JsonValue>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_JsonValue>& OutContent) const { return TryGetContent<FRHAPI_JsonValue>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_JsonValue* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_JsonValue>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_JsonValue> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_JsonValue>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_JsonValue& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Session doesn't exist.  See error code for more info
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_CreateSessionAudit */
DECLARE_DELEGATE_OneParam(FDelegate_CreateSessionAudit, const FResponse_CreateSessionAudit&);

/** @brief A helper metadata object for CreateSessionAudit that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_CreateSessionAudit
{
	/** The request type */
	typedef FRequest_CreateSessionAudit Request;
	/** The response type */
	typedef FResponse_CreateSessionAudit Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_CreateSessionAudit Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Delete Backfill Request
 * Manually delete the backfill associated with this session
*/
struct RALLYHEREAPI_API FRequest_DeleteBackfillRequest : public FRequest
{
	FRequest_DeleteBackfillRequest();
	virtual ~FRequest_DeleteBackfillRequest() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString SessionId;
	FRHAPI_BaseBackfillRequest BaseBackfillRequest;
	TOptional<bool> RefreshTtl;
};

/** The response type for FRequest_DeleteBackfillRequest */
struct RALLYHEREAPI_API FResponse_DeleteBackfillRequest : public FResponseAccessorTemplate< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_DeleteBackfillRequest(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_DeleteBackfillRequest() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT

#endif //ALLOW_LEGACY_RESPONSE_CONTENT


	// Individual Response Helpers	
	/* Response 204
	Successful Response
	*/

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Backfill resource could not be found on the session, or in the open-match system
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_DeleteBackfillRequest */
DECLARE_DELEGATE_OneParam(FDelegate_DeleteBackfillRequest, const FResponse_DeleteBackfillRequest&);

/** @brief A helper metadata object for DeleteBackfillRequest that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_DeleteBackfillRequest
{
	/** The request type */
	typedef FRequest_DeleteBackfillRequest Request;
	/** The response type */
	typedef FResponse_DeleteBackfillRequest Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_DeleteBackfillRequest Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Delete Browser Info
 * Delete the session from the public browser
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:update:browser`
 * 
 * 
 * 
 * Required Session Permissions: `SessionPermissions.session_admin` if user does not have the `session:*` auth permission
*/
struct RALLYHEREAPI_API FRequest_DeleteBrowserInfo : public FRequest
{
	FRequest_DeleteBrowserInfo();
	virtual ~FRequest_DeleteBrowserInfo() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString SessionId;
};

/** The response type for FRequest_DeleteBrowserInfo */
struct RALLYHEREAPI_API FResponse_DeleteBrowserInfo : public FResponseAccessorTemplate< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_DeleteBrowserInfo(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_DeleteBrowserInfo() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT

#endif //ALLOW_LEGACY_RESPONSE_CONTENT


	// Individual Response Helpers	
	/* Response 204
	Successful Response
	*/

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_DeleteBrowserInfo */
DECLARE_DELEGATE_OneParam(FDelegate_DeleteBrowserInfo, const FResponse_DeleteBrowserInfo&);

/** @brief A helper metadata object for DeleteBrowserInfo that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_DeleteBrowserInfo
{
	/** The request type */
	typedef FRequest_DeleteBrowserInfo Request;
	/** The response type */
	typedef FResponse_DeleteBrowserInfo Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_DeleteBrowserInfo Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Delete Platform Session From Rally Here Session
 * Remove a platform session from a Rally Here session
 *                
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:update:platform`
 * 
 * 
 * 
 * Required Session Permissions: `SessionPermissions.active_in_session` for users that do not have the `session:update:any` auth permission
*/
struct RALLYHEREAPI_API FRequest_DeletePlatformSessionFromRallyHereSession : public FRequest
{
	FRequest_DeletePlatformSessionFromRallyHereSession();
	virtual ~FRequest_DeletePlatformSessionFromRallyHereSession() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	ERHAPI_Platform Platform;
	FString PlatformSessionIdBase64;
	FString SessionId;
	TOptional<bool> RefreshTtl;
};

/** The response type for FRequest_DeletePlatformSessionFromRallyHereSession */
struct RALLYHEREAPI_API FResponse_DeletePlatformSessionFromRallyHereSession : public FResponseAccessorTemplate< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_DeletePlatformSessionFromRallyHereSession(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_DeletePlatformSessionFromRallyHereSession() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT

#endif //ALLOW_LEGACY_RESPONSE_CONTENT


	// Individual Response Helpers	
	/* Response 204
	Successful Response
	*/

	/* Response 403
	User is not authenticated, or does not have sufficient role access to perform request
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Platform Session or Platform Player doesn't exist.  See error code for more info
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 409
	Service was unable to fulfill the request at this time and should be retried after the Retry-After wait time
	*/
	bool TryGetContentFor409(FRHAPI_HzApiErrorModel& OutContent) const;
	/* Number of seconds after which to retry the request */
	TOptional<int32> GetHeader409_RetryAfter() const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_DeletePlatformSessionFromRallyHereSession */
DECLARE_DELEGATE_OneParam(FDelegate_DeletePlatformSessionFromRallyHereSession, const FResponse_DeletePlatformSessionFromRallyHereSession&);

/** @brief A helper metadata object for DeletePlatformSessionFromRallyHereSession that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_DeletePlatformSessionFromRallyHereSession
{
	/** The request type */
	typedef FRequest_DeletePlatformSessionFromRallyHereSession Request;
	/** The response type */
	typedef FResponse_DeletePlatformSessionFromRallyHereSession Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_DeletePlatformSessionFromRallyHereSession Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief End Instance
 * Unregister the instance from the session.
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:update:any`, `session:update:self`
 * 
 * 
 * 
 * Required Session Permissions: `SessionPermissions.session_host` if user does not have the `session:update:any` auth permission
*/
struct RALLYHEREAPI_API FRequest_EndInstance : public FRequest
{
	FRequest_EndInstance();
	virtual ~FRequest_EndInstance() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString SessionId;
};

/** The response type for FRequest_EndInstance */
struct RALLYHEREAPI_API FResponse_EndInstance : public FResponseAccessorTemplate< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_EndInstance(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_EndInstance() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT

	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 204
	Successful Response
	*/
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader204_ETag() const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_EndInstance */
DECLARE_DELEGATE_OneParam(FDelegate_EndInstance, const FResponse_EndInstance&);

/** @brief A helper metadata object for EndInstance that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_EndInstance
{
	/** The request type */
	typedef FRequest_EndInstance Request;
	/** The response type */
	typedef FResponse_EndInstance Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_EndInstance Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get All Map Game Info
 * Get the config used to launch an instance by the launch template id. Launch template ID can be found in
 * MatchMakingProfiles that are return by the `/v1/match-making-templates/` endpoint
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:read:config`
 * 
 * 
 * 
 * Required Session Permissions: None
 * **DEPRECATED** - Use the /v1/instance-request-template endpoint instead. This endpoint does not support loading data from the developer-portal
*/
struct RALLYHEREAPI_API FRequest_GetAllMapGameInfo : public FRequest
{
	FRequest_GetAllMapGameInfo();
	virtual ~FRequest_GetAllMapGameInfo() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FGuid InstanceLaunchTemplateId;
	/* If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed. */
	TOptional<FString> IfNoneMatch;
};

/** The response type for FRequest_GetAllMapGameInfo */
struct RALLYHEREAPI_API FResponse_GetAllMapGameInfo : public FResponseAccessorTemplate<FRHAPI_InstanceLaunchTemplate, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_InstanceLaunchTemplate, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetAllMapGameInfo(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetAllMapGameInfo() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_InstanceLaunchTemplate Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_InstanceLaunchTemplate& OutContent) const { return TryGetContent<FRHAPI_InstanceLaunchTemplate>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_InstanceLaunchTemplate>& OutContent) const { return TryGetContent<FRHAPI_InstanceLaunchTemplate>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_InstanceLaunchTemplate* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_InstanceLaunchTemplate>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_InstanceLaunchTemplate> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_InstanceLaunchTemplate>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_InstanceLaunchTemplate& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetAllMapGameInfo */
DECLARE_DELEGATE_OneParam(FDelegate_GetAllMapGameInfo, const FResponse_GetAllMapGameInfo&);

/** @brief A helper metadata object for GetAllMapGameInfo that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetAllMapGameInfo
{
	/** The request type */
	typedef FRequest_GetAllMapGameInfo Request;
	/** The response type */
	typedef FResponse_GetAllMapGameInfo Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetAllMapGameInfo Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get All Queue Info
 * Get all the available and active queues that sessions can try to join
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:read:config`
 * 
 * 
 * 
 * Required Session Permissions: None
 * **DEPRECATED** - Use the V2 endpoint instead
*/
struct RALLYHEREAPI_API FRequest_GetAllQueueInfo : public FRequest
{
	FRequest_GetAllQueueInfo();
	virtual ~FRequest_GetAllQueueInfo() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	TOptional<int32> Cursor;
	TOptional<int32> PageSize;
	/* If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed. */
	TOptional<FString> IfNoneMatch;
};

/** The response type for FRequest_GetAllQueueInfo */
struct RALLYHEREAPI_API FResponse_GetAllQueueInfo : public FResponseAccessorTemplate<FRHAPI_QueuesResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_QueuesResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetAllQueueInfo(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetAllQueueInfo() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_QueuesResponse Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_QueuesResponse& OutContent) const { return TryGetContent<FRHAPI_QueuesResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_QueuesResponse>& OutContent) const { return TryGetContent<FRHAPI_QueuesResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_QueuesResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_QueuesResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_QueuesResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_QueuesResponse>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_QueuesResponse& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetAllQueueInfo */
DECLARE_DELEGATE_OneParam(FDelegate_GetAllQueueInfo, const FResponse_GetAllQueueInfo&);

/** @brief A helper metadata object for GetAllQueueInfo that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetAllQueueInfo
{
	/** The request type */
	typedef FRequest_GetAllQueueInfo Request;
	/** The response type */
	typedef FResponse_GetAllQueueInfo Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetAllQueueInfo Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get All Queue Info V2
 * Get all the available and active queues that sessions can try to join
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:read:config`
 * 
 * 
 * 
 * Required Session Permissions: None
*/
struct RALLYHEREAPI_API FRequest_GetAllQueueInfoV2 : public FRequest
{
	FRequest_GetAllQueueInfoV2();
	virtual ~FRequest_GetAllQueueInfoV2() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	TOptional<int32> Cursor;
	TOptional<int32> PageSize;
	/* If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed. */
	TOptional<FString> IfNoneMatch;
};

/** The response type for FRequest_GetAllQueueInfoV2 */
struct RALLYHEREAPI_API FResponse_GetAllQueueInfoV2 : public FResponseAccessorTemplate<FRHAPI_QueuesResponseV2, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_QueuesResponseV2, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetAllQueueInfoV2(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetAllQueueInfoV2() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_QueuesResponseV2 Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_QueuesResponseV2& OutContent) const { return TryGetContent<FRHAPI_QueuesResponseV2>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_QueuesResponseV2>& OutContent) const { return TryGetContent<FRHAPI_QueuesResponseV2>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_QueuesResponseV2* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_QueuesResponseV2>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_QueuesResponseV2> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_QueuesResponseV2>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_QueuesResponseV2& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetAllQueueInfoV2 */
DECLARE_DELEGATE_OneParam(FDelegate_GetAllQueueInfoV2, const FResponse_GetAllQueueInfoV2&);

/** @brief A helper metadata object for GetAllQueueInfoV2 that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetAllQueueInfoV2
{
	/** The request type */
	typedef FRequest_GetAllQueueInfoV2 Request;
	/** The response type */
	typedef FResponse_GetAllQueueInfoV2 Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetAllQueueInfoV2 Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get All Regions
 * Get all of the enabled regions and their configuration
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:read:config`
 * 
 * 
 * 
 * Required Session Permissions: None
*/
struct RALLYHEREAPI_API FRequest_GetAllRegions : public FRequest
{
	FRequest_GetAllRegions();
	virtual ~FRequest_GetAllRegions() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	TOptional<int32> Cursor;
	TOptional<int32> PageSize;
};

/** The response type for FRequest_GetAllRegions */
struct RALLYHEREAPI_API FResponse_GetAllRegions : public FResponseAccessorTemplate<FRHAPI_RegionsResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_RegionsResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetAllRegions(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetAllRegions() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_RegionsResponse Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_RegionsResponse& OutContent) const { return TryGetContent<FRHAPI_RegionsResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_RegionsResponse>& OutContent) const { return TryGetContent<FRHAPI_RegionsResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_RegionsResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_RegionsResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_RegionsResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_RegionsResponse>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_RegionsResponse& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetAllRegions */
DECLARE_DELEGATE_OneParam(FDelegate_GetAllRegions, const FResponse_GetAllRegions&);

/** @brief A helper metadata object for GetAllRegions that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetAllRegions
{
	/** The request type */
	typedef FRequest_GetAllRegions Request;
	/** The response type */
	typedef FResponse_GetAllRegions Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetAllRegions Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get All Session Templates
 * Get the config about all session templates
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:read:config`
 * 
 * 
 * 
 * Required Session Permissions: None
*/
struct RALLYHEREAPI_API FRequest_GetAllSessionTemplates : public FRequest
{
	FRequest_GetAllSessionTemplates();
	virtual ~FRequest_GetAllSessionTemplates() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	/* If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed. */
	TOptional<FString> IfNoneMatch;
};

/** The response type for FRequest_GetAllSessionTemplates */
struct RALLYHEREAPI_API FResponse_GetAllSessionTemplates : public FResponseAccessorTemplate<FRHAPI_SessionTemplates, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_SessionTemplates, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetAllSessionTemplates(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetAllSessionTemplates() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_SessionTemplates Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_SessionTemplates& OutContent) const { return TryGetContent<FRHAPI_SessionTemplates>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_SessionTemplates>& OutContent) const { return TryGetContent<FRHAPI_SessionTemplates>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_SessionTemplates* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_SessionTemplates>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_SessionTemplates> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_SessionTemplates>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_SessionTemplates& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetAllSessionTemplates */
DECLARE_DELEGATE_OneParam(FDelegate_GetAllSessionTemplates, const FResponse_GetAllSessionTemplates&);

/** @brief A helper metadata object for GetAllSessionTemplates that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetAllSessionTemplates
{
	/** The request type */
	typedef FRequest_GetAllSessionTemplates Request;
	/** The response type */
	typedef FResponse_GetAllSessionTemplates Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetAllSessionTemplates Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Browser Sessions By Type
 * Get all public sessions of a specific type
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:read:browser`
 * 
 * 
 * 
 * Required Permissions: None
*/
struct RALLYHEREAPI_API FRequest_GetBrowserSessionsByType : public FRequest
{
	FRequest_GetBrowserSessionsByType();
	virtual ~FRequest_GetBrowserSessionsByType() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString SessionType;
	TOptional<int32> Cursor;
	TOptional<int32> PageSize;
	TOptional<FString> RegionId;
};

/** The response type for FRequest_GetBrowserSessionsByType */
struct RALLYHEREAPI_API FResponse_GetBrowserSessionsByType : public FResponseAccessorTemplate<FRHAPI_BrowserResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_BrowserResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetBrowserSessionsByType(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetBrowserSessionsByType() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_BrowserResponse Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_BrowserResponse& OutContent) const { return TryGetContent<FRHAPI_BrowserResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_BrowserResponse>& OutContent) const { return TryGetContent<FRHAPI_BrowserResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_BrowserResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_BrowserResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_BrowserResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_BrowserResponse>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_BrowserResponse& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetBrowserSessionsByType */
DECLARE_DELEGATE_OneParam(FDelegate_GetBrowserSessionsByType, const FResponse_GetBrowserSessionsByType&);

/** @brief A helper metadata object for GetBrowserSessionsByType that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetBrowserSessionsByType
{
	/** The request type */
	typedef FRequest_GetBrowserSessionsByType Request;
	/** The response type */
	typedef FResponse_GetBrowserSessionsByType Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetBrowserSessionsByType Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Connection Info Self
 * Get public connection info for self
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:read:config`
 * 
 * 
 * 
 * Required Permissions: None
*/
struct RALLYHEREAPI_API FRequest_GetConnectionInfoSelf : public FRequest
{
	FRequest_GetConnectionInfoSelf();
	virtual ~FRequest_GetConnectionInfoSelf() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	TOptional<FString> XForwardedFor;
};

/** The response type for FRequest_GetConnectionInfoSelf */
struct RALLYHEREAPI_API FResponse_GetConnectionInfoSelf : public FResponseAccessorTemplate<FRHAPI_ConnectionInfo, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_ConnectionInfo, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetConnectionInfoSelf(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetConnectionInfoSelf() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_ConnectionInfo Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_ConnectionInfo& OutContent) const { return TryGetContent<FRHAPI_ConnectionInfo>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_ConnectionInfo>& OutContent) const { return TryGetContent<FRHAPI_ConnectionInfo>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_ConnectionInfo* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_ConnectionInfo>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_ConnectionInfo> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_ConnectionInfo>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_ConnectionInfo& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetConnectionInfoSelf */
DECLARE_DELEGATE_OneParam(FDelegate_GetConnectionInfoSelf, const FResponse_GetConnectionInfoSelf&);

/** @brief A helper metadata object for GetConnectionInfoSelf that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetConnectionInfoSelf
{
	/** The request type */
	typedef FRequest_GetConnectionInfoSelf Request;
	/** The response type */
	typedef FResponse_GetConnectionInfoSelf Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetConnectionInfoSelf Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Instance Request Template
 * Get the config used to request an instance by the InstanceRequestTemplate ID. This ID can be found in
 * MatchMakingProfiles that are return by the `/v1/match-making-templates/` endpoint
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:read:config`
 * 
 * 
 * 
 * Required Session Permissions: None
*/
struct RALLYHEREAPI_API FRequest_GetInstanceRequestTemplate : public FRequest
{
	FRequest_GetInstanceRequestTemplate();
	virtual ~FRequest_GetInstanceRequestTemplate() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FGuid InstanceRequestTemplateId;
	/* If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed. */
	TOptional<FString> IfNoneMatch;
};

/** The response type for FRequest_GetInstanceRequestTemplate */
struct RALLYHEREAPI_API FResponse_GetInstanceRequestTemplate : public FResponseAccessorTemplate<FRHAPI_InstanceRequestTemplate, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_InstanceRequestTemplate, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetInstanceRequestTemplate(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetInstanceRequestTemplate() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_InstanceRequestTemplate Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_InstanceRequestTemplate& OutContent) const { return TryGetContent<FRHAPI_InstanceRequestTemplate>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_InstanceRequestTemplate>& OutContent) const { return TryGetContent<FRHAPI_InstanceRequestTemplate>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_InstanceRequestTemplate* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_InstanceRequestTemplate>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_InstanceRequestTemplate> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_InstanceRequestTemplate>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_InstanceRequestTemplate& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetInstanceRequestTemplate */
DECLARE_DELEGATE_OneParam(FDelegate_GetInstanceRequestTemplate, const FResponse_GetInstanceRequestTemplate&);

/** @brief A helper metadata object for GetInstanceRequestTemplate that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetInstanceRequestTemplate
{
	/** The request type */
	typedef FRequest_GetInstanceRequestTemplate Request;
	/** The response type */
	typedef FResponse_GetInstanceRequestTemplate Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetInstanceRequestTemplate Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Match Making Profile
 * Get info about a specific match making profile
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:read:config`
 * 
 * 
 * 
 * Required Session Permissions: None
 * **DEPRECATED** Use the V2 endpoint instead
*/
struct RALLYHEREAPI_API FRequest_GetMatchMakingProfile : public FRequest
{
	FRequest_GetMatchMakingProfile();
	virtual ~FRequest_GetMatchMakingProfile() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString MatchMakingProfileId;
	/* If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed. */
	TOptional<FString> IfNoneMatch;
};

/** The response type for FRequest_GetMatchMakingProfile */
struct RALLYHEREAPI_API FResponse_GetMatchMakingProfile : public FResponseAccessorTemplate<FRHAPI_MatchMakingProfile, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_MatchMakingProfile, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetMatchMakingProfile(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetMatchMakingProfile() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_MatchMakingProfile Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_MatchMakingProfile& OutContent) const { return TryGetContent<FRHAPI_MatchMakingProfile>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_MatchMakingProfile>& OutContent) const { return TryGetContent<FRHAPI_MatchMakingProfile>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_MatchMakingProfile* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_MatchMakingProfile>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_MatchMakingProfile> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_MatchMakingProfile>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_MatchMakingProfile& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetMatchMakingProfile */
DECLARE_DELEGATE_OneParam(FDelegate_GetMatchMakingProfile, const FResponse_GetMatchMakingProfile&);

/** @brief A helper metadata object for GetMatchMakingProfile that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetMatchMakingProfile
{
	/** The request type */
	typedef FRequest_GetMatchMakingProfile Request;
	/** The response type */
	typedef FResponse_GetMatchMakingProfile Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetMatchMakingProfile Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Match Making Profile V2
 * Get info about a specific match making profile
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:read:config`
 * 
 * 
 * 
 * Required Session Permissions: None
*/
struct RALLYHEREAPI_API FRequest_GetMatchMakingProfileV2 : public FRequest
{
	FRequest_GetMatchMakingProfileV2();
	virtual ~FRequest_GetMatchMakingProfileV2() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString MatchMakingProfileId;
	/* If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed. */
	TOptional<FString> IfNoneMatch;
};

/** The response type for FRequest_GetMatchMakingProfileV2 */
struct RALLYHEREAPI_API FResponse_GetMatchMakingProfileV2 : public FResponseAccessorTemplate<FRHAPI_MatchMakingProfileV2, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_MatchMakingProfileV2, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetMatchMakingProfileV2(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetMatchMakingProfileV2() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_MatchMakingProfileV2 Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_MatchMakingProfileV2& OutContent) const { return TryGetContent<FRHAPI_MatchMakingProfileV2>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_MatchMakingProfileV2>& OutContent) const { return TryGetContent<FRHAPI_MatchMakingProfileV2>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_MatchMakingProfileV2* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_MatchMakingProfileV2>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_MatchMakingProfileV2> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_MatchMakingProfileV2>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_MatchMakingProfileV2& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetMatchMakingProfileV2 */
DECLARE_DELEGATE_OneParam(FDelegate_GetMatchMakingProfileV2, const FResponse_GetMatchMakingProfileV2&);

/** @brief A helper metadata object for GetMatchMakingProfileV2 that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetMatchMakingProfileV2
{
	/** The request type */
	typedef FRequest_GetMatchMakingProfileV2 Request;
	/** The response type */
	typedef FResponse_GetMatchMakingProfileV2 Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetMatchMakingProfileV2 Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Match Making Templates
 * Get match making templates, rules, and profiles for a template group. Groups can be found on the queue information
 * from the `queues` config endpoints
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:read:config`
 * 
 * 
 *             
 * Required Session Permissions: None
 * **DEPRECATED** Use the V2 endpoint instead
*/
struct RALLYHEREAPI_API FRequest_GetMatchMakingTemplates : public FRequest
{
	FRequest_GetMatchMakingTemplates();
	virtual ~FRequest_GetMatchMakingTemplates() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FGuid TemplateGroupId;
	/* If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed. */
	TOptional<FString> IfNoneMatch;
};

/** The response type for FRequest_GetMatchMakingTemplates */
struct RALLYHEREAPI_API FResponse_GetMatchMakingTemplates : public FResponseAccessorTemplate<FRHAPI_MatchMakingTemplateGroup, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_MatchMakingTemplateGroup, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetMatchMakingTemplates(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetMatchMakingTemplates() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_MatchMakingTemplateGroup Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_MatchMakingTemplateGroup& OutContent) const { return TryGetContent<FRHAPI_MatchMakingTemplateGroup>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_MatchMakingTemplateGroup>& OutContent) const { return TryGetContent<FRHAPI_MatchMakingTemplateGroup>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_MatchMakingTemplateGroup* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_MatchMakingTemplateGroup>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_MatchMakingTemplateGroup> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_MatchMakingTemplateGroup>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_MatchMakingTemplateGroup& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetMatchMakingTemplates */
DECLARE_DELEGATE_OneParam(FDelegate_GetMatchMakingTemplates, const FResponse_GetMatchMakingTemplates&);

/** @brief A helper metadata object for GetMatchMakingTemplates that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetMatchMakingTemplates
{
	/** The request type */
	typedef FRequest_GetMatchMakingTemplates Request;
	/** The response type */
	typedef FResponse_GetMatchMakingTemplates Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetMatchMakingTemplates Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Match Making Templates V2
 * Get match making templates, rules, and profiles for a template group. Groups can be found on the queue information
 * from the `queues` config endpoints
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:read:config`
 * 
 * 
 * 
 * Required Session Permissions: None
 * **DEPRECATED** Use the V2 endpoint instead
*/
struct RALLYHEREAPI_API FRequest_GetMatchMakingTemplatesV2 : public FRequest
{
	FRequest_GetMatchMakingTemplatesV2();
	virtual ~FRequest_GetMatchMakingTemplatesV2() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FGuid TemplateGroupId;
	/* If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed. */
	TOptional<FString> IfNoneMatch;
};

/** The response type for FRequest_GetMatchMakingTemplatesV2 */
struct RALLYHEREAPI_API FResponse_GetMatchMakingTemplatesV2 : public FResponseAccessorTemplate<FRHAPI_MatchMakingTemplateGroupV2, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_MatchMakingTemplateGroupV2, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetMatchMakingTemplatesV2(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetMatchMakingTemplatesV2() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_MatchMakingTemplateGroupV2 Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_MatchMakingTemplateGroupV2& OutContent) const { return TryGetContent<FRHAPI_MatchMakingTemplateGroupV2>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_MatchMakingTemplateGroupV2>& OutContent) const { return TryGetContent<FRHAPI_MatchMakingTemplateGroupV2>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_MatchMakingTemplateGroupV2* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_MatchMakingTemplateGroupV2>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_MatchMakingTemplateGroupV2> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_MatchMakingTemplateGroupV2>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_MatchMakingTemplateGroupV2& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetMatchMakingTemplatesV2 */
DECLARE_DELEGATE_OneParam(FDelegate_GetMatchMakingTemplatesV2, const FResponse_GetMatchMakingTemplatesV2&);

/** @brief A helper metadata object for GetMatchMakingTemplatesV2 that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetMatchMakingTemplatesV2
{
	/** The request type */
	typedef FRequest_GetMatchMakingTemplatesV2 Request;
	/** The response type */
	typedef FResponse_GetMatchMakingTemplatesV2 Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetMatchMakingTemplatesV2 Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Platform Session Info
 * Get information about a platform session
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:read:platform`
 * 
 * 
 * 
 * Required Session Permissions: `SessionPermissions.active_in_session` for users that do not have the `session:read:any` auth permission
*/
struct RALLYHEREAPI_API FRequest_GetPlatformSessionInfo : public FRequest
{
	FRequest_GetPlatformSessionInfo();
	virtual ~FRequest_GetPlatformSessionInfo() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	ERHAPI_Platform Platform;
	FString PlatformSessionIdBase64;
	/* If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed. */
	TOptional<FString> IfNoneMatch;
};

/** The response type for FRequest_GetPlatformSessionInfo */
struct RALLYHEREAPI_API FResponse_GetPlatformSessionInfo : public FResponseAccessorTemplate<FRHAPI_PlatformSession, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_PlatformSession, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetPlatformSessionInfo(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetPlatformSessionInfo() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PlatformSession Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PlatformSession& OutContent) const { return TryGetContent<FRHAPI_PlatformSession>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PlatformSession>& OutContent) const { return TryGetContent<FRHAPI_PlatformSession>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PlatformSession* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PlatformSession>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PlatformSession> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PlatformSession>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PlatformSession& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 403
	User is not authenticated, or does not have sufficient role access to perform request
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Platform Session or Platform Player doesn't exist.  See error code for more info
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetPlatformSessionInfo */
DECLARE_DELEGATE_OneParam(FDelegate_GetPlatformSessionInfo, const FResponse_GetPlatformSessionInfo&);

/** @brief A helper metadata object for GetPlatformSessionInfo that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetPlatformSessionInfo
{
	/** The request type */
	typedef FRequest_GetPlatformSessionInfo Request;
	/** The response type */
	typedef FResponse_GetPlatformSessionInfo Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetPlatformSessionInfo Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Player Sessions
 * Get all session IDs associated with a player.  NOTE This list is eventually consistent with the data from the session by ID endpoints.
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:read-player:any`
 * 
 * - For the player themselves : `session:read-player:self`
 * 
 * Required Session Permissions: None
 * 
 * **DEPRECATED** - Use player endpoint instead
*/
struct RALLYHEREAPI_API FRequest_GetPlayerSessions : public FRequest
{
	FRequest_GetPlayerSessions();
	virtual ~FRequest_GetPlayerSessions() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	int32 PlayerId = 0;
};

/** The response type for FRequest_GetPlayerSessions */
struct RALLYHEREAPI_API FResponse_GetPlayerSessions : public FResponseAccessorTemplate<FRHAPI_PlayerSessions, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_PlayerSessions, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetPlayerSessions(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetPlayerSessions() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PlayerSessions Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PlayerSessions& OutContent) const { return TryGetContent<FRHAPI_PlayerSessions>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PlayerSessions>& OutContent) const { return TryGetContent<FRHAPI_PlayerSessions>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PlayerSessions* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PlayerSessions>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PlayerSessions> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PlayerSessions>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PlayerSessions& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetPlayerSessions */
DECLARE_DELEGATE_OneParam(FDelegate_GetPlayerSessions, const FResponse_GetPlayerSessions&);

/** @brief A helper metadata object for GetPlayerSessions that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetPlayerSessions
{
	/** The request type */
	typedef FRequest_GetPlayerSessions Request;
	/** The response type */
	typedef FResponse_GetPlayerSessions Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetPlayerSessions Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Player Sessions By Uuid
 * Get all session IDs associated with a player.  NOTE This list is eventually consistent with the data from the session by ID endpoints.
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:read-player:any`
 * 
 * - For the player themselves : `session:read-player:self`
 * 
 * Required Session Permissions: None
 * **DEPRECATED** - Use /v1/player/{player_uuid}/session endpoint instead
*/
struct RALLYHEREAPI_API FRequest_GetPlayerSessionsByUuid : public FRequest
{
	FRequest_GetPlayerSessionsByUuid();
	virtual ~FRequest_GetPlayerSessionsByUuid() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FGuid PlayerUuid;
	/* If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed. */
	TOptional<FString> IfNoneMatch;
};

/** The response type for FRequest_GetPlayerSessionsByUuid */
struct RALLYHEREAPI_API FResponse_GetPlayerSessionsByUuid : public FResponseAccessorTemplate<FRHAPI_PlayerSessions, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_PlayerSessions, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetPlayerSessionsByUuid(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetPlayerSessionsByUuid() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PlayerSessions Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PlayerSessions& OutContent) const { return TryGetContent<FRHAPI_PlayerSessions>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PlayerSessions>& OutContent) const { return TryGetContent<FRHAPI_PlayerSessions>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PlayerSessions* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PlayerSessions>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PlayerSessions> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PlayerSessions>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PlayerSessions& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetPlayerSessionsByUuid */
DECLARE_DELEGATE_OneParam(FDelegate_GetPlayerSessionsByUuid, const FResponse_GetPlayerSessionsByUuid&);

/** @brief A helper metadata object for GetPlayerSessionsByUuid that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetPlayerSessionsByUuid
{
	/** The request type */
	typedef FRequest_GetPlayerSessionsByUuid Request;
	/** The response type */
	typedef FResponse_GetPlayerSessionsByUuid Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetPlayerSessionsByUuid Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Player Sessions By Uuid V2
 * Get all session IDs associated with a player.  NOTE This list is eventually consistent with the data from the session by ID endpoints.
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:read-player:any`
 * 
 * - For the player themselves : `session:read-player:self`
 * 
 * Required Session Permissions: None
*/
struct RALLYHEREAPI_API FRequest_GetPlayerSessionsByUuidV2 : public FRequest
{
	FRequest_GetPlayerSessionsByUuidV2();
	virtual ~FRequest_GetPlayerSessionsByUuidV2() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FGuid PlayerUuid;
	/* If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed. */
	TOptional<FString> IfNoneMatch;
};

/** The response type for FRequest_GetPlayerSessionsByUuidV2 */
struct RALLYHEREAPI_API FResponse_GetPlayerSessionsByUuidV2 : public FResponseAccessorTemplate<FRHAPI_PlayerSessions, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_PlayerSessions, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetPlayerSessionsByUuidV2(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetPlayerSessionsByUuidV2() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PlayerSessions Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PlayerSessions& OutContent) const { return TryGetContent<FRHAPI_PlayerSessions>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PlayerSessions>& OutContent) const { return TryGetContent<FRHAPI_PlayerSessions>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PlayerSessions* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PlayerSessions>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PlayerSessions> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PlayerSessions>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PlayerSessions& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetPlayerSessionsByUuidV2 */
DECLARE_DELEGATE_OneParam(FDelegate_GetPlayerSessionsByUuidV2, const FResponse_GetPlayerSessionsByUuidV2&);

/** @brief A helper metadata object for GetPlayerSessionsByUuidV2 that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetPlayerSessionsByUuidV2
{
	/** The request type */
	typedef FRequest_GetPlayerSessionsByUuidV2 Request;
	/** The response type */
	typedef FResponse_GetPlayerSessionsByUuidV2 Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetPlayerSessionsByUuidV2 Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Player Sessions Self
 * Get all session IDs associated with the token's player.  NOTE This list is eventually consistent with the data from the session by ID endpoints.
 * 
 * Required Auth Permissions: `session:read-player:self`
 *             
 * Required Session Permissions: None
*/
struct RALLYHEREAPI_API FRequest_GetPlayerSessionsSelf : public FRequest
{
	FRequest_GetPlayerSessionsSelf();
	virtual ~FRequest_GetPlayerSessionsSelf() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	/* If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed. */
	TOptional<FString> IfNoneMatch;
};

/** The response type for FRequest_GetPlayerSessionsSelf */
struct RALLYHEREAPI_API FResponse_GetPlayerSessionsSelf : public FResponseAccessorTemplate<FRHAPI_PlayerSessions, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_PlayerSessions, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetPlayerSessionsSelf(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetPlayerSessionsSelf() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PlayerSessions Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PlayerSessions& OutContent) const { return TryGetContent<FRHAPI_PlayerSessions>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PlayerSessions>& OutContent) const { return TryGetContent<FRHAPI_PlayerSessions>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PlayerSessions* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PlayerSessions>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PlayerSessions> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PlayerSessions>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PlayerSessions& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetPlayerSessionsSelf */
DECLARE_DELEGATE_OneParam(FDelegate_GetPlayerSessionsSelf, const FResponse_GetPlayerSessionsSelf&);

/** @brief A helper metadata object for GetPlayerSessionsSelf that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetPlayerSessionsSelf
{
	/** The request type */
	typedef FRequest_GetPlayerSessionsSelf Request;
	/** The response type */
	typedef FResponse_GetPlayerSessionsSelf Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetPlayerSessionsSelf Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Session Audit
 * Get all audit events for a specific session or player. Empty list means there is no audit history.
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session-audit:read:all`, `session:*`
 * 
 *  for all sessions
 * 
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session-audit:read:self`, `session:*`
 * 
 *  for sessions you are a member of
 * 
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session-player-audit:read:all`, `session:*`
 * 
 *  to read audit information about any player
 * 
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session-player-audit:read:self`, `session:*`
 * 
 *  to read audit information about yourself
*/
struct RALLYHEREAPI_API FRequest_GetSessionAudit : public FRequest
{
	FRequest_GetSessionAudit();
	virtual ~FRequest_GetSessionAudit() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	TOptional<FString> SessionId;
	TOptional<FGuid> PlayerUuid;
	TOptional<int32> PageNum;
	TOptional<int32> PageSize;
	TOptional<FDateTime> StartDate;
	TOptional<FDateTime> EndDate;
};

/** The response type for FRequest_GetSessionAudit */
struct RALLYHEREAPI_API FResponse_GetSessionAudit : public FResponseAccessorTemplate<FRHAPI_AuditResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_AuditResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetSessionAudit(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetSessionAudit() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_AuditResponse Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_AuditResponse& OutContent) const { return TryGetContent<FRHAPI_AuditResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_AuditResponse>& OutContent) const { return TryGetContent<FRHAPI_AuditResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_AuditResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_AuditResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_AuditResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_AuditResponse>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_AuditResponse& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetSessionAudit */
DECLARE_DELEGATE_OneParam(FDelegate_GetSessionAudit, const FResponse_GetSessionAudit&);

/** @brief A helper metadata object for GetSessionAudit that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetSessionAudit
{
	/** The request type */
	typedef FRequest_GetSessionAudit Request;
	/** The response type */
	typedef FResponse_GetSessionAudit Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetSessionAudit Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Session By Allocation Id
 * Get session by allocation ID. Returns the same limited results as getting the session by session id
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:read:allocation`
 * 
 * 
 * 
 * Required Session Permissions: None
*/
struct RALLYHEREAPI_API FRequest_GetSessionByAllocationId : public FRequest
{
	FRequest_GetSessionByAllocationId();
	virtual ~FRequest_GetSessionByAllocationId() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString AllocationId;
	/* If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed. */
	TOptional<FString> IfNoneMatch;
};

/** The response type for FRequest_GetSessionByAllocationId */
struct RALLYHEREAPI_API FResponse_GetSessionByAllocationId : public FResponseAccessorTemplate<FRHAPI_Session, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_Session, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetSessionByAllocationId(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetSessionByAllocationId() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_Session Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_Session& OutContent) const { return TryGetContent<FRHAPI_Session>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_Session>& OutContent) const { return TryGetContent<FRHAPI_Session>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_Session* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_Session>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_Session> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_Session>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_Session& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetSessionByAllocationId */
DECLARE_DELEGATE_OneParam(FDelegate_GetSessionByAllocationId, const FResponse_GetSessionByAllocationId&);

/** @brief A helper metadata object for GetSessionByAllocationId that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetSessionByAllocationId
{
	/** The request type */
	typedef FRequest_GetSessionByAllocationId Request;
	/** The response type */
	typedef FResponse_GetSessionByAllocationId Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetSessionByAllocationId Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Session By Id
 * Get Session by ID. This request will return limited results for non-members of the session, such as excluding info for 
 * how to connect to the instance. Elevated permissions can bypass that restriction
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:read:any`, `session:read:self`
 * 
 * 
 * 
 * Required Session Permissions: None for limited results. `SessionPermissions.active_in_session` to get complete results for users who do not have the `session:read:any` auth permission
*/
struct RALLYHEREAPI_API FRequest_GetSessionById : public FRequest
{
	FRequest_GetSessionById();
	virtual ~FRequest_GetSessionById() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString SessionId;
	TOptional<bool> RefreshTtl;
	/* If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed. */
	TOptional<FString> IfNoneMatch;
};

/** The response type for FRequest_GetSessionById */
struct RALLYHEREAPI_API FResponse_GetSessionById : public FResponseAccessorTemplate<FRHAPI_Session, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_Session, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetSessionById(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetSessionById() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_Session Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_Session& OutContent) const { return TryGetContent<FRHAPI_Session>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_Session>& OutContent) const { return TryGetContent<FRHAPI_Session>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_Session* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_Session>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_Session> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_Session>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_Session& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetSessionById */
DECLARE_DELEGATE_OneParam(FDelegate_GetSessionById, const FResponse_GetSessionById&);

/** @brief A helper metadata object for GetSessionById that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetSessionById
{
	/** The request type */
	typedef FRequest_GetSessionById Request;
	/** The response type */
	typedef FResponse_GetSessionById Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetSessionById Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Session Template By Type
 * Get config about a session template by ID
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:read:config`
 * 
 * 
 * 
 * Required Session Permissions: None
*/
struct RALLYHEREAPI_API FRequest_GetSessionTemplateByType : public FRequest
{
	FRequest_GetSessionTemplateByType();
	virtual ~FRequest_GetSessionTemplateByType() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString SessionType;
	/* If you provide the ETag that matches the current ETag for this resource, a 304 response will be returned - indicating that the resource has not changed. */
	TOptional<FString> IfNoneMatch;
};

/** The response type for FRequest_GetSessionTemplateByType */
struct RALLYHEREAPI_API FResponse_GetSessionTemplateByType : public FResponseAccessorTemplate<FRHAPI_SessionTemplate, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_SessionTemplate, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetSessionTemplateByType(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetSessionTemplateByType() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_SessionTemplate Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_SessionTemplate& OutContent) const { return TryGetContent<FRHAPI_SessionTemplate>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_SessionTemplate>& OutContent) const { return TryGetContent<FRHAPI_SessionTemplate>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_SessionTemplate* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_SessionTemplate>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_SessionTemplate> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_SessionTemplate>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_SessionTemplate& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetSessionTemplateByType */
DECLARE_DELEGATE_OneParam(FDelegate_GetSessionTemplateByType, const FResponse_GetSessionTemplateByType&);

/** @brief A helper metadata object for GetSessionTemplateByType that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetSessionTemplateByType
{
	/** The request type */
	typedef FRequest_GetSessionTemplateByType Request;
	/** The response type */
	typedef FResponse_GetSessionTemplateByType Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetSessionTemplateByType Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Voip Action Token
 * Generate a token for one of the specific vivox actions except logging in
 * 
 * `JOIN` Required Permissions:
 * 
 * - For the player themselves : `session:vivox:join`
 * 
 * `JOIN_MUTED` Required Permissions:
 * 
 * - For the player themselves : `session:vivox:join_muted`
 * 
 * `KICK` Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:vivox:kick:all`
 * 
 * - For the player themselves : `session:vivox:kick:self`
 * 
 * or be leader of session and have Required Permissions:
 * 
 * - For any player (including themselves) : `session:vivox:kick:as-leader`
 * 
 * 
 * 
 * `MUTE` Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:vivox:mute:all`
 * 
 * - For the player themselves : `session:vivox:mute:self`
 * 
 * or be leader of session and have Required Permissions:
 * 
 * - For any player (including themselves) : `session:vivox:mute:as-leader`
 * 
 * 
 * 
 * `TRANSCRIBE` Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:vivox:transcribe:any`
 * 
 * - For the player themselves : `session:vivox:transcribe:as-member`
*/
struct RALLYHEREAPI_API FRequest_GetVoipActionToken : public FRequest
{
	FRequest_GetVoipActionToken();
	virtual ~FRequest_GetVoipActionToken() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FGuid PlayerUuid;
	ERHAPI_VivoxSessionActionSingle VivoxAction;
	FString SessionId;
	ERHAPI_VoipSessionType VoipSessionType;
	TOptional<bool> RefreshTtl;
};

/** The response type for FRequest_GetVoipActionToken */
struct RALLYHEREAPI_API FResponse_GetVoipActionToken : public FResponseAccessorTemplate<FRHAPI_VoipTokenResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_VoipTokenResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetVoipActionToken(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetVoipActionToken() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_VoipTokenResponse Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_VoipTokenResponse& OutContent) const { return TryGetContent<FRHAPI_VoipTokenResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_VoipTokenResponse>& OutContent) const { return TryGetContent<FRHAPI_VoipTokenResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_VoipTokenResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_VoipTokenResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_VoipTokenResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_VoipTokenResponse>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_VoipTokenResponse& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetVoipActionToken */
DECLARE_DELEGATE_OneParam(FDelegate_GetVoipActionToken, const FResponse_GetVoipActionToken&);

/** @brief A helper metadata object for GetVoipActionToken that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetVoipActionToken
{
	/** The request type */
	typedef FRequest_GetVoipActionToken Request;
	/** The response type */
	typedef FResponse_GetVoipActionToken Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetVoipActionToken Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Voip Action Token Me
 * Generate a token for one of the specific vivox actions except logging in
 * 
 * `JOIN` Required Permissions:
 * 
 * - For the player themselves : `session:vivox:join`
 * 
 * `JOIN_MUTED` Required Permissions:
 * 
 * - For the player themselves : `session:vivox:join_muted`
 * 
 * `KICK` Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:vivox:kick:all`
 * 
 * - For the player themselves : `session:vivox:kick:self`
 * 
 * or be leader of session and have Required Permissions:
 * 
 * - For any player (including themselves) : `session:vivox:kick:as-leader`
 * 
 * 
 * 
 * `MUTE` Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:vivox:mute:all`
 * 
 * - For the player themselves : `session:vivox:mute:self`
 * 
 * or be leader of session and have Required Permissions:
 * 
 * - For any player (including themselves) : `session:vivox:kick:as-leader`
 * 
 * 
 * 
 * `TRANSCRIBE` Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:vivox:transcribe:any`
 * 
 * - For the player themselves : `session:vivox:transcribe:as-member`
*/
struct RALLYHEREAPI_API FRequest_GetVoipActionTokenMe : public FRequest
{
	FRequest_GetVoipActionTokenMe();
	virtual ~FRequest_GetVoipActionTokenMe() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	ERHAPI_VivoxSessionActionSingle VivoxAction;
	FString SessionId;
	ERHAPI_VoipSessionType VoipSessionType;
	TOptional<bool> RefreshTtl;
};

/** The response type for FRequest_GetVoipActionTokenMe */
struct RALLYHEREAPI_API FResponse_GetVoipActionTokenMe : public FResponseAccessorTemplate<FRHAPI_VoipTokenResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_VoipTokenResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetVoipActionTokenMe(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetVoipActionTokenMe() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_VoipTokenResponse Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_VoipTokenResponse& OutContent) const { return TryGetContent<FRHAPI_VoipTokenResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_VoipTokenResponse>& OutContent) const { return TryGetContent<FRHAPI_VoipTokenResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_VoipTokenResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_VoipTokenResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_VoipTokenResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_VoipTokenResponse>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_VoipTokenResponse& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetVoipActionTokenMe */
DECLARE_DELEGATE_OneParam(FDelegate_GetVoipActionTokenMe, const FResponse_GetVoipActionTokenMe&);

/** @brief A helper metadata object for GetVoipActionTokenMe that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetVoipActionTokenMe
{
	/** The request type */
	typedef FRequest_GetVoipActionTokenMe Request;
	/** The response type */
	typedef FResponse_GetVoipActionTokenMe Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetVoipActionTokenMe Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Voip Login Token
 * Generate a token to login with vivox
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:vivox:login`
*/
struct RALLYHEREAPI_API FRequest_GetVoipLoginToken : public FRequest
{
	FRequest_GetVoipLoginToken();
	virtual ~FRequest_GetVoipLoginToken() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
};

/** The response type for FRequest_GetVoipLoginToken */
struct RALLYHEREAPI_API FResponse_GetVoipLoginToken : public FResponseAccessorTemplate<FRHAPI_VoipTokenResponse, FRHAPI_HzApiErrorModel>
{
	typedef FResponseAccessorTemplate<FRHAPI_VoipTokenResponse, FRHAPI_HzApiErrorModel> Super;

	FResponse_GetVoipLoginToken(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetVoipLoginToken() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_VoipTokenResponse Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_VoipTokenResponse& OutContent) const { return TryGetContent<FRHAPI_VoipTokenResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_VoipTokenResponse>& OutContent) const { return TryGetContent<FRHAPI_VoipTokenResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_VoipTokenResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_VoipTokenResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_VoipTokenResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_VoipTokenResponse>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_VoipTokenResponse& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

};

/** The delegate class for FRequest_GetVoipLoginToken */
DECLARE_DELEGATE_OneParam(FDelegate_GetVoipLoginToken, const FResponse_GetVoipLoginToken&);

/** @brief A helper metadata object for GetVoipLoginToken that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetVoipLoginToken
{
	/** The request type */
	typedef FRequest_GetVoipLoginToken Request;
	/** The response type */
	typedef FResponse_GetVoipLoginToken Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetVoipLoginToken Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Instance Health Check
 * Endpoint to post health status of an instance
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:instance:health`
 * 
 * 
 * 
 * session:instance:health
*/
struct RALLYHEREAPI_API FRequest_InstanceHealthCheck : public FRequest
{
	FRequest_InstanceHealthCheck();
	virtual ~FRequest_InstanceHealthCheck() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString SessionId;
	FRHAPI_InstanceHealthStatusUpdate InstanceHealthStatusUpdate;
};

/** The response type for FRequest_InstanceHealthCheck */
struct RALLYHEREAPI_API FResponse_InstanceHealthCheck : public FResponseAccessorTemplate<FRHAPI_InstanceHealthStatusResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_InstanceHealthStatusResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_InstanceHealthCheck(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_InstanceHealthCheck() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_InstanceHealthStatusResponse Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_InstanceHealthStatusResponse& OutContent) const { return TryGetContent<FRHAPI_InstanceHealthStatusResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_InstanceHealthStatusResponse>& OutContent) const { return TryGetContent<FRHAPI_InstanceHealthStatusResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_InstanceHealthStatusResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_InstanceHealthStatusResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_InstanceHealthStatusResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_InstanceHealthStatusResponse>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_InstanceHealthStatusResponse& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_InstanceHealthCheck */
DECLARE_DELEGATE_OneParam(FDelegate_InstanceHealthCheck, const FResponse_InstanceHealthCheck&);

/** @brief A helper metadata object for InstanceHealthCheck that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_InstanceHealthCheck
{
	/** The request type */
	typedef FRequest_InstanceHealthCheck Request;
	/** The response type */
	typedef FResponse_InstanceHealthCheck Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_InstanceHealthCheck Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Instance Health Config
 * Get config about expected poll rates for instance health, and when instances will go missing/unhealthy
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:read:config`
*/
struct RALLYHEREAPI_API FRequest_InstanceHealthConfig : public FRequest
{
	FRequest_InstanceHealthConfig();
	virtual ~FRequest_InstanceHealthConfig() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
};

/** The response type for FRequest_InstanceHealthConfig */
struct RALLYHEREAPI_API FResponse_InstanceHealthConfig : public FResponseAccessorTemplate<FRHAPI_InstanceHealthSettingsResponse, FRHAPI_HzApiErrorModel>
{
	typedef FResponseAccessorTemplate<FRHAPI_InstanceHealthSettingsResponse, FRHAPI_HzApiErrorModel> Super;

	FResponse_InstanceHealthConfig(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_InstanceHealthConfig() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_InstanceHealthSettingsResponse Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_InstanceHealthSettingsResponse& OutContent) const { return TryGetContent<FRHAPI_InstanceHealthSettingsResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_InstanceHealthSettingsResponse>& OutContent) const { return TryGetContent<FRHAPI_InstanceHealthSettingsResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_InstanceHealthSettingsResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_InstanceHealthSettingsResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_InstanceHealthSettingsResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_InstanceHealthSettingsResponse>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_InstanceHealthSettingsResponse& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

};

/** The delegate class for FRequest_InstanceHealthConfig */
DECLARE_DELEGATE_OneParam(FDelegate_InstanceHealthConfig, const FResponse_InstanceHealthConfig&);

/** @brief A helper metadata object for InstanceHealthConfig that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_InstanceHealthConfig
{
	/** The request type */
	typedef FRequest_InstanceHealthConfig Request;
	/** The response type */
	typedef FResponse_InstanceHealthConfig Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_InstanceHealthConfig Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Invite Session To Session
 * Invite an entire session to a target session
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:update-player:any`
 * 
 *  to invite any session regardless of membership status
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:update-player:any`, `session:update-player:self`
 * 
 *  to invite a session you are part of
 * 
 * Required Session Permissions: None
*/
struct RALLYHEREAPI_API FRequest_InviteSessionToSession : public FRequest
{
	FRequest_InviteSessionToSession();
	virtual ~FRequest_InviteSessionToSession() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString SessionId;
	FString InvitedSessionId;
	FRHAPI_SessionInviteRequest SessionInviteRequest;
};

/** The response type for FRequest_InviteSessionToSession */
struct RALLYHEREAPI_API FResponse_InviteSessionToSession : public FResponseAccessorTemplate<FRHAPI_SessionInviteResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_SessionInviteResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_InviteSessionToSession(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_InviteSessionToSession() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_SessionInviteResponse Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_SessionInviteResponse& OutContent) const { return TryGetContent<FRHAPI_SessionInviteResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_SessionInviteResponse>& OutContent) const { return TryGetContent<FRHAPI_SessionInviteResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_SessionInviteResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_SessionInviteResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_SessionInviteResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_SessionInviteResponse>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_SessionInviteResponse& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Session doesn't exist or Player is not a member of the session.  See error code for more info
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_InviteSessionToSession */
DECLARE_DELEGATE_OneParam(FDelegate_InviteSessionToSession, const FResponse_InviteSessionToSession&);

/** @brief A helper metadata object for InviteSessionToSession that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_InviteSessionToSession
{
	/** The request type */
	typedef FRequest_InviteSessionToSession Request;
	/** The response type */
	typedef FResponse_InviteSessionToSession Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_InviteSessionToSession Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Join Queue
 * Add session to a matchmaking queue
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:update:any`, `session:update:self`
 * 
 * 
 * 
 * Required Session Permissions: `SessionPermissions.session_admin`
*/
struct RALLYHEREAPI_API FRequest_JoinQueue : public FRequest
{
	FRequest_JoinQueue();
	virtual ~FRequest_JoinQueue() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString SessionId;
	FRHAPI_QueueJoinRequest QueueJoinRequest;
};

/** The response type for FRequest_JoinQueue */
struct RALLYHEREAPI_API FResponse_JoinQueue : public FResponseAccessorTemplate<FRHAPI_QueueJoinResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_QueueJoinResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_JoinQueue(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_JoinQueue() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_QueueJoinResponse Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_QueueJoinResponse& OutContent) const { return TryGetContent<FRHAPI_QueueJoinResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_QueueJoinResponse>& OutContent) const { return TryGetContent<FRHAPI_QueueJoinResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_QueueJoinResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_QueueJoinResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_QueueJoinResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_QueueJoinResponse>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_QueueJoinResponse& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_JoinQueue */
DECLARE_DELEGATE_OneParam(FDelegate_JoinQueue, const FResponse_JoinQueue&);

/** @brief A helper metadata object for JoinQueue that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_JoinQueue
{
	/** The request type */
	typedef FRequest_JoinQueue Request;
	/** The response type */
	typedef FResponse_JoinQueue Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_JoinQueue Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Join Session By Id Self
 * Join a session with currently authed player
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:update-player:any`
 * 
 * - For the player themselves : `session:update-player:self`
 * 
 * Required Session Permissions: None
*/
struct RALLYHEREAPI_API FRequest_JoinSessionByIdSelf : public FRequest
{
	FRequest_JoinSessionByIdSelf();
	virtual ~FRequest_JoinSessionByIdSelf() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString SessionId;
	FRHAPI_SelfSessionPlayerUpdateRequest SelfSessionPlayerUpdateRequest;
};

/** The response type for FRequest_JoinSessionByIdSelf */
struct RALLYHEREAPI_API FResponse_JoinSessionByIdSelf : public FResponseAccessorTemplate<FRHAPI_SessionPlayerUpdateResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_SessionPlayerUpdateResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_JoinSessionByIdSelf(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_JoinSessionByIdSelf() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_SessionPlayerUpdateResponse Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_SessionPlayerUpdateResponse& OutContent) const { return TryGetContent<FRHAPI_SessionPlayerUpdateResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_SessionPlayerUpdateResponse>& OutContent) const { return TryGetContent<FRHAPI_SessionPlayerUpdateResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_SessionPlayerUpdateResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_SessionPlayerUpdateResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_SessionPlayerUpdateResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_SessionPlayerUpdateResponse>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_SessionPlayerUpdateResponse& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Session doesn't exist or Player is not a member of the session.  See error code for more info
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_JoinSessionByIdSelf */
DECLARE_DELEGATE_OneParam(FDelegate_JoinSessionByIdSelf, const FResponse_JoinSessionByIdSelf&);

/** @brief A helper metadata object for JoinSessionByIdSelf that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_JoinSessionByIdSelf
{
	/** The request type */
	typedef FRequest_JoinSessionByIdSelf Request;
	/** The response type */
	typedef FResponse_JoinSessionByIdSelf Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_JoinSessionByIdSelf Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Join Session By Platform Session By Uuid
 * Join a platform session by platform ID and parent platform session id
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:update-player:any`
 * 
 * - For the player themselves : `session:update-player:self`
 * 
 * Required Session Permissions: None
*/
struct RALLYHEREAPI_API FRequest_JoinSessionByPlatformSessionByUuid : public FRequest
{
	FRequest_JoinSessionByPlatformSessionByUuid();
	virtual ~FRequest_JoinSessionByPlatformSessionByUuid() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString PlatformSessionIdBase64;
	FGuid PlayerUuid;
	ERHAPI_Platform Platform;
	FRHAPI_SelfSessionPlayerUpdateRequest SelfSessionPlayerUpdateRequest;
	TOptional<int32> PlayerId;
};

/** The response type for FRequest_JoinSessionByPlatformSessionByUuid */
struct RALLYHEREAPI_API FResponse_JoinSessionByPlatformSessionByUuid : public FResponseAccessorTemplate<FRHAPI_Session, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_Session, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_JoinSessionByPlatformSessionByUuid(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_JoinSessionByPlatformSessionByUuid() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_Session Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_Session& OutContent) const { return TryGetContent<FRHAPI_Session>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_Session>& OutContent) const { return TryGetContent<FRHAPI_Session>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_Session* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_Session>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_Session> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_Session>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_Session& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 403
	User is not authenticated, or does not have sufficient role access to perform request
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Platform Session or Platform Player doesn't exist.  See error code for more info
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 409
	Service was unable to fulfill the request at this time and should be retried after the Retry-After wait time
	*/
	bool TryGetContentFor409(FRHAPI_HzApiErrorModel& OutContent) const;
	/* Number of seconds after which to retry the request */
	TOptional<int32> GetHeader409_RetryAfter() const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_JoinSessionByPlatformSessionByUuid */
DECLARE_DELEGATE_OneParam(FDelegate_JoinSessionByPlatformSessionByUuid, const FResponse_JoinSessionByPlatformSessionByUuid&);

/** @brief A helper metadata object for JoinSessionByPlatformSessionByUuid that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_JoinSessionByPlatformSessionByUuid
{
	/** The request type */
	typedef FRequest_JoinSessionByPlatformSessionByUuid Request;
	/** The response type */
	typedef FResponse_JoinSessionByPlatformSessionByUuid Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_JoinSessionByPlatformSessionByUuid Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Join Session By Platform Session Id Self
 * Join a platform session by ID, and the parent session
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:update-player:any`
 * 
 * - For the player themselves : `session:update-player:self`
 * 
 * Required Session Permissions: None
*/
struct RALLYHEREAPI_API FRequest_JoinSessionByPlatformSessionIdSelf : public FRequest
{
	FRequest_JoinSessionByPlatformSessionIdSelf();
	virtual ~FRequest_JoinSessionByPlatformSessionIdSelf() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString PlatformSessionIdBase64;
	ERHAPI_Platform Platform;
	FRHAPI_SelfSessionPlayerUpdateRequest SelfSessionPlayerUpdateRequest;
};

/** The response type for FRequest_JoinSessionByPlatformSessionIdSelf */
struct RALLYHEREAPI_API FResponse_JoinSessionByPlatformSessionIdSelf : public FResponseAccessorTemplate<FRHAPI_Session, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_Session, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_JoinSessionByPlatformSessionIdSelf(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_JoinSessionByPlatformSessionIdSelf() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_Session Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_Session& OutContent) const { return TryGetContent<FRHAPI_Session>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_Session>& OutContent) const { return TryGetContent<FRHAPI_Session>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_Session* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_Session>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_Session> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_Session>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_Session& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 403
	User is not authenticated, or does not have sufficient role access to perform request
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Platform Session or Platform Player doesn't exist.  See error code for more info
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 409
	Service was unable to fulfill the request at this time and should be retried after the Retry-After wait time
	*/
	bool TryGetContentFor409(FRHAPI_HzApiErrorModel& OutContent) const;
	/* Number of seconds after which to retry the request */
	TOptional<int32> GetHeader409_RetryAfter() const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_JoinSessionByPlatformSessionIdSelf */
DECLARE_DELEGATE_OneParam(FDelegate_JoinSessionByPlatformSessionIdSelf, const FResponse_JoinSessionByPlatformSessionIdSelf&);

/** @brief A helper metadata object for JoinSessionByPlatformSessionIdSelf that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_JoinSessionByPlatformSessionIdSelf
{
	/** The request type */
	typedef FRequest_JoinSessionByPlatformSessionIdSelf Request;
	/** The response type */
	typedef FResponse_JoinSessionByPlatformSessionIdSelf Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_JoinSessionByPlatformSessionIdSelf Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Kick Player From Session By Id
 * Kick or Remove a player from a session, or cancel an invite for a player to the session
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:update-player:any`
 * 
 * - For the player themselves : `session:update-player:self`
 * 
 * Required Session Permissions: None for players operating on themselves.
 * `SessionPermissions.session_admin` for operating on other players in your session
 * 
 * **DEPRECATED** - Use the player endpoint instead
*/
struct RALLYHEREAPI_API FRequest_KickPlayerFromSessionById : public FRequest
{
	FRequest_KickPlayerFromSessionById();
	virtual ~FRequest_KickPlayerFromSessionById() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString SessionId;
	int32 PlayerId = 0;
};

/** The response type for FRequest_KickPlayerFromSessionById */
struct RALLYHEREAPI_API FResponse_KickPlayerFromSessionById : public FResponseAccessorTemplate< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_KickPlayerFromSessionById(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_KickPlayerFromSessionById() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT

#endif //ALLOW_LEGACY_RESPONSE_CONTENT


	// Individual Response Helpers	
	/* Response 204
	Successful Response
	*/

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Session doesn't exist or Player is not a member of the session.  See error code for more info
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_KickPlayerFromSessionById */
DECLARE_DELEGATE_OneParam(FDelegate_KickPlayerFromSessionById, const FResponse_KickPlayerFromSessionById&);

/** @brief A helper metadata object for KickPlayerFromSessionById that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_KickPlayerFromSessionById
{
	/** The request type */
	typedef FRequest_KickPlayerFromSessionById Request;
	/** The response type */
	typedef FResponse_KickPlayerFromSessionById Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_KickPlayerFromSessionById Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Kick Player From Session By Uuid
 * Kick or Remove a player from a session, or cancel an invite for a player to the session
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:update-player:any`
 * 
 * - For the player themselves : `session:update-player:self`
 * 
 * Required Session Permissions: None for users operating on themselves. 
 * `SessionPermissions.session_admin` for operating on other players in your session
 * **DEPRECATED** - Use player/{player_uuid} endpoint instead
*/
struct RALLYHEREAPI_API FRequest_KickPlayerFromSessionByUuid : public FRequest
{
	FRequest_KickPlayerFromSessionByUuid();
	virtual ~FRequest_KickPlayerFromSessionByUuid() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString SessionId;
	FGuid PlayerUuid;
};

/** The response type for FRequest_KickPlayerFromSessionByUuid */
struct RALLYHEREAPI_API FResponse_KickPlayerFromSessionByUuid : public FResponseAccessorTemplate< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_KickPlayerFromSessionByUuid(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_KickPlayerFromSessionByUuid() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT

	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 204
	Successful Response
	*/
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader204_ETag() const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Session doesn't exist or Player is not a member of the session.  See error code for more info
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_KickPlayerFromSessionByUuid */
DECLARE_DELEGATE_OneParam(FDelegate_KickPlayerFromSessionByUuid, const FResponse_KickPlayerFromSessionByUuid&);

/** @brief A helper metadata object for KickPlayerFromSessionByUuid that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_KickPlayerFromSessionByUuid
{
	/** The request type */
	typedef FRequest_KickPlayerFromSessionByUuid Request;
	/** The response type */
	typedef FResponse_KickPlayerFromSessionByUuid Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_KickPlayerFromSessionByUuid Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Kick Player From Session By Uuid V2
 * Kick or Remove a player from a session, or cancel an invite for a player to the session
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:update-player:any`
 * 
 * - For the player themselves : `session:update-player:self`
 * 
 * Required Session Permissions: None for users operating on themselves. 
 * `SessionPermissions.session_admin` for operating on other players in your session
*/
struct RALLYHEREAPI_API FRequest_KickPlayerFromSessionByUuidV2 : public FRequest
{
	FRequest_KickPlayerFromSessionByUuidV2();
	virtual ~FRequest_KickPlayerFromSessionByUuidV2() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString SessionId;
	FGuid PlayerUuid;
};

/** The response type for FRequest_KickPlayerFromSessionByUuidV2 */
struct RALLYHEREAPI_API FResponse_KickPlayerFromSessionByUuidV2 : public FResponseAccessorTemplate< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_KickPlayerFromSessionByUuidV2(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_KickPlayerFromSessionByUuidV2() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT

	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 204
	Successful Response
	*/
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader204_ETag() const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Session doesn't exist or Player is not a member of the session.  See error code for more info
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_KickPlayerFromSessionByUuidV2 */
DECLARE_DELEGATE_OneParam(FDelegate_KickPlayerFromSessionByUuidV2, const FResponse_KickPlayerFromSessionByUuidV2&);

/** @brief A helper metadata object for KickPlayerFromSessionByUuidV2 that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_KickPlayerFromSessionByUuidV2
{
	/** The request type */
	typedef FRequest_KickPlayerFromSessionByUuidV2 Request;
	/** The response type */
	typedef FResponse_KickPlayerFromSessionByUuidV2 Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_KickPlayerFromSessionByUuidV2 Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Kick Session From Session
 * Remove players from a session, `{kicked_session_id}`, if they are also in the session `{session_id}`
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:update-player:any`
 * 
 *  to kick any session regardless of membership status
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) : `session:update-player:as-leader`
 * 
 *  to invite a session you are part of
 * 
 * Required Session Permissions: `SessionPermissions.session_admin
*/
struct RALLYHEREAPI_API FRequest_KickSessionFromSession : public FRequest
{
	FRequest_KickSessionFromSession();
	virtual ~FRequest_KickSessionFromSession() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString SessionId;
	FString KickedSessionId;
};

/** The response type for FRequest_KickSessionFromSession */
struct RALLYHEREAPI_API FResponse_KickSessionFromSession : public FResponseAccessorTemplate< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_KickSessionFromSession(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_KickSessionFromSession() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT

#endif //ALLOW_LEGACY_RESPONSE_CONTENT


	// Individual Response Helpers	
	/* Response 204
	Successful Response
	*/

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Session doesn't exist or Player is not a member of the session.  See error code for more info
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_KickSessionFromSession */
DECLARE_DELEGATE_OneParam(FDelegate_KickSessionFromSession, const FResponse_KickSessionFromSession&);

/** @brief A helper metadata object for KickSessionFromSession that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_KickSessionFromSession
{
	/** The request type */
	typedef FRequest_KickSessionFromSession Request;
	/** The response type */
	typedef FResponse_KickSessionFromSession Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_KickSessionFromSession Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Leave Queue
 * Remove session from a matchmaking queue
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:update:any`, `session:update:self`
 * 
 * 
 *                
 * Required Session Permissions: `SessionPermissions.session_admin`
*/
struct RALLYHEREAPI_API FRequest_LeaveQueue : public FRequest
{
	FRequest_LeaveQueue();
	virtual ~FRequest_LeaveQueue() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString SessionId;
	TOptional<ERHAPI_DeleteTicketReason> Reason;
	TOptional<bool> RefreshTtl;
};

/** The response type for FRequest_LeaveQueue */
struct RALLYHEREAPI_API FResponse_LeaveQueue : public FResponseAccessorTemplate< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_LeaveQueue(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_LeaveQueue() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT

#endif //ALLOW_LEGACY_RESPONSE_CONTENT


	// Individual Response Helpers	
	/* Response 204
	Successful Response
	*/

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Session doesn't exist or Player is not a member of the session.  See error code for more info
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_LeaveQueue */
DECLARE_DELEGATE_OneParam(FDelegate_LeaveQueue, const FResponse_LeaveQueue&);

/** @brief A helper metadata object for LeaveQueue that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_LeaveQueue
{
	/** The request type */
	typedef FRequest_LeaveQueue Request;
	/** The response type */
	typedef FResponse_LeaveQueue Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_LeaveQueue Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Leave Session By Id Self
 * Leave a session with currently authed player
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) : `session:*`
 * 
 * - For the player themselves : `session:update:self`
 * 
 * Required Permissions: None
*/
struct RALLYHEREAPI_API FRequest_LeaveSessionByIdSelf : public FRequest
{
	FRequest_LeaveSessionByIdSelf();
	virtual ~FRequest_LeaveSessionByIdSelf() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString SessionId;
};

/** The response type for FRequest_LeaveSessionByIdSelf */
struct RALLYHEREAPI_API FResponse_LeaveSessionByIdSelf : public FResponseAccessorTemplate< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_LeaveSessionByIdSelf(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_LeaveSessionByIdSelf() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT

#endif //ALLOW_LEGACY_RESPONSE_CONTENT


	// Individual Response Helpers	
	/* Response 204
	Successful Response
	*/

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Session doesn't exist or Player is not a member of the session.  See error code for more info
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_LeaveSessionByIdSelf */
DECLARE_DELEGATE_OneParam(FDelegate_LeaveSessionByIdSelf, const FResponse_LeaveSessionByIdSelf&);

/** @brief A helper metadata object for LeaveSessionByIdSelf that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_LeaveSessionByIdSelf
{
	/** The request type */
	typedef FRequest_LeaveSessionByIdSelf Request;
	/** The response type */
	typedef FResponse_LeaveSessionByIdSelf Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_LeaveSessionByIdSelf Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Leave Session By Platform Session By Uuid
 * Leave a platform session by platform ID and parent platform session id
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:update-player:any`
 * 
 * - For the player themselves : `session:update-player:self`
 * 
 * Required Session Permissions: None
*/
struct RALLYHEREAPI_API FRequest_LeaveSessionByPlatformSessionByUuid : public FRequest
{
	FRequest_LeaveSessionByPlatformSessionByUuid();
	virtual ~FRequest_LeaveSessionByPlatformSessionByUuid() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString PlatformSessionIdBase64;
	ERHAPI_Platform Platform;
	FGuid PlayerUuid;
};

/** The response type for FRequest_LeaveSessionByPlatformSessionByUuid */
struct RALLYHEREAPI_API FResponse_LeaveSessionByPlatformSessionByUuid : public FResponseAccessorTemplate< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_LeaveSessionByPlatformSessionByUuid(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_LeaveSessionByPlatformSessionByUuid() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT

#endif //ALLOW_LEGACY_RESPONSE_CONTENT


	// Individual Response Helpers	
	/* Response 204
	Successful Response
	*/

	/* Response 403
	User is not authenticated, or does not have sufficient role access to perform request
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Platform Session or Platform Player doesn't exist.  See error code for more info
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 409
	Service was unable to fulfill the request at this time and should be retried after the Retry-After wait time
	*/
	bool TryGetContentFor409(FRHAPI_HzApiErrorModel& OutContent) const;
	/* Number of seconds after which to retry the request */
	TOptional<int32> GetHeader409_RetryAfter() const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_LeaveSessionByPlatformSessionByUuid */
DECLARE_DELEGATE_OneParam(FDelegate_LeaveSessionByPlatformSessionByUuid, const FResponse_LeaveSessionByPlatformSessionByUuid&);

/** @brief A helper metadata object for LeaveSessionByPlatformSessionByUuid that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_LeaveSessionByPlatformSessionByUuid
{
	/** The request type */
	typedef FRequest_LeaveSessionByPlatformSessionByUuid Request;
	/** The response type */
	typedef FResponse_LeaveSessionByPlatformSessionByUuid Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_LeaveSessionByPlatformSessionByUuid Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Leave Session By Platform Session Self
 * Leave a platform session by platform ID and parent platform session id
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:update-player:any`
 * 
 * - For the player themselves : `session:update-player:self`
 * 
 * Required Session Permissions: None
*/
struct RALLYHEREAPI_API FRequest_LeaveSessionByPlatformSessionSelf : public FRequest
{
	FRequest_LeaveSessionByPlatformSessionSelf();
	virtual ~FRequest_LeaveSessionByPlatformSessionSelf() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString PlatformSessionIdBase64;
	ERHAPI_Platform Platform;
};

/** The response type for FRequest_LeaveSessionByPlatformSessionSelf */
struct RALLYHEREAPI_API FResponse_LeaveSessionByPlatformSessionSelf : public FResponseAccessorTemplate< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_LeaveSessionByPlatformSessionSelf(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_LeaveSessionByPlatformSessionSelf() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT

#endif //ALLOW_LEGACY_RESPONSE_CONTENT


	// Individual Response Helpers	
	/* Response 204
	Successful Response
	*/

	/* Response 403
	User is not authenticated, or does not have sufficient role access to perform request
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Platform Session or Platform Player doesn't exist.  See error code for more info
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 409
	Service was unable to fulfill the request at this time and should be retried after the Retry-After wait time
	*/
	bool TryGetContentFor409(FRHAPI_HzApiErrorModel& OutContent) const;
	/* Number of seconds after which to retry the request */
	TOptional<int32> GetHeader409_RetryAfter() const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_LeaveSessionByPlatformSessionSelf */
DECLARE_DELEGATE_OneParam(FDelegate_LeaveSessionByPlatformSessionSelf, const FResponse_LeaveSessionByPlatformSessionSelf&);

/** @brief A helper metadata object for LeaveSessionByPlatformSessionSelf that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_LeaveSessionByPlatformSessionSelf
{
	/** The request type */
	typedef FRequest_LeaveSessionByPlatformSessionSelf Request;
	/** The response type */
	typedef FResponse_LeaveSessionByPlatformSessionSelf Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_LeaveSessionByPlatformSessionSelf Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Post Browser Info
 * Register session in the public browser
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:update:browser`
 * 
 * 
 * 
 * Required Session Permissions: `SessionPermissions.session_admin` if user does not have the `session:*` auth permission
*/
struct RALLYHEREAPI_API FRequest_PostBrowserInfo : public FRequest
{
	FRequest_PostBrowserInfo();
	virtual ~FRequest_PostBrowserInfo() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString SessionId;
	FRHAPI_BrowserInfo BrowserInfo;
	TOptional<bool> RefreshTtl;
};

/** The response type for FRequest_PostBrowserInfo */
struct RALLYHEREAPI_API FResponse_PostBrowserInfo : public FResponseAccessorTemplate<FRHAPI_BrowserInfo, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_BrowserInfo, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_PostBrowserInfo(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_PostBrowserInfo() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_BrowserInfo Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_BrowserInfo& OutContent) const { return TryGetContent<FRHAPI_BrowserInfo>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_BrowserInfo>& OutContent) const { return TryGetContent<FRHAPI_BrowserInfo>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_BrowserInfo* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_BrowserInfo>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_BrowserInfo> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_BrowserInfo>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_BrowserInfo& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_PostBrowserInfo */
DECLARE_DELEGATE_OneParam(FDelegate_PostBrowserInfo, const FResponse_PostBrowserInfo&);

/** @brief A helper metadata object for PostBrowserInfo that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_PostBrowserInfo
{
	/** The request type */
	typedef FRequest_PostBrowserInfo Request;
	/** The response type */
	typedef FResponse_PostBrowserInfo Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_PostBrowserInfo Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Update Backfill Request
 * Update a existing backfill's search fields and extensions
*/
struct RALLYHEREAPI_API FRequest_UpdateBackfillRequest : public FRequest
{
	FRequest_UpdateBackfillRequest();
	virtual ~FRequest_UpdateBackfillRequest() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString SessionId;
	FRHAPI_UpdateBackfillRequest UpdateBackfillRequest;
	TOptional<bool> RefreshTtl;
};

/** The response type for FRequest_UpdateBackfillRequest */
struct RALLYHEREAPI_API FResponse_UpdateBackfillRequest : public FResponseAccessorTemplate< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_UpdateBackfillRequest(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_UpdateBackfillRequest() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT

#endif //ALLOW_LEGACY_RESPONSE_CONTENT


	// Individual Response Helpers	
	/* Response 204
	Successful Response
	*/

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Backfill resource could not be found on the session, or in the open-match system
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_UpdateBackfillRequest */
DECLARE_DELEGATE_OneParam(FDelegate_UpdateBackfillRequest, const FResponse_UpdateBackfillRequest&);

/** @brief A helper metadata object for UpdateBackfillRequest that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_UpdateBackfillRequest
{
	/** The request type */
	typedef FRequest_UpdateBackfillRequest Request;
	/** The response type */
	typedef FResponse_UpdateBackfillRequest Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_UpdateBackfillRequest Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Update Browser Info
 * Update the browser info for the session
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:update:browser`
 * 
 * 
 * 
 * Required Session Permissions: `SessionPermissions.session_admin` if user does not have the `session:*` auth permission
*/
struct RALLYHEREAPI_API FRequest_UpdateBrowserInfo : public FRequest
{
	FRequest_UpdateBrowserInfo();
	virtual ~FRequest_UpdateBrowserInfo() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString SessionId;
	FRHAPI_BrowserInfo BrowserInfo;
};

/** The response type for FRequest_UpdateBrowserInfo */
struct RALLYHEREAPI_API FResponse_UpdateBrowserInfo : public FResponseAccessorTemplate<FRHAPI_BrowserInfo, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_BrowserInfo, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_UpdateBrowserInfo(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_UpdateBrowserInfo() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_BrowserInfo Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_BrowserInfo& OutContent) const { return TryGetContent<FRHAPI_BrowserInfo>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_BrowserInfo>& OutContent) const { return TryGetContent<FRHAPI_BrowserInfo>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_BrowserInfo* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_BrowserInfo>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_BrowserInfo> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_BrowserInfo>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_BrowserInfo& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_UpdateBrowserInfo */
DECLARE_DELEGATE_OneParam(FDelegate_UpdateBrowserInfo, const FResponse_UpdateBrowserInfo&);

/** @brief A helper metadata object for UpdateBrowserInfo that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_UpdateBrowserInfo
{
	/** The request type */
	typedef FRequest_UpdateBrowserInfo Request;
	/** The response type */
	typedef FResponse_UpdateBrowserInfo Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_UpdateBrowserInfo Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Update Instance Info
 * Update info about the instance. If the instance was a result of the instance allocation system, then it will have an allocation id.
 * Allocated instances must send their allocation id for updates to ensure they are still the proper allocation.
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:update:any`, `session:update:self`
 * 
 * 
 * 
 * Required Session Permissions: `SessionPermissions.session_host` if user does not have the `session:update:any` auth permission
*/
struct RALLYHEREAPI_API FRequest_UpdateInstanceInfo : public FRequest
{
	FRequest_UpdateInstanceInfo();
	virtual ~FRequest_UpdateInstanceInfo() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString SessionId;
	FRHAPI_InstanceInfoUpdate InstanceInfoUpdate;
};

/** The response type for FRequest_UpdateInstanceInfo */
struct RALLYHEREAPI_API FResponse_UpdateInstanceInfo : public FResponseAccessorTemplate<FRHAPI_InstanceInfo, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_InstanceInfo, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_UpdateInstanceInfo(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_UpdateInstanceInfo() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_InstanceInfo Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_InstanceInfo& OutContent) const { return TryGetContent<FRHAPI_InstanceInfo>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_InstanceInfo>& OutContent) const { return TryGetContent<FRHAPI_InstanceInfo>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_InstanceInfo* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_InstanceInfo>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_InstanceInfo> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_InstanceInfo>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_InstanceInfo& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_UpdateInstanceInfo */
DECLARE_DELEGATE_OneParam(FDelegate_UpdateInstanceInfo, const FResponse_UpdateInstanceInfo&);

/** @brief A helper metadata object for UpdateInstanceInfo that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_UpdateInstanceInfo
{
	/** The request type */
	typedef FRequest_UpdateInstanceInfo Request;
	/** The response type */
	typedef FResponse_UpdateInstanceInfo Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_UpdateInstanceInfo Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Update Session By Id
 * Update session info by session id
 * 
 * For all sessions:
 * 
 * * Required auth permissions are any of: `session:*`, `session:update:any`
 * 
 * * Required session permissions are None
 * 
 * For sessions you are actively in:
 * 
 * * Required auth permissions are any of: `session:*`, `session:update:any`, `session:update:self`
 * 
 * * Required session permissions are `SessionPermissions.session_admin`
*/
struct RALLYHEREAPI_API FRequest_UpdateSessionById : public FRequest
{
	FRequest_UpdateSessionById();
	virtual ~FRequest_UpdateSessionById() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString SessionId;
	FRHAPI_SessionUpdate SessionUpdate;
};

/** The response type for FRequest_UpdateSessionById */
struct RALLYHEREAPI_API FResponse_UpdateSessionById : public FResponseAccessorTemplate<FRHAPI_Session, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_Session, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_UpdateSessionById(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_UpdateSessionById() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_Session Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_Session& OutContent) const { return TryGetContent<FRHAPI_Session>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_Session>& OutContent) const { return TryGetContent<FRHAPI_Session>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_Session* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_Session>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_Session> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_Session>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_Session& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_UpdateSessionById */
DECLARE_DELEGATE_OneParam(FDelegate_UpdateSessionById, const FResponse_UpdateSessionById&);

/** @brief A helper metadata object for UpdateSessionById that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_UpdateSessionById
{
	/** The request type */
	typedef FRequest_UpdateSessionById Request;
	/** The response type */
	typedef FResponse_UpdateSessionById Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_UpdateSessionById Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Update Session Player By Id
 * Add or invite a player to the session, or change the status of a player already in the session
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:promote:any`, `session:promote:self`
 * 
 * 
 * 
 * Required Session Permissions: None if session is publicly joinable or the player has been invited.
 * `SessionPermissions.session_admin` for other operations
 * 
 * **DEPRECATED** - Use the player endpoint instead
*/
struct RALLYHEREAPI_API FRequest_UpdateSessionPlayerById : public FRequest
{
	FRequest_UpdateSessionPlayerById();
	virtual ~FRequest_UpdateSessionPlayerById() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString SessionId;
	int32 PlayerId = 0;
	FRHAPI_SessionPlayerUpdateRequest SessionPlayerUpdateRequest;
};

/** The response type for FRequest_UpdateSessionPlayerById */
struct RALLYHEREAPI_API FResponse_UpdateSessionPlayerById : public FResponseAccessorTemplate<FRHAPI_SessionPlayerUpdateResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_SessionPlayerUpdateResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_UpdateSessionPlayerById(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_UpdateSessionPlayerById() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_SessionPlayerUpdateResponse Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_SessionPlayerUpdateResponse& OutContent) const { return TryGetContent<FRHAPI_SessionPlayerUpdateResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_SessionPlayerUpdateResponse>& OutContent) const { return TryGetContent<FRHAPI_SessionPlayerUpdateResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_SessionPlayerUpdateResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_SessionPlayerUpdateResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_SessionPlayerUpdateResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_SessionPlayerUpdateResponse>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_SessionPlayerUpdateResponse& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Session doesn't exist or Player is not a member of the session.  See error code for more info
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_UpdateSessionPlayerById */
DECLARE_DELEGATE_OneParam(FDelegate_UpdateSessionPlayerById, const FResponse_UpdateSessionPlayerById&);

/** @brief A helper metadata object for UpdateSessionPlayerById that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_UpdateSessionPlayerById
{
	/** The request type */
	typedef FRequest_UpdateSessionPlayerById Request;
	/** The response type */
	typedef FResponse_UpdateSessionPlayerById Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_UpdateSessionPlayerById Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Update Session Player By Uuid
 * Add or invite a player to the session, or change the status of a player already in the session
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:promote:any`, `session:promote:self`
 * 
 * 
 * 
 * Required Session Permissions: None if session is publicly joinable or the player has been invited. 
 * `SessionPermissions.session_admin` for other operations
 * **DEPRECATED** - Use player/{player_uuid} endpoint instead
*/
struct RALLYHEREAPI_API FRequest_UpdateSessionPlayerByUuid : public FRequest
{
	FRequest_UpdateSessionPlayerByUuid();
	virtual ~FRequest_UpdateSessionPlayerByUuid() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString SessionId;
	FGuid PlayerUuid;
	FRHAPI_SessionPlayerUpdateRequest SessionPlayerUpdateRequest;
};

/** The response type for FRequest_UpdateSessionPlayerByUuid */
struct RALLYHEREAPI_API FResponse_UpdateSessionPlayerByUuid : public FResponseAccessorTemplate<FRHAPI_SessionPlayerUpdateResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_SessionPlayerUpdateResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_UpdateSessionPlayerByUuid(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_UpdateSessionPlayerByUuid() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_SessionPlayerUpdateResponse Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_SessionPlayerUpdateResponse& OutContent) const { return TryGetContent<FRHAPI_SessionPlayerUpdateResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_SessionPlayerUpdateResponse>& OutContent) const { return TryGetContent<FRHAPI_SessionPlayerUpdateResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_SessionPlayerUpdateResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_SessionPlayerUpdateResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_SessionPlayerUpdateResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_SessionPlayerUpdateResponse>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_SessionPlayerUpdateResponse& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Session doesn't exist or Player is not a member of the session.  See error code for more info
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_UpdateSessionPlayerByUuid */
DECLARE_DELEGATE_OneParam(FDelegate_UpdateSessionPlayerByUuid, const FResponse_UpdateSessionPlayerByUuid&);

/** @brief A helper metadata object for UpdateSessionPlayerByUuid that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_UpdateSessionPlayerByUuid
{
	/** The request type */
	typedef FRequest_UpdateSessionPlayerByUuid Request;
	/** The response type */
	typedef FResponse_UpdateSessionPlayerByUuid Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_UpdateSessionPlayerByUuid Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Update Session Player By Uuid V2
 * Add or invite a player to the session, or change the status of a player already in the session
 * 
 * Required Permissions:
 * 
 * - For any player (including themselves) any of: `session:*`, `session:promote:any`, `session:promote:self`
 * 
 * 
 * 
 * Required Session Permissions: None if session is publicly joinable or the player has been invited. 
 * `SessionPermissions.session_admin` for other operations
*/
struct RALLYHEREAPI_API FRequest_UpdateSessionPlayerByUuidV2 : public FRequest
{
	FRequest_UpdateSessionPlayerByUuidV2();
	virtual ~FRequest_UpdateSessionPlayerByUuidV2() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString SessionId;
	FGuid PlayerUuid;
	FRHAPI_SessionPlayerUpdateRequest SessionPlayerUpdateRequest;
};

/** The response type for FRequest_UpdateSessionPlayerByUuidV2 */
struct RALLYHEREAPI_API FResponse_UpdateSessionPlayerByUuidV2 : public FResponseAccessorTemplate<FRHAPI_SessionPlayerUpdateResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_SessionPlayerUpdateResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_UpdateSessionPlayerByUuidV2(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_UpdateSessionPlayerByUuidV2() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_SessionPlayerUpdateResponse Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_SessionPlayerUpdateResponse& OutContent) const { return TryGetContent<FRHAPI_SessionPlayerUpdateResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_SessionPlayerUpdateResponse>& OutContent) const { return TryGetContent<FRHAPI_SessionPlayerUpdateResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_SessionPlayerUpdateResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_SessionPlayerUpdateResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_SessionPlayerUpdateResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_SessionPlayerUpdateResponse>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_SessionPlayerUpdateResponse& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Session doesn't exist or Player is not a member of the session.  See error code for more info
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_UpdateSessionPlayerByUuidV2 */
DECLARE_DELEGATE_OneParam(FDelegate_UpdateSessionPlayerByUuidV2, const FResponse_UpdateSessionPlayerByUuidV2&);

/** @brief A helper metadata object for UpdateSessionPlayerByUuidV2 that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_UpdateSessionPlayerByUuidV2
{
	/** The request type */
	typedef FRequest_UpdateSessionPlayerByUuidV2 Request;
	/** The response type */
	typedef FResponse_UpdateSessionPlayerByUuidV2 Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_UpdateSessionPlayerByUuidV2 Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Update Team By Id
 * Update specific team info by session and team id
 * 
 * For all sessions:
 * 
 * * Required auth permissions are any of: `session:*`, `session:update:any`
 * 
 * * Required session permissions are None
 * 
 * For sessions you are actively in:
 * 
 * * Required auth permissions are any of: `session:*`, `session:update:any`, `session:update:self`
 * 
 * * Required session permissions are `SessionPermissions.session_admin`
*/
struct RALLYHEREAPI_API FRequest_UpdateTeamById : public FRequest
{
	FRequest_UpdateTeamById();
	virtual ~FRequest_UpdateTeamById() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	int32 TeamId = 0;
	FString SessionId;
	FRHAPI_TeamUpdate TeamUpdate;
	TOptional<bool> RefreshTtl;
};

/** The response type for FRequest_UpdateTeamById */
struct RALLYHEREAPI_API FResponse_UpdateTeamById : public FResponseAccessorTemplate<FRHAPI_SessionTeam, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_SessionTeam, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_UpdateTeamById(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_UpdateTeamById() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_SessionTeam Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_SessionTeam& OutContent) const { return TryGetContent<FRHAPI_SessionTeam>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_SessionTeam>& OutContent) const { return TryGetContent<FRHAPI_SessionTeam>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_SessionTeam* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_SessionTeam>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_SessionTeam> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_SessionTeam>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_SessionTeam& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_UpdateTeamById */
DECLARE_DELEGATE_OneParam(FDelegate_UpdateTeamById, const FResponse_UpdateTeamById&);

/** @brief A helper metadata object for UpdateTeamById that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_UpdateTeamById
{
	/** The request type */
	typedef FRequest_UpdateTeamById Request;
	/** The response type */
	typedef FResponse_UpdateTeamById Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_UpdateTeamById Delegate;
	/** The API object that supports this API call */
	typedef FSessionsAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};


/** The API class itself, which will handle calls to */
class RALLYHEREAPI_API FSessionsAPI : public FAPI
{
public:
	FSessionsAPI();
	virtual ~FSessionsAPI();

	FHttpRequestPtr AcknowledgeBackfillRequest(const FRequest_AcknowledgeBackfillRequest& Request, const FDelegate_AcknowledgeBackfillRequest& Delegate = FDelegate_AcknowledgeBackfillRequest(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnAcknowledgeBackfillRequestResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_AcknowledgeBackfillRequest Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr AddPlatformSessionToRallyHereSession(const FRequest_AddPlatformSessionToRallyHereSession& Request, const FDelegate_AddPlatformSessionToRallyHereSession& Delegate = FDelegate_AddPlatformSessionToRallyHereSession(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnAddPlatformSessionToRallyHereSessionResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_AddPlatformSessionToRallyHereSession Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr BackfillConfig(const FRequest_BackfillConfig& Request, const FDelegate_BackfillConfig& Delegate = FDelegate_BackfillConfig(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnBackfillConfigResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_BackfillConfig Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr CreateInstanceRequest(const FRequest_CreateInstanceRequest& Request, const FDelegate_CreateInstanceRequest& Delegate = FDelegate_CreateInstanceRequest(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnCreateInstanceRequestResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_CreateInstanceRequest Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr CreateMatchmadeSession(const FRequest_CreateMatchmadeSession& Request, const FDelegate_CreateMatchmadeSession& Delegate = FDelegate_CreateMatchmadeSession(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnCreateMatchmadeSessionResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_CreateMatchmadeSession Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr CreateOrJoinSession(const FRequest_CreateOrJoinSession& Request, const FDelegate_CreateOrJoinSession& Delegate = FDelegate_CreateOrJoinSession(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnCreateOrJoinSessionResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_CreateOrJoinSession Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr CreateSessionAudit(const FRequest_CreateSessionAudit& Request, const FDelegate_CreateSessionAudit& Delegate = FDelegate_CreateSessionAudit(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnCreateSessionAuditResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_CreateSessionAudit Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr DeleteBackfillRequest(const FRequest_DeleteBackfillRequest& Request, const FDelegate_DeleteBackfillRequest& Delegate = FDelegate_DeleteBackfillRequest(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnDeleteBackfillRequestResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_DeleteBackfillRequest Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr DeleteBrowserInfo(const FRequest_DeleteBrowserInfo& Request, const FDelegate_DeleteBrowserInfo& Delegate = FDelegate_DeleteBrowserInfo(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnDeleteBrowserInfoResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_DeleteBrowserInfo Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr DeletePlatformSessionFromRallyHereSession(const FRequest_DeletePlatformSessionFromRallyHereSession& Request, const FDelegate_DeletePlatformSessionFromRallyHereSession& Delegate = FDelegate_DeletePlatformSessionFromRallyHereSession(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnDeletePlatformSessionFromRallyHereSessionResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_DeletePlatformSessionFromRallyHereSession Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr EndInstance(const FRequest_EndInstance& Request, const FDelegate_EndInstance& Delegate = FDelegate_EndInstance(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnEndInstanceResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_EndInstance Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetAllMapGameInfo(const FRequest_GetAllMapGameInfo& Request, const FDelegate_GetAllMapGameInfo& Delegate = FDelegate_GetAllMapGameInfo(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetAllMapGameInfoResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAllMapGameInfo Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetAllQueueInfo(const FRequest_GetAllQueueInfo& Request, const FDelegate_GetAllQueueInfo& Delegate = FDelegate_GetAllQueueInfo(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetAllQueueInfoResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAllQueueInfo Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetAllQueueInfoV2(const FRequest_GetAllQueueInfoV2& Request, const FDelegate_GetAllQueueInfoV2& Delegate = FDelegate_GetAllQueueInfoV2(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetAllQueueInfoV2Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAllQueueInfoV2 Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetAllRegions(const FRequest_GetAllRegions& Request, const FDelegate_GetAllRegions& Delegate = FDelegate_GetAllRegions(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetAllRegionsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAllRegions Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetAllSessionTemplates(const FRequest_GetAllSessionTemplates& Request, const FDelegate_GetAllSessionTemplates& Delegate = FDelegate_GetAllSessionTemplates(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetAllSessionTemplatesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAllSessionTemplates Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetBrowserSessionsByType(const FRequest_GetBrowserSessionsByType& Request, const FDelegate_GetBrowserSessionsByType& Delegate = FDelegate_GetBrowserSessionsByType(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetBrowserSessionsByTypeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetBrowserSessionsByType Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetConnectionInfoSelf(const FRequest_GetConnectionInfoSelf& Request, const FDelegate_GetConnectionInfoSelf& Delegate = FDelegate_GetConnectionInfoSelf(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetConnectionInfoSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetConnectionInfoSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetInstanceRequestTemplate(const FRequest_GetInstanceRequestTemplate& Request, const FDelegate_GetInstanceRequestTemplate& Delegate = FDelegate_GetInstanceRequestTemplate(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetInstanceRequestTemplateResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetInstanceRequestTemplate Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetMatchMakingProfile(const FRequest_GetMatchMakingProfile& Request, const FDelegate_GetMatchMakingProfile& Delegate = FDelegate_GetMatchMakingProfile(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetMatchMakingProfileResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetMatchMakingProfile Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetMatchMakingProfileV2(const FRequest_GetMatchMakingProfileV2& Request, const FDelegate_GetMatchMakingProfileV2& Delegate = FDelegate_GetMatchMakingProfileV2(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetMatchMakingProfileV2Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetMatchMakingProfileV2 Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetMatchMakingTemplates(const FRequest_GetMatchMakingTemplates& Request, const FDelegate_GetMatchMakingTemplates& Delegate = FDelegate_GetMatchMakingTemplates(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetMatchMakingTemplatesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetMatchMakingTemplates Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetMatchMakingTemplatesV2(const FRequest_GetMatchMakingTemplatesV2& Request, const FDelegate_GetMatchMakingTemplatesV2& Delegate = FDelegate_GetMatchMakingTemplatesV2(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetMatchMakingTemplatesV2Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetMatchMakingTemplatesV2 Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetPlatformSessionInfo(const FRequest_GetPlatformSessionInfo& Request, const FDelegate_GetPlatformSessionInfo& Delegate = FDelegate_GetPlatformSessionInfo(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetPlatformSessionInfoResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlatformSessionInfo Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetPlayerSessions(const FRequest_GetPlayerSessions& Request, const FDelegate_GetPlayerSessions& Delegate = FDelegate_GetPlayerSessions(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetPlayerSessionsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlayerSessions Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetPlayerSessionsByUuid(const FRequest_GetPlayerSessionsByUuid& Request, const FDelegate_GetPlayerSessionsByUuid& Delegate = FDelegate_GetPlayerSessionsByUuid(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetPlayerSessionsByUuidResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlayerSessionsByUuid Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetPlayerSessionsByUuidV2(const FRequest_GetPlayerSessionsByUuidV2& Request, const FDelegate_GetPlayerSessionsByUuidV2& Delegate = FDelegate_GetPlayerSessionsByUuidV2(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetPlayerSessionsByUuidV2Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlayerSessionsByUuidV2 Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetPlayerSessionsSelf(const FRequest_GetPlayerSessionsSelf& Request, const FDelegate_GetPlayerSessionsSelf& Delegate = FDelegate_GetPlayerSessionsSelf(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetPlayerSessionsSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlayerSessionsSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetSessionAudit(const FRequest_GetSessionAudit& Request, const FDelegate_GetSessionAudit& Delegate = FDelegate_GetSessionAudit(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetSessionAuditResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetSessionAudit Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetSessionByAllocationId(const FRequest_GetSessionByAllocationId& Request, const FDelegate_GetSessionByAllocationId& Delegate = FDelegate_GetSessionByAllocationId(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetSessionByAllocationIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetSessionByAllocationId Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetSessionById(const FRequest_GetSessionById& Request, const FDelegate_GetSessionById& Delegate = FDelegate_GetSessionById(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetSessionByIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetSessionById Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetSessionTemplateByType(const FRequest_GetSessionTemplateByType& Request, const FDelegate_GetSessionTemplateByType& Delegate = FDelegate_GetSessionTemplateByType(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetSessionTemplateByTypeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetSessionTemplateByType Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetVoipActionToken(const FRequest_GetVoipActionToken& Request, const FDelegate_GetVoipActionToken& Delegate = FDelegate_GetVoipActionToken(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetVoipActionTokenResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetVoipActionToken Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetVoipActionTokenMe(const FRequest_GetVoipActionTokenMe& Request, const FDelegate_GetVoipActionTokenMe& Delegate = FDelegate_GetVoipActionTokenMe(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetVoipActionTokenMeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetVoipActionTokenMe Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetVoipLoginToken(const FRequest_GetVoipLoginToken& Request, const FDelegate_GetVoipLoginToken& Delegate = FDelegate_GetVoipLoginToken(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetVoipLoginTokenResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetVoipLoginToken Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr InstanceHealthCheck(const FRequest_InstanceHealthCheck& Request, const FDelegate_InstanceHealthCheck& Delegate = FDelegate_InstanceHealthCheck(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnInstanceHealthCheckResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_InstanceHealthCheck Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr InstanceHealthConfig(const FRequest_InstanceHealthConfig& Request, const FDelegate_InstanceHealthConfig& Delegate = FDelegate_InstanceHealthConfig(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnInstanceHealthConfigResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_InstanceHealthConfig Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr InviteSessionToSession(const FRequest_InviteSessionToSession& Request, const FDelegate_InviteSessionToSession& Delegate = FDelegate_InviteSessionToSession(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnInviteSessionToSessionResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_InviteSessionToSession Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr JoinQueue(const FRequest_JoinQueue& Request, const FDelegate_JoinQueue& Delegate = FDelegate_JoinQueue(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnJoinQueueResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_JoinQueue Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr JoinSessionByIdSelf(const FRequest_JoinSessionByIdSelf& Request, const FDelegate_JoinSessionByIdSelf& Delegate = FDelegate_JoinSessionByIdSelf(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnJoinSessionByIdSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_JoinSessionByIdSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr JoinSessionByPlatformSessionByUuid(const FRequest_JoinSessionByPlatformSessionByUuid& Request, const FDelegate_JoinSessionByPlatformSessionByUuid& Delegate = FDelegate_JoinSessionByPlatformSessionByUuid(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnJoinSessionByPlatformSessionByUuidResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_JoinSessionByPlatformSessionByUuid Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr JoinSessionByPlatformSessionIdSelf(const FRequest_JoinSessionByPlatformSessionIdSelf& Request, const FDelegate_JoinSessionByPlatformSessionIdSelf& Delegate = FDelegate_JoinSessionByPlatformSessionIdSelf(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnJoinSessionByPlatformSessionIdSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_JoinSessionByPlatformSessionIdSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr KickPlayerFromSessionById(const FRequest_KickPlayerFromSessionById& Request, const FDelegate_KickPlayerFromSessionById& Delegate = FDelegate_KickPlayerFromSessionById(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnKickPlayerFromSessionByIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_KickPlayerFromSessionById Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr KickPlayerFromSessionByUuid(const FRequest_KickPlayerFromSessionByUuid& Request, const FDelegate_KickPlayerFromSessionByUuid& Delegate = FDelegate_KickPlayerFromSessionByUuid(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnKickPlayerFromSessionByUuidResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_KickPlayerFromSessionByUuid Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr KickPlayerFromSessionByUuidV2(const FRequest_KickPlayerFromSessionByUuidV2& Request, const FDelegate_KickPlayerFromSessionByUuidV2& Delegate = FDelegate_KickPlayerFromSessionByUuidV2(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnKickPlayerFromSessionByUuidV2Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_KickPlayerFromSessionByUuidV2 Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr KickSessionFromSession(const FRequest_KickSessionFromSession& Request, const FDelegate_KickSessionFromSession& Delegate = FDelegate_KickSessionFromSession(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnKickSessionFromSessionResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_KickSessionFromSession Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr LeaveQueue(const FRequest_LeaveQueue& Request, const FDelegate_LeaveQueue& Delegate = FDelegate_LeaveQueue(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnLeaveQueueResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_LeaveQueue Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr LeaveSessionByIdSelf(const FRequest_LeaveSessionByIdSelf& Request, const FDelegate_LeaveSessionByIdSelf& Delegate = FDelegate_LeaveSessionByIdSelf(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnLeaveSessionByIdSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_LeaveSessionByIdSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr LeaveSessionByPlatformSessionByUuid(const FRequest_LeaveSessionByPlatformSessionByUuid& Request, const FDelegate_LeaveSessionByPlatformSessionByUuid& Delegate = FDelegate_LeaveSessionByPlatformSessionByUuid(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnLeaveSessionByPlatformSessionByUuidResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_LeaveSessionByPlatformSessionByUuid Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr LeaveSessionByPlatformSessionSelf(const FRequest_LeaveSessionByPlatformSessionSelf& Request, const FDelegate_LeaveSessionByPlatformSessionSelf& Delegate = FDelegate_LeaveSessionByPlatformSessionSelf(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnLeaveSessionByPlatformSessionSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_LeaveSessionByPlatformSessionSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr PostBrowserInfo(const FRequest_PostBrowserInfo& Request, const FDelegate_PostBrowserInfo& Delegate = FDelegate_PostBrowserInfo(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnPostBrowserInfoResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_PostBrowserInfo Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr UpdateBackfillRequest(const FRequest_UpdateBackfillRequest& Request, const FDelegate_UpdateBackfillRequest& Delegate = FDelegate_UpdateBackfillRequest(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnUpdateBackfillRequestResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdateBackfillRequest Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr UpdateBrowserInfo(const FRequest_UpdateBrowserInfo& Request, const FDelegate_UpdateBrowserInfo& Delegate = FDelegate_UpdateBrowserInfo(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnUpdateBrowserInfoResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdateBrowserInfo Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr UpdateInstanceInfo(const FRequest_UpdateInstanceInfo& Request, const FDelegate_UpdateInstanceInfo& Delegate = FDelegate_UpdateInstanceInfo(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnUpdateInstanceInfoResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdateInstanceInfo Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr UpdateSessionById(const FRequest_UpdateSessionById& Request, const FDelegate_UpdateSessionById& Delegate = FDelegate_UpdateSessionById(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnUpdateSessionByIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdateSessionById Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr UpdateSessionPlayerById(const FRequest_UpdateSessionPlayerById& Request, const FDelegate_UpdateSessionPlayerById& Delegate = FDelegate_UpdateSessionPlayerById(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnUpdateSessionPlayerByIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdateSessionPlayerById Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr UpdateSessionPlayerByUuid(const FRequest_UpdateSessionPlayerByUuid& Request, const FDelegate_UpdateSessionPlayerByUuid& Delegate = FDelegate_UpdateSessionPlayerByUuid(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnUpdateSessionPlayerByUuidResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdateSessionPlayerByUuid Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr UpdateSessionPlayerByUuidV2(const FRequest_UpdateSessionPlayerByUuidV2& Request, const FDelegate_UpdateSessionPlayerByUuidV2& Delegate = FDelegate_UpdateSessionPlayerByUuidV2(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnUpdateSessionPlayerByUuidV2Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdateSessionPlayerByUuidV2 Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr UpdateTeamById(const FRequest_UpdateTeamById& Request, const FDelegate_UpdateTeamById& Delegate = FDelegate_UpdateTeamById(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnUpdateTeamByIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdateTeamById Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};



}
