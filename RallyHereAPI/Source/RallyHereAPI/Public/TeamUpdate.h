// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "TeamUpdate.generated.h"

/** @defgroup RHAPI_TeamUpdate RallyHere API Model TeamUpdate
 *  @{
 */

/**
 * @brief An update to a specific team&#39;s number of max players
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_TeamUpdate : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	/** @brief Maximum number of players for this team */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 MaxSize_Optional{ 0 };
	/** @brief true if MaxSize_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool MaxSize_IsSet{ false };
	/** @brief Gets the value of MaxSize_Optional, regardless of it having been set */
	FORCEINLINE int32& GetMaxSize() { return MaxSize_Optional; }
	/** @brief Gets the value of MaxSize_Optional, regardless of it having been set */
	FORCEINLINE const int32& GetMaxSize() const { return MaxSize_Optional; }
	/** @brief Gets the value of MaxSize_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const int32& GetMaxSize(const int32& DefaultValue) const { if (MaxSize_IsSet) return MaxSize_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of MaxSize_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetMaxSize(int32& OutValue) const { if (MaxSize_IsSet) OutValue = MaxSize_Optional; return MaxSize_IsSet; }
	/** @brief Returns a pointer to MaxSize_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE int32* GetMaxSizeOrNull() { if (MaxSize_IsSet) return (&MaxSize_Optional); return nullptr; }
	/** @brief Returns a pointer to MaxSize_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const int32* GetMaxSizeOrNull() const { if (MaxSize_IsSet) return (&MaxSize_Optional); return nullptr; }
	/** @brief Sets the value of MaxSize_Optional and also sets MaxSize_IsSet to true */
	FORCEINLINE void SetMaxSize(const int32& NewValue) { MaxSize_Optional = NewValue; MaxSize_IsSet = true;  }
	/** @brief Sets the value of MaxSize_Optional and also sets MaxSize_IsSet to true using move semantics */
	FORCEINLINE void SetMaxSize(int32&& NewValue) { MaxSize_Optional = NewValue; MaxSize_IsSet = true;  }
	/** @brief Clears the value of MaxSize_Optional and sets MaxSize_IsSet to false */
	void ClearMaxSize() { MaxSize_Optional = 0; MaxSize_IsSet = false;  }
	/** @brief Returns the default value of MaxSize */
	FORCEINLINE int32 GetDefaultValue_MaxSize() { return 0; }

	/** @brief Custom data about this team */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TMap<FString, FString> CustomData_Optional{  };
	/** @brief true if CustomData_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool CustomData_IsSet{ false };
	/** @brief Gets the value of CustomData_Optional, regardless of it having been set */
	FORCEINLINE TMap<FString, FString>& GetCustomData() { return CustomData_Optional; }
	/** @brief Gets the value of CustomData_Optional, regardless of it having been set */
	FORCEINLINE const TMap<FString, FString>& GetCustomData() const { return CustomData_Optional; }
	/** @brief Gets the value of CustomData_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const TMap<FString, FString>& GetCustomData(const TMap<FString, FString>& DefaultValue) const { if (CustomData_IsSet) return CustomData_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of CustomData_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetCustomData(TMap<FString, FString>& OutValue) const { if (CustomData_IsSet) OutValue = CustomData_Optional; return CustomData_IsSet; }
	/** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE TMap<FString, FString>* GetCustomDataOrNull() { if (CustomData_IsSet) return (&CustomData_Optional); return nullptr; }
	/** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const TMap<FString, FString>* GetCustomDataOrNull() const { if (CustomData_IsSet) return (&CustomData_Optional); return nullptr; }
	/** @brief Sets the value of CustomData_Optional and also sets CustomData_IsSet to true */
	FORCEINLINE void SetCustomData(const TMap<FString, FString>& NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true;  }
	/** @brief Sets the value of CustomData_Optional and also sets CustomData_IsSet to true using move semantics */
	FORCEINLINE void SetCustomData(TMap<FString, FString>&& NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true;  }
	/** @brief Clears the value of CustomData_Optional and sets CustomData_IsSet to false */
	void ClearCustomData() { CustomData_IsSet = false;  }
};

/** @} */
