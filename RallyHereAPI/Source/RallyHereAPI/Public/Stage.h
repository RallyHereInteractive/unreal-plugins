// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "StageEntityType.h"
#include "Stage.generated.h"

/** @defgroup RHAPI_Stage RallyHere API Model Stage
 *  @{
 */

/**
 * @brief 
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_Stage : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	/** @brief  */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TMap<FString, FRHAPI_JsonValue> Blob_Optional{  };
	/** @brief true if Blob_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Blob_IsSet{ false };
	/** @brief Gets the value of Blob_Optional, regardless of it having been set */
	FORCEINLINE TMap<FString, FRHAPI_JsonValue>& GetBlob() { return Blob_Optional; }
	/** @brief Gets the value of Blob_Optional, regardless of it having been set */
	FORCEINLINE const TMap<FString, FRHAPI_JsonValue>& GetBlob() const { return Blob_Optional; }
	/** @brief Gets the value of Blob_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const TMap<FString, FRHAPI_JsonValue>& GetBlob(const TMap<FString, FRHAPI_JsonValue>& DefaultValue) const { if (Blob_IsSet) return Blob_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Blob_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetBlob(TMap<FString, FRHAPI_JsonValue>& OutValue) const { if (Blob_IsSet) OutValue = Blob_Optional; return Blob_IsSet; }
	/** @brief Returns a pointer to Blob_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE TMap<FString, FRHAPI_JsonValue>* GetBlobOrNull() { if (Blob_IsSet) return (&Blob_Optional); return nullptr; }
	/** @brief Returns a pointer to Blob_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const TMap<FString, FRHAPI_JsonValue>* GetBlobOrNull() const { if (Blob_IsSet) return (&Blob_Optional); return nullptr; }
	/** @brief Sets the value of Blob_Optional and also sets Blob_IsSet to true */
	FORCEINLINE void SetBlob(const TMap<FString, FRHAPI_JsonValue>& NewValue) { Blob_Optional = NewValue; Blob_IsSet = true;  }
	/** @brief Sets the value of Blob_Optional and also sets Blob_IsSet to true using move semantics */
	FORCEINLINE void SetBlob(TMap<FString, FRHAPI_JsonValue>&& NewValue) { Blob_Optional = NewValue; Blob_IsSet = true;  }
	/** @brief Clears the value of Blob_Optional and sets Blob_IsSet to false */
	void ClearBlob() { Blob_IsSet = false;  }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString GameVersion_Optional{  };
	/** @brief true if GameVersion_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool GameVersion_IsSet{ false };
	/** @brief true if GameVersion_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool GameVersion_IsNull{ false };
	/** @brief Gets the value of GameVersion_Optional, regardless of it having been set */
	FORCEINLINE FString& GetGameVersion() { return GameVersion_Optional; }
	/** @brief Gets the value of GameVersion_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetGameVersion() const { return GameVersion_Optional; }
	/** @brief Gets the value of GameVersion_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetGameVersion(const FString& DefaultValue) const { if (GameVersion_IsSet) return GameVersion_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of GameVersion_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetGameVersion(FString& OutValue) const { if (GameVersion_IsSet && !GameVersion_IsNull) OutValue = GameVersion_Optional; return GameVersion_IsSet; }
	/** @brief Returns a pointer to GameVersion_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetGameVersionOrNull() { if (GameVersion_IsSet) return (GameVersion_IsNull ? nullptr : &GameVersion_Optional); return nullptr; }
	/** @brief Returns a pointer to GameVersion_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetGameVersionOrNull() const { if (GameVersion_IsSet) return (GameVersion_IsNull ? nullptr : &GameVersion_Optional); return nullptr; }
	/** @brief Sets the value of GameVersion_Optional and also sets GameVersion_IsSet to true */
	FORCEINLINE void SetGameVersion(const FString& NewValue) { GameVersion_Optional = NewValue; GameVersion_IsSet = true; GameVersion_IsNull = false; }
	/** @brief Sets the value of GameVersion_Optional and also sets GameVersion_IsSet to true using move semantics */
	FORCEINLINE void SetGameVersion(FString&& NewValue) { GameVersion_Optional = NewValue; GameVersion_IsSet = true; GameVersion_IsNull = false; }
	/** @brief Clears the value of GameVersion_Optional and sets GameVersion_IsSet to false */
	void ClearGameVersion() { GameVersion_IsSet = false; GameVersion_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetGameVersionToNull() { GameVersion_IsSet = true; GameVersion_IsNull = true; }
	/** @brief Checks whether GameVersion_Optional is set to null */
	FORCEINLINE bool IsGameVersionNull() const { return GameVersion_IsSet && GameVersion_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString V_Optional{  };
	/** @brief true if V_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool V_IsSet{ false };
	/** @brief true if V_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool V_IsNull{ false };
	/** @brief Gets the value of V_Optional, regardless of it having been set */
	FORCEINLINE FString& GetV() { return V_Optional; }
	/** @brief Gets the value of V_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetV() const { return V_Optional; }
	/** @brief Gets the value of V_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetV(const FString& DefaultValue) const { if (V_IsSet) return V_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of V_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetV(FString& OutValue) const { if (V_IsSet && !V_IsNull) OutValue = V_Optional; return V_IsSet; }
	/** @brief Returns a pointer to V_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetVOrNull() { if (V_IsSet) return (V_IsNull ? nullptr : &V_Optional); return nullptr; }
	/** @brief Returns a pointer to V_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetVOrNull() const { if (V_IsSet) return (V_IsNull ? nullptr : &V_Optional); return nullptr; }
	/** @brief Sets the value of V_Optional and also sets V_IsSet to true */
	FORCEINLINE void SetV(const FString& NewValue) { V_Optional = NewValue; V_IsSet = true; V_IsNull = false; }
	/** @brief Sets the value of V_Optional and also sets V_IsSet to true using move semantics */
	FORCEINLINE void SetV(FString&& NewValue) { V_Optional = NewValue; V_IsSet = true; V_IsNull = false; }
	/** @brief Clears the value of V_Optional and sets V_IsSet to false */
	void ClearV() { V_IsSet = false; V_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetVToNull() { V_IsSet = true; V_IsNull = true; }
	/** @brief Checks whether V_Optional is set to null */
	FORCEINLINE bool IsVNull() const { return V_IsSet && V_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString Type1_Optional{  };
	/** @brief true if Type1_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Type1_IsSet{ false };
	/** @brief true if Type1_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Type1_IsNull{ false };
	/** @brief Gets the value of Type1_Optional, regardless of it having been set */
	FORCEINLINE FString& GetType1() { return Type1_Optional; }
	/** @brief Gets the value of Type1_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetType1() const { return Type1_Optional; }
	/** @brief Gets the value of Type1_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetType1(const FString& DefaultValue) const { if (Type1_IsSet) return Type1_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Type1_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetType1(FString& OutValue) const { if (Type1_IsSet && !Type1_IsNull) OutValue = Type1_Optional; return Type1_IsSet; }
	/** @brief Returns a pointer to Type1_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetType1OrNull() { if (Type1_IsSet) return (Type1_IsNull ? nullptr : &Type1_Optional); return nullptr; }
	/** @brief Returns a pointer to Type1_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetType1OrNull() const { if (Type1_IsSet) return (Type1_IsNull ? nullptr : &Type1_Optional); return nullptr; }
	/** @brief Sets the value of Type1_Optional and also sets Type1_IsSet to true */
	FORCEINLINE void SetType1(const FString& NewValue) { Type1_Optional = NewValue; Type1_IsSet = true; Type1_IsNull = false; }
	/** @brief Sets the value of Type1_Optional and also sets Type1_IsSet to true using move semantics */
	FORCEINLINE void SetType1(FString&& NewValue) { Type1_Optional = NewValue; Type1_IsSet = true; Type1_IsNull = false; }
	/** @brief Clears the value of Type1_Optional and sets Type1_IsSet to false */
	void ClearType1() { Type1_IsSet = false; Type1_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetType1ToNull() { Type1_IsSet = true; Type1_IsNull = true; }
	/** @brief Checks whether Type1_Optional is set to null */
	FORCEINLINE bool IsType1Null() const { return Type1_IsSet && Type1_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString Type2_Optional{  };
	/** @brief true if Type2_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Type2_IsSet{ false };
	/** @brief true if Type2_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Type2_IsNull{ false };
	/** @brief Gets the value of Type2_Optional, regardless of it having been set */
	FORCEINLINE FString& GetType2() { return Type2_Optional; }
	/** @brief Gets the value of Type2_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetType2() const { return Type2_Optional; }
	/** @brief Gets the value of Type2_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetType2(const FString& DefaultValue) const { if (Type2_IsSet) return Type2_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Type2_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetType2(FString& OutValue) const { if (Type2_IsSet && !Type2_IsNull) OutValue = Type2_Optional; return Type2_IsSet; }
	/** @brief Returns a pointer to Type2_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetType2OrNull() { if (Type2_IsSet) return (Type2_IsNull ? nullptr : &Type2_Optional); return nullptr; }
	/** @brief Returns a pointer to Type2_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetType2OrNull() const { if (Type2_IsSet) return (Type2_IsNull ? nullptr : &Type2_Optional); return nullptr; }
	/** @brief Sets the value of Type2_Optional and also sets Type2_IsSet to true */
	FORCEINLINE void SetType2(const FString& NewValue) { Type2_Optional = NewValue; Type2_IsSet = true; Type2_IsNull = false; }
	/** @brief Sets the value of Type2_Optional and also sets Type2_IsSet to true using move semantics */
	FORCEINLINE void SetType2(FString&& NewValue) { Type2_Optional = NewValue; Type2_IsSet = true; Type2_IsNull = false; }
	/** @brief Clears the value of Type2_Optional and sets Type2_IsSet to false */
	void ClearType2() { Type2_IsSet = false; Type2_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetType2ToNull() { Type2_IsSet = true; Type2_IsNull = true; }
	/** @brief Checks whether Type2_Optional is set to null */
	FORCEINLINE bool IsType2Null() const { return Type2_IsSet && Type2_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString Type3_Optional{  };
	/** @brief true if Type3_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Type3_IsSet{ false };
	/** @brief true if Type3_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Type3_IsNull{ false };
	/** @brief Gets the value of Type3_Optional, regardless of it having been set */
	FORCEINLINE FString& GetType3() { return Type3_Optional; }
	/** @brief Gets the value of Type3_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetType3() const { return Type3_Optional; }
	/** @brief Gets the value of Type3_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetType3(const FString& DefaultValue) const { if (Type3_IsSet) return Type3_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Type3_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetType3(FString& OutValue) const { if (Type3_IsSet && !Type3_IsNull) OutValue = Type3_Optional; return Type3_IsSet; }
	/** @brief Returns a pointer to Type3_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetType3OrNull() { if (Type3_IsSet) return (Type3_IsNull ? nullptr : &Type3_Optional); return nullptr; }
	/** @brief Returns a pointer to Type3_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetType3OrNull() const { if (Type3_IsSet) return (Type3_IsNull ? nullptr : &Type3_Optional); return nullptr; }
	/** @brief Sets the value of Type3_Optional and also sets Type3_IsSet to true */
	FORCEINLINE void SetType3(const FString& NewValue) { Type3_Optional = NewValue; Type3_IsSet = true; Type3_IsNull = false; }
	/** @brief Sets the value of Type3_Optional and also sets Type3_IsSet to true using move semantics */
	FORCEINLINE void SetType3(FString&& NewValue) { Type3_Optional = NewValue; Type3_IsSet = true; Type3_IsNull = false; }
	/** @brief Clears the value of Type3_Optional and sets Type3_IsSet to false */
	void ClearType3() { Type3_IsSet = false; Type3_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetType3ToNull() { Type3_IsSet = true; Type3_IsNull = true; }
	/** @brief Checks whether Type3_Optional is set to null */
	FORCEINLINE bool IsType3Null() const { return Type3_IsSet && Type3_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString Type4_Optional{  };
	/** @brief true if Type4_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Type4_IsSet{ false };
	/** @brief true if Type4_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Type4_IsNull{ false };
	/** @brief Gets the value of Type4_Optional, regardless of it having been set */
	FORCEINLINE FString& GetType4() { return Type4_Optional; }
	/** @brief Gets the value of Type4_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetType4() const { return Type4_Optional; }
	/** @brief Gets the value of Type4_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetType4(const FString& DefaultValue) const { if (Type4_IsSet) return Type4_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Type4_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetType4(FString& OutValue) const { if (Type4_IsSet && !Type4_IsNull) OutValue = Type4_Optional; return Type4_IsSet; }
	/** @brief Returns a pointer to Type4_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetType4OrNull() { if (Type4_IsSet) return (Type4_IsNull ? nullptr : &Type4_Optional); return nullptr; }
	/** @brief Returns a pointer to Type4_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetType4OrNull() const { if (Type4_IsSet) return (Type4_IsNull ? nullptr : &Type4_Optional); return nullptr; }
	/** @brief Sets the value of Type4_Optional and also sets Type4_IsSet to true */
	FORCEINLINE void SetType4(const FString& NewValue) { Type4_Optional = NewValue; Type4_IsSet = true; Type4_IsNull = false; }
	/** @brief Sets the value of Type4_Optional and also sets Type4_IsSet to true using move semantics */
	FORCEINLINE void SetType4(FString&& NewValue) { Type4_Optional = NewValue; Type4_IsSet = true; Type4_IsNull = false; }
	/** @brief Clears the value of Type4_Optional and sets Type4_IsSet to false */
	void ClearType4() { Type4_IsSet = false; Type4_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetType4ToNull() { Type4_IsSet = true; Type4_IsNull = true; }
	/** @brief Checks whether Type4_Optional is set to null */
	FORCEINLINE bool IsType4Null() const { return Type4_IsSet && Type4_IsNull; }

	/** @brief Index of the stage relative to other stages in the match */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 Index_Optional{ 0 };
	/** @brief true if Index_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Index_IsSet{ false };
	/** @brief Gets the value of Index_Optional, regardless of it having been set */
	FORCEINLINE int32& GetIndex() { return Index_Optional; }
	/** @brief Gets the value of Index_Optional, regardless of it having been set */
	FORCEINLINE const int32& GetIndex() const { return Index_Optional; }
	/** @brief Gets the value of Index_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const int32& GetIndex(const int32& DefaultValue) const { if (Index_IsSet) return Index_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Index_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetIndex(int32& OutValue) const { if (Index_IsSet) OutValue = Index_Optional; return Index_IsSet; }
	/** @brief Returns a pointer to Index_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE int32* GetIndexOrNull() { if (Index_IsSet) return (&Index_Optional); return nullptr; }
	/** @brief Returns a pointer to Index_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const int32* GetIndexOrNull() const { if (Index_IsSet) return (&Index_Optional); return nullptr; }
	/** @brief Sets the value of Index_Optional and also sets Index_IsSet to true */
	FORCEINLINE void SetIndex(const int32& NewValue) { Index_Optional = NewValue; Index_IsSet = true;  }
	/** @brief Sets the value of Index_Optional and also sets Index_IsSet to true using move semantics */
	FORCEINLINE void SetIndex(int32&& NewValue) { Index_Optional = NewValue; Index_IsSet = true;  }
	/** @brief Clears the value of Index_Optional and sets Index_IsSet to false */
	void ClearIndex() { Index_Optional = 0; Index_IsSet = false;  }
	/** @brief Returns the default value of Index */
	FORCEINLINE int32 GetDefaultValue_Index() { return 0; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString MatchId_Optional{  };
	/** @brief true if MatchId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool MatchId_IsSet{ false };
	/** @brief true if MatchId_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool MatchId_IsNull{ false };
	/** @brief Gets the value of MatchId_Optional, regardless of it having been set */
	FORCEINLINE FString& GetMatchId() { return MatchId_Optional; }
	/** @brief Gets the value of MatchId_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetMatchId() const { return MatchId_Optional; }
	/** @brief Gets the value of MatchId_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetMatchId(const FString& DefaultValue) const { if (MatchId_IsSet) return MatchId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of MatchId_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetMatchId(FString& OutValue) const { if (MatchId_IsSet && !MatchId_IsNull) OutValue = MatchId_Optional; return MatchId_IsSet; }
	/** @brief Returns a pointer to MatchId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetMatchIdOrNull() { if (MatchId_IsSet) return (MatchId_IsNull ? nullptr : &MatchId_Optional); return nullptr; }
	/** @brief Returns a pointer to MatchId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetMatchIdOrNull() const { if (MatchId_IsSet) return (MatchId_IsNull ? nullptr : &MatchId_Optional); return nullptr; }
	/** @brief Sets the value of MatchId_Optional and also sets MatchId_IsSet to true */
	FORCEINLINE void SetMatchId(const FString& NewValue) { MatchId_Optional = NewValue; MatchId_IsSet = true; MatchId_IsNull = false; }
	/** @brief Sets the value of MatchId_Optional and also sets MatchId_IsSet to true using move semantics */
	FORCEINLINE void SetMatchId(FString&& NewValue) { MatchId_Optional = NewValue; MatchId_IsSet = true; MatchId_IsNull = false; }
	/** @brief Clears the value of MatchId_Optional and sets MatchId_IsSet to false */
	void ClearMatchId() { MatchId_IsSet = false; MatchId_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetMatchIdToNull() { MatchId_IsSet = true; MatchId_IsNull = true; }
	/** @brief Checks whether MatchId_Optional is set to null */
	FORCEINLINE bool IsMatchIdNull() const { return MatchId_IsSet && MatchId_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 Stat1_Optional{ 0 };
	/** @brief true if Stat1_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Stat1_IsSet{ false };
	/** @brief true if Stat1_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Stat1_IsNull{ false };
	/** @brief Gets the value of Stat1_Optional, regardless of it having been set */
	FORCEINLINE int32& GetStat1() { return Stat1_Optional; }
	/** @brief Gets the value of Stat1_Optional, regardless of it having been set */
	FORCEINLINE const int32& GetStat1() const { return Stat1_Optional; }
	/** @brief Gets the value of Stat1_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const int32& GetStat1(const int32& DefaultValue) const { if (Stat1_IsSet) return Stat1_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Stat1_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetStat1(int32& OutValue) const { if (Stat1_IsSet && !Stat1_IsNull) OutValue = Stat1_Optional; return Stat1_IsSet; }
	/** @brief Returns a pointer to Stat1_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE int32* GetStat1OrNull() { if (Stat1_IsSet) return (Stat1_IsNull ? nullptr : &Stat1_Optional); return nullptr; }
	/** @brief Returns a pointer to Stat1_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const int32* GetStat1OrNull() const { if (Stat1_IsSet) return (Stat1_IsNull ? nullptr : &Stat1_Optional); return nullptr; }
	/** @brief Sets the value of Stat1_Optional and also sets Stat1_IsSet to true */
	FORCEINLINE void SetStat1(const int32& NewValue) { Stat1_Optional = NewValue; Stat1_IsSet = true; Stat1_IsNull = false; }
	/** @brief Sets the value of Stat1_Optional and also sets Stat1_IsSet to true using move semantics */
	FORCEINLINE void SetStat1(int32&& NewValue) { Stat1_Optional = NewValue; Stat1_IsSet = true; Stat1_IsNull = false; }
	/** @brief Clears the value of Stat1_Optional and sets Stat1_IsSet to false */
	void ClearStat1() { Stat1_Optional = 0; Stat1_IsSet = false; Stat1_IsNull = false; }
	/** @brief Returns the default value of Stat1 */
	FORCEINLINE int32 GetDefaultValue_Stat1() { return 0; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetStat1ToNull() { Stat1_IsSet = true; Stat1_IsNull = true; }
	/** @brief Checks whether Stat1_Optional is set to null */
	FORCEINLINE bool IsStat1Null() const { return Stat1_IsSet && Stat1_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 Stat2_Optional{ 0 };
	/** @brief true if Stat2_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Stat2_IsSet{ false };
	/** @brief true if Stat2_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Stat2_IsNull{ false };
	/** @brief Gets the value of Stat2_Optional, regardless of it having been set */
	FORCEINLINE int32& GetStat2() { return Stat2_Optional; }
	/** @brief Gets the value of Stat2_Optional, regardless of it having been set */
	FORCEINLINE const int32& GetStat2() const { return Stat2_Optional; }
	/** @brief Gets the value of Stat2_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const int32& GetStat2(const int32& DefaultValue) const { if (Stat2_IsSet) return Stat2_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Stat2_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetStat2(int32& OutValue) const { if (Stat2_IsSet && !Stat2_IsNull) OutValue = Stat2_Optional; return Stat2_IsSet; }
	/** @brief Returns a pointer to Stat2_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE int32* GetStat2OrNull() { if (Stat2_IsSet) return (Stat2_IsNull ? nullptr : &Stat2_Optional); return nullptr; }
	/** @brief Returns a pointer to Stat2_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const int32* GetStat2OrNull() const { if (Stat2_IsSet) return (Stat2_IsNull ? nullptr : &Stat2_Optional); return nullptr; }
	/** @brief Sets the value of Stat2_Optional and also sets Stat2_IsSet to true */
	FORCEINLINE void SetStat2(const int32& NewValue) { Stat2_Optional = NewValue; Stat2_IsSet = true; Stat2_IsNull = false; }
	/** @brief Sets the value of Stat2_Optional and also sets Stat2_IsSet to true using move semantics */
	FORCEINLINE void SetStat2(int32&& NewValue) { Stat2_Optional = NewValue; Stat2_IsSet = true; Stat2_IsNull = false; }
	/** @brief Clears the value of Stat2_Optional and sets Stat2_IsSet to false */
	void ClearStat2() { Stat2_Optional = 0; Stat2_IsSet = false; Stat2_IsNull = false; }
	/** @brief Returns the default value of Stat2 */
	FORCEINLINE int32 GetDefaultValue_Stat2() { return 0; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetStat2ToNull() { Stat2_IsSet = true; Stat2_IsNull = true; }
	/** @brief Checks whether Stat2_Optional is set to null */
	FORCEINLINE bool IsStat2Null() const { return Stat2_IsSet && Stat2_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 Stat3_Optional{ 0 };
	/** @brief true if Stat3_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Stat3_IsSet{ false };
	/** @brief true if Stat3_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Stat3_IsNull{ false };
	/** @brief Gets the value of Stat3_Optional, regardless of it having been set */
	FORCEINLINE int32& GetStat3() { return Stat3_Optional; }
	/** @brief Gets the value of Stat3_Optional, regardless of it having been set */
	FORCEINLINE const int32& GetStat3() const { return Stat3_Optional; }
	/** @brief Gets the value of Stat3_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const int32& GetStat3(const int32& DefaultValue) const { if (Stat3_IsSet) return Stat3_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Stat3_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetStat3(int32& OutValue) const { if (Stat3_IsSet && !Stat3_IsNull) OutValue = Stat3_Optional; return Stat3_IsSet; }
	/** @brief Returns a pointer to Stat3_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE int32* GetStat3OrNull() { if (Stat3_IsSet) return (Stat3_IsNull ? nullptr : &Stat3_Optional); return nullptr; }
	/** @brief Returns a pointer to Stat3_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const int32* GetStat3OrNull() const { if (Stat3_IsSet) return (Stat3_IsNull ? nullptr : &Stat3_Optional); return nullptr; }
	/** @brief Sets the value of Stat3_Optional and also sets Stat3_IsSet to true */
	FORCEINLINE void SetStat3(const int32& NewValue) { Stat3_Optional = NewValue; Stat3_IsSet = true; Stat3_IsNull = false; }
	/** @brief Sets the value of Stat3_Optional and also sets Stat3_IsSet to true using move semantics */
	FORCEINLINE void SetStat3(int32&& NewValue) { Stat3_Optional = NewValue; Stat3_IsSet = true; Stat3_IsNull = false; }
	/** @brief Clears the value of Stat3_Optional and sets Stat3_IsSet to false */
	void ClearStat3() { Stat3_Optional = 0; Stat3_IsSet = false; Stat3_IsNull = false; }
	/** @brief Returns the default value of Stat3 */
	FORCEINLINE int32 GetDefaultValue_Stat3() { return 0; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetStat3ToNull() { Stat3_IsSet = true; Stat3_IsNull = true; }
	/** @brief Checks whether Stat3_Optional is set to null */
	FORCEINLINE bool IsStat3Null() const { return Stat3_IsSet && Stat3_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 Stat4_Optional{ 0 };
	/** @brief true if Stat4_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Stat4_IsSet{ false };
	/** @brief true if Stat4_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Stat4_IsNull{ false };
	/** @brief Gets the value of Stat4_Optional, regardless of it having been set */
	FORCEINLINE int32& GetStat4() { return Stat4_Optional; }
	/** @brief Gets the value of Stat4_Optional, regardless of it having been set */
	FORCEINLINE const int32& GetStat4() const { return Stat4_Optional; }
	/** @brief Gets the value of Stat4_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const int32& GetStat4(const int32& DefaultValue) const { if (Stat4_IsSet) return Stat4_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Stat4_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetStat4(int32& OutValue) const { if (Stat4_IsSet && !Stat4_IsNull) OutValue = Stat4_Optional; return Stat4_IsSet; }
	/** @brief Returns a pointer to Stat4_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE int32* GetStat4OrNull() { if (Stat4_IsSet) return (Stat4_IsNull ? nullptr : &Stat4_Optional); return nullptr; }
	/** @brief Returns a pointer to Stat4_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const int32* GetStat4OrNull() const { if (Stat4_IsSet) return (Stat4_IsNull ? nullptr : &Stat4_Optional); return nullptr; }
	/** @brief Sets the value of Stat4_Optional and also sets Stat4_IsSet to true */
	FORCEINLINE void SetStat4(const int32& NewValue) { Stat4_Optional = NewValue; Stat4_IsSet = true; Stat4_IsNull = false; }
	/** @brief Sets the value of Stat4_Optional and also sets Stat4_IsSet to true using move semantics */
	FORCEINLINE void SetStat4(int32&& NewValue) { Stat4_Optional = NewValue; Stat4_IsSet = true; Stat4_IsNull = false; }
	/** @brief Clears the value of Stat4_Optional and sets Stat4_IsSet to false */
	void ClearStat4() { Stat4_Optional = 0; Stat4_IsSet = false; Stat4_IsNull = false; }
	/** @brief Returns the default value of Stat4 */
	FORCEINLINE int32 GetDefaultValue_Stat4() { return 0; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetStat4ToNull() { Stat4_IsSet = true; Stat4_IsNull = true; }
	/** @brief Checks whether Stat4_Optional is set to null */
	FORCEINLINE bool IsStat4Null() const { return Stat4_IsSet && Stat4_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	float MmrInternal_Optional{  };
	/** @brief true if MmrInternal_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool MmrInternal_IsSet{ false };
	/** @brief true if MmrInternal_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool MmrInternal_IsNull{ false };
	/** @brief Gets the value of MmrInternal_Optional, regardless of it having been set */
	FORCEINLINE float& GetMmrInternal() { return MmrInternal_Optional; }
	/** @brief Gets the value of MmrInternal_Optional, regardless of it having been set */
	FORCEINLINE const float& GetMmrInternal() const { return MmrInternal_Optional; }
	/** @brief Gets the value of MmrInternal_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const float& GetMmrInternal(const float& DefaultValue) const { if (MmrInternal_IsSet) return MmrInternal_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of MmrInternal_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetMmrInternal(float& OutValue) const { if (MmrInternal_IsSet && !MmrInternal_IsNull) OutValue = MmrInternal_Optional; return MmrInternal_IsSet; }
	/** @brief Returns a pointer to MmrInternal_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE float* GetMmrInternalOrNull() { if (MmrInternal_IsSet) return (MmrInternal_IsNull ? nullptr : &MmrInternal_Optional); return nullptr; }
	/** @brief Returns a pointer to MmrInternal_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const float* GetMmrInternalOrNull() const { if (MmrInternal_IsSet) return (MmrInternal_IsNull ? nullptr : &MmrInternal_Optional); return nullptr; }
	/** @brief Sets the value of MmrInternal_Optional and also sets MmrInternal_IsSet to true */
	FORCEINLINE void SetMmrInternal(const float& NewValue) { MmrInternal_Optional = NewValue; MmrInternal_IsSet = true; MmrInternal_IsNull = false; }
	/** @brief Sets the value of MmrInternal_Optional and also sets MmrInternal_IsSet to true using move semantics */
	FORCEINLINE void SetMmrInternal(float&& NewValue) { MmrInternal_Optional = NewValue; MmrInternal_IsSet = true; MmrInternal_IsNull = false; }
	/** @brief Clears the value of MmrInternal_Optional and sets MmrInternal_IsSet to false */
	void ClearMmrInternal() { MmrInternal_IsSet = false; MmrInternal_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetMmrInternalToNull() { MmrInternal_IsSet = true; MmrInternal_IsNull = true; }
	/** @brief Checks whether MmrInternal_Optional is set to null */
	FORCEINLINE bool IsMmrInternalNull() const { return MmrInternal_IsSet && MmrInternal_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	float MmrVis_Optional{  };
	/** @brief true if MmrVis_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool MmrVis_IsSet{ false };
	/** @brief true if MmrVis_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool MmrVis_IsNull{ false };
	/** @brief Gets the value of MmrVis_Optional, regardless of it having been set */
	FORCEINLINE float& GetMmrVis() { return MmrVis_Optional; }
	/** @brief Gets the value of MmrVis_Optional, regardless of it having been set */
	FORCEINLINE const float& GetMmrVis() const { return MmrVis_Optional; }
	/** @brief Gets the value of MmrVis_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const float& GetMmrVis(const float& DefaultValue) const { if (MmrVis_IsSet) return MmrVis_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of MmrVis_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetMmrVis(float& OutValue) const { if (MmrVis_IsSet && !MmrVis_IsNull) OutValue = MmrVis_Optional; return MmrVis_IsSet; }
	/** @brief Returns a pointer to MmrVis_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE float* GetMmrVisOrNull() { if (MmrVis_IsSet) return (MmrVis_IsNull ? nullptr : &MmrVis_Optional); return nullptr; }
	/** @brief Returns a pointer to MmrVis_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const float* GetMmrVisOrNull() const { if (MmrVis_IsSet) return (MmrVis_IsNull ? nullptr : &MmrVis_Optional); return nullptr; }
	/** @brief Sets the value of MmrVis_Optional and also sets MmrVis_IsSet to true */
	FORCEINLINE void SetMmrVis(const float& NewValue) { MmrVis_Optional = NewValue; MmrVis_IsSet = true; MmrVis_IsNull = false; }
	/** @brief Sets the value of MmrVis_Optional and also sets MmrVis_IsSet to true using move semantics */
	FORCEINLINE void SetMmrVis(float&& NewValue) { MmrVis_Optional = NewValue; MmrVis_IsSet = true; MmrVis_IsNull = false; }
	/** @brief Clears the value of MmrVis_Optional and sets MmrVis_IsSet to false */
	void ClearMmrVis() { MmrVis_IsSet = false; MmrVis_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetMmrVisToNull() { MmrVis_IsSet = true; MmrVis_IsNull = true; }
	/** @brief Checks whether MmrVis_Optional is set to null */
	FORCEINLINE bool IsMmrVisNull() const { return MmrVis_IsSet && MmrVis_IsNull; }

	/** @brief Unique ID for this stage. */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString StageId{  };
	/** @brief Gets the value of StageId */
	FORCEINLINE FString& GetStageId() { return StageId; }
	/** @brief Gets the value of StageId */
	FORCEINLINE const FString& GetStageId() const { return StageId; }
	/** @brief Sets the value of StageId */
	FORCEINLINE void SetStageId(const FString& NewValue) { StageId = NewValue;   }
	/** @brief Sets the value of StageId using move semantics */
	FORCEINLINE void SetStageId(FString&& NewValue) { StageId = NewValue;   }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	ERHAPI_StageEntityType OwnerEntityType_Optional{  };
	/** @brief true if OwnerEntityType_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool OwnerEntityType_IsSet{ false };
	/** @brief true if OwnerEntityType_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool OwnerEntityType_IsNull{ false };
	/** @brief Gets the value of OwnerEntityType_Optional, regardless of it having been set */
	FORCEINLINE ERHAPI_StageEntityType& GetOwnerEntityType() { return OwnerEntityType_Optional; }
	/** @brief Gets the value of OwnerEntityType_Optional, regardless of it having been set */
	FORCEINLINE const ERHAPI_StageEntityType& GetOwnerEntityType() const { return OwnerEntityType_Optional; }
	/** @brief Gets the value of OwnerEntityType_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const ERHAPI_StageEntityType& GetOwnerEntityType(const ERHAPI_StageEntityType& DefaultValue) const { if (OwnerEntityType_IsSet) return OwnerEntityType_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of OwnerEntityType_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetOwnerEntityType(ERHAPI_StageEntityType& OutValue) const { if (OwnerEntityType_IsSet && !OwnerEntityType_IsNull) OutValue = OwnerEntityType_Optional; return OwnerEntityType_IsSet; }
	/** @brief Returns a pointer to OwnerEntityType_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE ERHAPI_StageEntityType* GetOwnerEntityTypeOrNull() { if (OwnerEntityType_IsSet) return (OwnerEntityType_IsNull ? nullptr : &OwnerEntityType_Optional); return nullptr; }
	/** @brief Returns a pointer to OwnerEntityType_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const ERHAPI_StageEntityType* GetOwnerEntityTypeOrNull() const { if (OwnerEntityType_IsSet) return (OwnerEntityType_IsNull ? nullptr : &OwnerEntityType_Optional); return nullptr; }
	/** @brief Sets the value of OwnerEntityType_Optional and also sets OwnerEntityType_IsSet to true */
	FORCEINLINE void SetOwnerEntityType(const ERHAPI_StageEntityType& NewValue) { OwnerEntityType_Optional = NewValue; OwnerEntityType_IsSet = true; OwnerEntityType_IsNull = false; }
	/** @brief Sets the value of OwnerEntityType_Optional and also sets OwnerEntityType_IsSet to true using move semantics */
	FORCEINLINE void SetOwnerEntityType(ERHAPI_StageEntityType&& NewValue) { OwnerEntityType_Optional = NewValue; OwnerEntityType_IsSet = true; OwnerEntityType_IsNull = false; }
	/** @brief Clears the value of OwnerEntityType_Optional and sets OwnerEntityType_IsSet to false */
	void ClearOwnerEntityType() { OwnerEntityType_IsSet = false; OwnerEntityType_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetOwnerEntityTypeToNull() { OwnerEntityType_IsSet = true; OwnerEntityType_IsNull = true; }
	/** @brief Checks whether OwnerEntityType_Optional is set to null */
	FORCEINLINE bool IsOwnerEntityTypeNull() const { return OwnerEntityType_IsSet && OwnerEntityType_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString OwnerEntityId_Optional{  };
	/** @brief true if OwnerEntityId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool OwnerEntityId_IsSet{ false };
	/** @brief true if OwnerEntityId_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool OwnerEntityId_IsNull{ false };
	/** @brief Gets the value of OwnerEntityId_Optional, regardless of it having been set */
	FORCEINLINE FString& GetOwnerEntityId() { return OwnerEntityId_Optional; }
	/** @brief Gets the value of OwnerEntityId_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetOwnerEntityId() const { return OwnerEntityId_Optional; }
	/** @brief Gets the value of OwnerEntityId_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetOwnerEntityId(const FString& DefaultValue) const { if (OwnerEntityId_IsSet) return OwnerEntityId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of OwnerEntityId_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetOwnerEntityId(FString& OutValue) const { if (OwnerEntityId_IsSet && !OwnerEntityId_IsNull) OutValue = OwnerEntityId_Optional; return OwnerEntityId_IsSet; }
	/** @brief Returns a pointer to OwnerEntityId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetOwnerEntityIdOrNull() { if (OwnerEntityId_IsSet) return (OwnerEntityId_IsNull ? nullptr : &OwnerEntityId_Optional); return nullptr; }
	/** @brief Returns a pointer to OwnerEntityId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetOwnerEntityIdOrNull() const { if (OwnerEntityId_IsSet) return (OwnerEntityId_IsNull ? nullptr : &OwnerEntityId_Optional); return nullptr; }
	/** @brief Sets the value of OwnerEntityId_Optional and also sets OwnerEntityId_IsSet to true */
	FORCEINLINE void SetOwnerEntityId(const FString& NewValue) { OwnerEntityId_Optional = NewValue; OwnerEntityId_IsSet = true; OwnerEntityId_IsNull = false; }
	/** @brief Sets the value of OwnerEntityId_Optional and also sets OwnerEntityId_IsSet to true using move semantics */
	FORCEINLINE void SetOwnerEntityId(FString&& NewValue) { OwnerEntityId_Optional = NewValue; OwnerEntityId_IsSet = true; OwnerEntityId_IsNull = false; }
	/** @brief Clears the value of OwnerEntityId_Optional and sets OwnerEntityId_IsSet to false */
	void ClearOwnerEntityId() { OwnerEntityId_IsSet = false; OwnerEntityId_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetOwnerEntityIdToNull() { OwnerEntityId_IsSet = true; OwnerEntityId_IsNull = true; }
	/** @brief Checks whether OwnerEntityId_Optional is set to null */
	FORCEINLINE bool IsOwnerEntityIdNull() const { return OwnerEntityId_IsSet && OwnerEntityId_IsNull; }

	/** @brief How many times has this stage been matchmade? */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 MmCount_Optional{ 0 };
	/** @brief true if MmCount_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool MmCount_IsSet{ false };
	/** @brief Gets the value of MmCount_Optional, regardless of it having been set */
	FORCEINLINE int32& GetMmCount() { return MmCount_Optional; }
	/** @brief Gets the value of MmCount_Optional, regardless of it having been set */
	FORCEINLINE const int32& GetMmCount() const { return MmCount_Optional; }
	/** @brief Gets the value of MmCount_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const int32& GetMmCount(const int32& DefaultValue) const { if (MmCount_IsSet) return MmCount_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of MmCount_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetMmCount(int32& OutValue) const { if (MmCount_IsSet) OutValue = MmCount_Optional; return MmCount_IsSet; }
	/** @brief Returns a pointer to MmCount_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE int32* GetMmCountOrNull() { if (MmCount_IsSet) return (&MmCount_Optional); return nullptr; }
	/** @brief Returns a pointer to MmCount_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const int32* GetMmCountOrNull() const { if (MmCount_IsSet) return (&MmCount_Optional); return nullptr; }
	/** @brief Sets the value of MmCount_Optional and also sets MmCount_IsSet to true */
	FORCEINLINE void SetMmCount(const int32& NewValue) { MmCount_Optional = NewValue; MmCount_IsSet = true;  }
	/** @brief Sets the value of MmCount_Optional and also sets MmCount_IsSet to true using move semantics */
	FORCEINLINE void SetMmCount(int32&& NewValue) { MmCount_Optional = NewValue; MmCount_IsSet = true;  }
	/** @brief Clears the value of MmCount_Optional and sets MmCount_IsSet to false */
	void ClearMmCount() { MmCount_Optional = 0; MmCount_IsSet = false;  }
	/** @brief Returns the default value of MmCount */
	FORCEINLINE int32 GetDefaultValue_MmCount() { return 0; }

	/** @brief When was this stage first created? */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FDateTime Created{  };
	/** @brief Gets the value of Created */
	FORCEINLINE FDateTime& GetCreated() { return Created; }
	/** @brief Gets the value of Created */
	FORCEINLINE const FDateTime& GetCreated() const { return Created; }
	/** @brief Sets the value of Created */
	FORCEINLINE void SetCreated(const FDateTime& NewValue) { Created = NewValue;   }
	/** @brief Sets the value of Created using move semantics */
	FORCEINLINE void SetCreated(FDateTime&& NewValue) { Created = NewValue;   }

	/** @brief When was this stage last modified? */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FDateTime Modified{  };
	/** @brief Gets the value of Modified */
	FORCEINLINE FDateTime& GetModified() { return Modified; }
	/** @brief Gets the value of Modified */
	FORCEINLINE const FDateTime& GetModified() const { return Modified; }
	/** @brief Sets the value of Modified */
	FORCEINLINE void SetModified(const FDateTime& NewValue) { Modified = NewValue;   }
	/** @brief Sets the value of Modified using move semantics */
	FORCEINLINE void SetModified(FDateTime&& NewValue) { Modified = NewValue;   }
};

/** @} */
