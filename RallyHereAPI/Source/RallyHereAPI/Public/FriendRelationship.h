// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "FriendshipStatus.h"
#include "FriendRelationship.generated.h"

/** @defgroup RHAPI_FriendRelationship RallyHere API Model FriendRelationship
 *  @{
 */

/**
 * @brief Represents the relationship with a potential friend.
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_FriendRelationship : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FGuid FriendsPlayerUuid{  };
	/** @brief Gets the value of FriendsPlayerUuid */
	FORCEINLINE FGuid& GetFriendsPlayerUuid() { return FriendsPlayerUuid; }
	/** @brief Gets the value of FriendsPlayerUuid */
	FORCEINLINE const FGuid& GetFriendsPlayerUuid() const { return FriendsPlayerUuid; }
	/** @brief Sets the value of FriendsPlayerUuid */
	FORCEINLINE void SetFriendsPlayerUuid(const FGuid& NewValue) { FriendsPlayerUuid = NewValue;   }
	/** @brief Sets the value of FriendsPlayerUuid using move semantics */
	FORCEINLINE void SetFriendsPlayerUuid(FGuid&& NewValue) { FriendsPlayerUuid = NewValue;   }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	ERHAPI_FriendshipStatus Status{  };
	/** @brief Gets the value of Status */
	FORCEINLINE ERHAPI_FriendshipStatus& GetStatus() { return Status; }
	/** @brief Gets the value of Status */
	FORCEINLINE const ERHAPI_FriendshipStatus& GetStatus() const { return Status; }
	/** @brief Sets the value of Status */
	FORCEINLINE void SetStatus(const ERHAPI_FriendshipStatus& NewValue) { Status = NewValue;   }
	/** @brief Sets the value of Status using move semantics */
	FORCEINLINE void SetStatus(ERHAPI_FriendshipStatus&& NewValue) { Status = NewValue;   }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString Notes_Optional{  };
	/** @brief true if Notes_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Notes_IsSet{ false };
	/** @brief Gets the value of Notes_Optional, regardless of it having been set */
	FORCEINLINE FString& GetNotes() { return Notes_Optional; }
	/** @brief Gets the value of Notes_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetNotes() const { return Notes_Optional; }
	/** @brief Gets the value of Notes_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetNotes(const FString& DefaultValue) const { if (Notes_IsSet) return Notes_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Notes_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetNotes(FString& OutValue) const { if (Notes_IsSet) OutValue = Notes_Optional; return Notes_IsSet; }
	/** @brief Returns a pointer to Notes_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetNotesOrNull() { if (Notes_IsSet) return (&Notes_Optional); return nullptr; }
	/** @brief Returns a pointer to Notes_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetNotesOrNull() const { if (Notes_IsSet) return (&Notes_Optional); return nullptr; }
	/** @brief Sets the value of Notes_Optional and also sets Notes_IsSet to true */
	FORCEINLINE void SetNotes(const FString& NewValue) { Notes_Optional = NewValue; Notes_IsSet = true;  }
	/** @brief Sets the value of Notes_Optional and also sets Notes_IsSet to true using move semantics */
	FORCEINLINE void SetNotes(FString&& NewValue) { Notes_Optional = NewValue; Notes_IsSet = true;  }
	/** @brief Clears the value of Notes_Optional and sets Notes_IsSet to false */
	void ClearNotes() { Notes_IsSet = false;  }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FDateTime LastModifiedOn{  };
	/** @brief Gets the value of LastModifiedOn */
	FORCEINLINE FDateTime& GetLastModifiedOn() { return LastModifiedOn; }
	/** @brief Gets the value of LastModifiedOn */
	FORCEINLINE const FDateTime& GetLastModifiedOn() const { return LastModifiedOn; }
	/** @brief Sets the value of LastModifiedOn */
	FORCEINLINE void SetLastModifiedOn(const FDateTime& NewValue) { LastModifiedOn = NewValue;   }
	/** @brief Sets the value of LastModifiedOn using move semantics */
	FORCEINLINE void SetLastModifiedOn(FDateTime&& NewValue) { LastModifiedOn = NewValue;   }
};

/** @} */
