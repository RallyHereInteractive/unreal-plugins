// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereAPIAuthContext.h"
#include "RallyHereAPIHelpers.h"
#include "HTTPValidationError.h"
#include "HzApiErrorModel.h"
#include "PlatformEntitlementProcessRequest.h"
#include "PlatformEntitlementProcessResult.h"

namespace RallyHereAPI
{
using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

struct FRequest_ProcessPlatformEntitlementForMe;
struct FResponse_ProcessPlatformEntitlementForMe;
struct FRequest_ProcessPlatformEntitlementsByPlayerUuid;
struct FResponse_ProcessPlatformEntitlementsByPlayerUuid;
struct FRequest_RetrieveEntitlementsByPlayerUuid;
struct FResponse_RetrieveEntitlementsByPlayerUuid;
struct FRequest_RetrieveEntitlementsForMe;
struct FResponse_RetrieveEntitlementsForMe;

DECLARE_DELEGATE_OneParam(FDelegate_ProcessPlatformEntitlementForMe, const FResponse_ProcessPlatformEntitlementForMe&);
DECLARE_DELEGATE_OneParam(FDelegate_ProcessPlatformEntitlementsByPlayerUuid, const FResponse_ProcessPlatformEntitlementsByPlayerUuid&);
DECLARE_DELEGATE_OneParam(FDelegate_RetrieveEntitlementsByPlayerUuid, const FResponse_RetrieveEntitlementsByPlayerUuid&);
DECLARE_DELEGATE_OneParam(FDelegate_RetrieveEntitlementsForMe, const FResponse_RetrieveEntitlementsForMe&);

class RALLYHEREAPI_API FEntitlementsAPI : public FAPI
{
public:
    FEntitlementsAPI();
    virtual ~FEntitlementsAPI();

    FHttpRequestPtr ProcessPlatformEntitlementForMe(const FRequest_ProcessPlatformEntitlementForMe& Request, const FDelegate_ProcessPlatformEntitlementForMe& Delegate = FDelegate_ProcessPlatformEntitlementForMe(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr ProcessPlatformEntitlementsByPlayerUuid(const FRequest_ProcessPlatformEntitlementsByPlayerUuid& Request, const FDelegate_ProcessPlatformEntitlementsByPlayerUuid& Delegate = FDelegate_ProcessPlatformEntitlementsByPlayerUuid(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr RetrieveEntitlementsByPlayerUuid(const FRequest_RetrieveEntitlementsByPlayerUuid& Request, const FDelegate_RetrieveEntitlementsByPlayerUuid& Delegate = FDelegate_RetrieveEntitlementsByPlayerUuid(), int32 Priority = DefaultRallyHereAPIPriority);
    FHttpRequestPtr RetrieveEntitlementsForMe(const FRequest_RetrieveEntitlementsForMe& Request, const FDelegate_RetrieveEntitlementsForMe& Delegate = FDelegate_RetrieveEntitlementsForMe(), int32 Priority = DefaultRallyHereAPIPriority);

private:
    void OnProcessPlatformEntitlementForMeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_ProcessPlatformEntitlementForMe Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnProcessPlatformEntitlementsByPlayerUuidResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_ProcessPlatformEntitlementsByPlayerUuid Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnRetrieveEntitlementsByPlayerUuidResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_RetrieveEntitlementsByPlayerUuid Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnRetrieveEntitlementsForMeResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_RetrieveEntitlementsForMe Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};

/* Process Platform Entitlement For Me
 *
 * Process platform entitlements, consuming from the platform inventory where possible and generating orders.    Note that some orders may not be fulfilled at the completion of this request and need to be polled separately for results  Required Permissions:   For any player (including themselves)any of: &#x60;inv:*&#x60;, &#x60;inv:platform_entitlements:any&#x60;  For the player themselves: &#x60;inv:platform_entitlements:self&#x60;
*/
struct RALLYHEREAPI_API FRequest_ProcessPlatformEntitlementForMe : public FRequest
{
    FRequest_ProcessPlatformEntitlementForMe();
    virtual ~FRequest_ProcessPlatformEntitlementForMe() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FRHAPI_PlatformEntitlementProcessRequest PlatformEntitlementProcessRequest;
};

struct RALLYHEREAPI_API FResponse_ProcessPlatformEntitlementForMe : public FResponse
{
    FResponse_ProcessPlatformEntitlementForMe(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_ProcessPlatformEntitlementForMe() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_PlatformEntitlementProcessResult Content;

};

struct RALLYHEREAPI_API Traits_ProcessPlatformEntitlementForMe
{
    typedef FRequest_ProcessPlatformEntitlementForMe Request;
    typedef FResponse_ProcessPlatformEntitlementForMe Response;
    typedef FDelegate_ProcessPlatformEntitlementForMe Delegate;
    typedef FEntitlementsAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.ProcessPlatformEntitlementForMe(InRequest, InDelegate, Priority); }
};

/* Process Platform Entitlements By Player Uuid
 *
 * Process platform entitlements, consuming from the platform inventory where possible and generating orders.    Note that some orders may not be fulfilled at the completion of this request and need to be polled separately for results  Required Permissions:   For any player (including themselves)any of: &#x60;inv:*&#x60;, &#x60;inv:platform_entitlements:any&#x60;  For the player themselves: &#x60;inv:platform_entitlements:self&#x60;
*/
struct RALLYHEREAPI_API FRequest_ProcessPlatformEntitlementsByPlayerUuid : public FRequest
{
    FRequest_ProcessPlatformEntitlementsByPlayerUuid();
    virtual ~FRequest_ProcessPlatformEntitlementsByPlayerUuid() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid PlayerUuid;
    FRHAPI_PlatformEntitlementProcessRequest PlatformEntitlementProcessRequest;
};

struct RALLYHEREAPI_API FResponse_ProcessPlatformEntitlementsByPlayerUuid : public FResponse
{
    FResponse_ProcessPlatformEntitlementsByPlayerUuid(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_ProcessPlatformEntitlementsByPlayerUuid() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_PlatformEntitlementProcessResult Content;

};

struct RALLYHEREAPI_API Traits_ProcessPlatformEntitlementsByPlayerUuid
{
    typedef FRequest_ProcessPlatformEntitlementsByPlayerUuid Request;
    typedef FResponse_ProcessPlatformEntitlementsByPlayerUuid Response;
    typedef FDelegate_ProcessPlatformEntitlementsByPlayerUuid Delegate;
    typedef FEntitlementsAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.ProcessPlatformEntitlementsByPlayerUuid(InRequest, InDelegate, Priority); }
};

/* Retrieve Entitlements By Player Uuid
 *
 * Get the status of a platform entitlement request by request id.          Required Permissions:   For any player (including themselves)any of: &#x60;inv:*&#x60;, &#x60;inv:platform_entitlements:any&#x60;  For the player themselves: &#x60;inv:platform_entitlements:self&#x60;
*/
struct RALLYHEREAPI_API FRequest_RetrieveEntitlementsByPlayerUuid : public FRequest
{
    FRequest_RetrieveEntitlementsByPlayerUuid();
    virtual ~FRequest_RetrieveEntitlementsByPlayerUuid() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid PlayerUuid;
    FString RequestId;
};

struct RALLYHEREAPI_API FResponse_RetrieveEntitlementsByPlayerUuid : public FResponse
{
    FResponse_RetrieveEntitlementsByPlayerUuid(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_RetrieveEntitlementsByPlayerUuid() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_PlatformEntitlementProcessResult Content;

};

struct RALLYHEREAPI_API Traits_RetrieveEntitlementsByPlayerUuid
{
    typedef FRequest_RetrieveEntitlementsByPlayerUuid Request;
    typedef FResponse_RetrieveEntitlementsByPlayerUuid Response;
    typedef FDelegate_RetrieveEntitlementsByPlayerUuid Delegate;
    typedef FEntitlementsAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.RetrieveEntitlementsByPlayerUuid(InRequest, InDelegate, Priority); }
};

/* Retrieve Entitlements For Me
 *
 * Get the status of a platform entitlement request by request id.          Required Permissions:   For any player (including themselves)any of: &#x60;inv:*&#x60;, &#x60;inv:platform_entitlements:any&#x60;  For the player themselves: &#x60;inv:platform_entitlements:self&#x60;
*/
struct RALLYHEREAPI_API FRequest_RetrieveEntitlementsForMe : public FRequest
{
    FRequest_RetrieveEntitlementsForMe();
    virtual ~FRequest_RetrieveEntitlementsForMe() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FString RequestId;
};

struct RALLYHEREAPI_API FResponse_RetrieveEntitlementsForMe : public FResponse
{
    FResponse_RetrieveEntitlementsForMe(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_RetrieveEntitlementsForMe() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_PlatformEntitlementProcessResult Content;

};

struct RALLYHEREAPI_API Traits_RetrieveEntitlementsForMe
{
    typedef FRequest_RetrieveEntitlementsForMe Request;
    typedef FResponse_RetrieveEntitlementsForMe Response;
    typedef FDelegate_RetrieveEntitlementsForMe Delegate;
    typedef FEntitlementsAPI API;
    static FString Name;
	
    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.RetrieveEntitlementsForMe(InRequest, InDelegate, Priority); }
};


}
