// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "InventoryBucket.h"
#include "PlayerOrderDetail.h"
#include "PlayerOrderEntryResult.h"
#include "PlayerOrderEntryType.h"
#include "PurchasePrice.h"
#include "PlayerOrderEntry.generated.h"

/** @defgroup RHAPI_PlayerOrderEntry RallyHere API Model PlayerOrderEntry
 *  @{
 */

/**
 * @brief Represents a line item in the Player Order and the results of the line item.
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_PlayerOrderEntry : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	ERHAPI_PlayerOrderEntryType Type{  };
	/** @brief Gets the value of Type */
	ERHAPI_PlayerOrderEntryType& GetType() { return Type; }
	/** @brief Gets the value of Type */
	const ERHAPI_PlayerOrderEntryType& GetType() const { return Type; }
	/** @brief Sets the value of Type */
	void SetType(const ERHAPI_PlayerOrderEntryType& NewValue) { Type = NewValue;   }
	/** @brief Sets the value of Type using move semantics */
	void SetType(ERHAPI_PlayerOrderEntryType&& NewValue) { Type = NewValue;   }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 LootId_Optional{ 0 };
	/** @brief true if LootId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool LootId_IsSet{ false };
	/** @brief true if LootId_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool LootId_IsNull{ false };
	/** @brief Gets the value of LootId_Optional, regardless of it having been set */
	int32& GetLootId() { return LootId_Optional; }
	/** @brief Gets the value of LootId_Optional, regardless of it having been set */
	const int32& GetLootId() const { return LootId_Optional; }
	/** @brief Gets the value of LootId_Optional, if it has been set, otherwise it returns DefaultValue */
	const int32& GetLootId(const int32& DefaultValue) const { if (LootId_IsSet) return LootId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of LootId_Optional and returns true if it has been set, otherwise returns false */
	bool GetLootId(int32& OutValue) const { if (LootId_IsSet && !LootId_IsNull) OutValue = LootId_Optional; return LootId_IsSet; }
	/** @brief Returns a pointer to LootId_Optional, if it has been set, otherwise returns nullptr */
	int32* GetLootIdOrNull() { if (LootId_IsSet) return (LootId_IsNull ? nullptr : &LootId_Optional); return nullptr; }
	/** @brief Returns a pointer to LootId_Optional, if it has been set, otherwise returns nullptr */
	const int32* GetLootIdOrNull() const { if (LootId_IsSet) return (LootId_IsNull ? nullptr : &LootId_Optional); return nullptr; }
	/** @brief Sets the value of LootId_Optional and also sets LootId_IsSet to true */
	void SetLootId(const int32& NewValue) { LootId_Optional = NewValue; LootId_IsSet = true; LootId_IsNull = false; }
	/** @brief Sets the value of LootId_Optional and also sets LootId_IsSet to true using move semantics */
	void SetLootId(int32&& NewValue) { LootId_Optional = NewValue; LootId_IsSet = true; LootId_IsNull = false; }
	/** @brief Clears the value of LootId_Optional and sets LootId_IsSet to false */
	void ClearLootId() { LootId_Optional = 0; LootId_IsSet = false; LootId_IsNull = false; }
	/** @brief Checks whether LootId_Optional has been set */
	bool IsLootIdSet() const { return LootId_IsSet; }
	/** @brief Returns true if LootId_Optional is set and matches the default value */
	bool IsLootIdDefaultValue() const { return LootId_IsSet && LootId_Optional == 0; }
	/** @brief Sets the value of LootId_Optional to its default and also sets LootId_IsSet to true */
	void SetLootIdToDefault() { SetLootId(0); }
	/** @brief Sets the value explicitly to be treated as null */
	void SetLootIdToNull() { LootId_IsSet = true; LootId_IsNull = true; }
	/** @brief Checks whether LootId_Optional is set to null */
	bool IsLootIdNull() const { return LootId_IsSet && LootId_IsNull; }

	/** @brief Quantity of Inventory */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 Quantity{ 0 };
	/** @brief Gets the value of Quantity */
	int32& GetQuantity() { return Quantity; }
	/** @brief Gets the value of Quantity */
	const int32& GetQuantity() const { return Quantity; }
	/** @brief Sets the value of Quantity */
	void SetQuantity(const int32& NewValue) { Quantity = NewValue;   }
	/** @brief Sets the value of Quantity using move semantics */
	void SetQuantity(int32&& NewValue) { Quantity = NewValue;   }
	/** @brief Returns true if Quantity matches the default value */
	bool IsQuantityDefaultValue() const { return Quantity == 0; }
	/** @brief Sets the value of Quantity to its default  */
	void SetQuantityToDefault() { SetQuantity(0); }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 VendorVersion_Optional{ 0 };
	/** @brief true if VendorVersion_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool VendorVersion_IsSet{ false };
	/** @brief true if VendorVersion_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool VendorVersion_IsNull{ false };
	/** @brief Gets the value of VendorVersion_Optional, regardless of it having been set */
	int32& GetVendorVersion() { return VendorVersion_Optional; }
	/** @brief Gets the value of VendorVersion_Optional, regardless of it having been set */
	const int32& GetVendorVersion() const { return VendorVersion_Optional; }
	/** @brief Gets the value of VendorVersion_Optional, if it has been set, otherwise it returns DefaultValue */
	const int32& GetVendorVersion(const int32& DefaultValue) const { if (VendorVersion_IsSet) return VendorVersion_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of VendorVersion_Optional and returns true if it has been set, otherwise returns false */
	bool GetVendorVersion(int32& OutValue) const { if (VendorVersion_IsSet && !VendorVersion_IsNull) OutValue = VendorVersion_Optional; return VendorVersion_IsSet; }
	/** @brief Returns a pointer to VendorVersion_Optional, if it has been set, otherwise returns nullptr */
	int32* GetVendorVersionOrNull() { if (VendorVersion_IsSet) return (VendorVersion_IsNull ? nullptr : &VendorVersion_Optional); return nullptr; }
	/** @brief Returns a pointer to VendorVersion_Optional, if it has been set, otherwise returns nullptr */
	const int32* GetVendorVersionOrNull() const { if (VendorVersion_IsSet) return (VendorVersion_IsNull ? nullptr : &VendorVersion_Optional); return nullptr; }
	/** @brief Sets the value of VendorVersion_Optional and also sets VendorVersion_IsSet to true */
	void SetVendorVersion(const int32& NewValue) { VendorVersion_Optional = NewValue; VendorVersion_IsSet = true; VendorVersion_IsNull = false; }
	/** @brief Sets the value of VendorVersion_Optional and also sets VendorVersion_IsSet to true using move semantics */
	void SetVendorVersion(int32&& NewValue) { VendorVersion_Optional = NewValue; VendorVersion_IsSet = true; VendorVersion_IsNull = false; }
	/** @brief Clears the value of VendorVersion_Optional and sets VendorVersion_IsSet to false */
	void ClearVendorVersion() { VendorVersion_Optional = 0; VendorVersion_IsSet = false; VendorVersion_IsNull = false; }
	/** @brief Checks whether VendorVersion_Optional has been set */
	bool IsVendorVersionSet() const { return VendorVersion_IsSet; }
	/** @brief Returns true if VendorVersion_Optional is set and matches the default value */
	bool IsVendorVersionDefaultValue() const { return VendorVersion_IsSet && VendorVersion_Optional == 0; }
	/** @brief Sets the value of VendorVersion_Optional to its default and also sets VendorVersion_IsSet to true */
	void SetVendorVersionToDefault() { SetVendorVersion(0); }
	/** @brief Sets the value explicitly to be treated as null */
	void SetVendorVersionToNull() { VendorVersion_IsSet = true; VendorVersion_IsNull = true; }
	/** @brief Checks whether VendorVersion_Optional is set to null */
	bool IsVendorVersionNull() const { return VendorVersion_IsSet && VendorVersion_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString VendorEtag_Optional{  };
	/** @brief true if VendorEtag_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool VendorEtag_IsSet{ false };
	/** @brief true if VendorEtag_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool VendorEtag_IsNull{ false };
	/** @brief Gets the value of VendorEtag_Optional, regardless of it having been set */
	FString& GetVendorEtag() { return VendorEtag_Optional; }
	/** @brief Gets the value of VendorEtag_Optional, regardless of it having been set */
	const FString& GetVendorEtag() const { return VendorEtag_Optional; }
	/** @brief Gets the value of VendorEtag_Optional, if it has been set, otherwise it returns DefaultValue */
	const FString& GetVendorEtag(const FString& DefaultValue) const { if (VendorEtag_IsSet) return VendorEtag_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of VendorEtag_Optional and returns true if it has been set, otherwise returns false */
	bool GetVendorEtag(FString& OutValue) const { if (VendorEtag_IsSet && !VendorEtag_IsNull) OutValue = VendorEtag_Optional; return VendorEtag_IsSet; }
	/** @brief Returns a pointer to VendorEtag_Optional, if it has been set, otherwise returns nullptr */
	FString* GetVendorEtagOrNull() { if (VendorEtag_IsSet) return (VendorEtag_IsNull ? nullptr : &VendorEtag_Optional); return nullptr; }
	/** @brief Returns a pointer to VendorEtag_Optional, if it has been set, otherwise returns nullptr */
	const FString* GetVendorEtagOrNull() const { if (VendorEtag_IsSet) return (VendorEtag_IsNull ? nullptr : &VendorEtag_Optional); return nullptr; }
	/** @brief Sets the value of VendorEtag_Optional and also sets VendorEtag_IsSet to true */
	void SetVendorEtag(const FString& NewValue) { VendorEtag_Optional = NewValue; VendorEtag_IsSet = true; VendorEtag_IsNull = false; }
	/** @brief Sets the value of VendorEtag_Optional and also sets VendorEtag_IsSet to true using move semantics */
	void SetVendorEtag(FString&& NewValue) { VendorEtag_Optional = NewValue; VendorEtag_IsSet = true; VendorEtag_IsNull = false; }
	/** @brief Clears the value of VendorEtag_Optional and sets VendorEtag_IsSet to false */
	void ClearVendorEtag() { VendorEtag_IsSet = false; VendorEtag_IsNull = false; }
	/** @brief Checks whether VendorEtag_Optional has been set */
	bool IsVendorEtagSet() const { return VendorEtag_IsSet; }
	/** @brief Sets the value explicitly to be treated as null */
	void SetVendorEtagToNull() { VendorEtag_IsSet = true; VendorEtag_IsNull = true; }
	/** @brief Checks whether VendorEtag_Optional is set to null */
	bool IsVendorEtagNull() const { return VendorEtag_IsSet && VendorEtag_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TArray<int32> DynamicBundleLootIds_Optional{  };
	/** @brief true if DynamicBundleLootIds_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool DynamicBundleLootIds_IsSet{ false };
	/** @brief true if DynamicBundleLootIds_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool DynamicBundleLootIds_IsNull{ false };
	/** @brief Gets the value of DynamicBundleLootIds_Optional, regardless of it having been set */
	TArray<int32>& GetDynamicBundleLootIds() { return DynamicBundleLootIds_Optional; }
	/** @brief Gets the value of DynamicBundleLootIds_Optional, regardless of it having been set */
	const TArray<int32>& GetDynamicBundleLootIds() const { return DynamicBundleLootIds_Optional; }
	/** @brief Gets the value of DynamicBundleLootIds_Optional, if it has been set, otherwise it returns DefaultValue */
	const TArray<int32>& GetDynamicBundleLootIds(const TArray<int32>& DefaultValue) const { if (DynamicBundleLootIds_IsSet) return DynamicBundleLootIds_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of DynamicBundleLootIds_Optional and returns true if it has been set, otherwise returns false */
	bool GetDynamicBundleLootIds(TArray<int32>& OutValue) const { if (DynamicBundleLootIds_IsSet && !DynamicBundleLootIds_IsNull) OutValue = DynamicBundleLootIds_Optional; return DynamicBundleLootIds_IsSet; }
	/** @brief Returns a pointer to DynamicBundleLootIds_Optional, if it has been set, otherwise returns nullptr */
	TArray<int32>* GetDynamicBundleLootIdsOrNull() { if (DynamicBundleLootIds_IsSet) return (DynamicBundleLootIds_IsNull ? nullptr : &DynamicBundleLootIds_Optional); return nullptr; }
	/** @brief Returns a pointer to DynamicBundleLootIds_Optional, if it has been set, otherwise returns nullptr */
	const TArray<int32>* GetDynamicBundleLootIdsOrNull() const { if (DynamicBundleLootIds_IsSet) return (DynamicBundleLootIds_IsNull ? nullptr : &DynamicBundleLootIds_Optional); return nullptr; }
	/** @brief Sets the value of DynamicBundleLootIds_Optional and also sets DynamicBundleLootIds_IsSet to true */
	void SetDynamicBundleLootIds(const TArray<int32>& NewValue) { DynamicBundleLootIds_Optional = NewValue; DynamicBundleLootIds_IsSet = true; DynamicBundleLootIds_IsNull = false; }
	/** @brief Sets the value of DynamicBundleLootIds_Optional and also sets DynamicBundleLootIds_IsSet to true using move semantics */
	void SetDynamicBundleLootIds(TArray<int32>&& NewValue) { DynamicBundleLootIds_Optional = NewValue; DynamicBundleLootIds_IsSet = true; DynamicBundleLootIds_IsNull = false; }
	/** @brief Clears the value of DynamicBundleLootIds_Optional and sets DynamicBundleLootIds_IsSet to false */
	void ClearDynamicBundleLootIds() { DynamicBundleLootIds_IsSet = false; DynamicBundleLootIds_IsNull = false; }
	/** @brief Checks whether DynamicBundleLootIds_Optional has been set */
	bool IsDynamicBundleLootIdsSet() const { return DynamicBundleLootIds_IsSet; }
	/** @brief Sets the value explicitly to be treated as null */
	void SetDynamicBundleLootIdsToNull() { DynamicBundleLootIds_IsSet = true; DynamicBundleLootIds_IsNull = true; }
	/** @brief Checks whether DynamicBundleLootIds_Optional is set to null */
	bool IsDynamicBundleLootIdsNull() const { return DynamicBundleLootIds_IsSet && DynamicBundleLootIds_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_PurchasePrice PurchasePrice_Optional{  };
	/** @brief true if PurchasePrice_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool PurchasePrice_IsSet{ false };
	/** @brief true if PurchasePrice_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool PurchasePrice_IsNull{ false };
	/** @brief Gets the value of PurchasePrice_Optional, regardless of it having been set */
	FRHAPI_PurchasePrice& GetPurchasePrice() { return PurchasePrice_Optional; }
	/** @brief Gets the value of PurchasePrice_Optional, regardless of it having been set */
	const FRHAPI_PurchasePrice& GetPurchasePrice() const { return PurchasePrice_Optional; }
	/** @brief Gets the value of PurchasePrice_Optional, if it has been set, otherwise it returns DefaultValue */
	const FRHAPI_PurchasePrice& GetPurchasePrice(const FRHAPI_PurchasePrice& DefaultValue) const { if (PurchasePrice_IsSet) return PurchasePrice_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of PurchasePrice_Optional and returns true if it has been set, otherwise returns false */
	bool GetPurchasePrice(FRHAPI_PurchasePrice& OutValue) const { if (PurchasePrice_IsSet && !PurchasePrice_IsNull) OutValue = PurchasePrice_Optional; return PurchasePrice_IsSet; }
	/** @brief Returns a pointer to PurchasePrice_Optional, if it has been set, otherwise returns nullptr */
	FRHAPI_PurchasePrice* GetPurchasePriceOrNull() { if (PurchasePrice_IsSet) return (PurchasePrice_IsNull ? nullptr : &PurchasePrice_Optional); return nullptr; }
	/** @brief Returns a pointer to PurchasePrice_Optional, if it has been set, otherwise returns nullptr */
	const FRHAPI_PurchasePrice* GetPurchasePriceOrNull() const { if (PurchasePrice_IsSet) return (PurchasePrice_IsNull ? nullptr : &PurchasePrice_Optional); return nullptr; }
	/** @brief Sets the value of PurchasePrice_Optional and also sets PurchasePrice_IsSet to true */
	void SetPurchasePrice(const FRHAPI_PurchasePrice& NewValue) { PurchasePrice_Optional = NewValue; PurchasePrice_IsSet = true; PurchasePrice_IsNull = false; }
	/** @brief Sets the value of PurchasePrice_Optional and also sets PurchasePrice_IsSet to true using move semantics */
	void SetPurchasePrice(FRHAPI_PurchasePrice&& NewValue) { PurchasePrice_Optional = NewValue; PurchasePrice_IsSet = true; PurchasePrice_IsNull = false; }
	/** @brief Clears the value of PurchasePrice_Optional and sets PurchasePrice_IsSet to false */
	void ClearPurchasePrice() { PurchasePrice_IsSet = false; PurchasePrice_IsNull = false; }
	/** @brief Checks whether PurchasePrice_Optional has been set */
	bool IsPurchasePriceSet() const { return PurchasePrice_IsSet; }
	/** @brief Sets the value explicitly to be treated as null */
	void SetPurchasePriceToNull() { PurchasePrice_IsSet = true; PurchasePrice_IsNull = true; }
	/** @brief Checks whether PurchasePrice_Optional is set to null */
	bool IsPurchasePriceNull() const { return PurchasePrice_IsSet && PurchasePrice_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString ExternalTranId_Optional{  };
	/** @brief true if ExternalTranId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool ExternalTranId_IsSet{ false };
	/** @brief true if ExternalTranId_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool ExternalTranId_IsNull{ false };
	/** @brief Gets the value of ExternalTranId_Optional, regardless of it having been set */
	FString& GetExternalTranId() { return ExternalTranId_Optional; }
	/** @brief Gets the value of ExternalTranId_Optional, regardless of it having been set */
	const FString& GetExternalTranId() const { return ExternalTranId_Optional; }
	/** @brief Gets the value of ExternalTranId_Optional, if it has been set, otherwise it returns DefaultValue */
	const FString& GetExternalTranId(const FString& DefaultValue) const { if (ExternalTranId_IsSet) return ExternalTranId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of ExternalTranId_Optional and returns true if it has been set, otherwise returns false */
	bool GetExternalTranId(FString& OutValue) const { if (ExternalTranId_IsSet && !ExternalTranId_IsNull) OutValue = ExternalTranId_Optional; return ExternalTranId_IsSet; }
	/** @brief Returns a pointer to ExternalTranId_Optional, if it has been set, otherwise returns nullptr */
	FString* GetExternalTranIdOrNull() { if (ExternalTranId_IsSet) return (ExternalTranId_IsNull ? nullptr : &ExternalTranId_Optional); return nullptr; }
	/** @brief Returns a pointer to ExternalTranId_Optional, if it has been set, otherwise returns nullptr */
	const FString* GetExternalTranIdOrNull() const { if (ExternalTranId_IsSet) return (ExternalTranId_IsNull ? nullptr : &ExternalTranId_Optional); return nullptr; }
	/** @brief Sets the value of ExternalTranId_Optional and also sets ExternalTranId_IsSet to true */
	void SetExternalTranId(const FString& NewValue) { ExternalTranId_Optional = NewValue; ExternalTranId_IsSet = true; ExternalTranId_IsNull = false; }
	/** @brief Sets the value of ExternalTranId_Optional and also sets ExternalTranId_IsSet to true using move semantics */
	void SetExternalTranId(FString&& NewValue) { ExternalTranId_Optional = NewValue; ExternalTranId_IsSet = true; ExternalTranId_IsNull = false; }
	/** @brief Clears the value of ExternalTranId_Optional and sets ExternalTranId_IsSet to false */
	void ClearExternalTranId() { ExternalTranId_IsSet = false; ExternalTranId_IsNull = false; }
	/** @brief Checks whether ExternalTranId_Optional has been set */
	bool IsExternalTranIdSet() const { return ExternalTranId_IsSet; }
	/** @brief Sets the value explicitly to be treated as null */
	void SetExternalTranIdToNull() { ExternalTranId_IsSet = true; ExternalTranId_IsNull = true; }
	/** @brief Checks whether ExternalTranId_Optional is set to null */
	bool IsExternalTranIdNull() const { return ExternalTranId_IsSet && ExternalTranId_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString ExternalItemSku_Optional{  };
	/** @brief true if ExternalItemSku_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool ExternalItemSku_IsSet{ false };
	/** @brief true if ExternalItemSku_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool ExternalItemSku_IsNull{ false };
	/** @brief Gets the value of ExternalItemSku_Optional, regardless of it having been set */
	FString& GetExternalItemSku() { return ExternalItemSku_Optional; }
	/** @brief Gets the value of ExternalItemSku_Optional, regardless of it having been set */
	const FString& GetExternalItemSku() const { return ExternalItemSku_Optional; }
	/** @brief Gets the value of ExternalItemSku_Optional, if it has been set, otherwise it returns DefaultValue */
	const FString& GetExternalItemSku(const FString& DefaultValue) const { if (ExternalItemSku_IsSet) return ExternalItemSku_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of ExternalItemSku_Optional and returns true if it has been set, otherwise returns false */
	bool GetExternalItemSku(FString& OutValue) const { if (ExternalItemSku_IsSet && !ExternalItemSku_IsNull) OutValue = ExternalItemSku_Optional; return ExternalItemSku_IsSet; }
	/** @brief Returns a pointer to ExternalItemSku_Optional, if it has been set, otherwise returns nullptr */
	FString* GetExternalItemSkuOrNull() { if (ExternalItemSku_IsSet) return (ExternalItemSku_IsNull ? nullptr : &ExternalItemSku_Optional); return nullptr; }
	/** @brief Returns a pointer to ExternalItemSku_Optional, if it has been set, otherwise returns nullptr */
	const FString* GetExternalItemSkuOrNull() const { if (ExternalItemSku_IsSet) return (ExternalItemSku_IsNull ? nullptr : &ExternalItemSku_Optional); return nullptr; }
	/** @brief Sets the value of ExternalItemSku_Optional and also sets ExternalItemSku_IsSet to true */
	void SetExternalItemSku(const FString& NewValue) { ExternalItemSku_Optional = NewValue; ExternalItemSku_IsSet = true; ExternalItemSku_IsNull = false; }
	/** @brief Sets the value of ExternalItemSku_Optional and also sets ExternalItemSku_IsSet to true using move semantics */
	void SetExternalItemSku(FString&& NewValue) { ExternalItemSku_Optional = NewValue; ExternalItemSku_IsSet = true; ExternalItemSku_IsNull = false; }
	/** @brief Clears the value of ExternalItemSku_Optional and sets ExternalItemSku_IsSet to false */
	void ClearExternalItemSku() { ExternalItemSku_IsSet = false; ExternalItemSku_IsNull = false; }
	/** @brief Checks whether ExternalItemSku_Optional has been set */
	bool IsExternalItemSkuSet() const { return ExternalItemSku_IsSet; }
	/** @brief Sets the value explicitly to be treated as null */
	void SetExternalItemSkuToNull() { ExternalItemSku_IsSet = true; ExternalItemSku_IsNull = true; }
	/** @brief Checks whether ExternalItemSku_Optional is set to null */
	bool IsExternalItemSkuNull() const { return ExternalItemSku_IsSet && ExternalItemSku_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	ERHAPI_InventoryBucket UseInventoryBucket_Optional{  };
	/** @brief true if UseInventoryBucket_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool UseInventoryBucket_IsSet{ false };
	/** @brief true if UseInventoryBucket_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool UseInventoryBucket_IsNull{ false };
	/** @brief Gets the value of UseInventoryBucket_Optional, regardless of it having been set */
	ERHAPI_InventoryBucket& GetUseInventoryBucket() { return UseInventoryBucket_Optional; }
	/** @brief Gets the value of UseInventoryBucket_Optional, regardless of it having been set */
	const ERHAPI_InventoryBucket& GetUseInventoryBucket() const { return UseInventoryBucket_Optional; }
	/** @brief Gets the value of UseInventoryBucket_Optional, if it has been set, otherwise it returns DefaultValue */
	const ERHAPI_InventoryBucket& GetUseInventoryBucket(const ERHAPI_InventoryBucket& DefaultValue) const { if (UseInventoryBucket_IsSet) return UseInventoryBucket_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of UseInventoryBucket_Optional and returns true if it has been set, otherwise returns false */
	bool GetUseInventoryBucket(ERHAPI_InventoryBucket& OutValue) const { if (UseInventoryBucket_IsSet && !UseInventoryBucket_IsNull) OutValue = UseInventoryBucket_Optional; return UseInventoryBucket_IsSet; }
	/** @brief Returns a pointer to UseInventoryBucket_Optional, if it has been set, otherwise returns nullptr */
	ERHAPI_InventoryBucket* GetUseInventoryBucketOrNull() { if (UseInventoryBucket_IsSet) return (UseInventoryBucket_IsNull ? nullptr : &UseInventoryBucket_Optional); return nullptr; }
	/** @brief Returns a pointer to UseInventoryBucket_Optional, if it has been set, otherwise returns nullptr */
	const ERHAPI_InventoryBucket* GetUseInventoryBucketOrNull() const { if (UseInventoryBucket_IsSet) return (UseInventoryBucket_IsNull ? nullptr : &UseInventoryBucket_Optional); return nullptr; }
	/** @brief Sets the value of UseInventoryBucket_Optional and also sets UseInventoryBucket_IsSet to true */
	void SetUseInventoryBucket(const ERHAPI_InventoryBucket& NewValue) { UseInventoryBucket_Optional = NewValue; UseInventoryBucket_IsSet = true; UseInventoryBucket_IsNull = false; }
	/** @brief Sets the value of UseInventoryBucket_Optional and also sets UseInventoryBucket_IsSet to true using move semantics */
	void SetUseInventoryBucket(ERHAPI_InventoryBucket&& NewValue) { UseInventoryBucket_Optional = NewValue; UseInventoryBucket_IsSet = true; UseInventoryBucket_IsNull = false; }
	/** @brief Clears the value of UseInventoryBucket_Optional and sets UseInventoryBucket_IsSet to false */
	void ClearUseInventoryBucket() { UseInventoryBucket_IsSet = false; UseInventoryBucket_IsNull = false; }
	/** @brief Checks whether UseInventoryBucket_Optional has been set */
	bool IsUseInventoryBucketSet() const { return UseInventoryBucket_IsSet; }
	/** @brief Sets the value explicitly to be treated as null */
	void SetUseInventoryBucketToNull() { UseInventoryBucket_IsSet = true; UseInventoryBucket_IsNull = true; }
	/** @brief Checks whether UseInventoryBucket_Optional is set to null */
	bool IsUseInventoryBucketNull() const { return UseInventoryBucket_IsSet && UseInventoryBucket_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 PlayerPortalEventId_Optional{ 0 };
	/** @brief true if PlayerPortalEventId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool PlayerPortalEventId_IsSet{ false };
	/** @brief true if PlayerPortalEventId_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool PlayerPortalEventId_IsNull{ false };
	/** @brief Gets the value of PlayerPortalEventId_Optional, regardless of it having been set */
	int32& GetPlayerPortalEventId() { return PlayerPortalEventId_Optional; }
	/** @brief Gets the value of PlayerPortalEventId_Optional, regardless of it having been set */
	const int32& GetPlayerPortalEventId() const { return PlayerPortalEventId_Optional; }
	/** @brief Gets the value of PlayerPortalEventId_Optional, if it has been set, otherwise it returns DefaultValue */
	const int32& GetPlayerPortalEventId(const int32& DefaultValue) const { if (PlayerPortalEventId_IsSet) return PlayerPortalEventId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of PlayerPortalEventId_Optional and returns true if it has been set, otherwise returns false */
	bool GetPlayerPortalEventId(int32& OutValue) const { if (PlayerPortalEventId_IsSet && !PlayerPortalEventId_IsNull) OutValue = PlayerPortalEventId_Optional; return PlayerPortalEventId_IsSet; }
	/** @brief Returns a pointer to PlayerPortalEventId_Optional, if it has been set, otherwise returns nullptr */
	int32* GetPlayerPortalEventIdOrNull() { if (PlayerPortalEventId_IsSet) return (PlayerPortalEventId_IsNull ? nullptr : &PlayerPortalEventId_Optional); return nullptr; }
	/** @brief Returns a pointer to PlayerPortalEventId_Optional, if it has been set, otherwise returns nullptr */
	const int32* GetPlayerPortalEventIdOrNull() const { if (PlayerPortalEventId_IsSet) return (PlayerPortalEventId_IsNull ? nullptr : &PlayerPortalEventId_Optional); return nullptr; }
	/** @brief Sets the value of PlayerPortalEventId_Optional and also sets PlayerPortalEventId_IsSet to true */
	void SetPlayerPortalEventId(const int32& NewValue) { PlayerPortalEventId_Optional = NewValue; PlayerPortalEventId_IsSet = true; PlayerPortalEventId_IsNull = false; }
	/** @brief Sets the value of PlayerPortalEventId_Optional and also sets PlayerPortalEventId_IsSet to true using move semantics */
	void SetPlayerPortalEventId(int32&& NewValue) { PlayerPortalEventId_Optional = NewValue; PlayerPortalEventId_IsSet = true; PlayerPortalEventId_IsNull = false; }
	/** @brief Clears the value of PlayerPortalEventId_Optional and sets PlayerPortalEventId_IsSet to false */
	void ClearPlayerPortalEventId() { PlayerPortalEventId_Optional = 0; PlayerPortalEventId_IsSet = false; PlayerPortalEventId_IsNull = false; }
	/** @brief Checks whether PlayerPortalEventId_Optional has been set */
	bool IsPlayerPortalEventIdSet() const { return PlayerPortalEventId_IsSet; }
	/** @brief Returns true if PlayerPortalEventId_Optional is set and matches the default value */
	bool IsPlayerPortalEventIdDefaultValue() const { return PlayerPortalEventId_IsSet && PlayerPortalEventId_Optional == 0; }
	/** @brief Sets the value of PlayerPortalEventId_Optional to its default and also sets PlayerPortalEventId_IsSet to true */
	void SetPlayerPortalEventIdToDefault() { SetPlayerPortalEventId(0); }
	/** @brief Sets the value explicitly to be treated as null */
	void SetPlayerPortalEventIdToNull() { PlayerPortalEventId_IsSet = true; PlayerPortalEventId_IsNull = true; }
	/** @brief Checks whether PlayerPortalEventId_Optional is set to null */
	bool IsPlayerPortalEventIdNull() const { return PlayerPortalEventId_IsSet && PlayerPortalEventId_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FGuid InventoryId_Optional{  };
	/** @brief true if InventoryId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool InventoryId_IsSet{ false };
	/** @brief true if InventoryId_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool InventoryId_IsNull{ false };
	/** @brief Gets the value of InventoryId_Optional, regardless of it having been set */
	FGuid& GetInventoryId() { return InventoryId_Optional; }
	/** @brief Gets the value of InventoryId_Optional, regardless of it having been set */
	const FGuid& GetInventoryId() const { return InventoryId_Optional; }
	/** @brief Gets the value of InventoryId_Optional, if it has been set, otherwise it returns DefaultValue */
	const FGuid& GetInventoryId(const FGuid& DefaultValue) const { if (InventoryId_IsSet) return InventoryId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of InventoryId_Optional and returns true if it has been set, otherwise returns false */
	bool GetInventoryId(FGuid& OutValue) const { if (InventoryId_IsSet && !InventoryId_IsNull) OutValue = InventoryId_Optional; return InventoryId_IsSet; }
	/** @brief Returns a pointer to InventoryId_Optional, if it has been set, otherwise returns nullptr */
	FGuid* GetInventoryIdOrNull() { if (InventoryId_IsSet) return (InventoryId_IsNull ? nullptr : &InventoryId_Optional); return nullptr; }
	/** @brief Returns a pointer to InventoryId_Optional, if it has been set, otherwise returns nullptr */
	const FGuid* GetInventoryIdOrNull() const { if (InventoryId_IsSet) return (InventoryId_IsNull ? nullptr : &InventoryId_Optional); return nullptr; }
	/** @brief Sets the value of InventoryId_Optional and also sets InventoryId_IsSet to true */
	void SetInventoryId(const FGuid& NewValue) { InventoryId_Optional = NewValue; InventoryId_IsSet = true; InventoryId_IsNull = false; }
	/** @brief Sets the value of InventoryId_Optional and also sets InventoryId_IsSet to true using move semantics */
	void SetInventoryId(FGuid&& NewValue) { InventoryId_Optional = NewValue; InventoryId_IsSet = true; InventoryId_IsNull = false; }
	/** @brief Clears the value of InventoryId_Optional and sets InventoryId_IsSet to false */
	void ClearInventoryId() { InventoryId_IsSet = false; InventoryId_IsNull = false; }
	/** @brief Checks whether InventoryId_Optional has been set */
	bool IsInventoryIdSet() const { return InventoryId_IsSet; }
	/** @brief Sets the value explicitly to be treated as null */
	void SetInventoryIdToNull() { InventoryId_IsSet = true; InventoryId_IsNull = true; }
	/** @brief Checks whether InventoryId_Optional is set to null */
	bool IsInventoryIdNull() const { return InventoryId_IsSet && InventoryId_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 LegacyInventoryId_Optional{ 0 };
	/** @brief true if LegacyInventoryId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool LegacyInventoryId_IsSet{ false };
	/** @brief true if LegacyInventoryId_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool LegacyInventoryId_IsNull{ false };
	/** @brief Gets the value of LegacyInventoryId_Optional, regardless of it having been set */
	int32& GetLegacyInventoryId() { return LegacyInventoryId_Optional; }
	/** @brief Gets the value of LegacyInventoryId_Optional, regardless of it having been set */
	const int32& GetLegacyInventoryId() const { return LegacyInventoryId_Optional; }
	/** @brief Gets the value of LegacyInventoryId_Optional, if it has been set, otherwise it returns DefaultValue */
	const int32& GetLegacyInventoryId(const int32& DefaultValue) const { if (LegacyInventoryId_IsSet) return LegacyInventoryId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of LegacyInventoryId_Optional and returns true if it has been set, otherwise returns false */
	bool GetLegacyInventoryId(int32& OutValue) const { if (LegacyInventoryId_IsSet && !LegacyInventoryId_IsNull) OutValue = LegacyInventoryId_Optional; return LegacyInventoryId_IsSet; }
	/** @brief Returns a pointer to LegacyInventoryId_Optional, if it has been set, otherwise returns nullptr */
	int32* GetLegacyInventoryIdOrNull() { if (LegacyInventoryId_IsSet) return (LegacyInventoryId_IsNull ? nullptr : &LegacyInventoryId_Optional); return nullptr; }
	/** @brief Returns a pointer to LegacyInventoryId_Optional, if it has been set, otherwise returns nullptr */
	const int32* GetLegacyInventoryIdOrNull() const { if (LegacyInventoryId_IsSet) return (LegacyInventoryId_IsNull ? nullptr : &LegacyInventoryId_Optional); return nullptr; }
	/** @brief Sets the value of LegacyInventoryId_Optional and also sets LegacyInventoryId_IsSet to true */
	void SetLegacyInventoryId(const int32& NewValue) { LegacyInventoryId_Optional = NewValue; LegacyInventoryId_IsSet = true; LegacyInventoryId_IsNull = false; }
	/** @brief Sets the value of LegacyInventoryId_Optional and also sets LegacyInventoryId_IsSet to true using move semantics */
	void SetLegacyInventoryId(int32&& NewValue) { LegacyInventoryId_Optional = NewValue; LegacyInventoryId_IsSet = true; LegacyInventoryId_IsNull = false; }
	/** @brief Clears the value of LegacyInventoryId_Optional and sets LegacyInventoryId_IsSet to false */
	void ClearLegacyInventoryId() { LegacyInventoryId_Optional = 0; LegacyInventoryId_IsSet = false; LegacyInventoryId_IsNull = false; }
	/** @brief Checks whether LegacyInventoryId_Optional has been set */
	bool IsLegacyInventoryIdSet() const { return LegacyInventoryId_IsSet; }
	/** @brief Returns true if LegacyInventoryId_Optional is set and matches the default value */
	bool IsLegacyInventoryIdDefaultValue() const { return LegacyInventoryId_IsSet && LegacyInventoryId_Optional == 0; }
	/** @brief Sets the value of LegacyInventoryId_Optional to its default and also sets LegacyInventoryId_IsSet to true */
	void SetLegacyInventoryIdToDefault() { SetLegacyInventoryId(0); }
	/** @brief Sets the value explicitly to be treated as null */
	void SetLegacyInventoryIdToNull() { LegacyInventoryId_IsSet = true; LegacyInventoryId_IsNull = true; }
	/** @brief Checks whether LegacyInventoryId_Optional is set to null */
	bool IsLegacyInventoryIdNull() const { return LegacyInventoryId_IsSet && LegacyInventoryId_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 ItemId_Optional{ 0 };
	/** @brief true if ItemId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool ItemId_IsSet{ false };
	/** @brief true if ItemId_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool ItemId_IsNull{ false };
	/** @brief Gets the value of ItemId_Optional, regardless of it having been set */
	int32& GetItemId() { return ItemId_Optional; }
	/** @brief Gets the value of ItemId_Optional, regardless of it having been set */
	const int32& GetItemId() const { return ItemId_Optional; }
	/** @brief Gets the value of ItemId_Optional, if it has been set, otherwise it returns DefaultValue */
	const int32& GetItemId(const int32& DefaultValue) const { if (ItemId_IsSet) return ItemId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of ItemId_Optional and returns true if it has been set, otherwise returns false */
	bool GetItemId(int32& OutValue) const { if (ItemId_IsSet && !ItemId_IsNull) OutValue = ItemId_Optional; return ItemId_IsSet; }
	/** @brief Returns a pointer to ItemId_Optional, if it has been set, otherwise returns nullptr */
	int32* GetItemIdOrNull() { if (ItemId_IsSet) return (ItemId_IsNull ? nullptr : &ItemId_Optional); return nullptr; }
	/** @brief Returns a pointer to ItemId_Optional, if it has been set, otherwise returns nullptr */
	const int32* GetItemIdOrNull() const { if (ItemId_IsSet) return (ItemId_IsNull ? nullptr : &ItemId_Optional); return nullptr; }
	/** @brief Sets the value of ItemId_Optional and also sets ItemId_IsSet to true */
	void SetItemId(const int32& NewValue) { ItemId_Optional = NewValue; ItemId_IsSet = true; ItemId_IsNull = false; }
	/** @brief Sets the value of ItemId_Optional and also sets ItemId_IsSet to true using move semantics */
	void SetItemId(int32&& NewValue) { ItemId_Optional = NewValue; ItemId_IsSet = true; ItemId_IsNull = false; }
	/** @brief Clears the value of ItemId_Optional and sets ItemId_IsSet to false */
	void ClearItemId() { ItemId_Optional = 0; ItemId_IsSet = false; ItemId_IsNull = false; }
	/** @brief Checks whether ItemId_Optional has been set */
	bool IsItemIdSet() const { return ItemId_IsSet; }
	/** @brief Returns true if ItemId_Optional is set and matches the default value */
	bool IsItemIdDefaultValue() const { return ItemId_IsSet && ItemId_Optional == 0; }
	/** @brief Sets the value of ItemId_Optional to its default and also sets ItemId_IsSet to true */
	void SetItemIdToDefault() { SetItemId(0); }
	/** @brief Sets the value explicitly to be treated as null */
	void SetItemIdToNull() { ItemId_IsSet = true; ItemId_IsNull = true; }
	/** @brief Checks whether ItemId_Optional is set to null */
	bool IsItemIdNull() const { return ItemId_IsSet && ItemId_IsNull; }

	/** @brief Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FDateTime Expires_Optional{  };
	/** @brief true if Expires_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Expires_IsSet{ false };
	/** @brief true if Expires_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Expires_IsNull{ false };
	/** @brief Gets the value of Expires_Optional, regardless of it having been set */
	FDateTime& GetExpires() { return Expires_Optional; }
	/** @brief Gets the value of Expires_Optional, regardless of it having been set */
	const FDateTime& GetExpires() const { return Expires_Optional; }
	/** @brief Gets the value of Expires_Optional, if it has been set, otherwise it returns DefaultValue */
	const FDateTime& GetExpires(const FDateTime& DefaultValue) const { if (Expires_IsSet) return Expires_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Expires_Optional and returns true if it has been set, otherwise returns false */
	bool GetExpires(FDateTime& OutValue) const { if (Expires_IsSet && !Expires_IsNull) OutValue = Expires_Optional; return Expires_IsSet; }
	/** @brief Returns a pointer to Expires_Optional, if it has been set, otherwise returns nullptr */
	FDateTime* GetExpiresOrNull() { if (Expires_IsSet) return (Expires_IsNull ? nullptr : &Expires_Optional); return nullptr; }
	/** @brief Returns a pointer to Expires_Optional, if it has been set, otherwise returns nullptr */
	const FDateTime* GetExpiresOrNull() const { if (Expires_IsSet) return (Expires_IsNull ? nullptr : &Expires_Optional); return nullptr; }
	/** @brief Sets the value of Expires_Optional and also sets Expires_IsSet to true */
	void SetExpires(const FDateTime& NewValue) { Expires_Optional = NewValue; Expires_IsSet = true; Expires_IsNull = false; }
	/** @brief Sets the value of Expires_Optional and also sets Expires_IsSet to true using move semantics */
	void SetExpires(FDateTime&& NewValue) { Expires_Optional = NewValue; Expires_IsSet = true; Expires_IsNull = false; }
	/** @brief Clears the value of Expires_Optional and sets Expires_IsSet to false */
	void ClearExpires() { Expires_IsSet = false; Expires_IsNull = false; }
	/** @brief Checks whether Expires_Optional has been set */
	bool IsExpiresSet() const { return Expires_IsSet; }
	/** @brief Sets the value explicitly to be treated as null */
	void SetExpiresToNull() { Expires_IsSet = true; Expires_IsNull = true; }
	/** @brief Checks whether Expires_Optional is set to null */
	bool IsExpiresNull() const { return Expires_IsSet && Expires_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TMap<FString, FString> CustomData_Optional{  };
	/** @brief true if CustomData_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool CustomData_IsSet{ false };
	/** @brief true if CustomData_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool CustomData_IsNull{ false };
	/** @brief Gets the value of CustomData_Optional, regardless of it having been set */
	TMap<FString, FString>& GetCustomData() { return CustomData_Optional; }
	/** @brief Gets the value of CustomData_Optional, regardless of it having been set */
	const TMap<FString, FString>& GetCustomData() const { return CustomData_Optional; }
	/** @brief Gets the value of CustomData_Optional, if it has been set, otherwise it returns DefaultValue */
	const TMap<FString, FString>& GetCustomData(const TMap<FString, FString>& DefaultValue) const { if (CustomData_IsSet) return CustomData_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of CustomData_Optional and returns true if it has been set, otherwise returns false */
	bool GetCustomData(TMap<FString, FString>& OutValue) const { if (CustomData_IsSet && !CustomData_IsNull) OutValue = CustomData_Optional; return CustomData_IsSet; }
	/** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
	TMap<FString, FString>* GetCustomDataOrNull() { if (CustomData_IsSet) return (CustomData_IsNull ? nullptr : &CustomData_Optional); return nullptr; }
	/** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
	const TMap<FString, FString>* GetCustomDataOrNull() const { if (CustomData_IsSet) return (CustomData_IsNull ? nullptr : &CustomData_Optional); return nullptr; }
	/** @brief Sets the value of CustomData_Optional and also sets CustomData_IsSet to true */
	void SetCustomData(const TMap<FString, FString>& NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true; CustomData_IsNull = false; }
	/** @brief Sets the value of CustomData_Optional and also sets CustomData_IsSet to true using move semantics */
	void SetCustomData(TMap<FString, FString>&& NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true; CustomData_IsNull = false; }
	/** @brief Clears the value of CustomData_Optional and sets CustomData_IsSet to false */
	void ClearCustomData() { CustomData_IsSet = false; CustomData_IsNull = false; }
	/** @brief Checks whether CustomData_Optional has been set */
	bool IsCustomDataSet() const { return CustomData_IsSet; }
	/** @brief Sets the value explicitly to be treated as null */
	void SetCustomDataToNull() { CustomData_IsSet = true; CustomData_IsNull = true; }
	/** @brief Checks whether CustomData_Optional is set to null */
	bool IsCustomDataNull() const { return CustomData_IsSet && CustomData_IsNull; }

	/** @brief Unique Identifier for the Order Entry. */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString EntryId{  };
	/** @brief Gets the value of EntryId */
	FString& GetEntryId() { return EntryId; }
	/** @brief Gets the value of EntryId */
	const FString& GetEntryId() const { return EntryId; }
	/** @brief Sets the value of EntryId */
	void SetEntryId(const FString& NewValue) { EntryId = NewValue;   }
	/** @brief Sets the value of EntryId using move semantics */
	void SetEntryId(FString&& NewValue) { EntryId = NewValue;   }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	ERHAPI_PlayerOrderEntryResult Result_Optional{  };
	/** @brief true if Result_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Result_IsSet{ false };
	/** @brief Gets the value of Result_Optional, regardless of it having been set */
	ERHAPI_PlayerOrderEntryResult& GetResult() { return Result_Optional; }
	/** @brief Gets the value of Result_Optional, regardless of it having been set */
	const ERHAPI_PlayerOrderEntryResult& GetResult() const { return Result_Optional; }
	/** @brief Gets the value of Result_Optional, if it has been set, otherwise it returns DefaultValue */
	const ERHAPI_PlayerOrderEntryResult& GetResult(const ERHAPI_PlayerOrderEntryResult& DefaultValue) const { if (Result_IsSet) return Result_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Result_Optional and returns true if it has been set, otherwise returns false */
	bool GetResult(ERHAPI_PlayerOrderEntryResult& OutValue) const { if (Result_IsSet) OutValue = Result_Optional; return Result_IsSet; }
	/** @brief Returns a pointer to Result_Optional, if it has been set, otherwise returns nullptr */
	ERHAPI_PlayerOrderEntryResult* GetResultOrNull() { if (Result_IsSet) return (&Result_Optional); return nullptr; }
	/** @brief Returns a pointer to Result_Optional, if it has been set, otherwise returns nullptr */
	const ERHAPI_PlayerOrderEntryResult* GetResultOrNull() const { if (Result_IsSet) return (&Result_Optional); return nullptr; }
	/** @brief Sets the value of Result_Optional and also sets Result_IsSet to true */
	void SetResult(const ERHAPI_PlayerOrderEntryResult& NewValue) { Result_Optional = NewValue; Result_IsSet = true;  }
	/** @brief Sets the value of Result_Optional and also sets Result_IsSet to true using move semantics */
	void SetResult(ERHAPI_PlayerOrderEntryResult&& NewValue) { Result_Optional = NewValue; Result_IsSet = true;  }
	/** @brief Clears the value of Result_Optional and sets Result_IsSet to false */
	void ClearResult() { Result_IsSet = false;  }
	/** @brief Checks whether Result_Optional has been set */
	bool IsResultSet() const { return Result_IsSet; }

	/** @brief Details for the Order Entry. */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TArray<FRHAPI_PlayerOrderDetail> Details_Optional{  };
	/** @brief true if Details_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Details_IsSet{ false };
	/** @brief Gets the value of Details_Optional, regardless of it having been set */
	TArray<FRHAPI_PlayerOrderDetail>& GetDetails() { return Details_Optional; }
	/** @brief Gets the value of Details_Optional, regardless of it having been set */
	const TArray<FRHAPI_PlayerOrderDetail>& GetDetails() const { return Details_Optional; }
	/** @brief Gets the value of Details_Optional, if it has been set, otherwise it returns DefaultValue */
	const TArray<FRHAPI_PlayerOrderDetail>& GetDetails(const TArray<FRHAPI_PlayerOrderDetail>& DefaultValue) const { if (Details_IsSet) return Details_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Details_Optional and returns true if it has been set, otherwise returns false */
	bool GetDetails(TArray<FRHAPI_PlayerOrderDetail>& OutValue) const { if (Details_IsSet) OutValue = Details_Optional; return Details_IsSet; }
	/** @brief Returns a pointer to Details_Optional, if it has been set, otherwise returns nullptr */
	TArray<FRHAPI_PlayerOrderDetail>* GetDetailsOrNull() { if (Details_IsSet) return (&Details_Optional); return nullptr; }
	/** @brief Returns a pointer to Details_Optional, if it has been set, otherwise returns nullptr */
	const TArray<FRHAPI_PlayerOrderDetail>* GetDetailsOrNull() const { if (Details_IsSet) return (&Details_Optional); return nullptr; }
	/** @brief Sets the value of Details_Optional and also sets Details_IsSet to true */
	void SetDetails(const TArray<FRHAPI_PlayerOrderDetail>& NewValue) { Details_Optional = NewValue; Details_IsSet = true;  }
	/** @brief Sets the value of Details_Optional and also sets Details_IsSet to true using move semantics */
	void SetDetails(TArray<FRHAPI_PlayerOrderDetail>&& NewValue) { Details_Optional = NewValue; Details_IsSet = true;  }
	/** @brief Clears the value of Details_Optional and sets Details_IsSet to false */
	void ClearDetails() { Details_IsSet = false;  }
	/** @brief Checks whether Details_Optional has been set */
	bool IsDetailsSet() const { return Details_IsSet; }
};

/** @} */
