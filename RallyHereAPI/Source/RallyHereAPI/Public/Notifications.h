// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "Notification.h"
#include "Notifications.generated.h"

/** @defgroup RHAPI_Notifications RallyHere API Model Notifications
 *  @{
 */

/**
 * @brief 
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_Notifications : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	/** @brief List of notifications */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TArray<FRHAPI_Notification> Notifications_Optional{  };
	/** @brief true if Notifications_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Notifications_IsSet{ false };
	/** @brief Gets the value of Notifications_Optional, regardless of it having been set */
	TArray<FRHAPI_Notification>& GetNotifications() { return Notifications_Optional; }
	/** @brief Gets the value of Notifications_Optional, regardless of it having been set */
	const TArray<FRHAPI_Notification>& GetNotifications() const { return Notifications_Optional; }
	/** @brief Gets the value of Notifications_Optional, if it has been set, otherwise it returns DefaultValue */
	const TArray<FRHAPI_Notification>& GetNotifications(const TArray<FRHAPI_Notification>& DefaultValue) const { if (Notifications_IsSet) return Notifications_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Notifications_Optional and returns true if it has been set, otherwise returns false */
	bool GetNotifications(TArray<FRHAPI_Notification>& OutValue) const { if (Notifications_IsSet) OutValue = Notifications_Optional; return Notifications_IsSet; }
	/** @brief Returns a pointer to Notifications_Optional, if it has been set, otherwise returns nullptr */
	TArray<FRHAPI_Notification>* GetNotificationsOrNull() { if (Notifications_IsSet) return &Notifications_Optional; return nullptr; }
	/** @brief Returns a pointer to Notifications_Optional, if it has been set, otherwise returns nullptr */
	const TArray<FRHAPI_Notification>* GetNotificationsOrNull() const { if (Notifications_IsSet) return &Notifications_Optional; return nullptr; }
	/** @brief Sets the value of Notifications_Optional and also sets Notifications_IsSet to true */
	void SetNotifications(TArray<FRHAPI_Notification> NewValue) { Notifications_Optional = NewValue; Notifications_IsSet = true; }
	 /** @brief Clears the value of Notifications_Optional and sets Notifications_IsSet to false */
	void ClearNotifications() { Notifications_IsSet = false; }

	/** @brief Cursor to use for the next request */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString Cursor{  };
	/** @brief Gets the value of Cursor */
	FString& GetCursor() { return Cursor; }
	/** @brief Gets the value of Cursor */
	const FString& GetCursor() const { return Cursor; }
	/** @brief Sets the value of Cursor */
	void SetCursor(FString NewValue) { Cursor = NewValue;  }
};

/** @} */
