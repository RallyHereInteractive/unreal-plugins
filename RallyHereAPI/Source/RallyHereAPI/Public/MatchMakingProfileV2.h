// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "ProfileJoinMode.h"
#include "MatchMakingProfileV2.generated.h"

/** @defgroup RHAPI_MatchMakingProfileV2 RallyHere API Model MatchMakingProfileV2
 *  @{
 */

/**
 * @brief A profile that describes what pools of players a session will be a part of when matchmaking
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_MatchMakingProfileV2 : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	/** @brief ID of the matchmaking profile to join */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString MatchMakingProfileId{  };
	/** @brief Gets the value of MatchMakingProfileId */
	FORCEINLINE FString& GetMatchMakingProfileId() { return MatchMakingProfileId; }
	/** @brief Gets the value of MatchMakingProfileId */
	FORCEINLINE const FString& GetMatchMakingProfileId() const { return MatchMakingProfileId; }
	/** @brief Sets the value of MatchMakingProfileId */
	FORCEINLINE void SetMatchMakingProfileId(const FString& NewValue) { MatchMakingProfileId = NewValue;   }
	/** @brief Sets the value of MatchMakingProfileId using move semantics */
	FORCEINLINE void SetMatchMakingProfileId(FString&& NewValue) { MatchMakingProfileId = NewValue;   }

	/** @brief What mode to set on the matchmaking profile (normal, backfill etc) */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	ERHAPI_ProfileJoinMode JoinMode_Optional{  };
	/** @brief true if JoinMode_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool JoinMode_IsSet{ false };
	/** @brief Gets the value of JoinMode_Optional, regardless of it having been set */
	FORCEINLINE ERHAPI_ProfileJoinMode& GetJoinMode() { return JoinMode_Optional; }
	/** @brief Gets the value of JoinMode_Optional, regardless of it having been set */
	FORCEINLINE const ERHAPI_ProfileJoinMode& GetJoinMode() const { return JoinMode_Optional; }
	/** @brief Gets the value of JoinMode_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const ERHAPI_ProfileJoinMode& GetJoinMode(const ERHAPI_ProfileJoinMode& DefaultValue) const { if (JoinMode_IsSet) return JoinMode_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of JoinMode_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetJoinMode(ERHAPI_ProfileJoinMode& OutValue) const { if (JoinMode_IsSet) OutValue = JoinMode_Optional; return JoinMode_IsSet; }
	/** @brief Returns a pointer to JoinMode_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE ERHAPI_ProfileJoinMode* GetJoinModeOrNull() { if (JoinMode_IsSet) return (&JoinMode_Optional); return nullptr; }
	/** @brief Returns a pointer to JoinMode_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const ERHAPI_ProfileJoinMode* GetJoinModeOrNull() const { if (JoinMode_IsSet) return (&JoinMode_Optional); return nullptr; }
	/** @brief Sets the value of JoinMode_Optional and also sets JoinMode_IsSet to true */
	FORCEINLINE void SetJoinMode(const ERHAPI_ProfileJoinMode& NewValue) { JoinMode_Optional = NewValue; JoinMode_IsSet = true;  }
	/** @brief Sets the value of JoinMode_Optional and also sets JoinMode_IsSet to true using move semantics */
	FORCEINLINE void SetJoinMode(ERHAPI_ProfileJoinMode&& NewValue) { JoinMode_Optional = NewValue; JoinMode_IsSet = true;  }
	/** @brief Clears the value of JoinMode_Optional and sets JoinMode_IsSet to false */
	void ClearJoinMode() { JoinMode_IsSet = false;  }

	/** @brief Which instance template to use when launching a match in this profile */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FGuid InstanceRequestTemplateId_Optional{  };
	/** @brief true if InstanceRequestTemplateId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool InstanceRequestTemplateId_IsSet{ false };
	/** @brief Gets the value of InstanceRequestTemplateId_Optional, regardless of it having been set */
	FORCEINLINE FGuid& GetInstanceRequestTemplateId() { return InstanceRequestTemplateId_Optional; }
	/** @brief Gets the value of InstanceRequestTemplateId_Optional, regardless of it having been set */
	FORCEINLINE const FGuid& GetInstanceRequestTemplateId() const { return InstanceRequestTemplateId_Optional; }
	/** @brief Gets the value of InstanceRequestTemplateId_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FGuid& GetInstanceRequestTemplateId(const FGuid& DefaultValue) const { if (InstanceRequestTemplateId_IsSet) return InstanceRequestTemplateId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of InstanceRequestTemplateId_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetInstanceRequestTemplateId(FGuid& OutValue) const { if (InstanceRequestTemplateId_IsSet) OutValue = InstanceRequestTemplateId_Optional; return InstanceRequestTemplateId_IsSet; }
	/** @brief Returns a pointer to InstanceRequestTemplateId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FGuid* GetInstanceRequestTemplateIdOrNull() { if (InstanceRequestTemplateId_IsSet) return (&InstanceRequestTemplateId_Optional); return nullptr; }
	/** @brief Returns a pointer to InstanceRequestTemplateId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FGuid* GetInstanceRequestTemplateIdOrNull() const { if (InstanceRequestTemplateId_IsSet) return (&InstanceRequestTemplateId_Optional); return nullptr; }
	/** @brief Sets the value of InstanceRequestTemplateId_Optional and also sets InstanceRequestTemplateId_IsSet to true */
	FORCEINLINE void SetInstanceRequestTemplateId(const FGuid& NewValue) { InstanceRequestTemplateId_Optional = NewValue; InstanceRequestTemplateId_IsSet = true;  }
	/** @brief Sets the value of InstanceRequestTemplateId_Optional and also sets InstanceRequestTemplateId_IsSet to true using move semantics */
	FORCEINLINE void SetInstanceRequestTemplateId(FGuid&& NewValue) { InstanceRequestTemplateId_Optional = NewValue; InstanceRequestTemplateId_IsSet = true;  }
	/** @brief Clears the value of InstanceRequestTemplateId_Optional and sets InstanceRequestTemplateId_IsSet to false */
	void ClearInstanceRequestTemplateId() { InstanceRequestTemplateId_IsSet = false;  }

	/** @brief Which rank this profile should use MMR from to make matches from, and update at the end of match (1v1 MMR or 2v2 MMR for example) */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString RankId_Optional{  };
	/** @brief true if RankId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool RankId_IsSet{ false };
	/** @brief Gets the value of RankId_Optional, regardless of it having been set */
	FORCEINLINE FString& GetRankId() { return RankId_Optional; }
	/** @brief Gets the value of RankId_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetRankId() const { return RankId_Optional; }
	/** @brief Gets the value of RankId_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetRankId(const FString& DefaultValue) const { if (RankId_IsSet) return RankId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of RankId_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetRankId(FString& OutValue) const { if (RankId_IsSet) OutValue = RankId_Optional; return RankId_IsSet; }
	/** @brief Returns a pointer to RankId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetRankIdOrNull() { if (RankId_IsSet) return (&RankId_Optional); return nullptr; }
	/** @brief Returns a pointer to RankId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetRankIdOrNull() const { if (RankId_IsSet) return (&RankId_Optional); return nullptr; }
	/** @brief Sets the value of RankId_Optional and also sets RankId_IsSet to true */
	FORCEINLINE void SetRankId(const FString& NewValue) { RankId_Optional = NewValue; RankId_IsSet = true;  }
	/** @brief Sets the value of RankId_Optional and also sets RankId_IsSet to true using move semantics */
	FORCEINLINE void SetRankId(FString&& NewValue) { RankId_Optional = NewValue; RankId_IsSet = true;  }
	/** @brief Clears the value of RankId_Optional and sets RankId_IsSet to false */
	void ClearRankId() { RankId_IsSet = false;  }

	/** @brief The number of sides a game in this profile will have (2 in a 1v1 and 3 in a 1v1v1 for example */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 NumSides_Optional{ 0 };
	/** @brief true if NumSides_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool NumSides_IsSet{ false };
	/** @brief Gets the value of NumSides_Optional, regardless of it having been set */
	FORCEINLINE int32& GetNumSides() { return NumSides_Optional; }
	/** @brief Gets the value of NumSides_Optional, regardless of it having been set */
	FORCEINLINE const int32& GetNumSides() const { return NumSides_Optional; }
	/** @brief Gets the value of NumSides_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const int32& GetNumSides(const int32& DefaultValue) const { if (NumSides_IsSet) return NumSides_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of NumSides_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetNumSides(int32& OutValue) const { if (NumSides_IsSet) OutValue = NumSides_Optional; return NumSides_IsSet; }
	/** @brief Returns a pointer to NumSides_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE int32* GetNumSidesOrNull() { if (NumSides_IsSet) return (&NumSides_Optional); return nullptr; }
	/** @brief Returns a pointer to NumSides_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const int32* GetNumSidesOrNull() const { if (NumSides_IsSet) return (&NumSides_Optional); return nullptr; }
	/** @brief Sets the value of NumSides_Optional and also sets NumSides_IsSet to true */
	FORCEINLINE void SetNumSides(const int32& NewValue) { NumSides_Optional = NewValue; NumSides_IsSet = true;  }
	/** @brief Sets the value of NumSides_Optional and also sets NumSides_IsSet to true using move semantics */
	FORCEINLINE void SetNumSides(int32&& NewValue) { NumSides_Optional = NewValue; NumSides_IsSet = true;  }
	/** @brief Clears the value of NumSides_Optional and sets NumSides_IsSet to false */
	void ClearNumSides() { NumSides_Optional = 0; NumSides_IsSet = false;  }
	/** @brief Returns the default value of NumSides */
	FORCEINLINE int32 GetDefaultValue_NumSides() { return 0; }

	/** @brief The maximum number of players that can be on each team */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 MaxPlayersPerSide_Optional{ 0 };
	/** @brief true if MaxPlayersPerSide_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool MaxPlayersPerSide_IsSet{ false };
	/** @brief Gets the value of MaxPlayersPerSide_Optional, regardless of it having been set */
	FORCEINLINE int32& GetMaxPlayersPerSide() { return MaxPlayersPerSide_Optional; }
	/** @brief Gets the value of MaxPlayersPerSide_Optional, regardless of it having been set */
	FORCEINLINE const int32& GetMaxPlayersPerSide() const { return MaxPlayersPerSide_Optional; }
	/** @brief Gets the value of MaxPlayersPerSide_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const int32& GetMaxPlayersPerSide(const int32& DefaultValue) const { if (MaxPlayersPerSide_IsSet) return MaxPlayersPerSide_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of MaxPlayersPerSide_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetMaxPlayersPerSide(int32& OutValue) const { if (MaxPlayersPerSide_IsSet) OutValue = MaxPlayersPerSide_Optional; return MaxPlayersPerSide_IsSet; }
	/** @brief Returns a pointer to MaxPlayersPerSide_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE int32* GetMaxPlayersPerSideOrNull() { if (MaxPlayersPerSide_IsSet) return (&MaxPlayersPerSide_Optional); return nullptr; }
	/** @brief Returns a pointer to MaxPlayersPerSide_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const int32* GetMaxPlayersPerSideOrNull() const { if (MaxPlayersPerSide_IsSet) return (&MaxPlayersPerSide_Optional); return nullptr; }
	/** @brief Sets the value of MaxPlayersPerSide_Optional and also sets MaxPlayersPerSide_IsSet to true */
	FORCEINLINE void SetMaxPlayersPerSide(const int32& NewValue) { MaxPlayersPerSide_Optional = NewValue; MaxPlayersPerSide_IsSet = true;  }
	/** @brief Sets the value of MaxPlayersPerSide_Optional and also sets MaxPlayersPerSide_IsSet to true using move semantics */
	FORCEINLINE void SetMaxPlayersPerSide(int32&& NewValue) { MaxPlayersPerSide_Optional = NewValue; MaxPlayersPerSide_IsSet = true;  }
	/** @brief Clears the value of MaxPlayersPerSide_Optional and sets MaxPlayersPerSide_IsSet to false */
	void ClearMaxPlayersPerSide() { MaxPlayersPerSide_Optional = 0; MaxPlayersPerSide_IsSet = false;  }
	/** @brief Returns the default value of MaxPlayersPerSide */
	FORCEINLINE int32 GetDefaultValue_MaxPlayersPerSide() { return 0; }

	/** @brief The minimum number of players that can be on each team */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 MinPlayersPerSide_Optional{ 0 };
	/** @brief true if MinPlayersPerSide_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool MinPlayersPerSide_IsSet{ false };
	/** @brief Gets the value of MinPlayersPerSide_Optional, regardless of it having been set */
	FORCEINLINE int32& GetMinPlayersPerSide() { return MinPlayersPerSide_Optional; }
	/** @brief Gets the value of MinPlayersPerSide_Optional, regardless of it having been set */
	FORCEINLINE const int32& GetMinPlayersPerSide() const { return MinPlayersPerSide_Optional; }
	/** @brief Gets the value of MinPlayersPerSide_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const int32& GetMinPlayersPerSide(const int32& DefaultValue) const { if (MinPlayersPerSide_IsSet) return MinPlayersPerSide_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of MinPlayersPerSide_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetMinPlayersPerSide(int32& OutValue) const { if (MinPlayersPerSide_IsSet) OutValue = MinPlayersPerSide_Optional; return MinPlayersPerSide_IsSet; }
	/** @brief Returns a pointer to MinPlayersPerSide_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE int32* GetMinPlayersPerSideOrNull() { if (MinPlayersPerSide_IsSet) return (&MinPlayersPerSide_Optional); return nullptr; }
	/** @brief Returns a pointer to MinPlayersPerSide_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const int32* GetMinPlayersPerSideOrNull() const { if (MinPlayersPerSide_IsSet) return (&MinPlayersPerSide_Optional); return nullptr; }
	/** @brief Sets the value of MinPlayersPerSide_Optional and also sets MinPlayersPerSide_IsSet to true */
	FORCEINLINE void SetMinPlayersPerSide(const int32& NewValue) { MinPlayersPerSide_Optional = NewValue; MinPlayersPerSide_IsSet = true;  }
	/** @brief Sets the value of MinPlayersPerSide_Optional and also sets MinPlayersPerSide_IsSet to true using move semantics */
	FORCEINLINE void SetMinPlayersPerSide(int32&& NewValue) { MinPlayersPerSide_Optional = NewValue; MinPlayersPerSide_IsSet = true;  }
	/** @brief Clears the value of MinPlayersPerSide_Optional and sets MinPlayersPerSide_IsSet to false */
	void ClearMinPlayersPerSide() { MinPlayersPerSide_Optional = 0; MinPlayersPerSide_IsSet = false;  }
	/** @brief Returns the default value of MinPlayersPerSide */
	FORCEINLINE int32 GetDefaultValue_MinPlayersPerSide() { return 0; }

	/** @brief Legacy config to help migrate clients */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_JsonObject LegacyConfig_Optional{  };
	/** @brief true if LegacyConfig_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool LegacyConfig_IsSet{ false };
	/** @brief Gets the value of LegacyConfig_Optional, regardless of it having been set */
	FORCEINLINE FRHAPI_JsonObject& GetLegacyConfig() { return LegacyConfig_Optional; }
	/** @brief Gets the value of LegacyConfig_Optional, regardless of it having been set */
	FORCEINLINE const FRHAPI_JsonObject& GetLegacyConfig() const { return LegacyConfig_Optional; }
	/** @brief Gets the value of LegacyConfig_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FRHAPI_JsonObject& GetLegacyConfig(const FRHAPI_JsonObject& DefaultValue) const { if (LegacyConfig_IsSet) return LegacyConfig_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of LegacyConfig_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetLegacyConfig(FRHAPI_JsonObject& OutValue) const { if (LegacyConfig_IsSet) OutValue = LegacyConfig_Optional; return LegacyConfig_IsSet; }
	/** @brief Returns a pointer to LegacyConfig_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FRHAPI_JsonObject* GetLegacyConfigOrNull() { if (LegacyConfig_IsSet) return (&LegacyConfig_Optional); return nullptr; }
	/** @brief Returns a pointer to LegacyConfig_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FRHAPI_JsonObject* GetLegacyConfigOrNull() const { if (LegacyConfig_IsSet) return (&LegacyConfig_Optional); return nullptr; }
	/** @brief Sets the value of LegacyConfig_Optional and also sets LegacyConfig_IsSet to true */
	FORCEINLINE void SetLegacyConfig(const FRHAPI_JsonObject& NewValue) { LegacyConfig_Optional = NewValue; LegacyConfig_IsSet = true;  }
	/** @brief Sets the value of LegacyConfig_Optional and also sets LegacyConfig_IsSet to true using move semantics */
	FORCEINLINE void SetLegacyConfig(FRHAPI_JsonObject&& NewValue) { LegacyConfig_Optional = NewValue; LegacyConfig_IsSet = true;  }
	/** @brief Clears the value of LegacyConfig_Optional and sets LegacyConfig_IsSet to false */
	void ClearLegacyConfig() { LegacyConfig_IsSet = false;  }

	/** @brief Which deserter this profile should check before allowing players to join matchmaking */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString DeserterId_Optional{  };
	/** @brief true if DeserterId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool DeserterId_IsSet{ false };
	/** @brief Gets the value of DeserterId_Optional, regardless of it having been set */
	FORCEINLINE FString& GetDeserterId() { return DeserterId_Optional; }
	/** @brief Gets the value of DeserterId_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetDeserterId() const { return DeserterId_Optional; }
	/** @brief Gets the value of DeserterId_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetDeserterId(const FString& DefaultValue) const { if (DeserterId_IsSet) return DeserterId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of DeserterId_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetDeserterId(FString& OutValue) const { if (DeserterId_IsSet) OutValue = DeserterId_Optional; return DeserterId_IsSet; }
	/** @brief Returns a pointer to DeserterId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetDeserterIdOrNull() { if (DeserterId_IsSet) return (&DeserterId_Optional); return nullptr; }
	/** @brief Returns a pointer to DeserterId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetDeserterIdOrNull() const { if (DeserterId_IsSet) return (&DeserterId_Optional); return nullptr; }
	/** @brief Sets the value of DeserterId_Optional and also sets DeserterId_IsSet to true */
	FORCEINLINE void SetDeserterId(const FString& NewValue) { DeserterId_Optional = NewValue; DeserterId_IsSet = true;  }
	/** @brief Sets the value of DeserterId_Optional and also sets DeserterId_IsSet to true using move semantics */
	FORCEINLINE void SetDeserterId(FString&& NewValue) { DeserterId_Optional = NewValue; DeserterId_IsSet = true;  }
	/** @brief Clears the value of DeserterId_Optional and sets DeserterId_IsSet to false */
	void ClearDeserterId() { DeserterId_IsSet = false;  }

	/** @brief What type of session should result from matchmaking on this profile */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FGuid SessionTemplateId_Optional{  };
	/** @brief true if SessionTemplateId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool SessionTemplateId_IsSet{ false };
	/** @brief Gets the value of SessionTemplateId_Optional, regardless of it having been set */
	FORCEINLINE FGuid& GetSessionTemplateId() { return SessionTemplateId_Optional; }
	/** @brief Gets the value of SessionTemplateId_Optional, regardless of it having been set */
	FORCEINLINE const FGuid& GetSessionTemplateId() const { return SessionTemplateId_Optional; }
	/** @brief Gets the value of SessionTemplateId_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FGuid& GetSessionTemplateId(const FGuid& DefaultValue) const { if (SessionTemplateId_IsSet) return SessionTemplateId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of SessionTemplateId_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetSessionTemplateId(FGuid& OutValue) const { if (SessionTemplateId_IsSet) OutValue = SessionTemplateId_Optional; return SessionTemplateId_IsSet; }
	/** @brief Returns a pointer to SessionTemplateId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FGuid* GetSessionTemplateIdOrNull() { if (SessionTemplateId_IsSet) return (&SessionTemplateId_Optional); return nullptr; }
	/** @brief Returns a pointer to SessionTemplateId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FGuid* GetSessionTemplateIdOrNull() const { if (SessionTemplateId_IsSet) return (&SessionTemplateId_Optional); return nullptr; }
	/** @brief Sets the value of SessionTemplateId_Optional and also sets SessionTemplateId_IsSet to true */
	FORCEINLINE void SetSessionTemplateId(const FGuid& NewValue) { SessionTemplateId_Optional = NewValue; SessionTemplateId_IsSet = true;  }
	/** @brief Sets the value of SessionTemplateId_Optional and also sets SessionTemplateId_IsSet to true using move semantics */
	FORCEINLINE void SetSessionTemplateId(FGuid&& NewValue) { SessionTemplateId_Optional = NewValue; SessionTemplateId_IsSet = true;  }
	/** @brief Clears the value of SessionTemplateId_Optional and sets SessionTemplateId_IsSet to false */
	void ClearSessionTemplateId() { SessionTemplateId_IsSet = false;  }

	/** @brief Custom data about this profile */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TMap<FString, FString> CustomData_Optional{  };
	/** @brief true if CustomData_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool CustomData_IsSet{ false };
	/** @brief Gets the value of CustomData_Optional, regardless of it having been set */
	FORCEINLINE TMap<FString, FString>& GetCustomData() { return CustomData_Optional; }
	/** @brief Gets the value of CustomData_Optional, regardless of it having been set */
	FORCEINLINE const TMap<FString, FString>& GetCustomData() const { return CustomData_Optional; }
	/** @brief Gets the value of CustomData_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const TMap<FString, FString>& GetCustomData(const TMap<FString, FString>& DefaultValue) const { if (CustomData_IsSet) return CustomData_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of CustomData_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetCustomData(TMap<FString, FString>& OutValue) const { if (CustomData_IsSet) OutValue = CustomData_Optional; return CustomData_IsSet; }
	/** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE TMap<FString, FString>* GetCustomDataOrNull() { if (CustomData_IsSet) return (&CustomData_Optional); return nullptr; }
	/** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const TMap<FString, FString>* GetCustomDataOrNull() const { if (CustomData_IsSet) return (&CustomData_Optional); return nullptr; }
	/** @brief Sets the value of CustomData_Optional and also sets CustomData_IsSet to true */
	FORCEINLINE void SetCustomData(const TMap<FString, FString>& NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true;  }
	/** @brief Sets the value of CustomData_Optional and also sets CustomData_IsSet to true using move semantics */
	FORCEINLINE void SetCustomData(TMap<FString, FString>&& NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true;  }
	/** @brief Clears the value of CustomData_Optional and sets CustomData_IsSet to false */
	void ClearCustomData() { CustomData_IsSet = false;  }
};

/** @} */
