// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "PexCount.h"
#include "PexHostScores.h"
#include "PexStat.h"
#include "PexHostResponse.generated.h"

/** @defgroup RHAPI_PexHostResponse RallyHere API Model PexHostResponse
 *  @{
 */

/**
 * @brief 
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_PexHostResponse : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	/** @brief Timestamp of when the resource was last modified */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FDateTime LastModifiedTimestamp_Optional{  };
	/** @brief true if LastModifiedTimestamp_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool LastModifiedTimestamp_IsSet{ false };
	/** @brief Gets the value of LastModifiedTimestamp_Optional, regardless of it having been set */
	FDateTime& GetLastModifiedTimestamp() { return LastModifiedTimestamp_Optional; }
	/** @brief Gets the value of LastModifiedTimestamp_Optional, regardless of it having been set */
	const FDateTime& GetLastModifiedTimestamp() const { return LastModifiedTimestamp_Optional; }
	/** @brief Gets the value of LastModifiedTimestamp_Optional, if it has been set, otherwise it returns DefaultValue */
	const FDateTime& GetLastModifiedTimestamp(const FDateTime& DefaultValue) const { if (LastModifiedTimestamp_IsSet) return LastModifiedTimestamp_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of LastModifiedTimestamp_Optional and returns true if it has been set, otherwise returns false */
	bool GetLastModifiedTimestamp(FDateTime& OutValue) const { if (LastModifiedTimestamp_IsSet) OutValue = LastModifiedTimestamp_Optional; return LastModifiedTimestamp_IsSet; }
	/** @brief Returns a pointer to LastModifiedTimestamp_Optional, if it has been set, otherwise returns nullptr */
	FDateTime* GetLastModifiedTimestampOrNull() { if (LastModifiedTimestamp_IsSet) return &LastModifiedTimestamp_Optional; return nullptr; }
	/** @brief Returns a pointer to LastModifiedTimestamp_Optional, if it has been set, otherwise returns nullptr */
	const FDateTime* GetLastModifiedTimestampOrNull() const { if (LastModifiedTimestamp_IsSet) return &LastModifiedTimestamp_Optional; return nullptr; }
	/** @brief Sets the value of LastModifiedTimestamp_Optional and also sets LastModifiedTimestamp_IsSet to true */
	void SetLastModifiedTimestamp(const FDateTime& NewValue) { LastModifiedTimestamp_Optional = NewValue; LastModifiedTimestamp_IsSet = true; }
	/** @brief Sets the value of LastModifiedTimestamp_Optional and also sets LastModifiedTimestamp_IsSet to true using move semantics */
	void SetLastModifiedTimestamp(FDateTime&& NewValue) { LastModifiedTimestamp_Optional = NewValue; LastModifiedTimestamp_IsSet = true; }
	 /** @brief Clears the value of LastModifiedTimestamp_Optional and sets LastModifiedTimestamp_IsSet to false */
	void ClearLastModifiedTimestamp() { LastModifiedTimestamp_IsSet = false; }

	/** @brief Timestamp of when the resource was created */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FDateTime CreatedTimestamp_Optional{  };
	/** @brief true if CreatedTimestamp_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool CreatedTimestamp_IsSet{ false };
	/** @brief Gets the value of CreatedTimestamp_Optional, regardless of it having been set */
	FDateTime& GetCreatedTimestamp() { return CreatedTimestamp_Optional; }
	/** @brief Gets the value of CreatedTimestamp_Optional, regardless of it having been set */
	const FDateTime& GetCreatedTimestamp() const { return CreatedTimestamp_Optional; }
	/** @brief Gets the value of CreatedTimestamp_Optional, if it has been set, otherwise it returns DefaultValue */
	const FDateTime& GetCreatedTimestamp(const FDateTime& DefaultValue) const { if (CreatedTimestamp_IsSet) return CreatedTimestamp_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of CreatedTimestamp_Optional and returns true if it has been set, otherwise returns false */
	bool GetCreatedTimestamp(FDateTime& OutValue) const { if (CreatedTimestamp_IsSet) OutValue = CreatedTimestamp_Optional; return CreatedTimestamp_IsSet; }
	/** @brief Returns a pointer to CreatedTimestamp_Optional, if it has been set, otherwise returns nullptr */
	FDateTime* GetCreatedTimestampOrNull() { if (CreatedTimestamp_IsSet) return &CreatedTimestamp_Optional; return nullptr; }
	/** @brief Returns a pointer to CreatedTimestamp_Optional, if it has been set, otherwise returns nullptr */
	const FDateTime* GetCreatedTimestampOrNull() const { if (CreatedTimestamp_IsSet) return &CreatedTimestamp_Optional; return nullptr; }
	/** @brief Sets the value of CreatedTimestamp_Optional and also sets CreatedTimestamp_IsSet to true */
	void SetCreatedTimestamp(const FDateTime& NewValue) { CreatedTimestamp_Optional = NewValue; CreatedTimestamp_IsSet = true; }
	/** @brief Sets the value of CreatedTimestamp_Optional and also sets CreatedTimestamp_IsSet to true using move semantics */
	void SetCreatedTimestamp(FDateTime&& NewValue) { CreatedTimestamp_Optional = NewValue; CreatedTimestamp_IsSet = true; }
	 /** @brief Clears the value of CreatedTimestamp_Optional and sets CreatedTimestamp_IsSet to false */
	void ClearCreatedTimestamp() { CreatedTimestamp_IsSet = false; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_PexStat FrameTime_Optional{  };
	/** @brief true if FrameTime_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool FrameTime_IsSet{ false };
	/** @brief Gets the value of FrameTime_Optional, regardless of it having been set */
	FRHAPI_PexStat& GetFrameTime() { return FrameTime_Optional; }
	/** @brief Gets the value of FrameTime_Optional, regardless of it having been set */
	const FRHAPI_PexStat& GetFrameTime() const { return FrameTime_Optional; }
	/** @brief Gets the value of FrameTime_Optional, if it has been set, otherwise it returns DefaultValue */
	const FRHAPI_PexStat& GetFrameTime(const FRHAPI_PexStat& DefaultValue) const { if (FrameTime_IsSet) return FrameTime_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of FrameTime_Optional and returns true if it has been set, otherwise returns false */
	bool GetFrameTime(FRHAPI_PexStat& OutValue) const { if (FrameTime_IsSet) OutValue = FrameTime_Optional; return FrameTime_IsSet; }
	/** @brief Returns a pointer to FrameTime_Optional, if it has been set, otherwise returns nullptr */
	FRHAPI_PexStat* GetFrameTimeOrNull() { if (FrameTime_IsSet) return &FrameTime_Optional; return nullptr; }
	/** @brief Returns a pointer to FrameTime_Optional, if it has been set, otherwise returns nullptr */
	const FRHAPI_PexStat* GetFrameTimeOrNull() const { if (FrameTime_IsSet) return &FrameTime_Optional; return nullptr; }
	/** @brief Sets the value of FrameTime_Optional and also sets FrameTime_IsSet to true */
	void SetFrameTime(const FRHAPI_PexStat& NewValue) { FrameTime_Optional = NewValue; FrameTime_IsSet = true; }
	/** @brief Sets the value of FrameTime_Optional and also sets FrameTime_IsSet to true using move semantics */
	void SetFrameTime(FRHAPI_PexStat&& NewValue) { FrameTime_Optional = NewValue; FrameTime_IsSet = true; }
	 /** @brief Clears the value of FrameTime_Optional and sets FrameTime_IsSet to false */
	void ClearFrameTime() { FrameTime_IsSet = false; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_PexStat DeltaTime_Optional{  };
	/** @brief true if DeltaTime_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool DeltaTime_IsSet{ false };
	/** @brief Gets the value of DeltaTime_Optional, regardless of it having been set */
	FRHAPI_PexStat& GetDeltaTime() { return DeltaTime_Optional; }
	/** @brief Gets the value of DeltaTime_Optional, regardless of it having been set */
	const FRHAPI_PexStat& GetDeltaTime() const { return DeltaTime_Optional; }
	/** @brief Gets the value of DeltaTime_Optional, if it has been set, otherwise it returns DefaultValue */
	const FRHAPI_PexStat& GetDeltaTime(const FRHAPI_PexStat& DefaultValue) const { if (DeltaTime_IsSet) return DeltaTime_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of DeltaTime_Optional and returns true if it has been set, otherwise returns false */
	bool GetDeltaTime(FRHAPI_PexStat& OutValue) const { if (DeltaTime_IsSet) OutValue = DeltaTime_Optional; return DeltaTime_IsSet; }
	/** @brief Returns a pointer to DeltaTime_Optional, if it has been set, otherwise returns nullptr */
	FRHAPI_PexStat* GetDeltaTimeOrNull() { if (DeltaTime_IsSet) return &DeltaTime_Optional; return nullptr; }
	/** @brief Returns a pointer to DeltaTime_Optional, if it has been set, otherwise returns nullptr */
	const FRHAPI_PexStat* GetDeltaTimeOrNull() const { if (DeltaTime_IsSet) return &DeltaTime_Optional; return nullptr; }
	/** @brief Sets the value of DeltaTime_Optional and also sets DeltaTime_IsSet to true */
	void SetDeltaTime(const FRHAPI_PexStat& NewValue) { DeltaTime_Optional = NewValue; DeltaTime_IsSet = true; }
	/** @brief Sets the value of DeltaTime_Optional and also sets DeltaTime_IsSet to true using move semantics */
	void SetDeltaTime(FRHAPI_PexStat&& NewValue) { DeltaTime_Optional = NewValue; DeltaTime_IsSet = true; }
	 /** @brief Clears the value of DeltaTime_Optional and sets DeltaTime_IsSet to false */
	void ClearDeltaTime() { DeltaTime_IsSet = false; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_PexStat TickCount_Optional{  };
	/** @brief true if TickCount_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool TickCount_IsSet{ false };
	/** @brief Gets the value of TickCount_Optional, regardless of it having been set */
	FRHAPI_PexStat& GetTickCount() { return TickCount_Optional; }
	/** @brief Gets the value of TickCount_Optional, regardless of it having been set */
	const FRHAPI_PexStat& GetTickCount() const { return TickCount_Optional; }
	/** @brief Gets the value of TickCount_Optional, if it has been set, otherwise it returns DefaultValue */
	const FRHAPI_PexStat& GetTickCount(const FRHAPI_PexStat& DefaultValue) const { if (TickCount_IsSet) return TickCount_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of TickCount_Optional and returns true if it has been set, otherwise returns false */
	bool GetTickCount(FRHAPI_PexStat& OutValue) const { if (TickCount_IsSet) OutValue = TickCount_Optional; return TickCount_IsSet; }
	/** @brief Returns a pointer to TickCount_Optional, if it has been set, otherwise returns nullptr */
	FRHAPI_PexStat* GetTickCountOrNull() { if (TickCount_IsSet) return &TickCount_Optional; return nullptr; }
	/** @brief Returns a pointer to TickCount_Optional, if it has been set, otherwise returns nullptr */
	const FRHAPI_PexStat* GetTickCountOrNull() const { if (TickCount_IsSet) return &TickCount_Optional; return nullptr; }
	/** @brief Sets the value of TickCount_Optional and also sets TickCount_IsSet to true */
	void SetTickCount(const FRHAPI_PexStat& NewValue) { TickCount_Optional = NewValue; TickCount_IsSet = true; }
	/** @brief Sets the value of TickCount_Optional and also sets TickCount_IsSet to true using move semantics */
	void SetTickCount(FRHAPI_PexStat&& NewValue) { TickCount_Optional = NewValue; TickCount_IsSet = true; }
	 /** @brief Clears the value of TickCount_Optional and sets TickCount_IsSet to false */
	void ClearTickCount() { TickCount_IsSet = false; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_PexStat DelayedTickCount_Optional{  };
	/** @brief true if DelayedTickCount_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool DelayedTickCount_IsSet{ false };
	/** @brief Gets the value of DelayedTickCount_Optional, regardless of it having been set */
	FRHAPI_PexStat& GetDelayedTickCount() { return DelayedTickCount_Optional; }
	/** @brief Gets the value of DelayedTickCount_Optional, regardless of it having been set */
	const FRHAPI_PexStat& GetDelayedTickCount() const { return DelayedTickCount_Optional; }
	/** @brief Gets the value of DelayedTickCount_Optional, if it has been set, otherwise it returns DefaultValue */
	const FRHAPI_PexStat& GetDelayedTickCount(const FRHAPI_PexStat& DefaultValue) const { if (DelayedTickCount_IsSet) return DelayedTickCount_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of DelayedTickCount_Optional and returns true if it has been set, otherwise returns false */
	bool GetDelayedTickCount(FRHAPI_PexStat& OutValue) const { if (DelayedTickCount_IsSet) OutValue = DelayedTickCount_Optional; return DelayedTickCount_IsSet; }
	/** @brief Returns a pointer to DelayedTickCount_Optional, if it has been set, otherwise returns nullptr */
	FRHAPI_PexStat* GetDelayedTickCountOrNull() { if (DelayedTickCount_IsSet) return &DelayedTickCount_Optional; return nullptr; }
	/** @brief Returns a pointer to DelayedTickCount_Optional, if it has been set, otherwise returns nullptr */
	const FRHAPI_PexStat* GetDelayedTickCountOrNull() const { if (DelayedTickCount_IsSet) return &DelayedTickCount_Optional; return nullptr; }
	/** @brief Sets the value of DelayedTickCount_Optional and also sets DelayedTickCount_IsSet to true */
	void SetDelayedTickCount(const FRHAPI_PexStat& NewValue) { DelayedTickCount_Optional = NewValue; DelayedTickCount_IsSet = true; }
	/** @brief Sets the value of DelayedTickCount_Optional and also sets DelayedTickCount_IsSet to true using move semantics */
	void SetDelayedTickCount(FRHAPI_PexStat&& NewValue) { DelayedTickCount_Optional = NewValue; DelayedTickCount_IsSet = true; }
	 /** @brief Clears the value of DelayedTickCount_Optional and sets DelayedTickCount_IsSet to false */
	void ClearDelayedTickCount() { DelayedTickCount_IsSet = false; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_PexStat MemoryWs_Optional{  };
	/** @brief true if MemoryWs_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool MemoryWs_IsSet{ false };
	/** @brief Gets the value of MemoryWs_Optional, regardless of it having been set */
	FRHAPI_PexStat& GetMemoryWs() { return MemoryWs_Optional; }
	/** @brief Gets the value of MemoryWs_Optional, regardless of it having been set */
	const FRHAPI_PexStat& GetMemoryWs() const { return MemoryWs_Optional; }
	/** @brief Gets the value of MemoryWs_Optional, if it has been set, otherwise it returns DefaultValue */
	const FRHAPI_PexStat& GetMemoryWs(const FRHAPI_PexStat& DefaultValue) const { if (MemoryWs_IsSet) return MemoryWs_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of MemoryWs_Optional and returns true if it has been set, otherwise returns false */
	bool GetMemoryWs(FRHAPI_PexStat& OutValue) const { if (MemoryWs_IsSet) OutValue = MemoryWs_Optional; return MemoryWs_IsSet; }
	/** @brief Returns a pointer to MemoryWs_Optional, if it has been set, otherwise returns nullptr */
	FRHAPI_PexStat* GetMemoryWsOrNull() { if (MemoryWs_IsSet) return &MemoryWs_Optional; return nullptr; }
	/** @brief Returns a pointer to MemoryWs_Optional, if it has been set, otherwise returns nullptr */
	const FRHAPI_PexStat* GetMemoryWsOrNull() const { if (MemoryWs_IsSet) return &MemoryWs_Optional; return nullptr; }
	/** @brief Sets the value of MemoryWs_Optional and also sets MemoryWs_IsSet to true */
	void SetMemoryWs(const FRHAPI_PexStat& NewValue) { MemoryWs_Optional = NewValue; MemoryWs_IsSet = true; }
	/** @brief Sets the value of MemoryWs_Optional and also sets MemoryWs_IsSet to true using move semantics */
	void SetMemoryWs(FRHAPI_PexStat&& NewValue) { MemoryWs_Optional = NewValue; MemoryWs_IsSet = true; }
	 /** @brief Clears the value of MemoryWs_Optional and sets MemoryWs_IsSet to false */
	void ClearMemoryWs() { MemoryWs_IsSet = false; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_PexStat MemoryVb_Optional{  };
	/** @brief true if MemoryVb_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool MemoryVb_IsSet{ false };
	/** @brief Gets the value of MemoryVb_Optional, regardless of it having been set */
	FRHAPI_PexStat& GetMemoryVb() { return MemoryVb_Optional; }
	/** @brief Gets the value of MemoryVb_Optional, regardless of it having been set */
	const FRHAPI_PexStat& GetMemoryVb() const { return MemoryVb_Optional; }
	/** @brief Gets the value of MemoryVb_Optional, if it has been set, otherwise it returns DefaultValue */
	const FRHAPI_PexStat& GetMemoryVb(const FRHAPI_PexStat& DefaultValue) const { if (MemoryVb_IsSet) return MemoryVb_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of MemoryVb_Optional and returns true if it has been set, otherwise returns false */
	bool GetMemoryVb(FRHAPI_PexStat& OutValue) const { if (MemoryVb_IsSet) OutValue = MemoryVb_Optional; return MemoryVb_IsSet; }
	/** @brief Returns a pointer to MemoryVb_Optional, if it has been set, otherwise returns nullptr */
	FRHAPI_PexStat* GetMemoryVbOrNull() { if (MemoryVb_IsSet) return &MemoryVb_Optional; return nullptr; }
	/** @brief Returns a pointer to MemoryVb_Optional, if it has been set, otherwise returns nullptr */
	const FRHAPI_PexStat* GetMemoryVbOrNull() const { if (MemoryVb_IsSet) return &MemoryVb_Optional; return nullptr; }
	/** @brief Sets the value of MemoryVb_Optional and also sets MemoryVb_IsSet to true */
	void SetMemoryVb(const FRHAPI_PexStat& NewValue) { MemoryVb_Optional = NewValue; MemoryVb_IsSet = true; }
	/** @brief Sets the value of MemoryVb_Optional and also sets MemoryVb_IsSet to true using move semantics */
	void SetMemoryVb(FRHAPI_PexStat&& NewValue) { MemoryVb_Optional = NewValue; MemoryVb_IsSet = true; }
	 /** @brief Clears the value of MemoryVb_Optional and sets MemoryVb_IsSet to false */
	void ClearMemoryVb() { MemoryVb_IsSet = false; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_PexStat CpuProcess_Optional{  };
	/** @brief true if CpuProcess_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool CpuProcess_IsSet{ false };
	/** @brief Gets the value of CpuProcess_Optional, regardless of it having been set */
	FRHAPI_PexStat& GetCpuProcess() { return CpuProcess_Optional; }
	/** @brief Gets the value of CpuProcess_Optional, regardless of it having been set */
	const FRHAPI_PexStat& GetCpuProcess() const { return CpuProcess_Optional; }
	/** @brief Gets the value of CpuProcess_Optional, if it has been set, otherwise it returns DefaultValue */
	const FRHAPI_PexStat& GetCpuProcess(const FRHAPI_PexStat& DefaultValue) const { if (CpuProcess_IsSet) return CpuProcess_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of CpuProcess_Optional and returns true if it has been set, otherwise returns false */
	bool GetCpuProcess(FRHAPI_PexStat& OutValue) const { if (CpuProcess_IsSet) OutValue = CpuProcess_Optional; return CpuProcess_IsSet; }
	/** @brief Returns a pointer to CpuProcess_Optional, if it has been set, otherwise returns nullptr */
	FRHAPI_PexStat* GetCpuProcessOrNull() { if (CpuProcess_IsSet) return &CpuProcess_Optional; return nullptr; }
	/** @brief Returns a pointer to CpuProcess_Optional, if it has been set, otherwise returns nullptr */
	const FRHAPI_PexStat* GetCpuProcessOrNull() const { if (CpuProcess_IsSet) return &CpuProcess_Optional; return nullptr; }
	/** @brief Sets the value of CpuProcess_Optional and also sets CpuProcess_IsSet to true */
	void SetCpuProcess(const FRHAPI_PexStat& NewValue) { CpuProcess_Optional = NewValue; CpuProcess_IsSet = true; }
	/** @brief Sets the value of CpuProcess_Optional and also sets CpuProcess_IsSet to true using move semantics */
	void SetCpuProcess(FRHAPI_PexStat&& NewValue) { CpuProcess_Optional = NewValue; CpuProcess_IsSet = true; }
	 /** @brief Clears the value of CpuProcess_Optional and sets CpuProcess_IsSet to false */
	void ClearCpuProcess() { CpuProcess_IsSet = false; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_PexStat Ping_Optional{  };
	/** @brief true if Ping_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Ping_IsSet{ false };
	/** @brief Gets the value of Ping_Optional, regardless of it having been set */
	FRHAPI_PexStat& GetPing() { return Ping_Optional; }
	/** @brief Gets the value of Ping_Optional, regardless of it having been set */
	const FRHAPI_PexStat& GetPing() const { return Ping_Optional; }
	/** @brief Gets the value of Ping_Optional, if it has been set, otherwise it returns DefaultValue */
	const FRHAPI_PexStat& GetPing(const FRHAPI_PexStat& DefaultValue) const { if (Ping_IsSet) return Ping_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Ping_Optional and returns true if it has been set, otherwise returns false */
	bool GetPing(FRHAPI_PexStat& OutValue) const { if (Ping_IsSet) OutValue = Ping_Optional; return Ping_IsSet; }
	/** @brief Returns a pointer to Ping_Optional, if it has been set, otherwise returns nullptr */
	FRHAPI_PexStat* GetPingOrNull() { if (Ping_IsSet) return &Ping_Optional; return nullptr; }
	/** @brief Returns a pointer to Ping_Optional, if it has been set, otherwise returns nullptr */
	const FRHAPI_PexStat* GetPingOrNull() const { if (Ping_IsSet) return &Ping_Optional; return nullptr; }
	/** @brief Sets the value of Ping_Optional and also sets Ping_IsSet to true */
	void SetPing(const FRHAPI_PexStat& NewValue) { Ping_Optional = NewValue; Ping_IsSet = true; }
	/** @brief Sets the value of Ping_Optional and also sets Ping_IsSet to true using move semantics */
	void SetPing(FRHAPI_PexStat&& NewValue) { Ping_Optional = NewValue; Ping_IsSet = true; }
	 /** @brief Clears the value of Ping_Optional and sets Ping_IsSet to false */
	void ClearPing() { Ping_IsSet = false; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_PexStat InPackets_Optional{  };
	/** @brief true if InPackets_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool InPackets_IsSet{ false };
	/** @brief Gets the value of InPackets_Optional, regardless of it having been set */
	FRHAPI_PexStat& GetInPackets() { return InPackets_Optional; }
	/** @brief Gets the value of InPackets_Optional, regardless of it having been set */
	const FRHAPI_PexStat& GetInPackets() const { return InPackets_Optional; }
	/** @brief Gets the value of InPackets_Optional, if it has been set, otherwise it returns DefaultValue */
	const FRHAPI_PexStat& GetInPackets(const FRHAPI_PexStat& DefaultValue) const { if (InPackets_IsSet) return InPackets_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of InPackets_Optional and returns true if it has been set, otherwise returns false */
	bool GetInPackets(FRHAPI_PexStat& OutValue) const { if (InPackets_IsSet) OutValue = InPackets_Optional; return InPackets_IsSet; }
	/** @brief Returns a pointer to InPackets_Optional, if it has been set, otherwise returns nullptr */
	FRHAPI_PexStat* GetInPacketsOrNull() { if (InPackets_IsSet) return &InPackets_Optional; return nullptr; }
	/** @brief Returns a pointer to InPackets_Optional, if it has been set, otherwise returns nullptr */
	const FRHAPI_PexStat* GetInPacketsOrNull() const { if (InPackets_IsSet) return &InPackets_Optional; return nullptr; }
	/** @brief Sets the value of InPackets_Optional and also sets InPackets_IsSet to true */
	void SetInPackets(const FRHAPI_PexStat& NewValue) { InPackets_Optional = NewValue; InPackets_IsSet = true; }
	/** @brief Sets the value of InPackets_Optional and also sets InPackets_IsSet to true using move semantics */
	void SetInPackets(FRHAPI_PexStat&& NewValue) { InPackets_Optional = NewValue; InPackets_IsSet = true; }
	 /** @brief Clears the value of InPackets_Optional and sets InPackets_IsSet to false */
	void ClearInPackets() { InPackets_IsSet = false; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_PexStat OutPackets_Optional{  };
	/** @brief true if OutPackets_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool OutPackets_IsSet{ false };
	/** @brief Gets the value of OutPackets_Optional, regardless of it having been set */
	FRHAPI_PexStat& GetOutPackets() { return OutPackets_Optional; }
	/** @brief Gets the value of OutPackets_Optional, regardless of it having been set */
	const FRHAPI_PexStat& GetOutPackets() const { return OutPackets_Optional; }
	/** @brief Gets the value of OutPackets_Optional, if it has been set, otherwise it returns DefaultValue */
	const FRHAPI_PexStat& GetOutPackets(const FRHAPI_PexStat& DefaultValue) const { if (OutPackets_IsSet) return OutPackets_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of OutPackets_Optional and returns true if it has been set, otherwise returns false */
	bool GetOutPackets(FRHAPI_PexStat& OutValue) const { if (OutPackets_IsSet) OutValue = OutPackets_Optional; return OutPackets_IsSet; }
	/** @brief Returns a pointer to OutPackets_Optional, if it has been set, otherwise returns nullptr */
	FRHAPI_PexStat* GetOutPacketsOrNull() { if (OutPackets_IsSet) return &OutPackets_Optional; return nullptr; }
	/** @brief Returns a pointer to OutPackets_Optional, if it has been set, otherwise returns nullptr */
	const FRHAPI_PexStat* GetOutPacketsOrNull() const { if (OutPackets_IsSet) return &OutPackets_Optional; return nullptr; }
	/** @brief Sets the value of OutPackets_Optional and also sets OutPackets_IsSet to true */
	void SetOutPackets(const FRHAPI_PexStat& NewValue) { OutPackets_Optional = NewValue; OutPackets_IsSet = true; }
	/** @brief Sets the value of OutPackets_Optional and also sets OutPackets_IsSet to true using move semantics */
	void SetOutPackets(FRHAPI_PexStat&& NewValue) { OutPackets_Optional = NewValue; OutPackets_IsSet = true; }
	 /** @brief Clears the value of OutPackets_Optional and sets OutPackets_IsSet to false */
	void ClearOutPackets() { OutPackets_IsSet = false; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_PexStat TotalPackets_Optional{  };
	/** @brief true if TotalPackets_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool TotalPackets_IsSet{ false };
	/** @brief Gets the value of TotalPackets_Optional, regardless of it having been set */
	FRHAPI_PexStat& GetTotalPackets() { return TotalPackets_Optional; }
	/** @brief Gets the value of TotalPackets_Optional, regardless of it having been set */
	const FRHAPI_PexStat& GetTotalPackets() const { return TotalPackets_Optional; }
	/** @brief Gets the value of TotalPackets_Optional, if it has been set, otherwise it returns DefaultValue */
	const FRHAPI_PexStat& GetTotalPackets(const FRHAPI_PexStat& DefaultValue) const { if (TotalPackets_IsSet) return TotalPackets_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of TotalPackets_Optional and returns true if it has been set, otherwise returns false */
	bool GetTotalPackets(FRHAPI_PexStat& OutValue) const { if (TotalPackets_IsSet) OutValue = TotalPackets_Optional; return TotalPackets_IsSet; }
	/** @brief Returns a pointer to TotalPackets_Optional, if it has been set, otherwise returns nullptr */
	FRHAPI_PexStat* GetTotalPacketsOrNull() { if (TotalPackets_IsSet) return &TotalPackets_Optional; return nullptr; }
	/** @brief Returns a pointer to TotalPackets_Optional, if it has been set, otherwise returns nullptr */
	const FRHAPI_PexStat* GetTotalPacketsOrNull() const { if (TotalPackets_IsSet) return &TotalPackets_Optional; return nullptr; }
	/** @brief Sets the value of TotalPackets_Optional and also sets TotalPackets_IsSet to true */
	void SetTotalPackets(const FRHAPI_PexStat& NewValue) { TotalPackets_Optional = NewValue; TotalPackets_IsSet = true; }
	/** @brief Sets the value of TotalPackets_Optional and also sets TotalPackets_IsSet to true using move semantics */
	void SetTotalPackets(FRHAPI_PexStat&& NewValue) { TotalPackets_Optional = NewValue; TotalPackets_IsSet = true; }
	 /** @brief Clears the value of TotalPackets_Optional and sets TotalPackets_IsSet to false */
	void ClearTotalPackets() { TotalPackets_IsSet = false; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_PexStat InPacketLoss_Optional{  };
	/** @brief true if InPacketLoss_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool InPacketLoss_IsSet{ false };
	/** @brief Gets the value of InPacketLoss_Optional, regardless of it having been set */
	FRHAPI_PexStat& GetInPacketLoss() { return InPacketLoss_Optional; }
	/** @brief Gets the value of InPacketLoss_Optional, regardless of it having been set */
	const FRHAPI_PexStat& GetInPacketLoss() const { return InPacketLoss_Optional; }
	/** @brief Gets the value of InPacketLoss_Optional, if it has been set, otherwise it returns DefaultValue */
	const FRHAPI_PexStat& GetInPacketLoss(const FRHAPI_PexStat& DefaultValue) const { if (InPacketLoss_IsSet) return InPacketLoss_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of InPacketLoss_Optional and returns true if it has been set, otherwise returns false */
	bool GetInPacketLoss(FRHAPI_PexStat& OutValue) const { if (InPacketLoss_IsSet) OutValue = InPacketLoss_Optional; return InPacketLoss_IsSet; }
	/** @brief Returns a pointer to InPacketLoss_Optional, if it has been set, otherwise returns nullptr */
	FRHAPI_PexStat* GetInPacketLossOrNull() { if (InPacketLoss_IsSet) return &InPacketLoss_Optional; return nullptr; }
	/** @brief Returns a pointer to InPacketLoss_Optional, if it has been set, otherwise returns nullptr */
	const FRHAPI_PexStat* GetInPacketLossOrNull() const { if (InPacketLoss_IsSet) return &InPacketLoss_Optional; return nullptr; }
	/** @brief Sets the value of InPacketLoss_Optional and also sets InPacketLoss_IsSet to true */
	void SetInPacketLoss(const FRHAPI_PexStat& NewValue) { InPacketLoss_Optional = NewValue; InPacketLoss_IsSet = true; }
	/** @brief Sets the value of InPacketLoss_Optional and also sets InPacketLoss_IsSet to true using move semantics */
	void SetInPacketLoss(FRHAPI_PexStat&& NewValue) { InPacketLoss_Optional = NewValue; InPacketLoss_IsSet = true; }
	 /** @brief Clears the value of InPacketLoss_Optional and sets InPacketLoss_IsSet to false */
	void ClearInPacketLoss() { InPacketLoss_IsSet = false; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_PexStat OutPacketLoss_Optional{  };
	/** @brief true if OutPacketLoss_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool OutPacketLoss_IsSet{ false };
	/** @brief Gets the value of OutPacketLoss_Optional, regardless of it having been set */
	FRHAPI_PexStat& GetOutPacketLoss() { return OutPacketLoss_Optional; }
	/** @brief Gets the value of OutPacketLoss_Optional, regardless of it having been set */
	const FRHAPI_PexStat& GetOutPacketLoss() const { return OutPacketLoss_Optional; }
	/** @brief Gets the value of OutPacketLoss_Optional, if it has been set, otherwise it returns DefaultValue */
	const FRHAPI_PexStat& GetOutPacketLoss(const FRHAPI_PexStat& DefaultValue) const { if (OutPacketLoss_IsSet) return OutPacketLoss_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of OutPacketLoss_Optional and returns true if it has been set, otherwise returns false */
	bool GetOutPacketLoss(FRHAPI_PexStat& OutValue) const { if (OutPacketLoss_IsSet) OutValue = OutPacketLoss_Optional; return OutPacketLoss_IsSet; }
	/** @brief Returns a pointer to OutPacketLoss_Optional, if it has been set, otherwise returns nullptr */
	FRHAPI_PexStat* GetOutPacketLossOrNull() { if (OutPacketLoss_IsSet) return &OutPacketLoss_Optional; return nullptr; }
	/** @brief Returns a pointer to OutPacketLoss_Optional, if it has been set, otherwise returns nullptr */
	const FRHAPI_PexStat* GetOutPacketLossOrNull() const { if (OutPacketLoss_IsSet) return &OutPacketLoss_Optional; return nullptr; }
	/** @brief Sets the value of OutPacketLoss_Optional and also sets OutPacketLoss_IsSet to true */
	void SetOutPacketLoss(const FRHAPI_PexStat& NewValue) { OutPacketLoss_Optional = NewValue; OutPacketLoss_IsSet = true; }
	/** @brief Sets the value of OutPacketLoss_Optional and also sets OutPacketLoss_IsSet to true using move semantics */
	void SetOutPacketLoss(FRHAPI_PexStat&& NewValue) { OutPacketLoss_Optional = NewValue; OutPacketLoss_IsSet = true; }
	 /** @brief Clears the value of OutPacketLoss_Optional and sets OutPacketLoss_IsSet to false */
	void ClearOutPacketLoss() { OutPacketLoss_IsSet = false; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_PexStat TotalPacketLoss_Optional{  };
	/** @brief true if TotalPacketLoss_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool TotalPacketLoss_IsSet{ false };
	/** @brief Gets the value of TotalPacketLoss_Optional, regardless of it having been set */
	FRHAPI_PexStat& GetTotalPacketLoss() { return TotalPacketLoss_Optional; }
	/** @brief Gets the value of TotalPacketLoss_Optional, regardless of it having been set */
	const FRHAPI_PexStat& GetTotalPacketLoss() const { return TotalPacketLoss_Optional; }
	/** @brief Gets the value of TotalPacketLoss_Optional, if it has been set, otherwise it returns DefaultValue */
	const FRHAPI_PexStat& GetTotalPacketLoss(const FRHAPI_PexStat& DefaultValue) const { if (TotalPacketLoss_IsSet) return TotalPacketLoss_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of TotalPacketLoss_Optional and returns true if it has been set, otherwise returns false */
	bool GetTotalPacketLoss(FRHAPI_PexStat& OutValue) const { if (TotalPacketLoss_IsSet) OutValue = TotalPacketLoss_Optional; return TotalPacketLoss_IsSet; }
	/** @brief Returns a pointer to TotalPacketLoss_Optional, if it has been set, otherwise returns nullptr */
	FRHAPI_PexStat* GetTotalPacketLossOrNull() { if (TotalPacketLoss_IsSet) return &TotalPacketLoss_Optional; return nullptr; }
	/** @brief Returns a pointer to TotalPacketLoss_Optional, if it has been set, otherwise returns nullptr */
	const FRHAPI_PexStat* GetTotalPacketLossOrNull() const { if (TotalPacketLoss_IsSet) return &TotalPacketLoss_Optional; return nullptr; }
	/** @brief Sets the value of TotalPacketLoss_Optional and also sets TotalPacketLoss_IsSet to true */
	void SetTotalPacketLoss(const FRHAPI_PexStat& NewValue) { TotalPacketLoss_Optional = NewValue; TotalPacketLoss_IsSet = true; }
	/** @brief Sets the value of TotalPacketLoss_Optional and also sets TotalPacketLoss_IsSet to true using move semantics */
	void SetTotalPacketLoss(FRHAPI_PexStat&& NewValue) { TotalPacketLoss_Optional = NewValue; TotalPacketLoss_IsSet = true; }
	 /** @brief Clears the value of TotalPacketLoss_Optional and sets TotalPacketLoss_IsSet to false */
	void ClearTotalPacketLoss() { TotalPacketLoss_IsSet = false; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_PexStat InPacketLossPct_Optional{  };
	/** @brief true if InPacketLossPct_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool InPacketLossPct_IsSet{ false };
	/** @brief Gets the value of InPacketLossPct_Optional, regardless of it having been set */
	FRHAPI_PexStat& GetInPacketLossPct() { return InPacketLossPct_Optional; }
	/** @brief Gets the value of InPacketLossPct_Optional, regardless of it having been set */
	const FRHAPI_PexStat& GetInPacketLossPct() const { return InPacketLossPct_Optional; }
	/** @brief Gets the value of InPacketLossPct_Optional, if it has been set, otherwise it returns DefaultValue */
	const FRHAPI_PexStat& GetInPacketLossPct(const FRHAPI_PexStat& DefaultValue) const { if (InPacketLossPct_IsSet) return InPacketLossPct_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of InPacketLossPct_Optional and returns true if it has been set, otherwise returns false */
	bool GetInPacketLossPct(FRHAPI_PexStat& OutValue) const { if (InPacketLossPct_IsSet) OutValue = InPacketLossPct_Optional; return InPacketLossPct_IsSet; }
	/** @brief Returns a pointer to InPacketLossPct_Optional, if it has been set, otherwise returns nullptr */
	FRHAPI_PexStat* GetInPacketLossPctOrNull() { if (InPacketLossPct_IsSet) return &InPacketLossPct_Optional; return nullptr; }
	/** @brief Returns a pointer to InPacketLossPct_Optional, if it has been set, otherwise returns nullptr */
	const FRHAPI_PexStat* GetInPacketLossPctOrNull() const { if (InPacketLossPct_IsSet) return &InPacketLossPct_Optional; return nullptr; }
	/** @brief Sets the value of InPacketLossPct_Optional and also sets InPacketLossPct_IsSet to true */
	void SetInPacketLossPct(const FRHAPI_PexStat& NewValue) { InPacketLossPct_Optional = NewValue; InPacketLossPct_IsSet = true; }
	/** @brief Sets the value of InPacketLossPct_Optional and also sets InPacketLossPct_IsSet to true using move semantics */
	void SetInPacketLossPct(FRHAPI_PexStat&& NewValue) { InPacketLossPct_Optional = NewValue; InPacketLossPct_IsSet = true; }
	 /** @brief Clears the value of InPacketLossPct_Optional and sets InPacketLossPct_IsSet to false */
	void ClearInPacketLossPct() { InPacketLossPct_IsSet = false; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_PexStat OutPacketLossPct_Optional{  };
	/** @brief true if OutPacketLossPct_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool OutPacketLossPct_IsSet{ false };
	/** @brief Gets the value of OutPacketLossPct_Optional, regardless of it having been set */
	FRHAPI_PexStat& GetOutPacketLossPct() { return OutPacketLossPct_Optional; }
	/** @brief Gets the value of OutPacketLossPct_Optional, regardless of it having been set */
	const FRHAPI_PexStat& GetOutPacketLossPct() const { return OutPacketLossPct_Optional; }
	/** @brief Gets the value of OutPacketLossPct_Optional, if it has been set, otherwise it returns DefaultValue */
	const FRHAPI_PexStat& GetOutPacketLossPct(const FRHAPI_PexStat& DefaultValue) const { if (OutPacketLossPct_IsSet) return OutPacketLossPct_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of OutPacketLossPct_Optional and returns true if it has been set, otherwise returns false */
	bool GetOutPacketLossPct(FRHAPI_PexStat& OutValue) const { if (OutPacketLossPct_IsSet) OutValue = OutPacketLossPct_Optional; return OutPacketLossPct_IsSet; }
	/** @brief Returns a pointer to OutPacketLossPct_Optional, if it has been set, otherwise returns nullptr */
	FRHAPI_PexStat* GetOutPacketLossPctOrNull() { if (OutPacketLossPct_IsSet) return &OutPacketLossPct_Optional; return nullptr; }
	/** @brief Returns a pointer to OutPacketLossPct_Optional, if it has been set, otherwise returns nullptr */
	const FRHAPI_PexStat* GetOutPacketLossPctOrNull() const { if (OutPacketLossPct_IsSet) return &OutPacketLossPct_Optional; return nullptr; }
	/** @brief Sets the value of OutPacketLossPct_Optional and also sets OutPacketLossPct_IsSet to true */
	void SetOutPacketLossPct(const FRHAPI_PexStat& NewValue) { OutPacketLossPct_Optional = NewValue; OutPacketLossPct_IsSet = true; }
	/** @brief Sets the value of OutPacketLossPct_Optional and also sets OutPacketLossPct_IsSet to true using move semantics */
	void SetOutPacketLossPct(FRHAPI_PexStat&& NewValue) { OutPacketLossPct_Optional = NewValue; OutPacketLossPct_IsSet = true; }
	 /** @brief Clears the value of OutPacketLossPct_Optional and sets OutPacketLossPct_IsSet to false */
	void ClearOutPacketLossPct() { OutPacketLossPct_IsSet = false; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_PexStat TotalPacketLossPct_Optional{  };
	/** @brief true if TotalPacketLossPct_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool TotalPacketLossPct_IsSet{ false };
	/** @brief Gets the value of TotalPacketLossPct_Optional, regardless of it having been set */
	FRHAPI_PexStat& GetTotalPacketLossPct() { return TotalPacketLossPct_Optional; }
	/** @brief Gets the value of TotalPacketLossPct_Optional, regardless of it having been set */
	const FRHAPI_PexStat& GetTotalPacketLossPct() const { return TotalPacketLossPct_Optional; }
	/** @brief Gets the value of TotalPacketLossPct_Optional, if it has been set, otherwise it returns DefaultValue */
	const FRHAPI_PexStat& GetTotalPacketLossPct(const FRHAPI_PexStat& DefaultValue) const { if (TotalPacketLossPct_IsSet) return TotalPacketLossPct_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of TotalPacketLossPct_Optional and returns true if it has been set, otherwise returns false */
	bool GetTotalPacketLossPct(FRHAPI_PexStat& OutValue) const { if (TotalPacketLossPct_IsSet) OutValue = TotalPacketLossPct_Optional; return TotalPacketLossPct_IsSet; }
	/** @brief Returns a pointer to TotalPacketLossPct_Optional, if it has been set, otherwise returns nullptr */
	FRHAPI_PexStat* GetTotalPacketLossPctOrNull() { if (TotalPacketLossPct_IsSet) return &TotalPacketLossPct_Optional; return nullptr; }
	/** @brief Returns a pointer to TotalPacketLossPct_Optional, if it has been set, otherwise returns nullptr */
	const FRHAPI_PexStat* GetTotalPacketLossPctOrNull() const { if (TotalPacketLossPct_IsSet) return &TotalPacketLossPct_Optional; return nullptr; }
	/** @brief Sets the value of TotalPacketLossPct_Optional and also sets TotalPacketLossPct_IsSet to true */
	void SetTotalPacketLossPct(const FRHAPI_PexStat& NewValue) { TotalPacketLossPct_Optional = NewValue; TotalPacketLossPct_IsSet = true; }
	/** @brief Sets the value of TotalPacketLossPct_Optional and also sets TotalPacketLossPct_IsSet to true using move semantics */
	void SetTotalPacketLossPct(FRHAPI_PexStat&& NewValue) { TotalPacketLossPct_Optional = NewValue; TotalPacketLossPct_IsSet = true; }
	 /** @brief Clears the value of TotalPacketLossPct_Optional and sets TotalPacketLossPct_IsSet to false */
	void ClearTotalPacketLossPct() { TotalPacketLossPct_IsSet = false; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_PexCount TotalDisconnects_Optional{  };
	/** @brief true if TotalDisconnects_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool TotalDisconnects_IsSet{ false };
	/** @brief Gets the value of TotalDisconnects_Optional, regardless of it having been set */
	FRHAPI_PexCount& GetTotalDisconnects() { return TotalDisconnects_Optional; }
	/** @brief Gets the value of TotalDisconnects_Optional, regardless of it having been set */
	const FRHAPI_PexCount& GetTotalDisconnects() const { return TotalDisconnects_Optional; }
	/** @brief Gets the value of TotalDisconnects_Optional, if it has been set, otherwise it returns DefaultValue */
	const FRHAPI_PexCount& GetTotalDisconnects(const FRHAPI_PexCount& DefaultValue) const { if (TotalDisconnects_IsSet) return TotalDisconnects_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of TotalDisconnects_Optional and returns true if it has been set, otherwise returns false */
	bool GetTotalDisconnects(FRHAPI_PexCount& OutValue) const { if (TotalDisconnects_IsSet) OutValue = TotalDisconnects_Optional; return TotalDisconnects_IsSet; }
	/** @brief Returns a pointer to TotalDisconnects_Optional, if it has been set, otherwise returns nullptr */
	FRHAPI_PexCount* GetTotalDisconnectsOrNull() { if (TotalDisconnects_IsSet) return &TotalDisconnects_Optional; return nullptr; }
	/** @brief Returns a pointer to TotalDisconnects_Optional, if it has been set, otherwise returns nullptr */
	const FRHAPI_PexCount* GetTotalDisconnectsOrNull() const { if (TotalDisconnects_IsSet) return &TotalDisconnects_Optional; return nullptr; }
	/** @brief Sets the value of TotalDisconnects_Optional and also sets TotalDisconnects_IsSet to true */
	void SetTotalDisconnects(const FRHAPI_PexCount& NewValue) { TotalDisconnects_Optional = NewValue; TotalDisconnects_IsSet = true; }
	/** @brief Sets the value of TotalDisconnects_Optional and also sets TotalDisconnects_IsSet to true using move semantics */
	void SetTotalDisconnects(FRHAPI_PexCount&& NewValue) { TotalDisconnects_Optional = NewValue; TotalDisconnects_IsSet = true; }
	 /** @brief Clears the value of TotalDisconnects_Optional and sets TotalDisconnects_IsSet to false */
	void ClearTotalDisconnects() { TotalDisconnects_IsSet = false; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_PexCount MatchDuration_Optional{  };
	/** @brief true if MatchDuration_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool MatchDuration_IsSet{ false };
	/** @brief Gets the value of MatchDuration_Optional, regardless of it having been set */
	FRHAPI_PexCount& GetMatchDuration() { return MatchDuration_Optional; }
	/** @brief Gets the value of MatchDuration_Optional, regardless of it having been set */
	const FRHAPI_PexCount& GetMatchDuration() const { return MatchDuration_Optional; }
	/** @brief Gets the value of MatchDuration_Optional, if it has been set, otherwise it returns DefaultValue */
	const FRHAPI_PexCount& GetMatchDuration(const FRHAPI_PexCount& DefaultValue) const { if (MatchDuration_IsSet) return MatchDuration_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of MatchDuration_Optional and returns true if it has been set, otherwise returns false */
	bool GetMatchDuration(FRHAPI_PexCount& OutValue) const { if (MatchDuration_IsSet) OutValue = MatchDuration_Optional; return MatchDuration_IsSet; }
	/** @brief Returns a pointer to MatchDuration_Optional, if it has been set, otherwise returns nullptr */
	FRHAPI_PexCount* GetMatchDurationOrNull() { if (MatchDuration_IsSet) return &MatchDuration_Optional; return nullptr; }
	/** @brief Returns a pointer to MatchDuration_Optional, if it has been set, otherwise returns nullptr */
	const FRHAPI_PexCount* GetMatchDurationOrNull() const { if (MatchDuration_IsSet) return &MatchDuration_Optional; return nullptr; }
	/** @brief Sets the value of MatchDuration_Optional and also sets MatchDuration_IsSet to true */
	void SetMatchDuration(const FRHAPI_PexCount& NewValue) { MatchDuration_Optional = NewValue; MatchDuration_IsSet = true; }
	/** @brief Sets the value of MatchDuration_Optional and also sets MatchDuration_IsSet to true using move semantics */
	void SetMatchDuration(FRHAPI_PexCount&& NewValue) { MatchDuration_Optional = NewValue; MatchDuration_IsSet = true; }
	 /** @brief Clears the value of MatchDuration_Optional and sets MatchDuration_IsSet to false */
	void ClearMatchDuration() { MatchDuration_IsSet = false; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_PexStat ConnectionCount_Optional{  };
	/** @brief true if ConnectionCount_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool ConnectionCount_IsSet{ false };
	/** @brief Gets the value of ConnectionCount_Optional, regardless of it having been set */
	FRHAPI_PexStat& GetConnectionCount() { return ConnectionCount_Optional; }
	/** @brief Gets the value of ConnectionCount_Optional, regardless of it having been set */
	const FRHAPI_PexStat& GetConnectionCount() const { return ConnectionCount_Optional; }
	/** @brief Gets the value of ConnectionCount_Optional, if it has been set, otherwise it returns DefaultValue */
	const FRHAPI_PexStat& GetConnectionCount(const FRHAPI_PexStat& DefaultValue) const { if (ConnectionCount_IsSet) return ConnectionCount_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of ConnectionCount_Optional and returns true if it has been set, otherwise returns false */
	bool GetConnectionCount(FRHAPI_PexStat& OutValue) const { if (ConnectionCount_IsSet) OutValue = ConnectionCount_Optional; return ConnectionCount_IsSet; }
	/** @brief Returns a pointer to ConnectionCount_Optional, if it has been set, otherwise returns nullptr */
	FRHAPI_PexStat* GetConnectionCountOrNull() { if (ConnectionCount_IsSet) return &ConnectionCount_Optional; return nullptr; }
	/** @brief Returns a pointer to ConnectionCount_Optional, if it has been set, otherwise returns nullptr */
	const FRHAPI_PexStat* GetConnectionCountOrNull() const { if (ConnectionCount_IsSet) return &ConnectionCount_Optional; return nullptr; }
	/** @brief Sets the value of ConnectionCount_Optional and also sets ConnectionCount_IsSet to true */
	void SetConnectionCount(const FRHAPI_PexStat& NewValue) { ConnectionCount_Optional = NewValue; ConnectionCount_IsSet = true; }
	/** @brief Sets the value of ConnectionCount_Optional and also sets ConnectionCount_IsSet to true using move semantics */
	void SetConnectionCount(FRHAPI_PexStat&& NewValue) { ConnectionCount_Optional = NewValue; ConnectionCount_IsSet = true; }
	 /** @brief Clears the value of ConnectionCount_Optional and sets ConnectionCount_IsSet to false */
	void ClearConnectionCount() { ConnectionCount_IsSet = false; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_PexCount TotalUniquePlayers_Optional{  };
	/** @brief true if TotalUniquePlayers_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool TotalUniquePlayers_IsSet{ false };
	/** @brief Gets the value of TotalUniquePlayers_Optional, regardless of it having been set */
	FRHAPI_PexCount& GetTotalUniquePlayers() { return TotalUniquePlayers_Optional; }
	/** @brief Gets the value of TotalUniquePlayers_Optional, regardless of it having been set */
	const FRHAPI_PexCount& GetTotalUniquePlayers() const { return TotalUniquePlayers_Optional; }
	/** @brief Gets the value of TotalUniquePlayers_Optional, if it has been set, otherwise it returns DefaultValue */
	const FRHAPI_PexCount& GetTotalUniquePlayers(const FRHAPI_PexCount& DefaultValue) const { if (TotalUniquePlayers_IsSet) return TotalUniquePlayers_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of TotalUniquePlayers_Optional and returns true if it has been set, otherwise returns false */
	bool GetTotalUniquePlayers(FRHAPI_PexCount& OutValue) const { if (TotalUniquePlayers_IsSet) OutValue = TotalUniquePlayers_Optional; return TotalUniquePlayers_IsSet; }
	/** @brief Returns a pointer to TotalUniquePlayers_Optional, if it has been set, otherwise returns nullptr */
	FRHAPI_PexCount* GetTotalUniquePlayersOrNull() { if (TotalUniquePlayers_IsSet) return &TotalUniquePlayers_Optional; return nullptr; }
	/** @brief Returns a pointer to TotalUniquePlayers_Optional, if it has been set, otherwise returns nullptr */
	const FRHAPI_PexCount* GetTotalUniquePlayersOrNull() const { if (TotalUniquePlayers_IsSet) return &TotalUniquePlayers_Optional; return nullptr; }
	/** @brief Sets the value of TotalUniquePlayers_Optional and also sets TotalUniquePlayers_IsSet to true */
	void SetTotalUniquePlayers(const FRHAPI_PexCount& NewValue) { TotalUniquePlayers_Optional = NewValue; TotalUniquePlayers_IsSet = true; }
	/** @brief Sets the value of TotalUniquePlayers_Optional and also sets TotalUniquePlayers_IsSet to true using move semantics */
	void SetTotalUniquePlayers(FRHAPI_PexCount&& NewValue) { TotalUniquePlayers_Optional = NewValue; TotalUniquePlayers_IsSet = true; }
	 /** @brief Clears the value of TotalUniquePlayers_Optional and sets TotalUniquePlayers_IsSet to false */
	void ClearTotalUniquePlayers() { TotalUniquePlayers_IsSet = false; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_PexHostScores Scores_Optional{  };
	/** @brief true if Scores_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Scores_IsSet{ false };
	/** @brief Gets the value of Scores_Optional, regardless of it having been set */
	FRHAPI_PexHostScores& GetScores() { return Scores_Optional; }
	/** @brief Gets the value of Scores_Optional, regardless of it having been set */
	const FRHAPI_PexHostScores& GetScores() const { return Scores_Optional; }
	/** @brief Gets the value of Scores_Optional, if it has been set, otherwise it returns DefaultValue */
	const FRHAPI_PexHostScores& GetScores(const FRHAPI_PexHostScores& DefaultValue) const { if (Scores_IsSet) return Scores_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Scores_Optional and returns true if it has been set, otherwise returns false */
	bool GetScores(FRHAPI_PexHostScores& OutValue) const { if (Scores_IsSet) OutValue = Scores_Optional; return Scores_IsSet; }
	/** @brief Returns a pointer to Scores_Optional, if it has been set, otherwise returns nullptr */
	FRHAPI_PexHostScores* GetScoresOrNull() { if (Scores_IsSet) return &Scores_Optional; return nullptr; }
	/** @brief Returns a pointer to Scores_Optional, if it has been set, otherwise returns nullptr */
	const FRHAPI_PexHostScores* GetScoresOrNull() const { if (Scores_IsSet) return &Scores_Optional; return nullptr; }
	/** @brief Sets the value of Scores_Optional and also sets Scores_IsSet to true */
	void SetScores(const FRHAPI_PexHostScores& NewValue) { Scores_Optional = NewValue; Scores_IsSet = true; }
	/** @brief Sets the value of Scores_Optional and also sets Scores_IsSet to true using move semantics */
	void SetScores(FRHAPI_PexHostScores&& NewValue) { Scores_Optional = NewValue; Scores_IsSet = true; }
	 /** @brief Clears the value of Scores_Optional and sets Scores_IsSet to false */
	void ClearScores() { Scores_IsSet = false; }

	/** @brief Match ID */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString MatchId{  };
	/** @brief Gets the value of MatchId */
	FString& GetMatchId() { return MatchId; }
	/** @brief Gets the value of MatchId */
	const FString& GetMatchId() const { return MatchId; }
	/** @brief Sets the value of MatchId */
	void SetMatchId(const FString& NewValue) { MatchId = NewValue;  }
	/** @brief Sets the value of MatchId using move semantics */
	void SetMatchId(FString&& NewValue) { MatchId = NewValue;  }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString RegionId_Optional{  };
	/** @brief true if RegionId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool RegionId_IsSet{ false };
	/** @brief Gets the value of RegionId_Optional, regardless of it having been set */
	FString& GetRegionId() { return RegionId_Optional; }
	/** @brief Gets the value of RegionId_Optional, regardless of it having been set */
	const FString& GetRegionId() const { return RegionId_Optional; }
	/** @brief Gets the value of RegionId_Optional, if it has been set, otherwise it returns DefaultValue */
	const FString& GetRegionId(const FString& DefaultValue) const { if (RegionId_IsSet) return RegionId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of RegionId_Optional and returns true if it has been set, otherwise returns false */
	bool GetRegionId(FString& OutValue) const { if (RegionId_IsSet) OutValue = RegionId_Optional; return RegionId_IsSet; }
	/** @brief Returns a pointer to RegionId_Optional, if it has been set, otherwise returns nullptr */
	FString* GetRegionIdOrNull() { if (RegionId_IsSet) return &RegionId_Optional; return nullptr; }
	/** @brief Returns a pointer to RegionId_Optional, if it has been set, otherwise returns nullptr */
	const FString* GetRegionIdOrNull() const { if (RegionId_IsSet) return &RegionId_Optional; return nullptr; }
	/** @brief Sets the value of RegionId_Optional and also sets RegionId_IsSet to true */
	void SetRegionId(const FString& NewValue) { RegionId_Optional = NewValue; RegionId_IsSet = true; }
	/** @brief Sets the value of RegionId_Optional and also sets RegionId_IsSet to true using move semantics */
	void SetRegionId(FString&& NewValue) { RegionId_Optional = NewValue; RegionId_IsSet = true; }
	 /** @brief Clears the value of RegionId_Optional and sets RegionId_IsSet to false */
	void ClearRegionId() { RegionId_IsSet = false; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString ServerId_Optional{  };
	/** @brief true if ServerId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool ServerId_IsSet{ false };
	/** @brief Gets the value of ServerId_Optional, regardless of it having been set */
	FString& GetServerId() { return ServerId_Optional; }
	/** @brief Gets the value of ServerId_Optional, regardless of it having been set */
	const FString& GetServerId() const { return ServerId_Optional; }
	/** @brief Gets the value of ServerId_Optional, if it has been set, otherwise it returns DefaultValue */
	const FString& GetServerId(const FString& DefaultValue) const { if (ServerId_IsSet) return ServerId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of ServerId_Optional and returns true if it has been set, otherwise returns false */
	bool GetServerId(FString& OutValue) const { if (ServerId_IsSet) OutValue = ServerId_Optional; return ServerId_IsSet; }
	/** @brief Returns a pointer to ServerId_Optional, if it has been set, otherwise returns nullptr */
	FString* GetServerIdOrNull() { if (ServerId_IsSet) return &ServerId_Optional; return nullptr; }
	/** @brief Returns a pointer to ServerId_Optional, if it has been set, otherwise returns nullptr */
	const FString* GetServerIdOrNull() const { if (ServerId_IsSet) return &ServerId_Optional; return nullptr; }
	/** @brief Sets the value of ServerId_Optional and also sets ServerId_IsSet to true */
	void SetServerId(const FString& NewValue) { ServerId_Optional = NewValue; ServerId_IsSet = true; }
	/** @brief Sets the value of ServerId_Optional and also sets ServerId_IsSet to true using move semantics */
	void SetServerId(FString&& NewValue) { ServerId_Optional = NewValue; ServerId_IsSet = true; }
	 /** @brief Clears the value of ServerId_Optional and sets ServerId_IsSet to false */
	void ClearServerId() { ServerId_IsSet = false; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString AllocationId_Optional{  };
	/** @brief true if AllocationId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool AllocationId_IsSet{ false };
	/** @brief Gets the value of AllocationId_Optional, regardless of it having been set */
	FString& GetAllocationId() { return AllocationId_Optional; }
	/** @brief Gets the value of AllocationId_Optional, regardless of it having been set */
	const FString& GetAllocationId() const { return AllocationId_Optional; }
	/** @brief Gets the value of AllocationId_Optional, if it has been set, otherwise it returns DefaultValue */
	const FString& GetAllocationId(const FString& DefaultValue) const { if (AllocationId_IsSet) return AllocationId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of AllocationId_Optional and returns true if it has been set, otherwise returns false */
	bool GetAllocationId(FString& OutValue) const { if (AllocationId_IsSet) OutValue = AllocationId_Optional; return AllocationId_IsSet; }
	/** @brief Returns a pointer to AllocationId_Optional, if it has been set, otherwise returns nullptr */
	FString* GetAllocationIdOrNull() { if (AllocationId_IsSet) return &AllocationId_Optional; return nullptr; }
	/** @brief Returns a pointer to AllocationId_Optional, if it has been set, otherwise returns nullptr */
	const FString* GetAllocationIdOrNull() const { if (AllocationId_IsSet) return &AllocationId_Optional; return nullptr; }
	/** @brief Sets the value of AllocationId_Optional and also sets AllocationId_IsSet to true */
	void SetAllocationId(const FString& NewValue) { AllocationId_Optional = NewValue; AllocationId_IsSet = true; }
	/** @brief Sets the value of AllocationId_Optional and also sets AllocationId_IsSet to true using move semantics */
	void SetAllocationId(FString&& NewValue) { AllocationId_Optional = NewValue; AllocationId_IsSet = true; }
	 /** @brief Clears the value of AllocationId_Optional and sets AllocationId_IsSet to false */
	void ClearAllocationId() { AllocationId_IsSet = false; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString DatacenterProvider_Optional{  };
	/** @brief true if DatacenterProvider_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool DatacenterProvider_IsSet{ false };
	/** @brief Gets the value of DatacenterProvider_Optional, regardless of it having been set */
	FString& GetDatacenterProvider() { return DatacenterProvider_Optional; }
	/** @brief Gets the value of DatacenterProvider_Optional, regardless of it having been set */
	const FString& GetDatacenterProvider() const { return DatacenterProvider_Optional; }
	/** @brief Gets the value of DatacenterProvider_Optional, if it has been set, otherwise it returns DefaultValue */
	const FString& GetDatacenterProvider(const FString& DefaultValue) const { if (DatacenterProvider_IsSet) return DatacenterProvider_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of DatacenterProvider_Optional and returns true if it has been set, otherwise returns false */
	bool GetDatacenterProvider(FString& OutValue) const { if (DatacenterProvider_IsSet) OutValue = DatacenterProvider_Optional; return DatacenterProvider_IsSet; }
	/** @brief Returns a pointer to DatacenterProvider_Optional, if it has been set, otherwise returns nullptr */
	FString* GetDatacenterProviderOrNull() { if (DatacenterProvider_IsSet) return &DatacenterProvider_Optional; return nullptr; }
	/** @brief Returns a pointer to DatacenterProvider_Optional, if it has been set, otherwise returns nullptr */
	const FString* GetDatacenterProviderOrNull() const { if (DatacenterProvider_IsSet) return &DatacenterProvider_Optional; return nullptr; }
	/** @brief Sets the value of DatacenterProvider_Optional and also sets DatacenterProvider_IsSet to true */
	void SetDatacenterProvider(const FString& NewValue) { DatacenterProvider_Optional = NewValue; DatacenterProvider_IsSet = true; }
	/** @brief Sets the value of DatacenterProvider_Optional and also sets DatacenterProvider_IsSet to true using move semantics */
	void SetDatacenterProvider(FString&& NewValue) { DatacenterProvider_Optional = NewValue; DatacenterProvider_IsSet = true; }
	 /** @brief Clears the value of DatacenterProvider_Optional and sets DatacenterProvider_IsSet to false */
	void ClearDatacenterProvider() { DatacenterProvider_IsSet = false; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString DatacenterLocation_Optional{  };
	/** @brief true if DatacenterLocation_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool DatacenterLocation_IsSet{ false };
	/** @brief Gets the value of DatacenterLocation_Optional, regardless of it having been set */
	FString& GetDatacenterLocation() { return DatacenterLocation_Optional; }
	/** @brief Gets the value of DatacenterLocation_Optional, regardless of it having been set */
	const FString& GetDatacenterLocation() const { return DatacenterLocation_Optional; }
	/** @brief Gets the value of DatacenterLocation_Optional, if it has been set, otherwise it returns DefaultValue */
	const FString& GetDatacenterLocation(const FString& DefaultValue) const { if (DatacenterLocation_IsSet) return DatacenterLocation_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of DatacenterLocation_Optional and returns true if it has been set, otherwise returns false */
	bool GetDatacenterLocation(FString& OutValue) const { if (DatacenterLocation_IsSet) OutValue = DatacenterLocation_Optional; return DatacenterLocation_IsSet; }
	/** @brief Returns a pointer to DatacenterLocation_Optional, if it has been set, otherwise returns nullptr */
	FString* GetDatacenterLocationOrNull() { if (DatacenterLocation_IsSet) return &DatacenterLocation_Optional; return nullptr; }
	/** @brief Returns a pointer to DatacenterLocation_Optional, if it has been set, otherwise returns nullptr */
	const FString* GetDatacenterLocationOrNull() const { if (DatacenterLocation_IsSet) return &DatacenterLocation_Optional; return nullptr; }
	/** @brief Sets the value of DatacenterLocation_Optional and also sets DatacenterLocation_IsSet to true */
	void SetDatacenterLocation(const FString& NewValue) { DatacenterLocation_Optional = NewValue; DatacenterLocation_IsSet = true; }
	/** @brief Sets the value of DatacenterLocation_Optional and also sets DatacenterLocation_IsSet to true using move semantics */
	void SetDatacenterLocation(FString&& NewValue) { DatacenterLocation_Optional = NewValue; DatacenterLocation_IsSet = true; }
	 /** @brief Clears the value of DatacenterLocation_Optional and sets DatacenterLocation_IsSet to false */
	void ClearDatacenterLocation() { DatacenterLocation_IsSet = false; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString AddressIp_Optional{  };
	/** @brief true if AddressIp_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool AddressIp_IsSet{ false };
	/** @brief Gets the value of AddressIp_Optional, regardless of it having been set */
	FString& GetAddressIp() { return AddressIp_Optional; }
	/** @brief Gets the value of AddressIp_Optional, regardless of it having been set */
	const FString& GetAddressIp() const { return AddressIp_Optional; }
	/** @brief Gets the value of AddressIp_Optional, if it has been set, otherwise it returns DefaultValue */
	const FString& GetAddressIp(const FString& DefaultValue) const { if (AddressIp_IsSet) return AddressIp_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of AddressIp_Optional and returns true if it has been set, otherwise returns false */
	bool GetAddressIp(FString& OutValue) const { if (AddressIp_IsSet) OutValue = AddressIp_Optional; return AddressIp_IsSet; }
	/** @brief Returns a pointer to AddressIp_Optional, if it has been set, otherwise returns nullptr */
	FString* GetAddressIpOrNull() { if (AddressIp_IsSet) return &AddressIp_Optional; return nullptr; }
	/** @brief Returns a pointer to AddressIp_Optional, if it has been set, otherwise returns nullptr */
	const FString* GetAddressIpOrNull() const { if (AddressIp_IsSet) return &AddressIp_Optional; return nullptr; }
	/** @brief Sets the value of AddressIp_Optional and also sets AddressIp_IsSet to true */
	void SetAddressIp(const FString& NewValue) { AddressIp_Optional = NewValue; AddressIp_IsSet = true; }
	/** @brief Sets the value of AddressIp_Optional and also sets AddressIp_IsSet to true using move semantics */
	void SetAddressIp(FString&& NewValue) { AddressIp_Optional = NewValue; AddressIp_IsSet = true; }
	 /** @brief Clears the value of AddressIp_Optional and sets AddressIp_IsSet to false */
	void ClearAddressIp() { AddressIp_IsSet = false; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString MapName_Optional{  };
	/** @brief true if MapName_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool MapName_IsSet{ false };
	/** @brief Gets the value of MapName_Optional, regardless of it having been set */
	FString& GetMapName() { return MapName_Optional; }
	/** @brief Gets the value of MapName_Optional, regardless of it having been set */
	const FString& GetMapName() const { return MapName_Optional; }
	/** @brief Gets the value of MapName_Optional, if it has been set, otherwise it returns DefaultValue */
	const FString& GetMapName(const FString& DefaultValue) const { if (MapName_IsSet) return MapName_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of MapName_Optional and returns true if it has been set, otherwise returns false */
	bool GetMapName(FString& OutValue) const { if (MapName_IsSet) OutValue = MapName_Optional; return MapName_IsSet; }
	/** @brief Returns a pointer to MapName_Optional, if it has been set, otherwise returns nullptr */
	FString* GetMapNameOrNull() { if (MapName_IsSet) return &MapName_Optional; return nullptr; }
	/** @brief Returns a pointer to MapName_Optional, if it has been set, otherwise returns nullptr */
	const FString* GetMapNameOrNull() const { if (MapName_IsSet) return &MapName_Optional; return nullptr; }
	/** @brief Sets the value of MapName_Optional and also sets MapName_IsSet to true */
	void SetMapName(const FString& NewValue) { MapName_Optional = NewValue; MapName_IsSet = true; }
	/** @brief Sets the value of MapName_Optional and also sets MapName_IsSet to true using move semantics */
	void SetMapName(FString&& NewValue) { MapName_Optional = NewValue; MapName_IsSet = true; }
	 /** @brief Clears the value of MapName_Optional and sets MapName_IsSet to false */
	void ClearMapName() { MapName_IsSet = false; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString GameMode_Optional{  };
	/** @brief true if GameMode_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool GameMode_IsSet{ false };
	/** @brief Gets the value of GameMode_Optional, regardless of it having been set */
	FString& GetGameMode() { return GameMode_Optional; }
	/** @brief Gets the value of GameMode_Optional, regardless of it having been set */
	const FString& GetGameMode() const { return GameMode_Optional; }
	/** @brief Gets the value of GameMode_Optional, if it has been set, otherwise it returns DefaultValue */
	const FString& GetGameMode(const FString& DefaultValue) const { if (GameMode_IsSet) return GameMode_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of GameMode_Optional and returns true if it has been set, otherwise returns false */
	bool GetGameMode(FString& OutValue) const { if (GameMode_IsSet) OutValue = GameMode_Optional; return GameMode_IsSet; }
	/** @brief Returns a pointer to GameMode_Optional, if it has been set, otherwise returns nullptr */
	FString* GetGameModeOrNull() { if (GameMode_IsSet) return &GameMode_Optional; return nullptr; }
	/** @brief Returns a pointer to GameMode_Optional, if it has been set, otherwise returns nullptr */
	const FString* GetGameModeOrNull() const { if (GameMode_IsSet) return &GameMode_Optional; return nullptr; }
	/** @brief Sets the value of GameMode_Optional and also sets GameMode_IsSet to true */
	void SetGameMode(const FString& NewValue) { GameMode_Optional = NewValue; GameMode_IsSet = true; }
	/** @brief Sets the value of GameMode_Optional and also sets GameMode_IsSet to true using move semantics */
	void SetGameMode(FString&& NewValue) { GameMode_Optional = NewValue; GameMode_IsSet = true; }
	 /** @brief Clears the value of GameMode_Optional and sets GameMode_IsSet to false */
	void ClearGameMode() { GameMode_IsSet = false; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString MatchmakingProfileId_Optional{  };
	/** @brief true if MatchmakingProfileId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool MatchmakingProfileId_IsSet{ false };
	/** @brief Gets the value of MatchmakingProfileId_Optional, regardless of it having been set */
	FString& GetMatchmakingProfileId() { return MatchmakingProfileId_Optional; }
	/** @brief Gets the value of MatchmakingProfileId_Optional, regardless of it having been set */
	const FString& GetMatchmakingProfileId() const { return MatchmakingProfileId_Optional; }
	/** @brief Gets the value of MatchmakingProfileId_Optional, if it has been set, otherwise it returns DefaultValue */
	const FString& GetMatchmakingProfileId(const FString& DefaultValue) const { if (MatchmakingProfileId_IsSet) return MatchmakingProfileId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of MatchmakingProfileId_Optional and returns true if it has been set, otherwise returns false */
	bool GetMatchmakingProfileId(FString& OutValue) const { if (MatchmakingProfileId_IsSet) OutValue = MatchmakingProfileId_Optional; return MatchmakingProfileId_IsSet; }
	/** @brief Returns a pointer to MatchmakingProfileId_Optional, if it has been set, otherwise returns nullptr */
	FString* GetMatchmakingProfileIdOrNull() { if (MatchmakingProfileId_IsSet) return &MatchmakingProfileId_Optional; return nullptr; }
	/** @brief Returns a pointer to MatchmakingProfileId_Optional, if it has been set, otherwise returns nullptr */
	const FString* GetMatchmakingProfileIdOrNull() const { if (MatchmakingProfileId_IsSet) return &MatchmakingProfileId_Optional; return nullptr; }
	/** @brief Sets the value of MatchmakingProfileId_Optional and also sets MatchmakingProfileId_IsSet to true */
	void SetMatchmakingProfileId(const FString& NewValue) { MatchmakingProfileId_Optional = NewValue; MatchmakingProfileId_IsSet = true; }
	/** @brief Sets the value of MatchmakingProfileId_Optional and also sets MatchmakingProfileId_IsSet to true using move semantics */
	void SetMatchmakingProfileId(FString&& NewValue) { MatchmakingProfileId_Optional = NewValue; MatchmakingProfileId_IsSet = true; }
	 /** @brief Clears the value of MatchmakingProfileId_Optional and sets MatchmakingProfileId_IsSet to false */
	void ClearMatchmakingProfileId() { MatchmakingProfileId_IsSet = false; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 ExpectedTeamSize_Optional{  };
	/** @brief true if ExpectedTeamSize_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool ExpectedTeamSize_IsSet{ false };
	/** @brief Gets the value of ExpectedTeamSize_Optional, regardless of it having been set */
	int32& GetExpectedTeamSize() { return ExpectedTeamSize_Optional; }
	/** @brief Gets the value of ExpectedTeamSize_Optional, regardless of it having been set */
	const int32& GetExpectedTeamSize() const { return ExpectedTeamSize_Optional; }
	/** @brief Gets the value of ExpectedTeamSize_Optional, if it has been set, otherwise it returns DefaultValue */
	const int32& GetExpectedTeamSize(const int32& DefaultValue) const { if (ExpectedTeamSize_IsSet) return ExpectedTeamSize_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of ExpectedTeamSize_Optional and returns true if it has been set, otherwise returns false */
	bool GetExpectedTeamSize(int32& OutValue) const { if (ExpectedTeamSize_IsSet) OutValue = ExpectedTeamSize_Optional; return ExpectedTeamSize_IsSet; }
	/** @brief Returns a pointer to ExpectedTeamSize_Optional, if it has been set, otherwise returns nullptr */
	int32* GetExpectedTeamSizeOrNull() { if (ExpectedTeamSize_IsSet) return &ExpectedTeamSize_Optional; return nullptr; }
	/** @brief Returns a pointer to ExpectedTeamSize_Optional, if it has been set, otherwise returns nullptr */
	const int32* GetExpectedTeamSizeOrNull() const { if (ExpectedTeamSize_IsSet) return &ExpectedTeamSize_Optional; return nullptr; }
	/** @brief Sets the value of ExpectedTeamSize_Optional and also sets ExpectedTeamSize_IsSet to true */
	void SetExpectedTeamSize(const int32& NewValue) { ExpectedTeamSize_Optional = NewValue; ExpectedTeamSize_IsSet = true; }
	/** @brief Sets the value of ExpectedTeamSize_Optional and also sets ExpectedTeamSize_IsSet to true using move semantics */
	void SetExpectedTeamSize(int32&& NewValue) { ExpectedTeamSize_Optional = NewValue; ExpectedTeamSize_IsSet = true; }
	 /** @brief Clears the value of ExpectedTeamSize_Optional and sets ExpectedTeamSize_IsSet to false */
	void ClearExpectedTeamSize() { ExpectedTeamSize_Optional = 0; ExpectedTeamSize_IsSet = false; }
	/** @brief Returns true if ExpectedTeamSize_Optional is set and matches the default value */
	bool IsExpectedTeamSizeDefaultValue() const { return ExpectedTeamSize_IsSet && ExpectedTeamSize_Optional == 0; }
	/** @brief Sets the value of ExpectedTeamSize_Optional to its default and also sets ExpectedTeamSize_IsSet to true */
	void SetExpectedTeamSizeToDefault() { ExpectedTeamSize_Optional = 0; ExpectedTeamSize_IsSet = true; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 ExpectedPlayerCount_Optional{  };
	/** @brief true if ExpectedPlayerCount_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool ExpectedPlayerCount_IsSet{ false };
	/** @brief Gets the value of ExpectedPlayerCount_Optional, regardless of it having been set */
	int32& GetExpectedPlayerCount() { return ExpectedPlayerCount_Optional; }
	/** @brief Gets the value of ExpectedPlayerCount_Optional, regardless of it having been set */
	const int32& GetExpectedPlayerCount() const { return ExpectedPlayerCount_Optional; }
	/** @brief Gets the value of ExpectedPlayerCount_Optional, if it has been set, otherwise it returns DefaultValue */
	const int32& GetExpectedPlayerCount(const int32& DefaultValue) const { if (ExpectedPlayerCount_IsSet) return ExpectedPlayerCount_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of ExpectedPlayerCount_Optional and returns true if it has been set, otherwise returns false */
	bool GetExpectedPlayerCount(int32& OutValue) const { if (ExpectedPlayerCount_IsSet) OutValue = ExpectedPlayerCount_Optional; return ExpectedPlayerCount_IsSet; }
	/** @brief Returns a pointer to ExpectedPlayerCount_Optional, if it has been set, otherwise returns nullptr */
	int32* GetExpectedPlayerCountOrNull() { if (ExpectedPlayerCount_IsSet) return &ExpectedPlayerCount_Optional; return nullptr; }
	/** @brief Returns a pointer to ExpectedPlayerCount_Optional, if it has been set, otherwise returns nullptr */
	const int32* GetExpectedPlayerCountOrNull() const { if (ExpectedPlayerCount_IsSet) return &ExpectedPlayerCount_Optional; return nullptr; }
	/** @brief Sets the value of ExpectedPlayerCount_Optional and also sets ExpectedPlayerCount_IsSet to true */
	void SetExpectedPlayerCount(const int32& NewValue) { ExpectedPlayerCount_Optional = NewValue; ExpectedPlayerCount_IsSet = true; }
	/** @brief Sets the value of ExpectedPlayerCount_Optional and also sets ExpectedPlayerCount_IsSet to true using move semantics */
	void SetExpectedPlayerCount(int32&& NewValue) { ExpectedPlayerCount_Optional = NewValue; ExpectedPlayerCount_IsSet = true; }
	 /** @brief Clears the value of ExpectedPlayerCount_Optional and sets ExpectedPlayerCount_IsSet to false */
	void ClearExpectedPlayerCount() { ExpectedPlayerCount_Optional = 0; ExpectedPlayerCount_IsSet = false; }
	/** @brief Returns true if ExpectedPlayerCount_Optional is set and matches the default value */
	bool IsExpectedPlayerCountDefaultValue() const { return ExpectedPlayerCount_IsSet && ExpectedPlayerCount_Optional == 0; }
	/** @brief Sets the value of ExpectedPlayerCount_Optional to its default and also sets ExpectedPlayerCount_IsSet to true */
	void SetExpectedPlayerCountToDefault() { ExpectedPlayerCount_Optional = 0; ExpectedPlayerCount_IsSet = true; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString HostPlayerUuid_Optional{  };
	/** @brief true if HostPlayerUuid_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool HostPlayerUuid_IsSet{ false };
	/** @brief Gets the value of HostPlayerUuid_Optional, regardless of it having been set */
	FString& GetHostPlayerUuid() { return HostPlayerUuid_Optional; }
	/** @brief Gets the value of HostPlayerUuid_Optional, regardless of it having been set */
	const FString& GetHostPlayerUuid() const { return HostPlayerUuid_Optional; }
	/** @brief Gets the value of HostPlayerUuid_Optional, if it has been set, otherwise it returns DefaultValue */
	const FString& GetHostPlayerUuid(const FString& DefaultValue) const { if (HostPlayerUuid_IsSet) return HostPlayerUuid_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of HostPlayerUuid_Optional and returns true if it has been set, otherwise returns false */
	bool GetHostPlayerUuid(FString& OutValue) const { if (HostPlayerUuid_IsSet) OutValue = HostPlayerUuid_Optional; return HostPlayerUuid_IsSet; }
	/** @brief Returns a pointer to HostPlayerUuid_Optional, if it has been set, otherwise returns nullptr */
	FString* GetHostPlayerUuidOrNull() { if (HostPlayerUuid_IsSet) return &HostPlayerUuid_Optional; return nullptr; }
	/** @brief Returns a pointer to HostPlayerUuid_Optional, if it has been set, otherwise returns nullptr */
	const FString* GetHostPlayerUuidOrNull() const { if (HostPlayerUuid_IsSet) return &HostPlayerUuid_Optional; return nullptr; }
	/** @brief Sets the value of HostPlayerUuid_Optional and also sets HostPlayerUuid_IsSet to true */
	void SetHostPlayerUuid(const FString& NewValue) { HostPlayerUuid_Optional = NewValue; HostPlayerUuid_IsSet = true; }
	/** @brief Sets the value of HostPlayerUuid_Optional and also sets HostPlayerUuid_IsSet to true using move semantics */
	void SetHostPlayerUuid(FString&& NewValue) { HostPlayerUuid_Optional = NewValue; HostPlayerUuid_IsSet = true; }
	 /** @brief Clears the value of HostPlayerUuid_Optional and sets HostPlayerUuid_IsSet to false */
	void ClearHostPlayerUuid() { HostPlayerUuid_IsSet = false; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString OwningPlayerUuid_Optional{  };
	/** @brief true if OwningPlayerUuid_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool OwningPlayerUuid_IsSet{ false };
	/** @brief Gets the value of OwningPlayerUuid_Optional, regardless of it having been set */
	FString& GetOwningPlayerUuid() { return OwningPlayerUuid_Optional; }
	/** @brief Gets the value of OwningPlayerUuid_Optional, regardless of it having been set */
	const FString& GetOwningPlayerUuid() const { return OwningPlayerUuid_Optional; }
	/** @brief Gets the value of OwningPlayerUuid_Optional, if it has been set, otherwise it returns DefaultValue */
	const FString& GetOwningPlayerUuid(const FString& DefaultValue) const { if (OwningPlayerUuid_IsSet) return OwningPlayerUuid_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of OwningPlayerUuid_Optional and returns true if it has been set, otherwise returns false */
	bool GetOwningPlayerUuid(FString& OutValue) const { if (OwningPlayerUuid_IsSet) OutValue = OwningPlayerUuid_Optional; return OwningPlayerUuid_IsSet; }
	/** @brief Returns a pointer to OwningPlayerUuid_Optional, if it has been set, otherwise returns nullptr */
	FString* GetOwningPlayerUuidOrNull() { if (OwningPlayerUuid_IsSet) return &OwningPlayerUuid_Optional; return nullptr; }
	/** @brief Returns a pointer to OwningPlayerUuid_Optional, if it has been set, otherwise returns nullptr */
	const FString* GetOwningPlayerUuidOrNull() const { if (OwningPlayerUuid_IsSet) return &OwningPlayerUuid_Optional; return nullptr; }
	/** @brief Sets the value of OwningPlayerUuid_Optional and also sets OwningPlayerUuid_IsSet to true */
	void SetOwningPlayerUuid(const FString& NewValue) { OwningPlayerUuid_Optional = NewValue; OwningPlayerUuid_IsSet = true; }
	/** @brief Sets the value of OwningPlayerUuid_Optional and also sets OwningPlayerUuid_IsSet to true using move semantics */
	void SetOwningPlayerUuid(FString&& NewValue) { OwningPlayerUuid_Optional = NewValue; OwningPlayerUuid_IsSet = true; }
	 /** @brief Clears the value of OwningPlayerUuid_Optional and sets OwningPlayerUuid_IsSet to false */
	void ClearOwningPlayerUuid() { OwningPlayerUuid_IsSet = false; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString Version_Optional{  };
	/** @brief true if Version_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Version_IsSet{ false };
	/** @brief Gets the value of Version_Optional, regardless of it having been set */
	FString& GetVersion() { return Version_Optional; }
	/** @brief Gets the value of Version_Optional, regardless of it having been set */
	const FString& GetVersion() const { return Version_Optional; }
	/** @brief Gets the value of Version_Optional, if it has been set, otherwise it returns DefaultValue */
	const FString& GetVersion(const FString& DefaultValue) const { if (Version_IsSet) return Version_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Version_Optional and returns true if it has been set, otherwise returns false */
	bool GetVersion(FString& OutValue) const { if (Version_IsSet) OutValue = Version_Optional; return Version_IsSet; }
	/** @brief Returns a pointer to Version_Optional, if it has been set, otherwise returns nullptr */
	FString* GetVersionOrNull() { if (Version_IsSet) return &Version_Optional; return nullptr; }
	/** @brief Returns a pointer to Version_Optional, if it has been set, otherwise returns nullptr */
	const FString* GetVersionOrNull() const { if (Version_IsSet) return &Version_Optional; return nullptr; }
	/** @brief Sets the value of Version_Optional and also sets Version_IsSet to true */
	void SetVersion(const FString& NewValue) { Version_Optional = NewValue; Version_IsSet = true; }
	/** @brief Sets the value of Version_Optional and also sets Version_IsSet to true using move semantics */
	void SetVersion(FString&& NewValue) { Version_Optional = NewValue; Version_IsSet = true; }
	 /** @brief Clears the value of Version_Optional and sets Version_IsSet to false */
	void ClearVersion() { Version_IsSet = false; }
};

/** @} */
