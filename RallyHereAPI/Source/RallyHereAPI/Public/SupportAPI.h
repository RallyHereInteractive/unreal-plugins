// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereAPIAuthContext.h"
#include "RallyHereAPIHelpers.h"
#include "CreateSupportLogRequest.h"
#include "HTTPValidationError.h"
#include "HzApiErrorModel.h"
#include "SupportLogEntry.h"
#include "SupportLogPageResponse.h"

namespace RallyHereAPI
{
using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

// forward declaration
class FSupportAPI;

/**
 * @brief Create Support Log
 * Create a new support log entry for a player.
 *     
 * Required Permissions:
 * 
 * - For any user (including themselves) any of: `support:log:write`, `user:*`
*/
struct RALLYHEREAPI_API FRequest_CreateSupportLog : public FRequest
{
	FRequest_CreateSupportLog();
	virtual ~FRequest_CreateSupportLog() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FRHAPI_CreateSupportLogRequest CreateSupportLogRequest;
};

/** The response type for FRequest_CreateSupportLog */
struct RALLYHEREAPI_API FResponse_CreateSupportLog : public FResponseAccessorTemplate<FRHAPI_SupportLogEntry, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_SupportLogEntry, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_CreateSupportLog(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_CreateSupportLog() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_SupportLogEntry Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_SupportLogEntry& OutContent) const { return TryGetContent<FRHAPI_SupportLogEntry>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_SupportLogEntry>& OutContent) const { return TryGetContent<FRHAPI_SupportLogEntry>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_SupportLogEntry* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_SupportLogEntry>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_SupportLogEntry> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_SupportLogEntry>(); }

	// Individual Response Helpers	
	/* Response 201
	Successful Response
	*/
	bool TryGetContentFor201(FRHAPI_SupportLogEntry& OutContent) const;

	/* Response 400
	Bad Request
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_CreateSupportLog */
DECLARE_DELEGATE_OneParam(FDelegate_CreateSupportLog, const FResponse_CreateSupportLog&);

/** @brief A helper metadata object for CreateSupportLog that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_CreateSupportLog
{
	/** The request type */
	typedef FRequest_CreateSupportLog Request;
	/** The response type */
	typedef FResponse_CreateSupportLog Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_CreateSupportLog Delegate;
	/** The API object that supports this API call */
	typedef FSupportAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Support Logs
 * Get a page of support logs for a player by UUID or person ID.
 *     
 * Required Permissions:
 * 
 * - For any user (including themselves) any of: `support:log:read`, `user:*`
*/
struct RALLYHEREAPI_API FRequest_GetSupportLogs : public FRequest
{
	FRequest_GetSupportLogs();
	virtual ~FRequest_GetSupportLogs() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	/* The player UUID to get support logs for */
	TOptional<FGuid> PlayerUuid;
	/* The person ID to get support logs for */
	TOptional<FGuid> PersonId;
	/* The page number to retrieve */
	TOptional<int32> Page;
	/* The number of logs per page */
	TOptional<int32> PageSize;
};

/** The response type for FRequest_GetSupportLogs */
struct RALLYHEREAPI_API FResponse_GetSupportLogs : public FResponseAccessorTemplate<FRHAPI_SupportLogPageResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_SupportLogPageResponse, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetSupportLogs(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetSupportLogs() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_SupportLogPageResponse Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_SupportLogPageResponse& OutContent) const { return TryGetContent<FRHAPI_SupportLogPageResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_SupportLogPageResponse>& OutContent) const { return TryGetContent<FRHAPI_SupportLogPageResponse>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_SupportLogPageResponse* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_SupportLogPageResponse>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_SupportLogPageResponse> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_SupportLogPageResponse>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_SupportLogPageResponse& OutContent) const;

	/* Response 400
	Bad Request
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetSupportLogs */
DECLARE_DELEGATE_OneParam(FDelegate_GetSupportLogs, const FResponse_GetSupportLogs&);

/** @brief A helper metadata object for GetSupportLogs that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetSupportLogs
{
	/** The request type */
	typedef FRequest_GetSupportLogs Request;
	/** The response type */
	typedef FResponse_GetSupportLogs Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetSupportLogs Delegate;
	/** The API object that supports this API call */
	typedef FSupportAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};


/** The API class itself, which will handle calls to */
class RALLYHEREAPI_API FSupportAPI : public FAPI
{
public:
	FSupportAPI();
	virtual ~FSupportAPI();

	FHttpRequestPtr CreateSupportLog(const FRequest_CreateSupportLog& Request, const FDelegate_CreateSupportLog& Delegate = FDelegate_CreateSupportLog(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnCreateSupportLogResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_CreateSupportLog Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetSupportLogs(const FRequest_GetSupportLogs& Request, const FDelegate_GetSupportLogs& Delegate = FDelegate_GetSupportLogs(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetSupportLogsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetSupportLogs Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};



}
