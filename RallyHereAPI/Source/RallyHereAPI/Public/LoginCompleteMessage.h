// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "Restriction.h"
#include "LoginCompleteMessage.generated.h"

/** @defgroup RHAPI_LoginCompleteMessage RallyHere API Model LoginCompleteMessage
 *  @{
 */

/**
 * @brief Error message for when a user has not agreed to the required agreements (EULA, TOS, or Privacy Policy), or was denied login for restrictions
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_LoginCompleteMessage : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool AuthSuccess_Optional{ true };
	/** @brief true if AuthSuccess_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool AuthSuccess_IsSet{ false };
	/** @brief Gets the value of AuthSuccess_Optional, regardless of it having been set */
	FORCEINLINE bool& GetAuthSuccess() { return AuthSuccess_Optional; }
	/** @brief Gets the value of AuthSuccess_Optional, regardless of it having been set */
	FORCEINLINE const bool& GetAuthSuccess() const { return AuthSuccess_Optional; }
	/** @brief Gets the value of AuthSuccess_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const bool& GetAuthSuccess(const bool& DefaultValue) const { if (AuthSuccess_IsSet) return AuthSuccess_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of AuthSuccess_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetAuthSuccess(bool& OutValue) const { if (AuthSuccess_IsSet) OutValue = AuthSuccess_Optional; return AuthSuccess_IsSet; }
	/** @brief Returns a pointer to AuthSuccess_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE bool* GetAuthSuccessOrNull() { if (AuthSuccess_IsSet) return (&AuthSuccess_Optional); return nullptr; }
	/** @brief Returns a pointer to AuthSuccess_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const bool* GetAuthSuccessOrNull() const { if (AuthSuccess_IsSet) return (&AuthSuccess_Optional); return nullptr; }
	/** @brief Sets the value of AuthSuccess_Optional and also sets AuthSuccess_IsSet to true */
	FORCEINLINE void SetAuthSuccess(const bool& NewValue) { AuthSuccess_Optional = NewValue; AuthSuccess_IsSet = true;  }
	/** @brief Sets the value of AuthSuccess_Optional and also sets AuthSuccess_IsSet to true using move semantics */
	FORCEINLINE void SetAuthSuccess(bool&& NewValue) { AuthSuccess_Optional = NewValue; AuthSuccess_IsSet = true;  }
	/** @brief Clears the value of AuthSuccess_Optional and sets AuthSuccess_IsSet to false */
	void ClearAuthSuccess() { AuthSuccess_Optional = true; AuthSuccess_IsSet = false;  }
	/** @brief Returns the default value of AuthSuccess */
	FORCEINLINE bool GetDefaultValue_AuthSuccess() { return true; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString ErrorCode{  };
	/** @brief Gets the value of ErrorCode */
	FORCEINLINE FString& GetErrorCode() { return ErrorCode; }
	/** @brief Gets the value of ErrorCode */
	FORCEINLINE const FString& GetErrorCode() const { return ErrorCode; }
	/** @brief Sets the value of ErrorCode */
	FORCEINLINE void SetErrorCode(const FString& NewValue) { ErrorCode = NewValue;   }
	/** @brief Sets the value of ErrorCode using move semantics */
	FORCEINLINE void SetErrorCode(FString&& NewValue) { ErrorCode = NewValue;   }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString Desc{  };
	/** @brief Gets the value of Desc */
	FORCEINLINE FString& GetDesc() { return Desc; }
	/** @brief Gets the value of Desc */
	FORCEINLINE const FString& GetDesc() const { return Desc; }
	/** @brief Sets the value of Desc */
	FORCEINLINE void SetDesc(const FString& NewValue) { Desc = NewValue;   }
	/** @brief Sets the value of Desc using move semantics */
	FORCEINLINE void SetDesc(FString&& NewValue) { Desc = NewValue;   }

	/** @brief Whether the user needs to accept the End User License Agreement */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool NeedsEula_Optional{ false };
	/** @brief true if NeedsEula_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool NeedsEula_IsSet{ false };
	/** @brief Gets the value of NeedsEula_Optional, regardless of it having been set */
	FORCEINLINE bool& GetNeedsEula() { return NeedsEula_Optional; }
	/** @brief Gets the value of NeedsEula_Optional, regardless of it having been set */
	FORCEINLINE const bool& GetNeedsEula() const { return NeedsEula_Optional; }
	/** @brief Gets the value of NeedsEula_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const bool& GetNeedsEula(const bool& DefaultValue) const { if (NeedsEula_IsSet) return NeedsEula_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of NeedsEula_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetNeedsEula(bool& OutValue) const { if (NeedsEula_IsSet) OutValue = NeedsEula_Optional; return NeedsEula_IsSet; }
	/** @brief Returns a pointer to NeedsEula_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE bool* GetNeedsEulaOrNull() { if (NeedsEula_IsSet) return (&NeedsEula_Optional); return nullptr; }
	/** @brief Returns a pointer to NeedsEula_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const bool* GetNeedsEulaOrNull() const { if (NeedsEula_IsSet) return (&NeedsEula_Optional); return nullptr; }
	/** @brief Sets the value of NeedsEula_Optional and also sets NeedsEula_IsSet to true */
	FORCEINLINE void SetNeedsEula(const bool& NewValue) { NeedsEula_Optional = NewValue; NeedsEula_IsSet = true;  }
	/** @brief Sets the value of NeedsEula_Optional and also sets NeedsEula_IsSet to true using move semantics */
	FORCEINLINE void SetNeedsEula(bool&& NewValue) { NeedsEula_Optional = NewValue; NeedsEula_IsSet = true;  }
	/** @brief Clears the value of NeedsEula_Optional and sets NeedsEula_IsSet to false */
	void ClearNeedsEula() { NeedsEula_Optional = false; NeedsEula_IsSet = false;  }
	/** @brief Returns the default value of NeedsEula */
	FORCEINLINE bool GetDefaultValue_NeedsEula() { return false; }

	/** @brief Whether the user needs to accept the Terms of Service */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool NeedsTos_Optional{ false };
	/** @brief true if NeedsTos_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool NeedsTos_IsSet{ false };
	/** @brief Gets the value of NeedsTos_Optional, regardless of it having been set */
	FORCEINLINE bool& GetNeedsTos() { return NeedsTos_Optional; }
	/** @brief Gets the value of NeedsTos_Optional, regardless of it having been set */
	FORCEINLINE const bool& GetNeedsTos() const { return NeedsTos_Optional; }
	/** @brief Gets the value of NeedsTos_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const bool& GetNeedsTos(const bool& DefaultValue) const { if (NeedsTos_IsSet) return NeedsTos_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of NeedsTos_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetNeedsTos(bool& OutValue) const { if (NeedsTos_IsSet) OutValue = NeedsTos_Optional; return NeedsTos_IsSet; }
	/** @brief Returns a pointer to NeedsTos_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE bool* GetNeedsTosOrNull() { if (NeedsTos_IsSet) return (&NeedsTos_Optional); return nullptr; }
	/** @brief Returns a pointer to NeedsTos_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const bool* GetNeedsTosOrNull() const { if (NeedsTos_IsSet) return (&NeedsTos_Optional); return nullptr; }
	/** @brief Sets the value of NeedsTos_Optional and also sets NeedsTos_IsSet to true */
	FORCEINLINE void SetNeedsTos(const bool& NewValue) { NeedsTos_Optional = NewValue; NeedsTos_IsSet = true;  }
	/** @brief Sets the value of NeedsTos_Optional and also sets NeedsTos_IsSet to true using move semantics */
	FORCEINLINE void SetNeedsTos(bool&& NewValue) { NeedsTos_Optional = NewValue; NeedsTos_IsSet = true;  }
	/** @brief Clears the value of NeedsTos_Optional and sets NeedsTos_IsSet to false */
	void ClearNeedsTos() { NeedsTos_Optional = false; NeedsTos_IsSet = false;  }
	/** @brief Returns the default value of NeedsTos */
	FORCEINLINE bool GetDefaultValue_NeedsTos() { return false; }

	/** @brief Whether the user needs to accept the Privacy Policy */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool NeedsPrivacyPolicy_Optional{ false };
	/** @brief true if NeedsPrivacyPolicy_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool NeedsPrivacyPolicy_IsSet{ false };
	/** @brief Gets the value of NeedsPrivacyPolicy_Optional, regardless of it having been set */
	FORCEINLINE bool& GetNeedsPrivacyPolicy() { return NeedsPrivacyPolicy_Optional; }
	/** @brief Gets the value of NeedsPrivacyPolicy_Optional, regardless of it having been set */
	FORCEINLINE const bool& GetNeedsPrivacyPolicy() const { return NeedsPrivacyPolicy_Optional; }
	/** @brief Gets the value of NeedsPrivacyPolicy_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const bool& GetNeedsPrivacyPolicy(const bool& DefaultValue) const { if (NeedsPrivacyPolicy_IsSet) return NeedsPrivacyPolicy_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of NeedsPrivacyPolicy_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetNeedsPrivacyPolicy(bool& OutValue) const { if (NeedsPrivacyPolicy_IsSet) OutValue = NeedsPrivacyPolicy_Optional; return NeedsPrivacyPolicy_IsSet; }
	/** @brief Returns a pointer to NeedsPrivacyPolicy_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE bool* GetNeedsPrivacyPolicyOrNull() { if (NeedsPrivacyPolicy_IsSet) return (&NeedsPrivacyPolicy_Optional); return nullptr; }
	/** @brief Returns a pointer to NeedsPrivacyPolicy_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const bool* GetNeedsPrivacyPolicyOrNull() const { if (NeedsPrivacyPolicy_IsSet) return (&NeedsPrivacyPolicy_Optional); return nullptr; }
	/** @brief Sets the value of NeedsPrivacyPolicy_Optional and also sets NeedsPrivacyPolicy_IsSet to true */
	FORCEINLINE void SetNeedsPrivacyPolicy(const bool& NewValue) { NeedsPrivacyPolicy_Optional = NewValue; NeedsPrivacyPolicy_IsSet = true;  }
	/** @brief Sets the value of NeedsPrivacyPolicy_Optional and also sets NeedsPrivacyPolicy_IsSet to true using move semantics */
	FORCEINLINE void SetNeedsPrivacyPolicy(bool&& NewValue) { NeedsPrivacyPolicy_Optional = NewValue; NeedsPrivacyPolicy_IsSet = true;  }
	/** @brief Clears the value of NeedsPrivacyPolicy_Optional and sets NeedsPrivacyPolicy_IsSet to false */
	void ClearNeedsPrivacyPolicy() { NeedsPrivacyPolicy_Optional = false; NeedsPrivacyPolicy_IsSet = false;  }
	/** @brief Returns the default value of NeedsPrivacyPolicy */
	FORCEINLINE bool GetDefaultValue_NeedsPrivacyPolicy() { return false; }

	/** @brief Restrictions which prevented login.  Does NOT include unrelated restrictions that didn't prevent login */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TArray<FRHAPI_Restriction> Restrictions_Optional{  };
	/** @brief true if Restrictions_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Restrictions_IsSet{ false };
	/** @brief Gets the value of Restrictions_Optional, regardless of it having been set */
	FORCEINLINE TArray<FRHAPI_Restriction>& GetRestrictions() { return Restrictions_Optional; }
	/** @brief Gets the value of Restrictions_Optional, regardless of it having been set */
	FORCEINLINE const TArray<FRHAPI_Restriction>& GetRestrictions() const { return Restrictions_Optional; }
	/** @brief Gets the value of Restrictions_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const TArray<FRHAPI_Restriction>& GetRestrictions(const TArray<FRHAPI_Restriction>& DefaultValue) const { if (Restrictions_IsSet) return Restrictions_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Restrictions_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetRestrictions(TArray<FRHAPI_Restriction>& OutValue) const { if (Restrictions_IsSet) OutValue = Restrictions_Optional; return Restrictions_IsSet; }
	/** @brief Returns a pointer to Restrictions_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE TArray<FRHAPI_Restriction>* GetRestrictionsOrNull() { if (Restrictions_IsSet) return (&Restrictions_Optional); return nullptr; }
	/** @brief Returns a pointer to Restrictions_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const TArray<FRHAPI_Restriction>* GetRestrictionsOrNull() const { if (Restrictions_IsSet) return (&Restrictions_Optional); return nullptr; }
	/** @brief Sets the value of Restrictions_Optional and also sets Restrictions_IsSet to true */
	FORCEINLINE void SetRestrictions(const TArray<FRHAPI_Restriction>& NewValue) { Restrictions_Optional = NewValue; Restrictions_IsSet = true;  }
	/** @brief Sets the value of Restrictions_Optional and also sets Restrictions_IsSet to true using move semantics */
	FORCEINLINE void SetRestrictions(TArray<FRHAPI_Restriction>&& NewValue) { Restrictions_Optional = NewValue; Restrictions_IsSet = true;  }
	/** @brief Clears the value of Restrictions_Optional and sets Restrictions_IsSet to false */
	void ClearRestrictions() { Restrictions_IsSet = false;  }
};

/** @} */
