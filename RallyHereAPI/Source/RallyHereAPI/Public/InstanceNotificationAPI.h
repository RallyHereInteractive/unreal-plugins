// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereAPIAuthContext.h"
#include "RallyHereAPIHelpers.h"
#include "OffsetReset.h"
#include "HTTPValidationError.h"
#include "HzApiErrorModel.h"
#include "Notification.h"
#include "NotificationCreateResult.h"
#include "NotificationCreates.h"
#include "Notifications.h"

namespace RallyHereAPI
{
using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

struct FRequest_InstanceCreateNotification;
struct FResponse_InstanceCreateNotification;
struct FRequest_InstanceGetNotificationById;
struct FResponse_InstanceGetNotificationById;
struct FRequest_InstanceGetNotificationsPage;
struct FResponse_InstanceGetNotificationsPage;
struct FRequest_InstanceLongPollForNotifications;
struct FResponse_InstanceLongPollForNotifications;

DECLARE_DELEGATE_OneParam(FDelegate_InstanceCreateNotification, const FResponse_InstanceCreateNotification&);
DECLARE_DELEGATE_OneParam(FDelegate_InstanceGetNotificationById, const FResponse_InstanceGetNotificationById&);
DECLARE_DELEGATE_OneParam(FDelegate_InstanceGetNotificationsPage, const FResponse_InstanceGetNotificationsPage&);
DECLARE_DELEGATE_OneParam(FDelegate_InstanceLongPollForNotifications, const FResponse_InstanceLongPollForNotifications&);

class RALLYHEREAPI_API FInstanceNotificationAPI : public FAPI
{
public:
	FInstanceNotificationAPI();
	virtual ~FInstanceNotificationAPI();

	FHttpRequestPtr InstanceCreateNotification(const FRequest_InstanceCreateNotification& Request, const FDelegate_InstanceCreateNotification& Delegate = FDelegate_InstanceCreateNotification(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr InstanceGetNotificationById(const FRequest_InstanceGetNotificationById& Request, const FDelegate_InstanceGetNotificationById& Delegate = FDelegate_InstanceGetNotificationById(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr InstanceGetNotificationsPage(const FRequest_InstanceGetNotificationsPage& Request, const FDelegate_InstanceGetNotificationsPage& Delegate = FDelegate_InstanceGetNotificationsPage(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr InstanceLongPollForNotifications(const FRequest_InstanceLongPollForNotifications& Request, const FDelegate_InstanceLongPollForNotifications& Delegate = FDelegate_InstanceLongPollForNotifications(), int32 Priority = DefaultRallyHereAPIPriority);

private:
	void OnInstanceCreateNotificationResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_InstanceCreateNotification Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnInstanceGetNotificationByIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_InstanceGetNotificationById Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnInstanceGetNotificationsPageResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_InstanceGetNotificationsPage Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnInstanceLongPollForNotificationsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_InstanceLongPollForNotifications Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};

/* Create Notification
 *
 * Create new notification for client.  Requires permission to create for a different client
 * 
 * Required Permissions:
 * 
 * - For any instance (including themselves) any of: `notification:instance:*`, `notification:instance:write`
 * 
 * - For the instance themselves any of: `notification:instance:self:*`, `notification:instance:self:write`
*/
struct RALLYHEREAPI_API FRequest_InstanceCreateNotification : public FRequest
{
	FRequest_InstanceCreateNotification();
	virtual ~FRequest_InstanceCreateNotification() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
	FString InstanceId;
	FRHAPI_NotificationCreates NotificationCreates;
};

struct RALLYHEREAPI_API FResponse_InstanceCreateNotification : public FResponse
{
	FResponse_InstanceCreateNotification(FRequestMetadata InRequestMetadata);
	virtual ~FResponse_InstanceCreateNotification() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

	FRHAPI_NotificationCreateResult Content;


	// Manual Response Helpers
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_NotificationCreateResult& OutContent) const;

	/* Response 400
	 Error Codes: - bad_id - Passed client id is not a valid id 
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	 Error Codes: - auth_malformed_access - Invalid Authorization - malformed access token - auth_invalid_key_id - Invalid Authorization - Invalid Key ID in Access Token - auth_not_jwt - Invalid Authorization - insufficient_permissions - Insufficient Permissions - auth_token_expired - Token is expired - auth_token_invalid_claim - Token contained invalid claim value: {} - auth_token_sig_invalid - Token Signature is invalid - auth_invalid_version - Invalid Authorization - version - auth_token_unknown - Failed to parse token - auth_token_format - Invalid Authorization - {} 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 409
	 Error Codes: - too_many_listening_to_single_client - An enumeration. 
	*/
	bool TryGetContentFor409(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

	/* Response 503
	 Error Codes: - connection_limit_reached - An enumeration. 
	*/
	bool TryGetContentFor503(FRHAPI_HzApiErrorModel& OutContent) const;

};

struct RALLYHEREAPI_API Traits_InstanceCreateNotification
{
	typedef FRequest_InstanceCreateNotification Request;
	typedef FResponse_InstanceCreateNotification Response;
	typedef FDelegate_InstanceCreateNotification Delegate;
	typedef FInstanceNotificationAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.InstanceCreateNotification(InRequest, InDelegate, Priority); }
};

/* Get Notification By Id
 *
 * Retrieve a single notification by id
 * 
 * This version can be used for any client provided its id (with proper permissions)
 * 
 * Required Permissions:
 * 
 * - For any instance (including themselves) any of: `notification:instance:read`, `notification:instance:*`
 * 
 * - For the instance themselves any of: `notification:instance:self:read`, `notification:instance:self:*`
*/
struct RALLYHEREAPI_API FRequest_InstanceGetNotificationById : public FRequest
{
	FRequest_InstanceGetNotificationById();
	virtual ~FRequest_InstanceGetNotificationById() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
	FString NotificationId;
	FString InstanceId;
};

struct RALLYHEREAPI_API FResponse_InstanceGetNotificationById : public FResponse
{
	FResponse_InstanceGetNotificationById(FRequestMetadata InRequestMetadata);
	virtual ~FResponse_InstanceGetNotificationById() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

	FRHAPI_Notification Content;


	// Manual Response Helpers
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_Notification& OutContent) const;

	/* Response 400
	 Error Codes: - bad_id - Passed client id is not a valid id 
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	 Error Codes: - auth_malformed_access - Invalid Authorization - malformed access token - auth_invalid_key_id - Invalid Authorization - Invalid Key ID in Access Token - auth_not_jwt - Invalid Authorization - insufficient_permissions - Insufficient Permissions - auth_token_expired - Token is expired - auth_token_invalid_claim - Token contained invalid claim value: {} - auth_token_sig_invalid - Token Signature is invalid - auth_invalid_version - Invalid Authorization - version - auth_token_unknown - Failed to parse token - auth_token_format - Invalid Authorization - {} 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	 Error Codes: - resource_not_found - Notification could not be found 
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 409
	 Error Codes: - too_many_listening_to_single_client - An enumeration. 
	*/
	bool TryGetContentFor409(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

	/* Response 503
	 Error Codes: - connection_limit_reached - An enumeration. 
	*/
	bool TryGetContentFor503(FRHAPI_HzApiErrorModel& OutContent) const;

};

struct RALLYHEREAPI_API Traits_InstanceGetNotificationById
{
	typedef FRequest_InstanceGetNotificationById Request;
	typedef FResponse_InstanceGetNotificationById Response;
	typedef FDelegate_InstanceGetNotificationById Delegate;
	typedef FInstanceNotificationAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.InstanceGetNotificationById(InRequest, InDelegate, Priority); }
};

/* Get Notifications Page
 *
 * Get recent notifications ordered from the newest to the oldest.
 * 
 * It is important to stress that this endpoint returns notifications in reverse order compared to the streaming API.
 * The first notification returned from this will be the newest one we can find, and older ones will be further down
 * the page (or on later pages).
 * 
 * This API is useful for displaying a list of the most recent notifications to the user, only requesting further
 * pages when the user requests a bigger list.
 * 
 * Client are expected to poll this endpoint regularly.
 * 
 * This version can be used for any client provided its id (with proper permissions)
 * 
 * Required Permissions:
 * 
 * - For any instance (including themselves) any of: `notification:instance:read`, `notification:instance:*`
 * 
 * - For the instance themselves any of: `notification:instance:self:read`, `notification:instance:self:*`
*/
struct RALLYHEREAPI_API FRequest_InstanceGetNotificationsPage : public FRequest
{
	FRequest_InstanceGetNotificationsPage();
	virtual ~FRequest_InstanceGetNotificationsPage() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
	FString InstanceId;
	TOptional<int32> PageSize;
	/* Return results starting at this index (inclusive).  If none provided then will start at the latest notification.  You cannot depend on the format of this string, and it must be considered opaque */
	TOptional<FString> StartAt;
	/* All notifications including and before this (chronologically) provided id will be ignored when returning results.  You cannot depend on the format of this string, and it must be considered opaque */
	TOptional<FString> ExcludeBefore;
	/* If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed */
	TOptional<FString> IfNoneMatch;
};

struct RALLYHEREAPI_API FResponse_InstanceGetNotificationsPage : public FResponse
{
	FResponse_InstanceGetNotificationsPage(FRequestMetadata InRequestMetadata);
	virtual ~FResponse_InstanceGetNotificationsPage() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

	FRHAPI_Notifications Content;


	// Manual Response Helpers
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_Notifications& OutContent) const;

	/* Response 304
	Not Modified
	*/

	/* Response 400
	 Error Codes: - bad_id - Passed client id is not a valid id 
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	 Error Codes: - auth_malformed_access - Invalid Authorization - malformed access token - auth_invalid_key_id - Invalid Authorization - Invalid Key ID in Access Token - auth_not_jwt - Invalid Authorization - insufficient_permissions - Insufficient Permissions - auth_token_expired - Token is expired - auth_token_invalid_claim - Token contained invalid claim value: {} - auth_token_sig_invalid - Token Signature is invalid - auth_invalid_version - Invalid Authorization - version - auth_token_unknown - Failed to parse token - auth_token_format - Invalid Authorization - {} 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 409
	 Error Codes: - too_many_listening_to_single_client - An enumeration. 
	*/
	bool TryGetContentFor409(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

	/* Response 503
	 Error Codes: - connection_limit_reached - An enumeration. 
	*/
	bool TryGetContentFor503(FRHAPI_HzApiErrorModel& OutContent) const;

};

struct RALLYHEREAPI_API Traits_InstanceGetNotificationsPage
{
	typedef FRequest_InstanceGetNotificationsPage Request;
	typedef FResponse_InstanceGetNotificationsPage Response;
	typedef FDelegate_InstanceGetNotificationsPage Delegate;
	typedef FInstanceNotificationAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.InstanceGetNotificationsPage(InRequest, InDelegate, Priority); }
};

/* Long Poll For Notifications
 *
 * This endpoint will return notifications newer than `exclude_before`.  This endpoint returns notifications
 * from older to newer, which is the opposite of the paging API.  The returned `cursor` value can be used as
 * `exclude_before` in subsequent polls to ensure you only receive new notifications.
 * 
 * This operation is a long-poll.  That means we will keep the connection open until we get any notification
 * or until the passed in deadline (to the best of our ability).  Once one of these happens, we will return
 * the notifications found.
 * 
 * This version can be used for any client provided its id (with proper permissions)
 * 
 * Required Permissions:
 * 
 * - For any instance (including themselves) any of: `notification:instance:read`, `notification:instance:*`
 * 
 * - For the instance themselves any of: `notification:instance:self:read`, `notification:instance:self:*`
*/
struct RALLYHEREAPI_API FRequest_InstanceLongPollForNotifications : public FRequest
{
	FRequest_InstanceLongPollForNotifications();
	virtual ~FRequest_InstanceLongPollForNotifications() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
	FString InstanceId;
	/* Max number of entries to return at one time */
	TOptional<int32> MaxPageSize;
	/* All notifications including and before this (chronologically) provided id will be ignored when returning results.  You cannot depend on the format of this string, and it must be considered opaque */
	TOptional<FString> ExcludeBefore;
	/* When `exclude_before` is not found in the stream or not given, begin streaming messages from the earliest/latest message */
	TOptional<ERHAPI_OffsetReset> OffsetResetStrategy;
	/* We will try to the best of our ability to return by this deadline, even when we have no notifications.  Value should be in seconds */
	TOptional<int32> Deadline;
};

struct RALLYHEREAPI_API FResponse_InstanceLongPollForNotifications : public FResponse
{
	FResponse_InstanceLongPollForNotifications(FRequestMetadata InRequestMetadata);
	virtual ~FResponse_InstanceLongPollForNotifications() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

	FRHAPI_Notifications Content;


	// Manual Response Helpers
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_Notifications& OutContent) const;

	/* Response 400
	 Error Codes: - bad_id - Passed client id is not a valid id 
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	 Error Codes: - auth_malformed_access - Invalid Authorization - malformed access token - auth_invalid_key_id - Invalid Authorization - Invalid Key ID in Access Token - auth_not_jwt - Invalid Authorization - insufficient_permissions - Insufficient Permissions - auth_token_expired - Token is expired - auth_token_invalid_claim - Token contained invalid claim value: {} - auth_token_sig_invalid - Token Signature is invalid - auth_invalid_version - Invalid Authorization - version - auth_token_unknown - Failed to parse token - auth_token_format - Invalid Authorization - {} 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 409
	 Error Codes: - too_many_listening_to_single_client - An enumeration. 
	*/
	bool TryGetContentFor409(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

	/* Response 503
	 Error Codes: - connection_limit_reached - An enumeration. 
	*/
	bool TryGetContentFor503(FRHAPI_HzApiErrorModel& OutContent) const;

};

struct RALLYHEREAPI_API Traits_InstanceLongPollForNotifications
{
	typedef FRequest_InstanceLongPollForNotifications Request;
	typedef FResponse_InstanceLongPollForNotifications Response;
	typedef FDelegate_InstanceLongPollForNotifications Delegate;
	typedef FInstanceNotificationAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.InstanceLongPollForNotifications(InRequest, InDelegate, Priority); }
};


}
