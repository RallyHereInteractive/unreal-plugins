// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "LeaderboardEntry.generated.h"

/** @defgroup RHAPI_LeaderboardEntry RallyHere API Model LeaderboardEntry
 *  @{
 */

/**
 * @brief 
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_LeaderboardEntry : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	/** @brief Unique ID for the player in this leaderboard entry */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FGuid PlayerUuid{  };
	/** @brief Gets the value of PlayerUuid */
	FGuid& GetPlayerUuid() { return PlayerUuid; }
	/** @brief Gets the value of PlayerUuid */
	const FGuid& GetPlayerUuid() const { return PlayerUuid; }
	/** @brief Sets the value of PlayerUuid */
	void SetPlayerUuid(const FGuid& NewValue) { PlayerUuid = NewValue;   }
	/** @brief Sets the value of PlayerUuid using move semantics */
	void SetPlayerUuid(FGuid&& NewValue) { PlayerUuid = NewValue;   }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	float StatValue_Optional{  };
	/** @brief true if StatValue_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool StatValue_IsSet{ false };
	/** @brief true if StatValue_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool StatValue_IsNull{ false };
	/** @brief Gets the value of StatValue_Optional, regardless of it having been set */
	float& GetStatValue() { return StatValue_Optional; }
	/** @brief Gets the value of StatValue_Optional, regardless of it having been set */
	const float& GetStatValue() const { return StatValue_Optional; }
	/** @brief Gets the value of StatValue_Optional, if it has been set, otherwise it returns DefaultValue */
	const float& GetStatValue(const float& DefaultValue) const { if (StatValue_IsSet) return StatValue_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of StatValue_Optional and returns true if it has been set, otherwise returns false */
	bool GetStatValue(float& OutValue) const { if (StatValue_IsSet && !StatValue_IsNull) OutValue = StatValue_Optional; return StatValue_IsSet; }
	/** @brief Returns a pointer to StatValue_Optional, if it has been set, otherwise returns nullptr */
	float* GetStatValueOrNull() { if (StatValue_IsSet) return (StatValue_IsNull ? nullptr : &StatValue_Optional); return nullptr; }
	/** @brief Returns a pointer to StatValue_Optional, if it has been set, otherwise returns nullptr */
	const float* GetStatValueOrNull() const { if (StatValue_IsSet) return (StatValue_IsNull ? nullptr : &StatValue_Optional); return nullptr; }
	/** @brief Sets the value of StatValue_Optional and also sets StatValue_IsSet to true */
	void SetStatValue(const float& NewValue) { StatValue_Optional = NewValue; StatValue_IsSet = true; StatValue_IsNull = false; }
	/** @brief Sets the value of StatValue_Optional and also sets StatValue_IsSet to true using move semantics */
	void SetStatValue(float&& NewValue) { StatValue_Optional = NewValue; StatValue_IsSet = true; StatValue_IsNull = false; }
	/** @brief Clears the value of StatValue_Optional and sets StatValue_IsSet to false */
	void ClearStatValue() { StatValue_IsSet = false; StatValue_IsNull = false; }
	/** @brief Checks whether StatValue_Optional has been set */
	bool IsStatValueSet() const { return StatValue_IsSet; }
	/** @brief Sets the value explicitly to be treated as null */
	void SetStatValueToNull() { StatValue_IsSet = true; StatValue_IsNull = true; }
	/** @brief Checks whether StatValue_Optional is set to null */
	bool IsStatValueNull() const { return StatValue_IsSet && StatValue_IsNull; }

	/** @brief What position this entry is on the leaderboard */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 Position{ 0 };
	/** @brief Gets the value of Position */
	int32& GetPosition() { return Position; }
	/** @brief Gets the value of Position */
	const int32& GetPosition() const { return Position; }
	/** @brief Sets the value of Position */
	void SetPosition(const int32& NewValue) { Position = NewValue;   }
	/** @brief Sets the value of Position using move semantics */
	void SetPosition(int32&& NewValue) { Position = NewValue;   }
	/** @brief Returns true if Position matches the default value */
	bool IsPositionDefaultValue() const { return Position == 0; }
	/** @brief Sets the value of Position to its default  */
	void SetPositionToDefault() { SetPosition(0); }
};

/** @} */
