// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "StageEntityType.h"
#include "EntityRunCompleteRequest.generated.h"

/** @defgroup RHAPI_EntityRunCompleteRequest RallyHere API Model EntityRunCompleteRequest
 *  @{
 */

/**
 * @brief Request to update entity mm bucket run stats with the info from a specific run.  NOTE:     - if &#x60;mmr_internal_exact&#x60; and &#x60;mmr_internal_delta&#x60; are not provided, the service will modify MMR using an internal algorithm.     - if &#x60;mmr_vis_exact&#x60; and &#x60;mmr_vis_delta&#x60; are not provided, the service will modify MMR using an internal algorithm.     - To not modify MMR at all, provide &#x60;mmr_XXX_delta&#x60; equal to &#x60;0&#x60;.  Placement matches will not allow the MMR value to be lowered, only increased.  For exact updates, it will take the higher of the current/update values.  If delta changes, only positive changes will be applied.
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_EntityRunCompleteRequest : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString Type1_Optional{  };
	/** @brief true if Type1_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Type1_IsSet{ false };
	/** @brief true if Type1_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Type1_IsNull{ false };
	/** @brief Gets the value of Type1_Optional, regardless of it having been set */
	FORCEINLINE FString& GetType1() { return Type1_Optional; }
	/** @brief Gets the value of Type1_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetType1() const { return Type1_Optional; }
	/** @brief Gets the value of Type1_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetType1(const FString& DefaultValue) const { if (Type1_IsSet) return Type1_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Type1_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetType1(FString& OutValue) const { if (Type1_IsSet && !Type1_IsNull) OutValue = Type1_Optional; return Type1_IsSet; }
	/** @brief Returns a pointer to Type1_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetType1OrNull() { if (Type1_IsSet) return (Type1_IsNull ? nullptr : &Type1_Optional); return nullptr; }
	/** @brief Returns a pointer to Type1_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetType1OrNull() const { if (Type1_IsSet) return (Type1_IsNull ? nullptr : &Type1_Optional); return nullptr; }
	/** @brief Sets the value of Type1_Optional and also sets Type1_IsSet to true */
	FORCEINLINE void SetType1(const FString& NewValue) { Type1_Optional = NewValue; Type1_IsSet = true; Type1_IsNull = false; }
	/** @brief Sets the value of Type1_Optional and also sets Type1_IsSet to true using move semantics */
	FORCEINLINE void SetType1(FString&& NewValue) { Type1_Optional = NewValue; Type1_IsSet = true; Type1_IsNull = false; }
	/** @brief Clears the value of Type1_Optional and sets Type1_IsSet to false */
	void ClearType1() { Type1_IsSet = false; Type1_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetType1ToNull() { Type1_IsSet = true; Type1_IsNull = true; }
	/** @brief Checks whether Type1_Optional is set to null */
	FORCEINLINE bool IsType1Null() const { return Type1_IsSet && Type1_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString Type2_Optional{  };
	/** @brief true if Type2_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Type2_IsSet{ false };
	/** @brief true if Type2_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Type2_IsNull{ false };
	/** @brief Gets the value of Type2_Optional, regardless of it having been set */
	FORCEINLINE FString& GetType2() { return Type2_Optional; }
	/** @brief Gets the value of Type2_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetType2() const { return Type2_Optional; }
	/** @brief Gets the value of Type2_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetType2(const FString& DefaultValue) const { if (Type2_IsSet) return Type2_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Type2_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetType2(FString& OutValue) const { if (Type2_IsSet && !Type2_IsNull) OutValue = Type2_Optional; return Type2_IsSet; }
	/** @brief Returns a pointer to Type2_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetType2OrNull() { if (Type2_IsSet) return (Type2_IsNull ? nullptr : &Type2_Optional); return nullptr; }
	/** @brief Returns a pointer to Type2_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetType2OrNull() const { if (Type2_IsSet) return (Type2_IsNull ? nullptr : &Type2_Optional); return nullptr; }
	/** @brief Sets the value of Type2_Optional and also sets Type2_IsSet to true */
	FORCEINLINE void SetType2(const FString& NewValue) { Type2_Optional = NewValue; Type2_IsSet = true; Type2_IsNull = false; }
	/** @brief Sets the value of Type2_Optional and also sets Type2_IsSet to true using move semantics */
	FORCEINLINE void SetType2(FString&& NewValue) { Type2_Optional = NewValue; Type2_IsSet = true; Type2_IsNull = false; }
	/** @brief Clears the value of Type2_Optional and sets Type2_IsSet to false */
	void ClearType2() { Type2_IsSet = false; Type2_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetType2ToNull() { Type2_IsSet = true; Type2_IsNull = true; }
	/** @brief Checks whether Type2_Optional is set to null */
	FORCEINLINE bool IsType2Null() const { return Type2_IsSet && Type2_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString Type3_Optional{  };
	/** @brief true if Type3_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Type3_IsSet{ false };
	/** @brief true if Type3_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Type3_IsNull{ false };
	/** @brief Gets the value of Type3_Optional, regardless of it having been set */
	FORCEINLINE FString& GetType3() { return Type3_Optional; }
	/** @brief Gets the value of Type3_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetType3() const { return Type3_Optional; }
	/** @brief Gets the value of Type3_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetType3(const FString& DefaultValue) const { if (Type3_IsSet) return Type3_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Type3_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetType3(FString& OutValue) const { if (Type3_IsSet && !Type3_IsNull) OutValue = Type3_Optional; return Type3_IsSet; }
	/** @brief Returns a pointer to Type3_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetType3OrNull() { if (Type3_IsSet) return (Type3_IsNull ? nullptr : &Type3_Optional); return nullptr; }
	/** @brief Returns a pointer to Type3_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetType3OrNull() const { if (Type3_IsSet) return (Type3_IsNull ? nullptr : &Type3_Optional); return nullptr; }
	/** @brief Sets the value of Type3_Optional and also sets Type3_IsSet to true */
	FORCEINLINE void SetType3(const FString& NewValue) { Type3_Optional = NewValue; Type3_IsSet = true; Type3_IsNull = false; }
	/** @brief Sets the value of Type3_Optional and also sets Type3_IsSet to true using move semantics */
	FORCEINLINE void SetType3(FString&& NewValue) { Type3_Optional = NewValue; Type3_IsSet = true; Type3_IsNull = false; }
	/** @brief Clears the value of Type3_Optional and sets Type3_IsSet to false */
	void ClearType3() { Type3_IsSet = false; Type3_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetType3ToNull() { Type3_IsSet = true; Type3_IsNull = true; }
	/** @brief Checks whether Type3_Optional is set to null */
	FORCEINLINE bool IsType3Null() const { return Type3_IsSet && Type3_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString Type4_Optional{  };
	/** @brief true if Type4_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Type4_IsSet{ false };
	/** @brief true if Type4_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Type4_IsNull{ false };
	/** @brief Gets the value of Type4_Optional, regardless of it having been set */
	FORCEINLINE FString& GetType4() { return Type4_Optional; }
	/** @brief Gets the value of Type4_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetType4() const { return Type4_Optional; }
	/** @brief Gets the value of Type4_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetType4(const FString& DefaultValue) const { if (Type4_IsSet) return Type4_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Type4_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetType4(FString& OutValue) const { if (Type4_IsSet && !Type4_IsNull) OutValue = Type4_Optional; return Type4_IsSet; }
	/** @brief Returns a pointer to Type4_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetType4OrNull() { if (Type4_IsSet) return (Type4_IsNull ? nullptr : &Type4_Optional); return nullptr; }
	/** @brief Returns a pointer to Type4_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetType4OrNull() const { if (Type4_IsSet) return (Type4_IsNull ? nullptr : &Type4_Optional); return nullptr; }
	/** @brief Sets the value of Type4_Optional and also sets Type4_IsSet to true */
	FORCEINLINE void SetType4(const FString& NewValue) { Type4_Optional = NewValue; Type4_IsSet = true; Type4_IsNull = false; }
	/** @brief Sets the value of Type4_Optional and also sets Type4_IsSet to true using move semantics */
	FORCEINLINE void SetType4(FString&& NewValue) { Type4_Optional = NewValue; Type4_IsSet = true; Type4_IsNull = false; }
	/** @brief Clears the value of Type4_Optional and sets Type4_IsSet to false */
	void ClearType4() { Type4_IsSet = false; Type4_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetType4ToNull() { Type4_IsSet = true; Type4_IsNull = true; }
	/** @brief Checks whether Type4_Optional is set to null */
	FORCEINLINE bool IsType4Null() const { return Type4_IsSet && Type4_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	ERHAPI_StageEntityType EntityType{  };
	/** @brief true if EntityType has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool EntityType_IsNull{ false };
	/** @brief Gets the value of EntityType */
	FORCEINLINE ERHAPI_StageEntityType& GetEntityType() { return EntityType; }
	/** @brief Gets the value of EntityType */
	FORCEINLINE const ERHAPI_StageEntityType& GetEntityType() const { return EntityType; }
	/** @brief Sets the value of EntityType */
	FORCEINLINE void SetEntityType(const ERHAPI_StageEntityType& NewValue) { EntityType = NewValue;  EntityType_IsNull = false; }
	/** @brief Sets the value of EntityType using move semantics */
	FORCEINLINE void SetEntityType(ERHAPI_StageEntityType&& NewValue) { EntityType = NewValue;  EntityType_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetEntityTypeToNull() { EntityType_IsNull = true; }
	/** @brief Checks whether EntityType is set to null */
	FORCEINLINE bool IsEntityTypeNull() const { return  EntityType_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString EntityId{  };
	/** @brief true if EntityId has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool EntityId_IsNull{ false };
	/** @brief Gets the value of EntityId */
	FORCEINLINE FString& GetEntityId() { return EntityId; }
	/** @brief Gets the value of EntityId */
	FORCEINLINE const FString& GetEntityId() const { return EntityId; }
	/** @brief Sets the value of EntityId */
	FORCEINLINE void SetEntityId(const FString& NewValue) { EntityId = NewValue;  EntityId_IsNull = false; }
	/** @brief Sets the value of EntityId using move semantics */
	FORCEINLINE void SetEntityId(FString&& NewValue) { EntityId = NewValue;  EntityId_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetEntityIdToNull() { EntityId_IsNull = true; }
	/** @brief Checks whether EntityId is set to null */
	FORCEINLINE bool IsEntityIdNull() const { return  EntityId_IsNull; }

	/** @brief  */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 StageWins_Optional{ 0 };
	/** @brief true if StageWins_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool StageWins_IsSet{ false };
	/** @brief Gets the value of StageWins_Optional, regardless of it having been set */
	FORCEINLINE int32& GetStageWins() { return StageWins_Optional; }
	/** @brief Gets the value of StageWins_Optional, regardless of it having been set */
	FORCEINLINE const int32& GetStageWins() const { return StageWins_Optional; }
	/** @brief Gets the value of StageWins_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const int32& GetStageWins(const int32& DefaultValue) const { if (StageWins_IsSet) return StageWins_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of StageWins_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetStageWins(int32& OutValue) const { if (StageWins_IsSet) OutValue = StageWins_Optional; return StageWins_IsSet; }
	/** @brief Returns a pointer to StageWins_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE int32* GetStageWinsOrNull() { if (StageWins_IsSet) return (&StageWins_Optional); return nullptr; }
	/** @brief Returns a pointer to StageWins_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const int32* GetStageWinsOrNull() const { if (StageWins_IsSet) return (&StageWins_Optional); return nullptr; }
	/** @brief Sets the value of StageWins_Optional and also sets StageWins_IsSet to true */
	FORCEINLINE void SetStageWins(const int32& NewValue) { StageWins_Optional = NewValue; StageWins_IsSet = true;  }
	/** @brief Sets the value of StageWins_Optional and also sets StageWins_IsSet to true using move semantics */
	FORCEINLINE void SetStageWins(int32&& NewValue) { StageWins_Optional = NewValue; StageWins_IsSet = true;  }
	/** @brief Clears the value of StageWins_Optional and sets StageWins_IsSet to false */
	void ClearStageWins() { StageWins_Optional = 0; StageWins_IsSet = false;  }
	/** @brief Returns the default value of StageWins */
	FORCEINLINE int32 GetDefaultValue_StageWins() { return 0; }

	/** @brief  */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 StageLosses_Optional{ 0 };
	/** @brief true if StageLosses_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool StageLosses_IsSet{ false };
	/** @brief Gets the value of StageLosses_Optional, regardless of it having been set */
	FORCEINLINE int32& GetStageLosses() { return StageLosses_Optional; }
	/** @brief Gets the value of StageLosses_Optional, regardless of it having been set */
	FORCEINLINE const int32& GetStageLosses() const { return StageLosses_Optional; }
	/** @brief Gets the value of StageLosses_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const int32& GetStageLosses(const int32& DefaultValue) const { if (StageLosses_IsSet) return StageLosses_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of StageLosses_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetStageLosses(int32& OutValue) const { if (StageLosses_IsSet) OutValue = StageLosses_Optional; return StageLosses_IsSet; }
	/** @brief Returns a pointer to StageLosses_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE int32* GetStageLossesOrNull() { if (StageLosses_IsSet) return (&StageLosses_Optional); return nullptr; }
	/** @brief Returns a pointer to StageLosses_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const int32* GetStageLossesOrNull() const { if (StageLosses_IsSet) return (&StageLosses_Optional); return nullptr; }
	/** @brief Sets the value of StageLosses_Optional and also sets StageLosses_IsSet to true */
	FORCEINLINE void SetStageLosses(const int32& NewValue) { StageLosses_Optional = NewValue; StageLosses_IsSet = true;  }
	/** @brief Sets the value of StageLosses_Optional and also sets StageLosses_IsSet to true using move semantics */
	FORCEINLINE void SetStageLosses(int32&& NewValue) { StageLosses_Optional = NewValue; StageLosses_IsSet = true;  }
	/** @brief Clears the value of StageLosses_Optional and sets StageLosses_IsSet to false */
	void ClearStageLosses() { StageLosses_Optional = 0; StageLosses_IsSet = false;  }
	/** @brief Returns the default value of StageLosses */
	FORCEINLINE int32 GetDefaultValue_StageLosses() { return 0; }

	/** @brief  */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 StageIncompletes_Optional{ 0 };
	/** @brief true if StageIncompletes_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool StageIncompletes_IsSet{ false };
	/** @brief Gets the value of StageIncompletes_Optional, regardless of it having been set */
	FORCEINLINE int32& GetStageIncompletes() { return StageIncompletes_Optional; }
	/** @brief Gets the value of StageIncompletes_Optional, regardless of it having been set */
	FORCEINLINE const int32& GetStageIncompletes() const { return StageIncompletes_Optional; }
	/** @brief Gets the value of StageIncompletes_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const int32& GetStageIncompletes(const int32& DefaultValue) const { if (StageIncompletes_IsSet) return StageIncompletes_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of StageIncompletes_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetStageIncompletes(int32& OutValue) const { if (StageIncompletes_IsSet) OutValue = StageIncompletes_Optional; return StageIncompletes_IsSet; }
	/** @brief Returns a pointer to StageIncompletes_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE int32* GetStageIncompletesOrNull() { if (StageIncompletes_IsSet) return (&StageIncompletes_Optional); return nullptr; }
	/** @brief Returns a pointer to StageIncompletes_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const int32* GetStageIncompletesOrNull() const { if (StageIncompletes_IsSet) return (&StageIncompletes_Optional); return nullptr; }
	/** @brief Sets the value of StageIncompletes_Optional and also sets StageIncompletes_IsSet to true */
	FORCEINLINE void SetStageIncompletes(const int32& NewValue) { StageIncompletes_Optional = NewValue; StageIncompletes_IsSet = true;  }
	/** @brief Sets the value of StageIncompletes_Optional and also sets StageIncompletes_IsSet to true using move semantics */
	FORCEINLINE void SetStageIncompletes(int32&& NewValue) { StageIncompletes_Optional = NewValue; StageIncompletes_IsSet = true;  }
	/** @brief Clears the value of StageIncompletes_Optional and sets StageIncompletes_IsSet to false */
	void ClearStageIncompletes() { StageIncompletes_Optional = 0; StageIncompletes_IsSet = false;  }
	/** @brief Returns the default value of StageIncompletes */
	FORCEINLINE int32 GetDefaultValue_StageIncompletes() { return 0; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool RunWin_Optional{ false };
	/** @brief true if RunWin_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool RunWin_IsSet{ false };
	/** @brief true if RunWin_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool RunWin_IsNull{ false };
	/** @brief Gets the value of RunWin_Optional, regardless of it having been set */
	FORCEINLINE bool& GetRunWin() { return RunWin_Optional; }
	/** @brief Gets the value of RunWin_Optional, regardless of it having been set */
	FORCEINLINE const bool& GetRunWin() const { return RunWin_Optional; }
	/** @brief Gets the value of RunWin_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const bool& GetRunWin(const bool& DefaultValue) const { if (RunWin_IsSet) return RunWin_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of RunWin_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetRunWin(bool& OutValue) const { if (RunWin_IsSet && !RunWin_IsNull) OutValue = RunWin_Optional; return RunWin_IsSet; }
	/** @brief Returns a pointer to RunWin_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE bool* GetRunWinOrNull() { if (RunWin_IsSet) return (RunWin_IsNull ? nullptr : &RunWin_Optional); return nullptr; }
	/** @brief Returns a pointer to RunWin_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const bool* GetRunWinOrNull() const { if (RunWin_IsSet) return (RunWin_IsNull ? nullptr : &RunWin_Optional); return nullptr; }
	/** @brief Sets the value of RunWin_Optional and also sets RunWin_IsSet to true */
	FORCEINLINE void SetRunWin(const bool& NewValue) { RunWin_Optional = NewValue; RunWin_IsSet = true; RunWin_IsNull = false; }
	/** @brief Sets the value of RunWin_Optional and also sets RunWin_IsSet to true using move semantics */
	FORCEINLINE void SetRunWin(bool&& NewValue) { RunWin_Optional = NewValue; RunWin_IsSet = true; RunWin_IsNull = false; }
	/** @brief Clears the value of RunWin_Optional and sets RunWin_IsSet to false */
	void ClearRunWin() { RunWin_Optional = false; RunWin_IsSet = false; RunWin_IsNull = false; }
	/** @brief Returns the default value of RunWin */
	FORCEINLINE bool GetDefaultValue_RunWin() { return false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetRunWinToNull() { RunWin_IsSet = true; RunWin_IsNull = true; }
	/** @brief Checks whether RunWin_Optional is set to null */
	FORCEINLINE bool IsRunWinNull() const { return RunWin_IsSet && RunWin_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool RunPlacement_Optional{ false };
	/** @brief true if RunPlacement_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool RunPlacement_IsSet{ false };
	/** @brief true if RunPlacement_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool RunPlacement_IsNull{ false };
	/** @brief Gets the value of RunPlacement_Optional, regardless of it having been set */
	FORCEINLINE bool& GetRunPlacement() { return RunPlacement_Optional; }
	/** @brief Gets the value of RunPlacement_Optional, regardless of it having been set */
	FORCEINLINE const bool& GetRunPlacement() const { return RunPlacement_Optional; }
	/** @brief Gets the value of RunPlacement_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const bool& GetRunPlacement(const bool& DefaultValue) const { if (RunPlacement_IsSet) return RunPlacement_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of RunPlacement_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetRunPlacement(bool& OutValue) const { if (RunPlacement_IsSet && !RunPlacement_IsNull) OutValue = RunPlacement_Optional; return RunPlacement_IsSet; }
	/** @brief Returns a pointer to RunPlacement_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE bool* GetRunPlacementOrNull() { if (RunPlacement_IsSet) return (RunPlacement_IsNull ? nullptr : &RunPlacement_Optional); return nullptr; }
	/** @brief Returns a pointer to RunPlacement_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const bool* GetRunPlacementOrNull() const { if (RunPlacement_IsSet) return (RunPlacement_IsNull ? nullptr : &RunPlacement_Optional); return nullptr; }
	/** @brief Sets the value of RunPlacement_Optional and also sets RunPlacement_IsSet to true */
	FORCEINLINE void SetRunPlacement(const bool& NewValue) { RunPlacement_Optional = NewValue; RunPlacement_IsSet = true; RunPlacement_IsNull = false; }
	/** @brief Sets the value of RunPlacement_Optional and also sets RunPlacement_IsSet to true using move semantics */
	FORCEINLINE void SetRunPlacement(bool&& NewValue) { RunPlacement_Optional = NewValue; RunPlacement_IsSet = true; RunPlacement_IsNull = false; }
	/** @brief Clears the value of RunPlacement_Optional and sets RunPlacement_IsSet to false */
	void ClearRunPlacement() { RunPlacement_Optional = false; RunPlacement_IsSet = false; RunPlacement_IsNull = false; }
	/** @brief Returns the default value of RunPlacement */
	FORCEINLINE bool GetDefaultValue_RunPlacement() { return false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetRunPlacementToNull() { RunPlacement_IsSet = true; RunPlacement_IsNull = true; }
	/** @brief Checks whether RunPlacement_Optional is set to null */
	FORCEINLINE bool IsRunPlacementNull() const { return RunPlacement_IsSet && RunPlacement_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	float MmrInternalExact_Optional{  };
	/** @brief true if MmrInternalExact_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool MmrInternalExact_IsSet{ false };
	/** @brief true if MmrInternalExact_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool MmrInternalExact_IsNull{ false };
	/** @brief Gets the value of MmrInternalExact_Optional, regardless of it having been set */
	FORCEINLINE float& GetMmrInternalExact() { return MmrInternalExact_Optional; }
	/** @brief Gets the value of MmrInternalExact_Optional, regardless of it having been set */
	FORCEINLINE const float& GetMmrInternalExact() const { return MmrInternalExact_Optional; }
	/** @brief Gets the value of MmrInternalExact_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const float& GetMmrInternalExact(const float& DefaultValue) const { if (MmrInternalExact_IsSet) return MmrInternalExact_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of MmrInternalExact_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetMmrInternalExact(float& OutValue) const { if (MmrInternalExact_IsSet && !MmrInternalExact_IsNull) OutValue = MmrInternalExact_Optional; return MmrInternalExact_IsSet; }
	/** @brief Returns a pointer to MmrInternalExact_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE float* GetMmrInternalExactOrNull() { if (MmrInternalExact_IsSet) return (MmrInternalExact_IsNull ? nullptr : &MmrInternalExact_Optional); return nullptr; }
	/** @brief Returns a pointer to MmrInternalExact_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const float* GetMmrInternalExactOrNull() const { if (MmrInternalExact_IsSet) return (MmrInternalExact_IsNull ? nullptr : &MmrInternalExact_Optional); return nullptr; }
	/** @brief Sets the value of MmrInternalExact_Optional and also sets MmrInternalExact_IsSet to true */
	FORCEINLINE void SetMmrInternalExact(const float& NewValue) { MmrInternalExact_Optional = NewValue; MmrInternalExact_IsSet = true; MmrInternalExact_IsNull = false; }
	/** @brief Sets the value of MmrInternalExact_Optional and also sets MmrInternalExact_IsSet to true using move semantics */
	FORCEINLINE void SetMmrInternalExact(float&& NewValue) { MmrInternalExact_Optional = NewValue; MmrInternalExact_IsSet = true; MmrInternalExact_IsNull = false; }
	/** @brief Clears the value of MmrInternalExact_Optional and sets MmrInternalExact_IsSet to false */
	void ClearMmrInternalExact() { MmrInternalExact_IsSet = false; MmrInternalExact_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetMmrInternalExactToNull() { MmrInternalExact_IsSet = true; MmrInternalExact_IsNull = true; }
	/** @brief Checks whether MmrInternalExact_Optional is set to null */
	FORCEINLINE bool IsMmrInternalExactNull() const { return MmrInternalExact_IsSet && MmrInternalExact_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	float MmrInternalDelta_Optional{  };
	/** @brief true if MmrInternalDelta_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool MmrInternalDelta_IsSet{ false };
	/** @brief true if MmrInternalDelta_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool MmrInternalDelta_IsNull{ false };
	/** @brief Gets the value of MmrInternalDelta_Optional, regardless of it having been set */
	FORCEINLINE float& GetMmrInternalDelta() { return MmrInternalDelta_Optional; }
	/** @brief Gets the value of MmrInternalDelta_Optional, regardless of it having been set */
	FORCEINLINE const float& GetMmrInternalDelta() const { return MmrInternalDelta_Optional; }
	/** @brief Gets the value of MmrInternalDelta_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const float& GetMmrInternalDelta(const float& DefaultValue) const { if (MmrInternalDelta_IsSet) return MmrInternalDelta_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of MmrInternalDelta_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetMmrInternalDelta(float& OutValue) const { if (MmrInternalDelta_IsSet && !MmrInternalDelta_IsNull) OutValue = MmrInternalDelta_Optional; return MmrInternalDelta_IsSet; }
	/** @brief Returns a pointer to MmrInternalDelta_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE float* GetMmrInternalDeltaOrNull() { if (MmrInternalDelta_IsSet) return (MmrInternalDelta_IsNull ? nullptr : &MmrInternalDelta_Optional); return nullptr; }
	/** @brief Returns a pointer to MmrInternalDelta_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const float* GetMmrInternalDeltaOrNull() const { if (MmrInternalDelta_IsSet) return (MmrInternalDelta_IsNull ? nullptr : &MmrInternalDelta_Optional); return nullptr; }
	/** @brief Sets the value of MmrInternalDelta_Optional and also sets MmrInternalDelta_IsSet to true */
	FORCEINLINE void SetMmrInternalDelta(const float& NewValue) { MmrInternalDelta_Optional = NewValue; MmrInternalDelta_IsSet = true; MmrInternalDelta_IsNull = false; }
	/** @brief Sets the value of MmrInternalDelta_Optional and also sets MmrInternalDelta_IsSet to true using move semantics */
	FORCEINLINE void SetMmrInternalDelta(float&& NewValue) { MmrInternalDelta_Optional = NewValue; MmrInternalDelta_IsSet = true; MmrInternalDelta_IsNull = false; }
	/** @brief Clears the value of MmrInternalDelta_Optional and sets MmrInternalDelta_IsSet to false */
	void ClearMmrInternalDelta() { MmrInternalDelta_IsSet = false; MmrInternalDelta_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetMmrInternalDeltaToNull() { MmrInternalDelta_IsSet = true; MmrInternalDelta_IsNull = true; }
	/** @brief Checks whether MmrInternalDelta_Optional is set to null */
	FORCEINLINE bool IsMmrInternalDeltaNull() const { return MmrInternalDelta_IsSet && MmrInternalDelta_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	float MmrVisExact_Optional{  };
	/** @brief true if MmrVisExact_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool MmrVisExact_IsSet{ false };
	/** @brief true if MmrVisExact_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool MmrVisExact_IsNull{ false };
	/** @brief Gets the value of MmrVisExact_Optional, regardless of it having been set */
	FORCEINLINE float& GetMmrVisExact() { return MmrVisExact_Optional; }
	/** @brief Gets the value of MmrVisExact_Optional, regardless of it having been set */
	FORCEINLINE const float& GetMmrVisExact() const { return MmrVisExact_Optional; }
	/** @brief Gets the value of MmrVisExact_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const float& GetMmrVisExact(const float& DefaultValue) const { if (MmrVisExact_IsSet) return MmrVisExact_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of MmrVisExact_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetMmrVisExact(float& OutValue) const { if (MmrVisExact_IsSet && !MmrVisExact_IsNull) OutValue = MmrVisExact_Optional; return MmrVisExact_IsSet; }
	/** @brief Returns a pointer to MmrVisExact_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE float* GetMmrVisExactOrNull() { if (MmrVisExact_IsSet) return (MmrVisExact_IsNull ? nullptr : &MmrVisExact_Optional); return nullptr; }
	/** @brief Returns a pointer to MmrVisExact_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const float* GetMmrVisExactOrNull() const { if (MmrVisExact_IsSet) return (MmrVisExact_IsNull ? nullptr : &MmrVisExact_Optional); return nullptr; }
	/** @brief Sets the value of MmrVisExact_Optional and also sets MmrVisExact_IsSet to true */
	FORCEINLINE void SetMmrVisExact(const float& NewValue) { MmrVisExact_Optional = NewValue; MmrVisExact_IsSet = true; MmrVisExact_IsNull = false; }
	/** @brief Sets the value of MmrVisExact_Optional and also sets MmrVisExact_IsSet to true using move semantics */
	FORCEINLINE void SetMmrVisExact(float&& NewValue) { MmrVisExact_Optional = NewValue; MmrVisExact_IsSet = true; MmrVisExact_IsNull = false; }
	/** @brief Clears the value of MmrVisExact_Optional and sets MmrVisExact_IsSet to false */
	void ClearMmrVisExact() { MmrVisExact_IsSet = false; MmrVisExact_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetMmrVisExactToNull() { MmrVisExact_IsSet = true; MmrVisExact_IsNull = true; }
	/** @brief Checks whether MmrVisExact_Optional is set to null */
	FORCEINLINE bool IsMmrVisExactNull() const { return MmrVisExact_IsSet && MmrVisExact_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	float MmrVisDelta_Optional{  };
	/** @brief true if MmrVisDelta_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool MmrVisDelta_IsSet{ false };
	/** @brief true if MmrVisDelta_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool MmrVisDelta_IsNull{ false };
	/** @brief Gets the value of MmrVisDelta_Optional, regardless of it having been set */
	FORCEINLINE float& GetMmrVisDelta() { return MmrVisDelta_Optional; }
	/** @brief Gets the value of MmrVisDelta_Optional, regardless of it having been set */
	FORCEINLINE const float& GetMmrVisDelta() const { return MmrVisDelta_Optional; }
	/** @brief Gets the value of MmrVisDelta_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const float& GetMmrVisDelta(const float& DefaultValue) const { if (MmrVisDelta_IsSet) return MmrVisDelta_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of MmrVisDelta_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetMmrVisDelta(float& OutValue) const { if (MmrVisDelta_IsSet && !MmrVisDelta_IsNull) OutValue = MmrVisDelta_Optional; return MmrVisDelta_IsSet; }
	/** @brief Returns a pointer to MmrVisDelta_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE float* GetMmrVisDeltaOrNull() { if (MmrVisDelta_IsSet) return (MmrVisDelta_IsNull ? nullptr : &MmrVisDelta_Optional); return nullptr; }
	/** @brief Returns a pointer to MmrVisDelta_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const float* GetMmrVisDeltaOrNull() const { if (MmrVisDelta_IsSet) return (MmrVisDelta_IsNull ? nullptr : &MmrVisDelta_Optional); return nullptr; }
	/** @brief Sets the value of MmrVisDelta_Optional and also sets MmrVisDelta_IsSet to true */
	FORCEINLINE void SetMmrVisDelta(const float& NewValue) { MmrVisDelta_Optional = NewValue; MmrVisDelta_IsSet = true; MmrVisDelta_IsNull = false; }
	/** @brief Sets the value of MmrVisDelta_Optional and also sets MmrVisDelta_IsSet to true using move semantics */
	FORCEINLINE void SetMmrVisDelta(float&& NewValue) { MmrVisDelta_Optional = NewValue; MmrVisDelta_IsSet = true; MmrVisDelta_IsNull = false; }
	/** @brief Clears the value of MmrVisDelta_Optional and sets MmrVisDelta_IsSet to false */
	void ClearMmrVisDelta() { MmrVisDelta_IsSet = false; MmrVisDelta_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetMmrVisDeltaToNull() { MmrVisDelta_IsSet = true; MmrVisDelta_IsNull = true; }
	/** @brief Checks whether MmrVisDelta_Optional is set to null */
	FORCEINLINE bool IsMmrVisDeltaNull() const { return MmrVisDelta_IsSet && MmrVisDelta_IsNull; }
};

/** @} */
