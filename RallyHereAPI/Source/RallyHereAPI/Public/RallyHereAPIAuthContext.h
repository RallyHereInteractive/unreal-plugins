// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereAPIBaseModel.h"
#include "LoginResult.h"
#include "TokenResponse.h"
#include "RallyHereAPIAuthContext.generated.h"

namespace RallyHereAPI
{

class FAuthAPI;
struct FRequest_Login;
struct FResponse_Login;
struct FRequest_Token;
struct FResponse_Token;

// delegate triggered when login is complete (success or failure)
DECLARE_MULTICAST_DELEGATE_OneParam(FAuthContextLoginComplete, bool /* bAuthSuccess */);
// delegate triggered when auth context becomes logged out (auth context is no longer logged in)
DECLARE_MULTICAST_DELEGATE_OneParam(FAuthContextLogout, bool /* bRefreshTokenExpired */);
// delegate triggered when auth context with a user has the user change
DECLARE_MULTICAST_DELEGATE(FAuthContextLoginUserChanged);

// delegate triggered when refresh token expires.  Passes a delegate to be triggered when new login process is complete
DECLARE_DELEGATE_OneParam(FAuthContextLoginRefreshTokenExpired, FSimpleDelegate);

struct RALLYHEREAPI_API FAuthContext : TSharedFromThis<FAuthContext>
{
public:
    FAuthContext(FAuthAPI& LoginAPI_, FString ClientId, FString ClientSecret);

    FAuthContext(FAuthAPI& LoginAPI_);

    void ProcessLogin(const FResponse_Login &LoginResponse_);
    void ProcessLoginToken(const FResponse_Token &LoginResponse_);
    void ProcessLoginRefresh(const FResponse_Login &LoginResponse_);
    bool Refresh();
    FAuthContextLoginComplete& OnLoginComplete() { return LoginComplete; }
    FAuthContextLoginUserChanged& OnLoginUserChanged() { return LoginUserChanged; }
    FAuthContextLogout& OnLogout() { return Logout; }
    const TOptional<FRHAPI_LoginResult>& GetLoginResult() const;
    const TOptional<FRHAPI_TokenResponse>& GetTokenResponse() const;
    bool IsLoggedIn() const;
    FString GetAccessToken() const;
    FString GetRefreshToken() const;

    void OnRefreshTokenExpired();
    void ClearAuthContext(bool bRefreshTokenExpired = false);

    void SetClientId(const FString& InClientId);
    void SetClientSecret(const FString& InClientSecret);

    bool AddClientCredentials(const FHttpRequestRef& HttpRequest) const;
    bool AddClientCredentials(const FHttpRequestPtr& HttpRequest) const;

    bool AddBearerToken(const FHttpRequestRef& HttpRequest) const;
    bool AddBearerToken(const FHttpRequestPtr& HttpRequest) const;

    void SetRefreshTokenExpiredDelegate(FAuthContextLoginRefreshTokenExpired ExpiredDelegate) { RefreshTokenExpired = ExpiredDelegate; }

    static bool IsSameUser(const TOptional<FRHAPI_LoginResult>& A, const TOptional<FRHAPI_LoginResult>& B);

private:
    FAuthAPI* LoginAPI;
    TOptional<FString> ClientId;
    TOptional<FString> ClientSecret;
    TOptional<FString> BasicAuthValue;
    bool bIsRefreshing;
    FAuthContextLoginComplete LoginComplete;
    FAuthContextLoginUserChanged LoginUserChanged;
    FAuthContextLogout Logout;
    FAuthContextLoginRefreshTokenExpired RefreshTokenExpired;
    TOptional<FRHAPI_LoginResult> LoginResult;
    TOptional<FRHAPI_TokenResponse> TokenResponse;

    inline void UpdateBasicAuthValue();
};
}

typedef TSharedPtr<RallyHereAPI::FAuthContext> FAuthContextPtr;

USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_AuthContext
{
	GENERATED_BODY()

	UPROPERTY()
	int32 Dummy;

	FAuthContextPtr AuthContext;

	FRHAPI_AuthContext()
		: Dummy(0)
		, AuthContext(nullptr)
	{}

	FRHAPI_AuthContext(const FAuthContextPtr& InAuthContext)
		: Dummy(0)
		, AuthContext(InAuthContext)
	{}
};