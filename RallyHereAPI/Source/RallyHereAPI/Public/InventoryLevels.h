// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "InventoryLevel.h"
#include "InventoryLevels.generated.h"

/** @defgroup RHAPI_InventoryLevels RallyHere API Model InventoryLevels
 *  @{
 */

/**
 * @brief Inventory Levels for a Player.
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_InventoryLevels : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	/** @brief Inventory Levels for a Player. */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TArray<FRHAPI_InventoryLevel> Levels_Optional{  };
	/** @brief true if Levels_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Levels_IsSet{ false };
	/** @brief Gets the value of Levels_Optional, regardless of it having been set */
	TArray<FRHAPI_InventoryLevel>& GetLevels() { return Levels_Optional; }
	/** @brief Gets the value of Levels_Optional, regardless of it having been set */
	const TArray<FRHAPI_InventoryLevel>& GetLevels() const { return Levels_Optional; }
	/** @brief Gets the value of Levels_Optional, if it has been set, otherwise it returns DefaultValue */
	const TArray<FRHAPI_InventoryLevel>& GetLevels(const TArray<FRHAPI_InventoryLevel>& DefaultValue) const { if (Levels_IsSet) return Levels_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Levels_Optional and returns true if it has been set, otherwise returns false */
	bool GetLevels(TArray<FRHAPI_InventoryLevel>& OutValue) const { if (Levels_IsSet) OutValue = Levels_Optional; return Levels_IsSet; }
	/** @brief Returns a pointer to Levels_Optional, if it has been set, otherwise returns nullptr */
	TArray<FRHAPI_InventoryLevel>* GetLevelsOrNull() { if (Levels_IsSet) return (&Levels_Optional); return nullptr; }
	/** @brief Returns a pointer to Levels_Optional, if it has been set, otherwise returns nullptr */
	const TArray<FRHAPI_InventoryLevel>* GetLevelsOrNull() const { if (Levels_IsSet) return (&Levels_Optional); return nullptr; }
	/** @brief Sets the value of Levels_Optional and also sets Levels_IsSet to true */
	void SetLevels(const TArray<FRHAPI_InventoryLevel>& NewValue) { Levels_Optional = NewValue; Levels_IsSet = true;  }
	/** @brief Sets the value of Levels_Optional and also sets Levels_IsSet to true using move semantics */
	void SetLevels(TArray<FRHAPI_InventoryLevel>&& NewValue) { Levels_Optional = NewValue; Levels_IsSet = true;  }
	/** @brief Clears the value of Levels_Optional and sets Levels_IsSet to false */
	void ClearLevels() { Levels_IsSet = false;  }
	/** @brief Checks whether Levels_Optional has been set */
	bool IsLevelsSet() const { return Levels_IsSet; }
};

/** @} */
