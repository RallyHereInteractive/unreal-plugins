// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "PlayerDeserterStatus.generated.h"

/** @defgroup RHAPI_PlayerDeserterStatus RallyHere API Model PlayerDeserterStatus
 *  @{
 */

/**
 * @brief 
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_PlayerDeserterStatus : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	/** @brief ID for which type of deserter this is */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString DeserterId{  };
	/** @brief Gets the value of DeserterId */
	FORCEINLINE FString& GetDeserterId() { return DeserterId; }
	/** @brief Gets the value of DeserterId */
	FORCEINLINE const FString& GetDeserterId() const { return DeserterId; }
	/** @brief Sets the value of DeserterId */
	FORCEINLINE void SetDeserterId(const FString& NewValue) { DeserterId = NewValue;   }
	/** @brief Sets the value of DeserterId using move semantics */
	FORCEINLINE void SetDeserterId(FString&& NewValue) { DeserterId = NewValue;   }

	/** @brief Flag of whether or not the player is a deserter */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool DeserterStatus{ false };
	/** @brief Gets the value of DeserterStatus */
	FORCEINLINE bool& GetDeserterStatus() { return DeserterStatus; }
	/** @brief Gets the value of DeserterStatus */
	FORCEINLINE const bool& GetDeserterStatus() const { return DeserterStatus; }
	/** @brief Sets the value of DeserterStatus */
	FORCEINLINE void SetDeserterStatus(const bool& NewValue) { DeserterStatus = NewValue;   }
	/** @brief Sets the value of DeserterStatus using move semantics */
	FORCEINLINE void SetDeserterStatus(bool&& NewValue) { DeserterStatus = NewValue;   }
	/** @brief Returns the default value of DeserterStatus */
	FORCEINLINE bool GetDefaultValue_DeserterStatus() { return false; }

	/** @brief Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FDateTime DeserterExpiration_Optional{  };
	/** @brief true if DeserterExpiration_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool DeserterExpiration_IsSet{ false };
	/** @brief Gets the value of DeserterExpiration_Optional, regardless of it having been set */
	FORCEINLINE FDateTime& GetDeserterExpiration() { return DeserterExpiration_Optional; }
	/** @brief Gets the value of DeserterExpiration_Optional, regardless of it having been set */
	FORCEINLINE const FDateTime& GetDeserterExpiration() const { return DeserterExpiration_Optional; }
	/** @brief Gets the value of DeserterExpiration_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FDateTime& GetDeserterExpiration(const FDateTime& DefaultValue) const { if (DeserterExpiration_IsSet) return DeserterExpiration_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of DeserterExpiration_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetDeserterExpiration(FDateTime& OutValue) const { if (DeserterExpiration_IsSet) OutValue = DeserterExpiration_Optional; return DeserterExpiration_IsSet; }
	/** @brief Returns a pointer to DeserterExpiration_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FDateTime* GetDeserterExpirationOrNull() { if (DeserterExpiration_IsSet) return (&DeserterExpiration_Optional); return nullptr; }
	/** @brief Returns a pointer to DeserterExpiration_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FDateTime* GetDeserterExpirationOrNull() const { if (DeserterExpiration_IsSet) return (&DeserterExpiration_Optional); return nullptr; }
	/** @brief Sets the value of DeserterExpiration_Optional and also sets DeserterExpiration_IsSet to true */
	FORCEINLINE void SetDeserterExpiration(const FDateTime& NewValue) { DeserterExpiration_Optional = NewValue; DeserterExpiration_IsSet = true;  }
	/** @brief Sets the value of DeserterExpiration_Optional and also sets DeserterExpiration_IsSet to true using move semantics */
	FORCEINLINE void SetDeserterExpiration(FDateTime&& NewValue) { DeserterExpiration_Optional = NewValue; DeserterExpiration_IsSet = true;  }
	/** @brief Clears the value of DeserterExpiration_Optional and sets DeserterExpiration_IsSet to false */
	void ClearDeserterExpiration() { DeserterExpiration_IsSet = false;  }

	/** @brief Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FDateTime DeserterReset_Optional{  };
	/** @brief true if DeserterReset_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool DeserterReset_IsSet{ false };
	/** @brief Gets the value of DeserterReset_Optional, regardless of it having been set */
	FORCEINLINE FDateTime& GetDeserterReset() { return DeserterReset_Optional; }
	/** @brief Gets the value of DeserterReset_Optional, regardless of it having been set */
	FORCEINLINE const FDateTime& GetDeserterReset() const { return DeserterReset_Optional; }
	/** @brief Gets the value of DeserterReset_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FDateTime& GetDeserterReset(const FDateTime& DefaultValue) const { if (DeserterReset_IsSet) return DeserterReset_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of DeserterReset_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetDeserterReset(FDateTime& OutValue) const { if (DeserterReset_IsSet) OutValue = DeserterReset_Optional; return DeserterReset_IsSet; }
	/** @brief Returns a pointer to DeserterReset_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FDateTime* GetDeserterResetOrNull() { if (DeserterReset_IsSet) return (&DeserterReset_Optional); return nullptr; }
	/** @brief Returns a pointer to DeserterReset_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FDateTime* GetDeserterResetOrNull() const { if (DeserterReset_IsSet) return (&DeserterReset_Optional); return nullptr; }
	/** @brief Sets the value of DeserterReset_Optional and also sets DeserterReset_IsSet to true */
	FORCEINLINE void SetDeserterReset(const FDateTime& NewValue) { DeserterReset_Optional = NewValue; DeserterReset_IsSet = true;  }
	/** @brief Sets the value of DeserterReset_Optional and also sets DeserterReset_IsSet to true using move semantics */
	FORCEINLINE void SetDeserterReset(FDateTime&& NewValue) { DeserterReset_Optional = NewValue; DeserterReset_IsSet = true;  }
	/** @brief Clears the value of DeserterReset_Optional and sets DeserterReset_IsSet to false */
	void ClearDeserterReset() { DeserterReset_IsSet = false;  }

	/** @brief The number of times a player has deserted before the expiration */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 DeserterCount_Optional{ 0 };
	/** @brief true if DeserterCount_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool DeserterCount_IsSet{ false };
	/** @brief Gets the value of DeserterCount_Optional, regardless of it having been set */
	FORCEINLINE int32& GetDeserterCount() { return DeserterCount_Optional; }
	/** @brief Gets the value of DeserterCount_Optional, regardless of it having been set */
	FORCEINLINE const int32& GetDeserterCount() const { return DeserterCount_Optional; }
	/** @brief Gets the value of DeserterCount_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const int32& GetDeserterCount(const int32& DefaultValue) const { if (DeserterCount_IsSet) return DeserterCount_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of DeserterCount_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetDeserterCount(int32& OutValue) const { if (DeserterCount_IsSet) OutValue = DeserterCount_Optional; return DeserterCount_IsSet; }
	/** @brief Returns a pointer to DeserterCount_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE int32* GetDeserterCountOrNull() { if (DeserterCount_IsSet) return (&DeserterCount_Optional); return nullptr; }
	/** @brief Returns a pointer to DeserterCount_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const int32* GetDeserterCountOrNull() const { if (DeserterCount_IsSet) return (&DeserterCount_Optional); return nullptr; }
	/** @brief Sets the value of DeserterCount_Optional and also sets DeserterCount_IsSet to true */
	FORCEINLINE void SetDeserterCount(const int32& NewValue) { DeserterCount_Optional = NewValue; DeserterCount_IsSet = true;  }
	/** @brief Sets the value of DeserterCount_Optional and also sets DeserterCount_IsSet to true using move semantics */
	FORCEINLINE void SetDeserterCount(int32&& NewValue) { DeserterCount_Optional = NewValue; DeserterCount_IsSet = true;  }
	/** @brief Clears the value of DeserterCount_Optional and sets DeserterCount_IsSet to false */
	void ClearDeserterCount() { DeserterCount_Optional = 0; DeserterCount_IsSet = false;  }
	/** @brief Returns the default value of DeserterCount */
	FORCEINLINE int32 GetDefaultValue_DeserterCount() { return 0; }

	/** @brief Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FDateTime LastUpdated_Optional{  };
	/** @brief true if LastUpdated_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool LastUpdated_IsSet{ false };
	/** @brief Gets the value of LastUpdated_Optional, regardless of it having been set */
	FORCEINLINE FDateTime& GetLastUpdated() { return LastUpdated_Optional; }
	/** @brief Gets the value of LastUpdated_Optional, regardless of it having been set */
	FORCEINLINE const FDateTime& GetLastUpdated() const { return LastUpdated_Optional; }
	/** @brief Gets the value of LastUpdated_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FDateTime& GetLastUpdated(const FDateTime& DefaultValue) const { if (LastUpdated_IsSet) return LastUpdated_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of LastUpdated_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetLastUpdated(FDateTime& OutValue) const { if (LastUpdated_IsSet) OutValue = LastUpdated_Optional; return LastUpdated_IsSet; }
	/** @brief Returns a pointer to LastUpdated_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FDateTime* GetLastUpdatedOrNull() { if (LastUpdated_IsSet) return (&LastUpdated_Optional); return nullptr; }
	/** @brief Returns a pointer to LastUpdated_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FDateTime* GetLastUpdatedOrNull() const { if (LastUpdated_IsSet) return (&LastUpdated_Optional); return nullptr; }
	/** @brief Sets the value of LastUpdated_Optional and also sets LastUpdated_IsSet to true */
	FORCEINLINE void SetLastUpdated(const FDateTime& NewValue) { LastUpdated_Optional = NewValue; LastUpdated_IsSet = true;  }
	/** @brief Sets the value of LastUpdated_Optional and also sets LastUpdated_IsSet to true using move semantics */
	FORCEINLINE void SetLastUpdated(FDateTime&& NewValue) { LastUpdated_Optional = NewValue; LastUpdated_IsSet = true;  }
	/** @brief Clears the value of LastUpdated_Optional and sets LastUpdated_IsSet to false */
	void ClearLastUpdated() { LastUpdated_IsSet = false;  }

	/** @brief Custom data about a players desertion status */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TMap<FString, FString> CustomData_Optional{  };
	/** @brief true if CustomData_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool CustomData_IsSet{ false };
	/** @brief Gets the value of CustomData_Optional, regardless of it having been set */
	FORCEINLINE TMap<FString, FString>& GetCustomData() { return CustomData_Optional; }
	/** @brief Gets the value of CustomData_Optional, regardless of it having been set */
	FORCEINLINE const TMap<FString, FString>& GetCustomData() const { return CustomData_Optional; }
	/** @brief Gets the value of CustomData_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const TMap<FString, FString>& GetCustomData(const TMap<FString, FString>& DefaultValue) const { if (CustomData_IsSet) return CustomData_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of CustomData_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetCustomData(TMap<FString, FString>& OutValue) const { if (CustomData_IsSet) OutValue = CustomData_Optional; return CustomData_IsSet; }
	/** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE TMap<FString, FString>* GetCustomDataOrNull() { if (CustomData_IsSet) return (&CustomData_Optional); return nullptr; }
	/** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const TMap<FString, FString>* GetCustomDataOrNull() const { if (CustomData_IsSet) return (&CustomData_Optional); return nullptr; }
	/** @brief Sets the value of CustomData_Optional and also sets CustomData_IsSet to true */
	FORCEINLINE void SetCustomData(const TMap<FString, FString>& NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true;  }
	/** @brief Sets the value of CustomData_Optional and also sets CustomData_IsSet to true using move semantics */
	FORCEINLINE void SetCustomData(TMap<FString, FString>&& NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true;  }
	/** @brief Clears the value of CustomData_Optional and sets CustomData_IsSet to false */
	void ClearCustomData() { CustomData_IsSet = false;  }
};

/** @} */
