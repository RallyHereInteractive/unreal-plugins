// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereAPIAuthContext.h"
#include "RallyHereAPIHelpers.h"
#include "InventoryPlatform.h"
#include "Catalog.h"
#include "HTTPValidationError.h"
#include "HzApiErrorModel.h"
#include "InventoryBucketUseRuleSet.h"
#include "InventoryBucketUseRuleSets.h"
#include "Item.h"
#include "Items.h"
#include "Loot.h"
#include "Loots.h"
#include "PlatformSKU.h"
#include "PlatformSKUs.h"
#include "PortalUseRuleset.h"
#include "PortalUseRulesets.h"
#include "PricePoint.h"
#include "PricePoints.h"
#include "TimeFrame.h"
#include "TimeFrames.h"
#include "Vendor.h"
#include "Vendors.h"
#include "XpTable.h"
#include "XpTables.h"

namespace RallyHereAPI
{
using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

// forward declaration
class FCatalogAPI;

/**
 * @brief Get Catalog All
 * Get the entire catalog.
 * 
 * This endpoint endpoint is generally discouraged outside of prototyping and early development.  It's not that the endpoint won't function, but rather that it creates a pattern that may result in a poor end user experience.  It has etag/if-none-match handling, but it is for the entire catalog.  So if a single byte changes inside the catalog (e.g. turning on a loot record, adding a single new item, changing a price point, adjusting the threshold to hit level X in an XP Table), then the etag will change.  If clients are re-requesting data from this endpoint, then those changes will result in them re-downloading, and re-parsing the entire catalog for that tiny modification.
 * 
 * Early on in a game's lifecycle, this doesn't matter much - since catalog data is pretty small.  But as your game grows, and you create lots of things to receive/purchase/grant, the data will balloon in size.  Parsing the response does occur on unreal's main thread, and with a sufficiently large catalog, you may see hitches.  There will also be lots of data in there that may not even be necessary for your client to see at all (e.g. if you only grant the loot from the dedicated server or if an item is just a tracker, it doesn't necessarily need to be visible on the client).
 * 
 * We generally encourage having a well-known list of vendors to request from `/inventory/v1/catalog/vendor/{vendor_id}`, and then requesting the entire set of xp tables, price points, and bucket rulesets (as those are generally pretty small lists).  That list of vendors could come from anywhere, it could be hardcoded, be set from an ini (if your client is unlikely to need arbitrary vendor additions, but you want to retain the ability to patch it) or it could come down in a kv.
*/
struct RALLYHEREAPI_API FRequest_GetCatalogAll : public FRequest
{
	FRequest_GetCatalogAll();
	virtual ~FRequest_GetCatalogAll() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	/* If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed. */
	TOptional<FString> IfNoneMatch;
};

/** The response type for FRequest_GetCatalogAll */
struct RALLYHEREAPI_API FResponse_GetCatalogAll : public FResponseAccessorTemplate<FRHAPI_Catalog, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_Catalog, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetCatalogAll(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetCatalogAll() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_Catalog Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_Catalog& OutContent) const { return TryGetContent<FRHAPI_Catalog>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_Catalog>& OutContent) const { return TryGetContent<FRHAPI_Catalog>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_Catalog* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_Catalog>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_Catalog> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_Catalog>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_Catalog& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 304
	Content still has the same etag and has not changed
	*/

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetCatalogAll */
DECLARE_DELEGATE_OneParam(FDelegate_GetCatalogAll, const FResponse_GetCatalogAll&);

/** @brief A helper metadata object for GetCatalogAll that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetCatalogAll
{
	/** The request type */
	typedef FRequest_GetCatalogAll Request;
	/** The response type */
	typedef FResponse_GetCatalogAll Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetCatalogAll Delegate;
	/** The API object that supports this API call */
	typedef FCatalogAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Catalog Entitlement Sku
 * Get a specific Entitlement SKU.
*/
struct RALLYHEREAPI_API FRequest_GetCatalogEntitlementSku : public FRequest
{
	FRequest_GetCatalogEntitlementSku();
	virtual ~FRequest_GetCatalogEntitlementSku() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	ERHAPI_InventoryPlatform Platform;
	FString Sku;
	/* If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed. */
	TOptional<FString> IfNoneMatch;
};

/** The response type for FRequest_GetCatalogEntitlementSku */
struct RALLYHEREAPI_API FResponse_GetCatalogEntitlementSku : public FResponseAccessorTemplate<FRHAPI_PlatformSKU, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_PlatformSKU, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetCatalogEntitlementSku(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetCatalogEntitlementSku() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PlatformSKU Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PlatformSKU& OutContent) const { return TryGetContent<FRHAPI_PlatformSKU>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PlatformSKU>& OutContent) const { return TryGetContent<FRHAPI_PlatformSKU>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PlatformSKU* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PlatformSKU>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PlatformSKU> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PlatformSKU>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PlatformSKU& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 304
	Content still has the same etag and has not changed
	*/

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetCatalogEntitlementSku */
DECLARE_DELEGATE_OneParam(FDelegate_GetCatalogEntitlementSku, const FResponse_GetCatalogEntitlementSku&);

/** @brief A helper metadata object for GetCatalogEntitlementSku that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetCatalogEntitlementSku
{
	/** The request type */
	typedef FRequest_GetCatalogEntitlementSku Request;
	/** The response type */
	typedef FResponse_GetCatalogEntitlementSku Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetCatalogEntitlementSku Delegate;
	/** The API object that supports this API call */
	typedef FCatalogAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Catalog Entitlement Sku All
 * Get all Entitlement SKUs.
*/
struct RALLYHEREAPI_API FRequest_GetCatalogEntitlementSkuAll : public FRequest
{
	FRequest_GetCatalogEntitlementSkuAll();
	virtual ~FRequest_GetCatalogEntitlementSkuAll() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	/* If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed. */
	TOptional<FString> IfNoneMatch;
};

/** The response type for FRequest_GetCatalogEntitlementSkuAll */
struct RALLYHEREAPI_API FResponse_GetCatalogEntitlementSkuAll : public FResponseAccessorTemplate<FRHAPI_PlatformSKUs, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_PlatformSKUs, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetCatalogEntitlementSkuAll(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetCatalogEntitlementSkuAll() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PlatformSKUs Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PlatformSKUs& OutContent) const { return TryGetContent<FRHAPI_PlatformSKUs>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PlatformSKUs>& OutContent) const { return TryGetContent<FRHAPI_PlatformSKUs>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PlatformSKUs* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PlatformSKUs>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PlatformSKUs> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PlatformSKUs>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PlatformSKUs& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 304
	Content still has the same etag and has not changed
	*/

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetCatalogEntitlementSkuAll */
DECLARE_DELEGATE_OneParam(FDelegate_GetCatalogEntitlementSkuAll, const FResponse_GetCatalogEntitlementSkuAll&);

/** @brief A helper metadata object for GetCatalogEntitlementSkuAll that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetCatalogEntitlementSkuAll
{
	/** The request type */
	typedef FRequest_GetCatalogEntitlementSkuAll Request;
	/** The response type */
	typedef FResponse_GetCatalogEntitlementSkuAll Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetCatalogEntitlementSkuAll Delegate;
	/** The API object that supports this API call */
	typedef FCatalogAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Catalog Inventory Bucket Use Rule Set
 * Get a specific Inventory Bucket Use Rule Set.
*/
struct RALLYHEREAPI_API FRequest_GetCatalogInventoryBucketUseRuleSet : public FRequest
{
	FRequest_GetCatalogInventoryBucketUseRuleSet();
	virtual ~FRequest_GetCatalogInventoryBucketUseRuleSet() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString InventoryBucketUseRulesetId;
	/* If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed. */
	TOptional<FString> IfNoneMatch;
};

/** The response type for FRequest_GetCatalogInventoryBucketUseRuleSet */
struct RALLYHEREAPI_API FResponse_GetCatalogInventoryBucketUseRuleSet : public FResponseAccessorTemplate<FRHAPI_InventoryBucketUseRuleSet, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_InventoryBucketUseRuleSet, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetCatalogInventoryBucketUseRuleSet(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetCatalogInventoryBucketUseRuleSet() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_InventoryBucketUseRuleSet Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_InventoryBucketUseRuleSet& OutContent) const { return TryGetContent<FRHAPI_InventoryBucketUseRuleSet>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_InventoryBucketUseRuleSet>& OutContent) const { return TryGetContent<FRHAPI_InventoryBucketUseRuleSet>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_InventoryBucketUseRuleSet* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_InventoryBucketUseRuleSet>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_InventoryBucketUseRuleSet> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_InventoryBucketUseRuleSet>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_InventoryBucketUseRuleSet& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 304
	Content still has the same etag and has not changed
	*/

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetCatalogInventoryBucketUseRuleSet */
DECLARE_DELEGATE_OneParam(FDelegate_GetCatalogInventoryBucketUseRuleSet, const FResponse_GetCatalogInventoryBucketUseRuleSet&);

/** @brief A helper metadata object for GetCatalogInventoryBucketUseRuleSet that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetCatalogInventoryBucketUseRuleSet
{
	/** The request type */
	typedef FRequest_GetCatalogInventoryBucketUseRuleSet Request;
	/** The response type */
	typedef FResponse_GetCatalogInventoryBucketUseRuleSet Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetCatalogInventoryBucketUseRuleSet Delegate;
	/** The API object that supports this API call */
	typedef FCatalogAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Catalog Inventory Bucket Use Rule Sets All
 * Get all Inventory Bucket Use Rule Sets.
*/
struct RALLYHEREAPI_API FRequest_GetCatalogInventoryBucketUseRuleSetsAll : public FRequest
{
	FRequest_GetCatalogInventoryBucketUseRuleSetsAll();
	virtual ~FRequest_GetCatalogInventoryBucketUseRuleSetsAll() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	/* If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed. */
	TOptional<FString> IfNoneMatch;
};

/** The response type for FRequest_GetCatalogInventoryBucketUseRuleSetsAll */
struct RALLYHEREAPI_API FResponse_GetCatalogInventoryBucketUseRuleSetsAll : public FResponseAccessorTemplate<FRHAPI_InventoryBucketUseRuleSets, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_InventoryBucketUseRuleSets, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetCatalogInventoryBucketUseRuleSetsAll(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetCatalogInventoryBucketUseRuleSetsAll() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_InventoryBucketUseRuleSets Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_InventoryBucketUseRuleSets& OutContent) const { return TryGetContent<FRHAPI_InventoryBucketUseRuleSets>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_InventoryBucketUseRuleSets>& OutContent) const { return TryGetContent<FRHAPI_InventoryBucketUseRuleSets>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_InventoryBucketUseRuleSets* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_InventoryBucketUseRuleSets>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_InventoryBucketUseRuleSets> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_InventoryBucketUseRuleSets>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_InventoryBucketUseRuleSets& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 304
	Content still has the same etag and has not changed
	*/

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetCatalogInventoryBucketUseRuleSetsAll */
DECLARE_DELEGATE_OneParam(FDelegate_GetCatalogInventoryBucketUseRuleSetsAll, const FResponse_GetCatalogInventoryBucketUseRuleSetsAll&);

/** @brief A helper metadata object for GetCatalogInventoryBucketUseRuleSetsAll that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetCatalogInventoryBucketUseRuleSetsAll
{
	/** The request type */
	typedef FRequest_GetCatalogInventoryBucketUseRuleSetsAll Request;
	/** The response type */
	typedef FResponse_GetCatalogInventoryBucketUseRuleSetsAll Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetCatalogInventoryBucketUseRuleSetsAll Delegate;
	/** The API object that supports this API call */
	typedef FCatalogAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Catalog Item
 * Get a specific Item.
*/
struct RALLYHEREAPI_API FRequest_GetCatalogItem : public FRequest
{
	FRequest_GetCatalogItem();
	virtual ~FRequest_GetCatalogItem() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	int32 ItemId = 0;
	/* If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed. */
	TOptional<FString> IfNoneMatch;
};

/** The response type for FRequest_GetCatalogItem */
struct RALLYHEREAPI_API FResponse_GetCatalogItem : public FResponseAccessorTemplate<FRHAPI_Item, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_Item, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetCatalogItem(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetCatalogItem() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_Item Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_Item& OutContent) const { return TryGetContent<FRHAPI_Item>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_Item>& OutContent) const { return TryGetContent<FRHAPI_Item>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_Item* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_Item>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_Item> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_Item>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_Item& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 304
	Content still has the same etag and has not changed
	*/

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetCatalogItem */
DECLARE_DELEGATE_OneParam(FDelegate_GetCatalogItem, const FResponse_GetCatalogItem&);

/** @brief A helper metadata object for GetCatalogItem that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetCatalogItem
{
	/** The request type */
	typedef FRequest_GetCatalogItem Request;
	/** The response type */
	typedef FResponse_GetCatalogItem Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetCatalogItem Delegate;
	/** The API object that supports this API call */
	typedef FCatalogAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Catalog Items All
 * Get all Items.
*/
struct RALLYHEREAPI_API FRequest_GetCatalogItemsAll : public FRequest
{
	FRequest_GetCatalogItemsAll();
	virtual ~FRequest_GetCatalogItemsAll() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	/* If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed. */
	TOptional<FString> IfNoneMatch;
};

/** The response type for FRequest_GetCatalogItemsAll */
struct RALLYHEREAPI_API FResponse_GetCatalogItemsAll : public FResponseAccessorTemplate<FRHAPI_Items, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_Items, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetCatalogItemsAll(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetCatalogItemsAll() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_Items Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_Items& OutContent) const { return TryGetContent<FRHAPI_Items>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_Items>& OutContent) const { return TryGetContent<FRHAPI_Items>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_Items* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_Items>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_Items> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_Items>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_Items& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 304
	Content still has the same etag and has not changed
	*/

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetCatalogItemsAll */
DECLARE_DELEGATE_OneParam(FDelegate_GetCatalogItemsAll, const FResponse_GetCatalogItemsAll&);

/** @brief A helper metadata object for GetCatalogItemsAll that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetCatalogItemsAll
{
	/** The request type */
	typedef FRequest_GetCatalogItemsAll Request;
	/** The response type */
	typedef FResponse_GetCatalogItemsAll Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetCatalogItemsAll Delegate;
	/** The API object that supports this API call */
	typedef FCatalogAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Catalog Loot
 * Get a specific Loot.
*/
struct RALLYHEREAPI_API FRequest_GetCatalogLoot : public FRequest
{
	FRequest_GetCatalogLoot();
	virtual ~FRequest_GetCatalogLoot() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	int32 LootId = 0;
	/* If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed. */
	TOptional<FString> IfNoneMatch;
};

/** The response type for FRequest_GetCatalogLoot */
struct RALLYHEREAPI_API FResponse_GetCatalogLoot : public FResponseAccessorTemplate<FRHAPI_Loot, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_Loot, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetCatalogLoot(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetCatalogLoot() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_Loot Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_Loot& OutContent) const { return TryGetContent<FRHAPI_Loot>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_Loot>& OutContent) const { return TryGetContent<FRHAPI_Loot>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_Loot* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_Loot>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_Loot> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_Loot>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_Loot& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 304
	Content still has the same etag and has not changed
	*/

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetCatalogLoot */
DECLARE_DELEGATE_OneParam(FDelegate_GetCatalogLoot, const FResponse_GetCatalogLoot&);

/** @brief A helper metadata object for GetCatalogLoot that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetCatalogLoot
{
	/** The request type */
	typedef FRequest_GetCatalogLoot Request;
	/** The response type */
	typedef FResponse_GetCatalogLoot Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetCatalogLoot Delegate;
	/** The API object that supports this API call */
	typedef FCatalogAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Catalog Loots All
 * Get all Loot.
*/
struct RALLYHEREAPI_API FRequest_GetCatalogLootsAll : public FRequest
{
	FRequest_GetCatalogLootsAll();
	virtual ~FRequest_GetCatalogLootsAll() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	/* If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed. */
	TOptional<FString> IfNoneMatch;
};

/** The response type for FRequest_GetCatalogLootsAll */
struct RALLYHEREAPI_API FResponse_GetCatalogLootsAll : public FResponseAccessorTemplate<FRHAPI_Loots, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_Loots, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetCatalogLootsAll(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetCatalogLootsAll() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_Loots Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_Loots& OutContent) const { return TryGetContent<FRHAPI_Loots>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_Loots>& OutContent) const { return TryGetContent<FRHAPI_Loots>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_Loots* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_Loots>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_Loots> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_Loots>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_Loots& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 304
	Content still has the same etag and has not changed
	*/

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetCatalogLootsAll */
DECLARE_DELEGATE_OneParam(FDelegate_GetCatalogLootsAll, const FResponse_GetCatalogLootsAll&);

/** @brief A helper metadata object for GetCatalogLootsAll that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetCatalogLootsAll
{
	/** The request type */
	typedef FRequest_GetCatalogLootsAll Request;
	/** The response type */
	typedef FResponse_GetCatalogLootsAll Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetCatalogLootsAll Delegate;
	/** The API object that supports this API call */
	typedef FCatalogAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Catalog Portal Use Ruleset
 * Get a specific Portal Use Ruleset.
*/
struct RALLYHEREAPI_API FRequest_GetCatalogPortalUseRuleset : public FRequest
{
	FRequest_GetCatalogPortalUseRuleset();
	virtual ~FRequest_GetCatalogPortalUseRuleset() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	int32 PortalUseRulesetId = 0;
	/* If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed. */
	TOptional<FString> IfNoneMatch;
};

/** The response type for FRequest_GetCatalogPortalUseRuleset */
struct RALLYHEREAPI_API FResponse_GetCatalogPortalUseRuleset : public FResponseAccessorTemplate<FRHAPI_PortalUseRuleset, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_PortalUseRuleset, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetCatalogPortalUseRuleset(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetCatalogPortalUseRuleset() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PortalUseRuleset Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PortalUseRuleset& OutContent) const { return TryGetContent<FRHAPI_PortalUseRuleset>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PortalUseRuleset>& OutContent) const { return TryGetContent<FRHAPI_PortalUseRuleset>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PortalUseRuleset* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PortalUseRuleset>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PortalUseRuleset> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PortalUseRuleset>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PortalUseRuleset& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 304
	Content still has the same etag and has not changed
	*/

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetCatalogPortalUseRuleset */
DECLARE_DELEGATE_OneParam(FDelegate_GetCatalogPortalUseRuleset, const FResponse_GetCatalogPortalUseRuleset&);

/** @brief A helper metadata object for GetCatalogPortalUseRuleset that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetCatalogPortalUseRuleset
{
	/** The request type */
	typedef FRequest_GetCatalogPortalUseRuleset Request;
	/** The response type */
	typedef FResponse_GetCatalogPortalUseRuleset Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetCatalogPortalUseRuleset Delegate;
	/** The API object that supports this API call */
	typedef FCatalogAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Catalog Portal Use Rulesets All
 * Get all Portal Use Rulesets.
*/
struct RALLYHEREAPI_API FRequest_GetCatalogPortalUseRulesetsAll : public FRequest
{
	FRequest_GetCatalogPortalUseRulesetsAll();
	virtual ~FRequest_GetCatalogPortalUseRulesetsAll() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	/* If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed. */
	TOptional<FString> IfNoneMatch;
};

/** The response type for FRequest_GetCatalogPortalUseRulesetsAll */
struct RALLYHEREAPI_API FResponse_GetCatalogPortalUseRulesetsAll : public FResponseAccessorTemplate<FRHAPI_PortalUseRulesets, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_PortalUseRulesets, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetCatalogPortalUseRulesetsAll(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetCatalogPortalUseRulesetsAll() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PortalUseRulesets Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PortalUseRulesets& OutContent) const { return TryGetContent<FRHAPI_PortalUseRulesets>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PortalUseRulesets>& OutContent) const { return TryGetContent<FRHAPI_PortalUseRulesets>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PortalUseRulesets* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PortalUseRulesets>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PortalUseRulesets> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PortalUseRulesets>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PortalUseRulesets& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 304
	Content still has the same etag and has not changed
	*/

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetCatalogPortalUseRulesetsAll */
DECLARE_DELEGATE_OneParam(FDelegate_GetCatalogPortalUseRulesetsAll, const FResponse_GetCatalogPortalUseRulesetsAll&);

/** @brief A helper metadata object for GetCatalogPortalUseRulesetsAll that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetCatalogPortalUseRulesetsAll
{
	/** The request type */
	typedef FRequest_GetCatalogPortalUseRulesetsAll Request;
	/** The response type */
	typedef FResponse_GetCatalogPortalUseRulesetsAll Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetCatalogPortalUseRulesetsAll Delegate;
	/** The API object that supports this API call */
	typedef FCatalogAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Catalog Price Point
 * Get a specific Price Point.
*/
struct RALLYHEREAPI_API FRequest_GetCatalogPricePoint : public FRequest
{
	FRequest_GetCatalogPricePoint();
	virtual ~FRequest_GetCatalogPricePoint() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FString PricePointId;
	/* If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed. */
	TOptional<FString> IfNoneMatch;
};

/** The response type for FRequest_GetCatalogPricePoint */
struct RALLYHEREAPI_API FResponse_GetCatalogPricePoint : public FResponseAccessorTemplate<FRHAPI_PricePoint, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_PricePoint, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetCatalogPricePoint(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetCatalogPricePoint() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PricePoint Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PricePoint& OutContent) const { return TryGetContent<FRHAPI_PricePoint>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PricePoint>& OutContent) const { return TryGetContent<FRHAPI_PricePoint>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PricePoint* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PricePoint>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PricePoint> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PricePoint>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PricePoint& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 304
	Content still has the same etag and has not changed
	*/

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetCatalogPricePoint */
DECLARE_DELEGATE_OneParam(FDelegate_GetCatalogPricePoint, const FResponse_GetCatalogPricePoint&);

/** @brief A helper metadata object for GetCatalogPricePoint that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetCatalogPricePoint
{
	/** The request type */
	typedef FRequest_GetCatalogPricePoint Request;
	/** The response type */
	typedef FResponse_GetCatalogPricePoint Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetCatalogPricePoint Delegate;
	/** The API object that supports this API call */
	typedef FCatalogAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Catalog Price Points All
 * Get all Price Points.
*/
struct RALLYHEREAPI_API FRequest_GetCatalogPricePointsAll : public FRequest
{
	FRequest_GetCatalogPricePointsAll();
	virtual ~FRequest_GetCatalogPricePointsAll() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	/* If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed. */
	TOptional<FString> IfNoneMatch;
};

/** The response type for FRequest_GetCatalogPricePointsAll */
struct RALLYHEREAPI_API FResponse_GetCatalogPricePointsAll : public FResponseAccessorTemplate<FRHAPI_PricePoints, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_PricePoints, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetCatalogPricePointsAll(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetCatalogPricePointsAll() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PricePoints Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PricePoints& OutContent) const { return TryGetContent<FRHAPI_PricePoints>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PricePoints>& OutContent) const { return TryGetContent<FRHAPI_PricePoints>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PricePoints* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PricePoints>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PricePoints> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PricePoints>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PricePoints& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 304
	Content still has the same etag and has not changed
	*/

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetCatalogPricePointsAll */
DECLARE_DELEGATE_OneParam(FDelegate_GetCatalogPricePointsAll, const FResponse_GetCatalogPricePointsAll&);

/** @brief A helper metadata object for GetCatalogPricePointsAll that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetCatalogPricePointsAll
{
	/** The request type */
	typedef FRequest_GetCatalogPricePointsAll Request;
	/** The response type */
	typedef FResponse_GetCatalogPricePointsAll Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetCatalogPricePointsAll Delegate;
	/** The API object that supports this API call */
	typedef FCatalogAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Catalog Time Frame
 * Get a specific Time Frame.
*/
struct RALLYHEREAPI_API FRequest_GetCatalogTimeFrame : public FRequest
{
	FRequest_GetCatalogTimeFrame();
	virtual ~FRequest_GetCatalogTimeFrame() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	int32 TimeFrameId = 0;
	/* If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed. */
	TOptional<FString> IfNoneMatch;
};

/** The response type for FRequest_GetCatalogTimeFrame */
struct RALLYHEREAPI_API FResponse_GetCatalogTimeFrame : public FResponseAccessorTemplate<FRHAPI_TimeFrame, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_TimeFrame, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetCatalogTimeFrame(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetCatalogTimeFrame() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_TimeFrame Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_TimeFrame& OutContent) const { return TryGetContent<FRHAPI_TimeFrame>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_TimeFrame>& OutContent) const { return TryGetContent<FRHAPI_TimeFrame>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_TimeFrame* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_TimeFrame>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_TimeFrame> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_TimeFrame>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_TimeFrame& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 304
	Content still has the same etag and has not changed
	*/

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetCatalogTimeFrame */
DECLARE_DELEGATE_OneParam(FDelegate_GetCatalogTimeFrame, const FResponse_GetCatalogTimeFrame&);

/** @brief A helper metadata object for GetCatalogTimeFrame that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetCatalogTimeFrame
{
	/** The request type */
	typedef FRequest_GetCatalogTimeFrame Request;
	/** The response type */
	typedef FResponse_GetCatalogTimeFrame Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetCatalogTimeFrame Delegate;
	/** The API object that supports this API call */
	typedef FCatalogAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Catalog Time Frames All
 * Get all Time Frames.
*/
struct RALLYHEREAPI_API FRequest_GetCatalogTimeFramesAll : public FRequest
{
	FRequest_GetCatalogTimeFramesAll();
	virtual ~FRequest_GetCatalogTimeFramesAll() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	/* If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed. */
	TOptional<FString> IfNoneMatch;
};

/** The response type for FRequest_GetCatalogTimeFramesAll */
struct RALLYHEREAPI_API FResponse_GetCatalogTimeFramesAll : public FResponseAccessorTemplate<FRHAPI_TimeFrames, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_TimeFrames, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetCatalogTimeFramesAll(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetCatalogTimeFramesAll() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_TimeFrames Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_TimeFrames& OutContent) const { return TryGetContent<FRHAPI_TimeFrames>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_TimeFrames>& OutContent) const { return TryGetContent<FRHAPI_TimeFrames>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_TimeFrames* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_TimeFrames>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_TimeFrames> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_TimeFrames>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_TimeFrames& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 304
	Content still has the same etag and has not changed
	*/

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetCatalogTimeFramesAll */
DECLARE_DELEGATE_OneParam(FDelegate_GetCatalogTimeFramesAll, const FResponse_GetCatalogTimeFramesAll&);

/** @brief A helper metadata object for GetCatalogTimeFramesAll that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetCatalogTimeFramesAll
{
	/** The request type */
	typedef FRequest_GetCatalogTimeFramesAll Request;
	/** The response type */
	typedef FResponse_GetCatalogTimeFramesAll Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetCatalogTimeFramesAll Delegate;
	/** The API object that supports this API call */
	typedef FCatalogAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Catalog Vendor
 * Get a specific Vendor.
*/
struct RALLYHEREAPI_API FRequest_GetCatalogVendor : public FRequest
{
	FRequest_GetCatalogVendor();
	virtual ~FRequest_GetCatalogVendor() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	int32 VendorId = 0;
	/* If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed. */
	TOptional<FString> IfNoneMatch;
};

/** The response type for FRequest_GetCatalogVendor */
struct RALLYHEREAPI_API FResponse_GetCatalogVendor : public FResponseAccessorTemplate<FRHAPI_Vendor, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_Vendor, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetCatalogVendor(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetCatalogVendor() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_Vendor Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_Vendor& OutContent) const { return TryGetContent<FRHAPI_Vendor>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_Vendor>& OutContent) const { return TryGetContent<FRHAPI_Vendor>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_Vendor* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_Vendor>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_Vendor> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_Vendor>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_Vendor& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 304
	Content still has the same etag and has not changed
	*/

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetCatalogVendor */
DECLARE_DELEGATE_OneParam(FDelegate_GetCatalogVendor, const FResponse_GetCatalogVendor&);

/** @brief A helper metadata object for GetCatalogVendor that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetCatalogVendor
{
	/** The request type */
	typedef FRequest_GetCatalogVendor Request;
	/** The response type */
	typedef FResponse_GetCatalogVendor Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetCatalogVendor Delegate;
	/** The API object that supports this API call */
	typedef FCatalogAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Catalog Vendors All
 * Get all Vendors.
*/
struct RALLYHEREAPI_API FRequest_GetCatalogVendorsAll : public FRequest
{
	FRequest_GetCatalogVendorsAll();
	virtual ~FRequest_GetCatalogVendorsAll() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	/* If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed. */
	TOptional<FString> IfNoneMatch;
};

/** The response type for FRequest_GetCatalogVendorsAll */
struct RALLYHEREAPI_API FResponse_GetCatalogVendorsAll : public FResponseAccessorTemplate<FRHAPI_Vendors, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_Vendors, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetCatalogVendorsAll(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetCatalogVendorsAll() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_Vendors Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_Vendors& OutContent) const { return TryGetContent<FRHAPI_Vendors>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_Vendors>& OutContent) const { return TryGetContent<FRHAPI_Vendors>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_Vendors* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_Vendors>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_Vendors> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_Vendors>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_Vendors& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 304
	Content still has the same etag and has not changed
	*/

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetCatalogVendorsAll */
DECLARE_DELEGATE_OneParam(FDelegate_GetCatalogVendorsAll, const FResponse_GetCatalogVendorsAll&);

/** @brief A helper metadata object for GetCatalogVendorsAll that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetCatalogVendorsAll
{
	/** The request type */
	typedef FRequest_GetCatalogVendorsAll Request;
	/** The response type */
	typedef FResponse_GetCatalogVendorsAll Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetCatalogVendorsAll Delegate;
	/** The API object that supports this API call */
	typedef FCatalogAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Catalog Xp All
 * Get all XP Tables.
*/
struct RALLYHEREAPI_API FRequest_GetCatalogXpAll : public FRequest
{
	FRequest_GetCatalogXpAll();
	virtual ~FRequest_GetCatalogXpAll() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	/* If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed. */
	TOptional<FString> IfNoneMatch;
};

/** The response type for FRequest_GetCatalogXpAll */
struct RALLYHEREAPI_API FResponse_GetCatalogXpAll : public FResponseAccessorTemplate<FRHAPI_XpTables, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_XpTables, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetCatalogXpAll(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetCatalogXpAll() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_XpTables Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_XpTables& OutContent) const { return TryGetContent<FRHAPI_XpTables>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_XpTables>& OutContent) const { return TryGetContent<FRHAPI_XpTables>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_XpTables* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_XpTables>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_XpTables> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_XpTables>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_XpTables& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 304
	Content still has the same etag and has not changed
	*/

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetCatalogXpAll */
DECLARE_DELEGATE_OneParam(FDelegate_GetCatalogXpAll, const FResponse_GetCatalogXpAll&);

/** @brief A helper metadata object for GetCatalogXpAll that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetCatalogXpAll
{
	/** The request type */
	typedef FRequest_GetCatalogXpAll Request;
	/** The response type */
	typedef FResponse_GetCatalogXpAll Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetCatalogXpAll Delegate;
	/** The API object that supports this API call */
	typedef FCatalogAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Catalog Xp Table
 * Get a specific XP Table.
*/
struct RALLYHEREAPI_API FRequest_GetCatalogXpTable : public FRequest
{
	FRequest_GetCatalogXpTable();
	virtual ~FRequest_GetCatalogXpTable() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	int32 XpTableId = 0;
	/* If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed. */
	TOptional<FString> IfNoneMatch;
};

/** The response type for FRequest_GetCatalogXpTable */
struct RALLYHEREAPI_API FResponse_GetCatalogXpTable : public FResponseAccessorTemplate<FRHAPI_XpTable, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_XpTable, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetCatalogXpTable(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetCatalogXpTable() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_XpTable Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_XpTable& OutContent) const { return TryGetContent<FRHAPI_XpTable>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_XpTable>& OutContent) const { return TryGetContent<FRHAPI_XpTable>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_XpTable* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_XpTable>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_XpTable> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_XpTable>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_XpTable& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 304
	Content still has the same etag and has not changed
	*/

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetCatalogXpTable */
DECLARE_DELEGATE_OneParam(FDelegate_GetCatalogXpTable, const FResponse_GetCatalogXpTable&);

/** @brief A helper metadata object for GetCatalogXpTable that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetCatalogXpTable
{
	/** The request type */
	typedef FRequest_GetCatalogXpTable Request;
	/** The response type */
	typedef FResponse_GetCatalogXpTable Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetCatalogXpTable Delegate;
	/** The API object that supports this API call */
	typedef FCatalogAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};


/** The API class itself, which will handle calls to */
class RALLYHEREAPI_API FCatalogAPI : public FAPI
{
public:
	FCatalogAPI();
	virtual ~FCatalogAPI();

	FHttpRequestPtr GetCatalogAll(const FRequest_GetCatalogAll& Request, const FDelegate_GetCatalogAll& Delegate = FDelegate_GetCatalogAll(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetCatalogAllResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetCatalogAll Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetCatalogEntitlementSku(const FRequest_GetCatalogEntitlementSku& Request, const FDelegate_GetCatalogEntitlementSku& Delegate = FDelegate_GetCatalogEntitlementSku(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetCatalogEntitlementSkuResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetCatalogEntitlementSku Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetCatalogEntitlementSkuAll(const FRequest_GetCatalogEntitlementSkuAll& Request, const FDelegate_GetCatalogEntitlementSkuAll& Delegate = FDelegate_GetCatalogEntitlementSkuAll(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetCatalogEntitlementSkuAllResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetCatalogEntitlementSkuAll Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetCatalogInventoryBucketUseRuleSet(const FRequest_GetCatalogInventoryBucketUseRuleSet& Request, const FDelegate_GetCatalogInventoryBucketUseRuleSet& Delegate = FDelegate_GetCatalogInventoryBucketUseRuleSet(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetCatalogInventoryBucketUseRuleSetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetCatalogInventoryBucketUseRuleSet Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetCatalogInventoryBucketUseRuleSetsAll(const FRequest_GetCatalogInventoryBucketUseRuleSetsAll& Request, const FDelegate_GetCatalogInventoryBucketUseRuleSetsAll& Delegate = FDelegate_GetCatalogInventoryBucketUseRuleSetsAll(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetCatalogInventoryBucketUseRuleSetsAllResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetCatalogInventoryBucketUseRuleSetsAll Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetCatalogItem(const FRequest_GetCatalogItem& Request, const FDelegate_GetCatalogItem& Delegate = FDelegate_GetCatalogItem(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetCatalogItemResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetCatalogItem Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetCatalogItemsAll(const FRequest_GetCatalogItemsAll& Request, const FDelegate_GetCatalogItemsAll& Delegate = FDelegate_GetCatalogItemsAll(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetCatalogItemsAllResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetCatalogItemsAll Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetCatalogLoot(const FRequest_GetCatalogLoot& Request, const FDelegate_GetCatalogLoot& Delegate = FDelegate_GetCatalogLoot(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetCatalogLootResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetCatalogLoot Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetCatalogLootsAll(const FRequest_GetCatalogLootsAll& Request, const FDelegate_GetCatalogLootsAll& Delegate = FDelegate_GetCatalogLootsAll(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetCatalogLootsAllResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetCatalogLootsAll Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetCatalogPortalUseRuleset(const FRequest_GetCatalogPortalUseRuleset& Request, const FDelegate_GetCatalogPortalUseRuleset& Delegate = FDelegate_GetCatalogPortalUseRuleset(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetCatalogPortalUseRulesetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetCatalogPortalUseRuleset Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetCatalogPortalUseRulesetsAll(const FRequest_GetCatalogPortalUseRulesetsAll& Request, const FDelegate_GetCatalogPortalUseRulesetsAll& Delegate = FDelegate_GetCatalogPortalUseRulesetsAll(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetCatalogPortalUseRulesetsAllResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetCatalogPortalUseRulesetsAll Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetCatalogPricePoint(const FRequest_GetCatalogPricePoint& Request, const FDelegate_GetCatalogPricePoint& Delegate = FDelegate_GetCatalogPricePoint(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetCatalogPricePointResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetCatalogPricePoint Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetCatalogPricePointsAll(const FRequest_GetCatalogPricePointsAll& Request, const FDelegate_GetCatalogPricePointsAll& Delegate = FDelegate_GetCatalogPricePointsAll(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetCatalogPricePointsAllResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetCatalogPricePointsAll Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetCatalogTimeFrame(const FRequest_GetCatalogTimeFrame& Request, const FDelegate_GetCatalogTimeFrame& Delegate = FDelegate_GetCatalogTimeFrame(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetCatalogTimeFrameResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetCatalogTimeFrame Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetCatalogTimeFramesAll(const FRequest_GetCatalogTimeFramesAll& Request, const FDelegate_GetCatalogTimeFramesAll& Delegate = FDelegate_GetCatalogTimeFramesAll(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetCatalogTimeFramesAllResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetCatalogTimeFramesAll Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetCatalogVendor(const FRequest_GetCatalogVendor& Request, const FDelegate_GetCatalogVendor& Delegate = FDelegate_GetCatalogVendor(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetCatalogVendorResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetCatalogVendor Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetCatalogVendorsAll(const FRequest_GetCatalogVendorsAll& Request, const FDelegate_GetCatalogVendorsAll& Delegate = FDelegate_GetCatalogVendorsAll(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetCatalogVendorsAllResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetCatalogVendorsAll Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetCatalogXpAll(const FRequest_GetCatalogXpAll& Request, const FDelegate_GetCatalogXpAll& Delegate = FDelegate_GetCatalogXpAll(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetCatalogXpAllResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetCatalogXpAll Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetCatalogXpTable(const FRequest_GetCatalogXpTable& Request, const FDelegate_GetCatalogXpTable& Delegate = FDelegate_GetCatalogXpTable(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetCatalogXpTableResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetCatalogXpTable Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};



}
