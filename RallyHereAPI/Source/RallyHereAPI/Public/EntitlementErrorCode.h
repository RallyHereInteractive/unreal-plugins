// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "EntitlementErrorCode.generated.h"


/**
 * @brief Error codes for Entitlements
 */
UENUM(BlueprintType)
enum class ERHAPI_EntitlementErrorCode : uint8
{
    None UMETA(ToolTip="No error occured"),
    AuthTokenFailure UMETA(ToolTip="Failed to find or validate the auth token"),
    MissingInformation UMETA(ToolTip="Missing information in the request"),
    FailedToConsume UMETA(ToolTip="Failed to consume the entitlement"),
    NoSkuFound UMETA(ToolTip="No SKU found for this entitlement on the backend"),
    WrongSkuTypeProvided UMETA(ToolTip="Entitlement is defined with a different SKU type than the one provided"),
    DurableAuthorityTypeNotValid UMETA(ToolTip="Durable entitlements are not allowed by this platform"),
    DurableSingleUseAuthorityTypeNotValid UMETA(ToolTip="Durable single use entitlements are not allowed by this platform"),
    ConsumableAuthorityTypeNotValid UMETA(ToolTip="Consumable entitlements are not allowed by this platform"),
    UnknownSkuTypeProvided UMETA(ToolTip="Unknown SKU type provided"),
    FailedToSubmitOrder UMETA(ToolTip="Failed to submit the order to the backend"),
    AlreadyAppliedDurableSingleUse UMETA(ToolTip="Durable single use entitlement has already been applied"),
    QuantityZero UMETA(ToolTip="Quantity was zero, nothing to apply"),
    PreviouslyApplied UMETA(ToolTip="Entitlement was previously applied"),
};
RALLYHEREAPI_API FString EnumToString(const ERHAPI_EntitlementErrorCode& EnumValue);
RALLYHEREAPI_API bool EnumFromString(const FString& EnumAsString, ERHAPI_EntitlementErrorCode& EnumValue);
RALLYHEREAPI_API FStringFormatArg ToStringFormatArg(const ERHAPI_EntitlementErrorCode& Value);
RALLYHEREAPI_API void WriteJsonValue(TSharedRef<TJsonWriter<>>& Writer, const ERHAPI_EntitlementErrorCode& Value);
RALLYHEREAPI_API bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, ERHAPI_EntitlementErrorCode& Value);
