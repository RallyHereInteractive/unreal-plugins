// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereAPIAuthContext.h"
#include "RallyHereAPIHelpers.h"
#include "EntityType.h"
#include "FileType.h"
#include "FileListResponse.h"
#include "HTTPValidationError.h"
#include "HzApiErrorModel.h"
#include "StorageInformation.h"

namespace RallyHereAPI
{
using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

struct FRequest_CreateEntityDirectoryFile;
struct FResponse_CreateEntityDirectoryFile;
struct FRequest_DeleteEntityDirectory;
struct FResponse_DeleteEntityDirectory;
struct FRequest_DeleteEntityDirectoryFile;
struct FResponse_DeleteEntityDirectoryFile;
struct FRequest_DownloadEntityDirectoryFile;
struct FResponse_DownloadEntityDirectoryFile;
struct FRequest_GetEntityDirectoryInformation;
struct FResponse_GetEntityDirectoryInformation;
struct FRequest_ListEntityDirectoryFiles;
struct FResponse_ListEntityDirectoryFiles;

DECLARE_DELEGATE_OneParam(FDelegate_CreateEntityDirectoryFile, const FResponse_CreateEntityDirectoryFile&);
DECLARE_DELEGATE_OneParam(FDelegate_DeleteEntityDirectory, const FResponse_DeleteEntityDirectory&);
DECLARE_DELEGATE_OneParam(FDelegate_DeleteEntityDirectoryFile, const FResponse_DeleteEntityDirectoryFile&);
DECLARE_DELEGATE_OneParam(FDelegate_DownloadEntityDirectoryFile, const FResponse_DownloadEntityDirectoryFile&);
DECLARE_DELEGATE_OneParam(FDelegate_GetEntityDirectoryInformation, const FResponse_GetEntityDirectoryInformation&);
DECLARE_DELEGATE_OneParam(FDelegate_ListEntityDirectoryFiles, const FResponse_ListEntityDirectoryFiles&);

class RALLYHEREAPI_API FRemoteFileAPI : public FAPI
{
public:
	FRemoteFileAPI();
	virtual ~FRemoteFileAPI();

	FHttpRequestPtr CreateEntityDirectoryFile(const FRequest_CreateEntityDirectoryFile& Request, const FDelegate_CreateEntityDirectoryFile& Delegate = FDelegate_CreateEntityDirectoryFile(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr DeleteEntityDirectory(const FRequest_DeleteEntityDirectory& Request, const FDelegate_DeleteEntityDirectory& Delegate = FDelegate_DeleteEntityDirectory(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr DeleteEntityDirectoryFile(const FRequest_DeleteEntityDirectoryFile& Request, const FDelegate_DeleteEntityDirectoryFile& Delegate = FDelegate_DeleteEntityDirectoryFile(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr DownloadEntityDirectoryFile(const FRequest_DownloadEntityDirectoryFile& Request, const FDelegate_DownloadEntityDirectoryFile& Delegate = FDelegate_DownloadEntityDirectoryFile(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetEntityDirectoryInformation(const FRequest_GetEntityDirectoryInformation& Request, const FDelegate_GetEntityDirectoryInformation& Delegate = FDelegate_GetEntityDirectoryInformation(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr ListEntityDirectoryFiles(const FRequest_ListEntityDirectoryFiles& Request, const FDelegate_ListEntityDirectoryFiles& Delegate = FDelegate_ListEntityDirectoryFiles(), int32 Priority = DefaultRallyHereAPIPriority);

private:
	void OnCreateEntityDirectoryFileResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_CreateEntityDirectoryFile Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnDeleteEntityDirectoryResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_DeleteEntityDirectory Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnDeleteEntityDirectoryFileResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_DeleteEntityDirectoryFile Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnDownloadEntityDirectoryFileResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_DownloadEntityDirectoryFile Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetEntityDirectoryInformationResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetEntityDirectoryInformation Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnListEntityDirectoryFilesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_ListEntityDirectoryFiles Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};

/* Create Entity Directory File
 *
 * Upload a file to entity storage for provided entity_id
*/
struct RALLYHEREAPI_API FRequest_CreateEntityDirectoryFile : public FRequest
{
	FRequest_CreateEntityDirectoryFile();
	virtual ~FRequest_CreateEntityDirectoryFile() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	FName GetSimplifiedPathWithVerb() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
	ERHAPI_FileType FileType;
	FString FileName;
	ERHAPI_EntityType EntityType;
	FString EntityId;
	FHttpFileInput File;
};

struct RALLYHEREAPI_API FResponse_CreateEntityDirectoryFile : public FResponse
{
	FResponse_CreateEntityDirectoryFile(FRequestMetadata InRequestMetadata);
	virtual ~FResponse_CreateEntityDirectoryFile() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

	


	// Manual Response Helpers
	/* Response 204
	Successful Response
	*/

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_CreateEntityDirectoryFile
{
	typedef FRequest_CreateEntityDirectoryFile Request;
	typedef FResponse_CreateEntityDirectoryFile Response;
	typedef FDelegate_CreateEntityDirectoryFile Delegate;
	typedef FRemoteFileAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI->CreateEntityDirectoryFile(InRequest, InDelegate, Priority); }
};

/* Delete Entity Directory
*/
struct RALLYHEREAPI_API FRequest_DeleteEntityDirectory : public FRequest
{
	FRequest_DeleteEntityDirectory();
	virtual ~FRequest_DeleteEntityDirectory() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	FName GetSimplifiedPathWithVerb() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
	ERHAPI_FileType FileType;
	ERHAPI_EntityType EntityType;
};

struct RALLYHEREAPI_API FResponse_DeleteEntityDirectory : public FResponse
{
	FResponse_DeleteEntityDirectory(FRequestMetadata InRequestMetadata);
	virtual ~FResponse_DeleteEntityDirectory() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

	FRHAPI_JsonValue Content;


	// Manual Response Helpers
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_JsonValue& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_DeleteEntityDirectory
{
	typedef FRequest_DeleteEntityDirectory Request;
	typedef FResponse_DeleteEntityDirectory Response;
	typedef FDelegate_DeleteEntityDirectory Delegate;
	typedef FRemoteFileAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI->DeleteEntityDirectory(InRequest, InDelegate, Priority); }
};

/* Delete Entity Directory File
*/
struct RALLYHEREAPI_API FRequest_DeleteEntityDirectoryFile : public FRequest
{
	FRequest_DeleteEntityDirectoryFile();
	virtual ~FRequest_DeleteEntityDirectoryFile() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	FName GetSimplifiedPathWithVerb() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
	ERHAPI_EntityType EntityType;
	FString EntityId;
	FString FileName;
	ERHAPI_FileType FileType;
};

struct RALLYHEREAPI_API FResponse_DeleteEntityDirectoryFile : public FResponse
{
	FResponse_DeleteEntityDirectoryFile(FRequestMetadata InRequestMetadata);
	virtual ~FResponse_DeleteEntityDirectoryFile() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

	


	// Manual Response Helpers
	/* Response 204
	Successful Response
	*/

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_DeleteEntityDirectoryFile
{
	typedef FRequest_DeleteEntityDirectoryFile Request;
	typedef FResponse_DeleteEntityDirectoryFile Response;
	typedef FDelegate_DeleteEntityDirectoryFile Delegate;
	typedef FRemoteFileAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI->DeleteEntityDirectoryFile(InRequest, InDelegate, Priority); }
};

/* Download Entity Directory File
*/
struct RALLYHEREAPI_API FRequest_DownloadEntityDirectoryFile : public FRequest
{
	FRequest_DownloadEntityDirectoryFile();
	virtual ~FRequest_DownloadEntityDirectoryFile() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	FName GetSimplifiedPathWithVerb() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
	ERHAPI_EntityType EntityType;
	FString EntityId;
	FString FileName;
	ERHAPI_FileType FileType;
};

struct RALLYHEREAPI_API FResponse_DownloadEntityDirectoryFile : public FResponse
{
	FResponse_DownloadEntityDirectoryFile(FRequestMetadata InRequestMetadata);
	virtual ~FResponse_DownloadEntityDirectoryFile() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

	FString Content;


	// Manual Response Helpers
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FString& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	 Error Codes: - `file_not_found` - File not found. 
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_DownloadEntityDirectoryFile
{
	typedef FRequest_DownloadEntityDirectoryFile Request;
	typedef FResponse_DownloadEntityDirectoryFile Response;
	typedef FDelegate_DownloadEntityDirectoryFile Delegate;
	typedef FRemoteFileAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI->DownloadEntityDirectoryFile(InRequest, InDelegate, Priority); }
};

/* Get Entity Directory Information
 *
 * Get information about a entity types storage container. Very resource intensive, use sparingly.
*/
struct RALLYHEREAPI_API FRequest_GetEntityDirectoryInformation : public FRequest
{
	FRequest_GetEntityDirectoryInformation();
	virtual ~FRequest_GetEntityDirectoryInformation() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	FName GetSimplifiedPathWithVerb() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
	ERHAPI_FileType FileType;
	ERHAPI_EntityType EntityType;
};

struct RALLYHEREAPI_API FResponse_GetEntityDirectoryInformation : public FResponse
{
	FResponse_GetEntityDirectoryInformation(FRequestMetadata InRequestMetadata);
	virtual ~FResponse_GetEntityDirectoryInformation() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

	FRHAPI_StorageInformation Content;


	// Manual Response Helpers
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_StorageInformation& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_GetEntityDirectoryInformation
{
	typedef FRequest_GetEntityDirectoryInformation Request;
	typedef FResponse_GetEntityDirectoryInformation Response;
	typedef FDelegate_GetEntityDirectoryInformation Delegate;
	typedef FRemoteFileAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI->GetEntityDirectoryInformation(InRequest, InDelegate, Priority); }
};

/* List Entity Directory Files
*/
struct RALLYHEREAPI_API FRequest_ListEntityDirectoryFiles : public FRequest
{
	FRequest_ListEntityDirectoryFiles();
	virtual ~FRequest_ListEntityDirectoryFiles() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	FName GetSimplifiedPathWithVerb() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
	ERHAPI_EntityType EntityType;
	FString EntityId;
	ERHAPI_FileType FileType;
};

struct RALLYHEREAPI_API FResponse_ListEntityDirectoryFiles : public FResponse
{
	FResponse_ListEntityDirectoryFiles(FRequestMetadata InRequestMetadata);
	virtual ~FResponse_ListEntityDirectoryFiles() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

	FRHAPI_FileListResponse Content;


	// Manual Response Helpers
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_FileListResponse& OutContent) const;

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_ListEntityDirectoryFiles
{
	typedef FRequest_ListEntityDirectoryFiles Request;
	typedef FResponse_ListEntityDirectoryFiles Response;
	typedef FDelegate_ListEntityDirectoryFiles Delegate;
	typedef FRemoteFileAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI->ListEntityDirectoryFiles(InRequest, InDelegate, Priority); }
};


}
