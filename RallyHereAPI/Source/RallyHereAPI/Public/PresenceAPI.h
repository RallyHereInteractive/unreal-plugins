// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereAPIAuthContext.h"
#include "RallyHereAPIHelpers.h"
#include "ClientVisibleSettings.h"
#include "HTTPValidationError.h"
#include "HzApiErrorModel.h"
#include "PlayerPresence.h"
#include "PlayerPresenceUpdateSelf.h"

namespace RallyHereAPI
{
using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

// forward declaration
class FPresenceAPI;

/**
 * @brief Get Player Presence Public By Id
 * Get the player's presence information. The status will be modified based on the following rules:
 * - A status of invisible will be reported as offline
 * - The status will become offline if older than the configured age
*/
struct RALLYHEREAPI_API FRequest_GetPlayerPresencePublicById : public FRequest
{
	FRequest_GetPlayerPresencePublicById();
	virtual ~FRequest_GetPlayerPresencePublicById() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	/* A valid integer identifying a player. Rejects UUID player identification. */
	int32 PlayerId = 0;
	TOptional<bool> UseCache;
	/* If you provide the ETag that matches the current ETag for this resource, a 304 response will be return - indicating that the resource has not changed. */
	TOptional<FString> IfNoneMatch;
};

/** The response type for FRequest_GetPlayerPresencePublicById */
struct RALLYHEREAPI_API FResponse_GetPlayerPresencePublicById : public FResponseAccessorTemplate<FRHAPI_PlayerPresence, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_PlayerPresence, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetPlayerPresencePublicById(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetPlayerPresencePublicById() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PlayerPresence Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PlayerPresence& OutContent) const { return TryGetContent<FRHAPI_PlayerPresence>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PlayerPresence>& OutContent) const { return TryGetContent<FRHAPI_PlayerPresence>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PlayerPresence* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PlayerPresence>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PlayerPresence> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PlayerPresence>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PlayerPresence& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetPlayerPresencePublicById */
DECLARE_DELEGATE_OneParam(FDelegate_GetPlayerPresencePublicById, const FResponse_GetPlayerPresencePublicById&);

/** @brief A helper metadata object for GetPlayerPresencePublicById that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetPlayerPresencePublicById
{
	/** The request type */
	typedef FRequest_GetPlayerPresencePublicById Request;
	/** The response type */
	typedef FResponse_GetPlayerPresencePublicById Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetPlayerPresencePublicById Delegate;
	/** The API object that supports this API call */
	typedef FPresenceAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Player Presence Public By Uuid
 * Get the player's presence information. The status will be modified based on the following rules:
 * - A status of invisible will be reported as offline
 * - The status will become offline if older than the configured age
*/
struct RALLYHEREAPI_API FRequest_GetPlayerPresencePublicByUuid : public FRequest
{
	FRequest_GetPlayerPresencePublicByUuid();
	virtual ~FRequest_GetPlayerPresencePublicByUuid() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	/* A valid UUID identifying a player. Rejects integer player identification. */
	FGuid PlayerUuid;
	TOptional<bool> UseCache;
	/* If you provide the ETag that matches the current ETag for this resource, a 304 response will be return - indicating that the resource has not changed. */
	TOptional<FString> IfNoneMatch;
};

/** The response type for FRequest_GetPlayerPresencePublicByUuid */
struct RALLYHEREAPI_API FResponse_GetPlayerPresencePublicByUuid : public FResponseAccessorTemplate<FRHAPI_PlayerPresence, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_PlayerPresence, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetPlayerPresencePublicByUuid(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetPlayerPresencePublicByUuid() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PlayerPresence Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PlayerPresence& OutContent) const { return TryGetContent<FRHAPI_PlayerPresence>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PlayerPresence>& OutContent) const { return TryGetContent<FRHAPI_PlayerPresence>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PlayerPresence* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PlayerPresence>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PlayerPresence> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PlayerPresence>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PlayerPresence& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 404
	Not Found
	*/
	bool TryGetContentFor404(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetPlayerPresencePublicByUuid */
DECLARE_DELEGATE_OneParam(FDelegate_GetPlayerPresencePublicByUuid, const FResponse_GetPlayerPresencePublicByUuid&);

/** @brief A helper metadata object for GetPlayerPresencePublicByUuid that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetPlayerPresencePublicByUuid
{
	/** The request type */
	typedef FRequest_GetPlayerPresencePublicByUuid Request;
	/** The response type */
	typedef FResponse_GetPlayerPresencePublicByUuid Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetPlayerPresencePublicByUuid Delegate;
	/** The API object that supports this API call */
	typedef FPresenceAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Player Presence Self
 * Get the player's presence information. The status reflects the true value and is not modified before it
 * is returned.
*/
struct RALLYHEREAPI_API FRequest_GetPlayerPresenceSelf : public FRequest
{
	FRequest_GetPlayerPresenceSelf();
	virtual ~FRequest_GetPlayerPresenceSelf() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	TOptional<bool> UseCache;
};

/** The response type for FRequest_GetPlayerPresenceSelf */
struct RALLYHEREAPI_API FResponse_GetPlayerPresenceSelf : public FResponseAccessorTemplate<FRHAPI_PlayerPresence, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_PlayerPresence, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetPlayerPresenceSelf(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetPlayerPresenceSelf() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_PlayerPresence Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_PlayerPresence& OutContent) const { return TryGetContent<FRHAPI_PlayerPresence>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_PlayerPresence>& OutContent) const { return TryGetContent<FRHAPI_PlayerPresence>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_PlayerPresence* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_PlayerPresence>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_PlayerPresence> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_PlayerPresence>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_PlayerPresence& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetPlayerPresenceSelf */
DECLARE_DELEGATE_OneParam(FDelegate_GetPlayerPresenceSelf, const FResponse_GetPlayerPresenceSelf&);

/** @brief A helper metadata object for GetPlayerPresenceSelf that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetPlayerPresenceSelf
{
	/** The request type */
	typedef FRequest_GetPlayerPresenceSelf Request;
	/** The response type */
	typedef FResponse_GetPlayerPresenceSelf Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetPlayerPresenceSelf Delegate;
	/** The API object that supports this API call */
	typedef FPresenceAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Presence Settings
 * Settings which help tell the client how it should interact with this service.
*/
struct RALLYHEREAPI_API FRequest_GetPresenceSettings : public FRequest
{
	FRequest_GetPresenceSettings();
	virtual ~FRequest_GetPresenceSettings() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;

};

/** The response type for FRequest_GetPresenceSettings */
struct RALLYHEREAPI_API FResponse_GetPresenceSettings : public FResponseAccessorTemplate<FRHAPI_ClientVisibleSettings>
{
	typedef FResponseAccessorTemplate<FRHAPI_ClientVisibleSettings> Super;

	FResponse_GetPresenceSettings(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetPresenceSettings() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_ClientVisibleSettings Content;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_ClientVisibleSettings& OutContent) const { return TryGetContent<FRHAPI_ClientVisibleSettings>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_ClientVisibleSettings>& OutContent) const { return TryGetContent<FRHAPI_ClientVisibleSettings>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_ClientVisibleSettings* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_ClientVisibleSettings>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_ClientVisibleSettings> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_ClientVisibleSettings>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_ClientVisibleSettings& OutContent) const;

};

/** The delegate class for FRequest_GetPresenceSettings */
DECLARE_DELEGATE_OneParam(FDelegate_GetPresenceSettings, const FResponse_GetPresenceSettings&);

/** @brief A helper metadata object for GetPresenceSettings that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetPresenceSettings
{
	/** The request type */
	typedef FRequest_GetPresenceSettings Request;
	/** The response type */
	typedef FResponse_GetPresenceSettings Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetPresenceSettings Delegate;
	/** The API object that supports this API call */
	typedef FPresenceAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Update Player Presence Self
 * Update the player's online status and other presence data.
 * If the player reports their online status as online or away, their "last_seen" presence info is updated.
 * Player clients are expected to send requests to this endpoint on an interval of self_ping_interval_seconds.
 * Otherwise they will be considered offline.
*/
struct RALLYHEREAPI_API FRequest_UpdatePlayerPresenceSelf : public FRequest
{
	FRequest_UpdatePlayerPresenceSelf();
	virtual ~FRequest_UpdatePlayerPresenceSelf() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FRHAPI_PlayerPresenceUpdateSelf PlayerPresenceUpdateSelf;
	TOptional<bool> UseCache;
};

/** The response type for FRequest_UpdatePlayerPresenceSelf */
struct RALLYHEREAPI_API FResponse_UpdatePlayerPresenceSelf : public FResponseAccessorTemplate<FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_UpdatePlayerPresenceSelf(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_UpdatePlayerPresenceSelf() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT

	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

	/* Response 500
	Internal Server Error
	*/
	bool TryGetContentFor500(FRHAPI_HzApiErrorModel& OutContent) const;

};

/** The delegate class for FRequest_UpdatePlayerPresenceSelf */
DECLARE_DELEGATE_OneParam(FDelegate_UpdatePlayerPresenceSelf, const FResponse_UpdatePlayerPresenceSelf&);

/** @brief A helper metadata object for UpdatePlayerPresenceSelf that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_UpdatePlayerPresenceSelf
{
	/** The request type */
	typedef FRequest_UpdatePlayerPresenceSelf Request;
	/** The response type */
	typedef FResponse_UpdatePlayerPresenceSelf Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_UpdatePlayerPresenceSelf Delegate;
	/** The API object that supports this API call */
	typedef FPresenceAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};


/** The API class itself, which will handle calls to */
class RALLYHEREAPI_API FPresenceAPI : public FAPI
{
public:
	FPresenceAPI();
	virtual ~FPresenceAPI();

	FHttpRequestPtr GetPlayerPresencePublicById(const FRequest_GetPlayerPresencePublicById& Request, const FDelegate_GetPlayerPresencePublicById& Delegate = FDelegate_GetPlayerPresencePublicById(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetPlayerPresencePublicByIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlayerPresencePublicById Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetPlayerPresencePublicByUuid(const FRequest_GetPlayerPresencePublicByUuid& Request, const FDelegate_GetPlayerPresencePublicByUuid& Delegate = FDelegate_GetPlayerPresencePublicByUuid(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetPlayerPresencePublicByUuidResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlayerPresencePublicByUuid Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetPlayerPresenceSelf(const FRequest_GetPlayerPresenceSelf& Request, const FDelegate_GetPlayerPresenceSelf& Delegate = FDelegate_GetPlayerPresenceSelf(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetPlayerPresenceSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPlayerPresenceSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr GetPresenceSettings(const FRequest_GetPresenceSettings& Request, const FDelegate_GetPresenceSettings& Delegate = FDelegate_GetPresenceSettings(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnGetPresenceSettingsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPresenceSettings Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	FHttpRequestPtr UpdatePlayerPresenceSelf(const FRequest_UpdatePlayerPresenceSelf& Request, const FDelegate_UpdatePlayerPresenceSelf& Delegate = FDelegate_UpdatePlayerPresenceSelf(), int32 Priority = DefaultRallyHereAPIPriority);
	void OnUpdatePlayerPresenceSelfResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdatePlayerPresenceSelf Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};



}
