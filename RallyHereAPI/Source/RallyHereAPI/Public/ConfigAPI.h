// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereAPIAuthContext.h"
#include "RallyHereAPIHelpers.h"
#include "AppSetting.h"
#include "HTTPValidationError.h"
#include "HzApiErrorModel.h"
#include "KVsResponse.h"

namespace RallyHereAPI
{
using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

struct FRequest_GetAppSettingsAll;
struct FResponse_GetAppSettingsAll;
struct FRequest_GetAppSettingsClient;
struct FResponse_GetAppSettingsClient;
struct FRequest_GetAppSettingsServer;
struct FResponse_GetAppSettingsServer;

DECLARE_DELEGATE_OneParam(FDelegate_GetAppSettingsAll, const FResponse_GetAppSettingsAll&);
DECLARE_DELEGATE_OneParam(FDelegate_GetAppSettingsClient, const FResponse_GetAppSettingsClient&);
DECLARE_DELEGATE_OneParam(FDelegate_GetAppSettingsServer, const FResponse_GetAppSettingsServer&);

class RALLYHEREAPI_API FConfigAPI : public FAPI
{
public:
	FConfigAPI();
	virtual ~FConfigAPI();

	FHttpRequestPtr GetAppSettingsAll(const FRequest_GetAppSettingsAll& Request, const FDelegate_GetAppSettingsAll& Delegate = FDelegate_GetAppSettingsAll(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetAppSettingsClient(const FRequest_GetAppSettingsClient& Request, const FDelegate_GetAppSettingsClient& Delegate = FDelegate_GetAppSettingsClient(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetAppSettingsServer(const FRequest_GetAppSettingsServer& Request, const FDelegate_GetAppSettingsServer& Delegate = FDelegate_GetAppSettingsServer(), int32 Priority = DefaultRallyHereAPIPriority);

private:
	void OnGetAppSettingsAllResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAppSettingsAll Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetAppSettingsClientResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAppSettingsClient Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetAppSettingsServerResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAppSettingsServer Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};

/* Get App Settings All
 *
 * If authenticated and with correct permissions, will return all KVs. Otherwise it will only return non secret KVs.
*/
struct RALLYHEREAPI_API FRequest_GetAppSettingsAll : public FRequest
{
	FRequest_GetAppSettingsAll();
	virtual ~FRequest_GetAppSettingsAll() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
	/* If specified, will only return the KVs with the specified keys */
	TOptional<TArray<FString>> KeysToInclude;
	/* If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed. */
	TOptional<FString> IfNoneMatch;
};

struct RALLYHEREAPI_API FResponse_GetAppSettingsAll : public FResponse
{
	FResponse_GetAppSettingsAll(FRequestMetadata InRequestMetadata);
	virtual ~FResponse_GetAppSettingsAll() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	bool ParseHeaders() override;
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

	FRHAPI_KVsResponse Content;
	// Headers
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> ETag;

	// Manual Response Helpers
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_KVsResponse& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 304
	Content still has the same etag and has not changed
	*/

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_GetAppSettingsAll
{
	typedef FRequest_GetAppSettingsAll Request;
	typedef FResponse_GetAppSettingsAll Response;
	typedef FDelegate_GetAppSettingsAll Delegate;
	typedef FConfigAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.GetAppSettingsAll(InRequest, InDelegate, Priority); }
};

/* Get App Settings Client
 *
 * Returns app settings that are configured to be available to the client.
*/
struct RALLYHEREAPI_API FRequest_GetAppSettingsClient : public FRequest
{
	FRequest_GetAppSettingsClient();
	virtual ~FRequest_GetAppSettingsClient() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;

	/* If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed. */
	TOptional<FString> IfNoneMatch;
};

struct RALLYHEREAPI_API FResponse_GetAppSettingsClient : public FResponse
{
	FResponse_GetAppSettingsClient(FRequestMetadata InRequestMetadata);
	virtual ~FResponse_GetAppSettingsClient() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	bool ParseHeaders() override;
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

	TArray<FRHAPI_AppSetting> Content;
	// Headers
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> ETag;

	// Manual Response Helpers
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(TArray<FRHAPI_AppSetting>& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 304
	Content still has the same etag and has not changed
	*/

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_GetAppSettingsClient
{
	typedef FRequest_GetAppSettingsClient Request;
	typedef FResponse_GetAppSettingsClient Response;
	typedef FDelegate_GetAppSettingsClient Delegate;
	typedef FConfigAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.GetAppSettingsClient(InRequest, InDelegate, Priority); }
};

/* Get App Settings Server
 *
 * Returns app settings that are configured to be available to the server. Requires permission: config:app_settings:server:read
*/
struct RALLYHEREAPI_API FRequest_GetAppSettingsServer : public FRequest
{
	FRequest_GetAppSettingsServer();
	virtual ~FRequest_GetAppSettingsServer() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
	/* If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed. */
	TOptional<FString> IfNoneMatch;
};

struct RALLYHEREAPI_API FResponse_GetAppSettingsServer : public FResponse
{
	FResponse_GetAppSettingsServer(FRequestMetadata InRequestMetadata);
	virtual ~FResponse_GetAppSettingsServer() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	bool ParseHeaders() override;
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

	TArray<FRHAPI_AppSetting> Content;
	// Headers
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> ETag;

	// Manual Response Helpers
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(TArray<FRHAPI_AppSetting>& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 304
	Content still has the same etag and has not changed
	*/

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_GetAppSettingsServer
{
	typedef FRequest_GetAppSettingsServer Request;
	typedef FResponse_GetAppSettingsServer Response;
	typedef FDelegate_GetAppSettingsServer Delegate;
	typedef FConfigAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI.GetAppSettingsServer(InRequest, InDelegate, Priority); }
};


}
