// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereAPIAuthContext.h"
#include "RallyHereAPIHelpers.h"
#include "HTTPValidationError.h"
#include "HzApiErrorModel.h"
#include "KVV1.h"
#include "KVsResponseV1.h"
#include "KVsResponseV2.h"

namespace RallyHereAPI
{
using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

// forward declaration
class FConfigAPI;

/**
 * @brief Get App Settings All
 * ***DEPRECATED*** Please use /v2/kv instead.  
 * 
 * If authenticated and with correct permissions, will return all KVs. Otherwise it will only return non secret KVs.
*/
struct RALLYHEREAPI_API FRequest_GetAppSettingsAll : public FRequest
{
	FRequest_GetAppSettingsAll();
	virtual ~FRequest_GetAppSettingsAll() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	/* If specified, will only return the KVs with the specified keys */
	TOptional<TArray<FString>> KeysToInclude;
	/* If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed. */
	TOptional<FString> IfNoneMatch;
	/* If you provide the ETag that matches the current ETag for this content, will return a 412 response - indicating that the content has changed. */
	TOptional<FString> IfMatch;
};

/** The response type for FRequest_GetAppSettingsAll */
struct RALLYHEREAPI_API FResponse_GetAppSettingsAll : public FResponseAccessorTemplate<FRHAPI_KVsResponseV1, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_KVsResponseV1, FRHAPI_HTTPValidationError> Super;

	FResponse_GetAppSettingsAll(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetAppSettingsAll() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_KVsResponseV1 Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_KVsResponseV1& OutContent) const { return TryGetContent<FRHAPI_KVsResponseV1>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_KVsResponseV1>& OutContent) const { return TryGetContent<FRHAPI_KVsResponseV1>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_KVsResponseV1* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_KVsResponseV1>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_KVsResponseV1> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_KVsResponseV1>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_KVsResponseV1& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 304
	Content still has the same etag and has not changed
	*/

	/* Response 412
	Content has changed since the ETag was provided
	*/

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetAppSettingsAll */
DECLARE_DELEGATE_OneParam(FDelegate_GetAppSettingsAll, const FResponse_GetAppSettingsAll&);

/** @brief A helper metadata object for GetAppSettingsAll that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetAppSettingsAll
{
	/** The request type */
	typedef FRequest_GetAppSettingsAll Request;
	/** The response type */
	typedef FResponse_GetAppSettingsAll Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetAppSettingsAll Delegate;
	/** The API object that supports this API call */
	typedef FConfigAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get App Settings Client
 * ***DEPRECATED*** Please use /v2/kv instead.  
 * 
 * Returns app settings that are configured to be available to the client.
*/
struct RALLYHEREAPI_API FRequest_GetAppSettingsClient : public FRequest
{
	FRequest_GetAppSettingsClient();
	virtual ~FRequest_GetAppSettingsClient() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;

	/* If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed. */
	TOptional<FString> IfNoneMatch;
	/* If you provide the ETag that matches the current ETag for this content, will return a 412 response - indicating that the content has changed. */
	TOptional<FString> IfMatch;
};

/** The response type for FRequest_GetAppSettingsClient */
struct RALLYHEREAPI_API FResponse_GetAppSettingsClient : public FResponseAccessorTemplate<TArray<FRHAPI_KVV1>, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<TArray<FRHAPI_KVV1>, FRHAPI_HTTPValidationError> Super;

	FResponse_GetAppSettingsClient(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetAppSettingsClient() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	TArray<FRHAPI_KVV1> Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TArray<FRHAPI_KVV1>& OutContent) const { return TryGetContent<TArray<FRHAPI_KVV1>>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<TArray<FRHAPI_KVV1>>& OutContent) const { return TryGetContent<TArray<FRHAPI_KVV1>>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const TArray<FRHAPI_KVV1>* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<TArray<FRHAPI_KVV1>>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<TArray<FRHAPI_KVV1>> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<TArray<FRHAPI_KVV1>>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(TArray<FRHAPI_KVV1>& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 304
	Content still has the same etag and has not changed
	*/

	/* Response 412
	Content has changed since the ETag was provided
	*/

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetAppSettingsClient */
DECLARE_DELEGATE_OneParam(FDelegate_GetAppSettingsClient, const FResponse_GetAppSettingsClient&);

/** @brief A helper metadata object for GetAppSettingsClient that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetAppSettingsClient
{
	/** The request type */
	typedef FRequest_GetAppSettingsClient Request;
	/** The response type */
	typedef FResponse_GetAppSettingsClient Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetAppSettingsClient Delegate;
	/** The API object that supports this API call */
	typedef FConfigAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get App Settings Server
 * ***DEPRECATED*** Please use /v2/kv instead.  
 * 
 * Returns app settings that are configured to be available to the server. 
 * 
 * Required Permissions: : `config:app_settings:server:read`
*/
struct RALLYHEREAPI_API FRequest_GetAppSettingsServer : public FRequest
{
	FRequest_GetAppSettingsServer();
	virtual ~FRequest_GetAppSettingsServer() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	/* If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed. */
	TOptional<FString> IfNoneMatch;
	/* If you provide the ETag that matches the current ETag for this content, will return a 412 response - indicating that the content has changed. */
	TOptional<FString> IfMatch;
};

/** The response type for FRequest_GetAppSettingsServer */
struct RALLYHEREAPI_API FResponse_GetAppSettingsServer : public FResponseAccessorTemplate<TArray<FRHAPI_KVV1>, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<TArray<FRHAPI_KVV1>, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> Super;

	FResponse_GetAppSettingsServer(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetAppSettingsServer() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	TArray<FRHAPI_KVV1> Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TArray<FRHAPI_KVV1>& OutContent) const { return TryGetContent<TArray<FRHAPI_KVV1>>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<TArray<FRHAPI_KVV1>>& OutContent) const { return TryGetContent<TArray<FRHAPI_KVV1>>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const TArray<FRHAPI_KVV1>* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<TArray<FRHAPI_KVV1>>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<TArray<FRHAPI_KVV1>> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<TArray<FRHAPI_KVV1>>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(TArray<FRHAPI_KVV1>& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 304
	Content still has the same etag and has not changed
	*/

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_invalid_type` - Invalid Authorization - Invalid Token Type - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 412
	Content has changed since the ETag was provided
	*/

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetAppSettingsServer */
DECLARE_DELEGATE_OneParam(FDelegate_GetAppSettingsServer, const FResponse_GetAppSettingsServer&);

/** @brief A helper metadata object for GetAppSettingsServer that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetAppSettingsServer
{
	/** The request type */
	typedef FRequest_GetAppSettingsServer Request;
	/** The response type */
	typedef FResponse_GetAppSettingsServer Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetAppSettingsServer Delegate;
	/** The API object that supports this API call */
	typedef FConfigAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Kvs V2
 * Get All KVs and Secret KVs.  Regular KVs are always returned.
 * 
 * Required permissions for secret KVs: : `config:secret_kvs:read`
*/
struct RALLYHEREAPI_API FRequest_GetKvsV2 : public FRequest
{
	FRequest_GetKvsV2();
	virtual ~FRequest_GetKvsV2() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	/* If specified, will only return the KVs with the specified keys */
	TOptional<TArray<FString>> KeysToInclude;
	/* If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed. */
	TOptional<FString> IfNoneMatch;
	/* If you provide the ETag that matches the current ETag for this content, will return a 412 response - indicating that the content has changed. */
	TOptional<FString> IfMatch;
};

/** The response type for FRequest_GetKvsV2 */
struct RALLYHEREAPI_API FResponse_GetKvsV2 : public FResponseAccessorTemplate<FRHAPI_KVsResponseV2, FRHAPI_HTTPValidationError>
{
	typedef FResponseAccessorTemplate<FRHAPI_KVsResponseV2, FRHAPI_HTTPValidationError> Super;

	FResponse_GetKvsV2(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetKvsV2() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_KVsResponseV2 Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(FRHAPI_KVsResponseV2& OutContent) const { return TryGetContent<FRHAPI_KVsResponseV2>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	bool TryGetDefaultContent(TOptional<FRHAPI_KVsResponseV2>& OutContent) const { return TryGetContent<FRHAPI_KVsResponseV2>(OutContent); }
	/** @brief Attempt to retrieve the content in the default response */
	const FRHAPI_KVsResponseV2* TryGetDefaultContentAsPointer() const { return TryGetContentAsPointer<FRHAPI_KVsResponseV2>(); }
	/** @brief Attempt to retrieve the content in the default response */
	TOptional<FRHAPI_KVsResponseV2> TryGetDefaultContentAsOptional() const { return TryGetContentAsOptional<FRHAPI_KVsResponseV2>(); }
	
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(FString& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	bool TryGetDefaultHeader_ETag(TOptional<FString>& OutValue) const { return TryGetHeader(TEXT("ETag"), OutValue); }
	/** @brief Attempt to retrieve a specific header of the default response */
	const FString* TryGetDefaultHeaderAsPointer_ETag() const { return TryGetHeaderAsPointer(TEXT("ETag")); }
	/** @brief Attempt to retrieve a specific header of the default response */
	TOptional<FString> TryGetDefaultHeaderAsOptional_ETag() const { return TryGetHeaderAsOptional(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_KVsResponseV2& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 304
	Content still has the same etag and has not changed
	*/

	/* Response 412
	Content has changed since the ETag was provided
	*/

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetKvsV2 */
DECLARE_DELEGATE_OneParam(FDelegate_GetKvsV2, const FResponse_GetKvsV2&);

/** @brief A helper metadata object for GetKvsV2 that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetKvsV2
{
	/** The request type */
	typedef FRequest_GetKvsV2 Request;
	/** The response type */
	typedef FResponse_GetKvsV2 Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetKvsV2 Delegate;
	/** The API object that supports this API call */
	typedef FConfigAPI API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};


/** The API class itself, which will handle calls to */
class RALLYHEREAPI_API FConfigAPI : public FAPI
{
public:
	FConfigAPI();
	virtual ~FConfigAPI();

	FHttpRequestPtr GetAppSettingsAll(const FRequest_GetAppSettingsAll& Request, const FDelegate_GetAppSettingsAll& Delegate = FDelegate_GetAppSettingsAll(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetAppSettingsClient(const FRequest_GetAppSettingsClient& Request, const FDelegate_GetAppSettingsClient& Delegate = FDelegate_GetAppSettingsClient(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetAppSettingsServer(const FRequest_GetAppSettingsServer& Request, const FDelegate_GetAppSettingsServer& Delegate = FDelegate_GetAppSettingsServer(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetKvsV2(const FRequest_GetKvsV2& Request, const FDelegate_GetKvsV2& Delegate = FDelegate_GetKvsV2(), int32 Priority = DefaultRallyHereAPIPriority);

private:
	void OnGetAppSettingsAllResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAppSettingsAll Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetAppSettingsClientResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAppSettingsClient Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetAppSettingsServerResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAppSettingsServer Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetKvsV2Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetKvsV2 Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};



}
