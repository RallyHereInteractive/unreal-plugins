// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereAPIAuthContext.h"
#include "RallyHereAPIHelpers.h"
#include "HTTPValidationError.h"
#include "HzApiErrorModel.h"
#include "KVV1.h"
#include "KVsResponseV1.h"
#include "KVsResponseV2.h"

namespace RallyHereAPI
{
using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

struct FRequest_GetAppSettingsAll;
struct FResponse_GetAppSettingsAll;
struct FRequest_GetAppSettingsClient;
struct FResponse_GetAppSettingsClient;
struct FRequest_GetAppSettingsServer;
struct FResponse_GetAppSettingsServer;
struct FRequest_GetKvsV2;
struct FResponse_GetKvsV2;

DECLARE_DELEGATE_OneParam(FDelegate_GetAppSettingsAll, const FResponse_GetAppSettingsAll&);
DECLARE_DELEGATE_OneParam(FDelegate_GetAppSettingsClient, const FResponse_GetAppSettingsClient&);
DECLARE_DELEGATE_OneParam(FDelegate_GetAppSettingsServer, const FResponse_GetAppSettingsServer&);
DECLARE_DELEGATE_OneParam(FDelegate_GetKvsV2, const FResponse_GetKvsV2&);

class RALLYHEREAPI_API FConfigAPI : public FAPI
{
public:
	FConfigAPI();
	virtual ~FConfigAPI();

	FHttpRequestPtr GetAppSettingsAll(const FRequest_GetAppSettingsAll& Request, const FDelegate_GetAppSettingsAll& Delegate = FDelegate_GetAppSettingsAll(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetAppSettingsClient(const FRequest_GetAppSettingsClient& Request, const FDelegate_GetAppSettingsClient& Delegate = FDelegate_GetAppSettingsClient(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetAppSettingsServer(const FRequest_GetAppSettingsServer& Request, const FDelegate_GetAppSettingsServer& Delegate = FDelegate_GetAppSettingsServer(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetKvsV2(const FRequest_GetKvsV2& Request, const FDelegate_GetKvsV2& Delegate = FDelegate_GetKvsV2(), int32 Priority = DefaultRallyHereAPIPriority);

private:
	void OnGetAppSettingsAllResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAppSettingsAll Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetAppSettingsClientResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAppSettingsClient Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetAppSettingsServerResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAppSettingsServer Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetKvsV2Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetKvsV2 Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};

/* Get App Settings All
 *
 * ***DEPRECATED*** Please use /v2/kv instead.  
 * 
 * If authenticated and with correct permissions, will return all KVs. Otherwise it will only return non secret KVs.
*/
struct RALLYHEREAPI_API FRequest_GetAppSettingsAll : public FRequest
{
	FRequest_GetAppSettingsAll();
	virtual ~FRequest_GetAppSettingsAll() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	FName GetSimplifiedPathWithVerb() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
	/* If specified, will only return the KVs with the specified keys */
	TOptional<TArray<FString>> KeysToInclude;
	/* If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed. */
	TOptional<FString> IfNoneMatch;
	/* If you provide the ETag that matches the current ETag for this content, will return a 412 response - indicating that the content has changed. */
	TOptional<FString> IfMatch;
};

struct RALLYHEREAPI_API FResponse_GetAppSettingsAll : public FResponse
{
	FResponse_GetAppSettingsAll(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetAppSettingsAll() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	bool ParseHeaders() override;
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

	typedef TVariant<FRHAPI_KVsResponseV1, FRHAPI_HTTPValidationError> ContentVariantType;
protected:
	ContentVariantType ParsedContent;
public:
	template<typename T>
	bool TryGetContent(T& OutResponse)const { const T* OutResponsePtr = ParsedContent.TryGet<T>(); if (OutResponsePtr != nullptr) OutResponse = *OutResponsePtr; return OutResponsePtr != nullptr; }
	template<typename T>
	const T* TryGetContent() const { return ParsedContent.TryGet<T>(); }

	#if ALLOW_LEGACY_RESPONSE_CONTENT
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_KVsResponseV1 Content;
	#endif
	
	
	// Headers
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> ETag;

	// Manual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_KVsResponseV1& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 304
	Content still has the same etag and has not changed
	*/

	/* Response 412
	Content has changed since the ETag was provided
	*/

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_GetAppSettingsAll
{
	typedef FRequest_GetAppSettingsAll Request;
	typedef FResponse_GetAppSettingsAll Response;
	typedef FDelegate_GetAppSettingsAll Delegate;
	typedef FConfigAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI->GetAppSettingsAll(InRequest, InDelegate, Priority); }
};

/* Get App Settings Client
 *
 * ***DEPRECATED*** Please use /v2/kv instead.  
 * 
 * Returns app settings that are configured to be available to the client.
*/
struct RALLYHEREAPI_API FRequest_GetAppSettingsClient : public FRequest
{
	FRequest_GetAppSettingsClient();
	virtual ~FRequest_GetAppSettingsClient() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	FName GetSimplifiedPathWithVerb() const override;

	/* If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed. */
	TOptional<FString> IfNoneMatch;
	/* If you provide the ETag that matches the current ETag for this content, will return a 412 response - indicating that the content has changed. */
	TOptional<FString> IfMatch;
};

struct RALLYHEREAPI_API FResponse_GetAppSettingsClient : public FResponse
{
	FResponse_GetAppSettingsClient(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetAppSettingsClient() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	bool ParseHeaders() override;
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

	typedef TVariant<TArray<FRHAPI_KVV1>, FRHAPI_HTTPValidationError> ContentVariantType;
protected:
	ContentVariantType ParsedContent;
public:
	template<typename T>
	bool TryGetContent(T& OutResponse)const { const T* OutResponsePtr = ParsedContent.TryGet<T>(); if (OutResponsePtr != nullptr) OutResponse = *OutResponsePtr; return OutResponsePtr != nullptr; }
	template<typename T>
	const T* TryGetContent() const { return ParsedContent.TryGet<T>(); }

	#if ALLOW_LEGACY_RESPONSE_CONTENT
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	TArray<FRHAPI_KVV1> Content;
	#endif
	
	
	// Headers
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> ETag;

	// Manual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(TArray<FRHAPI_KVV1>& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 304
	Content still has the same etag and has not changed
	*/

	/* Response 412
	Content has changed since the ETag was provided
	*/

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_GetAppSettingsClient
{
	typedef FRequest_GetAppSettingsClient Request;
	typedef FResponse_GetAppSettingsClient Response;
	typedef FDelegate_GetAppSettingsClient Delegate;
	typedef FConfigAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI->GetAppSettingsClient(InRequest, InDelegate, Priority); }
};

/* Get App Settings Server
 *
 * ***DEPRECATED*** Please use /v2/kv instead.  
 * 
 * Returns app settings that are configured to be available to the server. 
 * 
 * Required Permissions: : `config:app_settings:server:read`
*/
struct RALLYHEREAPI_API FRequest_GetAppSettingsServer : public FRequest
{
	FRequest_GetAppSettingsServer();
	virtual ~FRequest_GetAppSettingsServer() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	FName GetSimplifiedPathWithVerb() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
	/* If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed. */
	TOptional<FString> IfNoneMatch;
	/* If you provide the ETag that matches the current ETag for this content, will return a 412 response - indicating that the content has changed. */
	TOptional<FString> IfMatch;
};

struct RALLYHEREAPI_API FResponse_GetAppSettingsServer : public FResponse
{
	FResponse_GetAppSettingsServer(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetAppSettingsServer() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	bool ParseHeaders() override;
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

	typedef TVariant<TArray<FRHAPI_KVV1>, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> ContentVariantType;
protected:
	ContentVariantType ParsedContent;
public:
	template<typename T>
	bool TryGetContent(T& OutResponse)const { const T* OutResponsePtr = ParsedContent.TryGet<T>(); if (OutResponsePtr != nullptr) OutResponse = *OutResponsePtr; return OutResponsePtr != nullptr; }
	template<typename T>
	const T* TryGetContent() const { return ParsedContent.TryGet<T>(); }

	#if ALLOW_LEGACY_RESPONSE_CONTENT
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	TArray<FRHAPI_KVV1> Content;
	#endif
	
	
	// Headers
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> ETag;

	// Manual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(TArray<FRHAPI_KVV1>& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 304
	Content still has the same etag and has not changed
	*/

	/* Response 403
	 Error Codes: - `auth_invalid_key_id` - Invalid Authorization - Invalid Key ID in Access Token - `auth_invalid_version` - Invalid Authorization - version - `auth_malformed_access` - Invalid Authorization - malformed access token - `auth_not_jwt` - Invalid Authorization - `auth_token_expired` - Token is expired - `auth_token_format` - Invalid Authorization - {} - `auth_token_invalid_claim` - Token contained invalid claim value: {} - `auth_token_sig_invalid` - Token Signature is invalid - `auth_token_unknown` - Failed to parse token - `insufficient_permissions` - Insufficient Permissions 
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 412
	Content has changed since the ETag was provided
	*/

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_GetAppSettingsServer
{
	typedef FRequest_GetAppSettingsServer Request;
	typedef FResponse_GetAppSettingsServer Response;
	typedef FDelegate_GetAppSettingsServer Delegate;
	typedef FConfigAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI->GetAppSettingsServer(InRequest, InDelegate, Priority); }
};

/* Get Kvs V2
 *
 * Get All KVs and Secret KVs.  Regular KVs are always returned.
 * 
 * Required permissions for secret KVs: : `config:secret_kvs:read`
*/
struct RALLYHEREAPI_API FRequest_GetKvsV2 : public FRequest
{
	FRequest_GetKvsV2();
	virtual ~FRequest_GetKvsV2() = default;
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	FString ComputePath() const override;
	FName GetSimplifiedPath() const override;
	FName GetSimplifiedPathWithVerb() const override;
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	TSharedPtr<FAuthContext> AuthContext;
	/* If specified, will only return the KVs with the specified keys */
	TOptional<TArray<FString>> KeysToInclude;
	/* If you provide the ETag that matches the current ETag for this content, will return a 304 response - indicating that the content has not changed. */
	TOptional<FString> IfNoneMatch;
	/* If you provide the ETag that matches the current ETag for this content, will return a 412 response - indicating that the content has changed. */
	TOptional<FString> IfMatch;
};

struct RALLYHEREAPI_API FResponse_GetKvsV2 : public FResponse
{
	FResponse_GetKvsV2(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetKvsV2() = default;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	bool ParseHeaders() override;
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

	typedef TVariant<FRHAPI_KVsResponseV2, FRHAPI_HTTPValidationError> ContentVariantType;
protected:
	ContentVariantType ParsedContent;
public:
	template<typename T>
	bool TryGetContent(T& OutResponse)const { const T* OutResponsePtr = ParsedContent.TryGet<T>(); if (OutResponsePtr != nullptr) OutResponse = *OutResponsePtr; return OutResponsePtr != nullptr; }
	template<typename T>
	const T* TryGetContent() const { return ParsedContent.TryGet<T>(); }

	#if ALLOW_LEGACY_RESPONSE_CONTENT
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_KVsResponseV2 Content;
	#endif
	
	
	// Headers
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> ETag;

	// Manual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_KVsResponseV2& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 304
	Content still has the same etag and has not changed
	*/

	/* Response 412
	Content has changed since the ETag was provided
	*/

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

struct RALLYHEREAPI_API Traits_GetKvsV2
{
	typedef FRequest_GetKvsV2 Request;
	typedef FResponse_GetKvsV2 Response;
	typedef FDelegate_GetKvsV2 Delegate;
	typedef FConfigAPI API;
	static FString Name;

	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereAPIPriority) { return InAPI->GetKvsV2(InRequest, InDelegate, Priority); }
};


}
