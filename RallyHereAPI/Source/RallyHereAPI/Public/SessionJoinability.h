// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "SessionJoinability.generated.h"

/** @defgroup RHAPI_SessionJoinability RallyHere API Model SessionJoinability
 *  @{
 */

/**
 * @brief 
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_SessionJoinability : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	/** @brief All players can join without an invite. If enabled, it overwrites other permissions */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Open_Optional{ false };
	/** @brief true if Open_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Open_IsSet{ false };
	/** @brief Gets the value of Open_Optional, regardless of it having been set */
	FORCEINLINE bool& GetOpen() { return Open_Optional; }
	/** @brief Gets the value of Open_Optional, regardless of it having been set */
	FORCEINLINE const bool& GetOpen() const { return Open_Optional; }
	/** @brief Gets the value of Open_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const bool& GetOpen(const bool& DefaultValue) const { if (Open_IsSet) return Open_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Open_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetOpen(bool& OutValue) const { if (Open_IsSet) OutValue = Open_Optional; return Open_IsSet; }
	/** @brief Returns a pointer to Open_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE bool* GetOpenOrNull() { if (Open_IsSet) return (&Open_Optional); return nullptr; }
	/** @brief Returns a pointer to Open_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const bool* GetOpenOrNull() const { if (Open_IsSet) return (&Open_Optional); return nullptr; }
	/** @brief Sets the value of Open_Optional and also sets Open_IsSet to true */
	FORCEINLINE void SetOpen(const bool& NewValue) { Open_Optional = NewValue; Open_IsSet = true;  }
	/** @brief Sets the value of Open_Optional and also sets Open_IsSet to true using move semantics */
	FORCEINLINE void SetOpen(bool&& NewValue) { Open_Optional = NewValue; Open_IsSet = true;  }
	/** @brief Clears the value of Open_Optional and sets Open_IsSet to false */
	void ClearOpen() { Open_Optional = false; Open_IsSet = false;  }
	/** @brief Returns the default value of Open */
	FORCEINLINE bool GetDefaultValue_Open() { return false; }

	/** @brief Friends can join this session without an invite */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Friends_Optional{ false };
	/** @brief true if Friends_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Friends_IsSet{ false };
	/** @brief Gets the value of Friends_Optional, regardless of it having been set */
	FORCEINLINE bool& GetFriends() { return Friends_Optional; }
	/** @brief Gets the value of Friends_Optional, regardless of it having been set */
	FORCEINLINE const bool& GetFriends() const { return Friends_Optional; }
	/** @brief Gets the value of Friends_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const bool& GetFriends(const bool& DefaultValue) const { if (Friends_IsSet) return Friends_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Friends_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetFriends(bool& OutValue) const { if (Friends_IsSet) OutValue = Friends_Optional; return Friends_IsSet; }
	/** @brief Returns a pointer to Friends_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE bool* GetFriendsOrNull() { if (Friends_IsSet) return (&Friends_Optional); return nullptr; }
	/** @brief Returns a pointer to Friends_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const bool* GetFriendsOrNull() const { if (Friends_IsSet) return (&Friends_Optional); return nullptr; }
	/** @brief Sets the value of Friends_Optional and also sets Friends_IsSet to true */
	FORCEINLINE void SetFriends(const bool& NewValue) { Friends_Optional = NewValue; Friends_IsSet = true;  }
	/** @brief Sets the value of Friends_Optional and also sets Friends_IsSet to true using move semantics */
	FORCEINLINE void SetFriends(bool&& NewValue) { Friends_Optional = NewValue; Friends_IsSet = true;  }
	/** @brief Clears the value of Friends_Optional and sets Friends_IsSet to false */
	void ClearFriends() { Friends_Optional = false; Friends_IsSet = false;  }
	/** @brief Returns the default value of Friends */
	FORCEINLINE bool GetDefaultValue_Friends() { return false; }

	/** @brief Players can join through platform sessions */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Platform_Optional{ true };
	/** @brief true if Platform_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Platform_IsSet{ false };
	/** @brief Gets the value of Platform_Optional, regardless of it having been set */
	FORCEINLINE bool& GetPlatform() { return Platform_Optional; }
	/** @brief Gets the value of Platform_Optional, regardless of it having been set */
	FORCEINLINE const bool& GetPlatform() const { return Platform_Optional; }
	/** @brief Gets the value of Platform_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const bool& GetPlatform(const bool& DefaultValue) const { if (Platform_IsSet) return Platform_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Platform_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetPlatform(bool& OutValue) const { if (Platform_IsSet) OutValue = Platform_Optional; return Platform_IsSet; }
	/** @brief Returns a pointer to Platform_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE bool* GetPlatformOrNull() { if (Platform_IsSet) return (&Platform_Optional); return nullptr; }
	/** @brief Returns a pointer to Platform_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const bool* GetPlatformOrNull() const { if (Platform_IsSet) return (&Platform_Optional); return nullptr; }
	/** @brief Sets the value of Platform_Optional and also sets Platform_IsSet to true */
	FORCEINLINE void SetPlatform(const bool& NewValue) { Platform_Optional = NewValue; Platform_IsSet = true;  }
	/** @brief Sets the value of Platform_Optional and also sets Platform_IsSet to true using move semantics */
	FORCEINLINE void SetPlatform(bool&& NewValue) { Platform_Optional = NewValue; Platform_IsSet = true;  }
	/** @brief Clears the value of Platform_Optional and sets Platform_IsSet to false */
	void ClearPlatform() { Platform_Optional = true; Platform_IsSet = false;  }
	/** @brief Returns the default value of Platform */
	FORCEINLINE bool GetDefaultValue_Platform() { return true; }
};

/** @} */
