// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "LootPriceCurrency.generated.h"

/** @defgroup RHAPI_LootPriceCurrency RallyHere API Model LootPriceCurrency
 *  @{
 */

/**
 * @brief One currency (of potentially multiple) that can be used for a purchase, and how much of that currency is required for the purchase.
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_LootPriceCurrency : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	/** @brief The Item used as the currency for the purchase. */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FGuid PriceItemId{  };
	/** @brief Gets the value of PriceItemId */
	FGuid& GetPriceItemId() { return PriceItemId; }
	/** @brief Gets the value of PriceItemId */
	const FGuid& GetPriceItemId() const { return PriceItemId; }
	/** @brief Sets the value of PriceItemId */
	void SetPriceItemId(const FGuid& NewValue) { PriceItemId = NewValue;   }
	/** @brief Sets the value of PriceItemId using move semantics */
	void SetPriceItemId(FGuid&& NewValue) { PriceItemId = NewValue;   }

	/** @brief The Item used as the currency for the purchase. */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 PriceLegacyItemId_Optional{ 0 };
	/** @brief true if PriceLegacyItemId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool PriceLegacyItemId_IsSet{ false };
	/** @brief Gets the value of PriceLegacyItemId_Optional, regardless of it having been set */
	int32& GetPriceLegacyItemId() { return PriceLegacyItemId_Optional; }
	/** @brief Gets the value of PriceLegacyItemId_Optional, regardless of it having been set */
	const int32& GetPriceLegacyItemId() const { return PriceLegacyItemId_Optional; }
	/** @brief Gets the value of PriceLegacyItemId_Optional, if it has been set, otherwise it returns DefaultValue */
	const int32& GetPriceLegacyItemId(const int32& DefaultValue) const { if (PriceLegacyItemId_IsSet) return PriceLegacyItemId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of PriceLegacyItemId_Optional and returns true if it has been set, otherwise returns false */
	bool GetPriceLegacyItemId(int32& OutValue) const { if (PriceLegacyItemId_IsSet) OutValue = PriceLegacyItemId_Optional; return PriceLegacyItemId_IsSet; }
	/** @brief Returns a pointer to PriceLegacyItemId_Optional, if it has been set, otherwise returns nullptr */
	int32* GetPriceLegacyItemIdOrNull() { if (PriceLegacyItemId_IsSet) return (&PriceLegacyItemId_Optional); return nullptr; }
	/** @brief Returns a pointer to PriceLegacyItemId_Optional, if it has been set, otherwise returns nullptr */
	const int32* GetPriceLegacyItemIdOrNull() const { if (PriceLegacyItemId_IsSet) return (&PriceLegacyItemId_Optional); return nullptr; }
	/** @brief Sets the value of PriceLegacyItemId_Optional and also sets PriceLegacyItemId_IsSet to true */
	void SetPriceLegacyItemId(const int32& NewValue) { PriceLegacyItemId_Optional = NewValue; PriceLegacyItemId_IsSet = true;  }
	/** @brief Sets the value of PriceLegacyItemId_Optional and also sets PriceLegacyItemId_IsSet to true using move semantics */
	void SetPriceLegacyItemId(int32&& NewValue) { PriceLegacyItemId_Optional = NewValue; PriceLegacyItemId_IsSet = true;  }
	/** @brief Clears the value of PriceLegacyItemId_Optional and sets PriceLegacyItemId_IsSet to false */
	void ClearPriceLegacyItemId() { PriceLegacyItemId_Optional = 0; PriceLegacyItemId_IsSet = false;  }
	/** @brief Checks whether PriceLegacyItemId_Optional has been set */
	bool IsPriceLegacyItemIdSet() const { return PriceLegacyItemId_IsSet; }
	/** @brief Returns true if PriceLegacyItemId_Optional is set and matches the default value */
	bool IsPriceLegacyItemIdDefaultValue() const { return PriceLegacyItemId_IsSet && PriceLegacyItemId_Optional == 0; }
	/** @brief Sets the value of PriceLegacyItemId_Optional to its default and also sets PriceLegacyItemId_IsSet to true */
	void SetPriceLegacyItemIdToDefault() { SetPriceLegacyItemId(0); }

	/** @brief The current amount of the item needed to use this price currency */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 CurrentPrice{ 0 };
	/** @brief Gets the value of CurrentPrice */
	int32& GetCurrentPrice() { return CurrentPrice; }
	/** @brief Gets the value of CurrentPrice */
	const int32& GetCurrentPrice() const { return CurrentPrice; }
	/** @brief Sets the value of CurrentPrice */
	void SetCurrentPrice(const int32& NewValue) { CurrentPrice = NewValue;   }
	/** @brief Sets the value of CurrentPrice using move semantics */
	void SetCurrentPrice(int32&& NewValue) { CurrentPrice = NewValue;   }
	/** @brief Returns true if CurrentPrice matches the default value */
	bool IsCurrentPriceDefaultValue() const { return CurrentPrice == 0; }
	/** @brief Sets the value of CurrentPrice to its default  */
	void SetCurrentPriceToDefault() { SetCurrentPrice(0); }

	/** @brief The amount of the item needed before the sale began */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 OriginalPrice_Optional{ 0 };
	/** @brief true if OriginalPrice_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool OriginalPrice_IsSet{ false };
	/** @brief Gets the value of OriginalPrice_Optional, regardless of it having been set */
	int32& GetOriginalPrice() { return OriginalPrice_Optional; }
	/** @brief Gets the value of OriginalPrice_Optional, regardless of it having been set */
	const int32& GetOriginalPrice() const { return OriginalPrice_Optional; }
	/** @brief Gets the value of OriginalPrice_Optional, if it has been set, otherwise it returns DefaultValue */
	const int32& GetOriginalPrice(const int32& DefaultValue) const { if (OriginalPrice_IsSet) return OriginalPrice_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of OriginalPrice_Optional and returns true if it has been set, otherwise returns false */
	bool GetOriginalPrice(int32& OutValue) const { if (OriginalPrice_IsSet) OutValue = OriginalPrice_Optional; return OriginalPrice_IsSet; }
	/** @brief Returns a pointer to OriginalPrice_Optional, if it has been set, otherwise returns nullptr */
	int32* GetOriginalPriceOrNull() { if (OriginalPrice_IsSet) return (&OriginalPrice_Optional); return nullptr; }
	/** @brief Returns a pointer to OriginalPrice_Optional, if it has been set, otherwise returns nullptr */
	const int32* GetOriginalPriceOrNull() const { if (OriginalPrice_IsSet) return (&OriginalPrice_Optional); return nullptr; }
	/** @brief Sets the value of OriginalPrice_Optional and also sets OriginalPrice_IsSet to true */
	void SetOriginalPrice(const int32& NewValue) { OriginalPrice_Optional = NewValue; OriginalPrice_IsSet = true;  }
	/** @brief Sets the value of OriginalPrice_Optional and also sets OriginalPrice_IsSet to true using move semantics */
	void SetOriginalPrice(int32&& NewValue) { OriginalPrice_Optional = NewValue; OriginalPrice_IsSet = true;  }
	/** @brief Clears the value of OriginalPrice_Optional and sets OriginalPrice_IsSet to false */
	void ClearOriginalPrice() { OriginalPrice_Optional = 0; OriginalPrice_IsSet = false;  }
	/** @brief Checks whether OriginalPrice_Optional has been set */
	bool IsOriginalPriceSet() const { return OriginalPrice_IsSet; }
	/** @brief Returns true if OriginalPrice_Optional is set and matches the default value */
	bool IsOriginalPriceDefaultValue() const { return OriginalPrice_IsSet && OriginalPrice_Optional == 0; }
	/** @brief Sets the value of OriginalPrice_Optional to its default and also sets OriginalPrice_IsSet to true */
	void SetOriginalPriceToDefault() { SetOriginalPrice(0); }
};

/** @} */
