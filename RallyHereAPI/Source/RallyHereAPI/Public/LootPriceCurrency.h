// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "LootPriceCurrency.generated.h"

/** @defgroup RHAPI_LootPriceCurrency RallyHere API Model LootPriceCurrency
 *  @{
 */

/**
 * @brief One currency (of potentially multiple) that can be used for a purchase, and how much of that currency is required for the purchase.
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_LootPriceCurrency : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	/** @brief The Item used as the currency for the purchase. */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FGuid PriceItemId{  };
	/** @brief Gets the value of PriceItemId */
	FORCEINLINE FGuid& GetPriceItemId() { return PriceItemId; }
	/** @brief Gets the value of PriceItemId */
	FORCEINLINE const FGuid& GetPriceItemId() const { return PriceItemId; }
	/** @brief Sets the value of PriceItemId */
	FORCEINLINE void SetPriceItemId(const FGuid& NewValue) { PriceItemId = NewValue;   }
	/** @brief Sets the value of PriceItemId using move semantics */
	FORCEINLINE void SetPriceItemId(FGuid&& NewValue) { PriceItemId = NewValue;   }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 PriceLegacyItemId_Optional{ 0 };
	/** @brief true if PriceLegacyItemId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool PriceLegacyItemId_IsSet{ false };
	/** @brief true if PriceLegacyItemId_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool PriceLegacyItemId_IsNull{ false };
	/** @brief Gets the value of PriceLegacyItemId_Optional, regardless of it having been set */
	FORCEINLINE int32& GetPriceLegacyItemId() { return PriceLegacyItemId_Optional; }
	/** @brief Gets the value of PriceLegacyItemId_Optional, regardless of it having been set */
	FORCEINLINE const int32& GetPriceLegacyItemId() const { return PriceLegacyItemId_Optional; }
	/** @brief Gets the value of PriceLegacyItemId_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const int32& GetPriceLegacyItemId(const int32& DefaultValue) const { if (PriceLegacyItemId_IsSet) return PriceLegacyItemId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of PriceLegacyItemId_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetPriceLegacyItemId(int32& OutValue) const { if (PriceLegacyItemId_IsSet && !PriceLegacyItemId_IsNull) OutValue = PriceLegacyItemId_Optional; return PriceLegacyItemId_IsSet; }
	/** @brief Returns a pointer to PriceLegacyItemId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE int32* GetPriceLegacyItemIdOrNull() { if (PriceLegacyItemId_IsSet) return (PriceLegacyItemId_IsNull ? nullptr : &PriceLegacyItemId_Optional); return nullptr; }
	/** @brief Returns a pointer to PriceLegacyItemId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const int32* GetPriceLegacyItemIdOrNull() const { if (PriceLegacyItemId_IsSet) return (PriceLegacyItemId_IsNull ? nullptr : &PriceLegacyItemId_Optional); return nullptr; }
	/** @brief Sets the value of PriceLegacyItemId_Optional and also sets PriceLegacyItemId_IsSet to true */
	FORCEINLINE void SetPriceLegacyItemId(const int32& NewValue) { PriceLegacyItemId_Optional = NewValue; PriceLegacyItemId_IsSet = true; PriceLegacyItemId_IsNull = false; }
	/** @brief Sets the value of PriceLegacyItemId_Optional and also sets PriceLegacyItemId_IsSet to true using move semantics */
	FORCEINLINE void SetPriceLegacyItemId(int32&& NewValue) { PriceLegacyItemId_Optional = NewValue; PriceLegacyItemId_IsSet = true; PriceLegacyItemId_IsNull = false; }
	/** @brief Clears the value of PriceLegacyItemId_Optional and sets PriceLegacyItemId_IsSet to false */
	void ClearPriceLegacyItemId() { PriceLegacyItemId_Optional = 0; PriceLegacyItemId_IsSet = false; PriceLegacyItemId_IsNull = false; }
	/** @brief Returns the default value of PriceLegacyItemId */
	FORCEINLINE int32 GetDefaultValue_PriceLegacyItemId() { return 0; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetPriceLegacyItemIdToNull() { PriceLegacyItemId_IsSet = true; PriceLegacyItemId_IsNull = true; }
	/** @brief Checks whether PriceLegacyItemId_Optional is set to null */
	FORCEINLINE bool IsPriceLegacyItemIdNull() const { return PriceLegacyItemId_IsSet && PriceLegacyItemId_IsNull; }

	/** @brief The current amount of the item needed to use this price currency */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 CurrentPrice{ 0 };
	/** @brief Gets the value of CurrentPrice */
	FORCEINLINE int32& GetCurrentPrice() { return CurrentPrice; }
	/** @brief Gets the value of CurrentPrice */
	FORCEINLINE const int32& GetCurrentPrice() const { return CurrentPrice; }
	/** @brief Sets the value of CurrentPrice */
	FORCEINLINE void SetCurrentPrice(const int32& NewValue) { CurrentPrice = NewValue;   }
	/** @brief Sets the value of CurrentPrice using move semantics */
	FORCEINLINE void SetCurrentPrice(int32&& NewValue) { CurrentPrice = NewValue;   }
	/** @brief Returns the default value of CurrentPrice */
	FORCEINLINE int32 GetDefaultValue_CurrentPrice() { return 0; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 OriginalPrice_Optional{ 0 };
	/** @brief true if OriginalPrice_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool OriginalPrice_IsSet{ false };
	/** @brief true if OriginalPrice_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool OriginalPrice_IsNull{ false };
	/** @brief Gets the value of OriginalPrice_Optional, regardless of it having been set */
	FORCEINLINE int32& GetOriginalPrice() { return OriginalPrice_Optional; }
	/** @brief Gets the value of OriginalPrice_Optional, regardless of it having been set */
	FORCEINLINE const int32& GetOriginalPrice() const { return OriginalPrice_Optional; }
	/** @brief Gets the value of OriginalPrice_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const int32& GetOriginalPrice(const int32& DefaultValue) const { if (OriginalPrice_IsSet) return OriginalPrice_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of OriginalPrice_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetOriginalPrice(int32& OutValue) const { if (OriginalPrice_IsSet && !OriginalPrice_IsNull) OutValue = OriginalPrice_Optional; return OriginalPrice_IsSet; }
	/** @brief Returns a pointer to OriginalPrice_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE int32* GetOriginalPriceOrNull() { if (OriginalPrice_IsSet) return (OriginalPrice_IsNull ? nullptr : &OriginalPrice_Optional); return nullptr; }
	/** @brief Returns a pointer to OriginalPrice_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const int32* GetOriginalPriceOrNull() const { if (OriginalPrice_IsSet) return (OriginalPrice_IsNull ? nullptr : &OriginalPrice_Optional); return nullptr; }
	/** @brief Sets the value of OriginalPrice_Optional and also sets OriginalPrice_IsSet to true */
	FORCEINLINE void SetOriginalPrice(const int32& NewValue) { OriginalPrice_Optional = NewValue; OriginalPrice_IsSet = true; OriginalPrice_IsNull = false; }
	/** @brief Sets the value of OriginalPrice_Optional and also sets OriginalPrice_IsSet to true using move semantics */
	FORCEINLINE void SetOriginalPrice(int32&& NewValue) { OriginalPrice_Optional = NewValue; OriginalPrice_IsSet = true; OriginalPrice_IsNull = false; }
	/** @brief Clears the value of OriginalPrice_Optional and sets OriginalPrice_IsSet to false */
	void ClearOriginalPrice() { OriginalPrice_Optional = 0; OriginalPrice_IsSet = false; OriginalPrice_IsNull = false; }
	/** @brief Returns the default value of OriginalPrice */
	FORCEINLINE int32 GetDefaultValue_OriginalPrice() { return 0; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetOriginalPriceToNull() { OriginalPrice_IsSet = true; OriginalPrice_IsNull = true; }
	/** @brief Checks whether OriginalPrice_Optional is set to null */
	FORCEINLINE bool IsOriginalPriceNull() const { return OriginalPrice_IsSet && OriginalPrice_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 MinReducedPrice_Optional{ 0 };
	/** @brief true if MinReducedPrice_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool MinReducedPrice_IsSet{ false };
	/** @brief true if MinReducedPrice_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool MinReducedPrice_IsNull{ false };
	/** @brief Gets the value of MinReducedPrice_Optional, regardless of it having been set */
	FORCEINLINE int32& GetMinReducedPrice() { return MinReducedPrice_Optional; }
	/** @brief Gets the value of MinReducedPrice_Optional, regardless of it having been set */
	FORCEINLINE const int32& GetMinReducedPrice() const { return MinReducedPrice_Optional; }
	/** @brief Gets the value of MinReducedPrice_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const int32& GetMinReducedPrice(const int32& DefaultValue) const { if (MinReducedPrice_IsSet) return MinReducedPrice_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of MinReducedPrice_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetMinReducedPrice(int32& OutValue) const { if (MinReducedPrice_IsSet && !MinReducedPrice_IsNull) OutValue = MinReducedPrice_Optional; return MinReducedPrice_IsSet; }
	/** @brief Returns a pointer to MinReducedPrice_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE int32* GetMinReducedPriceOrNull() { if (MinReducedPrice_IsSet) return (MinReducedPrice_IsNull ? nullptr : &MinReducedPrice_Optional); return nullptr; }
	/** @brief Returns a pointer to MinReducedPrice_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const int32* GetMinReducedPriceOrNull() const { if (MinReducedPrice_IsSet) return (MinReducedPrice_IsNull ? nullptr : &MinReducedPrice_Optional); return nullptr; }
	/** @brief Sets the value of MinReducedPrice_Optional and also sets MinReducedPrice_IsSet to true */
	FORCEINLINE void SetMinReducedPrice(const int32& NewValue) { MinReducedPrice_Optional = NewValue; MinReducedPrice_IsSet = true; MinReducedPrice_IsNull = false; }
	/** @brief Sets the value of MinReducedPrice_Optional and also sets MinReducedPrice_IsSet to true using move semantics */
	FORCEINLINE void SetMinReducedPrice(int32&& NewValue) { MinReducedPrice_Optional = NewValue; MinReducedPrice_IsSet = true; MinReducedPrice_IsNull = false; }
	/** @brief Clears the value of MinReducedPrice_Optional and sets MinReducedPrice_IsSet to false */
	void ClearMinReducedPrice() { MinReducedPrice_Optional = 0; MinReducedPrice_IsSet = false; MinReducedPrice_IsNull = false; }
	/** @brief Returns the default value of MinReducedPrice */
	FORCEINLINE int32 GetDefaultValue_MinReducedPrice() { return 0; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetMinReducedPriceToNull() { MinReducedPrice_IsSet = true; MinReducedPrice_IsNull = true; }
	/** @brief Checks whether MinReducedPrice_Optional is set to null */
	FORCEINLINE bool IsMinReducedPriceNull() const { return MinReducedPrice_IsSet && MinReducedPrice_IsNull; }
};

/** @} */
