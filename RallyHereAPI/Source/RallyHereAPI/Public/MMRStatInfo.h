// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "MMRStatInfo.generated.h"

/** @defgroup RHAPI_MMRStatInfo RallyHere API Model MMRStatInfo
 *  @{
 */

/**
 * @brief 
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_MMRStatInfo : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString Type1_Optional{  };
	/** @brief true if Type1_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Type1_IsSet{ false };
	/** @brief true if Type1_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Type1_IsNull{ false };
	/** @brief Gets the value of Type1_Optional, regardless of it having been set */
	FORCEINLINE FString& GetType1() { return Type1_Optional; }
	/** @brief Gets the value of Type1_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetType1() const { return Type1_Optional; }
	/** @brief Gets the value of Type1_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetType1(const FString& DefaultValue) const { if (Type1_IsSet) return Type1_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Type1_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetType1(FString& OutValue) const { if (Type1_IsSet && !Type1_IsNull) OutValue = Type1_Optional; return Type1_IsSet; }
	/** @brief Returns a pointer to Type1_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetType1OrNull() { if (Type1_IsSet) return (Type1_IsNull ? nullptr : &Type1_Optional); return nullptr; }
	/** @brief Returns a pointer to Type1_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetType1OrNull() const { if (Type1_IsSet) return (Type1_IsNull ? nullptr : &Type1_Optional); return nullptr; }
	/** @brief Sets the value of Type1_Optional and also sets Type1_IsSet to true */
	FORCEINLINE void SetType1(const FString& NewValue) { Type1_Optional = NewValue; Type1_IsSet = true; Type1_IsNull = false; }
	/** @brief Sets the value of Type1_Optional and also sets Type1_IsSet to true using move semantics */
	FORCEINLINE void SetType1(FString&& NewValue) { Type1_Optional = NewValue; Type1_IsSet = true; Type1_IsNull = false; }
	/** @brief Clears the value of Type1_Optional and sets Type1_IsSet to false */
	void ClearType1() { Type1_IsSet = false; Type1_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetType1ToNull() { Type1_IsSet = true; Type1_IsNull = true; }
	/** @brief Checks whether Type1_Optional is set to null */
	FORCEINLINE bool IsType1Null() const { return Type1_IsSet && Type1_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString Type2_Optional{  };
	/** @brief true if Type2_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Type2_IsSet{ false };
	/** @brief true if Type2_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Type2_IsNull{ false };
	/** @brief Gets the value of Type2_Optional, regardless of it having been set */
	FORCEINLINE FString& GetType2() { return Type2_Optional; }
	/** @brief Gets the value of Type2_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetType2() const { return Type2_Optional; }
	/** @brief Gets the value of Type2_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetType2(const FString& DefaultValue) const { if (Type2_IsSet) return Type2_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Type2_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetType2(FString& OutValue) const { if (Type2_IsSet && !Type2_IsNull) OutValue = Type2_Optional; return Type2_IsSet; }
	/** @brief Returns a pointer to Type2_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetType2OrNull() { if (Type2_IsSet) return (Type2_IsNull ? nullptr : &Type2_Optional); return nullptr; }
	/** @brief Returns a pointer to Type2_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetType2OrNull() const { if (Type2_IsSet) return (Type2_IsNull ? nullptr : &Type2_Optional); return nullptr; }
	/** @brief Sets the value of Type2_Optional and also sets Type2_IsSet to true */
	FORCEINLINE void SetType2(const FString& NewValue) { Type2_Optional = NewValue; Type2_IsSet = true; Type2_IsNull = false; }
	/** @brief Sets the value of Type2_Optional and also sets Type2_IsSet to true using move semantics */
	FORCEINLINE void SetType2(FString&& NewValue) { Type2_Optional = NewValue; Type2_IsSet = true; Type2_IsNull = false; }
	/** @brief Clears the value of Type2_Optional and sets Type2_IsSet to false */
	void ClearType2() { Type2_IsSet = false; Type2_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetType2ToNull() { Type2_IsSet = true; Type2_IsNull = true; }
	/** @brief Checks whether Type2_Optional is set to null */
	FORCEINLINE bool IsType2Null() const { return Type2_IsSet && Type2_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString Type3_Optional{  };
	/** @brief true if Type3_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Type3_IsSet{ false };
	/** @brief true if Type3_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Type3_IsNull{ false };
	/** @brief Gets the value of Type3_Optional, regardless of it having been set */
	FORCEINLINE FString& GetType3() { return Type3_Optional; }
	/** @brief Gets the value of Type3_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetType3() const { return Type3_Optional; }
	/** @brief Gets the value of Type3_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetType3(const FString& DefaultValue) const { if (Type3_IsSet) return Type3_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Type3_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetType3(FString& OutValue) const { if (Type3_IsSet && !Type3_IsNull) OutValue = Type3_Optional; return Type3_IsSet; }
	/** @brief Returns a pointer to Type3_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetType3OrNull() { if (Type3_IsSet) return (Type3_IsNull ? nullptr : &Type3_Optional); return nullptr; }
	/** @brief Returns a pointer to Type3_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetType3OrNull() const { if (Type3_IsSet) return (Type3_IsNull ? nullptr : &Type3_Optional); return nullptr; }
	/** @brief Sets the value of Type3_Optional and also sets Type3_IsSet to true */
	FORCEINLINE void SetType3(const FString& NewValue) { Type3_Optional = NewValue; Type3_IsSet = true; Type3_IsNull = false; }
	/** @brief Sets the value of Type3_Optional and also sets Type3_IsSet to true using move semantics */
	FORCEINLINE void SetType3(FString&& NewValue) { Type3_Optional = NewValue; Type3_IsSet = true; Type3_IsNull = false; }
	/** @brief Clears the value of Type3_Optional and sets Type3_IsSet to false */
	void ClearType3() { Type3_IsSet = false; Type3_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetType3ToNull() { Type3_IsSet = true; Type3_IsNull = true; }
	/** @brief Checks whether Type3_Optional is set to null */
	FORCEINLINE bool IsType3Null() const { return Type3_IsSet && Type3_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString Type4_Optional{  };
	/** @brief true if Type4_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Type4_IsSet{ false };
	/** @brief true if Type4_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Type4_IsNull{ false };
	/** @brief Gets the value of Type4_Optional, regardless of it having been set */
	FORCEINLINE FString& GetType4() { return Type4_Optional; }
	/** @brief Gets the value of Type4_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetType4() const { return Type4_Optional; }
	/** @brief Gets the value of Type4_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetType4(const FString& DefaultValue) const { if (Type4_IsSet) return Type4_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Type4_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetType4(FString& OutValue) const { if (Type4_IsSet && !Type4_IsNull) OutValue = Type4_Optional; return Type4_IsSet; }
	/** @brief Returns a pointer to Type4_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetType4OrNull() { if (Type4_IsSet) return (Type4_IsNull ? nullptr : &Type4_Optional); return nullptr; }
	/** @brief Returns a pointer to Type4_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetType4OrNull() const { if (Type4_IsSet) return (Type4_IsNull ? nullptr : &Type4_Optional); return nullptr; }
	/** @brief Sets the value of Type4_Optional and also sets Type4_IsSet to true */
	FORCEINLINE void SetType4(const FString& NewValue) { Type4_Optional = NewValue; Type4_IsSet = true; Type4_IsNull = false; }
	/** @brief Sets the value of Type4_Optional and also sets Type4_IsSet to true using move semantics */
	FORCEINLINE void SetType4(FString&& NewValue) { Type4_Optional = NewValue; Type4_IsSet = true; Type4_IsNull = false; }
	/** @brief Clears the value of Type4_Optional and sets Type4_IsSet to false */
	void ClearType4() { Type4_IsSet = false; Type4_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetType4ToNull() { Type4_IsSet = true; Type4_IsNull = true; }
	/** @brief Checks whether Type4_Optional is set to null */
	FORCEINLINE bool IsType4Null() const { return Type4_IsSet && Type4_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 MmrMin{ 0 };
	/** @brief Gets the value of MmrMin */
	FORCEINLINE int32& GetMmrMin() { return MmrMin; }
	/** @brief Gets the value of MmrMin */
	FORCEINLINE const int32& GetMmrMin() const { return MmrMin; }
	/** @brief Sets the value of MmrMin */
	FORCEINLINE void SetMmrMin(const int32& NewValue) { MmrMin = NewValue;   }
	/** @brief Sets the value of MmrMin using move semantics */
	FORCEINLINE void SetMmrMin(int32&& NewValue) { MmrMin = NewValue;   }
	/** @brief Returns the default value of MmrMin */
	FORCEINLINE int32 GetDefaultValue_MmrMin() { return 0; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 MmrMax{ 0 };
	/** @brief Gets the value of MmrMax */
	FORCEINLINE int32& GetMmrMax() { return MmrMax; }
	/** @brief Gets the value of MmrMax */
	FORCEINLINE const int32& GetMmrMax() const { return MmrMax; }
	/** @brief Sets the value of MmrMax */
	FORCEINLINE void SetMmrMax(const int32& NewValue) { MmrMax = NewValue;   }
	/** @brief Sets the value of MmrMax using move semantics */
	FORCEINLINE void SetMmrMax(int32&& NewValue) { MmrMax = NewValue;   }
	/** @brief Returns the default value of MmrMax */
	FORCEINLINE int32 GetDefaultValue_MmrMax() { return 0; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 NumEntities{ 0 };
	/** @brief Gets the value of NumEntities */
	FORCEINLINE int32& GetNumEntities() { return NumEntities; }
	/** @brief Gets the value of NumEntities */
	FORCEINLINE const int32& GetNumEntities() const { return NumEntities; }
	/** @brief Sets the value of NumEntities */
	FORCEINLINE void SetNumEntities(const int32& NewValue) { NumEntities = NewValue;   }
	/** @brief Sets the value of NumEntities using move semantics */
	FORCEINLINE void SetNumEntities(int32&& NewValue) { NumEntities = NewValue;   }
	/** @brief Returns the default value of NumEntities */
	FORCEINLINE int32 GetDefaultValue_NumEntities() { return 0; }
};

/** @} */
