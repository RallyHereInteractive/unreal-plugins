// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereAPIAuthContext.h"
#include "RallyHereAPIHelpers.h"
#include "BlockedList.h"
#include "BlockedPlayer.h"
#include "HTTPValidationError.h"
#include "HzApiErrorModel.h"

namespace RallyHereAPI
{
using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

// forward declaration
class FBlockedV2API;

/**
 * @brief Block V2
 * Block the other Player. There is a max number of Players that can be blocked per Player.
 *                     The limit can determined using [this API](/#/Configuration%20V1/get_friends_and_block_limits).
 *                     <br/><br />Permissions Required: friend:block_list:write
*/
struct RALLYHEREAPI_API FRequest_BlockV2 : public FRequest
{
	FRequest_BlockV2();
	virtual ~FRequest_BlockV2() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FGuid PlayerUuid;
	FGuid OtherPlayerUuid;
};

/** The response type for FRequest_BlockV2 */
struct RALLYHEREAPI_API FResponse_BlockV2 : public FResponse
{
	FResponse_BlockV2(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_BlockV2() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

protected:
	/** Variant type representing the potential content responses for this call */
	typedef TVariant<FRHAPI_BlockedPlayer, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> ContentVariantType;
	
	/** A variant containing the parsed content */
	ContentVariantType ParsedContent;

	/** A parsed map of the headers from the request */
	TMap<FString, FString> HeadersMap;

public:
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @param [out] OutResponse A copy of the response data, if the type matched
	 * @return Whether or not the response was of the given type
	 */
	template<typename T>
	bool TryGetContent(T& OutResponse)const { const T* OutResponsePtr = ParsedContent.TryGet<T>(); if (OutResponsePtr != nullptr) OutResponse = *OutResponsePtr; return OutResponsePtr != nullptr; }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @return A pointer to the content, if it was the specified type.  The memory is owned by the response object!
	 */
	template<typename T>
	const T* TryGetContent() const { return ParsedContent.TryGet<T>(); }
	
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @param [out] OutValue A string to store the header value to, if found
	 * @return Whether or not the header was found
	 */
	bool TryGetHeader(const FString& Header, FString& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; return OutValuePtr != nullptr; }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @return A pointer to the header string value, if found.  The memory is owned by the response object!
	 */
	const FString* TryGetHeader(const FString& Header) const { return HeadersMap.Find(Header); }

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_BlockedPlayer Content;
	

#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the response content in the default response */
	const FRHAPI_BlockedPlayer* TryGetDefaultContent() const { return ParsedContent.TryGet<FRHAPI_BlockedPlayer>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_BlockedPlayer& OutContent) const;

	/* Response 400
	Bad Request
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 409
	Conflict
	*/
	bool TryGetContentFor409(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_BlockV2 */
DECLARE_DELEGATE_OneParam(FDelegate_BlockV2, const FResponse_BlockV2&);

/** @brief A helper metadata object for BlockV2 that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_BlockV2
{
	/** The request type */
	typedef FRequest_BlockV2 Request;
	/** The response type */
	typedef FResponse_BlockV2 Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_BlockV2 Delegate;
	/** The API object that supports this API call */
	typedef FBlockedV2API API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Blocked List For Player V2
 * Fetch the blocked list for the Player. <br /><br />
 *                         <b>Note:</b> This API supports etags and will return the etag header when with the response. 
 *                         Clients can utilize the <i>if-none-match</i> header to avoid having to reload the response if it has not changed.
 *                         <br/><br />Permissions Required: friend:block_list:read
*/
struct RALLYHEREAPI_API FRequest_GetBlockedListForPlayerV2 : public FRequest
{
	FRequest_GetBlockedListForPlayerV2();
	virtual ~FRequest_GetBlockedListForPlayerV2() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FGuid PlayerUuid;
	TOptional<int32> Page;
	TOptional<int32> Limit;
	/* If you provide the ETag that matches the current ETag for this resource, a 304 response will be return - indicating that the resource has not changed. */
	TOptional<FString> IfNoneMatch;
};

/** The response type for FRequest_GetBlockedListForPlayerV2 */
struct RALLYHEREAPI_API FResponse_GetBlockedListForPlayerV2 : public FResponse
{
	FResponse_GetBlockedListForPlayerV2(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetBlockedListForPlayerV2() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Parse out header information for later usage */
	virtual bool ParseHeaders() override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

protected:
	/** Variant type representing the potential content responses for this call */
	typedef TVariant<FRHAPI_BlockedList, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> ContentVariantType;
	
	/** A variant containing the parsed content */
	ContentVariantType ParsedContent;

	/** A parsed map of the headers from the request */
	TMap<FString, FString> HeadersMap;

public:
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @param [out] OutResponse A copy of the response data, if the type matched
	 * @return Whether or not the response was of the given type
	 */
	template<typename T>
	bool TryGetContent(T& OutResponse)const { const T* OutResponsePtr = ParsedContent.TryGet<T>(); if (OutResponsePtr != nullptr) OutResponse = *OutResponsePtr; return OutResponsePtr != nullptr; }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @return A pointer to the content, if it was the specified type.  The memory is owned by the response object!
	 */
	template<typename T>
	const T* TryGetContent() const { return ParsedContent.TryGet<T>(); }
	
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @param [out] OutValue A string to store the header value to, if found
	 * @return Whether or not the header was found
	 */
	bool TryGetHeader(const FString& Header, FString& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; return OutValuePtr != nullptr; }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @return A pointer to the header string value, if found.  The memory is owned by the response object!
	 */
	const FString* TryGetHeader(const FString& Header) const { return HeadersMap.Find(Header); }

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_BlockedList Content;
	
	/** Default Response Headers */
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	UE_DEPRECATED(5.0, "Direct use of Headers is deprecated, please use TryGetDefaultHeader<>(), TryGetHeader() or GetHeader<>() instead.")
	TOptional<FString> ETag;
#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the response content in the default response */
	const FRHAPI_BlockedList* TryGetDefaultContent() const { return ParsedContent.TryGet<FRHAPI_BlockedList>(); }
	/** @brief Attempt to retrieve a specific header of the default response
	const FString* TryGetDefaultHeader_ETag() const { return TryGetHeader(TEXT("ETag")); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_BlockedList& OutContent) const;
	/* Used to identify this version of the content.  Provide with a get request to avoid downloading the same data multiple times. */
	TOptional<FString> GetHeader200_ETag() const;

	/* Response 304
	Content still has the same etag and has not changed
	*/

	/* Response 400
	Bad Request
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 409
	Conflict
	*/
	bool TryGetContentFor409(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetBlockedListForPlayerV2 */
DECLARE_DELEGATE_OneParam(FDelegate_GetBlockedListForPlayerV2, const FResponse_GetBlockedListForPlayerV2&);

/** @brief A helper metadata object for GetBlockedListForPlayerV2 that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetBlockedListForPlayerV2
{
	/** The request type */
	typedef FRequest_GetBlockedListForPlayerV2 Request;
	/** The response type */
	typedef FResponse_GetBlockedListForPlayerV2 Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetBlockedListForPlayerV2 Delegate;
	/** The API object that supports this API call */
	typedef FBlockedV2API API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Get Blocked V2
 * Get the Blocked Player <br/><br />Permissions Required: friend:block_list:read
*/
struct RALLYHEREAPI_API FRequest_GetBlockedV2 : public FRequest
{
	FRequest_GetBlockedV2();
	virtual ~FRequest_GetBlockedV2() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FGuid PlayerUuid;
	FGuid OtherPlayerUuid;
};

/** The response type for FRequest_GetBlockedV2 */
struct RALLYHEREAPI_API FResponse_GetBlockedV2 : public FResponse
{
	FResponse_GetBlockedV2(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_GetBlockedV2() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

protected:
	/** Variant type representing the potential content responses for this call */
	typedef TVariant<FRHAPI_BlockedPlayer, FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> ContentVariantType;
	
	/** A variant containing the parsed content */
	ContentVariantType ParsedContent;

	/** A parsed map of the headers from the request */
	TMap<FString, FString> HeadersMap;

public:
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @param [out] OutResponse A copy of the response data, if the type matched
	 * @return Whether or not the response was of the given type
	 */
	template<typename T>
	bool TryGetContent(T& OutResponse)const { const T* OutResponsePtr = ParsedContent.TryGet<T>(); if (OutResponsePtr != nullptr) OutResponse = *OutResponsePtr; return OutResponsePtr != nullptr; }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @return A pointer to the content, if it was the specified type.  The memory is owned by the response object!
	 */
	template<typename T>
	const T* TryGetContent() const { return ParsedContent.TryGet<T>(); }
	
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @param [out] OutValue A string to store the header value to, if found
	 * @return Whether or not the header was found
	 */
	bool TryGetHeader(const FString& Header, FString& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; return OutValuePtr != nullptr; }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @return A pointer to the header string value, if found.  The memory is owned by the response object!
	 */
	const FString* TryGetHeader(const FString& Header) const { return HeadersMap.Find(Header); }

#if ALLOW_LEGACY_RESPONSE_CONTENT
	/** Default Response Content */
	UE_DEPRECATED(5.0, "Direct use of Content is deprecated, please use TryGetDefaultContent(), TryGetContent(), TryGetResponse<>(), or TryGetContentFor<>() instead.")
	FRHAPI_BlockedPlayer Content;
	

#endif //ALLOW_LEGACY_RESPONSE_CONTENT

	// Default Response Helpers
	/** @brief Attempt to retrieve the response content in the default response */
	const FRHAPI_BlockedPlayer* TryGetDefaultContent() const { return ParsedContent.TryGet<FRHAPI_BlockedPlayer>(); }

	// Individual Response Helpers	
	/* Response 200
	Successful Response
	*/
	bool TryGetContentFor200(FRHAPI_BlockedPlayer& OutContent) const;

	/* Response 400
	Bad Request
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 409
	Conflict
	*/
	bool TryGetContentFor409(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_GetBlockedV2 */
DECLARE_DELEGATE_OneParam(FDelegate_GetBlockedV2, const FResponse_GetBlockedV2&);

/** @brief A helper metadata object for GetBlockedV2 that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_GetBlockedV2
{
	/** The request type */
	typedef FRequest_GetBlockedV2 Request;
	/** The response type */
	typedef FResponse_GetBlockedV2 Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_GetBlockedV2 Delegate;
	/** The API object that supports this API call */
	typedef FBlockedV2API API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};

/**
 * @brief Unblock V2
 * Unblock the other Player <br/><br />Permissions Required: friend:block_list:write
*/
struct RALLYHEREAPI_API FRequest_UnblockV2 : public FRequest
{
	FRequest_UnblockV2();
	virtual ~FRequest_UnblockV2() = default;
	
	/** @brief Given a http request, apply data and settings from this request object to it */
	bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
	/** @brief Compute the URL path for this request instance */
	FString ComputePath() const override;
	/** @brief Get the simplified URL path for this request, not including the verb */
	FName GetSimplifiedPath() const override;
	/** @brief Get the simplified URL path for this request, including the verb */
	FName GetSimplifiedPathWithVerb() const override;
	/** @brief Get the auth context used for this request */
	TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

	/** The specified auth context to use for this request */
	TSharedPtr<FAuthContext> AuthContext;
	FGuid PlayerUuid;
	FGuid OtherPlayerUuid;
};

/** The response type for FRequest_UnblockV2 */
struct RALLYHEREAPI_API FResponse_UnblockV2 : public FResponse
{
	FResponse_UnblockV2(FRequestMetadata InRequestMetadata);
	//virtual ~FResponse_UnblockV2() = default;
	
	/** @brief Parse out response content into local storage from a given JsonValue */
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
	/** @brief Gets the description of the response code */
	virtual FString GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const override;

protected:
	/** Variant type representing the potential content responses for this call */
	typedef TVariant< FRHAPI_HzApiErrorModel, FRHAPI_HTTPValidationError> ContentVariantType;
	
	/** A variant containing the parsed content */
	ContentVariantType ParsedContent;

	/** A parsed map of the headers from the request */
	TMap<FString, FString> HeadersMap;

public:
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @param [out] OutResponse A copy of the response data, if the type matched
	 * @return Whether or not the response was of the given type
	 */
	template<typename T>
	bool TryGetContent(T& OutResponse)const { const T* OutResponsePtr = ParsedContent.TryGet<T>(); if (OutResponsePtr != nullptr) OutResponse = *OutResponsePtr; return OutResponsePtr != nullptr; }
	/**
	 * @brief Attempt to get the response content in a specific type
	 * @return A pointer to the content, if it was the specified type.  The memory is owned by the response object!
	 */
	template<typename T>
	const T* TryGetContent() const { return ParsedContent.TryGet<T>(); }
	
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @param [out] OutValue A string to store the header value to, if found
	 * @return Whether or not the header was found
	 */
	bool TryGetHeader(const FString& Header, FString& OutValue) const { const auto OutValuePtr = HeadersMap.Find(Header); if (OutValuePtr != nullptr) OutValue = *OutValuePtr; return OutValuePtr != nullptr; }
	/**
	 * @brief Attempt to fetch a header by name
	 * @param [in] Header The name of the header to fetch
	 * @return A pointer to the header string value, if found.  The memory is owned by the response object!
	 */
	const FString* TryGetHeader(const FString& Header) const { return HeadersMap.Find(Header); }

#if ALLOW_LEGACY_RESPONSE_CONTENT
	

#endif //ALLOW_LEGACY_RESPONSE_CONTENT


	// Individual Response Helpers	
	/* Response 204
	Successful Response
	*/

	/* Response 400
	Bad Request
	*/
	bool TryGetContentFor400(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 403
	Forbidden
	*/
	bool TryGetContentFor403(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 409
	Conflict
	*/
	bool TryGetContentFor409(FRHAPI_HzApiErrorModel& OutContent) const;

	/* Response 422
	Validation Error
	*/
	bool TryGetContentFor422(FRHAPI_HTTPValidationError& OutContent) const;

};

/** The delegate class for FRequest_UnblockV2 */
DECLARE_DELEGATE_OneParam(FDelegate_UnblockV2, const FResponse_UnblockV2&);

/** @brief A helper metadata object for UnblockV2 that defines the relationship between Request, Delegate, API, etc.  Intended for use with templating */
struct RALLYHEREAPI_API Traits_UnblockV2
{
	/** The request type */
	typedef FRequest_UnblockV2 Request;
	/** The response type */
	typedef FResponse_UnblockV2 Response;
	/** The delegate type, triggered by the response */
	typedef FDelegate_UnblockV2 Delegate;
	/** The API object that supports this API call */
	typedef FBlockedV2API API;
	/** A human readable name for this API call */
	static FString Name;

	/**
	 * @brief A helper that uses all of the above types to initiate an API call, with a specified priority.
	 * @param [in] InAPI The API object the call will be made with
	 * @param [in] InRequest The request to submit to the API call
	 * @param [in] InDelegate An optional delegate to call when the API call completes, containing the response information
	 * @param [in] InPriority An optional priority override for the API call, for use when API calls are being throttled
	 * @return A http request object, if the call was successfully queued.
	 */
	static FHttpRequestPtr DoCall(TSharedRef<API> InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 InPriority = DefaultRallyHereAPIPriority);
};


/** The API class itself, which will handle calls to */
class RALLYHEREAPI_API FBlockedV2API : public FAPI
{
public:
	FBlockedV2API();
	virtual ~FBlockedV2API();

	FHttpRequestPtr BlockV2(const FRequest_BlockV2& Request, const FDelegate_BlockV2& Delegate = FDelegate_BlockV2(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetBlockedListForPlayerV2(const FRequest_GetBlockedListForPlayerV2& Request, const FDelegate_GetBlockedListForPlayerV2& Delegate = FDelegate_GetBlockedListForPlayerV2(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr GetBlockedV2(const FRequest_GetBlockedV2& Request, const FDelegate_GetBlockedV2& Delegate = FDelegate_GetBlockedV2(), int32 Priority = DefaultRallyHereAPIPriority);
	FHttpRequestPtr UnblockV2(const FRequest_UnblockV2& Request, const FDelegate_UnblockV2& Delegate = FDelegate_UnblockV2(), int32 Priority = DefaultRallyHereAPIPriority);

private:
	void OnBlockV2Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_BlockV2 Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetBlockedListForPlayerV2Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetBlockedListForPlayerV2 Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnGetBlockedV2Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetBlockedV2 Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
	void OnUnblockV2Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UnblockV2 Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};



}
