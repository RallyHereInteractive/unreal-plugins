// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "EnvironmentConfig.generated.h"

/** @defgroup RHAPI_EnvironmentConfig RallyHere API Model EnvironmentConfig
 *  @{
 */

/**
 * @brief 
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_EnvironmentConfig : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FGuid OrgId{  };
	/** @brief Gets the value of OrgId */
	FORCEINLINE FGuid& GetOrgId() { return OrgId; }
	/** @brief Gets the value of OrgId */
	FORCEINLINE const FGuid& GetOrgId() const { return OrgId; }
	/** @brief Sets the value of OrgId */
	FORCEINLINE void SetOrgId(const FGuid& NewValue) { OrgId = NewValue;   }
	/** @brief Sets the value of OrgId using move semantics */
	FORCEINLINE void SetOrgId(FGuid&& NewValue) { OrgId = NewValue;   }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FGuid ProductId{  };
	/** @brief Gets the value of ProductId */
	FORCEINLINE FGuid& GetProductId() { return ProductId; }
	/** @brief Gets the value of ProductId */
	FORCEINLINE const FGuid& GetProductId() const { return ProductId; }
	/** @brief Sets the value of ProductId */
	FORCEINLINE void SetProductId(const FGuid& NewValue) { ProductId = NewValue;   }
	/** @brief Sets the value of ProductId using move semantics */
	FORCEINLINE void SetProductId(FGuid&& NewValue) { ProductId = NewValue;   }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FGuid EnvironmentId{  };
	/** @brief Gets the value of EnvironmentId */
	FORCEINLINE FGuid& GetEnvironmentId() { return EnvironmentId; }
	/** @brief Gets the value of EnvironmentId */
	FORCEINLINE const FGuid& GetEnvironmentId() const { return EnvironmentId; }
	/** @brief Sets the value of EnvironmentId */
	FORCEINLINE void SetEnvironmentId(const FGuid& NewValue) { EnvironmentId = NewValue;   }
	/** @brief Sets the value of EnvironmentId using move semantics */
	FORCEINLINE void SetEnvironmentId(FGuid&& NewValue) { EnvironmentId = NewValue;   }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FGuid SandboxId{  };
	/** @brief Gets the value of SandboxId */
	FORCEINLINE FGuid& GetSandboxId() { return SandboxId; }
	/** @brief Gets the value of SandboxId */
	FORCEINLINE const FGuid& GetSandboxId() const { return SandboxId; }
	/** @brief Sets the value of SandboxId */
	FORCEINLINE void SetSandboxId(const FGuid& NewValue) { SandboxId = NewValue;   }
	/** @brief Sets the value of SandboxId using move semantics */
	FORCEINLINE void SetSandboxId(FGuid&& NewValue) { SandboxId = NewValue;   }
};

/** @} */
