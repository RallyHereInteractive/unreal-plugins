// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "CacheInfo.h"
#include "InventoryBucketUseRuleSets.h"
#include "Items.h"
#include "Loots.h"
#include "PlatformSKUs.h"
#include "PortalUseRulesets.h"
#include "PricePoints.h"
#include "TimeFrames.h"
#include "Vendors.h"
#include "XpTables.h"
#include "Catalog.generated.h"

/** @defgroup RHAPI_Catalog RallyHere API Model Catalog
 *  @{
 */

/**
 * @brief Full list of all loaded objects for the catalog.  Organized in a normalized model
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_Catalog : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_XpTables XpTables_Optional{  };
	/** @brief true if XpTables_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool XpTables_IsSet{ false };
	/** @brief true if XpTables_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool XpTables_IsNull{ false };
	/** @brief Gets the value of XpTables_Optional, regardless of it having been set */
	FORCEINLINE FRHAPI_XpTables& GetXpTables() { return XpTables_Optional; }
	/** @brief Gets the value of XpTables_Optional, regardless of it having been set */
	FORCEINLINE const FRHAPI_XpTables& GetXpTables() const { return XpTables_Optional; }
	/** @brief Gets the value of XpTables_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FRHAPI_XpTables& GetXpTables(const FRHAPI_XpTables& DefaultValue) const { if (XpTables_IsSet) return XpTables_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of XpTables_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetXpTables(FRHAPI_XpTables& OutValue) const { if (XpTables_IsSet && !XpTables_IsNull) OutValue = XpTables_Optional; return XpTables_IsSet; }
	/** @brief Returns a pointer to XpTables_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FRHAPI_XpTables* GetXpTablesOrNull() { if (XpTables_IsSet) return (XpTables_IsNull ? nullptr : &XpTables_Optional); return nullptr; }
	/** @brief Returns a pointer to XpTables_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FRHAPI_XpTables* GetXpTablesOrNull() const { if (XpTables_IsSet) return (XpTables_IsNull ? nullptr : &XpTables_Optional); return nullptr; }
	/** @brief Sets the value of XpTables_Optional and also sets XpTables_IsSet to true */
	FORCEINLINE void SetXpTables(const FRHAPI_XpTables& NewValue) { XpTables_Optional = NewValue; XpTables_IsSet = true; XpTables_IsNull = false; }
	/** @brief Sets the value of XpTables_Optional and also sets XpTables_IsSet to true using move semantics */
	FORCEINLINE void SetXpTables(FRHAPI_XpTables&& NewValue) { XpTables_Optional = NewValue; XpTables_IsSet = true; XpTables_IsNull = false; }
	/** @brief Clears the value of XpTables_Optional and sets XpTables_IsSet to false */
	void ClearXpTables() { XpTables_IsSet = false; XpTables_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetXpTablesToNull() { XpTables_IsSet = true; XpTables_IsNull = true; }
	/** @brief Checks whether XpTables_Optional is set to null */
	FORCEINLINE bool IsXpTablesNull() const { return XpTables_IsSet && XpTables_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_PortalUseRulesets PortalUseRulesets_Optional{  };
	/** @brief true if PortalUseRulesets_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool PortalUseRulesets_IsSet{ false };
	/** @brief true if PortalUseRulesets_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool PortalUseRulesets_IsNull{ false };
	/** @brief Gets the value of PortalUseRulesets_Optional, regardless of it having been set */
	FORCEINLINE FRHAPI_PortalUseRulesets& GetPortalUseRulesets() { return PortalUseRulesets_Optional; }
	/** @brief Gets the value of PortalUseRulesets_Optional, regardless of it having been set */
	FORCEINLINE const FRHAPI_PortalUseRulesets& GetPortalUseRulesets() const { return PortalUseRulesets_Optional; }
	/** @brief Gets the value of PortalUseRulesets_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FRHAPI_PortalUseRulesets& GetPortalUseRulesets(const FRHAPI_PortalUseRulesets& DefaultValue) const { if (PortalUseRulesets_IsSet) return PortalUseRulesets_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of PortalUseRulesets_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetPortalUseRulesets(FRHAPI_PortalUseRulesets& OutValue) const { if (PortalUseRulesets_IsSet && !PortalUseRulesets_IsNull) OutValue = PortalUseRulesets_Optional; return PortalUseRulesets_IsSet; }
	/** @brief Returns a pointer to PortalUseRulesets_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FRHAPI_PortalUseRulesets* GetPortalUseRulesetsOrNull() { if (PortalUseRulesets_IsSet) return (PortalUseRulesets_IsNull ? nullptr : &PortalUseRulesets_Optional); return nullptr; }
	/** @brief Returns a pointer to PortalUseRulesets_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FRHAPI_PortalUseRulesets* GetPortalUseRulesetsOrNull() const { if (PortalUseRulesets_IsSet) return (PortalUseRulesets_IsNull ? nullptr : &PortalUseRulesets_Optional); return nullptr; }
	/** @brief Sets the value of PortalUseRulesets_Optional and also sets PortalUseRulesets_IsSet to true */
	FORCEINLINE void SetPortalUseRulesets(const FRHAPI_PortalUseRulesets& NewValue) { PortalUseRulesets_Optional = NewValue; PortalUseRulesets_IsSet = true; PortalUseRulesets_IsNull = false; }
	/** @brief Sets the value of PortalUseRulesets_Optional and also sets PortalUseRulesets_IsSet to true using move semantics */
	FORCEINLINE void SetPortalUseRulesets(FRHAPI_PortalUseRulesets&& NewValue) { PortalUseRulesets_Optional = NewValue; PortalUseRulesets_IsSet = true; PortalUseRulesets_IsNull = false; }
	/** @brief Clears the value of PortalUseRulesets_Optional and sets PortalUseRulesets_IsSet to false */
	void ClearPortalUseRulesets() { PortalUseRulesets_IsSet = false; PortalUseRulesets_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetPortalUseRulesetsToNull() { PortalUseRulesets_IsSet = true; PortalUseRulesets_IsNull = true; }
	/** @brief Checks whether PortalUseRulesets_Optional is set to null */
	FORCEINLINE bool IsPortalUseRulesetsNull() const { return PortalUseRulesets_IsSet && PortalUseRulesets_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_InventoryBucketUseRuleSets InventoryBucketUseRuleSets_Optional{  };
	/** @brief true if InventoryBucketUseRuleSets_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool InventoryBucketUseRuleSets_IsSet{ false };
	/** @brief true if InventoryBucketUseRuleSets_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool InventoryBucketUseRuleSets_IsNull{ false };
	/** @brief Gets the value of InventoryBucketUseRuleSets_Optional, regardless of it having been set */
	FORCEINLINE FRHAPI_InventoryBucketUseRuleSets& GetInventoryBucketUseRuleSets() { return InventoryBucketUseRuleSets_Optional; }
	/** @brief Gets the value of InventoryBucketUseRuleSets_Optional, regardless of it having been set */
	FORCEINLINE const FRHAPI_InventoryBucketUseRuleSets& GetInventoryBucketUseRuleSets() const { return InventoryBucketUseRuleSets_Optional; }
	/** @brief Gets the value of InventoryBucketUseRuleSets_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FRHAPI_InventoryBucketUseRuleSets& GetInventoryBucketUseRuleSets(const FRHAPI_InventoryBucketUseRuleSets& DefaultValue) const { if (InventoryBucketUseRuleSets_IsSet) return InventoryBucketUseRuleSets_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of InventoryBucketUseRuleSets_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetInventoryBucketUseRuleSets(FRHAPI_InventoryBucketUseRuleSets& OutValue) const { if (InventoryBucketUseRuleSets_IsSet && !InventoryBucketUseRuleSets_IsNull) OutValue = InventoryBucketUseRuleSets_Optional; return InventoryBucketUseRuleSets_IsSet; }
	/** @brief Returns a pointer to InventoryBucketUseRuleSets_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FRHAPI_InventoryBucketUseRuleSets* GetInventoryBucketUseRuleSetsOrNull() { if (InventoryBucketUseRuleSets_IsSet) return (InventoryBucketUseRuleSets_IsNull ? nullptr : &InventoryBucketUseRuleSets_Optional); return nullptr; }
	/** @brief Returns a pointer to InventoryBucketUseRuleSets_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FRHAPI_InventoryBucketUseRuleSets* GetInventoryBucketUseRuleSetsOrNull() const { if (InventoryBucketUseRuleSets_IsSet) return (InventoryBucketUseRuleSets_IsNull ? nullptr : &InventoryBucketUseRuleSets_Optional); return nullptr; }
	/** @brief Sets the value of InventoryBucketUseRuleSets_Optional and also sets InventoryBucketUseRuleSets_IsSet to true */
	FORCEINLINE void SetInventoryBucketUseRuleSets(const FRHAPI_InventoryBucketUseRuleSets& NewValue) { InventoryBucketUseRuleSets_Optional = NewValue; InventoryBucketUseRuleSets_IsSet = true; InventoryBucketUseRuleSets_IsNull = false; }
	/** @brief Sets the value of InventoryBucketUseRuleSets_Optional and also sets InventoryBucketUseRuleSets_IsSet to true using move semantics */
	FORCEINLINE void SetInventoryBucketUseRuleSets(FRHAPI_InventoryBucketUseRuleSets&& NewValue) { InventoryBucketUseRuleSets_Optional = NewValue; InventoryBucketUseRuleSets_IsSet = true; InventoryBucketUseRuleSets_IsNull = false; }
	/** @brief Clears the value of InventoryBucketUseRuleSets_Optional and sets InventoryBucketUseRuleSets_IsSet to false */
	void ClearInventoryBucketUseRuleSets() { InventoryBucketUseRuleSets_IsSet = false; InventoryBucketUseRuleSets_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetInventoryBucketUseRuleSetsToNull() { InventoryBucketUseRuleSets_IsSet = true; InventoryBucketUseRuleSets_IsNull = true; }
	/** @brief Checks whether InventoryBucketUseRuleSets_Optional is set to null */
	FORCEINLINE bool IsInventoryBucketUseRuleSetsNull() const { return InventoryBucketUseRuleSets_IsSet && InventoryBucketUseRuleSets_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_Vendors Vendors_Optional{  };
	/** @brief true if Vendors_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Vendors_IsSet{ false };
	/** @brief true if Vendors_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Vendors_IsNull{ false };
	/** @brief Gets the value of Vendors_Optional, regardless of it having been set */
	FORCEINLINE FRHAPI_Vendors& GetVendors() { return Vendors_Optional; }
	/** @brief Gets the value of Vendors_Optional, regardless of it having been set */
	FORCEINLINE const FRHAPI_Vendors& GetVendors() const { return Vendors_Optional; }
	/** @brief Gets the value of Vendors_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FRHAPI_Vendors& GetVendors(const FRHAPI_Vendors& DefaultValue) const { if (Vendors_IsSet) return Vendors_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Vendors_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetVendors(FRHAPI_Vendors& OutValue) const { if (Vendors_IsSet && !Vendors_IsNull) OutValue = Vendors_Optional; return Vendors_IsSet; }
	/** @brief Returns a pointer to Vendors_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FRHAPI_Vendors* GetVendorsOrNull() { if (Vendors_IsSet) return (Vendors_IsNull ? nullptr : &Vendors_Optional); return nullptr; }
	/** @brief Returns a pointer to Vendors_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FRHAPI_Vendors* GetVendorsOrNull() const { if (Vendors_IsSet) return (Vendors_IsNull ? nullptr : &Vendors_Optional); return nullptr; }
	/** @brief Sets the value of Vendors_Optional and also sets Vendors_IsSet to true */
	FORCEINLINE void SetVendors(const FRHAPI_Vendors& NewValue) { Vendors_Optional = NewValue; Vendors_IsSet = true; Vendors_IsNull = false; }
	/** @brief Sets the value of Vendors_Optional and also sets Vendors_IsSet to true using move semantics */
	FORCEINLINE void SetVendors(FRHAPI_Vendors&& NewValue) { Vendors_Optional = NewValue; Vendors_IsSet = true; Vendors_IsNull = false; }
	/** @brief Clears the value of Vendors_Optional and sets Vendors_IsSet to false */
	void ClearVendors() { Vendors_IsSet = false; Vendors_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetVendorsToNull() { Vendors_IsSet = true; Vendors_IsNull = true; }
	/** @brief Checks whether Vendors_Optional is set to null */
	FORCEINLINE bool IsVendorsNull() const { return Vendors_IsSet && Vendors_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_Loots Loot_Optional{  };
	/** @brief true if Loot_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Loot_IsSet{ false };
	/** @brief true if Loot_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Loot_IsNull{ false };
	/** @brief Gets the value of Loot_Optional, regardless of it having been set */
	FORCEINLINE FRHAPI_Loots& GetLoot() { return Loot_Optional; }
	/** @brief Gets the value of Loot_Optional, regardless of it having been set */
	FORCEINLINE const FRHAPI_Loots& GetLoot() const { return Loot_Optional; }
	/** @brief Gets the value of Loot_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FRHAPI_Loots& GetLoot(const FRHAPI_Loots& DefaultValue) const { if (Loot_IsSet) return Loot_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Loot_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetLoot(FRHAPI_Loots& OutValue) const { if (Loot_IsSet && !Loot_IsNull) OutValue = Loot_Optional; return Loot_IsSet; }
	/** @brief Returns a pointer to Loot_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FRHAPI_Loots* GetLootOrNull() { if (Loot_IsSet) return (Loot_IsNull ? nullptr : &Loot_Optional); return nullptr; }
	/** @brief Returns a pointer to Loot_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FRHAPI_Loots* GetLootOrNull() const { if (Loot_IsSet) return (Loot_IsNull ? nullptr : &Loot_Optional); return nullptr; }
	/** @brief Sets the value of Loot_Optional and also sets Loot_IsSet to true */
	FORCEINLINE void SetLoot(const FRHAPI_Loots& NewValue) { Loot_Optional = NewValue; Loot_IsSet = true; Loot_IsNull = false; }
	/** @brief Sets the value of Loot_Optional and also sets Loot_IsSet to true using move semantics */
	FORCEINLINE void SetLoot(FRHAPI_Loots&& NewValue) { Loot_Optional = NewValue; Loot_IsSet = true; Loot_IsNull = false; }
	/** @brief Clears the value of Loot_Optional and sets Loot_IsSet to false */
	void ClearLoot() { Loot_IsSet = false; Loot_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetLootToNull() { Loot_IsSet = true; Loot_IsNull = true; }
	/** @brief Checks whether Loot_Optional is set to null */
	FORCEINLINE bool IsLootNull() const { return Loot_IsSet && Loot_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_Items Items_Optional{  };
	/** @brief true if Items_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Items_IsSet{ false };
	/** @brief true if Items_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Items_IsNull{ false };
	/** @brief Gets the value of Items_Optional, regardless of it having been set */
	FORCEINLINE FRHAPI_Items& GetItems() { return Items_Optional; }
	/** @brief Gets the value of Items_Optional, regardless of it having been set */
	FORCEINLINE const FRHAPI_Items& GetItems() const { return Items_Optional; }
	/** @brief Gets the value of Items_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FRHAPI_Items& GetItems(const FRHAPI_Items& DefaultValue) const { if (Items_IsSet) return Items_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Items_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetItems(FRHAPI_Items& OutValue) const { if (Items_IsSet && !Items_IsNull) OutValue = Items_Optional; return Items_IsSet; }
	/** @brief Returns a pointer to Items_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FRHAPI_Items* GetItemsOrNull() { if (Items_IsSet) return (Items_IsNull ? nullptr : &Items_Optional); return nullptr; }
	/** @brief Returns a pointer to Items_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FRHAPI_Items* GetItemsOrNull() const { if (Items_IsSet) return (Items_IsNull ? nullptr : &Items_Optional); return nullptr; }
	/** @brief Sets the value of Items_Optional and also sets Items_IsSet to true */
	FORCEINLINE void SetItems(const FRHAPI_Items& NewValue) { Items_Optional = NewValue; Items_IsSet = true; Items_IsNull = false; }
	/** @brief Sets the value of Items_Optional and also sets Items_IsSet to true using move semantics */
	FORCEINLINE void SetItems(FRHAPI_Items&& NewValue) { Items_Optional = NewValue; Items_IsSet = true; Items_IsNull = false; }
	/** @brief Clears the value of Items_Optional and sets Items_IsSet to false */
	void ClearItems() { Items_IsSet = false; Items_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetItemsToNull() { Items_IsSet = true; Items_IsNull = true; }
	/** @brief Checks whether Items_Optional is set to null */
	FORCEINLINE bool IsItemsNull() const { return Items_IsSet && Items_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_PricePoints PricePoints_Optional{  };
	/** @brief true if PricePoints_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool PricePoints_IsSet{ false };
	/** @brief true if PricePoints_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool PricePoints_IsNull{ false };
	/** @brief Gets the value of PricePoints_Optional, regardless of it having been set */
	FORCEINLINE FRHAPI_PricePoints& GetPricePoints() { return PricePoints_Optional; }
	/** @brief Gets the value of PricePoints_Optional, regardless of it having been set */
	FORCEINLINE const FRHAPI_PricePoints& GetPricePoints() const { return PricePoints_Optional; }
	/** @brief Gets the value of PricePoints_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FRHAPI_PricePoints& GetPricePoints(const FRHAPI_PricePoints& DefaultValue) const { if (PricePoints_IsSet) return PricePoints_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of PricePoints_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetPricePoints(FRHAPI_PricePoints& OutValue) const { if (PricePoints_IsSet && !PricePoints_IsNull) OutValue = PricePoints_Optional; return PricePoints_IsSet; }
	/** @brief Returns a pointer to PricePoints_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FRHAPI_PricePoints* GetPricePointsOrNull() { if (PricePoints_IsSet) return (PricePoints_IsNull ? nullptr : &PricePoints_Optional); return nullptr; }
	/** @brief Returns a pointer to PricePoints_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FRHAPI_PricePoints* GetPricePointsOrNull() const { if (PricePoints_IsSet) return (PricePoints_IsNull ? nullptr : &PricePoints_Optional); return nullptr; }
	/** @brief Sets the value of PricePoints_Optional and also sets PricePoints_IsSet to true */
	FORCEINLINE void SetPricePoints(const FRHAPI_PricePoints& NewValue) { PricePoints_Optional = NewValue; PricePoints_IsSet = true; PricePoints_IsNull = false; }
	/** @brief Sets the value of PricePoints_Optional and also sets PricePoints_IsSet to true using move semantics */
	FORCEINLINE void SetPricePoints(FRHAPI_PricePoints&& NewValue) { PricePoints_Optional = NewValue; PricePoints_IsSet = true; PricePoints_IsNull = false; }
	/** @brief Clears the value of PricePoints_Optional and sets PricePoints_IsSet to false */
	void ClearPricePoints() { PricePoints_IsSet = false; PricePoints_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetPricePointsToNull() { PricePoints_IsSet = true; PricePoints_IsNull = true; }
	/** @brief Checks whether PricePoints_Optional is set to null */
	FORCEINLINE bool IsPricePointsNull() const { return PricePoints_IsSet && PricePoints_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_TimeFrames TimeFrames_Optional{  };
	/** @brief true if TimeFrames_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool TimeFrames_IsSet{ false };
	/** @brief true if TimeFrames_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool TimeFrames_IsNull{ false };
	/** @brief Gets the value of TimeFrames_Optional, regardless of it having been set */
	FORCEINLINE FRHAPI_TimeFrames& GetTimeFrames() { return TimeFrames_Optional; }
	/** @brief Gets the value of TimeFrames_Optional, regardless of it having been set */
	FORCEINLINE const FRHAPI_TimeFrames& GetTimeFrames() const { return TimeFrames_Optional; }
	/** @brief Gets the value of TimeFrames_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FRHAPI_TimeFrames& GetTimeFrames(const FRHAPI_TimeFrames& DefaultValue) const { if (TimeFrames_IsSet) return TimeFrames_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of TimeFrames_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetTimeFrames(FRHAPI_TimeFrames& OutValue) const { if (TimeFrames_IsSet && !TimeFrames_IsNull) OutValue = TimeFrames_Optional; return TimeFrames_IsSet; }
	/** @brief Returns a pointer to TimeFrames_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FRHAPI_TimeFrames* GetTimeFramesOrNull() { if (TimeFrames_IsSet) return (TimeFrames_IsNull ? nullptr : &TimeFrames_Optional); return nullptr; }
	/** @brief Returns a pointer to TimeFrames_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FRHAPI_TimeFrames* GetTimeFramesOrNull() const { if (TimeFrames_IsSet) return (TimeFrames_IsNull ? nullptr : &TimeFrames_Optional); return nullptr; }
	/** @brief Sets the value of TimeFrames_Optional and also sets TimeFrames_IsSet to true */
	FORCEINLINE void SetTimeFrames(const FRHAPI_TimeFrames& NewValue) { TimeFrames_Optional = NewValue; TimeFrames_IsSet = true; TimeFrames_IsNull = false; }
	/** @brief Sets the value of TimeFrames_Optional and also sets TimeFrames_IsSet to true using move semantics */
	FORCEINLINE void SetTimeFrames(FRHAPI_TimeFrames&& NewValue) { TimeFrames_Optional = NewValue; TimeFrames_IsSet = true; TimeFrames_IsNull = false; }
	/** @brief Clears the value of TimeFrames_Optional and sets TimeFrames_IsSet to false */
	void ClearTimeFrames() { TimeFrames_IsSet = false; TimeFrames_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetTimeFramesToNull() { TimeFrames_IsSet = true; TimeFrames_IsNull = true; }
	/** @brief Checks whether TimeFrames_Optional is set to null */
	FORCEINLINE bool IsTimeFramesNull() const { return TimeFrames_IsSet && TimeFrames_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_PlatformSKUs Skus_Optional{  };
	/** @brief true if Skus_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Skus_IsSet{ false };
	/** @brief true if Skus_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Skus_IsNull{ false };
	/** @brief Gets the value of Skus_Optional, regardless of it having been set */
	FORCEINLINE FRHAPI_PlatformSKUs& GetSkus() { return Skus_Optional; }
	/** @brief Gets the value of Skus_Optional, regardless of it having been set */
	FORCEINLINE const FRHAPI_PlatformSKUs& GetSkus() const { return Skus_Optional; }
	/** @brief Gets the value of Skus_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FRHAPI_PlatformSKUs& GetSkus(const FRHAPI_PlatformSKUs& DefaultValue) const { if (Skus_IsSet) return Skus_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Skus_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetSkus(FRHAPI_PlatformSKUs& OutValue) const { if (Skus_IsSet && !Skus_IsNull) OutValue = Skus_Optional; return Skus_IsSet; }
	/** @brief Returns a pointer to Skus_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FRHAPI_PlatformSKUs* GetSkusOrNull() { if (Skus_IsSet) return (Skus_IsNull ? nullptr : &Skus_Optional); return nullptr; }
	/** @brief Returns a pointer to Skus_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FRHAPI_PlatformSKUs* GetSkusOrNull() const { if (Skus_IsSet) return (Skus_IsNull ? nullptr : &Skus_Optional); return nullptr; }
	/** @brief Sets the value of Skus_Optional and also sets Skus_IsSet to true */
	FORCEINLINE void SetSkus(const FRHAPI_PlatformSKUs& NewValue) { Skus_Optional = NewValue; Skus_IsSet = true; Skus_IsNull = false; }
	/** @brief Sets the value of Skus_Optional and also sets Skus_IsSet to true using move semantics */
	FORCEINLINE void SetSkus(FRHAPI_PlatformSKUs&& NewValue) { Skus_Optional = NewValue; Skus_IsSet = true; Skus_IsNull = false; }
	/** @brief Clears the value of Skus_Optional and sets Skus_IsSet to false */
	void ClearSkus() { Skus_IsSet = false; Skus_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetSkusToNull() { Skus_IsSet = true; Skus_IsNull = true; }
	/** @brief Checks whether Skus_Optional is set to null */
	FORCEINLINE bool IsSkusNull() const { return Skus_IsSet && Skus_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_CacheInfo CacheInfo_Optional{  };
	/** @brief true if CacheInfo_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool CacheInfo_IsSet{ false };
	/** @brief true if CacheInfo_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool CacheInfo_IsNull{ false };
	/** @brief Gets the value of CacheInfo_Optional, regardless of it having been set */
	FORCEINLINE FRHAPI_CacheInfo& GetCacheInfo() { return CacheInfo_Optional; }
	/** @brief Gets the value of CacheInfo_Optional, regardless of it having been set */
	FORCEINLINE const FRHAPI_CacheInfo& GetCacheInfo() const { return CacheInfo_Optional; }
	/** @brief Gets the value of CacheInfo_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FRHAPI_CacheInfo& GetCacheInfo(const FRHAPI_CacheInfo& DefaultValue) const { if (CacheInfo_IsSet) return CacheInfo_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of CacheInfo_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetCacheInfo(FRHAPI_CacheInfo& OutValue) const { if (CacheInfo_IsSet && !CacheInfo_IsNull) OutValue = CacheInfo_Optional; return CacheInfo_IsSet; }
	/** @brief Returns a pointer to CacheInfo_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FRHAPI_CacheInfo* GetCacheInfoOrNull() { if (CacheInfo_IsSet) return (CacheInfo_IsNull ? nullptr : &CacheInfo_Optional); return nullptr; }
	/** @brief Returns a pointer to CacheInfo_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FRHAPI_CacheInfo* GetCacheInfoOrNull() const { if (CacheInfo_IsSet) return (CacheInfo_IsNull ? nullptr : &CacheInfo_Optional); return nullptr; }
	/** @brief Sets the value of CacheInfo_Optional and also sets CacheInfo_IsSet to true */
	FORCEINLINE void SetCacheInfo(const FRHAPI_CacheInfo& NewValue) { CacheInfo_Optional = NewValue; CacheInfo_IsSet = true; CacheInfo_IsNull = false; }
	/** @brief Sets the value of CacheInfo_Optional and also sets CacheInfo_IsSet to true using move semantics */
	FORCEINLINE void SetCacheInfo(FRHAPI_CacheInfo&& NewValue) { CacheInfo_Optional = NewValue; CacheInfo_IsSet = true; CacheInfo_IsNull = false; }
	/** @brief Clears the value of CacheInfo_Optional and sets CacheInfo_IsSet to false */
	void ClearCacheInfo() { CacheInfo_IsSet = false; CacheInfo_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetCacheInfoToNull() { CacheInfo_IsSet = true; CacheInfo_IsNull = true; }
	/** @brief Checks whether CacheInfo_Optional is set to null */
	FORCEINLINE bool IsCacheInfoNull() const { return CacheInfo_IsSet && CacheInfo_IsNull; }
};

/** @} */
