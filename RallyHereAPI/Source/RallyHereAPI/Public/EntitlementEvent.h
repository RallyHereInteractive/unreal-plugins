// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "EntitlementActionType.h"
#include "EntitlementEventStatus.h"
#include "EntitlementType.h"
#include "InventoryPlatform.h"
#include "EntitlementEvent.generated.h"

/** @defgroup RHAPI_EntitlementEvent RallyHere API Model EntitlementEvent
 *  @{
 */

/**
 * @brief 
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_EntitlementEvent : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	/** @brief The unique identifier for the event */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString EventId{  };
	/** @brief Gets the value of EventId */
	FORCEINLINE FString& GetEventId() { return EventId; }
	/** @brief Gets the value of EventId */
	FORCEINLINE const FString& GetEventId() const { return EventId; }
	/** @brief Sets the value of EventId */
	FORCEINLINE void SetEventId(const FString& NewValue) { EventId = NewValue;   }
	/** @brief Sets the value of EventId using move semantics */
	FORCEINLINE void SetEventId(FString&& NewValue) { EventId = NewValue;   }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	ERHAPI_EntitlementActionType ActionType{  };
	/** @brief Gets the value of ActionType */
	FORCEINLINE ERHAPI_EntitlementActionType& GetActionType() { return ActionType; }
	/** @brief Gets the value of ActionType */
	FORCEINLINE const ERHAPI_EntitlementActionType& GetActionType() const { return ActionType; }
	/** @brief Sets the value of ActionType */
	FORCEINLINE void SetActionType(const ERHAPI_EntitlementActionType& NewValue) { ActionType = NewValue;   }
	/** @brief Sets the value of ActionType using move semantics */
	FORCEINLINE void SetActionType(ERHAPI_EntitlementActionType&& NewValue) { ActionType = NewValue;   }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	ERHAPI_EntitlementType EntitlementType_Optional{  };
	/** @brief true if EntitlementType_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool EntitlementType_IsSet{ false };
	/** @brief true if EntitlementType_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool EntitlementType_IsNull{ false };
	/** @brief Gets the value of EntitlementType_Optional, regardless of it having been set */
	FORCEINLINE ERHAPI_EntitlementType& GetEntitlementType() { return EntitlementType_Optional; }
	/** @brief Gets the value of EntitlementType_Optional, regardless of it having been set */
	FORCEINLINE const ERHAPI_EntitlementType& GetEntitlementType() const { return EntitlementType_Optional; }
	/** @brief Gets the value of EntitlementType_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const ERHAPI_EntitlementType& GetEntitlementType(const ERHAPI_EntitlementType& DefaultValue) const { if (EntitlementType_IsSet) return EntitlementType_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of EntitlementType_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetEntitlementType(ERHAPI_EntitlementType& OutValue) const { if (EntitlementType_IsSet && !EntitlementType_IsNull) OutValue = EntitlementType_Optional; return EntitlementType_IsSet; }
	/** @brief Returns a pointer to EntitlementType_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE ERHAPI_EntitlementType* GetEntitlementTypeOrNull() { if (EntitlementType_IsSet) return (EntitlementType_IsNull ? nullptr : &EntitlementType_Optional); return nullptr; }
	/** @brief Returns a pointer to EntitlementType_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const ERHAPI_EntitlementType* GetEntitlementTypeOrNull() const { if (EntitlementType_IsSet) return (EntitlementType_IsNull ? nullptr : &EntitlementType_Optional); return nullptr; }
	/** @brief Sets the value of EntitlementType_Optional and also sets EntitlementType_IsSet to true */
	FORCEINLINE void SetEntitlementType(const ERHAPI_EntitlementType& NewValue) { EntitlementType_Optional = NewValue; EntitlementType_IsSet = true; EntitlementType_IsNull = false; }
	/** @brief Sets the value of EntitlementType_Optional and also sets EntitlementType_IsSet to true using move semantics */
	FORCEINLINE void SetEntitlementType(ERHAPI_EntitlementType&& NewValue) { EntitlementType_Optional = NewValue; EntitlementType_IsSet = true; EntitlementType_IsNull = false; }
	/** @brief Clears the value of EntitlementType_Optional and sets EntitlementType_IsSet to false */
	void ClearEntitlementType() { EntitlementType_IsSet = false; EntitlementType_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetEntitlementTypeToNull() { EntitlementType_IsSet = true; EntitlementType_IsNull = true; }
	/** @brief Checks whether EntitlementType_Optional is set to null */
	FORCEINLINE bool IsEntitlementTypeNull() const { return EntitlementType_IsSet && EntitlementType_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	ERHAPI_EntitlementEventStatus Status{  };
	/** @brief Gets the value of Status */
	FORCEINLINE ERHAPI_EntitlementEventStatus& GetStatus() { return Status; }
	/** @brief Gets the value of Status */
	FORCEINLINE const ERHAPI_EntitlementEventStatus& GetStatus() const { return Status; }
	/** @brief Sets the value of Status */
	FORCEINLINE void SetStatus(const ERHAPI_EntitlementEventStatus& NewValue) { Status = NewValue;   }
	/** @brief Sets the value of Status using move semantics */
	FORCEINLINE void SetStatus(ERHAPI_EntitlementEventStatus&& NewValue) { Status = NewValue;   }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FGuid PlayerUuid{  };
	/** @brief true if PlayerUuid has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool PlayerUuid_IsNull{ false };
	/** @brief Gets the value of PlayerUuid */
	FORCEINLINE FGuid& GetPlayerUuid() { return PlayerUuid; }
	/** @brief Gets the value of PlayerUuid */
	FORCEINLINE const FGuid& GetPlayerUuid() const { return PlayerUuid; }
	/** @brief Sets the value of PlayerUuid */
	FORCEINLINE void SetPlayerUuid(const FGuid& NewValue) { PlayerUuid = NewValue;  PlayerUuid_IsNull = false; }
	/** @brief Sets the value of PlayerUuid using move semantics */
	FORCEINLINE void SetPlayerUuid(FGuid&& NewValue) { PlayerUuid = NewValue;  PlayerUuid_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetPlayerUuidToNull() { PlayerUuid_IsNull = true; }
	/** @brief Checks whether PlayerUuid is set to null */
	FORCEINLINE bool IsPlayerUuidNull() const { return  PlayerUuid_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 PlayerId_Optional{ 0 };
	/** @brief true if PlayerId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool PlayerId_IsSet{ false };
	/** @brief true if PlayerId_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool PlayerId_IsNull{ false };
	/** @brief Gets the value of PlayerId_Optional, regardless of it having been set */
	FORCEINLINE int32& GetPlayerId() { return PlayerId_Optional; }
	/** @brief Gets the value of PlayerId_Optional, regardless of it having been set */
	FORCEINLINE const int32& GetPlayerId() const { return PlayerId_Optional; }
	/** @brief Gets the value of PlayerId_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const int32& GetPlayerId(const int32& DefaultValue) const { if (PlayerId_IsSet) return PlayerId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of PlayerId_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetPlayerId(int32& OutValue) const { if (PlayerId_IsSet && !PlayerId_IsNull) OutValue = PlayerId_Optional; return PlayerId_IsSet; }
	/** @brief Returns a pointer to PlayerId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE int32* GetPlayerIdOrNull() { if (PlayerId_IsSet) return (PlayerId_IsNull ? nullptr : &PlayerId_Optional); return nullptr; }
	/** @brief Returns a pointer to PlayerId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const int32* GetPlayerIdOrNull() const { if (PlayerId_IsSet) return (PlayerId_IsNull ? nullptr : &PlayerId_Optional); return nullptr; }
	/** @brief Sets the value of PlayerId_Optional and also sets PlayerId_IsSet to true */
	FORCEINLINE void SetPlayerId(const int32& NewValue) { PlayerId_Optional = NewValue; PlayerId_IsSet = true; PlayerId_IsNull = false; }
	/** @brief Sets the value of PlayerId_Optional and also sets PlayerId_IsSet to true using move semantics */
	FORCEINLINE void SetPlayerId(int32&& NewValue) { PlayerId_Optional = NewValue; PlayerId_IsSet = true; PlayerId_IsNull = false; }
	/** @brief Clears the value of PlayerId_Optional and sets PlayerId_IsSet to false */
	void ClearPlayerId() { PlayerId_Optional = 0; PlayerId_IsSet = false; PlayerId_IsNull = false; }
	/** @brief Returns the default value of PlayerId */
	FORCEINLINE int32 GetDefaultValue_PlayerId() { return 0; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetPlayerIdToNull() { PlayerId_IsSet = true; PlayerId_IsNull = true; }
	/** @brief Checks whether PlayerId_Optional is set to null */
	FORCEINLINE bool IsPlayerIdNull() const { return PlayerId_IsSet && PlayerId_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	ERHAPI_InventoryPlatform Platform{  };
	/** @brief Gets the value of Platform */
	FORCEINLINE ERHAPI_InventoryPlatform& GetPlatform() { return Platform; }
	/** @brief Gets the value of Platform */
	FORCEINLINE const ERHAPI_InventoryPlatform& GetPlatform() const { return Platform; }
	/** @brief Sets the value of Platform */
	FORCEINLINE void SetPlatform(const ERHAPI_InventoryPlatform& NewValue) { Platform = NewValue;   }
	/** @brief Sets the value of Platform using move semantics */
	FORCEINLINE void SetPlatform(ERHAPI_InventoryPlatform&& NewValue) { Platform = NewValue;   }

	/** @brief The platform user ID for the event */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString PlatformUserId{  };
	/** @brief Gets the value of PlatformUserId */
	FORCEINLINE FString& GetPlatformUserId() { return PlatformUserId; }
	/** @brief Gets the value of PlatformUserId */
	FORCEINLINE const FString& GetPlatformUserId() const { return PlatformUserId; }
	/** @brief Sets the value of PlatformUserId */
	FORCEINLINE void SetPlatformUserId(const FString& NewValue) { PlatformUserId = NewValue;   }
	/** @brief Sets the value of PlatformUserId using move semantics */
	FORCEINLINE void SetPlatformUserId(FString&& NewValue) { PlatformUserId = NewValue;   }

	/** @brief The SKU for the event */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString Sku{  };
	/** @brief Gets the value of Sku */
	FORCEINLINE FString& GetSku() { return Sku; }
	/** @brief Gets the value of Sku */
	FORCEINLINE const FString& GetSku() const { return Sku; }
	/** @brief Sets the value of Sku */
	FORCEINLINE void SetSku(const FString& NewValue) { Sku = NewValue;   }
	/** @brief Sets the value of Sku using move semantics */
	FORCEINLINE void SetSku(FString&& NewValue) { Sku = NewValue;   }

	/** @brief The quantity for the event */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 Quantity{ 0 };
	/** @brief Gets the value of Quantity */
	FORCEINLINE int32& GetQuantity() { return Quantity; }
	/** @brief Gets the value of Quantity */
	FORCEINLINE const int32& GetQuantity() const { return Quantity; }
	/** @brief Sets the value of Quantity */
	FORCEINLINE void SetQuantity(const int32& NewValue) { Quantity = NewValue;   }
	/** @brief Sets the value of Quantity using move semantics */
	FORCEINLINE void SetQuantity(int32&& NewValue) { Quantity = NewValue;   }
	/** @brief Returns the default value of Quantity */
	FORCEINLINE int32 GetDefaultValue_Quantity() { return 0; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString PlatformTransactionId_Optional{  };
	/** @brief true if PlatformTransactionId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool PlatformTransactionId_IsSet{ false };
	/** @brief true if PlatformTransactionId_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool PlatformTransactionId_IsNull{ false };
	/** @brief Gets the value of PlatformTransactionId_Optional, regardless of it having been set */
	FORCEINLINE FString& GetPlatformTransactionId() { return PlatformTransactionId_Optional; }
	/** @brief Gets the value of PlatformTransactionId_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetPlatformTransactionId() const { return PlatformTransactionId_Optional; }
	/** @brief Gets the value of PlatformTransactionId_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetPlatformTransactionId(const FString& DefaultValue) const { if (PlatformTransactionId_IsSet) return PlatformTransactionId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of PlatformTransactionId_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetPlatformTransactionId(FString& OutValue) const { if (PlatformTransactionId_IsSet && !PlatformTransactionId_IsNull) OutValue = PlatformTransactionId_Optional; return PlatformTransactionId_IsSet; }
	/** @brief Returns a pointer to PlatformTransactionId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetPlatformTransactionIdOrNull() { if (PlatformTransactionId_IsSet) return (PlatformTransactionId_IsNull ? nullptr : &PlatformTransactionId_Optional); return nullptr; }
	/** @brief Returns a pointer to PlatformTransactionId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetPlatformTransactionIdOrNull() const { if (PlatformTransactionId_IsSet) return (PlatformTransactionId_IsNull ? nullptr : &PlatformTransactionId_Optional); return nullptr; }
	/** @brief Sets the value of PlatformTransactionId_Optional and also sets PlatformTransactionId_IsSet to true */
	FORCEINLINE void SetPlatformTransactionId(const FString& NewValue) { PlatformTransactionId_Optional = NewValue; PlatformTransactionId_IsSet = true; PlatformTransactionId_IsNull = false; }
	/** @brief Sets the value of PlatformTransactionId_Optional and also sets PlatformTransactionId_IsSet to true using move semantics */
	FORCEINLINE void SetPlatformTransactionId(FString&& NewValue) { PlatformTransactionId_Optional = NewValue; PlatformTransactionId_IsSet = true; PlatformTransactionId_IsNull = false; }
	/** @brief Clears the value of PlatformTransactionId_Optional and sets PlatformTransactionId_IsSet to false */
	void ClearPlatformTransactionId() { PlatformTransactionId_IsSet = false; PlatformTransactionId_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetPlatformTransactionIdToNull() { PlatformTransactionId_IsSet = true; PlatformTransactionId_IsNull = true; }
	/** @brief Checks whether PlatformTransactionId_Optional is set to null */
	FORCEINLINE bool IsPlatformTransactionIdNull() const { return PlatformTransactionId_IsSet && PlatformTransactionId_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TMap<FString, FRHAPI_JsonValue> PlatformData_Optional{  };
	/** @brief true if PlatformData_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool PlatformData_IsSet{ false };
	/** @brief true if PlatformData_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool PlatformData_IsNull{ false };
	/** @brief Gets the value of PlatformData_Optional, regardless of it having been set */
	FORCEINLINE TMap<FString, FRHAPI_JsonValue>& GetPlatformData() { return PlatformData_Optional; }
	/** @brief Gets the value of PlatformData_Optional, regardless of it having been set */
	FORCEINLINE const TMap<FString, FRHAPI_JsonValue>& GetPlatformData() const { return PlatformData_Optional; }
	/** @brief Gets the value of PlatformData_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const TMap<FString, FRHAPI_JsonValue>& GetPlatformData(const TMap<FString, FRHAPI_JsonValue>& DefaultValue) const { if (PlatformData_IsSet) return PlatformData_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of PlatformData_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetPlatformData(TMap<FString, FRHAPI_JsonValue>& OutValue) const { if (PlatformData_IsSet && !PlatformData_IsNull) OutValue = PlatformData_Optional; return PlatformData_IsSet; }
	/** @brief Returns a pointer to PlatformData_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE TMap<FString, FRHAPI_JsonValue>* GetPlatformDataOrNull() { if (PlatformData_IsSet) return (PlatformData_IsNull ? nullptr : &PlatformData_Optional); return nullptr; }
	/** @brief Returns a pointer to PlatformData_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const TMap<FString, FRHAPI_JsonValue>* GetPlatformDataOrNull() const { if (PlatformData_IsSet) return (PlatformData_IsNull ? nullptr : &PlatformData_Optional); return nullptr; }
	/** @brief Sets the value of PlatformData_Optional and also sets PlatformData_IsSet to true */
	FORCEINLINE void SetPlatformData(const TMap<FString, FRHAPI_JsonValue>& NewValue) { PlatformData_Optional = NewValue; PlatformData_IsSet = true; PlatformData_IsNull = false; }
	/** @brief Sets the value of PlatformData_Optional and also sets PlatformData_IsSet to true using move semantics */
	FORCEINLINE void SetPlatformData(TMap<FString, FRHAPI_JsonValue>&& NewValue) { PlatformData_Optional = NewValue; PlatformData_IsSet = true; PlatformData_IsNull = false; }
	/** @brief Clears the value of PlatformData_Optional and sets PlatformData_IsSet to false */
	void ClearPlatformData() { PlatformData_IsSet = false; PlatformData_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetPlatformDataToNull() { PlatformData_IsSet = true; PlatformData_IsNull = true; }
	/** @brief Checks whether PlatformData_Optional is set to null */
	FORCEINLINE bool IsPlatformDataNull() const { return PlatformData_IsSet && PlatformData_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString OrderId_Optional{  };
	/** @brief true if OrderId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool OrderId_IsSet{ false };
	/** @brief true if OrderId_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool OrderId_IsNull{ false };
	/** @brief Gets the value of OrderId_Optional, regardless of it having been set */
	FORCEINLINE FString& GetOrderId() { return OrderId_Optional; }
	/** @brief Gets the value of OrderId_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetOrderId() const { return OrderId_Optional; }
	/** @brief Gets the value of OrderId_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetOrderId(const FString& DefaultValue) const { if (OrderId_IsSet) return OrderId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of OrderId_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetOrderId(FString& OutValue) const { if (OrderId_IsSet && !OrderId_IsNull) OutValue = OrderId_Optional; return OrderId_IsSet; }
	/** @brief Returns a pointer to OrderId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetOrderIdOrNull() { if (OrderId_IsSet) return (OrderId_IsNull ? nullptr : &OrderId_Optional); return nullptr; }
	/** @brief Returns a pointer to OrderId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetOrderIdOrNull() const { if (OrderId_IsSet) return (OrderId_IsNull ? nullptr : &OrderId_Optional); return nullptr; }
	/** @brief Sets the value of OrderId_Optional and also sets OrderId_IsSet to true */
	FORCEINLINE void SetOrderId(const FString& NewValue) { OrderId_Optional = NewValue; OrderId_IsSet = true; OrderId_IsNull = false; }
	/** @brief Sets the value of OrderId_Optional and also sets OrderId_IsSet to true using move semantics */
	FORCEINLINE void SetOrderId(FString&& NewValue) { OrderId_Optional = NewValue; OrderId_IsSet = true; OrderId_IsNull = false; }
	/** @brief Clears the value of OrderId_Optional and sets OrderId_IsSet to false */
	void ClearOrderId() { OrderId_IsSet = false; OrderId_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetOrderIdToNull() { OrderId_IsSet = true; OrderId_IsNull = true; }
	/** @brief Checks whether OrderId_Optional is set to null */
	FORCEINLINE bool IsOrderIdNull() const { return OrderId_IsSet && OrderId_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 LootId_Optional{ 0 };
	/** @brief true if LootId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool LootId_IsSet{ false };
	/** @brief true if LootId_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool LootId_IsNull{ false };
	/** @brief Gets the value of LootId_Optional, regardless of it having been set */
	FORCEINLINE int32& GetLootId() { return LootId_Optional; }
	/** @brief Gets the value of LootId_Optional, regardless of it having been set */
	FORCEINLINE const int32& GetLootId() const { return LootId_Optional; }
	/** @brief Gets the value of LootId_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const int32& GetLootId(const int32& DefaultValue) const { if (LootId_IsSet) return LootId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of LootId_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetLootId(int32& OutValue) const { if (LootId_IsSet && !LootId_IsNull) OutValue = LootId_Optional; return LootId_IsSet; }
	/** @brief Returns a pointer to LootId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE int32* GetLootIdOrNull() { if (LootId_IsSet) return (LootId_IsNull ? nullptr : &LootId_Optional); return nullptr; }
	/** @brief Returns a pointer to LootId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const int32* GetLootIdOrNull() const { if (LootId_IsSet) return (LootId_IsNull ? nullptr : &LootId_Optional); return nullptr; }
	/** @brief Sets the value of LootId_Optional and also sets LootId_IsSet to true */
	FORCEINLINE void SetLootId(const int32& NewValue) { LootId_Optional = NewValue; LootId_IsSet = true; LootId_IsNull = false; }
	/** @brief Sets the value of LootId_Optional and also sets LootId_IsSet to true using move semantics */
	FORCEINLINE void SetLootId(int32&& NewValue) { LootId_Optional = NewValue; LootId_IsSet = true; LootId_IsNull = false; }
	/** @brief Clears the value of LootId_Optional and sets LootId_IsSet to false */
	void ClearLootId() { LootId_Optional = 0; LootId_IsSet = false; LootId_IsNull = false; }
	/** @brief Returns the default value of LootId */
	FORCEINLINE int32 GetDefaultValue_LootId() { return 0; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetLootIdToNull() { LootId_IsSet = true; LootId_IsNull = true; }
	/** @brief Checks whether LootId_Optional is set to null */
	FORCEINLINE bool IsLootIdNull() const { return LootId_IsSet && LootId_IsNull; }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FGuid KeyClaimUuid_Optional{  };
	/** @brief true if KeyClaimUuid_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool KeyClaimUuid_IsSet{ false };
	/** @brief true if KeyClaimUuid_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool KeyClaimUuid_IsNull{ false };
	/** @brief Gets the value of KeyClaimUuid_Optional, regardless of it having been set */
	FORCEINLINE FGuid& GetKeyClaimUuid() { return KeyClaimUuid_Optional; }
	/** @brief Gets the value of KeyClaimUuid_Optional, regardless of it having been set */
	FORCEINLINE const FGuid& GetKeyClaimUuid() const { return KeyClaimUuid_Optional; }
	/** @brief Gets the value of KeyClaimUuid_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FGuid& GetKeyClaimUuid(const FGuid& DefaultValue) const { if (KeyClaimUuid_IsSet) return KeyClaimUuid_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of KeyClaimUuid_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetKeyClaimUuid(FGuid& OutValue) const { if (KeyClaimUuid_IsSet && !KeyClaimUuid_IsNull) OutValue = KeyClaimUuid_Optional; return KeyClaimUuid_IsSet; }
	/** @brief Returns a pointer to KeyClaimUuid_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FGuid* GetKeyClaimUuidOrNull() { if (KeyClaimUuid_IsSet) return (KeyClaimUuid_IsNull ? nullptr : &KeyClaimUuid_Optional); return nullptr; }
	/** @brief Returns a pointer to KeyClaimUuid_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FGuid* GetKeyClaimUuidOrNull() const { if (KeyClaimUuid_IsSet) return (KeyClaimUuid_IsNull ? nullptr : &KeyClaimUuid_Optional); return nullptr; }
	/** @brief Sets the value of KeyClaimUuid_Optional and also sets KeyClaimUuid_IsSet to true */
	FORCEINLINE void SetKeyClaimUuid(const FGuid& NewValue) { KeyClaimUuid_Optional = NewValue; KeyClaimUuid_IsSet = true; KeyClaimUuid_IsNull = false; }
	/** @brief Sets the value of KeyClaimUuid_Optional and also sets KeyClaimUuid_IsSet to true using move semantics */
	FORCEINLINE void SetKeyClaimUuid(FGuid&& NewValue) { KeyClaimUuid_Optional = NewValue; KeyClaimUuid_IsSet = true; KeyClaimUuid_IsNull = false; }
	/** @brief Clears the value of KeyClaimUuid_Optional and sets KeyClaimUuid_IsSet to false */
	void ClearKeyClaimUuid() { KeyClaimUuid_IsSet = false; KeyClaimUuid_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetKeyClaimUuidToNull() { KeyClaimUuid_IsSet = true; KeyClaimUuid_IsNull = true; }
	/** @brief Checks whether KeyClaimUuid_Optional is set to null */
	FORCEINLINE bool IsKeyClaimUuidNull() const { return KeyClaimUuid_IsSet && KeyClaimUuid_IsNull; }

	/** @brief The timestamp for the event */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FDateTime Created{  };
	/** @brief Gets the value of Created */
	FORCEINLINE FDateTime& GetCreated() { return Created; }
	/** @brief Gets the value of Created */
	FORCEINLINE const FDateTime& GetCreated() const { return Created; }
	/** @brief Sets the value of Created */
	FORCEINLINE void SetCreated(const FDateTime& NewValue) { Created = NewValue;   }
	/** @brief Sets the value of Created using move semantics */
	FORCEINLINE void SetCreated(FDateTime&& NewValue) { Created = NewValue;   }

	/** @brief The timestamp for the event */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FDateTime LastModified{  };
	/** @brief Gets the value of LastModified */
	FORCEINLINE FDateTime& GetLastModified() { return LastModified; }
	/** @brief Gets the value of LastModified */
	FORCEINLINE const FDateTime& GetLastModified() const { return LastModified; }
	/** @brief Sets the value of LastModified */
	FORCEINLINE void SetLastModified(const FDateTime& NewValue) { LastModified = NewValue;   }
	/** @brief Sets the value of LastModified using move semantics */
	FORCEINLINE void SetLastModified(FDateTime&& NewValue) { LastModified = NewValue;   }
};

/** @} */
