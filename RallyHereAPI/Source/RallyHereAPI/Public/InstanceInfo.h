// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "HostType.h"
#include "InstanceHealthStatus.h"
#include "InstanceJoinableStatus.h"
#include "InstanceStartupParams.h"
#include "JoinParams.h"
#include "InstanceInfo.generated.h"

/** @defgroup RHAPI_InstanceInfo RallyHere API Model InstanceInfo
 *  @{
 */

/**
 * @brief Information about the instance resource in a session
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_InstanceInfo : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	/** @brief Allocation ID for instance that's been spun up */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString AllocationId_Optional{  };
	/** @brief true if AllocationId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool AllocationId_IsSet{ false };
	/** @brief Gets the value of AllocationId_Optional, regardless of it having been set */
	FORCEINLINE FString& GetAllocationId() { return AllocationId_Optional; }
	/** @brief Gets the value of AllocationId_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetAllocationId() const { return AllocationId_Optional; }
	/** @brief Gets the value of AllocationId_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetAllocationId(const FString& DefaultValue) const { if (AllocationId_IsSet) return AllocationId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of AllocationId_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetAllocationId(FString& OutValue) const { if (AllocationId_IsSet) OutValue = AllocationId_Optional; return AllocationId_IsSet; }
	/** @brief Returns a pointer to AllocationId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetAllocationIdOrNull() { if (AllocationId_IsSet) return (&AllocationId_Optional); return nullptr; }
	/** @brief Returns a pointer to AllocationId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetAllocationIdOrNull() const { if (AllocationId_IsSet) return (&AllocationId_Optional); return nullptr; }
	/** @brief Sets the value of AllocationId_Optional and also sets AllocationId_IsSet to true */
	FORCEINLINE void SetAllocationId(const FString& NewValue) { AllocationId_Optional = NewValue; AllocationId_IsSet = true;  }
	/** @brief Sets the value of AllocationId_Optional and also sets AllocationId_IsSet to true using move semantics */
	FORCEINLINE void SetAllocationId(FString&& NewValue) { AllocationId_Optional = NewValue; AllocationId_IsSet = true;  }
	/** @brief Clears the value of AllocationId_Optional and sets AllocationId_IsSet to false */
	void ClearAllocationId() { AllocationId_IsSet = false;  }

	/** @brief Unique ID for the host/session relationship */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString InstanceId{  };
	/** @brief Gets the value of InstanceId */
	FORCEINLINE FString& GetInstanceId() { return InstanceId; }
	/** @brief Gets the value of InstanceId */
	FORCEINLINE const FString& GetInstanceId() const { return InstanceId; }
	/** @brief Sets the value of InstanceId */
	FORCEINLINE void SetInstanceId(const FString& NewValue) { InstanceId = NewValue;   }
	/** @brief Sets the value of InstanceId using move semantics */
	FORCEINLINE void SetInstanceId(FString&& NewValue) { InstanceId = NewValue;   }

	/** @brief Type of the host */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	ERHAPI_HostType HostType{  };
	/** @brief Gets the value of HostType */
	FORCEINLINE ERHAPI_HostType& GetHostType() { return HostType; }
	/** @brief Gets the value of HostType */
	FORCEINLINE const ERHAPI_HostType& GetHostType() const { return HostType; }
	/** @brief Sets the value of HostType */
	FORCEINLINE void SetHostType(const ERHAPI_HostType& NewValue) { HostType = NewValue;   }
	/** @brief Sets the value of HostType using move semantics */
	FORCEINLINE void SetHostType(ERHAPI_HostType&& NewValue) { HostType = NewValue;   }

	/** @brief Player ID of the host, if the host type is player */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 HostPlayerId_Optional{ 0 };
	/** @brief true if HostPlayerId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool HostPlayerId_IsSet{ false };
	/** @brief Gets the value of HostPlayerId_Optional, regardless of it having been set */
	FORCEINLINE int32& GetHostPlayerId() { return HostPlayerId_Optional; }
	/** @brief Gets the value of HostPlayerId_Optional, regardless of it having been set */
	FORCEINLINE const int32& GetHostPlayerId() const { return HostPlayerId_Optional; }
	/** @brief Gets the value of HostPlayerId_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const int32& GetHostPlayerId(const int32& DefaultValue) const { if (HostPlayerId_IsSet) return HostPlayerId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of HostPlayerId_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetHostPlayerId(int32& OutValue) const { if (HostPlayerId_IsSet) OutValue = HostPlayerId_Optional; return HostPlayerId_IsSet; }
	/** @brief Returns a pointer to HostPlayerId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE int32* GetHostPlayerIdOrNull() { if (HostPlayerId_IsSet) return (&HostPlayerId_Optional); return nullptr; }
	/** @brief Returns a pointer to HostPlayerId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const int32* GetHostPlayerIdOrNull() const { if (HostPlayerId_IsSet) return (&HostPlayerId_Optional); return nullptr; }
	/** @brief Sets the value of HostPlayerId_Optional and also sets HostPlayerId_IsSet to true */
	FORCEINLINE void SetHostPlayerId(const int32& NewValue) { HostPlayerId_Optional = NewValue; HostPlayerId_IsSet = true;  }
	/** @brief Sets the value of HostPlayerId_Optional and also sets HostPlayerId_IsSet to true using move semantics */
	FORCEINLINE void SetHostPlayerId(int32&& NewValue) { HostPlayerId_Optional = NewValue; HostPlayerId_IsSet = true;  }
	/** @brief Clears the value of HostPlayerId_Optional and sets HostPlayerId_IsSet to false */
	void ClearHostPlayerId() { HostPlayerId_Optional = 0; HostPlayerId_IsSet = false;  }
	/** @brief Returns the default value of HostPlayerId */
	FORCEINLINE int32 GetDefaultValue_HostPlayerId() { return 0; }

	/** @brief Player UUID of the host, if the host type is player */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FGuid HostPlayerUuid_Optional{  };
	/** @brief true if HostPlayerUuid_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool HostPlayerUuid_IsSet{ false };
	/** @brief Gets the value of HostPlayerUuid_Optional, regardless of it having been set */
	FORCEINLINE FGuid& GetHostPlayerUuid() { return HostPlayerUuid_Optional; }
	/** @brief Gets the value of HostPlayerUuid_Optional, regardless of it having been set */
	FORCEINLINE const FGuid& GetHostPlayerUuid() const { return HostPlayerUuid_Optional; }
	/** @brief Gets the value of HostPlayerUuid_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FGuid& GetHostPlayerUuid(const FGuid& DefaultValue) const { if (HostPlayerUuid_IsSet) return HostPlayerUuid_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of HostPlayerUuid_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetHostPlayerUuid(FGuid& OutValue) const { if (HostPlayerUuid_IsSet) OutValue = HostPlayerUuid_Optional; return HostPlayerUuid_IsSet; }
	/** @brief Returns a pointer to HostPlayerUuid_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FGuid* GetHostPlayerUuidOrNull() { if (HostPlayerUuid_IsSet) return (&HostPlayerUuid_Optional); return nullptr; }
	/** @brief Returns a pointer to HostPlayerUuid_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FGuid* GetHostPlayerUuidOrNull() const { if (HostPlayerUuid_IsSet) return (&HostPlayerUuid_Optional); return nullptr; }
	/** @brief Sets the value of HostPlayerUuid_Optional and also sets HostPlayerUuid_IsSet to true */
	FORCEINLINE void SetHostPlayerUuid(const FGuid& NewValue) { HostPlayerUuid_Optional = NewValue; HostPlayerUuid_IsSet = true;  }
	/** @brief Sets the value of HostPlayerUuid_Optional and also sets HostPlayerUuid_IsSet to true using move semantics */
	FORCEINLINE void SetHostPlayerUuid(FGuid&& NewValue) { HostPlayerUuid_Optional = NewValue; HostPlayerUuid_IsSet = true;  }
	/** @brief Clears the value of HostPlayerUuid_Optional and sets HostPlayerUuid_IsSet to false */
	void ClearHostPlayerUuid() { HostPlayerUuid_IsSet = false;  }

	/** @brief Unique ID for the process that is running this instance */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString HostDedicatedProcessId_Optional{  };
	/** @brief true if HostDedicatedProcessId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool HostDedicatedProcessId_IsSet{ false };
	/** @brief Gets the value of HostDedicatedProcessId_Optional, regardless of it having been set */
	FORCEINLINE FString& GetHostDedicatedProcessId() { return HostDedicatedProcessId_Optional; }
	/** @brief Gets the value of HostDedicatedProcessId_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetHostDedicatedProcessId() const { return HostDedicatedProcessId_Optional; }
	/** @brief Gets the value of HostDedicatedProcessId_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetHostDedicatedProcessId(const FString& DefaultValue) const { if (HostDedicatedProcessId_IsSet) return HostDedicatedProcessId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of HostDedicatedProcessId_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetHostDedicatedProcessId(FString& OutValue) const { if (HostDedicatedProcessId_IsSet) OutValue = HostDedicatedProcessId_Optional; return HostDedicatedProcessId_IsSet; }
	/** @brief Returns a pointer to HostDedicatedProcessId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetHostDedicatedProcessIdOrNull() { if (HostDedicatedProcessId_IsSet) return (&HostDedicatedProcessId_Optional); return nullptr; }
	/** @brief Returns a pointer to HostDedicatedProcessId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetHostDedicatedProcessIdOrNull() const { if (HostDedicatedProcessId_IsSet) return (&HostDedicatedProcessId_Optional); return nullptr; }
	/** @brief Sets the value of HostDedicatedProcessId_Optional and also sets HostDedicatedProcessId_IsSet to true */
	FORCEINLINE void SetHostDedicatedProcessId(const FString& NewValue) { HostDedicatedProcessId_Optional = NewValue; HostDedicatedProcessId_IsSet = true;  }
	/** @brief Sets the value of HostDedicatedProcessId_Optional and also sets HostDedicatedProcessId_IsSet to true using move semantics */
	FORCEINLINE void SetHostDedicatedProcessId(FString&& NewValue) { HostDedicatedProcessId_Optional = NewValue; HostDedicatedProcessId_IsSet = true;  }
	/** @brief Clears the value of HostDedicatedProcessId_Optional and sets HostDedicatedProcessId_IsSet to false */
	void ClearHostDedicatedProcessId() { HostDedicatedProcessId_IsSet = false;  }

	/** @brief Unique ID for the machine running the instance */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString HostDedicatedServerId_Optional{  };
	/** @brief true if HostDedicatedServerId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool HostDedicatedServerId_IsSet{ false };
	/** @brief Gets the value of HostDedicatedServerId_Optional, regardless of it having been set */
	FORCEINLINE FString& GetHostDedicatedServerId() { return HostDedicatedServerId_Optional; }
	/** @brief Gets the value of HostDedicatedServerId_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetHostDedicatedServerId() const { return HostDedicatedServerId_Optional; }
	/** @brief Gets the value of HostDedicatedServerId_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetHostDedicatedServerId(const FString& DefaultValue) const { if (HostDedicatedServerId_IsSet) return HostDedicatedServerId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of HostDedicatedServerId_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetHostDedicatedServerId(FString& OutValue) const { if (HostDedicatedServerId_IsSet) OutValue = HostDedicatedServerId_Optional; return HostDedicatedServerId_IsSet; }
	/** @brief Returns a pointer to HostDedicatedServerId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetHostDedicatedServerIdOrNull() { if (HostDedicatedServerId_IsSet) return (&HostDedicatedServerId_Optional); return nullptr; }
	/** @brief Returns a pointer to HostDedicatedServerId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetHostDedicatedServerIdOrNull() const { if (HostDedicatedServerId_IsSet) return (&HostDedicatedServerId_Optional); return nullptr; }
	/** @brief Sets the value of HostDedicatedServerId_Optional and also sets HostDedicatedServerId_IsSet to true */
	FORCEINLINE void SetHostDedicatedServerId(const FString& NewValue) { HostDedicatedServerId_Optional = NewValue; HostDedicatedServerId_IsSet = true;  }
	/** @brief Sets the value of HostDedicatedServerId_Optional and also sets HostDedicatedServerId_IsSet to true using move semantics */
	FORCEINLINE void SetHostDedicatedServerId(FString&& NewValue) { HostDedicatedServerId_Optional = NewValue; HostDedicatedServerId_IsSet = true;  }
	/** @brief Clears the value of HostDedicatedServerId_Optional and sets HostDedicatedServerId_IsSet to false */
	void ClearHostDedicatedServerId() { HostDedicatedServerId_IsSet = false;  }

	/** @brief Is the instance joinable at this time? */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	ERHAPI_InstanceJoinableStatus JoinStatus{  };
	/** @brief Gets the value of JoinStatus */
	FORCEINLINE ERHAPI_InstanceJoinableStatus& GetJoinStatus() { return JoinStatus; }
	/** @brief Gets the value of JoinStatus */
	FORCEINLINE const ERHAPI_InstanceJoinableStatus& GetJoinStatus() const { return JoinStatus; }
	/** @brief Sets the value of JoinStatus */
	FORCEINLINE void SetJoinStatus(const ERHAPI_InstanceJoinableStatus& NewValue) { JoinStatus = NewValue;   }
	/** @brief Sets the value of JoinStatus using move semantics */
	FORCEINLINE void SetJoinStatus(ERHAPI_InstanceJoinableStatus&& NewValue) { JoinStatus = NewValue;   }

	/** @brief Parameters to join the instance */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_JoinParams JoinParams_Optional{  };
	/** @brief true if JoinParams_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool JoinParams_IsSet{ false };
	/** @brief Gets the value of JoinParams_Optional, regardless of it having been set */
	FORCEINLINE FRHAPI_JoinParams& GetJoinParams() { return JoinParams_Optional; }
	/** @brief Gets the value of JoinParams_Optional, regardless of it having been set */
	FORCEINLINE const FRHAPI_JoinParams& GetJoinParams() const { return JoinParams_Optional; }
	/** @brief Gets the value of JoinParams_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FRHAPI_JoinParams& GetJoinParams(const FRHAPI_JoinParams& DefaultValue) const { if (JoinParams_IsSet) return JoinParams_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of JoinParams_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetJoinParams(FRHAPI_JoinParams& OutValue) const { if (JoinParams_IsSet) OutValue = JoinParams_Optional; return JoinParams_IsSet; }
	/** @brief Returns a pointer to JoinParams_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FRHAPI_JoinParams* GetJoinParamsOrNull() { if (JoinParams_IsSet) return (&JoinParams_Optional); return nullptr; }
	/** @brief Returns a pointer to JoinParams_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FRHAPI_JoinParams* GetJoinParamsOrNull() const { if (JoinParams_IsSet) return (&JoinParams_Optional); return nullptr; }
	/** @brief Sets the value of JoinParams_Optional and also sets JoinParams_IsSet to true */
	FORCEINLINE void SetJoinParams(const FRHAPI_JoinParams& NewValue) { JoinParams_Optional = NewValue; JoinParams_IsSet = true;  }
	/** @brief Sets the value of JoinParams_Optional and also sets JoinParams_IsSet to true using move semantics */
	FORCEINLINE void SetJoinParams(FRHAPI_JoinParams&& NewValue) { JoinParams_Optional = NewValue; JoinParams_IsSet = true;  }
	/** @brief Clears the value of JoinParams_Optional and sets JoinParams_IsSet to false */
	void ClearJoinParams() { JoinParams_IsSet = false;  }

	/** @brief Parameters used by the host to startup. For UE5 this will contain the map and gamemode */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_InstanceStartupParams InstanceStartupParams_Optional{  };
	/** @brief true if InstanceStartupParams_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool InstanceStartupParams_IsSet{ false };
	/** @brief Gets the value of InstanceStartupParams_Optional, regardless of it having been set */
	FORCEINLINE FRHAPI_InstanceStartupParams& GetInstanceStartupParams() { return InstanceStartupParams_Optional; }
	/** @brief Gets the value of InstanceStartupParams_Optional, regardless of it having been set */
	FORCEINLINE const FRHAPI_InstanceStartupParams& GetInstanceStartupParams() const { return InstanceStartupParams_Optional; }
	/** @brief Gets the value of InstanceStartupParams_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FRHAPI_InstanceStartupParams& GetInstanceStartupParams(const FRHAPI_InstanceStartupParams& DefaultValue) const { if (InstanceStartupParams_IsSet) return InstanceStartupParams_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of InstanceStartupParams_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetInstanceStartupParams(FRHAPI_InstanceStartupParams& OutValue) const { if (InstanceStartupParams_IsSet) OutValue = InstanceStartupParams_Optional; return InstanceStartupParams_IsSet; }
	/** @brief Returns a pointer to InstanceStartupParams_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FRHAPI_InstanceStartupParams* GetInstanceStartupParamsOrNull() { if (InstanceStartupParams_IsSet) return (&InstanceStartupParams_Optional); return nullptr; }
	/** @brief Returns a pointer to InstanceStartupParams_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FRHAPI_InstanceStartupParams* GetInstanceStartupParamsOrNull() const { if (InstanceStartupParams_IsSet) return (&InstanceStartupParams_Optional); return nullptr; }
	/** @brief Sets the value of InstanceStartupParams_Optional and also sets InstanceStartupParams_IsSet to true */
	FORCEINLINE void SetInstanceStartupParams(const FRHAPI_InstanceStartupParams& NewValue) { InstanceStartupParams_Optional = NewValue; InstanceStartupParams_IsSet = true;  }
	/** @brief Sets the value of InstanceStartupParams_Optional and also sets InstanceStartupParams_IsSet to true using move semantics */
	FORCEINLINE void SetInstanceStartupParams(FRHAPI_InstanceStartupParams&& NewValue) { InstanceStartupParams_Optional = NewValue; InstanceStartupParams_IsSet = true;  }
	/** @brief Clears the value of InstanceStartupParams_Optional and sets InstanceStartupParams_IsSet to false */
	void ClearInstanceStartupParams() { InstanceStartupParams_IsSet = false;  }

	/** @brief Product Client Version number.  Used for compatibility checking with players */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString Version_Optional{  };
	/** @brief true if Version_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Version_IsSet{ false };
	/** @brief Gets the value of Version_Optional, regardless of it having been set */
	FORCEINLINE FString& GetVersion() { return Version_Optional; }
	/** @brief Gets the value of Version_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetVersion() const { return Version_Optional; }
	/** @brief Gets the value of Version_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetVersion(const FString& DefaultValue) const { if (Version_IsSet) return Version_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Version_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetVersion(FString& OutValue) const { if (Version_IsSet) OutValue = Version_Optional; return Version_IsSet; }
	/** @brief Returns a pointer to Version_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetVersionOrNull() { if (Version_IsSet) return (&Version_Optional); return nullptr; }
	/** @brief Returns a pointer to Version_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetVersionOrNull() const { if (Version_IsSet) return (&Version_Optional); return nullptr; }
	/** @brief Sets the value of Version_Optional and also sets Version_IsSet to true */
	FORCEINLINE void SetVersion(const FString& NewValue) { Version_Optional = NewValue; Version_IsSet = true;  }
	/** @brief Sets the value of Version_Optional and also sets Version_IsSet to true using move semantics */
	FORCEINLINE void SetVersion(FString&& NewValue) { Version_Optional = NewValue; Version_IsSet = true;  }
	/** @brief Clears the value of Version_Optional and sets Version_IsSet to false */
	void ClearVersion() { Version_IsSet = false;  }

	/** @brief Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FDateTime Created{  };
	/** @brief Gets the value of Created */
	FORCEINLINE FDateTime& GetCreated() { return Created; }
	/** @brief Gets the value of Created */
	FORCEINLINE const FDateTime& GetCreated() const { return Created; }
	/** @brief Sets the value of Created */
	FORCEINLINE void SetCreated(const FDateTime& NewValue) { Created = NewValue;   }
	/** @brief Sets the value of Created using move semantics */
	FORCEINLINE void SetCreated(FDateTime&& NewValue) { Created = NewValue;   }

	/** @brief instance-defined custom data */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TMap<FString, FString> CustomData_Optional{  };
	/** @brief true if CustomData_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool CustomData_IsSet{ false };
	/** @brief Gets the value of CustomData_Optional, regardless of it having been set */
	FORCEINLINE TMap<FString, FString>& GetCustomData() { return CustomData_Optional; }
	/** @brief Gets the value of CustomData_Optional, regardless of it having been set */
	FORCEINLINE const TMap<FString, FString>& GetCustomData() const { return CustomData_Optional; }
	/** @brief Gets the value of CustomData_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const TMap<FString, FString>& GetCustomData(const TMap<FString, FString>& DefaultValue) const { if (CustomData_IsSet) return CustomData_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of CustomData_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetCustomData(TMap<FString, FString>& OutValue) const { if (CustomData_IsSet) OutValue = CustomData_Optional; return CustomData_IsSet; }
	/** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE TMap<FString, FString>* GetCustomDataOrNull() { if (CustomData_IsSet) return (&CustomData_Optional); return nullptr; }
	/** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const TMap<FString, FString>* GetCustomDataOrNull() const { if (CustomData_IsSet) return (&CustomData_Optional); return nullptr; }
	/** @brief Sets the value of CustomData_Optional and also sets CustomData_IsSet to true */
	FORCEINLINE void SetCustomData(const TMap<FString, FString>& NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true;  }
	/** @brief Sets the value of CustomData_Optional and also sets CustomData_IsSet to true using move semantics */
	FORCEINLINE void SetCustomData(TMap<FString, FString>&& NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true;  }
	/** @brief Clears the value of CustomData_Optional and sets CustomData_IsSet to false */
	void ClearCustomData() { CustomData_IsSet = false;  }

	/** @brief The current status of the instance */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	ERHAPI_InstanceHealthStatus InstanceHealth_Optional{  };
	/** @brief true if InstanceHealth_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool InstanceHealth_IsSet{ false };
	/** @brief Gets the value of InstanceHealth_Optional, regardless of it having been set */
	FORCEINLINE ERHAPI_InstanceHealthStatus& GetInstanceHealth() { return InstanceHealth_Optional; }
	/** @brief Gets the value of InstanceHealth_Optional, regardless of it having been set */
	FORCEINLINE const ERHAPI_InstanceHealthStatus& GetInstanceHealth() const { return InstanceHealth_Optional; }
	/** @brief Gets the value of InstanceHealth_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const ERHAPI_InstanceHealthStatus& GetInstanceHealth(const ERHAPI_InstanceHealthStatus& DefaultValue) const { if (InstanceHealth_IsSet) return InstanceHealth_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of InstanceHealth_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetInstanceHealth(ERHAPI_InstanceHealthStatus& OutValue) const { if (InstanceHealth_IsSet) OutValue = InstanceHealth_Optional; return InstanceHealth_IsSet; }
	/** @brief Returns a pointer to InstanceHealth_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE ERHAPI_InstanceHealthStatus* GetInstanceHealthOrNull() { if (InstanceHealth_IsSet) return (&InstanceHealth_Optional); return nullptr; }
	/** @brief Returns a pointer to InstanceHealth_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const ERHAPI_InstanceHealthStatus* GetInstanceHealthOrNull() const { if (InstanceHealth_IsSet) return (&InstanceHealth_Optional); return nullptr; }
	/** @brief Sets the value of InstanceHealth_Optional and also sets InstanceHealth_IsSet to true */
	FORCEINLINE void SetInstanceHealth(const ERHAPI_InstanceHealthStatus& NewValue) { InstanceHealth_Optional = NewValue; InstanceHealth_IsSet = true;  }
	/** @brief Sets the value of InstanceHealth_Optional and also sets InstanceHealth_IsSet to true using move semantics */
	FORCEINLINE void SetInstanceHealth(ERHAPI_InstanceHealthStatus&& NewValue) { InstanceHealth_Optional = NewValue; InstanceHealth_IsSet = true;  }
	/** @brief Clears the value of InstanceHealth_Optional and sets InstanceHealth_IsSet to false */
	void ClearInstanceHealth() { InstanceHealth_IsSet = false;  }

	/** @brief The profile id that this instance was spawned from */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString MatchMakingProfileId_Optional{  };
	/** @brief true if MatchMakingProfileId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool MatchMakingProfileId_IsSet{ false };
	/** @brief Gets the value of MatchMakingProfileId_Optional, regardless of it having been set */
	FORCEINLINE FString& GetMatchMakingProfileId() { return MatchMakingProfileId_Optional; }
	/** @brief Gets the value of MatchMakingProfileId_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetMatchMakingProfileId() const { return MatchMakingProfileId_Optional; }
	/** @brief Gets the value of MatchMakingProfileId_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetMatchMakingProfileId(const FString& DefaultValue) const { if (MatchMakingProfileId_IsSet) return MatchMakingProfileId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of MatchMakingProfileId_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetMatchMakingProfileId(FString& OutValue) const { if (MatchMakingProfileId_IsSet) OutValue = MatchMakingProfileId_Optional; return MatchMakingProfileId_IsSet; }
	/** @brief Returns a pointer to MatchMakingProfileId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetMatchMakingProfileIdOrNull() { if (MatchMakingProfileId_IsSet) return (&MatchMakingProfileId_Optional); return nullptr; }
	/** @brief Returns a pointer to MatchMakingProfileId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetMatchMakingProfileIdOrNull() const { if (MatchMakingProfileId_IsSet) return (&MatchMakingProfileId_Optional); return nullptr; }
	/** @brief Sets the value of MatchMakingProfileId_Optional and also sets MatchMakingProfileId_IsSet to true */
	FORCEINLINE void SetMatchMakingProfileId(const FString& NewValue) { MatchMakingProfileId_Optional = NewValue; MatchMakingProfileId_IsSet = true;  }
	/** @brief Sets the value of MatchMakingProfileId_Optional and also sets MatchMakingProfileId_IsSet to true using move semantics */
	FORCEINLINE void SetMatchMakingProfileId(FString&& NewValue) { MatchMakingProfileId_Optional = NewValue; MatchMakingProfileId_IsSet = true;  }
	/** @brief Clears the value of MatchMakingProfileId_Optional and sets MatchMakingProfileId_IsSet to false */
	void ClearMatchMakingProfileId() { MatchMakingProfileId_IsSet = false;  }

	/** @brief The match ID associated with this instance */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString MatchId_Optional{  };
	/** @brief true if MatchId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool MatchId_IsSet{ false };
	/** @brief Gets the value of MatchId_Optional, regardless of it having been set */
	FORCEINLINE FString& GetMatchId() { return MatchId_Optional; }
	/** @brief Gets the value of MatchId_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetMatchId() const { return MatchId_Optional; }
	/** @brief Gets the value of MatchId_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetMatchId(const FString& DefaultValue) const { if (MatchId_IsSet) return MatchId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of MatchId_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetMatchId(FString& OutValue) const { if (MatchId_IsSet) OutValue = MatchId_Optional; return MatchId_IsSet; }
	/** @brief Returns a pointer to MatchId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetMatchIdOrNull() { if (MatchId_IsSet) return (&MatchId_Optional); return nullptr; }
	/** @brief Returns a pointer to MatchId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetMatchIdOrNull() const { if (MatchId_IsSet) return (&MatchId_Optional); return nullptr; }
	/** @brief Sets the value of MatchId_Optional and also sets MatchId_IsSet to true */
	FORCEINLINE void SetMatchId(const FString& NewValue) { MatchId_Optional = NewValue; MatchId_IsSet = true;  }
	/** @brief Sets the value of MatchId_Optional and also sets MatchId_IsSet to true using move semantics */
	FORCEINLINE void SetMatchId(FString&& NewValue) { MatchId_Optional = NewValue; MatchId_IsSet = true;  }
	/** @brief Clears the value of MatchId_Optional and sets MatchId_IsSet to false */
	void ClearMatchId() { MatchId_IsSet = false;  }
};

/** @} */
