// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "CacheInfo.h"
#include "ItemTag.h"
#include "ItemTags.generated.h"

/** @defgroup RHAPI_ItemTags RallyHere API Model ItemTags
 *  @{
 */

/**
 * @brief Full set of all item tags, and the items represented by them
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_ItemTags : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	/** @brief Item tags and their associated item ids */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TMap<FString, FRHAPI_ItemTag> Tags_Optional{  };
	/** @brief true if Tags_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool Tags_IsSet{ false };
	/** @brief Gets the value of Tags_Optional, regardless of it having been set */
	FORCEINLINE TMap<FString, FRHAPI_ItemTag>& GetTags() { return Tags_Optional; }
	/** @brief Gets the value of Tags_Optional, regardless of it having been set */
	FORCEINLINE const TMap<FString, FRHAPI_ItemTag>& GetTags() const { return Tags_Optional; }
	/** @brief Gets the value of Tags_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const TMap<FString, FRHAPI_ItemTag>& GetTags(const TMap<FString, FRHAPI_ItemTag>& DefaultValue) const { if (Tags_IsSet) return Tags_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of Tags_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetTags(TMap<FString, FRHAPI_ItemTag>& OutValue) const { if (Tags_IsSet) OutValue = Tags_Optional; return Tags_IsSet; }
	/** @brief Returns a pointer to Tags_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE TMap<FString, FRHAPI_ItemTag>* GetTagsOrNull() { if (Tags_IsSet) return (&Tags_Optional); return nullptr; }
	/** @brief Returns a pointer to Tags_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const TMap<FString, FRHAPI_ItemTag>* GetTagsOrNull() const { if (Tags_IsSet) return (&Tags_Optional); return nullptr; }
	/** @brief Sets the value of Tags_Optional and also sets Tags_IsSet to true */
	FORCEINLINE void SetTags(const TMap<FString, FRHAPI_ItemTag>& NewValue) { Tags_Optional = NewValue; Tags_IsSet = true;  }
	/** @brief Sets the value of Tags_Optional and also sets Tags_IsSet to true using move semantics */
	FORCEINLINE void SetTags(TMap<FString, FRHAPI_ItemTag>&& NewValue) { Tags_Optional = NewValue; Tags_IsSet = true;  }
	/** @brief Clears the value of Tags_Optional and sets Tags_IsSet to false */
	void ClearTags() { Tags_IsSet = false;  }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_CacheInfo CacheInfo_Optional{  };
	/** @brief true if CacheInfo_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool CacheInfo_IsSet{ false };
	/** @brief true if CacheInfo_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool CacheInfo_IsNull{ false };
	/** @brief Gets the value of CacheInfo_Optional, regardless of it having been set */
	FORCEINLINE FRHAPI_CacheInfo& GetCacheInfo() { return CacheInfo_Optional; }
	/** @brief Gets the value of CacheInfo_Optional, regardless of it having been set */
	FORCEINLINE const FRHAPI_CacheInfo& GetCacheInfo() const { return CacheInfo_Optional; }
	/** @brief Gets the value of CacheInfo_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FRHAPI_CacheInfo& GetCacheInfo(const FRHAPI_CacheInfo& DefaultValue) const { if (CacheInfo_IsSet) return CacheInfo_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of CacheInfo_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetCacheInfo(FRHAPI_CacheInfo& OutValue) const { if (CacheInfo_IsSet && !CacheInfo_IsNull) OutValue = CacheInfo_Optional; return CacheInfo_IsSet; }
	/** @brief Returns a pointer to CacheInfo_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FRHAPI_CacheInfo* GetCacheInfoOrNull() { if (CacheInfo_IsSet) return (CacheInfo_IsNull ? nullptr : &CacheInfo_Optional); return nullptr; }
	/** @brief Returns a pointer to CacheInfo_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FRHAPI_CacheInfo* GetCacheInfoOrNull() const { if (CacheInfo_IsSet) return (CacheInfo_IsNull ? nullptr : &CacheInfo_Optional); return nullptr; }
	/** @brief Sets the value of CacheInfo_Optional and also sets CacheInfo_IsSet to true */
	FORCEINLINE void SetCacheInfo(const FRHAPI_CacheInfo& NewValue) { CacheInfo_Optional = NewValue; CacheInfo_IsSet = true; CacheInfo_IsNull = false; }
	/** @brief Sets the value of CacheInfo_Optional and also sets CacheInfo_IsSet to true using move semantics */
	FORCEINLINE void SetCacheInfo(FRHAPI_CacheInfo&& NewValue) { CacheInfo_Optional = NewValue; CacheInfo_IsSet = true; CacheInfo_IsNull = false; }
	/** @brief Clears the value of CacheInfo_Optional and sets CacheInfo_IsSet to false */
	void ClearCacheInfo() { CacheInfo_IsSet = false; CacheInfo_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetCacheInfoToNull() { CacheInfo_IsSet = true; CacheInfo_IsNull = true; }
	/** @brief Checks whether CacheInfo_Optional is set to null */
	FORCEINLINE bool IsCacheInfoNull() const { return CacheInfo_IsSet && CacheInfo_IsNull; }
};

/** @} */
