// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "CacheInfo.h"
#include "ItemTag.generated.h"

/** @defgroup RHAPI_ItemTag RallyHere API Model ItemTag
 *  @{
 */

/**
 * @brief Item Tag and associated ids
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_ItemTag : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString TagName{  };
	/** @brief Gets the value of TagName */
	FORCEINLINE FString& GetTagName() { return TagName; }
	/** @brief Gets the value of TagName */
	FORCEINLINE const FString& GetTagName() const { return TagName; }
	/** @brief Sets the value of TagName */
	FORCEINLINE void SetTagName(const FString& NewValue) { TagName = NewValue;   }
	/** @brief Sets the value of TagName using move semantics */
	FORCEINLINE void SetTagName(FString&& NewValue) { TagName = NewValue;   }

	/** @brief Legacy Item IDs that have this tag */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TArray<int32> ItemIds_Optional{  };
	/** @brief true if ItemIds_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool ItemIds_IsSet{ false };
	/** @brief Gets the value of ItemIds_Optional, regardless of it having been set */
	FORCEINLINE TArray<int32>& GetItemIds() { return ItemIds_Optional; }
	/** @brief Gets the value of ItemIds_Optional, regardless of it having been set */
	FORCEINLINE const TArray<int32>& GetItemIds() const { return ItemIds_Optional; }
	/** @brief Gets the value of ItemIds_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const TArray<int32>& GetItemIds(const TArray<int32>& DefaultValue) const { if (ItemIds_IsSet) return ItemIds_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of ItemIds_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetItemIds(TArray<int32>& OutValue) const { if (ItemIds_IsSet) OutValue = ItemIds_Optional; return ItemIds_IsSet; }
	/** @brief Returns a pointer to ItemIds_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE TArray<int32>* GetItemIdsOrNull() { if (ItemIds_IsSet) return (&ItemIds_Optional); return nullptr; }
	/** @brief Returns a pointer to ItemIds_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const TArray<int32>* GetItemIdsOrNull() const { if (ItemIds_IsSet) return (&ItemIds_Optional); return nullptr; }
	/** @brief Sets the value of ItemIds_Optional and also sets ItemIds_IsSet to true */
	FORCEINLINE void SetItemIds(const TArray<int32>& NewValue) { ItemIds_Optional = NewValue; ItemIds_IsSet = true;  }
	/** @brief Sets the value of ItemIds_Optional and also sets ItemIds_IsSet to true using move semantics */
	FORCEINLINE void SetItemIds(TArray<int32>&& NewValue) { ItemIds_Optional = NewValue; ItemIds_IsSet = true;  }
	/** @brief Clears the value of ItemIds_Optional and sets ItemIds_IsSet to false */
	void ClearItemIds() { ItemIds_IsSet = false;  }

	/** @brief Item UUIDs that have this tag */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	TArray<FGuid> ItemUuids_Optional{  };
	/** @brief true if ItemUuids_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool ItemUuids_IsSet{ false };
	/** @brief Gets the value of ItemUuids_Optional, regardless of it having been set */
	FORCEINLINE TArray<FGuid>& GetItemUuids() { return ItemUuids_Optional; }
	/** @brief Gets the value of ItemUuids_Optional, regardless of it having been set */
	FORCEINLINE const TArray<FGuid>& GetItemUuids() const { return ItemUuids_Optional; }
	/** @brief Gets the value of ItemUuids_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const TArray<FGuid>& GetItemUuids(const TArray<FGuid>& DefaultValue) const { if (ItemUuids_IsSet) return ItemUuids_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of ItemUuids_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetItemUuids(TArray<FGuid>& OutValue) const { if (ItemUuids_IsSet) OutValue = ItemUuids_Optional; return ItemUuids_IsSet; }
	/** @brief Returns a pointer to ItemUuids_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE TArray<FGuid>* GetItemUuidsOrNull() { if (ItemUuids_IsSet) return (&ItemUuids_Optional); return nullptr; }
	/** @brief Returns a pointer to ItemUuids_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const TArray<FGuid>* GetItemUuidsOrNull() const { if (ItemUuids_IsSet) return (&ItemUuids_Optional); return nullptr; }
	/** @brief Sets the value of ItemUuids_Optional and also sets ItemUuids_IsSet to true */
	FORCEINLINE void SetItemUuids(const TArray<FGuid>& NewValue) { ItemUuids_Optional = NewValue; ItemUuids_IsSet = true;  }
	/** @brief Sets the value of ItemUuids_Optional and also sets ItemUuids_IsSet to true using move semantics */
	FORCEINLINE void SetItemUuids(TArray<FGuid>&& NewValue) { ItemUuids_Optional = NewValue; ItemUuids_IsSet = true;  }
	/** @brief Clears the value of ItemUuids_Optional and sets ItemUuids_IsSet to false */
	void ClearItemUuids() { ItemUuids_IsSet = false;  }

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FRHAPI_CacheInfo CacheInfo_Optional{  };
	/** @brief true if CacheInfo_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool CacheInfo_IsSet{ false };
	/** @brief true if CacheInfo_Optional has been explicitly set to null */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool CacheInfo_IsNull{ false };
	/** @brief Gets the value of CacheInfo_Optional, regardless of it having been set */
	FORCEINLINE FRHAPI_CacheInfo& GetCacheInfo() { return CacheInfo_Optional; }
	/** @brief Gets the value of CacheInfo_Optional, regardless of it having been set */
	FORCEINLINE const FRHAPI_CacheInfo& GetCacheInfo() const { return CacheInfo_Optional; }
	/** @brief Gets the value of CacheInfo_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FRHAPI_CacheInfo& GetCacheInfo(const FRHAPI_CacheInfo& DefaultValue) const { if (CacheInfo_IsSet) return CacheInfo_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of CacheInfo_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetCacheInfo(FRHAPI_CacheInfo& OutValue) const { if (CacheInfo_IsSet && !CacheInfo_IsNull) OutValue = CacheInfo_Optional; return CacheInfo_IsSet; }
	/** @brief Returns a pointer to CacheInfo_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FRHAPI_CacheInfo* GetCacheInfoOrNull() { if (CacheInfo_IsSet) return (CacheInfo_IsNull ? nullptr : &CacheInfo_Optional); return nullptr; }
	/** @brief Returns a pointer to CacheInfo_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FRHAPI_CacheInfo* GetCacheInfoOrNull() const { if (CacheInfo_IsSet) return (CacheInfo_IsNull ? nullptr : &CacheInfo_Optional); return nullptr; }
	/** @brief Sets the value of CacheInfo_Optional and also sets CacheInfo_IsSet to true */
	FORCEINLINE void SetCacheInfo(const FRHAPI_CacheInfo& NewValue) { CacheInfo_Optional = NewValue; CacheInfo_IsSet = true; CacheInfo_IsNull = false; }
	/** @brief Sets the value of CacheInfo_Optional and also sets CacheInfo_IsSet to true using move semantics */
	FORCEINLINE void SetCacheInfo(FRHAPI_CacheInfo&& NewValue) { CacheInfo_Optional = NewValue; CacheInfo_IsSet = true; CacheInfo_IsNull = false; }
	/** @brief Clears the value of CacheInfo_Optional and sets CacheInfo_IsSet to false */
	void ClearCacheInfo() { CacheInfo_IsSet = false; CacheInfo_IsNull = false; }
	/** @brief Sets the value explicitly to be treated as null */
	FORCEINLINE void SetCacheInfoToNull() { CacheInfo_IsSet = true; CacheInfo_IsNull = true; }
	/** @brief Checks whether CacheInfo_Optional is set to null */
	FORCEINLINE bool IsCacheInfoNull() const { return CacheInfo_IsSet && CacheInfo_IsNull; }
};

/** @} */
