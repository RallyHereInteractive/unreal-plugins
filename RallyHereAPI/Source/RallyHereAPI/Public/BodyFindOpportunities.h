// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "BodyFindOpportunities.generated.h"

/** @defgroup RHAPI_BodyFindOpportunities RallyHere API Model BodyFindOpportunities
 *  @{
 */

/**
 * @brief 
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_BodyFindOpportunities : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	/** @brief Width of the screen in pixels */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 ScreenPixelWidth_Optional{ 0 };
	/** @brief true if ScreenPixelWidth_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool ScreenPixelWidth_IsSet{ false };
	/** @brief Gets the value of ScreenPixelWidth_Optional, regardless of it having been set */
	FORCEINLINE int32& GetScreenPixelWidth() { return ScreenPixelWidth_Optional; }
	/** @brief Gets the value of ScreenPixelWidth_Optional, regardless of it having been set */
	FORCEINLINE const int32& GetScreenPixelWidth() const { return ScreenPixelWidth_Optional; }
	/** @brief Gets the value of ScreenPixelWidth_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const int32& GetScreenPixelWidth(const int32& DefaultValue) const { if (ScreenPixelWidth_IsSet) return ScreenPixelWidth_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of ScreenPixelWidth_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetScreenPixelWidth(int32& OutValue) const { if (ScreenPixelWidth_IsSet) OutValue = ScreenPixelWidth_Optional; return ScreenPixelWidth_IsSet; }
	/** @brief Returns a pointer to ScreenPixelWidth_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE int32* GetScreenPixelWidthOrNull() { if (ScreenPixelWidth_IsSet) return (&ScreenPixelWidth_Optional); return nullptr; }
	/** @brief Returns a pointer to ScreenPixelWidth_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const int32* GetScreenPixelWidthOrNull() const { if (ScreenPixelWidth_IsSet) return (&ScreenPixelWidth_Optional); return nullptr; }
	/** @brief Sets the value of ScreenPixelWidth_Optional and also sets ScreenPixelWidth_IsSet to true */
	FORCEINLINE void SetScreenPixelWidth(const int32& NewValue) { ScreenPixelWidth_Optional = NewValue; ScreenPixelWidth_IsSet = true;  }
	/** @brief Sets the value of ScreenPixelWidth_Optional and also sets ScreenPixelWidth_IsSet to true using move semantics */
	FORCEINLINE void SetScreenPixelWidth(int32&& NewValue) { ScreenPixelWidth_Optional = NewValue; ScreenPixelWidth_IsSet = true;  }
	/** @brief Clears the value of ScreenPixelWidth_Optional and sets ScreenPixelWidth_IsSet to false */
	void ClearScreenPixelWidth() { ScreenPixelWidth_Optional = 0; ScreenPixelWidth_IsSet = false;  }
	/** @brief Returns the default value of ScreenPixelWidth */
	FORCEINLINE int32 GetDefaultValue_ScreenPixelWidth() { return 0; }

	/** @brief Height of the screen in pixels */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 ScreenPixelHeight_Optional{ 0 };
	/** @brief true if ScreenPixelHeight_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool ScreenPixelHeight_IsSet{ false };
	/** @brief Gets the value of ScreenPixelHeight_Optional, regardless of it having been set */
	FORCEINLINE int32& GetScreenPixelHeight() { return ScreenPixelHeight_Optional; }
	/** @brief Gets the value of ScreenPixelHeight_Optional, regardless of it having been set */
	FORCEINLINE const int32& GetScreenPixelHeight() const { return ScreenPixelHeight_Optional; }
	/** @brief Gets the value of ScreenPixelHeight_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const int32& GetScreenPixelHeight(const int32& DefaultValue) const { if (ScreenPixelHeight_IsSet) return ScreenPixelHeight_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of ScreenPixelHeight_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetScreenPixelHeight(int32& OutValue) const { if (ScreenPixelHeight_IsSet) OutValue = ScreenPixelHeight_Optional; return ScreenPixelHeight_IsSet; }
	/** @brief Returns a pointer to ScreenPixelHeight_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE int32* GetScreenPixelHeightOrNull() { if (ScreenPixelHeight_IsSet) return (&ScreenPixelHeight_Optional); return nullptr; }
	/** @brief Returns a pointer to ScreenPixelHeight_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const int32* GetScreenPixelHeightOrNull() const { if (ScreenPixelHeight_IsSet) return (&ScreenPixelHeight_Optional); return nullptr; }
	/** @brief Sets the value of ScreenPixelHeight_Optional and also sets ScreenPixelHeight_IsSet to true */
	FORCEINLINE void SetScreenPixelHeight(const int32& NewValue) { ScreenPixelHeight_Optional = NewValue; ScreenPixelHeight_IsSet = true;  }
	/** @brief Sets the value of ScreenPixelHeight_Optional and also sets ScreenPixelHeight_IsSet to true using move semantics */
	FORCEINLINE void SetScreenPixelHeight(int32&& NewValue) { ScreenPixelHeight_Optional = NewValue; ScreenPixelHeight_IsSet = true;  }
	/** @brief Clears the value of ScreenPixelHeight_Optional and sets ScreenPixelHeight_IsSet to false */
	void ClearScreenPixelHeight() { ScreenPixelHeight_Optional = 0; ScreenPixelHeight_IsSet = false;  }
	/** @brief Returns the default value of ScreenPixelHeight */
	FORCEINLINE int32 GetDefaultValue_ScreenPixelHeight() { return 0; }

	/** @brief [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code for the user */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString CountryCode{  };
	/** @brief Gets the value of CountryCode */
	FORCEINLINE FString& GetCountryCode() { return CountryCode; }
	/** @brief Gets the value of CountryCode */
	FORCEINLINE const FString& GetCountryCode() const { return CountryCode; }
	/** @brief Sets the value of CountryCode */
	FORCEINLINE void SetCountryCode(const FString& NewValue) { CountryCode = NewValue;   }
	/** @brief Sets the value of CountryCode using move semantics */
	FORCEINLINE void SetCountryCode(FString&& NewValue) { CountryCode = NewValue;   }

	/** @brief [ISO 639-2](https://www.loc.gov/standards/iso639-2/php/code_list.php) language code */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString LanguageCode{  };
	/** @brief Gets the value of LanguageCode */
	FORCEINLINE FString& GetLanguageCode() { return LanguageCode; }
	/** @brief Gets the value of LanguageCode */
	FORCEINLINE const FString& GetLanguageCode() const { return LanguageCode; }
	/** @brief Sets the value of LanguageCode */
	FORCEINLINE void SetLanguageCode(const FString& NewValue) { LanguageCode = NewValue;   }
	/** @brief Sets the value of LanguageCode using move semantics */
	FORCEINLINE void SetLanguageCode(FString&& NewValue) { LanguageCode = NewValue;   }

	/** @brief Unique Identifier for the device a session is started on.  E.g should be the same for multiple users on the same device. */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	FString DeviceId_Optional{  };
	/** @brief true if DeviceId_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool DeviceId_IsSet{ false };
	/** @brief Gets the value of DeviceId_Optional, regardless of it having been set */
	FORCEINLINE FString& GetDeviceId() { return DeviceId_Optional; }
	/** @brief Gets the value of DeviceId_Optional, regardless of it having been set */
	FORCEINLINE const FString& GetDeviceId() const { return DeviceId_Optional; }
	/** @brief Gets the value of DeviceId_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const FString& GetDeviceId(const FString& DefaultValue) const { if (DeviceId_IsSet) return DeviceId_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of DeviceId_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetDeviceId(FString& OutValue) const { if (DeviceId_IsSet) OutValue = DeviceId_Optional; return DeviceId_IsSet; }
	/** @brief Returns a pointer to DeviceId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE FString* GetDeviceIdOrNull() { if (DeviceId_IsSet) return (&DeviceId_Optional); return nullptr; }
	/** @brief Returns a pointer to DeviceId_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const FString* GetDeviceIdOrNull() const { if (DeviceId_IsSet) return (&DeviceId_Optional); return nullptr; }
	/** @brief Sets the value of DeviceId_Optional and also sets DeviceId_IsSet to true */
	FORCEINLINE void SetDeviceId(const FString& NewValue) { DeviceId_Optional = NewValue; DeviceId_IsSet = true;  }
	/** @brief Sets the value of DeviceId_Optional and also sets DeviceId_IsSet to true using move semantics */
	FORCEINLINE void SetDeviceId(FString&& NewValue) { DeviceId_Optional = NewValue; DeviceId_IsSet = true;  }
	/** @brief Clears the value of DeviceId_Optional and sets DeviceId_IsSet to false */
	void ClearDeviceId() { DeviceId_IsSet = false;  }
};

/** @} */
