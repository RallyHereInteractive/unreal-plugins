// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereAPIBaseModel.h"
#include "RallyHereAPIHelpers.h"
#include "PlayerStatsResponse.generated.h"

/** @defgroup RHAPI_PlayerStatsResponse RallyHere API Model PlayerStatsResponse
 *  @{
 */

/**
 * @brief 
 */
USTRUCT(BlueprintType)
struct RALLYHEREAPI_API FRHAPI_PlayerStatsResponse : public FRHAPI_Model
{
	GENERATED_BODY()

	/**
	* @brief Fills this object with data from the passed in JSON
	*
	* @param [in] JsonValue Data from the API call.
	*
	* @return true if parsing of the JSON data was successful.
	*/
	virtual bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

	/**
	* @brief Writes the data from this object into the specified JSON Writer stream
	*
	* @param [in] Writer JSON Writer stream to push .
	*/
	virtual void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	int32 TotalMatchesPlayed_Optional{ 0 };
	/** @brief true if TotalMatchesPlayed_Optional has been set to a value */
	UPROPERTY(BlueprintReadWrite, Category = "RallyHere")
	bool TotalMatchesPlayed_IsSet{ false };
	/** @brief Gets the value of TotalMatchesPlayed_Optional, regardless of it having been set */
	FORCEINLINE int32& GetTotalMatchesPlayed() { return TotalMatchesPlayed_Optional; }
	/** @brief Gets the value of TotalMatchesPlayed_Optional, regardless of it having been set */
	FORCEINLINE const int32& GetTotalMatchesPlayed() const { return TotalMatchesPlayed_Optional; }
	/** @brief Gets the value of TotalMatchesPlayed_Optional, if it has been set, otherwise it returns DefaultValue */
	FORCEINLINE const int32& GetTotalMatchesPlayed(const int32& DefaultValue) const { if (TotalMatchesPlayed_IsSet) return TotalMatchesPlayed_Optional; return DefaultValue; }
	/** @brief Fills OutValue with the value of TotalMatchesPlayed_Optional and returns true if it has been set, otherwise returns false */
	FORCEINLINE bool GetTotalMatchesPlayed(int32& OutValue) const { if (TotalMatchesPlayed_IsSet) OutValue = TotalMatchesPlayed_Optional; return TotalMatchesPlayed_IsSet; }
	/** @brief Returns a pointer to TotalMatchesPlayed_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE int32* GetTotalMatchesPlayedOrNull() { if (TotalMatchesPlayed_IsSet) return (&TotalMatchesPlayed_Optional); return nullptr; }
	/** @brief Returns a pointer to TotalMatchesPlayed_Optional, if it has been set, otherwise returns nullptr */
	FORCEINLINE const int32* GetTotalMatchesPlayedOrNull() const { if (TotalMatchesPlayed_IsSet) return (&TotalMatchesPlayed_Optional); return nullptr; }
	/** @brief Sets the value of TotalMatchesPlayed_Optional and also sets TotalMatchesPlayed_IsSet to true */
	FORCEINLINE void SetTotalMatchesPlayed(const int32& NewValue) { TotalMatchesPlayed_Optional = NewValue; TotalMatchesPlayed_IsSet = true;  }
	/** @brief Sets the value of TotalMatchesPlayed_Optional and also sets TotalMatchesPlayed_IsSet to true using move semantics */
	FORCEINLINE void SetTotalMatchesPlayed(int32&& NewValue) { TotalMatchesPlayed_Optional = NewValue; TotalMatchesPlayed_IsSet = true;  }
	/** @brief Clears the value of TotalMatchesPlayed_Optional and sets TotalMatchesPlayed_IsSet to false */
	void ClearTotalMatchesPlayed() { TotalMatchesPlayed_Optional = 0; TotalMatchesPlayed_IsSet = false;  }
	/** @brief Returns the default value of TotalMatchesPlayed */
	FORCEINLINE int32 GetDefaultValue_TotalMatchesPlayed() { return 0; }
};

/** @} */
