// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "Item.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_Item

void FRHAPI_Item::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
	Writer->WriteObjectStart();
	if (CustomData_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("custom_data"));
		RallyHereAPI::WriteJsonValue(Writer, CustomData_Optional);
	}
	if (ItemUuid_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("item_uuid"));
		RallyHereAPI::WriteJsonValue(Writer, ItemUuid_Optional);
	}
	if (Type_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("type"));
		RallyHereAPI::WriteJsonValue(Writer, EnumToString(Type_Optional));
	}
	if (LegacyType_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("legacy_type"));
		RallyHereAPI::WriteJsonValue(Writer, LegacyType_Optional);
	}
	if (LegacySubtype_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("legacy_subtype"));
		RallyHereAPI::WriteJsonValue(Writer, LegacySubtype_Optional);
	}
	if (RefItemId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("ref_item_id"));
		RallyHereAPI::WriteJsonValue(Writer, RefItemId_Optional);
	}
	if (AvailabilityFlags_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("availability_flags"));
		RallyHereAPI::WriteJsonValue(Writer, AvailabilityFlags_Optional);
	}
	if (EntitledLootUuid_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("entitled_loot_uuid"));
		RallyHereAPI::WriteJsonValue(Writer, EntitledLootUuid_Optional);
	}
	if (EntitledLootId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("entitled_loot_id"));
		RallyHereAPI::WriteJsonValue(Writer, EntitledLootId_Optional);
	}
	if (LevelXpTableUuid_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("level_xp_table_uuid"));
		RallyHereAPI::WriteJsonValue(Writer, LevelXpTableUuid_Optional);
	}
	if (LevelXpTableId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("level_xp_table_id"));
		RallyHereAPI::WriteJsonValue(Writer, LevelXpTableId_Optional);
	}
	if (LevelVendorUuid_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("level_vendor_uuid"));
		RallyHereAPI::WriteJsonValue(Writer, LevelVendorUuid_Optional);
	}
	if (LevelVendorId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("level_vendor_id"));
		RallyHereAPI::WriteJsonValue(Writer, LevelVendorId_Optional);
	}
	if (CouponDiscountCurrencyItemUuid_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("coupon_discount_currency_item_uuid"));
		RallyHereAPI::WriteJsonValue(Writer, CouponDiscountCurrencyItemUuid_Optional);
	}
	if (CouponDiscountCurrencyItemId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("coupon_discount_currency_item_id"));
		RallyHereAPI::WriteJsonValue(Writer, CouponDiscountCurrencyItemId_Optional);
	}
	if (CouponDiscountPercentage_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("coupon_discount_percentage"));
		RallyHereAPI::WriteJsonValue(Writer, CouponDiscountPercentage_Optional);
	}
	if (CouponConsumeOnUse_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("coupon_consume_on_use"));
		RallyHereAPI::WriteJsonValue(Writer, CouponConsumeOnUse_Optional);
	}
	if (ItemPortalUseRulesetId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("item_portal_use_ruleset_id"));
		RallyHereAPI::WriteJsonValue(Writer, ItemPortalUseRulesetId_Optional);
	}
	if (InventoryBucketUseRuleSetId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("inventory_bucket_use_rule_set_id"));
		RallyHereAPI::WriteJsonValue(Writer, InventoryBucketUseRuleSetId_Optional);
	}
	if (CouponDiscountLoot_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("coupon_discount_loot"));
		RallyHereAPI::WriteJsonValue(Writer, CouponDiscountLoot_Optional);
	}
	if (CouponDiscountLootUuid_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("coupon_discount_loot_uuid"));
		RallyHereAPI::WriteJsonValue(Writer, CouponDiscountLootUuid_Optional);
	}
	if (CacheInfo_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("cache_info"));
		RallyHereAPI::WriteJsonValue(Writer, CacheInfo_Optional);
	}
	Writer->WriteObjectEnd();
}

bool FRHAPI_Item::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	const TSharedPtr<FJsonValue> JsonCustomDataField = (*Object)->TryGetField(TEXT("custom_data"));
	if (JsonCustomDataField.IsValid() && !JsonCustomDataField->IsNull())
	{
		CustomData_IsSet = TryGetJsonValue(JsonCustomDataField, CustomData_Optional);
		ParseSuccess &= CustomData_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonItemUuidField = (*Object)->TryGetField(TEXT("item_uuid"));
	if (JsonItemUuidField.IsValid() && !JsonItemUuidField->IsNull())
	{
		ItemUuid_IsSet = TryGetJsonValue(JsonItemUuidField, ItemUuid_Optional);
		ParseSuccess &= ItemUuid_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonTypeField = (*Object)->TryGetField(TEXT("type"));
	if (JsonTypeField.IsValid() && !JsonTypeField->IsNull())
	{
		Type_IsSet = TryGetJsonValue(JsonTypeField, Type_Optional);
		ParseSuccess &= Type_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonLegacyTypeField = (*Object)->TryGetField(TEXT("legacy_type"));
	if (JsonLegacyTypeField.IsValid() && !JsonLegacyTypeField->IsNull())
	{
		LegacyType_IsSet = TryGetJsonValue(JsonLegacyTypeField, LegacyType_Optional);
		ParseSuccess &= LegacyType_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonLegacySubtypeField = (*Object)->TryGetField(TEXT("legacy_subtype"));
	if (JsonLegacySubtypeField.IsValid() && !JsonLegacySubtypeField->IsNull())
	{
		LegacySubtype_IsSet = TryGetJsonValue(JsonLegacySubtypeField, LegacySubtype_Optional);
		ParseSuccess &= LegacySubtype_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRefItemIdField = (*Object)->TryGetField(TEXT("ref_item_id"));
	if (JsonRefItemIdField.IsValid() && !JsonRefItemIdField->IsNull())
	{
		RefItemId_IsSet = TryGetJsonValue(JsonRefItemIdField, RefItemId_Optional);
		ParseSuccess &= RefItemId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonAvailabilityFlagsField = (*Object)->TryGetField(TEXT("availability_flags"));
	if (JsonAvailabilityFlagsField.IsValid() && !JsonAvailabilityFlagsField->IsNull())
	{
		AvailabilityFlags_IsSet = TryGetJsonValue(JsonAvailabilityFlagsField, AvailabilityFlags_Optional);
		ParseSuccess &= AvailabilityFlags_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonEntitledLootUuidField = (*Object)->TryGetField(TEXT("entitled_loot_uuid"));
	if (JsonEntitledLootUuidField.IsValid() && !JsonEntitledLootUuidField->IsNull())
	{
		EntitledLootUuid_IsSet = TryGetJsonValue(JsonEntitledLootUuidField, EntitledLootUuid_Optional);
		ParseSuccess &= EntitledLootUuid_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonEntitledLootIdField = (*Object)->TryGetField(TEXT("entitled_loot_id"));
	if (JsonEntitledLootIdField.IsValid() && !JsonEntitledLootIdField->IsNull())
	{
		EntitledLootId_IsSet = TryGetJsonValue(JsonEntitledLootIdField, EntitledLootId_Optional);
		ParseSuccess &= EntitledLootId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonLevelXpTableUuidField = (*Object)->TryGetField(TEXT("level_xp_table_uuid"));
	if (JsonLevelXpTableUuidField.IsValid() && !JsonLevelXpTableUuidField->IsNull())
	{
		LevelXpTableUuid_IsSet = TryGetJsonValue(JsonLevelXpTableUuidField, LevelXpTableUuid_Optional);
		ParseSuccess &= LevelXpTableUuid_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonLevelXpTableIdField = (*Object)->TryGetField(TEXT("level_xp_table_id"));
	if (JsonLevelXpTableIdField.IsValid() && !JsonLevelXpTableIdField->IsNull())
	{
		LevelXpTableId_IsSet = TryGetJsonValue(JsonLevelXpTableIdField, LevelXpTableId_Optional);
		ParseSuccess &= LevelXpTableId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonLevelVendorUuidField = (*Object)->TryGetField(TEXT("level_vendor_uuid"));
	if (JsonLevelVendorUuidField.IsValid() && !JsonLevelVendorUuidField->IsNull())
	{
		LevelVendorUuid_IsSet = TryGetJsonValue(JsonLevelVendorUuidField, LevelVendorUuid_Optional);
		ParseSuccess &= LevelVendorUuid_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonLevelVendorIdField = (*Object)->TryGetField(TEXT("level_vendor_id"));
	if (JsonLevelVendorIdField.IsValid() && !JsonLevelVendorIdField->IsNull())
	{
		LevelVendorId_IsSet = TryGetJsonValue(JsonLevelVendorIdField, LevelVendorId_Optional);
		ParseSuccess &= LevelVendorId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonCouponDiscountCurrencyItemUuidField = (*Object)->TryGetField(TEXT("coupon_discount_currency_item_uuid"));
	if (JsonCouponDiscountCurrencyItemUuidField.IsValid() && !JsonCouponDiscountCurrencyItemUuidField->IsNull())
	{
		CouponDiscountCurrencyItemUuid_IsSet = TryGetJsonValue(JsonCouponDiscountCurrencyItemUuidField, CouponDiscountCurrencyItemUuid_Optional);
		ParseSuccess &= CouponDiscountCurrencyItemUuid_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonCouponDiscountCurrencyItemIdField = (*Object)->TryGetField(TEXT("coupon_discount_currency_item_id"));
	if (JsonCouponDiscountCurrencyItemIdField.IsValid() && !JsonCouponDiscountCurrencyItemIdField->IsNull())
	{
		CouponDiscountCurrencyItemId_IsSet = TryGetJsonValue(JsonCouponDiscountCurrencyItemIdField, CouponDiscountCurrencyItemId_Optional);
		ParseSuccess &= CouponDiscountCurrencyItemId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonCouponDiscountPercentageField = (*Object)->TryGetField(TEXT("coupon_discount_percentage"));
	if (JsonCouponDiscountPercentageField.IsValid() && !JsonCouponDiscountPercentageField->IsNull())
	{
		CouponDiscountPercentage_IsSet = TryGetJsonValue(JsonCouponDiscountPercentageField, CouponDiscountPercentage_Optional);
		ParseSuccess &= CouponDiscountPercentage_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonCouponConsumeOnUseField = (*Object)->TryGetField(TEXT("coupon_consume_on_use"));
	if (JsonCouponConsumeOnUseField.IsValid() && !JsonCouponConsumeOnUseField->IsNull())
	{
		CouponConsumeOnUse_IsSet = TryGetJsonValue(JsonCouponConsumeOnUseField, CouponConsumeOnUse_Optional);
		ParseSuccess &= CouponConsumeOnUse_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonItemPortalUseRulesetIdField = (*Object)->TryGetField(TEXT("item_portal_use_ruleset_id"));
	if (JsonItemPortalUseRulesetIdField.IsValid() && !JsonItemPortalUseRulesetIdField->IsNull())
	{
		ItemPortalUseRulesetId_IsSet = TryGetJsonValue(JsonItemPortalUseRulesetIdField, ItemPortalUseRulesetId_Optional);
		ParseSuccess &= ItemPortalUseRulesetId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonInventoryBucketUseRuleSetIdField = (*Object)->TryGetField(TEXT("inventory_bucket_use_rule_set_id"));
	if (JsonInventoryBucketUseRuleSetIdField.IsValid() && !JsonInventoryBucketUseRuleSetIdField->IsNull())
	{
		InventoryBucketUseRuleSetId_IsSet = TryGetJsonValue(JsonInventoryBucketUseRuleSetIdField, InventoryBucketUseRuleSetId_Optional);
		ParseSuccess &= InventoryBucketUseRuleSetId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonCouponDiscountLootField = (*Object)->TryGetField(TEXT("coupon_discount_loot"));
	if (JsonCouponDiscountLootField.IsValid() && !JsonCouponDiscountLootField->IsNull())
	{
		CouponDiscountLoot_IsSet = TryGetJsonValue(JsonCouponDiscountLootField, CouponDiscountLoot_Optional);
		ParseSuccess &= CouponDiscountLoot_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonCouponDiscountLootUuidField = (*Object)->TryGetField(TEXT("coupon_discount_loot_uuid"));
	if (JsonCouponDiscountLootUuidField.IsValid() && !JsonCouponDiscountLootUuidField->IsNull())
	{
		CouponDiscountLootUuid_IsSet = TryGetJsonValue(JsonCouponDiscountLootUuidField, CouponDiscountLootUuid_Optional);
		ParseSuccess &= CouponDiscountLootUuid_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonCacheInfoField = (*Object)->TryGetField(TEXT("cache_info"));
	if (JsonCacheInfoField.IsValid() && !JsonCacheInfoField->IsNull())
	{
		CacheInfo_IsSet = TryGetJsonValue(JsonCacheInfoField, CacheInfo_Optional);
		ParseSuccess &= CacheInfo_IsSet;
	}

	return ParseSuccess;
}

