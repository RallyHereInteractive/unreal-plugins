// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "InventoryLevel.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_InventoryLevel

void FRHAPI_InventoryLevel::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("item_uuid"));
	RallyHereAPI::WriteJsonValue(Writer, ItemUuid);
	if (ItemId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("item_id"));
		RallyHereAPI::WriteJsonValue(Writer, ItemId_Optional);
	}
	Writer->WriteIdentifierPrefix(TEXT("level"));
	RallyHereAPI::WriteJsonValue(Writer, Level);
	Writer->WriteIdentifierPrefix(TEXT("count"));
	RallyHereAPI::WriteJsonValue(Writer, Count);
	Writer->WriteIdentifierPrefix(TEXT("count_for_next_level"));
	RallyHereAPI::WriteJsonValue(Writer, CountForNextLevel);
	Writer->WriteObjectEnd();
}

bool FRHAPI_InventoryLevel::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	const TSharedPtr<FJsonValue> JsonItemUuidField = (*Object)->TryGetField(TEXT("item_uuid"));
	ParseSuccess &= JsonItemUuidField.IsValid() && (!JsonItemUuidField->IsNull() &&  TryGetJsonValue(JsonItemUuidField, ItemUuid));
	const TSharedPtr<FJsonValue> JsonItemIdField = (*Object)->TryGetField(TEXT("item_id"));
	if (JsonItemIdField.IsValid())
	{
		ItemId_IsSet = TryGetJsonValue(JsonItemIdField, ItemId_Optional);
		ParseSuccess &= ItemId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonLevelField = (*Object)->TryGetField(TEXT("level"));
	ParseSuccess &= JsonLevelField.IsValid() && (!JsonLevelField->IsNull() &&  TryGetJsonValue(JsonLevelField, Level));
	const TSharedPtr<FJsonValue> JsonCountField = (*Object)->TryGetField(TEXT("count"));
	ParseSuccess &= JsonCountField.IsValid() && (!JsonCountField->IsNull() &&  TryGetJsonValue(JsonCountField, Count));
	const TSharedPtr<FJsonValue> JsonCountForNextLevelField = (*Object)->TryGetField(TEXT("count_for_next_level"));
	ParseSuccess &= JsonCountForNextLevelField.IsValid() && (!JsonCountForNextLevelField->IsNull() &&  TryGetJsonValue(JsonCountForNextLevelField, CountForNextLevel));

	return ParseSuccess;
}

