// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "CreateOrJoinRequest.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_CreateOrJoinRequest

void FRHAPI_CreateOrJoinRequest::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("client_version"));
	RallyHereAPI::WriteJsonValue(Writer, ClientVersion);
	Writer->WriteIdentifierPrefix(TEXT("client_settings"));
	RallyHereAPI::WriteJsonValue(Writer, ClientSettings);
	if (CrossplayPreferences_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("crossplay_preferences"));
		RallyHereAPI::WriteJsonValue(Writer, CrossplayPreferences_Optional);
	}
	Writer->WriteIdentifierPrefix(TEXT("session_type"));
	RallyHereAPI::WriteJsonValue(Writer, SessionType);
	if (RegionId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("region_id"));
		RallyHereAPI::WriteJsonValue(Writer, RegionId_Optional);
	}
	if (Player_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("player"));
		RallyHereAPI::WriteJsonValue(Writer, Player_Optional);
	}
	Writer->WriteObjectEnd();
}

bool FRHAPI_CreateOrJoinRequest::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	const TSharedPtr<FJsonValue> JsonClientVersionField = (*Object)->TryGetField(TEXT("client_version"));
	const bool ClientVersion_IsValid = JsonClientVersionField.IsValid() && (!JsonClientVersionField->IsNull() && TryGetJsonValue(JsonClientVersionField, ClientVersion));
	ParseSuccess &= ClientVersion_IsValid; 
	const TSharedPtr<FJsonValue> JsonClientSettingsField = (*Object)->TryGetField(TEXT("client_settings"));
	const bool ClientSettings_IsValid = JsonClientSettingsField.IsValid() && (!JsonClientSettingsField->IsNull() && TryGetJsonValue(JsonClientSettingsField, ClientSettings));
	ParseSuccess &= ClientSettings_IsValid; 
	const TSharedPtr<FJsonValue> JsonCrossplayPreferencesField = (*Object)->TryGetField(TEXT("crossplay_preferences"));
	if (JsonCrossplayPreferencesField.IsValid())
	{
		CrossplayPreferences_IsSet = TryGetJsonValue(JsonCrossplayPreferencesField, CrossplayPreferences_Optional);
		ParseSuccess &= CrossplayPreferences_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonSessionTypeField = (*Object)->TryGetField(TEXT("session_type"));
	const bool SessionType_IsValid = JsonSessionTypeField.IsValid() && (!JsonSessionTypeField->IsNull() && TryGetJsonValue(JsonSessionTypeField, SessionType));
	ParseSuccess &= SessionType_IsValid; 
	const TSharedPtr<FJsonValue> JsonRegionIdField = (*Object)->TryGetField(TEXT("region_id"));
	if (JsonRegionIdField.IsValid())
	{
		RegionId_IsSet = TryGetJsonValue(JsonRegionIdField, RegionId_Optional);
		ParseSuccess &= RegionId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonPlayerField = (*Object)->TryGetField(TEXT("player"));
	if (JsonPlayerField.IsValid())
	{
		Player_IsSet = TryGetJsonValue(JsonPlayerField, Player_Optional);
		ParseSuccess &= Player_IsSet;
	}

	return ParseSuccess;
}

