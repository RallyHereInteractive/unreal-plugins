// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "EntityRunCompleteRequest.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_EntityRunCompleteRequest

void FRHAPI_EntityRunCompleteRequest::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
	Writer->WriteObjectStart();
	if (V_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("v"));
		if (V_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, V_Optional);
	}
	if (Type1_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("type_1"));
		if (Type1_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Type1_Optional);
	}
	if (Type2_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("type_2"));
		if (Type2_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Type2_Optional);
	}
	if (Type3_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("type_3"));
		if (Type3_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Type3_Optional);
	}
	if (Type4_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("type_4"));
		if (Type4_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Type4_Optional);
	}
	Writer->WriteIdentifierPrefix(TEXT("entity_type"));
	if (EntityType_IsNull)
		WriteJsonValue(Writer, nullptr);
	else
	RallyHereAPI::WriteJsonValue(Writer, EnumToString(EntityType));
	Writer->WriteIdentifierPrefix(TEXT("entity_id"));
	if (EntityId_IsNull)
		WriteJsonValue(Writer, nullptr);
	else
	RallyHereAPI::WriteJsonValue(Writer, EntityId);
	if (StageWins_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("stage_wins"));
		RallyHereAPI::WriteJsonValue(Writer, StageWins_Optional);
	}
	if (StageLosses_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("stage_losses"));
		RallyHereAPI::WriteJsonValue(Writer, StageLosses_Optional);
	}
	if (StageIncompletes_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("stage_incompletes"));
		RallyHereAPI::WriteJsonValue(Writer, StageIncompletes_Optional);
	}
	if (RunWin_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("run_win"));
		if (RunWin_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, RunWin_Optional);
	}
	if (RunPlacement_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("run_placement"));
		if (RunPlacement_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, RunPlacement_Optional);
	}
	if (MmrInternalExact_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("mmr_internal_exact"));
		if (MmrInternalExact_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, MmrInternalExact_Optional);
	}
	if (MmrInternalDelta_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("mmr_internal_delta"));
		if (MmrInternalDelta_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, MmrInternalDelta_Optional);
	}
	if (MmrVisExact_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("mmr_vis_exact"));
		if (MmrVisExact_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, MmrVisExact_Optional);
	}
	if (MmrVisDelta_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("mmr_vis_delta"));
		if (MmrVisDelta_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, MmrVisDelta_Optional);
	}
	Writer->WriteObjectEnd();
}

bool FRHAPI_EntityRunCompleteRequest::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	const TSharedPtr<FJsonValue> JsonVField = (*Object)->TryGetField(TEXT("v"));
	if (JsonVField.IsValid())
	{
		V_IsNull = JsonVField->IsNull();
		V_IsSet = V_IsNull || TryGetJsonValue(JsonVField, V_Optional);
		ParseSuccess &= V_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonType1Field = (*Object)->TryGetField(TEXT("type_1"));
	if (JsonType1Field.IsValid())
	{
		Type1_IsNull = JsonType1Field->IsNull();
		Type1_IsSet = Type1_IsNull || TryGetJsonValue(JsonType1Field, Type1_Optional);
		ParseSuccess &= Type1_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonType2Field = (*Object)->TryGetField(TEXT("type_2"));
	if (JsonType2Field.IsValid())
	{
		Type2_IsNull = JsonType2Field->IsNull();
		Type2_IsSet = Type2_IsNull || TryGetJsonValue(JsonType2Field, Type2_Optional);
		ParseSuccess &= Type2_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonType3Field = (*Object)->TryGetField(TEXT("type_3"));
	if (JsonType3Field.IsValid())
	{
		Type3_IsNull = JsonType3Field->IsNull();
		Type3_IsSet = Type3_IsNull || TryGetJsonValue(JsonType3Field, Type3_Optional);
		ParseSuccess &= Type3_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonType4Field = (*Object)->TryGetField(TEXT("type_4"));
	if (JsonType4Field.IsValid())
	{
		Type4_IsNull = JsonType4Field->IsNull();
		Type4_IsSet = Type4_IsNull || TryGetJsonValue(JsonType4Field, Type4_Optional);
		ParseSuccess &= Type4_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonEntityTypeField = (*Object)->TryGetField(TEXT("entity_type"));
	EntityType_IsNull = JsonEntityTypeField != nullptr && JsonEntityTypeField->IsNull();
	const bool EntityType_IsValid = JsonEntityTypeField.IsValid() && (EntityType_IsNull|| TryGetJsonValue(JsonEntityTypeField, EntityType));
	ParseSuccess &= EntityType_IsValid; 
	const TSharedPtr<FJsonValue> JsonEntityIdField = (*Object)->TryGetField(TEXT("entity_id"));
	EntityId_IsNull = JsonEntityIdField != nullptr && JsonEntityIdField->IsNull();
	const bool EntityId_IsValid = JsonEntityIdField.IsValid() && (EntityId_IsNull|| TryGetJsonValue(JsonEntityIdField, EntityId));
	ParseSuccess &= EntityId_IsValid; 
	const TSharedPtr<FJsonValue> JsonStageWinsField = (*Object)->TryGetField(TEXT("stage_wins"));
	if (JsonStageWinsField.IsValid())
	{
		StageWins_IsSet = TryGetJsonValue(JsonStageWinsField, StageWins_Optional);
		ParseSuccess &= StageWins_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonStageLossesField = (*Object)->TryGetField(TEXT("stage_losses"));
	if (JsonStageLossesField.IsValid())
	{
		StageLosses_IsSet = TryGetJsonValue(JsonStageLossesField, StageLosses_Optional);
		ParseSuccess &= StageLosses_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonStageIncompletesField = (*Object)->TryGetField(TEXT("stage_incompletes"));
	if (JsonStageIncompletesField.IsValid())
	{
		StageIncompletes_IsSet = TryGetJsonValue(JsonStageIncompletesField, StageIncompletes_Optional);
		ParseSuccess &= StageIncompletes_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRunWinField = (*Object)->TryGetField(TEXT("run_win"));
	if (JsonRunWinField.IsValid())
	{
		RunWin_IsNull = JsonRunWinField->IsNull();
		RunWin_IsSet = RunWin_IsNull || TryGetJsonValue(JsonRunWinField, RunWin_Optional);
		ParseSuccess &= RunWin_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRunPlacementField = (*Object)->TryGetField(TEXT("run_placement"));
	if (JsonRunPlacementField.IsValid())
	{
		RunPlacement_IsNull = JsonRunPlacementField->IsNull();
		RunPlacement_IsSet = RunPlacement_IsNull || TryGetJsonValue(JsonRunPlacementField, RunPlacement_Optional);
		ParseSuccess &= RunPlacement_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonMmrInternalExactField = (*Object)->TryGetField(TEXT("mmr_internal_exact"));
	if (JsonMmrInternalExactField.IsValid())
	{
		MmrInternalExact_IsNull = JsonMmrInternalExactField->IsNull();
		MmrInternalExact_IsSet = MmrInternalExact_IsNull || TryGetJsonValue(JsonMmrInternalExactField, MmrInternalExact_Optional);
		ParseSuccess &= MmrInternalExact_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonMmrInternalDeltaField = (*Object)->TryGetField(TEXT("mmr_internal_delta"));
	if (JsonMmrInternalDeltaField.IsValid())
	{
		MmrInternalDelta_IsNull = JsonMmrInternalDeltaField->IsNull();
		MmrInternalDelta_IsSet = MmrInternalDelta_IsNull || TryGetJsonValue(JsonMmrInternalDeltaField, MmrInternalDelta_Optional);
		ParseSuccess &= MmrInternalDelta_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonMmrVisExactField = (*Object)->TryGetField(TEXT("mmr_vis_exact"));
	if (JsonMmrVisExactField.IsValid())
	{
		MmrVisExact_IsNull = JsonMmrVisExactField->IsNull();
		MmrVisExact_IsSet = MmrVisExact_IsNull || TryGetJsonValue(JsonMmrVisExactField, MmrVisExact_Optional);
		ParseSuccess &= MmrVisExact_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonMmrVisDeltaField = (*Object)->TryGetField(TEXT("mmr_vis_delta"));
	if (JsonMmrVisDeltaField.IsValid())
	{
		MmrVisDelta_IsNull = JsonMmrVisDeltaField->IsNull();
		MmrVisDelta_IsSet = MmrVisDelta_IsNull || TryGetJsonValue(JsonMmrVisDeltaField, MmrVisDelta_Optional);
		ParseSuccess &= MmrVisDelta_IsSet;
	}

	return ParseSuccess;
}

