// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "PexHostQueryParams.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_PexHostQueryParams

void FRHAPI_PexHostQueryParams::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
	Writer->WriteObjectStart();
	if (ToDatetime_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("to_datetime"));
		if (ToDatetime_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, ToDatetime_Optional);
	}
	if (FromDatetime_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("from_datetime"));
		if (FromDatetime_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, FromDatetime_Optional);
	}
	if (MatchId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("match_id"));
		if (MatchId_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, MatchId_Optional);
	}
	if (RegionId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("region_id"));
		if (RegionId_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, RegionId_Optional);
	}
	if (ServerId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("server_id"));
		if (ServerId_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, ServerId_Optional);
	}
	if (AllocationId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("allocation_id"));
		if (AllocationId_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, AllocationId_Optional);
	}
	if (DatacenterProvider_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("datacenter_provider"));
		if (DatacenterProvider_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, DatacenterProvider_Optional);
	}
	if (DatacenterLocation_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("datacenter_location"));
		if (DatacenterLocation_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, DatacenterLocation_Optional);
	}
	if (MachineClass_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("machine_class"));
		if (MachineClass_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, MachineClass_Optional);
	}
	if (AddressIp_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("address_ip"));
		if (AddressIp_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, AddressIp_Optional);
	}
	if (MapName_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("map_name"));
		if (MapName_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, MapName_Optional);
	}
	if (GameMode_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("game_mode"));
		if (GameMode_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, GameMode_Optional);
	}
	if (MatchmakingProfileId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("matchmaking_profile_id"));
		if (MatchmakingProfileId_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, MatchmakingProfileId_Optional);
	}
	if (ExpectedTeamSize_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("expected_team_size"));
		if (ExpectedTeamSize_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, ExpectedTeamSize_Optional);
	}
	if (ExpectedPlayerCount_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("expected_player_count"));
		if (ExpectedPlayerCount_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, ExpectedPlayerCount_Optional);
	}
	if (HostPlayerUuid_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("host_player_uuid"));
		if (HostPlayerUuid_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, HostPlayerUuid_Optional);
	}
	if (OwningPlayerUuid_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("owning_player_uuid"));
		if (OwningPlayerUuid_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, OwningPlayerUuid_Optional);
	}
	if (Version_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("version"));
		if (Version_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Version_Optional);
	}
	if (PlatformId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("platform_id"));
		if (PlatformId_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, EnumToString(PlatformId_Optional));
	}
	Writer->WriteObjectEnd();
}

bool FRHAPI_PexHostQueryParams::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	const TSharedPtr<FJsonValue> JsonToDatetimeField = (*Object)->TryGetField(TEXT("to_datetime"));
	if (JsonToDatetimeField.IsValid())
	{
		ToDatetime_IsNull = JsonToDatetimeField->IsNull();
		ToDatetime_IsSet = ToDatetime_IsNull || TryGetJsonValue(JsonToDatetimeField, ToDatetime_Optional);
		ParseSuccess &= ToDatetime_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonFromDatetimeField = (*Object)->TryGetField(TEXT("from_datetime"));
	if (JsonFromDatetimeField.IsValid())
	{
		FromDatetime_IsNull = JsonFromDatetimeField->IsNull();
		FromDatetime_IsSet = FromDatetime_IsNull || TryGetJsonValue(JsonFromDatetimeField, FromDatetime_Optional);
		ParseSuccess &= FromDatetime_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonMatchIdField = (*Object)->TryGetField(TEXT("match_id"));
	if (JsonMatchIdField.IsValid())
	{
		MatchId_IsNull = JsonMatchIdField->IsNull();
		MatchId_IsSet = MatchId_IsNull || TryGetJsonValue(JsonMatchIdField, MatchId_Optional);
		ParseSuccess &= MatchId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRegionIdField = (*Object)->TryGetField(TEXT("region_id"));
	if (JsonRegionIdField.IsValid())
	{
		RegionId_IsNull = JsonRegionIdField->IsNull();
		RegionId_IsSet = RegionId_IsNull || TryGetJsonValue(JsonRegionIdField, RegionId_Optional);
		ParseSuccess &= RegionId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonServerIdField = (*Object)->TryGetField(TEXT("server_id"));
	if (JsonServerIdField.IsValid())
	{
		ServerId_IsNull = JsonServerIdField->IsNull();
		ServerId_IsSet = ServerId_IsNull || TryGetJsonValue(JsonServerIdField, ServerId_Optional);
		ParseSuccess &= ServerId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonAllocationIdField = (*Object)->TryGetField(TEXT("allocation_id"));
	if (JsonAllocationIdField.IsValid())
	{
		AllocationId_IsNull = JsonAllocationIdField->IsNull();
		AllocationId_IsSet = AllocationId_IsNull || TryGetJsonValue(JsonAllocationIdField, AllocationId_Optional);
		ParseSuccess &= AllocationId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonDatacenterProviderField = (*Object)->TryGetField(TEXT("datacenter_provider"));
	if (JsonDatacenterProviderField.IsValid())
	{
		DatacenterProvider_IsNull = JsonDatacenterProviderField->IsNull();
		DatacenterProvider_IsSet = DatacenterProvider_IsNull || TryGetJsonValue(JsonDatacenterProviderField, DatacenterProvider_Optional);
		ParseSuccess &= DatacenterProvider_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonDatacenterLocationField = (*Object)->TryGetField(TEXT("datacenter_location"));
	if (JsonDatacenterLocationField.IsValid())
	{
		DatacenterLocation_IsNull = JsonDatacenterLocationField->IsNull();
		DatacenterLocation_IsSet = DatacenterLocation_IsNull || TryGetJsonValue(JsonDatacenterLocationField, DatacenterLocation_Optional);
		ParseSuccess &= DatacenterLocation_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonMachineClassField = (*Object)->TryGetField(TEXT("machine_class"));
	if (JsonMachineClassField.IsValid())
	{
		MachineClass_IsNull = JsonMachineClassField->IsNull();
		MachineClass_IsSet = MachineClass_IsNull || TryGetJsonValue(JsonMachineClassField, MachineClass_Optional);
		ParseSuccess &= MachineClass_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonAddressIpField = (*Object)->TryGetField(TEXT("address_ip"));
	if (JsonAddressIpField.IsValid())
	{
		AddressIp_IsNull = JsonAddressIpField->IsNull();
		AddressIp_IsSet = AddressIp_IsNull || TryGetJsonValue(JsonAddressIpField, AddressIp_Optional);
		ParseSuccess &= AddressIp_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonMapNameField = (*Object)->TryGetField(TEXT("map_name"));
	if (JsonMapNameField.IsValid())
	{
		MapName_IsNull = JsonMapNameField->IsNull();
		MapName_IsSet = MapName_IsNull || TryGetJsonValue(JsonMapNameField, MapName_Optional);
		ParseSuccess &= MapName_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonGameModeField = (*Object)->TryGetField(TEXT("game_mode"));
	if (JsonGameModeField.IsValid())
	{
		GameMode_IsNull = JsonGameModeField->IsNull();
		GameMode_IsSet = GameMode_IsNull || TryGetJsonValue(JsonGameModeField, GameMode_Optional);
		ParseSuccess &= GameMode_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonMatchmakingProfileIdField = (*Object)->TryGetField(TEXT("matchmaking_profile_id"));
	if (JsonMatchmakingProfileIdField.IsValid())
	{
		MatchmakingProfileId_IsNull = JsonMatchmakingProfileIdField->IsNull();
		MatchmakingProfileId_IsSet = MatchmakingProfileId_IsNull || TryGetJsonValue(JsonMatchmakingProfileIdField, MatchmakingProfileId_Optional);
		ParseSuccess &= MatchmakingProfileId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonExpectedTeamSizeField = (*Object)->TryGetField(TEXT("expected_team_size"));
	if (JsonExpectedTeamSizeField.IsValid())
	{
		ExpectedTeamSize_IsNull = JsonExpectedTeamSizeField->IsNull();
		ExpectedTeamSize_IsSet = ExpectedTeamSize_IsNull || TryGetJsonValue(JsonExpectedTeamSizeField, ExpectedTeamSize_Optional);
		ParseSuccess &= ExpectedTeamSize_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonExpectedPlayerCountField = (*Object)->TryGetField(TEXT("expected_player_count"));
	if (JsonExpectedPlayerCountField.IsValid())
	{
		ExpectedPlayerCount_IsNull = JsonExpectedPlayerCountField->IsNull();
		ExpectedPlayerCount_IsSet = ExpectedPlayerCount_IsNull || TryGetJsonValue(JsonExpectedPlayerCountField, ExpectedPlayerCount_Optional);
		ParseSuccess &= ExpectedPlayerCount_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonHostPlayerUuidField = (*Object)->TryGetField(TEXT("host_player_uuid"));
	if (JsonHostPlayerUuidField.IsValid())
	{
		HostPlayerUuid_IsNull = JsonHostPlayerUuidField->IsNull();
		HostPlayerUuid_IsSet = HostPlayerUuid_IsNull || TryGetJsonValue(JsonHostPlayerUuidField, HostPlayerUuid_Optional);
		ParseSuccess &= HostPlayerUuid_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonOwningPlayerUuidField = (*Object)->TryGetField(TEXT("owning_player_uuid"));
	if (JsonOwningPlayerUuidField.IsValid())
	{
		OwningPlayerUuid_IsNull = JsonOwningPlayerUuidField->IsNull();
		OwningPlayerUuid_IsSet = OwningPlayerUuid_IsNull || TryGetJsonValue(JsonOwningPlayerUuidField, OwningPlayerUuid_Optional);
		ParseSuccess &= OwningPlayerUuid_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonVersionField = (*Object)->TryGetField(TEXT("version"));
	if (JsonVersionField.IsValid())
	{
		Version_IsNull = JsonVersionField->IsNull();
		Version_IsSet = Version_IsNull || TryGetJsonValue(JsonVersionField, Version_Optional);
		ParseSuccess &= Version_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonPlatformIdField = (*Object)->TryGetField(TEXT("platform_id"));
	if (JsonPlatformIdField.IsValid())
	{
		PlatformId_IsNull = JsonPlatformIdField->IsNull();
		PlatformId_IsSet = PlatformId_IsNull || TryGetJsonValue(JsonPlatformIdField, PlatformId_Optional);
		ParseSuccess &= PlatformId_IsSet;
	}

	return ParseSuccess;
}

