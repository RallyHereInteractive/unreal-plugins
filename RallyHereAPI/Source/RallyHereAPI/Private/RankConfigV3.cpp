// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "RankConfigV3.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_RankConfigV3

void FRHAPI_RankConfigV3::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
	Writer->WriteObjectStart();
	if (Name_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("name"));
		RallyHereAPI::WriteJsonValue(Writer, Name_Optional);
	}
	if (Description_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("description"));
		RallyHereAPI::WriteJsonValue(Writer, Description_Optional);
	}
	if (CustomData_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("custom_data"));
		RallyHereAPI::WriteJsonValue(Writer, CustomData_Optional);
	}
	Writer->WriteIdentifierPrefix(TEXT("max_mu"));
	RallyHereAPI::WriteJsonValue(Writer, MaxMu);
	Writer->WriteIdentifierPrefix(TEXT("min_mu"));
	RallyHereAPI::WriteJsonValue(Writer, MinMu);
	Writer->WriteIdentifierPrefix(TEXT("min_sigma"));
	RallyHereAPI::WriteJsonValue(Writer, MinSigma);
	if (Beta_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("beta"));
		RallyHereAPI::WriteJsonValue(Writer, Beta_Optional);
	}
	Writer->WriteIdentifierPrefix(TEXT("default_mu"));
	RallyHereAPI::WriteJsonValue(Writer, DefaultMu);
	Writer->WriteIdentifierPrefix(TEXT("default_sigma"));
	RallyHereAPI::WriteJsonValue(Writer, DefaultSigma);
	if (DrawProbability_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("draw_probability"));
		RallyHereAPI::WriteJsonValue(Writer, DrawProbability_Optional);
	}
	if (Tau_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("tau"));
		RallyHereAPI::WriteJsonValue(Writer, Tau_Optional);
	}
	Writer->WriteIdentifierPrefix(TEXT("rank_id"));
	RallyHereAPI::WriteJsonValue(Writer, RankId);
	Writer->WriteObjectEnd();
}

bool FRHAPI_RankConfigV3::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	const TSharedPtr<FJsonValue> JsonNameField = (*Object)->TryGetField(TEXT("name"));
	if (JsonNameField.IsValid())
	{
		Name_IsSet = TryGetJsonValue(JsonNameField, Name_Optional);
		ParseSuccess &= Name_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonDescriptionField = (*Object)->TryGetField(TEXT("description"));
	if (JsonDescriptionField.IsValid())
	{
		Description_IsSet = TryGetJsonValue(JsonDescriptionField, Description_Optional);
		ParseSuccess &= Description_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonCustomDataField = (*Object)->TryGetField(TEXT("custom_data"));
	if (JsonCustomDataField.IsValid())
	{
		CustomData_IsSet = TryGetJsonValue(JsonCustomDataField, CustomData_Optional);
		ParseSuccess &= CustomData_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonMaxMuField = (*Object)->TryGetField(TEXT("max_mu"));
	const bool MaxMu_IsValid = JsonMaxMuField.IsValid() && (!JsonMaxMuField->IsNull() && TryGetJsonValue(JsonMaxMuField, MaxMu));
	ParseSuccess &= MaxMu_IsValid; 
	const TSharedPtr<FJsonValue> JsonMinMuField = (*Object)->TryGetField(TEXT("min_mu"));
	const bool MinMu_IsValid = JsonMinMuField.IsValid() && (!JsonMinMuField->IsNull() && TryGetJsonValue(JsonMinMuField, MinMu));
	ParseSuccess &= MinMu_IsValid; 
	const TSharedPtr<FJsonValue> JsonMinSigmaField = (*Object)->TryGetField(TEXT("min_sigma"));
	const bool MinSigma_IsValid = JsonMinSigmaField.IsValid() && (!JsonMinSigmaField->IsNull() && TryGetJsonValue(JsonMinSigmaField, MinSigma));
	ParseSuccess &= MinSigma_IsValid; 
	const TSharedPtr<FJsonValue> JsonBetaField = (*Object)->TryGetField(TEXT("beta"));
	if (JsonBetaField.IsValid())
	{
		Beta_IsSet = TryGetJsonValue(JsonBetaField, Beta_Optional);
		ParseSuccess &= Beta_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonDefaultMuField = (*Object)->TryGetField(TEXT("default_mu"));
	const bool DefaultMu_IsValid = JsonDefaultMuField.IsValid() && (!JsonDefaultMuField->IsNull() && TryGetJsonValue(JsonDefaultMuField, DefaultMu));
	ParseSuccess &= DefaultMu_IsValid; 
	const TSharedPtr<FJsonValue> JsonDefaultSigmaField = (*Object)->TryGetField(TEXT("default_sigma"));
	const bool DefaultSigma_IsValid = JsonDefaultSigmaField.IsValid() && (!JsonDefaultSigmaField->IsNull() && TryGetJsonValue(JsonDefaultSigmaField, DefaultSigma));
	ParseSuccess &= DefaultSigma_IsValid; 
	const TSharedPtr<FJsonValue> JsonDrawProbabilityField = (*Object)->TryGetField(TEXT("draw_probability"));
	if (JsonDrawProbabilityField.IsValid())
	{
		DrawProbability_IsSet = TryGetJsonValue(JsonDrawProbabilityField, DrawProbability_Optional);
		ParseSuccess &= DrawProbability_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonTauField = (*Object)->TryGetField(TEXT("tau"));
	if (JsonTauField.IsValid())
	{
		Tau_IsSet = TryGetJsonValue(JsonTauField, Tau_Optional);
		ParseSuccess &= Tau_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRankIdField = (*Object)->TryGetField(TEXT("rank_id"));
	const bool RankId_IsValid = JsonRankIdField.IsValid() && (!JsonRankIdField->IsNull() && TryGetJsonValue(JsonRankIdField, RankId));
	ParseSuccess &= RankId_IsValid; 

	return ParseSuccess;
}

