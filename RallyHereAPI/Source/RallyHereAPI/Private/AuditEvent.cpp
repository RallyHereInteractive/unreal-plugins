// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "AuditEvent.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_AuditEvent

void FRHAPI_AuditEvent::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("event_name"));
	RallyHereAPI::WriteJsonValue(Writer, EventName);
	Writer->WriteIdentifierPrefix(TEXT("session_id"));
	RallyHereAPI::WriteJsonValue(Writer, SessionId);
	if (CustomData_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("custom_data"));
		RallyHereAPI::WriteJsonValue(Writer, CustomData_Optional);
	}
	if (SessionType_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("session_type"));
		RallyHereAPI::WriteJsonValue(Writer, SessionType_Optional);
	}
	if (RegionId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("region_id"));
		RallyHereAPI::WriteJsonValue(Writer, RegionId_Optional);
	}
	if (Joinable_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("joinable"));
		RallyHereAPI::WriteJsonValue(Writer, Joinable_Optional);
	}
	if (UpdatedTeams_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("updated_teams"));
		RallyHereAPI::WriteJsonValue(Writer, UpdatedTeams_Optional);
	}
	if (Source_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("source"));
		RallyHereAPI::WriteJsonValue(Writer, EnumToString(Source_Optional));
	}
	if (PlayerUuid_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("player_uuid"));
		RallyHereAPI::WriteJsonValue(Writer, PlayerUuid_Optional);
	}
	if (TeamId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("team_id"));
		RallyHereAPI::WriteJsonValue(Writer, TeamId_Optional);
	}
	if (InvitedSessionId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("invited_session_id"));
		RallyHereAPI::WriteJsonValue(Writer, InvitedSessionId_Optional);
	}
	if (RemovedSessionId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("removed_session_id"));
		RallyHereAPI::WriteJsonValue(Writer, RemovedSessionId_Optional);
	}
	if (Version_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("version"));
		RallyHereAPI::WriteJsonValue(Writer, Version_Optional);
	}
	if (ClientSettings_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("client_settings"));
		RallyHereAPI::WriteJsonValue(Writer, ClientSettings_Optional);
	}
	if (CrossplayPreferences_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("crossplay_preferences"));
		RallyHereAPI::WriteJsonValue(Writer, CrossplayPreferences_Optional);
	}
	if (PlayerStatus_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("player_status"));
		RallyHereAPI::WriteJsonValue(Writer, EnumToString(PlayerStatus_Optional));
	}
	if (Platform_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("platform"));
		RallyHereAPI::WriteJsonValue(Writer, EnumToString(Platform_Optional));
	}
	if (PlatformSessionId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("platform_session_id"));
		RallyHereAPI::WriteJsonValue(Writer, PlatformSessionId_Optional);
	}
	if (InstanceId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("instance_id"));
		RallyHereAPI::WriteJsonValue(Writer, InstanceId_Optional);
	}
	if (HostType_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("host_type"));
		RallyHereAPI::WriteJsonValue(Writer, EnumToString(HostType_Optional));
	}
	if (HostPlayerUuid_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("host_player_uuid"));
		RallyHereAPI::WriteJsonValue(Writer, HostPlayerUuid_Optional);
	}
	if (InstanceRequestTemplate_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("instance_request_template"));
		RallyHereAPI::WriteJsonValue(Writer, InstanceRequestTemplate_Optional);
	}
	if (Map_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("map"));
		RallyHereAPI::WriteJsonValue(Writer, Map_Optional);
	}
	if (Mode_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("mode"));
		RallyHereAPI::WriteJsonValue(Writer, Mode_Optional);
	}
	if (AllocationId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("allocation_id"));
		RallyHereAPI::WriteJsonValue(Writer, AllocationId_Optional);
	}
	if (JoinStatus_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("join_status"));
		RallyHereAPI::WriteJsonValue(Writer, EnumToString(JoinStatus_Optional));
	}
	if (JoinParams_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("join_params"));
		RallyHereAPI::WriteJsonValue(Writer, JoinParams_Optional);
	}
	if (InstanceHealth_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("instance_health"));
		RallyHereAPI::WriteJsonValue(Writer, EnumToString(InstanceHealth_Optional));
	}
	if (QueueId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("queue_id"));
		RallyHereAPI::WriteJsonValue(Writer, QueueId_Optional);
	}
	if (TicketId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("ticket_id"));
		RallyHereAPI::WriteJsonValue(Writer, TicketId_Optional);
	}
	if (AdditionalParams_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("additional_params"));
		RallyHereAPI::WriteJsonValue(Writer, AdditionalParams_Optional);
	}
	if (MapPreferences_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("map_preferences"));
		RallyHereAPI::WriteJsonValue(Writer, MapPreferences_Optional);
	}
	if (QueuedSessionId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("queued_session_id"));
		RallyHereAPI::WriteJsonValue(Writer, QueuedSessionId_Optional);
	}
	if (MatchId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("match_id"));
		RallyHereAPI::WriteJsonValue(Writer, MatchId_Optional);
	}
	if (RequestingUserUuid_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("requesting_user_uuid"));
		RallyHereAPI::WriteJsonValue(Writer, RequestingUserUuid_Optional);
	}
	Writer->WriteIdentifierPrefix(TEXT("event_datetime"));
	RallyHereAPI::WriteJsonValue(Writer, EventDatetime);
	Writer->WriteObjectEnd();
}

bool FRHAPI_AuditEvent::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	const TSharedPtr<FJsonValue> JsonEventNameField = (*Object)->TryGetField(TEXT("event_name"));
	const bool EventName_IsValid = JsonEventNameField.IsValid() && (!JsonEventNameField->IsNull() && TryGetJsonValue(JsonEventNameField, EventName));
	ParseSuccess &= EventName_IsValid; 
	const TSharedPtr<FJsonValue> JsonSessionIdField = (*Object)->TryGetField(TEXT("session_id"));
	const bool SessionId_IsValid = JsonSessionIdField.IsValid() && (!JsonSessionIdField->IsNull() && TryGetJsonValue(JsonSessionIdField, SessionId));
	ParseSuccess &= SessionId_IsValid; 
	const TSharedPtr<FJsonValue> JsonCustomDataField = (*Object)->TryGetField(TEXT("custom_data"));
	if (JsonCustomDataField.IsValid())
	{
		CustomData_IsSet = TryGetJsonValue(JsonCustomDataField, CustomData_Optional);
		ParseSuccess &= CustomData_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonSessionTypeField = (*Object)->TryGetField(TEXT("session_type"));
	if (JsonSessionTypeField.IsValid())
	{
		SessionType_IsSet = TryGetJsonValue(JsonSessionTypeField, SessionType_Optional);
		ParseSuccess &= SessionType_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRegionIdField = (*Object)->TryGetField(TEXT("region_id"));
	if (JsonRegionIdField.IsValid())
	{
		RegionId_IsSet = TryGetJsonValue(JsonRegionIdField, RegionId_Optional);
		ParseSuccess &= RegionId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonJoinableField = (*Object)->TryGetField(TEXT("joinable"));
	if (JsonJoinableField.IsValid())
	{
		Joinable_IsSet = TryGetJsonValue(JsonJoinableField, Joinable_Optional);
		ParseSuccess &= Joinable_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonUpdatedTeamsField = (*Object)->TryGetField(TEXT("updated_teams"));
	if (JsonUpdatedTeamsField.IsValid())
	{
		UpdatedTeams_IsSet = TryGetJsonValue(JsonUpdatedTeamsField, UpdatedTeams_Optional);
		ParseSuccess &= UpdatedTeams_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonSourceField = (*Object)->TryGetField(TEXT("source"));
	if (JsonSourceField.IsValid())
	{
		Source_IsSet = TryGetJsonValue(JsonSourceField, Source_Optional);
		ParseSuccess &= Source_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonPlayerUuidField = (*Object)->TryGetField(TEXT("player_uuid"));
	if (JsonPlayerUuidField.IsValid())
	{
		PlayerUuid_IsSet = TryGetJsonValue(JsonPlayerUuidField, PlayerUuid_Optional);
		ParseSuccess &= PlayerUuid_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonTeamIdField = (*Object)->TryGetField(TEXT("team_id"));
	if (JsonTeamIdField.IsValid())
	{
		TeamId_IsSet = TryGetJsonValue(JsonTeamIdField, TeamId_Optional);
		ParseSuccess &= TeamId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonInvitedSessionIdField = (*Object)->TryGetField(TEXT("invited_session_id"));
	if (JsonInvitedSessionIdField.IsValid())
	{
		InvitedSessionId_IsSet = TryGetJsonValue(JsonInvitedSessionIdField, InvitedSessionId_Optional);
		ParseSuccess &= InvitedSessionId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRemovedSessionIdField = (*Object)->TryGetField(TEXT("removed_session_id"));
	if (JsonRemovedSessionIdField.IsValid())
	{
		RemovedSessionId_IsSet = TryGetJsonValue(JsonRemovedSessionIdField, RemovedSessionId_Optional);
		ParseSuccess &= RemovedSessionId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonVersionField = (*Object)->TryGetField(TEXT("version"));
	if (JsonVersionField.IsValid())
	{
		Version_IsSet = TryGetJsonValue(JsonVersionField, Version_Optional);
		ParseSuccess &= Version_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonClientSettingsField = (*Object)->TryGetField(TEXT("client_settings"));
	if (JsonClientSettingsField.IsValid())
	{
		ClientSettings_IsSet = TryGetJsonValue(JsonClientSettingsField, ClientSettings_Optional);
		ParseSuccess &= ClientSettings_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonCrossplayPreferencesField = (*Object)->TryGetField(TEXT("crossplay_preferences"));
	if (JsonCrossplayPreferencesField.IsValid())
	{
		CrossplayPreferences_IsSet = TryGetJsonValue(JsonCrossplayPreferencesField, CrossplayPreferences_Optional);
		ParseSuccess &= CrossplayPreferences_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonPlayerStatusField = (*Object)->TryGetField(TEXT("player_status"));
	if (JsonPlayerStatusField.IsValid())
	{
		PlayerStatus_IsSet = TryGetJsonValue(JsonPlayerStatusField, PlayerStatus_Optional);
		ParseSuccess &= PlayerStatus_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonPlatformField = (*Object)->TryGetField(TEXT("platform"));
	if (JsonPlatformField.IsValid())
	{
		Platform_IsSet = TryGetJsonValue(JsonPlatformField, Platform_Optional);
		ParseSuccess &= Platform_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonPlatformSessionIdField = (*Object)->TryGetField(TEXT("platform_session_id"));
	if (JsonPlatformSessionIdField.IsValid())
	{
		PlatformSessionId_IsSet = TryGetJsonValue(JsonPlatformSessionIdField, PlatformSessionId_Optional);
		ParseSuccess &= PlatformSessionId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonInstanceIdField = (*Object)->TryGetField(TEXT("instance_id"));
	if (JsonInstanceIdField.IsValid())
	{
		InstanceId_IsSet = TryGetJsonValue(JsonInstanceIdField, InstanceId_Optional);
		ParseSuccess &= InstanceId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonHostTypeField = (*Object)->TryGetField(TEXT("host_type"));
	if (JsonHostTypeField.IsValid())
	{
		HostType_IsSet = TryGetJsonValue(JsonHostTypeField, HostType_Optional);
		ParseSuccess &= HostType_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonHostPlayerUuidField = (*Object)->TryGetField(TEXT("host_player_uuid"));
	if (JsonHostPlayerUuidField.IsValid())
	{
		HostPlayerUuid_IsSet = TryGetJsonValue(JsonHostPlayerUuidField, HostPlayerUuid_Optional);
		ParseSuccess &= HostPlayerUuid_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonInstanceRequestTemplateField = (*Object)->TryGetField(TEXT("instance_request_template"));
	if (JsonInstanceRequestTemplateField.IsValid())
	{
		InstanceRequestTemplate_IsSet = TryGetJsonValue(JsonInstanceRequestTemplateField, InstanceRequestTemplate_Optional);
		ParseSuccess &= InstanceRequestTemplate_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonMapField = (*Object)->TryGetField(TEXT("map"));
	if (JsonMapField.IsValid())
	{
		Map_IsSet = TryGetJsonValue(JsonMapField, Map_Optional);
		ParseSuccess &= Map_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonModeField = (*Object)->TryGetField(TEXT("mode"));
	if (JsonModeField.IsValid())
	{
		Mode_IsSet = TryGetJsonValue(JsonModeField, Mode_Optional);
		ParseSuccess &= Mode_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonAllocationIdField = (*Object)->TryGetField(TEXT("allocation_id"));
	if (JsonAllocationIdField.IsValid())
	{
		AllocationId_IsSet = TryGetJsonValue(JsonAllocationIdField, AllocationId_Optional);
		ParseSuccess &= AllocationId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonJoinStatusField = (*Object)->TryGetField(TEXT("join_status"));
	if (JsonJoinStatusField.IsValid())
	{
		JoinStatus_IsSet = TryGetJsonValue(JsonJoinStatusField, JoinStatus_Optional);
		ParseSuccess &= JoinStatus_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonJoinParamsField = (*Object)->TryGetField(TEXT("join_params"));
	if (JsonJoinParamsField.IsValid())
	{
		JoinParams_IsSet = TryGetJsonValue(JsonJoinParamsField, JoinParams_Optional);
		ParseSuccess &= JoinParams_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonInstanceHealthField = (*Object)->TryGetField(TEXT("instance_health"));
	if (JsonInstanceHealthField.IsValid())
	{
		InstanceHealth_IsSet = TryGetJsonValue(JsonInstanceHealthField, InstanceHealth_Optional);
		ParseSuccess &= InstanceHealth_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonQueueIdField = (*Object)->TryGetField(TEXT("queue_id"));
	if (JsonQueueIdField.IsValid())
	{
		QueueId_IsSet = TryGetJsonValue(JsonQueueIdField, QueueId_Optional);
		ParseSuccess &= QueueId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonTicketIdField = (*Object)->TryGetField(TEXT("ticket_id"));
	if (JsonTicketIdField.IsValid())
	{
		TicketId_IsSet = TryGetJsonValue(JsonTicketIdField, TicketId_Optional);
		ParseSuccess &= TicketId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonAdditionalParamsField = (*Object)->TryGetField(TEXT("additional_params"));
	if (JsonAdditionalParamsField.IsValid())
	{
		AdditionalParams_IsSet = TryGetJsonValue(JsonAdditionalParamsField, AdditionalParams_Optional);
		ParseSuccess &= AdditionalParams_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonMapPreferencesField = (*Object)->TryGetField(TEXT("map_preferences"));
	if (JsonMapPreferencesField.IsValid())
	{
		MapPreferences_IsSet = TryGetJsonValue(JsonMapPreferencesField, MapPreferences_Optional);
		ParseSuccess &= MapPreferences_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonQueuedSessionIdField = (*Object)->TryGetField(TEXT("queued_session_id"));
	if (JsonQueuedSessionIdField.IsValid())
	{
		QueuedSessionId_IsSet = TryGetJsonValue(JsonQueuedSessionIdField, QueuedSessionId_Optional);
		ParseSuccess &= QueuedSessionId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonMatchIdField = (*Object)->TryGetField(TEXT("match_id"));
	if (JsonMatchIdField.IsValid())
	{
		MatchId_IsSet = TryGetJsonValue(JsonMatchIdField, MatchId_Optional);
		ParseSuccess &= MatchId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRequestingUserUuidField = (*Object)->TryGetField(TEXT("requesting_user_uuid"));
	if (JsonRequestingUserUuidField.IsValid())
	{
		RequestingUserUuid_IsSet = TryGetJsonValue(JsonRequestingUserUuidField, RequestingUserUuid_Optional);
		ParseSuccess &= RequestingUserUuid_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonEventDatetimeField = (*Object)->TryGetField(TEXT("event_datetime"));
	const bool EventDatetime_IsValid = JsonEventDatetimeField.IsValid() && (!JsonEventDatetimeField->IsNull() && TryGetJsonValue(JsonEventDatetimeField, EventDatetime));
	ParseSuccess &= EventDatetime_IsValid; 

	return ParseSuccess;
}

