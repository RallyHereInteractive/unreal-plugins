// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "OAuthTokenExchange.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_OAuthTokenExchange

void FRHAPI_OAuthTokenExchange::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("grant_type"));
	RallyHereAPI::WriteJsonValue(Writer, EnumToString(GrantType));
	Writer->WriteIdentifierPrefix(TEXT("code"));
	RallyHereAPI::WriteJsonValue(Writer, Code);
	if (AcceptedEula_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("accepted_eula"));
		RallyHereAPI::WriteJsonValue(Writer, AcceptedEula_Optional);
	}
	if (AcceptedTos_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("accepted_tos"));
		RallyHereAPI::WriteJsonValue(Writer, AcceptedTos_Optional);
	}
	if (AcceptedPrivacyPolicy_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("accepted_privacy_policy"));
		RallyHereAPI::WriteJsonValue(Writer, AcceptedPrivacyPolicy_Optional);
	}
	Writer->WriteObjectEnd();
}

bool FRHAPI_OAuthTokenExchange::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	const TSharedPtr<FJsonValue> JsonGrantTypeField = (*Object)->TryGetField(TEXT("grant_type"));
	const bool GrantType_IsValid = JsonGrantTypeField.IsValid() && (!JsonGrantTypeField->IsNull() && TryGetJsonValue(JsonGrantTypeField, GrantType));
	ParseSuccess &= GrantType_IsValid; 
	const TSharedPtr<FJsonValue> JsonCodeField = (*Object)->TryGetField(TEXT("code"));
	const bool Code_IsValid = JsonCodeField.IsValid() && (!JsonCodeField->IsNull() && TryGetJsonValue(JsonCodeField, Code));
	ParseSuccess &= Code_IsValid; 
	const TSharedPtr<FJsonValue> JsonAcceptedEulaField = (*Object)->TryGetField(TEXT("accepted_eula"));
	if (JsonAcceptedEulaField.IsValid())
	{
		AcceptedEula_IsSet = TryGetJsonValue(JsonAcceptedEulaField, AcceptedEula_Optional);
		ParseSuccess &= AcceptedEula_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonAcceptedTosField = (*Object)->TryGetField(TEXT("accepted_tos"));
	if (JsonAcceptedTosField.IsValid())
	{
		AcceptedTos_IsSet = TryGetJsonValue(JsonAcceptedTosField, AcceptedTos_Optional);
		ParseSuccess &= AcceptedTos_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonAcceptedPrivacyPolicyField = (*Object)->TryGetField(TEXT("accepted_privacy_policy"));
	if (JsonAcceptedPrivacyPolicyField.IsValid())
	{
		AcceptedPrivacyPolicy_IsSet = TryGetJsonValue(JsonAcceptedPrivacyPolicyField, AcceptedPrivacyPolicy_Optional);
		ParseSuccess &= AcceptedPrivacyPolicy_IsSet;
	}

	return ParseSuccess;
}

