// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "PlatformSession.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_PlatformSession

void FRHAPI_PlatformSession::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("platform"));
	RallyHereAPI::WriteJsonValue(Writer, EnumToString(Platform));
	Writer->WriteIdentifierPrefix(TEXT("platform_session_type"));
	RallyHereAPI::WriteJsonValue(Writer, PlatformSessionType);
	Writer->WriteIdentifierPrefix(TEXT("platform_session_id_base64"));
	RallyHereAPI::WriteJsonValue(Writer, PlatformSessionIdBase64);
	Writer->WriteIdentifierPrefix(TEXT("players"));
	RallyHereAPI::WriteJsonValue(Writer, Players);
	if (CustomData_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("custom_data"));
		RallyHereAPI::WriteJsonValue(Writer, CustomData_Optional);
	}
	Writer->WriteObjectEnd();
}

bool FRHAPI_PlatformSession::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	const TSharedPtr<FJsonValue> JsonPlatformField = (*Object)->TryGetField(TEXT("platform"));
	const bool Platform_IsValid = JsonPlatformField.IsValid() && (!JsonPlatformField->IsNull() && TryGetJsonValue(JsonPlatformField, Platform));
	ParseSuccess &= Platform_IsValid; 
	const TSharedPtr<FJsonValue> JsonPlatformSessionTypeField = (*Object)->TryGetField(TEXT("platform_session_type"));
	const bool PlatformSessionType_IsValid = JsonPlatformSessionTypeField.IsValid() && (!JsonPlatformSessionTypeField->IsNull() && TryGetJsonValue(JsonPlatformSessionTypeField, PlatformSessionType));
	ParseSuccess &= PlatformSessionType_IsValid; 
	const TSharedPtr<FJsonValue> JsonPlatformSessionIdBase64Field = (*Object)->TryGetField(TEXT("platform_session_id_base64"));
	const bool PlatformSessionIdBase64_IsValid = JsonPlatformSessionIdBase64Field.IsValid() && (!JsonPlatformSessionIdBase64Field->IsNull() && TryGetJsonValue(JsonPlatformSessionIdBase64Field, PlatformSessionIdBase64));
	ParseSuccess &= PlatformSessionIdBase64_IsValid; 
	const TSharedPtr<FJsonValue> JsonPlayersField = (*Object)->TryGetField(TEXT("players"));
	const bool Players_IsValid = JsonPlayersField.IsValid() && (!JsonPlayersField->IsNull() && TryGetJsonValue(JsonPlayersField, Players));
	ParseSuccess &= Players_IsValid; 
	const TSharedPtr<FJsonValue> JsonCustomDataField = (*Object)->TryGetField(TEXT("custom_data"));
	if (JsonCustomDataField.IsValid())
	{
		CustomData_IsSet = TryGetJsonValue(JsonCustomDataField, CustomData_Optional);
		ParseSuccess &= CustomData_IsSet;
	}

	return ParseSuccess;
}

