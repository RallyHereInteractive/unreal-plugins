// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "StageMatchmakeParams.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_StageMatchmakeParams

void FRHAPI_StageMatchmakeParams::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
	Writer->WriteObjectStart();
	if (Type1_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("type_1"));
		if (Type1_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Type1_Optional);
	}
	if (Type2_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("type_2"));
		if (Type2_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Type2_Optional);
	}
	if (Type3_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("type_3"));
		if (Type3_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Type3_Optional);
	}
	if (Type4_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("type_4"));
		if (Type4_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Type4_Optional);
	}
	if (V_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("v"));
		if (V_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, V_Optional);
	}
	if (Index_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("index"));
		if (Index_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Index_Optional);
	}
	if (MmrInternalMin_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("mmr_internal_min"));
		if (MmrInternalMin_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, MmrInternalMin_Optional);
	}
	if (MmrInternalMax_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("mmr_internal_max"));
		if (MmrInternalMax_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, MmrInternalMax_Optional);
	}
	if (EntityType_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("entity_type"));
		if (EntityType_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, EnumToString(EntityType_Optional));
	}
	if (EntityId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("entity_id"));
		if (EntityId_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, EntityId_Optional);
	}
	if (MmrInternalOverride_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("mmr_internal_override"));
		if (MmrInternalOverride_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, MmrInternalOverride_Optional);
	}
	Writer->WriteObjectEnd();
}

bool FRHAPI_StageMatchmakeParams::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	const TSharedPtr<FJsonValue> JsonType1Field = (*Object)->TryGetField(TEXT("type_1"));
	if (JsonType1Field.IsValid())
	{
		Type1_IsNull = JsonType1Field->IsNull();
		Type1_IsSet = Type1_IsNull || TryGetJsonValue(JsonType1Field, Type1_Optional);
		ParseSuccess &= Type1_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonType2Field = (*Object)->TryGetField(TEXT("type_2"));
	if (JsonType2Field.IsValid())
	{
		Type2_IsNull = JsonType2Field->IsNull();
		Type2_IsSet = Type2_IsNull || TryGetJsonValue(JsonType2Field, Type2_Optional);
		ParseSuccess &= Type2_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonType3Field = (*Object)->TryGetField(TEXT("type_3"));
	if (JsonType3Field.IsValid())
	{
		Type3_IsNull = JsonType3Field->IsNull();
		Type3_IsSet = Type3_IsNull || TryGetJsonValue(JsonType3Field, Type3_Optional);
		ParseSuccess &= Type3_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonType4Field = (*Object)->TryGetField(TEXT("type_4"));
	if (JsonType4Field.IsValid())
	{
		Type4_IsNull = JsonType4Field->IsNull();
		Type4_IsSet = Type4_IsNull || TryGetJsonValue(JsonType4Field, Type4_Optional);
		ParseSuccess &= Type4_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonVField = (*Object)->TryGetField(TEXT("v"));
	if (JsonVField.IsValid())
	{
		V_IsNull = JsonVField->IsNull();
		V_IsSet = V_IsNull || TryGetJsonValue(JsonVField, V_Optional);
		ParseSuccess &= V_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonIndexField = (*Object)->TryGetField(TEXT("index"));
	if (JsonIndexField.IsValid())
	{
		Index_IsNull = JsonIndexField->IsNull();
		Index_IsSet = Index_IsNull || TryGetJsonValue(JsonIndexField, Index_Optional);
		ParseSuccess &= Index_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonMmrInternalMinField = (*Object)->TryGetField(TEXT("mmr_internal_min"));
	if (JsonMmrInternalMinField.IsValid())
	{
		MmrInternalMin_IsNull = JsonMmrInternalMinField->IsNull();
		MmrInternalMin_IsSet = MmrInternalMin_IsNull || TryGetJsonValue(JsonMmrInternalMinField, MmrInternalMin_Optional);
		ParseSuccess &= MmrInternalMin_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonMmrInternalMaxField = (*Object)->TryGetField(TEXT("mmr_internal_max"));
	if (JsonMmrInternalMaxField.IsValid())
	{
		MmrInternalMax_IsNull = JsonMmrInternalMaxField->IsNull();
		MmrInternalMax_IsSet = MmrInternalMax_IsNull || TryGetJsonValue(JsonMmrInternalMaxField, MmrInternalMax_Optional);
		ParseSuccess &= MmrInternalMax_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonEntityTypeField = (*Object)->TryGetField(TEXT("entity_type"));
	if (JsonEntityTypeField.IsValid())
	{
		EntityType_IsNull = JsonEntityTypeField->IsNull();
		EntityType_IsSet = EntityType_IsNull || TryGetJsonValue(JsonEntityTypeField, EntityType_Optional);
		ParseSuccess &= EntityType_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonEntityIdField = (*Object)->TryGetField(TEXT("entity_id"));
	if (JsonEntityIdField.IsValid())
	{
		EntityId_IsNull = JsonEntityIdField->IsNull();
		EntityId_IsSet = EntityId_IsNull || TryGetJsonValue(JsonEntityIdField, EntityId_Optional);
		ParseSuccess &= EntityId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonMmrInternalOverrideField = (*Object)->TryGetField(TEXT("mmr_internal_override"));
	if (JsonMmrInternalOverrideField.IsValid())
	{
		MmrInternalOverride_IsNull = JsonMmrInternalOverrideField->IsNull();
		MmrInternalOverride_IsSet = MmrInternalOverride_IsNull || TryGetJsonValue(JsonMmrInternalOverrideField, MmrInternalOverride_Optional);
		ParseSuccess &= MmrInternalOverride_IsSet;
	}

	return ParseSuccess;
}

