// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "SessionEvent.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_SessionEvent

void FRHAPI_SessionEvent::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
    Writer->WriteObjectStart();
    Writer->WriteIdentifierPrefix(TEXT("event_code"));
    RallyHereAPI::WriteJsonValue(Writer, EventCode);
    if (Description_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("description"));
        RallyHereAPI::WriteJsonValue(Writer, Description_Optional);
    }
    if (SourcePlayerId_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("source_player_id"));
        RallyHereAPI::WriteJsonValue(Writer, SourcePlayerId_Optional);
    }
    if (SourcePlayerUuid_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("source_player_uuid"));
        RallyHereAPI::WriteJsonValue(Writer, SourcePlayerUuid_Optional);
    }
    if (TargetPlayerId_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("target_player_id"));
        RallyHereAPI::WriteJsonValue(Writer, TargetPlayerId_Optional);
    }
    if (TargetPlayerUuid_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("target_player_uuid"));
        RallyHereAPI::WriteJsonValue(Writer, TargetPlayerUuid_Optional);
    }
    if (Instance_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("instance"));
        RallyHereAPI::WriteJsonValue(Writer, Instance_Optional);
    }
    if (Match_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("match"));
        RallyHereAPI::WriteJsonValue(Writer, Match_Optional);
    }
    if (Platform_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("platform"));
        RallyHereAPI::WriteJsonValue(Writer, EnumToString(Platform_Optional));
    }
    if (PlatformSessionIdBase64_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("platform_session_id_base64"));
        RallyHereAPI::WriteJsonValue(Writer, PlatformSessionIdBase64_Optional);
    }
    if (CustomData_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("custom_data"));
        RallyHereAPI::WriteJsonValue(Writer, CustomData_Optional);
    }
    Writer->WriteIdentifierPrefix(TEXT("timestamp"));
    RallyHereAPI::WriteJsonValue(Writer, Timestamp);
    Writer->WriteObjectEnd();
}

bool FRHAPI_SessionEvent::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
    const TSharedPtr<FJsonObject>* Object;
    if (!JsonValue->TryGetObject(Object))
        return false;

    bool ParseSuccess = true;

    const TSharedPtr<FJsonValue> JsonEventCodeField = (*Object)->TryGetField(TEXT("event_code"));
    ParseSuccess &= JsonEventCodeField.IsValid() && !JsonEventCodeField->IsNull() && TryGetJsonValue(JsonEventCodeField, EventCode);
    const TSharedPtr<FJsonValue> JsonDescriptionField = (*Object)->TryGetField(TEXT("description"));
    if (JsonDescriptionField.IsValid() && !JsonDescriptionField->IsNull())
    {
        Description_IsSet = TryGetJsonValue(JsonDescriptionField, Description_Optional);
        ParseSuccess &= Description_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonSourcePlayerIdField = (*Object)->TryGetField(TEXT("source_player_id"));
    if (JsonSourcePlayerIdField.IsValid() && !JsonSourcePlayerIdField->IsNull())
    {
        SourcePlayerId_IsSet = TryGetJsonValue(JsonSourcePlayerIdField, SourcePlayerId_Optional);
        ParseSuccess &= SourcePlayerId_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonSourcePlayerUuidField = (*Object)->TryGetField(TEXT("source_player_uuid"));
    if (JsonSourcePlayerUuidField.IsValid() && !JsonSourcePlayerUuidField->IsNull())
    {
        SourcePlayerUuid_IsSet = TryGetJsonValue(JsonSourcePlayerUuidField, SourcePlayerUuid_Optional);
        ParseSuccess &= SourcePlayerUuid_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonTargetPlayerIdField = (*Object)->TryGetField(TEXT("target_player_id"));
    if (JsonTargetPlayerIdField.IsValid() && !JsonTargetPlayerIdField->IsNull())
    {
        TargetPlayerId_IsSet = TryGetJsonValue(JsonTargetPlayerIdField, TargetPlayerId_Optional);
        ParseSuccess &= TargetPlayerId_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonTargetPlayerUuidField = (*Object)->TryGetField(TEXT("target_player_uuid"));
    if (JsonTargetPlayerUuidField.IsValid() && !JsonTargetPlayerUuidField->IsNull())
    {
        TargetPlayerUuid_IsSet = TryGetJsonValue(JsonTargetPlayerUuidField, TargetPlayerUuid_Optional);
        ParseSuccess &= TargetPlayerUuid_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonInstanceField = (*Object)->TryGetField(TEXT("instance"));
    if (JsonInstanceField.IsValid() && !JsonInstanceField->IsNull())
    {
        Instance_IsSet = TryGetJsonValue(JsonInstanceField, Instance_Optional);
        ParseSuccess &= Instance_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonMatchField = (*Object)->TryGetField(TEXT("match"));
    if (JsonMatchField.IsValid() && !JsonMatchField->IsNull())
    {
        Match_IsSet = TryGetJsonValue(JsonMatchField, Match_Optional);
        ParseSuccess &= Match_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonPlatformField = (*Object)->TryGetField(TEXT("platform"));
    if (JsonPlatformField.IsValid() && !JsonPlatformField->IsNull())
    {
        Platform_IsSet = TryGetJsonValue(JsonPlatformField, Platform_Optional);
        ParseSuccess &= Platform_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonPlatformSessionIdBase64Field = (*Object)->TryGetField(TEXT("platform_session_id_base64"));
    if (JsonPlatformSessionIdBase64Field.IsValid() && !JsonPlatformSessionIdBase64Field->IsNull())
    {
        PlatformSessionIdBase64_IsSet = TryGetJsonValue(JsonPlatformSessionIdBase64Field, PlatformSessionIdBase64_Optional);
        ParseSuccess &= PlatformSessionIdBase64_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonCustomDataField = (*Object)->TryGetField(TEXT("custom_data"));
    if (JsonCustomDataField.IsValid() && !JsonCustomDataField->IsNull())
    {
        CustomData_IsSet = TryGetJsonValue(JsonCustomDataField, CustomData_Optional);
        ParseSuccess &= CustomData_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonTimestampField = (*Object)->TryGetField(TEXT("timestamp"));
    ParseSuccess &= JsonTimestampField.IsValid() && !JsonTimestampField->IsNull() && TryGetJsonValue(JsonTimestampField, Timestamp);

    return ParseSuccess;
}

