// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "MatchValuesOnly.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_MatchValuesOnly

void FRHAPI_MatchValuesOnly::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
    Writer->WriteObjectStart();
    if (LastModifiedTimestamp_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("last_modified_timestamp"));
        RallyHereAPI::WriteJsonValue(Writer, LastModifiedTimestamp_Optional);
    }
    if (CreatedTimestamp_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("created_timestamp"));
        RallyHereAPI::WriteJsonValue(Writer, CreatedTimestamp_Optional);
    }
    if (Type_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("type"));
        RallyHereAPI::WriteJsonValue(Writer, Type_Optional);
    }
    if (State_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("state"));
        RallyHereAPI::WriteJsonValue(Writer, EnumToString(State_Optional));
    }
    if (StartTimestamp_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("start_timestamp"));
        RallyHereAPI::WriteJsonValue(Writer, StartTimestamp_Optional);
    }
    if (EndTimestamp_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("end_timestamp"));
        RallyHereAPI::WriteJsonValue(Writer, EndTimestamp_Optional);
    }
    if (DurationSeconds_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("duration_seconds"));
        RallyHereAPI::WriteJsonValue(Writer, DurationSeconds_Optional);
    }
    if (CustomData_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("custom_data"));
        RallyHereAPI::WriteJsonValue(Writer, CustomData_Optional);
    }
    if (CorrelationId_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("correlation_id"));
        RallyHereAPI::WriteJsonValue(Writer, CorrelationId_Optional);
    }
    if (Sessions_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("sessions"));
        RallyHereAPI::WriteJsonValue(Writer, Sessions_Optional);
    }
    if (Instances_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("instances"));
        RallyHereAPI::WriteJsonValue(Writer, Instances_Optional);
    }
    if (Allocations_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("allocations"));
        RallyHereAPI::WriteJsonValue(Writer, Allocations_Optional);
    }
    if (MatchId_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("match_id"));
        RallyHereAPI::WriteJsonValue(Writer, MatchId_Optional);
    }
    Writer->WriteObjectEnd();
}

bool FRHAPI_MatchValuesOnly::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
    const TSharedPtr<FJsonObject>* Object;
    if (!JsonValue->TryGetObject(Object))
        return false;

    bool ParseSuccess = true;

    const TSharedPtr<FJsonValue> JsonLastModifiedTimestampField = (*Object)->TryGetField(TEXT("last_modified_timestamp"));
    if (JsonLastModifiedTimestampField.IsValid() && !JsonLastModifiedTimestampField->IsNull())
    {
        LastModifiedTimestamp_IsSet = TryGetJsonValue(JsonLastModifiedTimestampField, LastModifiedTimestamp_Optional);
        ParseSuccess &= LastModifiedTimestamp_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonCreatedTimestampField = (*Object)->TryGetField(TEXT("created_timestamp"));
    if (JsonCreatedTimestampField.IsValid() && !JsonCreatedTimestampField->IsNull())
    {
        CreatedTimestamp_IsSet = TryGetJsonValue(JsonCreatedTimestampField, CreatedTimestamp_Optional);
        ParseSuccess &= CreatedTimestamp_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonTypeField = (*Object)->TryGetField(TEXT("type"));
    if (JsonTypeField.IsValid() && !JsonTypeField->IsNull())
    {
        Type_IsSet = TryGetJsonValue(JsonTypeField, Type_Optional);
        ParseSuccess &= Type_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonStateField = (*Object)->TryGetField(TEXT("state"));
    if (JsonStateField.IsValid() && !JsonStateField->IsNull())
    {
        State_IsSet = TryGetJsonValue(JsonStateField, State_Optional);
        ParseSuccess &= State_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonStartTimestampField = (*Object)->TryGetField(TEXT("start_timestamp"));
    if (JsonStartTimestampField.IsValid() && !JsonStartTimestampField->IsNull())
    {
        StartTimestamp_IsSet = TryGetJsonValue(JsonStartTimestampField, StartTimestamp_Optional);
        ParseSuccess &= StartTimestamp_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonEndTimestampField = (*Object)->TryGetField(TEXT("end_timestamp"));
    if (JsonEndTimestampField.IsValid() && !JsonEndTimestampField->IsNull())
    {
        EndTimestamp_IsSet = TryGetJsonValue(JsonEndTimestampField, EndTimestamp_Optional);
        ParseSuccess &= EndTimestamp_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonDurationSecondsField = (*Object)->TryGetField(TEXT("duration_seconds"));
    if (JsonDurationSecondsField.IsValid() && !JsonDurationSecondsField->IsNull())
    {
        DurationSeconds_IsSet = TryGetJsonValue(JsonDurationSecondsField, DurationSeconds_Optional);
        ParseSuccess &= DurationSeconds_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonCustomDataField = (*Object)->TryGetField(TEXT("custom_data"));
    if (JsonCustomDataField.IsValid() && !JsonCustomDataField->IsNull())
    {
        CustomData_IsSet = TryGetJsonValue(JsonCustomDataField, CustomData_Optional);
        ParseSuccess &= CustomData_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonCorrelationIdField = (*Object)->TryGetField(TEXT("correlation_id"));
    if (JsonCorrelationIdField.IsValid() && !JsonCorrelationIdField->IsNull())
    {
        CorrelationId_IsSet = TryGetJsonValue(JsonCorrelationIdField, CorrelationId_Optional);
        ParseSuccess &= CorrelationId_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonSessionsField = (*Object)->TryGetField(TEXT("sessions"));
    if (JsonSessionsField.IsValid() && !JsonSessionsField->IsNull())
    {
        Sessions_IsSet = TryGetJsonValue(JsonSessionsField, Sessions_Optional);
        ParseSuccess &= Sessions_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonInstancesField = (*Object)->TryGetField(TEXT("instances"));
    if (JsonInstancesField.IsValid() && !JsonInstancesField->IsNull())
    {
        Instances_IsSet = TryGetJsonValue(JsonInstancesField, Instances_Optional);
        ParseSuccess &= Instances_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonAllocationsField = (*Object)->TryGetField(TEXT("allocations"));
    if (JsonAllocationsField.IsValid() && !JsonAllocationsField->IsNull())
    {
        Allocations_IsSet = TryGetJsonValue(JsonAllocationsField, Allocations_Optional);
        ParseSuccess &= Allocations_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonMatchIdField = (*Object)->TryGetField(TEXT("match_id"));
    if (JsonMatchIdField.IsValid() && !JsonMatchIdField->IsNull())
    {
        MatchId_IsSet = TryGetJsonValue(JsonMatchIdField, MatchId_Optional);
        ParseSuccess &= MatchId_IsSet;
    }

    return ParseSuccess;
}

