// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "KeyClaim.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_KeyClaim

void FRHAPI_KeyClaim::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
	Writer->WriteObjectStart();
	if (PortalId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("portal_id"));
		if (PortalId_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, EnumToString(PortalId_Optional));
	}
	if (PortalUserId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("portal_user_id"));
		if (PortalUserId_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, PortalUserId_Optional);
	}
	Writer->WriteIdentifierPrefix(TEXT("key_claim_uuid"));
	RallyHereAPI::WriteJsonValue(Writer, KeyClaimUuid);
	if (Claimed_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("claimed"));
		if (Claimed_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Claimed_Optional);
	}
	if (ExternalKey_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("external_key"));
		if (ExternalKey_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, ExternalKey_Optional);
	}
	if (ExternalKeyCampaignUuid_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("external_key_campaign_uuid"));
		if (ExternalKeyCampaignUuid_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, ExternalKeyCampaignUuid_Optional);
	}
	if (ExternalKeyType_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("external_key_type"));
		if (ExternalKeyType_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, ExternalKeyType_Optional);
	}
	if (CreatedOn_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("created_on"));
		if (CreatedOn_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, CreatedOn_Optional);
	}
	if (LastModifiedOn_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("last_modified_on"));
		if (LastModifiedOn_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, LastModifiedOn_Optional);
	}
	Writer->WriteObjectEnd();
}

bool FRHAPI_KeyClaim::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	const TSharedPtr<FJsonValue> JsonPortalIdField = (*Object)->TryGetField(TEXT("portal_id"));
	if (JsonPortalIdField.IsValid())
	{
		PortalId_IsNull = JsonPortalIdField->IsNull();
		PortalId_IsSet = PortalId_IsNull || TryGetJsonValue(JsonPortalIdField, PortalId_Optional);
		ParseSuccess &= PortalId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonPortalUserIdField = (*Object)->TryGetField(TEXT("portal_user_id"));
	if (JsonPortalUserIdField.IsValid())
	{
		PortalUserId_IsNull = JsonPortalUserIdField->IsNull();
		PortalUserId_IsSet = PortalUserId_IsNull || TryGetJsonValue(JsonPortalUserIdField, PortalUserId_Optional);
		ParseSuccess &= PortalUserId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonKeyClaimUuidField = (*Object)->TryGetField(TEXT("key_claim_uuid"));
	const bool KeyClaimUuid_IsValid = JsonKeyClaimUuidField.IsValid() && (!JsonKeyClaimUuidField->IsNull() && TryGetJsonValue(JsonKeyClaimUuidField, KeyClaimUuid));
	ParseSuccess &= KeyClaimUuid_IsValid; 
	const TSharedPtr<FJsonValue> JsonClaimedField = (*Object)->TryGetField(TEXT("claimed"));
	if (JsonClaimedField.IsValid())
	{
		Claimed_IsNull = JsonClaimedField->IsNull();
		Claimed_IsSet = Claimed_IsNull || TryGetJsonValue(JsonClaimedField, Claimed_Optional);
		ParseSuccess &= Claimed_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonExternalKeyField = (*Object)->TryGetField(TEXT("external_key"));
	if (JsonExternalKeyField.IsValid())
	{
		ExternalKey_IsNull = JsonExternalKeyField->IsNull();
		ExternalKey_IsSet = ExternalKey_IsNull || TryGetJsonValue(JsonExternalKeyField, ExternalKey_Optional);
		ParseSuccess &= ExternalKey_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonExternalKeyCampaignUuidField = (*Object)->TryGetField(TEXT("external_key_campaign_uuid"));
	if (JsonExternalKeyCampaignUuidField.IsValid())
	{
		ExternalKeyCampaignUuid_IsNull = JsonExternalKeyCampaignUuidField->IsNull();
		ExternalKeyCampaignUuid_IsSet = ExternalKeyCampaignUuid_IsNull || TryGetJsonValue(JsonExternalKeyCampaignUuidField, ExternalKeyCampaignUuid_Optional);
		ParseSuccess &= ExternalKeyCampaignUuid_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonExternalKeyTypeField = (*Object)->TryGetField(TEXT("external_key_type"));
	if (JsonExternalKeyTypeField.IsValid())
	{
		ExternalKeyType_IsNull = JsonExternalKeyTypeField->IsNull();
		ExternalKeyType_IsSet = ExternalKeyType_IsNull || TryGetJsonValue(JsonExternalKeyTypeField, ExternalKeyType_Optional);
		ParseSuccess &= ExternalKeyType_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonCreatedOnField = (*Object)->TryGetField(TEXT("created_on"));
	if (JsonCreatedOnField.IsValid())
	{
		CreatedOn_IsNull = JsonCreatedOnField->IsNull();
		CreatedOn_IsSet = CreatedOn_IsNull || TryGetJsonValue(JsonCreatedOnField, CreatedOn_Optional);
		ParseSuccess &= CreatedOn_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonLastModifiedOnField = (*Object)->TryGetField(TEXT("last_modified_on"));
	if (JsonLastModifiedOnField.IsValid())
	{
		LastModifiedOn_IsNull = JsonLastModifiedOnField->IsNull();
		LastModifiedOn_IsSet = LastModifiedOn_IsNull || TryGetJsonValue(JsonLastModifiedOnField, LastModifiedOn_Optional);
		ParseSuccess &= LastModifiedOn_IsSet;
	}

	return ParseSuccess;
}

