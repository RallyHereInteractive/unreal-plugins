// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "PexHostResponse.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_PexHostResponse

void FRHAPI_PexHostResponse::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
	Writer->WriteObjectStart();
	if (LastModifiedTimestamp_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("last_modified_timestamp"));
		RallyHereAPI::WriteJsonValue(Writer, LastModifiedTimestamp_Optional);
	}
	if (CreatedTimestamp_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("created_timestamp"));
		RallyHereAPI::WriteJsonValue(Writer, CreatedTimestamp_Optional);
	}
	if (FrameTime_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("frame_time"));
		RallyHereAPI::WriteJsonValue(Writer, FrameTime_Optional);
	}
	if (DeltaTime_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("delta_time"));
		RallyHereAPI::WriteJsonValue(Writer, DeltaTime_Optional);
	}
	if (TickCount_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("tick_count"));
		RallyHereAPI::WriteJsonValue(Writer, TickCount_Optional);
	}
	if (DelayedTickCount_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("delayed_tick_count"));
		RallyHereAPI::WriteJsonValue(Writer, DelayedTickCount_Optional);
	}
	if (MemoryWs_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("memory_ws"));
		RallyHereAPI::WriteJsonValue(Writer, MemoryWs_Optional);
	}
	if (MemoryVb_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("memory_vb"));
		RallyHereAPI::WriteJsonValue(Writer, MemoryVb_Optional);
	}
	if (CpuProcess_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("cpu_process"));
		RallyHereAPI::WriteJsonValue(Writer, CpuProcess_Optional);
	}
	if (Ping_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("ping"));
		RallyHereAPI::WriteJsonValue(Writer, Ping_Optional);
	}
	if (InPackets_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("in_packets"));
		RallyHereAPI::WriteJsonValue(Writer, InPackets_Optional);
	}
	if (OutPackets_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("out_packets"));
		RallyHereAPI::WriteJsonValue(Writer, OutPackets_Optional);
	}
	if (TotalPackets_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("total_packets"));
		RallyHereAPI::WriteJsonValue(Writer, TotalPackets_Optional);
	}
	if (InPacketLoss_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("in_packet_loss"));
		RallyHereAPI::WriteJsonValue(Writer, InPacketLoss_Optional);
	}
	if (OutPacketLoss_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("out_packet_loss"));
		RallyHereAPI::WriteJsonValue(Writer, OutPacketLoss_Optional);
	}
	if (TotalPacketLoss_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("total_packet_loss"));
		RallyHereAPI::WriteJsonValue(Writer, TotalPacketLoss_Optional);
	}
	if (InPacketLossPct_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("in_packet_loss_pct"));
		RallyHereAPI::WriteJsonValue(Writer, InPacketLossPct_Optional);
	}
	if (OutPacketLossPct_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("out_packet_loss_pct"));
		RallyHereAPI::WriteJsonValue(Writer, OutPacketLossPct_Optional);
	}
	if (TotalPacketLossPct_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("total_packet_loss_pct"));
		RallyHereAPI::WriteJsonValue(Writer, TotalPacketLossPct_Optional);
	}
	if (TotalDisconnects_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("total_disconnects"));
		RallyHereAPI::WriteJsonValue(Writer, TotalDisconnects_Optional);
	}
	if (MatchDuration_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("match_duration"));
		RallyHereAPI::WriteJsonValue(Writer, MatchDuration_Optional);
	}
	if (ConnectionCount_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("connection_count"));
		RallyHereAPI::WriteJsonValue(Writer, ConnectionCount_Optional);
	}
	if (TotalUniquePlayers_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("total_unique_players"));
		RallyHereAPI::WriteJsonValue(Writer, TotalUniquePlayers_Optional);
	}
	if (Scores_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("scores"));
		RallyHereAPI::WriteJsonValue(Writer, Scores_Optional);
	}
	Writer->WriteIdentifierPrefix(TEXT("match_id"));
	RallyHereAPI::WriteJsonValue(Writer, MatchId);
	if (RegionId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("region_id"));
		RallyHereAPI::WriteJsonValue(Writer, RegionId_Optional);
	}
	if (ServerId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("server_id"));
		RallyHereAPI::WriteJsonValue(Writer, ServerId_Optional);
	}
	if (AllocationId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("allocation_id"));
		RallyHereAPI::WriteJsonValue(Writer, AllocationId_Optional);
	}
	if (DatacenterProvider_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("datacenter_provider"));
		RallyHereAPI::WriteJsonValue(Writer, DatacenterProvider_Optional);
	}
	if (DatacenterLocation_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("datacenter_location"));
		RallyHereAPI::WriteJsonValue(Writer, DatacenterLocation_Optional);
	}
	if (AddressIp_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("address_ip"));
		RallyHereAPI::WriteJsonValue(Writer, AddressIp_Optional);
	}
	if (MapName_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("map_name"));
		RallyHereAPI::WriteJsonValue(Writer, MapName_Optional);
	}
	if (GameMode_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("game_mode"));
		RallyHereAPI::WriteJsonValue(Writer, GameMode_Optional);
	}
	if (MatchmakingProfileId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("matchmaking_profile_id"));
		RallyHereAPI::WriteJsonValue(Writer, MatchmakingProfileId_Optional);
	}
	if (ExpectedTeamSize_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("expected_team_size"));
		RallyHereAPI::WriteJsonValue(Writer, ExpectedTeamSize_Optional);
	}
	if (ExpectedPlayerCount_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("expected_player_count"));
		RallyHereAPI::WriteJsonValue(Writer, ExpectedPlayerCount_Optional);
	}
	if (HostPlayerUuid_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("host_player_uuid"));
		RallyHereAPI::WriteJsonValue(Writer, HostPlayerUuid_Optional);
	}
	if (OwningPlayerUuid_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("owning_player_uuid"));
		RallyHereAPI::WriteJsonValue(Writer, OwningPlayerUuid_Optional);
	}
	if (Version_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("version"));
		RallyHereAPI::WriteJsonValue(Writer, Version_Optional);
	}
	Writer->WriteObjectEnd();
}

bool FRHAPI_PexHostResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	const TSharedPtr<FJsonValue> JsonLastModifiedTimestampField = (*Object)->TryGetField(TEXT("last_modified_timestamp"));
	if (JsonLastModifiedTimestampField.IsValid() && !JsonLastModifiedTimestampField->IsNull())
	{
		LastModifiedTimestamp_IsSet = TryGetJsonValue(JsonLastModifiedTimestampField, LastModifiedTimestamp_Optional);
		ParseSuccess &= LastModifiedTimestamp_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonCreatedTimestampField = (*Object)->TryGetField(TEXT("created_timestamp"));
	if (JsonCreatedTimestampField.IsValid() && !JsonCreatedTimestampField->IsNull())
	{
		CreatedTimestamp_IsSet = TryGetJsonValue(JsonCreatedTimestampField, CreatedTimestamp_Optional);
		ParseSuccess &= CreatedTimestamp_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonFrameTimeField = (*Object)->TryGetField(TEXT("frame_time"));
	if (JsonFrameTimeField.IsValid() && !JsonFrameTimeField->IsNull())
	{
		FrameTime_IsSet = TryGetJsonValue(JsonFrameTimeField, FrameTime_Optional);
		ParseSuccess &= FrameTime_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonDeltaTimeField = (*Object)->TryGetField(TEXT("delta_time"));
	if (JsonDeltaTimeField.IsValid() && !JsonDeltaTimeField->IsNull())
	{
		DeltaTime_IsSet = TryGetJsonValue(JsonDeltaTimeField, DeltaTime_Optional);
		ParseSuccess &= DeltaTime_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonTickCountField = (*Object)->TryGetField(TEXT("tick_count"));
	if (JsonTickCountField.IsValid() && !JsonTickCountField->IsNull())
	{
		TickCount_IsSet = TryGetJsonValue(JsonTickCountField, TickCount_Optional);
		ParseSuccess &= TickCount_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonDelayedTickCountField = (*Object)->TryGetField(TEXT("delayed_tick_count"));
	if (JsonDelayedTickCountField.IsValid() && !JsonDelayedTickCountField->IsNull())
	{
		DelayedTickCount_IsSet = TryGetJsonValue(JsonDelayedTickCountField, DelayedTickCount_Optional);
		ParseSuccess &= DelayedTickCount_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonMemoryWsField = (*Object)->TryGetField(TEXT("memory_ws"));
	if (JsonMemoryWsField.IsValid() && !JsonMemoryWsField->IsNull())
	{
		MemoryWs_IsSet = TryGetJsonValue(JsonMemoryWsField, MemoryWs_Optional);
		ParseSuccess &= MemoryWs_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonMemoryVbField = (*Object)->TryGetField(TEXT("memory_vb"));
	if (JsonMemoryVbField.IsValid() && !JsonMemoryVbField->IsNull())
	{
		MemoryVb_IsSet = TryGetJsonValue(JsonMemoryVbField, MemoryVb_Optional);
		ParseSuccess &= MemoryVb_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonCpuProcessField = (*Object)->TryGetField(TEXT("cpu_process"));
	if (JsonCpuProcessField.IsValid() && !JsonCpuProcessField->IsNull())
	{
		CpuProcess_IsSet = TryGetJsonValue(JsonCpuProcessField, CpuProcess_Optional);
		ParseSuccess &= CpuProcess_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonPingField = (*Object)->TryGetField(TEXT("ping"));
	if (JsonPingField.IsValid() && !JsonPingField->IsNull())
	{
		Ping_IsSet = TryGetJsonValue(JsonPingField, Ping_Optional);
		ParseSuccess &= Ping_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonInPacketsField = (*Object)->TryGetField(TEXT("in_packets"));
	if (JsonInPacketsField.IsValid() && !JsonInPacketsField->IsNull())
	{
		InPackets_IsSet = TryGetJsonValue(JsonInPacketsField, InPackets_Optional);
		ParseSuccess &= InPackets_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonOutPacketsField = (*Object)->TryGetField(TEXT("out_packets"));
	if (JsonOutPacketsField.IsValid() && !JsonOutPacketsField->IsNull())
	{
		OutPackets_IsSet = TryGetJsonValue(JsonOutPacketsField, OutPackets_Optional);
		ParseSuccess &= OutPackets_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonTotalPacketsField = (*Object)->TryGetField(TEXT("total_packets"));
	if (JsonTotalPacketsField.IsValid() && !JsonTotalPacketsField->IsNull())
	{
		TotalPackets_IsSet = TryGetJsonValue(JsonTotalPacketsField, TotalPackets_Optional);
		ParseSuccess &= TotalPackets_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonInPacketLossField = (*Object)->TryGetField(TEXT("in_packet_loss"));
	if (JsonInPacketLossField.IsValid() && !JsonInPacketLossField->IsNull())
	{
		InPacketLoss_IsSet = TryGetJsonValue(JsonInPacketLossField, InPacketLoss_Optional);
		ParseSuccess &= InPacketLoss_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonOutPacketLossField = (*Object)->TryGetField(TEXT("out_packet_loss"));
	if (JsonOutPacketLossField.IsValid() && !JsonOutPacketLossField->IsNull())
	{
		OutPacketLoss_IsSet = TryGetJsonValue(JsonOutPacketLossField, OutPacketLoss_Optional);
		ParseSuccess &= OutPacketLoss_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonTotalPacketLossField = (*Object)->TryGetField(TEXT("total_packet_loss"));
	if (JsonTotalPacketLossField.IsValid() && !JsonTotalPacketLossField->IsNull())
	{
		TotalPacketLoss_IsSet = TryGetJsonValue(JsonTotalPacketLossField, TotalPacketLoss_Optional);
		ParseSuccess &= TotalPacketLoss_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonInPacketLossPctField = (*Object)->TryGetField(TEXT("in_packet_loss_pct"));
	if (JsonInPacketLossPctField.IsValid() && !JsonInPacketLossPctField->IsNull())
	{
		InPacketLossPct_IsSet = TryGetJsonValue(JsonInPacketLossPctField, InPacketLossPct_Optional);
		ParseSuccess &= InPacketLossPct_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonOutPacketLossPctField = (*Object)->TryGetField(TEXT("out_packet_loss_pct"));
	if (JsonOutPacketLossPctField.IsValid() && !JsonOutPacketLossPctField->IsNull())
	{
		OutPacketLossPct_IsSet = TryGetJsonValue(JsonOutPacketLossPctField, OutPacketLossPct_Optional);
		ParseSuccess &= OutPacketLossPct_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonTotalPacketLossPctField = (*Object)->TryGetField(TEXT("total_packet_loss_pct"));
	if (JsonTotalPacketLossPctField.IsValid() && !JsonTotalPacketLossPctField->IsNull())
	{
		TotalPacketLossPct_IsSet = TryGetJsonValue(JsonTotalPacketLossPctField, TotalPacketLossPct_Optional);
		ParseSuccess &= TotalPacketLossPct_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonTotalDisconnectsField = (*Object)->TryGetField(TEXT("total_disconnects"));
	if (JsonTotalDisconnectsField.IsValid() && !JsonTotalDisconnectsField->IsNull())
	{
		TotalDisconnects_IsSet = TryGetJsonValue(JsonTotalDisconnectsField, TotalDisconnects_Optional);
		ParseSuccess &= TotalDisconnects_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonMatchDurationField = (*Object)->TryGetField(TEXT("match_duration"));
	if (JsonMatchDurationField.IsValid() && !JsonMatchDurationField->IsNull())
	{
		MatchDuration_IsSet = TryGetJsonValue(JsonMatchDurationField, MatchDuration_Optional);
		ParseSuccess &= MatchDuration_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonConnectionCountField = (*Object)->TryGetField(TEXT("connection_count"));
	if (JsonConnectionCountField.IsValid() && !JsonConnectionCountField->IsNull())
	{
		ConnectionCount_IsSet = TryGetJsonValue(JsonConnectionCountField, ConnectionCount_Optional);
		ParseSuccess &= ConnectionCount_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonTotalUniquePlayersField = (*Object)->TryGetField(TEXT("total_unique_players"));
	if (JsonTotalUniquePlayersField.IsValid() && !JsonTotalUniquePlayersField->IsNull())
	{
		TotalUniquePlayers_IsSet = TryGetJsonValue(JsonTotalUniquePlayersField, TotalUniquePlayers_Optional);
		ParseSuccess &= TotalUniquePlayers_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonScoresField = (*Object)->TryGetField(TEXT("scores"));
	if (JsonScoresField.IsValid() && !JsonScoresField->IsNull())
	{
		Scores_IsSet = TryGetJsonValue(JsonScoresField, Scores_Optional);
		ParseSuccess &= Scores_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonMatchIdField = (*Object)->TryGetField(TEXT("match_id"));
	ParseSuccess &= JsonMatchIdField.IsValid() && !JsonMatchIdField->IsNull() && TryGetJsonValue(JsonMatchIdField, MatchId);
	const TSharedPtr<FJsonValue> JsonRegionIdField = (*Object)->TryGetField(TEXT("region_id"));
	if (JsonRegionIdField.IsValid() && !JsonRegionIdField->IsNull())
	{
		RegionId_IsSet = TryGetJsonValue(JsonRegionIdField, RegionId_Optional);
		ParseSuccess &= RegionId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonServerIdField = (*Object)->TryGetField(TEXT("server_id"));
	if (JsonServerIdField.IsValid() && !JsonServerIdField->IsNull())
	{
		ServerId_IsSet = TryGetJsonValue(JsonServerIdField, ServerId_Optional);
		ParseSuccess &= ServerId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonAllocationIdField = (*Object)->TryGetField(TEXT("allocation_id"));
	if (JsonAllocationIdField.IsValid() && !JsonAllocationIdField->IsNull())
	{
		AllocationId_IsSet = TryGetJsonValue(JsonAllocationIdField, AllocationId_Optional);
		ParseSuccess &= AllocationId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonDatacenterProviderField = (*Object)->TryGetField(TEXT("datacenter_provider"));
	if (JsonDatacenterProviderField.IsValid() && !JsonDatacenterProviderField->IsNull())
	{
		DatacenterProvider_IsSet = TryGetJsonValue(JsonDatacenterProviderField, DatacenterProvider_Optional);
		ParseSuccess &= DatacenterProvider_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonDatacenterLocationField = (*Object)->TryGetField(TEXT("datacenter_location"));
	if (JsonDatacenterLocationField.IsValid() && !JsonDatacenterLocationField->IsNull())
	{
		DatacenterLocation_IsSet = TryGetJsonValue(JsonDatacenterLocationField, DatacenterLocation_Optional);
		ParseSuccess &= DatacenterLocation_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonAddressIpField = (*Object)->TryGetField(TEXT("address_ip"));
	if (JsonAddressIpField.IsValid() && !JsonAddressIpField->IsNull())
	{
		AddressIp_IsSet = TryGetJsonValue(JsonAddressIpField, AddressIp_Optional);
		ParseSuccess &= AddressIp_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonMapNameField = (*Object)->TryGetField(TEXT("map_name"));
	if (JsonMapNameField.IsValid() && !JsonMapNameField->IsNull())
	{
		MapName_IsSet = TryGetJsonValue(JsonMapNameField, MapName_Optional);
		ParseSuccess &= MapName_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonGameModeField = (*Object)->TryGetField(TEXT("game_mode"));
	if (JsonGameModeField.IsValid() && !JsonGameModeField->IsNull())
	{
		GameMode_IsSet = TryGetJsonValue(JsonGameModeField, GameMode_Optional);
		ParseSuccess &= GameMode_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonMatchmakingProfileIdField = (*Object)->TryGetField(TEXT("matchmaking_profile_id"));
	if (JsonMatchmakingProfileIdField.IsValid() && !JsonMatchmakingProfileIdField->IsNull())
	{
		MatchmakingProfileId_IsSet = TryGetJsonValue(JsonMatchmakingProfileIdField, MatchmakingProfileId_Optional);
		ParseSuccess &= MatchmakingProfileId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonExpectedTeamSizeField = (*Object)->TryGetField(TEXT("expected_team_size"));
	if (JsonExpectedTeamSizeField.IsValid() && !JsonExpectedTeamSizeField->IsNull())
	{
		ExpectedTeamSize_IsSet = TryGetJsonValue(JsonExpectedTeamSizeField, ExpectedTeamSize_Optional);
		ParseSuccess &= ExpectedTeamSize_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonExpectedPlayerCountField = (*Object)->TryGetField(TEXT("expected_player_count"));
	if (JsonExpectedPlayerCountField.IsValid() && !JsonExpectedPlayerCountField->IsNull())
	{
		ExpectedPlayerCount_IsSet = TryGetJsonValue(JsonExpectedPlayerCountField, ExpectedPlayerCount_Optional);
		ParseSuccess &= ExpectedPlayerCount_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonHostPlayerUuidField = (*Object)->TryGetField(TEXT("host_player_uuid"));
	if (JsonHostPlayerUuidField.IsValid() && !JsonHostPlayerUuidField->IsNull())
	{
		HostPlayerUuid_IsSet = TryGetJsonValue(JsonHostPlayerUuidField, HostPlayerUuid_Optional);
		ParseSuccess &= HostPlayerUuid_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonOwningPlayerUuidField = (*Object)->TryGetField(TEXT("owning_player_uuid"));
	if (JsonOwningPlayerUuidField.IsValid() && !JsonOwningPlayerUuidField->IsNull())
	{
		OwningPlayerUuid_IsSet = TryGetJsonValue(JsonOwningPlayerUuidField, OwningPlayerUuid_Optional);
		ParseSuccess &= OwningPlayerUuid_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonVersionField = (*Object)->TryGetField(TEXT("version"));
	if (JsonVersionField.IsValid() && !JsonVersionField->IsNull())
	{
		Version_IsSet = TryGetJsonValue(JsonVersionField, Version_Optional);
		ParseSuccess &= Version_IsSet;
	}

	return ParseSuccess;
}

