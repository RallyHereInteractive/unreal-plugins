// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "MatchMakingProfileV2.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_MatchMakingProfileV2

void FRHAPI_MatchMakingProfileV2::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("match_making_profile_id"));
	RallyHereAPI::WriteJsonValue(Writer, MatchMakingProfileId);
	if (JoinMode_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("join_mode"));
		RallyHereAPI::WriteJsonValue(Writer, EnumToString(JoinMode_Optional));
	}
	Writer->WriteIdentifierPrefix(TEXT("instance_request_template_id"));
	RallyHereAPI::WriteJsonValue(Writer, InstanceRequestTemplateId);
	if (RankId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("rank_id"));
		RallyHereAPI::WriteJsonValue(Writer, RankId_Optional);
	}
	if (NumSides_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("num_sides"));
		RallyHereAPI::WriteJsonValue(Writer, NumSides_Optional);
	}
	if (MaxPlayersPerSide_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("max_players_per_side"));
		RallyHereAPI::WriteJsonValue(Writer, MaxPlayersPerSide_Optional);
	}
	if (MinPlayersPerSide_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("min_players_per_side"));
		RallyHereAPI::WriteJsonValue(Writer, MinPlayersPerSide_Optional);
	}
	if (LegacyConfig_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("legacy_config"));
		RallyHereAPI::WriteJsonValue(Writer, LegacyConfig_Optional);
	}
	if (DeserterId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("deserter_id"));
		RallyHereAPI::WriteJsonValue(Writer, DeserterId_Optional);
	}
	if (SessionTemplateId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("session_template_id"));
		RallyHereAPI::WriteJsonValue(Writer, SessionTemplateId_Optional);
	}
	if (CustomData_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("custom_data"));
		RallyHereAPI::WriteJsonValue(Writer, CustomData_Optional);
	}
	Writer->WriteObjectEnd();
}

bool FRHAPI_MatchMakingProfileV2::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	const TSharedPtr<FJsonValue> JsonMatchMakingProfileIdField = (*Object)->TryGetField(TEXT("match_making_profile_id"));
	const bool MatchMakingProfileId_IsValid = JsonMatchMakingProfileIdField.IsValid() && (!JsonMatchMakingProfileIdField->IsNull() && TryGetJsonValue(JsonMatchMakingProfileIdField, MatchMakingProfileId));
	ParseSuccess &= MatchMakingProfileId_IsValid; 
	const TSharedPtr<FJsonValue> JsonJoinModeField = (*Object)->TryGetField(TEXT("join_mode"));
	if (JsonJoinModeField.IsValid())
	{
		JoinMode_IsSet = TryGetJsonValue(JsonJoinModeField, JoinMode_Optional);
		ParseSuccess &= JoinMode_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonInstanceRequestTemplateIdField = (*Object)->TryGetField(TEXT("instance_request_template_id"));
	const bool InstanceRequestTemplateId_IsValid = JsonInstanceRequestTemplateIdField.IsValid() && (!JsonInstanceRequestTemplateIdField->IsNull() && TryGetJsonValue(JsonInstanceRequestTemplateIdField, InstanceRequestTemplateId));
	ParseSuccess &= InstanceRequestTemplateId_IsValid; 
	const TSharedPtr<FJsonValue> JsonRankIdField = (*Object)->TryGetField(TEXT("rank_id"));
	if (JsonRankIdField.IsValid())
	{
		RankId_IsSet = TryGetJsonValue(JsonRankIdField, RankId_Optional);
		ParseSuccess &= RankId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonNumSidesField = (*Object)->TryGetField(TEXT("num_sides"));
	if (JsonNumSidesField.IsValid())
	{
		NumSides_IsSet = TryGetJsonValue(JsonNumSidesField, NumSides_Optional);
		ParseSuccess &= NumSides_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonMaxPlayersPerSideField = (*Object)->TryGetField(TEXT("max_players_per_side"));
	if (JsonMaxPlayersPerSideField.IsValid())
	{
		MaxPlayersPerSide_IsSet = TryGetJsonValue(JsonMaxPlayersPerSideField, MaxPlayersPerSide_Optional);
		ParseSuccess &= MaxPlayersPerSide_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonMinPlayersPerSideField = (*Object)->TryGetField(TEXT("min_players_per_side"));
	if (JsonMinPlayersPerSideField.IsValid())
	{
		MinPlayersPerSide_IsSet = TryGetJsonValue(JsonMinPlayersPerSideField, MinPlayersPerSide_Optional);
		ParseSuccess &= MinPlayersPerSide_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonLegacyConfigField = (*Object)->TryGetField(TEXT("legacy_config"));
	if (JsonLegacyConfigField.IsValid())
	{
		LegacyConfig_IsSet = TryGetJsonValue(JsonLegacyConfigField, LegacyConfig_Optional);
		ParseSuccess &= LegacyConfig_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonDeserterIdField = (*Object)->TryGetField(TEXT("deserter_id"));
	if (JsonDeserterIdField.IsValid())
	{
		DeserterId_IsSet = TryGetJsonValue(JsonDeserterIdField, DeserterId_Optional);
		ParseSuccess &= DeserterId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonSessionTemplateIdField = (*Object)->TryGetField(TEXT("session_template_id"));
	if (JsonSessionTemplateIdField.IsValid())
	{
		SessionTemplateId_IsSet = TryGetJsonValue(JsonSessionTemplateIdField, SessionTemplateId_Optional);
		ParseSuccess &= SessionTemplateId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonCustomDataField = (*Object)->TryGetField(TEXT("custom_data"));
	if (JsonCustomDataField.IsValid())
	{
		CustomData_IsSet = TryGetJsonValue(JsonCustomDataField, CustomData_Optional);
		ParseSuccess &= CustomData_IsSet;
	}

	return ParseSuccess;
}

