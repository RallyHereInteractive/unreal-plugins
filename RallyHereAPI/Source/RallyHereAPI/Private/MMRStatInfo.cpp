// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "MMRStatInfo.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_MMRStatInfo

void FRHAPI_MMRStatInfo::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
	Writer->WriteObjectStart();
	if (Type1_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("type_1"));
		if (Type1_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Type1_Optional);
	}
	if (Type2_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("type_2"));
		if (Type2_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Type2_Optional);
	}
	if (Type3_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("type_3"));
		if (Type3_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Type3_Optional);
	}
	if (Type4_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("type_4"));
		if (Type4_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Type4_Optional);
	}
	Writer->WriteIdentifierPrefix(TEXT("mmr_min"));
	RallyHereAPI::WriteJsonValue(Writer, MmrMin);
	Writer->WriteIdentifierPrefix(TEXT("mmr_max"));
	RallyHereAPI::WriteJsonValue(Writer, MmrMax);
	Writer->WriteIdentifierPrefix(TEXT("num_entities"));
	RallyHereAPI::WriteJsonValue(Writer, NumEntities);
	Writer->WriteObjectEnd();
}

bool FRHAPI_MMRStatInfo::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	const TSharedPtr<FJsonValue> JsonType1Field = (*Object)->TryGetField(TEXT("type_1"));
	if (JsonType1Field.IsValid())
	{
		Type1_IsNull = JsonType1Field->IsNull();
		Type1_IsSet = Type1_IsNull || TryGetJsonValue(JsonType1Field, Type1_Optional);
		ParseSuccess &= Type1_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonType2Field = (*Object)->TryGetField(TEXT("type_2"));
	if (JsonType2Field.IsValid())
	{
		Type2_IsNull = JsonType2Field->IsNull();
		Type2_IsSet = Type2_IsNull || TryGetJsonValue(JsonType2Field, Type2_Optional);
		ParseSuccess &= Type2_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonType3Field = (*Object)->TryGetField(TEXT("type_3"));
	if (JsonType3Field.IsValid())
	{
		Type3_IsNull = JsonType3Field->IsNull();
		Type3_IsSet = Type3_IsNull || TryGetJsonValue(JsonType3Field, Type3_Optional);
		ParseSuccess &= Type3_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonType4Field = (*Object)->TryGetField(TEXT("type_4"));
	if (JsonType4Field.IsValid())
	{
		Type4_IsNull = JsonType4Field->IsNull();
		Type4_IsSet = Type4_IsNull || TryGetJsonValue(JsonType4Field, Type4_Optional);
		ParseSuccess &= Type4_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonMmrMinField = (*Object)->TryGetField(TEXT("mmr_min"));
	const bool MmrMin_IsValid = JsonMmrMinField.IsValid() && (!JsonMmrMinField->IsNull() && TryGetJsonValue(JsonMmrMinField, MmrMin));
	ParseSuccess &= MmrMin_IsValid; 
	const TSharedPtr<FJsonValue> JsonMmrMaxField = (*Object)->TryGetField(TEXT("mmr_max"));
	const bool MmrMax_IsValid = JsonMmrMaxField.IsValid() && (!JsonMmrMaxField->IsNull() && TryGetJsonValue(JsonMmrMaxField, MmrMax));
	ParseSuccess &= MmrMax_IsValid; 
	const TSharedPtr<FJsonValue> JsonNumEntitiesField = (*Object)->TryGetField(TEXT("num_entities"));
	const bool NumEntities_IsValid = JsonNumEntitiesField.IsValid() && (!JsonNumEntitiesField->IsNull() && TryGetJsonValue(JsonNumEntitiesField, NumEntities));
	ParseSuccess &= NumEntities_IsValid; 

	return ParseSuccess;
}

