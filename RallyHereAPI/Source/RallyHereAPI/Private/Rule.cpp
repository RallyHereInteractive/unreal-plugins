// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "Rule.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_Rule

void FRHAPI_Rule::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("rule_type"));
	RallyHereAPI::WriteJsonValue(Writer, EnumToString(RuleType));
	if (ItemId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("item_id"));
		RallyHereAPI::WriteJsonValue(Writer, ItemId_Optional);
	}
	Writer->WriteIdentifierPrefix(TEXT("comparison_operation"));
	RallyHereAPI::WriteJsonValue(Writer, EnumToString(ComparisonOperation));
	Writer->WriteIdentifierPrefix(TEXT("comparison_value"));
	RallyHereAPI::WriteJsonValue(Writer, ComparisonValue);
	Writer->WriteObjectEnd();
}

bool FRHAPI_Rule::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	const TSharedPtr<FJsonValue> JsonRuleTypeField = (*Object)->TryGetField(TEXT("rule_type"));
	const bool RuleType_IsValid = JsonRuleTypeField.IsValid() && (!JsonRuleTypeField->IsNull() && TryGetJsonValue(JsonRuleTypeField, RuleType));
	ParseSuccess &= RuleType_IsValid; 
	const TSharedPtr<FJsonValue> JsonItemIdField = (*Object)->TryGetField(TEXT("item_id"));
	if (JsonItemIdField.IsValid())
	{
		ItemId_IsSet = TryGetJsonValue(JsonItemIdField, ItemId_Optional);
		ParseSuccess &= ItemId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonComparisonOperationField = (*Object)->TryGetField(TEXT("comparison_operation"));
	const bool ComparisonOperation_IsValid = JsonComparisonOperationField.IsValid() && (!JsonComparisonOperationField->IsNull() && TryGetJsonValue(JsonComparisonOperationField, ComparisonOperation));
	ParseSuccess &= ComparisonOperation_IsValid; 
	const TSharedPtr<FJsonValue> JsonComparisonValueField = (*Object)->TryGetField(TEXT("comparison_value"));
	const bool ComparisonValue_IsValid = JsonComparisonValueField.IsValid() && (!JsonComparisonValueField->IsNull() && TryGetJsonValue(JsonComparisonValueField, ComparisonValue));
	ParseSuccess &= ComparisonValue_IsValid; 

	return ParseSuccess;
}

