// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "PlatformEntitlementProcessRequest.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_PlatformEntitlementProcessRequest

void FRHAPI_PlatformEntitlementProcessRequest::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("transaction_id"));
	RallyHereAPI::WriteJsonValue(Writer, TransactionId);
	Writer->WriteIdentifierPrefix(TEXT("platform_token"));
	RallyHereAPI::WriteJsonValue(Writer, PlatformToken);
	Writer->WriteIdentifierPrefix(TEXT("platform_id"));
	RallyHereAPI::WriteJsonValue(Writer, PlatformId);
	Writer->WriteIdentifierPrefix(TEXT("platform_region"));
	RallyHereAPI::WriteJsonValue(Writer, EnumToString(PlatformRegion));
	Writer->WriteIdentifierPrefix(TEXT("client_type"));
	RallyHereAPI::WriteJsonValue(Writer, EnumToString(ClientType));
	if (Entitlements_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("entitlements"));
		RallyHereAPI::WriteJsonValue(Writer, Entitlements_Optional);
	}
	Writer->WriteObjectEnd();
}

bool FRHAPI_PlatformEntitlementProcessRequest::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	const TSharedPtr<FJsonValue> JsonTransactionIdField = (*Object)->TryGetField(TEXT("transaction_id"));
	const bool TransactionId_IsValid = JsonTransactionIdField.IsValid() && (!JsonTransactionIdField->IsNull() && TryGetJsonValue(JsonTransactionIdField, TransactionId));
	ParseSuccess &= TransactionId_IsValid; 
	const TSharedPtr<FJsonValue> JsonPlatformTokenField = (*Object)->TryGetField(TEXT("platform_token"));
	const bool PlatformToken_IsValid = JsonPlatformTokenField.IsValid() && (!JsonPlatformTokenField->IsNull() && TryGetJsonValue(JsonPlatformTokenField, PlatformToken));
	ParseSuccess &= PlatformToken_IsValid; 
	const TSharedPtr<FJsonValue> JsonPlatformIdField = (*Object)->TryGetField(TEXT("platform_id"));
	const bool PlatformId_IsValid = JsonPlatformIdField.IsValid() && (!JsonPlatformIdField->IsNull() && TryGetJsonValue(JsonPlatformIdField, PlatformId));
	ParseSuccess &= PlatformId_IsValid; 
	const TSharedPtr<FJsonValue> JsonPlatformRegionField = (*Object)->TryGetField(TEXT("platform_region"));
	const bool PlatformRegion_IsValid = JsonPlatformRegionField.IsValid() && (!JsonPlatformRegionField->IsNull() && TryGetJsonValue(JsonPlatformRegionField, PlatformRegion));
	ParseSuccess &= PlatformRegion_IsValid; 
	const TSharedPtr<FJsonValue> JsonClientTypeField = (*Object)->TryGetField(TEXT("client_type"));
	const bool ClientType_IsValid = JsonClientTypeField.IsValid() && (!JsonClientTypeField->IsNull() && TryGetJsonValue(JsonClientTypeField, ClientType));
	ParseSuccess &= ClientType_IsValid; 
	const TSharedPtr<FJsonValue> JsonEntitlementsField = (*Object)->TryGetField(TEXT("entitlements"));
	if (JsonEntitlementsField.IsValid())
	{
		Entitlements_IsSet = TryGetJsonValue(JsonEntitlementsField, Entitlements_Optional);
		ParseSuccess &= Entitlements_IsSet;
	}

	return ParseSuccess;
}

