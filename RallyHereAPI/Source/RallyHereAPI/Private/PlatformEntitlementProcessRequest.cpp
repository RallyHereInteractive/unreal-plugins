// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "PlatformEntitlementProcessRequest.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_PlatformEntitlementProcessRequest

void FRHAPI_PlatformEntitlementProcessRequest::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
	Writer->WriteObjectStart();
	if (TransactionId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("transaction_id"));
		RallyHereAPI::WriteJsonValue(Writer, TransactionId_Optional);
	}
	Writer->WriteIdentifierPrefix(TEXT("platform_token"));
	RallyHereAPI::WriteJsonValue(Writer, PlatformToken);
	Writer->WriteIdentifierPrefix(TEXT("platform_id"));
	RallyHereAPI::WriteJsonValue(Writer, PlatformId);
	if (PlatformEnvironment_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("platform_environment"));
		if (PlatformEnvironment_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, PlatformEnvironment_Optional);
	}
	if (PlatformRegion_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("platform_region"));
		RallyHereAPI::WriteJsonValue(Writer, EnumToString(PlatformRegion_Optional));
	}
	if (ClientType_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("client_type"));
		RallyHereAPI::WriteJsonValue(Writer, EnumToString(ClientType_Optional));
	}
	if (Entitlements_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("entitlements"));
		RallyHereAPI::WriteJsonValue(Writer, Entitlements_Optional);
	}
	if (CheckDurables_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("check_durables"));
		RallyHereAPI::WriteJsonValue(Writer, CheckDurables_Optional);
	}
	if (CheckConsumables_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("check_consumables"));
		RallyHereAPI::WriteJsonValue(Writer, CheckConsumables_Optional);
	}
	Writer->WriteObjectEnd();
}

bool FRHAPI_PlatformEntitlementProcessRequest::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	const TSharedPtr<FJsonValue> JsonTransactionIdField = (*Object)->TryGetField(TEXT("transaction_id"));
	if (JsonTransactionIdField.IsValid())
	{
		TransactionId_IsSet = TryGetJsonValue(JsonTransactionIdField, TransactionId_Optional);
		ParseSuccess &= TransactionId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonPlatformTokenField = (*Object)->TryGetField(TEXT("platform_token"));
	const bool PlatformToken_IsValid = JsonPlatformTokenField.IsValid() && (!JsonPlatformTokenField->IsNull() && TryGetJsonValue(JsonPlatformTokenField, PlatformToken));
	ParseSuccess &= PlatformToken_IsValid; 
	const TSharedPtr<FJsonValue> JsonPlatformIdField = (*Object)->TryGetField(TEXT("platform_id"));
	const bool PlatformId_IsValid = JsonPlatformIdField.IsValid() && (!JsonPlatformIdField->IsNull() && TryGetJsonValue(JsonPlatformIdField, PlatformId));
	ParseSuccess &= PlatformId_IsValid; 
	const TSharedPtr<FJsonValue> JsonPlatformEnvironmentField = (*Object)->TryGetField(TEXT("platform_environment"));
	if (JsonPlatformEnvironmentField.IsValid())
	{
		PlatformEnvironment_IsNull = JsonPlatformEnvironmentField->IsNull();
		PlatformEnvironment_IsSet = PlatformEnvironment_IsNull || TryGetJsonValue(JsonPlatformEnvironmentField, PlatformEnvironment_Optional);
		ParseSuccess &= PlatformEnvironment_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonPlatformRegionField = (*Object)->TryGetField(TEXT("platform_region"));
	if (JsonPlatformRegionField.IsValid())
	{
		PlatformRegion_IsSet = TryGetJsonValue(JsonPlatformRegionField, PlatformRegion_Optional);
		ParseSuccess &= PlatformRegion_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonClientTypeField = (*Object)->TryGetField(TEXT("client_type"));
	if (JsonClientTypeField.IsValid())
	{
		ClientType_IsSet = TryGetJsonValue(JsonClientTypeField, ClientType_Optional);
		ParseSuccess &= ClientType_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonEntitlementsField = (*Object)->TryGetField(TEXT("entitlements"));
	if (JsonEntitlementsField.IsValid())
	{
		Entitlements_IsSet = TryGetJsonValue(JsonEntitlementsField, Entitlements_Optional);
		ParseSuccess &= Entitlements_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonCheckDurablesField = (*Object)->TryGetField(TEXT("check_durables"));
	if (JsonCheckDurablesField.IsValid())
	{
		CheckDurables_IsSet = TryGetJsonValue(JsonCheckDurablesField, CheckDurables_Optional);
		ParseSuccess &= CheckDurables_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonCheckConsumablesField = (*Object)->TryGetField(TEXT("check_consumables"));
	if (JsonCheckConsumablesField.IsValid())
	{
		CheckConsumables_IsSet = TryGetJsonValue(JsonCheckConsumablesField, CheckConsumables_Optional);
		ParseSuccess &= CheckConsumables_IsSet;
	}

	return ParseSuccess;
}

