// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "TicketData.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_TicketData

void FRHAPI_TicketData::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("ticket_id"));
	RallyHereAPI::WriteJsonValue(Writer, TicketId);
	if (PlayerUuids_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("player_uuids"));
		RallyHereAPI::WriteJsonValue(Writer, PlayerUuids_Optional);
	}
	Writer->WriteIdentifierPrefix(TEXT("queue_join_datetime"));
	RallyHereAPI::WriteJsonValue(Writer, QueueJoinDatetime);
	Writer->WriteIdentifierPrefix(TEXT("region_id"));
	RallyHereAPI::WriteJsonValue(Writer, RegionId);
	Writer->WriteIdentifierPrefix(TEXT("queue_id"));
	RallyHereAPI::WriteJsonValue(Writer, QueueId);
	Writer->WriteIdentifierPrefix(TEXT("profile_ids"));
	RallyHereAPI::WriteJsonValue(Writer, ProfileIds);
	if (AdditionalJoinParams_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("additional_join_params"));
		RallyHereAPI::WriteJsonValue(Writer, AdditionalJoinParams_Optional);
	}
	if (RankData_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("rank_data"));
		RallyHereAPI::WriteJsonValue(Writer, RankData_Optional);
	}
	if (QueuedSessionId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("queued_session_id"));
		RallyHereAPI::WriteJsonValue(Writer, QueuedSessionId_Optional);
	}
	Writer->WriteObjectEnd();
}

bool FRHAPI_TicketData::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	const TSharedPtr<FJsonValue> JsonTicketIdField = (*Object)->TryGetField(TEXT("ticket_id"));
	const bool TicketId_IsValid = JsonTicketIdField.IsValid() && (!JsonTicketIdField->IsNull() && TryGetJsonValue(JsonTicketIdField, TicketId));
	ParseSuccess &= TicketId_IsValid; 
	const TSharedPtr<FJsonValue> JsonPlayerUuidsField = (*Object)->TryGetField(TEXT("player_uuids"));
	if (JsonPlayerUuidsField.IsValid())
	{
		PlayerUuids_IsSet = TryGetJsonValue(JsonPlayerUuidsField, PlayerUuids_Optional);
		ParseSuccess &= PlayerUuids_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonQueueJoinDatetimeField = (*Object)->TryGetField(TEXT("queue_join_datetime"));
	const bool QueueJoinDatetime_IsValid = JsonQueueJoinDatetimeField.IsValid() && (!JsonQueueJoinDatetimeField->IsNull() && TryGetJsonValue(JsonQueueJoinDatetimeField, QueueJoinDatetime));
	ParseSuccess &= QueueJoinDatetime_IsValid; 
	const TSharedPtr<FJsonValue> JsonRegionIdField = (*Object)->TryGetField(TEXT("region_id"));
	const bool RegionId_IsValid = JsonRegionIdField.IsValid() && (!JsonRegionIdField->IsNull() && TryGetJsonValue(JsonRegionIdField, RegionId));
	ParseSuccess &= RegionId_IsValid; 
	const TSharedPtr<FJsonValue> JsonQueueIdField = (*Object)->TryGetField(TEXT("queue_id"));
	const bool QueueId_IsValid = JsonQueueIdField.IsValid() && (!JsonQueueIdField->IsNull() && TryGetJsonValue(JsonQueueIdField, QueueId));
	ParseSuccess &= QueueId_IsValid; 
	const TSharedPtr<FJsonValue> JsonProfileIdsField = (*Object)->TryGetField(TEXT("profile_ids"));
	const bool ProfileIds_IsValid = JsonProfileIdsField.IsValid() && (!JsonProfileIdsField->IsNull() && TryGetJsonValue(JsonProfileIdsField, ProfileIds));
	ParseSuccess &= ProfileIds_IsValid; 
	const TSharedPtr<FJsonValue> JsonAdditionalJoinParamsField = (*Object)->TryGetField(TEXT("additional_join_params"));
	if (JsonAdditionalJoinParamsField.IsValid())
	{
		AdditionalJoinParams_IsSet = TryGetJsonValue(JsonAdditionalJoinParamsField, AdditionalJoinParams_Optional);
		ParseSuccess &= AdditionalJoinParams_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRankDataField = (*Object)->TryGetField(TEXT("rank_data"));
	if (JsonRankDataField.IsValid())
	{
		RankData_IsSet = TryGetJsonValue(JsonRankDataField, RankData_Optional);
		ParseSuccess &= RankData_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonQueuedSessionIdField = (*Object)->TryGetField(TEXT("queued_session_id"));
	if (JsonQueuedSessionIdField.IsValid())
	{
		QueuedSessionId_IsSet = TryGetJsonValue(JsonQueuedSessionIdField, QueuedSessionId_Optional);
		ParseSuccess &= QueuedSessionId_IsSet;
	}

	return ParseSuccess;
}

