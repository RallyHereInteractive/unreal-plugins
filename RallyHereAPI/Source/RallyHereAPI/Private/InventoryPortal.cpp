// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "InventoryPortal.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for ERHAPI_InventoryPortal
FString EnumToString(const ERHAPI_InventoryPortal& Value)
{
    switch (Value)
    {
    case ERHAPI_InventoryPortal::Free:
        return TEXT("-2");
    case ERHAPI_InventoryPortal::Sweat:
        return TEXT("-1");
    case ERHAPI_InventoryPortal::Unknown:
        return TEXT("0");
    case ERHAPI_InventoryPortal::Standard:
        return TEXT("1");
    case ERHAPI_InventoryPortal::Anon:
        return TEXT("2");
    case ERHAPI_InventoryPortal::Kongregate:
        return TEXT("3");
    case ERHAPI_InventoryPortal::Amazon:
        return TEXT("4");
    case ERHAPI_InventoryPortal::Steam:
        return TEXT("5");
    case ERHAPI_InventoryPortal::Tcls:
        return TEXT("6");
    case ERHAPI_InventoryPortal::LevelupLatam:
        return TEXT("7");
    case ERHAPI_InventoryPortal::LevelupBra:
        return TEXT("8");
    case ERHAPI_InventoryPortal::Psn:
        return TEXT("9");
    case ERHAPI_InventoryPortal::XboxLive:
        return TEXT("10");
    case ERHAPI_InventoryPortal::Basic:
        return TEXT("11");
    case ERHAPI_InventoryPortal::Facebook:
        return TEXT("12");
    case ERHAPI_InventoryPortal::Google:
        return TEXT("13");
    case ERHAPI_InventoryPortal::UNUSED14:
        return TEXT("14");
    case ERHAPI_InventoryPortal::RivalsMobile:
        return TEXT("15");
    case ERHAPI_InventoryPortal::Twitch:
        return TEXT("16");
    case ERHAPI_InventoryPortal::PaladinsStrike:
        return TEXT("17");
    case ERHAPI_InventoryPortal::SmiteBlitz:
        return TEXT("18");
    case ERHAPI_InventoryPortal::FacebookSmite:
        return TEXT("19");
    case ERHAPI_InventoryPortal::FacebookPaladins:
        return TEXT("20");
    case ERHAPI_InventoryPortal::FacebookHotg:
        return TEXT("21");
    case ERHAPI_InventoryPortal::NintendoSwitch:
        return TEXT("22");
    case ERHAPI_InventoryPortal::Tune:
        return TEXT("23");
    case ERHAPI_InventoryPortal::Apple:
        return TEXT("24");
    case ERHAPI_InventoryPortal::Discord:
        return TEXT("25");
    case ERHAPI_InventoryPortal::Nintendo:
        return TEXT("26");
    case ERHAPI_InventoryPortal::UNUSED27:
        return TEXT("27");
    case ERHAPI_InventoryPortal::Epic:
        return TEXT("28");
    case ERHAPI_InventoryPortal::Forte:
        return TEXT("29");
    case ERHAPI_InventoryPortal::Simulmedia:
        return TEXT("30");
    case ERHAPI_InventoryPortal::Luna:
        return TEXT("31");
    case ERHAPI_InventoryPortal::GooglePlay:
        return TEXT("32");
    case ERHAPI_InventoryPortal::NintendoPpid:
        return TEXT("33");
    }

    UE_LOG(LogRallyHereAPI, Error, TEXT("Invalid ERHAPI_InventoryPortal::Values Value (%d)"), (int)Value);
    return TEXT("");
}

bool EnumFromString(const FString& EnumAsString, ERHAPI_InventoryPortal& Value)
{
    static TMap<FString, ERHAPI_InventoryPortal> StringToEnum = { 
        { TEXT("-2"), ERHAPI_InventoryPortal::Free },
        { TEXT("-1"), ERHAPI_InventoryPortal::Sweat },
        { TEXT("0"), ERHAPI_InventoryPortal::Unknown },
        { TEXT("1"), ERHAPI_InventoryPortal::Standard },
        { TEXT("2"), ERHAPI_InventoryPortal::Anon },
        { TEXT("3"), ERHAPI_InventoryPortal::Kongregate },
        { TEXT("4"), ERHAPI_InventoryPortal::Amazon },
        { TEXT("5"), ERHAPI_InventoryPortal::Steam },
        { TEXT("6"), ERHAPI_InventoryPortal::Tcls },
        { TEXT("7"), ERHAPI_InventoryPortal::LevelupLatam },
        { TEXT("8"), ERHAPI_InventoryPortal::LevelupBra },
        { TEXT("9"), ERHAPI_InventoryPortal::Psn },
        { TEXT("10"), ERHAPI_InventoryPortal::XboxLive },
        { TEXT("11"), ERHAPI_InventoryPortal::Basic },
        { TEXT("12"), ERHAPI_InventoryPortal::Facebook },
        { TEXT("13"), ERHAPI_InventoryPortal::Google },
        { TEXT("14"), ERHAPI_InventoryPortal::UNUSED14 },
        { TEXT("15"), ERHAPI_InventoryPortal::RivalsMobile },
        { TEXT("16"), ERHAPI_InventoryPortal::Twitch },
        { TEXT("17"), ERHAPI_InventoryPortal::PaladinsStrike },
        { TEXT("18"), ERHAPI_InventoryPortal::SmiteBlitz },
        { TEXT("19"), ERHAPI_InventoryPortal::FacebookSmite },
        { TEXT("20"), ERHAPI_InventoryPortal::FacebookPaladins },
        { TEXT("21"), ERHAPI_InventoryPortal::FacebookHotg },
        { TEXT("22"), ERHAPI_InventoryPortal::NintendoSwitch },
        { TEXT("23"), ERHAPI_InventoryPortal::Tune },
        { TEXT("24"), ERHAPI_InventoryPortal::Apple },
        { TEXT("25"), ERHAPI_InventoryPortal::Discord },
        { TEXT("26"), ERHAPI_InventoryPortal::Nintendo },
        { TEXT("27"), ERHAPI_InventoryPortal::UNUSED27 },
        { TEXT("28"), ERHAPI_InventoryPortal::Epic },
        { TEXT("29"), ERHAPI_InventoryPortal::Forte },
        { TEXT("30"), ERHAPI_InventoryPortal::Simulmedia },
        { TEXT("31"), ERHAPI_InventoryPortal::Luna },
        { TEXT("32"), ERHAPI_InventoryPortal::GooglePlay },
        { TEXT("33"), ERHAPI_InventoryPortal::NintendoPpid },    };

    const auto Found = StringToEnum.Find(EnumAsString);
    if(Found)
        Value = *Found;
    return Found != nullptr;
}

FStringFormatArg ToStringFormatArg(const ERHAPI_InventoryPortal& Value)
{
    return FStringFormatArg(EnumToString(Value));
}

void WriteJsonValue(TSharedRef<TJsonWriter<>>& Writer, const ERHAPI_InventoryPortal& Value)
{
    RallyHereAPI::WriteJsonValue(Writer, EnumToString(Value));
}

bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, ERHAPI_InventoryPortal& Value)
{
    FString TmpValue;
    if (JsonValue->TryGetString(TmpValue))
    {
        if (EnumFromString(TmpValue, Value))
            return true;
    }
    return false;
}


