// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "BackfillStyle.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for ERHAPI_BackfillStyle
FString EnumToString(const ERHAPI_BackfillStyle& Value)
{
	switch (Value)
	{
	case ERHAPI_BackfillStyle::TeamRequest:
		return TEXT("team_request");
	case ERHAPI_BackfillStyle::Composition:
		return TEXT("composition");
	}

	UE_LOG(LogRallyHereAPI, Error, TEXT("Invalid ERHAPI_BackfillStyle::Values Value (%d)"), (int)Value);
	return TEXT("");
}

bool EnumFromString(const FString& EnumAsString, ERHAPI_BackfillStyle& Value)
{
	static TMap<FString, ERHAPI_BackfillStyle> StringToEnum = { 
		{ TEXT("team_request"), ERHAPI_BackfillStyle::TeamRequest },
		{ TEXT("composition"), ERHAPI_BackfillStyle::Composition },	};

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;
	return Found != nullptr;
}

FStringFormatArg ToStringFormatArg(const ERHAPI_BackfillStyle& Value)
{
	return FStringFormatArg(EnumToString(Value));
}

void WriteJsonValue(TSharedRef<TJsonWriter<>>& Writer, const ERHAPI_BackfillStyle& Value)
{
	RallyHereAPI::WriteJsonValue(Writer, EnumToString(Value));
}

bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, ERHAPI_BackfillStyle& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if (EnumFromString(TmpValue, Value))
			return true;
	}
	return false;
}


