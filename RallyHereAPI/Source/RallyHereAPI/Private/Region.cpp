// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "Region.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_Region

void FRHAPI_Region::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("region_id"));
	RallyHereAPI::WriteJsonValue(Writer, RegionId);
	Writer->WriteIdentifierPrefix(TEXT("sort_order"));
	RallyHereAPI::WriteJsonValue(Writer, SortOrder);
	Writer->WriteIdentifierPrefix(TEXT("custom_only"));
	RallyHereAPI::WriteJsonValue(Writer, CustomOnly);
	if (Description_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("description"));
		RallyHereAPI::WriteJsonValue(Writer, Description_Optional);
	}
	Writer->WriteObjectEnd();
}

bool FRHAPI_Region::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	const TSharedPtr<FJsonValue> JsonRegionIdField = (*Object)->TryGetField(TEXT("region_id"));
	const bool RegionId_IsValid = JsonRegionIdField.IsValid() && (!JsonRegionIdField->IsNull() && TryGetJsonValue(JsonRegionIdField, RegionId));
	ParseSuccess &= RegionId_IsValid; 
	const TSharedPtr<FJsonValue> JsonSortOrderField = (*Object)->TryGetField(TEXT("sort_order"));
	const bool SortOrder_IsValid = JsonSortOrderField.IsValid() && (!JsonSortOrderField->IsNull() && TryGetJsonValue(JsonSortOrderField, SortOrder));
	ParseSuccess &= SortOrder_IsValid; 
	const TSharedPtr<FJsonValue> JsonCustomOnlyField = (*Object)->TryGetField(TEXT("custom_only"));
	const bool CustomOnly_IsValid = JsonCustomOnlyField.IsValid() && (!JsonCustomOnlyField->IsNull() && TryGetJsonValue(JsonCustomOnlyField, CustomOnly));
	ParseSuccess &= CustomOnly_IsValid; 
	const TSharedPtr<FJsonValue> JsonDescriptionField = (*Object)->TryGetField(TEXT("description"));
	if (JsonDescriptionField.IsValid())
	{
		Description_IsSet = TryGetJsonValue(JsonDescriptionField, Description_Optional);
		ParseSuccess &= Description_IsSet;
	}

	return ParseSuccess;
}

