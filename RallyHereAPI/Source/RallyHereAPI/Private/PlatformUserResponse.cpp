// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "PlatformUserResponse.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_PlatformUserResponse

void FRHAPI_PlatformUserResponse::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("platform"));
	RallyHereAPI::WriteJsonValue(Writer, EnumToString(Platform));
	Writer->WriteIdentifierPrefix(TEXT("platform_user_id"));
	RallyHereAPI::WriteJsonValue(Writer, PlatformUserId);
	if (DisplayName_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("display_name"));
		RallyHereAPI::WriteJsonValue(Writer, DisplayName_Optional);
	}
	Writer->WriteIdentifierPrefix(TEXT("player_id"));
	RallyHereAPI::WriteJsonValue(Writer, PlayerId);
	Writer->WriteIdentifierPrefix(TEXT("player_uuid"));
	RallyHereAPI::WriteJsonValue(Writer, PlayerUuid);
	Writer->WriteIdentifierPrefix(TEXT("person_id"));
	RallyHereAPI::WriteJsonValue(Writer, PersonId);
	if (ActivePlayerId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("active_player_id"));
		RallyHereAPI::WriteJsonValue(Writer, ActivePlayerId_Optional);
	}
	if (ActivePlayerUuid_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("active_player_uuid"));
		RallyHereAPI::WriteJsonValue(Writer, ActivePlayerUuid_Optional);
	}
	Writer->WriteObjectEnd();
}

bool FRHAPI_PlatformUserResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	const TSharedPtr<FJsonValue> JsonPlatformField = (*Object)->TryGetField(TEXT("platform"));
	const bool Platform_IsValid = JsonPlatformField.IsValid() && (!JsonPlatformField->IsNull() && TryGetJsonValue(JsonPlatformField, Platform));
	ParseSuccess &= Platform_IsValid; 
	const TSharedPtr<FJsonValue> JsonPlatformUserIdField = (*Object)->TryGetField(TEXT("platform_user_id"));
	const bool PlatformUserId_IsValid = JsonPlatformUserIdField.IsValid() && (!JsonPlatformUserIdField->IsNull() && TryGetJsonValue(JsonPlatformUserIdField, PlatformUserId));
	ParseSuccess &= PlatformUserId_IsValid; 
	const TSharedPtr<FJsonValue> JsonDisplayNameField = (*Object)->TryGetField(TEXT("display_name"));
	if (JsonDisplayNameField.IsValid())
	{
		DisplayName_IsSet = TryGetJsonValue(JsonDisplayNameField, DisplayName_Optional);
		ParseSuccess &= DisplayName_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonPlayerIdField = (*Object)->TryGetField(TEXT("player_id"));
	const bool PlayerId_IsValid = JsonPlayerIdField.IsValid() && (!JsonPlayerIdField->IsNull() && TryGetJsonValue(JsonPlayerIdField, PlayerId));
	ParseSuccess &= PlayerId_IsValid; 
	const TSharedPtr<FJsonValue> JsonPlayerUuidField = (*Object)->TryGetField(TEXT("player_uuid"));
	const bool PlayerUuid_IsValid = JsonPlayerUuidField.IsValid() && (!JsonPlayerUuidField->IsNull() && TryGetJsonValue(JsonPlayerUuidField, PlayerUuid));
	ParseSuccess &= PlayerUuid_IsValid; 
	const TSharedPtr<FJsonValue> JsonPersonIdField = (*Object)->TryGetField(TEXT("person_id"));
	const bool PersonId_IsValid = JsonPersonIdField.IsValid() && (!JsonPersonIdField->IsNull() && TryGetJsonValue(JsonPersonIdField, PersonId));
	ParseSuccess &= PersonId_IsValid; 
	const TSharedPtr<FJsonValue> JsonActivePlayerIdField = (*Object)->TryGetField(TEXT("active_player_id"));
	if (JsonActivePlayerIdField.IsValid())
	{
		ActivePlayerId_IsSet = TryGetJsonValue(JsonActivePlayerIdField, ActivePlayerId_Optional);
		ParseSuccess &= ActivePlayerId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonActivePlayerUuidField = (*Object)->TryGetField(TEXT("active_player_uuid"));
	if (JsonActivePlayerUuidField.IsValid())
	{
		ActivePlayerUuid_IsSet = TryGetJsonValue(JsonActivePlayerUuidField, ActivePlayerUuid_Optional);
		ParseSuccess &= ActivePlayerUuid_IsSet;
	}

	return ParseSuccess;
}

