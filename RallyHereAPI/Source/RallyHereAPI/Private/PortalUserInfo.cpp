// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "PortalUserInfo.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_PortalUserInfo

void FRHAPI_PortalUserInfo::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("platform"));
	RallyHereAPI::WriteJsonValue(Writer, EnumToString(Platform));
	Writer->WriteIdentifierPrefix(TEXT("portal_id"));
	RallyHereAPI::WriteJsonValue(Writer, EnumToString(PortalId));
	Writer->WriteIdentifierPrefix(TEXT("portal_user_id"));
	RallyHereAPI::WriteJsonValue(Writer, PortalUserId);
	Writer->WriteIdentifierPrefix(TEXT("display_name"));
	RallyHereAPI::WriteJsonValue(Writer, DisplayName);
	if (DeviceType_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("device_type"));
		RallyHereAPI::WriteJsonValue(Writer, EnumToString(DeviceType_Optional));
	}
	Writer->WriteObjectEnd();
}

bool FRHAPI_PortalUserInfo::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	const TSharedPtr<FJsonValue> JsonPlatformField = (*Object)->TryGetField(TEXT("platform"));
	const bool Platform_IsValid = JsonPlatformField.IsValid() && (!JsonPlatformField->IsNull() && TryGetJsonValue(JsonPlatformField, Platform));
	ParseSuccess &= Platform_IsValid; 
	const TSharedPtr<FJsonValue> JsonPortalIdField = (*Object)->TryGetField(TEXT("portal_id"));
	const bool PortalId_IsValid = JsonPortalIdField.IsValid() && (!JsonPortalIdField->IsNull() && TryGetJsonValue(JsonPortalIdField, PortalId));
	ParseSuccess &= PortalId_IsValid; 
	const TSharedPtr<FJsonValue> JsonPortalUserIdField = (*Object)->TryGetField(TEXT("portal_user_id"));
	const bool PortalUserId_IsValid = JsonPortalUserIdField.IsValid() && (!JsonPortalUserIdField->IsNull() && TryGetJsonValue(JsonPortalUserIdField, PortalUserId));
	ParseSuccess &= PortalUserId_IsValid; 
	const TSharedPtr<FJsonValue> JsonDisplayNameField = (*Object)->TryGetField(TEXT("display_name"));
	const bool DisplayName_IsValid = JsonDisplayNameField.IsValid() && (!JsonDisplayNameField->IsNull() && TryGetJsonValue(JsonDisplayNameField, DisplayName));
	ParseSuccess &= DisplayName_IsValid; 
	const TSharedPtr<FJsonValue> JsonDeviceTypeField = (*Object)->TryGetField(TEXT("device_type"));
	if (JsonDeviceTypeField.IsValid())
	{
		DeviceType_IsSet = TryGetJsonValue(JsonDeviceTypeField, DeviceType_Optional);
		ParseSuccess &= DeviceType_IsSet;
	}

	return ParseSuccess;
}

