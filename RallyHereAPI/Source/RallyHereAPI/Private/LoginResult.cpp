// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "LoginResult.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_LoginResult

void FRHAPI_LoginResult::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
	Writer->WriteObjectStart();
	if (PortalParentAuthResult_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("portal_parent_auth_result"));
		RallyHereAPI::WriteJsonValue(Writer, PortalParentAuthResult_Optional);
	}
	if (Permissions_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("permissions"));
		RallyHereAPI::WriteJsonValue(Writer, Permissions_Optional);
	}
	if (Restrictions_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("restrictions"));
		RallyHereAPI::WriteJsonValue(Writer, Restrictions_Optional);
	}
	if (ActivePlayerId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("active_player_id"));
		RallyHereAPI::WriteJsonValue(Writer, ActivePlayerId_Optional);
	}
	if (ActivePlayerUuid_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("active_player_uuid"));
		RallyHereAPI::WriteJsonValue(Writer, ActivePlayerUuid_Optional);
	}
	if (Platform_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("platform"));
		RallyHereAPI::WriteJsonValue(Writer, EnumToString(Platform_Optional));
	}
	if (PortalId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("portal_id"));
		RallyHereAPI::WriteJsonValue(Writer, PortalId_Optional);
	}
	if (PortalUserId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("portal_user_id"));
		RallyHereAPI::WriteJsonValue(Writer, PortalUserId_Optional);
	}
	if (DisplayName_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("display_name"));
		RallyHereAPI::WriteJsonValue(Writer, DisplayName_Optional);
	}
	if (RoleId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("role_id"));
		RallyHereAPI::WriteJsonValue(Writer, RoleId_Optional);
	}
	if (PersonId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("person_id"));
		RallyHereAPI::WriteJsonValue(Writer, PersonId_Optional);
	}
	if (AccessToken_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("access_token"));
		RallyHereAPI::WriteJsonValue(Writer, AccessToken_Optional);
	}
	if (RefreshToken_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("refresh_token"));
		RallyHereAPI::WriteJsonValue(Writer, RefreshToken_Optional);
	}
	Writer->WriteIdentifierPrefix(TEXT("publisher_uuid"));
	RallyHereAPI::WriteJsonValue(Writer, PublisherUuid);
	Writer->WriteIdentifierPrefix(TEXT("tenant_uuid"));
	RallyHereAPI::WriteJsonValue(Writer, TenantUuid);
	Writer->WriteIdentifierPrefix(TEXT("config_elector_uuid"));
	RallyHereAPI::WriteJsonValue(Writer, ConfigElectorUuid);
	Writer->WriteIdentifierPrefix(TEXT("client_uuid"));
	RallyHereAPI::WriteJsonValue(Writer, ClientUuid);
	Writer->WriteIdentifierPrefix(TEXT("client_id"));
	RallyHereAPI::WriteJsonValue(Writer, ClientId);
	Writer->WriteIdentifierPrefix(TEXT("token_type"));
	RallyHereAPI::WriteJsonValue(Writer, TokenType);
	if (ExpiresIn_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("expires_in"));
		RallyHereAPI::WriteJsonValue(Writer, ExpiresIn_Optional);
	}
	Writer->WriteObjectEnd();
}

bool FRHAPI_LoginResult::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	const TSharedPtr<FJsonValue> JsonPortalParentAuthResultField = (*Object)->TryGetField(TEXT("portal_parent_auth_result"));
	if (JsonPortalParentAuthResultField.IsValid())
	{
		PortalParentAuthResult_IsSet = TryGetJsonValue(JsonPortalParentAuthResultField, PortalParentAuthResult_Optional);
		ParseSuccess &= PortalParentAuthResult_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonPermissionsField = (*Object)->TryGetField(TEXT("permissions"));
	if (JsonPermissionsField.IsValid())
	{
		Permissions_IsSet = TryGetJsonValue(JsonPermissionsField, Permissions_Optional);
		ParseSuccess &= Permissions_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRestrictionsField = (*Object)->TryGetField(TEXT("restrictions"));
	if (JsonRestrictionsField.IsValid())
	{
		Restrictions_IsSet = TryGetJsonValue(JsonRestrictionsField, Restrictions_Optional);
		ParseSuccess &= Restrictions_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonActivePlayerIdField = (*Object)->TryGetField(TEXT("active_player_id"));
	if (JsonActivePlayerIdField.IsValid())
	{
		ActivePlayerId_IsSet = TryGetJsonValue(JsonActivePlayerIdField, ActivePlayerId_Optional);
		ParseSuccess &= ActivePlayerId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonActivePlayerUuidField = (*Object)->TryGetField(TEXT("active_player_uuid"));
	if (JsonActivePlayerUuidField.IsValid())
	{
		ActivePlayerUuid_IsSet = TryGetJsonValue(JsonActivePlayerUuidField, ActivePlayerUuid_Optional);
		ParseSuccess &= ActivePlayerUuid_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonPlatformField = (*Object)->TryGetField(TEXT("platform"));
	if (JsonPlatformField.IsValid())
	{
		Platform_IsSet = TryGetJsonValue(JsonPlatformField, Platform_Optional);
		ParseSuccess &= Platform_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonPortalIdField = (*Object)->TryGetField(TEXT("portal_id"));
	if (JsonPortalIdField.IsValid())
	{
		PortalId_IsSet = TryGetJsonValue(JsonPortalIdField, PortalId_Optional);
		ParseSuccess &= PortalId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonPortalUserIdField = (*Object)->TryGetField(TEXT("portal_user_id"));
	if (JsonPortalUserIdField.IsValid())
	{
		PortalUserId_IsSet = TryGetJsonValue(JsonPortalUserIdField, PortalUserId_Optional);
		ParseSuccess &= PortalUserId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonDisplayNameField = (*Object)->TryGetField(TEXT("display_name"));
	if (JsonDisplayNameField.IsValid())
	{
		DisplayName_IsSet = TryGetJsonValue(JsonDisplayNameField, DisplayName_Optional);
		ParseSuccess &= DisplayName_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRoleIdField = (*Object)->TryGetField(TEXT("role_id"));
	if (JsonRoleIdField.IsValid())
	{
		RoleId_IsSet = TryGetJsonValue(JsonRoleIdField, RoleId_Optional);
		ParseSuccess &= RoleId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonPersonIdField = (*Object)->TryGetField(TEXT("person_id"));
	if (JsonPersonIdField.IsValid())
	{
		PersonId_IsSet = TryGetJsonValue(JsonPersonIdField, PersonId_Optional);
		ParseSuccess &= PersonId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonAccessTokenField = (*Object)->TryGetField(TEXT("access_token"));
	if (JsonAccessTokenField.IsValid())
	{
		AccessToken_IsSet = TryGetJsonValue(JsonAccessTokenField, AccessToken_Optional);
		ParseSuccess &= AccessToken_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRefreshTokenField = (*Object)->TryGetField(TEXT("refresh_token"));
	if (JsonRefreshTokenField.IsValid())
	{
		RefreshToken_IsSet = TryGetJsonValue(JsonRefreshTokenField, RefreshToken_Optional);
		ParseSuccess &= RefreshToken_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonPublisherUuidField = (*Object)->TryGetField(TEXT("publisher_uuid"));
	const bool PublisherUuid_IsValid = JsonPublisherUuidField.IsValid() && (!JsonPublisherUuidField->IsNull() && TryGetJsonValue(JsonPublisherUuidField, PublisherUuid));
	ParseSuccess &= PublisherUuid_IsValid; 
	const TSharedPtr<FJsonValue> JsonTenantUuidField = (*Object)->TryGetField(TEXT("tenant_uuid"));
	const bool TenantUuid_IsValid = JsonTenantUuidField.IsValid() && (!JsonTenantUuidField->IsNull() && TryGetJsonValue(JsonTenantUuidField, TenantUuid));
	ParseSuccess &= TenantUuid_IsValid; 
	const TSharedPtr<FJsonValue> JsonConfigElectorUuidField = (*Object)->TryGetField(TEXT("config_elector_uuid"));
	const bool ConfigElectorUuid_IsValid = JsonConfigElectorUuidField.IsValid() && (!JsonConfigElectorUuidField->IsNull() && TryGetJsonValue(JsonConfigElectorUuidField, ConfigElectorUuid));
	ParseSuccess &= ConfigElectorUuid_IsValid; 
	const TSharedPtr<FJsonValue> JsonClientUuidField = (*Object)->TryGetField(TEXT("client_uuid"));
	const bool ClientUuid_IsValid = JsonClientUuidField.IsValid() && (!JsonClientUuidField->IsNull() && TryGetJsonValue(JsonClientUuidField, ClientUuid));
	ParseSuccess &= ClientUuid_IsValid; 
	const TSharedPtr<FJsonValue> JsonClientIdField = (*Object)->TryGetField(TEXT("client_id"));
	const bool ClientId_IsValid = JsonClientIdField.IsValid() && (!JsonClientIdField->IsNull() && TryGetJsonValue(JsonClientIdField, ClientId));
	ParseSuccess &= ClientId_IsValid; 
	const TSharedPtr<FJsonValue> JsonTokenTypeField = (*Object)->TryGetField(TEXT("token_type"));
	const bool TokenType_IsValid = JsonTokenTypeField.IsValid() && (!JsonTokenTypeField->IsNull() && TryGetJsonValue(JsonTokenTypeField, TokenType));
	ParseSuccess &= TokenType_IsValid; 
	const TSharedPtr<FJsonValue> JsonExpiresInField = (*Object)->TryGetField(TEXT("expires_in"));
	if (JsonExpiresInField.IsValid())
	{
		ExpiresIn_IsSet = TryGetJsonValue(JsonExpiresInField, ExpiresIn_Optional);
		ParseSuccess &= ExpiresIn_IsSet;
	}

	return ParseSuccess;
}

