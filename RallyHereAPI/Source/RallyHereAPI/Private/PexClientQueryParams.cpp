// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "PexClientQueryParams.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_PexClientQueryParams

void FRHAPI_PexClientQueryParams::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
	Writer->WriteObjectStart();
	if (ToDatetime_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("to_datetime"));
		RallyHereAPI::WriteJsonValue(Writer, ToDatetime_Optional);
	}
	if (FromDatetime_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("from_datetime"));
		RallyHereAPI::WriteJsonValue(Writer, FromDatetime_Optional);
	}
	if (MatchId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("match_id"));
		RallyHereAPI::WriteJsonValue(Writer, MatchId_Optional);
	}
	if (RegionId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("region_id"));
		RallyHereAPI::WriteJsonValue(Writer, RegionId_Optional);
	}
	if (ServerId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("server_id"));
		RallyHereAPI::WriteJsonValue(Writer, ServerId_Optional);
	}
	if (AllocationId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("allocation_id"));
		RallyHereAPI::WriteJsonValue(Writer, AllocationId_Optional);
	}
	if (DatacenterProvider_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("datacenter_provider"));
		RallyHereAPI::WriteJsonValue(Writer, DatacenterProvider_Optional);
	}
	if (DatacenterLocation_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("datacenter_location"));
		RallyHereAPI::WriteJsonValue(Writer, DatacenterLocation_Optional);
	}
	if (AddressIp_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("address_ip"));
		RallyHereAPI::WriteJsonValue(Writer, AddressIp_Optional);
	}
	if (MapName_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("map_name"));
		RallyHereAPI::WriteJsonValue(Writer, MapName_Optional);
	}
	if (GameMode_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("game_mode"));
		RallyHereAPI::WriteJsonValue(Writer, GameMode_Optional);
	}
	if (MatchmakingProfileId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("matchmaking_profile_id"));
		RallyHereAPI::WriteJsonValue(Writer, MatchmakingProfileId_Optional);
	}
	if (ExpectedTeamSize_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("expected_team_size"));
		RallyHereAPI::WriteJsonValue(Writer, ExpectedTeamSize_Optional);
	}
	if (ExpectedPlayerCount_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("expected_player_count"));
		RallyHereAPI::WriteJsonValue(Writer, ExpectedPlayerCount_Optional);
	}
	if (HostPlayerUuid_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("host_player_uuid"));
		RallyHereAPI::WriteJsonValue(Writer, HostPlayerUuid_Optional);
	}
	if (OwningPlayerUuid_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("owning_player_uuid"));
		RallyHereAPI::WriteJsonValue(Writer, OwningPlayerUuid_Optional);
	}
	if (Version_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("version"));
		RallyHereAPI::WriteJsonValue(Writer, Version_Optional);
	}
	if (PlayerUuid_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("player_uuid"));
		RallyHereAPI::WriteJsonValue(Writer, PlayerUuid_Optional);
	}
	if (DeviceInfo_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("device_info"));
		RallyHereAPI::WriteJsonValue(Writer, DeviceInfo_Optional);
	}
	Writer->WriteObjectEnd();
}

bool FRHAPI_PexClientQueryParams::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	const TSharedPtr<FJsonValue> JsonToDatetimeField = (*Object)->TryGetField(TEXT("to_datetime"));
	if (JsonToDatetimeField.IsValid() && !JsonToDatetimeField->IsNull())
	{
		ToDatetime_IsSet = TryGetJsonValue(JsonToDatetimeField, ToDatetime_Optional);
		ParseSuccess &= ToDatetime_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonFromDatetimeField = (*Object)->TryGetField(TEXT("from_datetime"));
	if (JsonFromDatetimeField.IsValid() && !JsonFromDatetimeField->IsNull())
	{
		FromDatetime_IsSet = TryGetJsonValue(JsonFromDatetimeField, FromDatetime_Optional);
		ParseSuccess &= FromDatetime_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonMatchIdField = (*Object)->TryGetField(TEXT("match_id"));
	if (JsonMatchIdField.IsValid() && !JsonMatchIdField->IsNull())
	{
		MatchId_IsSet = TryGetJsonValue(JsonMatchIdField, MatchId_Optional);
		ParseSuccess &= MatchId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRegionIdField = (*Object)->TryGetField(TEXT("region_id"));
	if (JsonRegionIdField.IsValid() && !JsonRegionIdField->IsNull())
	{
		RegionId_IsSet = TryGetJsonValue(JsonRegionIdField, RegionId_Optional);
		ParseSuccess &= RegionId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonServerIdField = (*Object)->TryGetField(TEXT("server_id"));
	if (JsonServerIdField.IsValid() && !JsonServerIdField->IsNull())
	{
		ServerId_IsSet = TryGetJsonValue(JsonServerIdField, ServerId_Optional);
		ParseSuccess &= ServerId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonAllocationIdField = (*Object)->TryGetField(TEXT("allocation_id"));
	if (JsonAllocationIdField.IsValid() && !JsonAllocationIdField->IsNull())
	{
		AllocationId_IsSet = TryGetJsonValue(JsonAllocationIdField, AllocationId_Optional);
		ParseSuccess &= AllocationId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonDatacenterProviderField = (*Object)->TryGetField(TEXT("datacenter_provider"));
	if (JsonDatacenterProviderField.IsValid() && !JsonDatacenterProviderField->IsNull())
	{
		DatacenterProvider_IsSet = TryGetJsonValue(JsonDatacenterProviderField, DatacenterProvider_Optional);
		ParseSuccess &= DatacenterProvider_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonDatacenterLocationField = (*Object)->TryGetField(TEXT("datacenter_location"));
	if (JsonDatacenterLocationField.IsValid() && !JsonDatacenterLocationField->IsNull())
	{
		DatacenterLocation_IsSet = TryGetJsonValue(JsonDatacenterLocationField, DatacenterLocation_Optional);
		ParseSuccess &= DatacenterLocation_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonAddressIpField = (*Object)->TryGetField(TEXT("address_ip"));
	if (JsonAddressIpField.IsValid() && !JsonAddressIpField->IsNull())
	{
		AddressIp_IsSet = TryGetJsonValue(JsonAddressIpField, AddressIp_Optional);
		ParseSuccess &= AddressIp_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonMapNameField = (*Object)->TryGetField(TEXT("map_name"));
	if (JsonMapNameField.IsValid() && !JsonMapNameField->IsNull())
	{
		MapName_IsSet = TryGetJsonValue(JsonMapNameField, MapName_Optional);
		ParseSuccess &= MapName_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonGameModeField = (*Object)->TryGetField(TEXT("game_mode"));
	if (JsonGameModeField.IsValid() && !JsonGameModeField->IsNull())
	{
		GameMode_IsSet = TryGetJsonValue(JsonGameModeField, GameMode_Optional);
		ParseSuccess &= GameMode_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonMatchmakingProfileIdField = (*Object)->TryGetField(TEXT("matchmaking_profile_id"));
	if (JsonMatchmakingProfileIdField.IsValid() && !JsonMatchmakingProfileIdField->IsNull())
	{
		MatchmakingProfileId_IsSet = TryGetJsonValue(JsonMatchmakingProfileIdField, MatchmakingProfileId_Optional);
		ParseSuccess &= MatchmakingProfileId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonExpectedTeamSizeField = (*Object)->TryGetField(TEXT("expected_team_size"));
	if (JsonExpectedTeamSizeField.IsValid() && !JsonExpectedTeamSizeField->IsNull())
	{
		ExpectedTeamSize_IsSet = TryGetJsonValue(JsonExpectedTeamSizeField, ExpectedTeamSize_Optional);
		ParseSuccess &= ExpectedTeamSize_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonExpectedPlayerCountField = (*Object)->TryGetField(TEXT("expected_player_count"));
	if (JsonExpectedPlayerCountField.IsValid() && !JsonExpectedPlayerCountField->IsNull())
	{
		ExpectedPlayerCount_IsSet = TryGetJsonValue(JsonExpectedPlayerCountField, ExpectedPlayerCount_Optional);
		ParseSuccess &= ExpectedPlayerCount_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonHostPlayerUuidField = (*Object)->TryGetField(TEXT("host_player_uuid"));
	if (JsonHostPlayerUuidField.IsValid() && !JsonHostPlayerUuidField->IsNull())
	{
		HostPlayerUuid_IsSet = TryGetJsonValue(JsonHostPlayerUuidField, HostPlayerUuid_Optional);
		ParseSuccess &= HostPlayerUuid_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonOwningPlayerUuidField = (*Object)->TryGetField(TEXT("owning_player_uuid"));
	if (JsonOwningPlayerUuidField.IsValid() && !JsonOwningPlayerUuidField->IsNull())
	{
		OwningPlayerUuid_IsSet = TryGetJsonValue(JsonOwningPlayerUuidField, OwningPlayerUuid_Optional);
		ParseSuccess &= OwningPlayerUuid_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonVersionField = (*Object)->TryGetField(TEXT("version"));
	if (JsonVersionField.IsValid() && !JsonVersionField->IsNull())
	{
		Version_IsSet = TryGetJsonValue(JsonVersionField, Version_Optional);
		ParseSuccess &= Version_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonPlayerUuidField = (*Object)->TryGetField(TEXT("player_uuid"));
	if (JsonPlayerUuidField.IsValid() && !JsonPlayerUuidField->IsNull())
	{
		PlayerUuid_IsSet = TryGetJsonValue(JsonPlayerUuidField, PlayerUuid_Optional);
		ParseSuccess &= PlayerUuid_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonDeviceInfoField = (*Object)->TryGetField(TEXT("device_info"));
	if (JsonDeviceInfoField.IsValid() && !JsonDeviceInfoField->IsNull())
	{
		DeviceInfo_IsSet = TryGetJsonValue(JsonDeviceInfoField, DeviceInfo_Optional);
		ParseSuccess &= DeviceInfo_IsSet;
	}

	return ParseSuccess;
}

