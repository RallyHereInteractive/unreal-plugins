// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "PlatformUserLinkRequest.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_PlatformUserLinkRequest

void FRHAPI_PlatformUserLinkRequest::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
	Writer->WriteObjectStart();
	if (LeaderPersonId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("leader_person_id"));
		RallyHereAPI::WriteJsonValue(Writer, LeaderPersonId_Optional);
	}
	if (LeaderPlatform_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("leader_platform"));
		RallyHereAPI::WriteJsonValue(Writer, EnumToString(LeaderPlatform_Optional));
	}
	if (LeaderPlatformUserId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("leader_platform_user_id"));
		RallyHereAPI::WriteJsonValue(Writer, LeaderPlatformUserId_Optional);
	}
	if (FollowerPlatform_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("follower_platform"));
		RallyHereAPI::WriteJsonValue(Writer, EnumToString(FollowerPlatform_Optional));
	}
	if (FollowerPlatformUserId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("follower_platform_user_id"));
		RallyHereAPI::WriteJsonValue(Writer, FollowerPlatformUserId_Optional);
	}
	if (Scheme_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("scheme"));
		RallyHereAPI::WriteJsonValue(Writer, Scheme_Optional);
	}
	if (Credentials_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("credentials"));
		RallyHereAPI::WriteJsonValue(Writer, Credentials_Optional);
	}
	Writer->WriteObjectEnd();
}

bool FRHAPI_PlatformUserLinkRequest::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	const TSharedPtr<FJsonValue> JsonLeaderPersonIdField = (*Object)->TryGetField(TEXT("leader_person_id"));
	if (JsonLeaderPersonIdField.IsValid() && !JsonLeaderPersonIdField->IsNull())
	{
		LeaderPersonId_IsSet = TryGetJsonValue(JsonLeaderPersonIdField, LeaderPersonId_Optional);
		ParseSuccess &= LeaderPersonId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonLeaderPlatformField = (*Object)->TryGetField(TEXT("leader_platform"));
	if (JsonLeaderPlatformField.IsValid() && !JsonLeaderPlatformField->IsNull())
	{
		LeaderPlatform_IsSet = TryGetJsonValue(JsonLeaderPlatformField, LeaderPlatform_Optional);
		ParseSuccess &= LeaderPlatform_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonLeaderPlatformUserIdField = (*Object)->TryGetField(TEXT("leader_platform_user_id"));
	if (JsonLeaderPlatformUserIdField.IsValid() && !JsonLeaderPlatformUserIdField->IsNull())
	{
		LeaderPlatformUserId_IsSet = TryGetJsonValue(JsonLeaderPlatformUserIdField, LeaderPlatformUserId_Optional);
		ParseSuccess &= LeaderPlatformUserId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonFollowerPlatformField = (*Object)->TryGetField(TEXT("follower_platform"));
	if (JsonFollowerPlatformField.IsValid() && !JsonFollowerPlatformField->IsNull())
	{
		FollowerPlatform_IsSet = TryGetJsonValue(JsonFollowerPlatformField, FollowerPlatform_Optional);
		ParseSuccess &= FollowerPlatform_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonFollowerPlatformUserIdField = (*Object)->TryGetField(TEXT("follower_platform_user_id"));
	if (JsonFollowerPlatformUserIdField.IsValid() && !JsonFollowerPlatformUserIdField->IsNull())
	{
		FollowerPlatformUserId_IsSet = TryGetJsonValue(JsonFollowerPlatformUserIdField, FollowerPlatformUserId_Optional);
		ParseSuccess &= FollowerPlatformUserId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonSchemeField = (*Object)->TryGetField(TEXT("scheme"));
	if (JsonSchemeField.IsValid() && !JsonSchemeField->IsNull())
	{
		Scheme_IsSet = TryGetJsonValue(JsonSchemeField, Scheme_Optional);
		ParseSuccess &= Scheme_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonCredentialsField = (*Object)->TryGetField(TEXT("credentials"));
	if (JsonCredentialsField.IsValid() && !JsonCredentialsField->IsNull())
	{
		Credentials_IsSet = TryGetJsonValue(JsonCredentialsField, Credentials_Optional);
		ParseSuccess &= Credentials_IsSet;
	}

	return ParseSuccess;
}

