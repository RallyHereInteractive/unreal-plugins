// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "RestrictionCreate.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_RestrictionCreate

void FRHAPI_RestrictionCreate::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("type"));
	RallyHereAPI::WriteJsonValue(Writer, EnumToString(Type));
	if (Reason_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("reason"));
		RallyHereAPI::WriteJsonValue(Writer, EnumToString(Reason_Optional));
	}
	if (Expiration_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("expiration"));
		RallyHereAPI::WriteJsonValue(Writer, Expiration_Optional);
	}
	Writer->WriteIdentifierPrefix(TEXT("issuer_type"));
	RallyHereAPI::WriteJsonValue(Writer, EnumToString(IssuerType));
	Writer->WriteIdentifierPrefix(TEXT("issuer"));
	RallyHereAPI::WriteJsonValue(Writer, Issuer);
	Writer->WriteObjectEnd();
}

bool FRHAPI_RestrictionCreate::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	const TSharedPtr<FJsonValue> JsonTypeField = (*Object)->TryGetField(TEXT("type"));
	const bool Type_IsValid = JsonTypeField.IsValid() && (!JsonTypeField->IsNull() && TryGetJsonValue(JsonTypeField, Type));
	ParseSuccess &= Type_IsValid; 
	const TSharedPtr<FJsonValue> JsonReasonField = (*Object)->TryGetField(TEXT("reason"));
	if (JsonReasonField.IsValid())
	{
		Reason_IsSet = TryGetJsonValue(JsonReasonField, Reason_Optional);
		ParseSuccess &= Reason_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonExpirationField = (*Object)->TryGetField(TEXT("expiration"));
	if (JsonExpirationField.IsValid())
	{
		Expiration_IsSet = TryGetJsonValue(JsonExpirationField, Expiration_Optional);
		ParseSuccess &= Expiration_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonIssuerTypeField = (*Object)->TryGetField(TEXT("issuer_type"));
	const bool IssuerType_IsValid = JsonIssuerTypeField.IsValid() && (!JsonIssuerTypeField->IsNull() && TryGetJsonValue(JsonIssuerTypeField, IssuerType));
	ParseSuccess &= IssuerType_IsValid; 
	const TSharedPtr<FJsonValue> JsonIssuerField = (*Object)->TryGetField(TEXT("issuer"));
	const bool Issuer_IsValid = JsonIssuerField.IsValid() && (!JsonIssuerField->IsNull() && TryGetJsonValue(JsonIssuerField, Issuer));
	ParseSuccess &= Issuer_IsValid; 

	return ParseSuccess;
}

