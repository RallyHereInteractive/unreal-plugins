// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "PexStat.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_PexStat

void FRHAPI_PexStat::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
	Writer->WriteObjectStart();
	if (Min_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("min"));
		RallyHereAPI::WriteJsonValue(Writer, Min_Optional);
	}
	if (Max_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("max"));
		RallyHereAPI::WriteJsonValue(Writer, Max_Optional);
	}
	if (Avg_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("avg"));
		RallyHereAPI::WriteJsonValue(Writer, Avg_Optional);
	}
	if (Stddev_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("stddev"));
		RallyHereAPI::WriteJsonValue(Writer, Stddev_Optional);
	}
	Writer->WriteObjectEnd();
}

bool FRHAPI_PexStat::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	const TSharedPtr<FJsonValue> JsonMinField = (*Object)->TryGetField(TEXT("min"));
	if (JsonMinField.IsValid() && !JsonMinField->IsNull())
	{
		Min_IsSet = TryGetJsonValue(JsonMinField, Min_Optional);
		ParseSuccess &= Min_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonMaxField = (*Object)->TryGetField(TEXT("max"));
	if (JsonMaxField.IsValid() && !JsonMaxField->IsNull())
	{
		Max_IsSet = TryGetJsonValue(JsonMaxField, Max_Optional);
		ParseSuccess &= Max_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonAvgField = (*Object)->TryGetField(TEXT("avg"));
	if (JsonAvgField.IsValid() && !JsonAvgField->IsNull())
	{
		Avg_IsSet = TryGetJsonValue(JsonAvgField, Avg_Optional);
		ParseSuccess &= Avg_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonStddevField = (*Object)->TryGetField(TEXT("stddev"));
	if (JsonStddevField.IsValid() && !JsonStddevField->IsNull())
	{
		Stddev_IsSet = TryGetJsonValue(JsonStddevField, Stddev_Optional);
		ParseSuccess &= Stddev_IsSet;
	}

	return ParseSuccess;
}

