// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "OAuthTokenResponse.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_OAuthTokenResponse

void FRHAPI_OAuthTokenResponse::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
	Writer->WriteObjectStart();
	if (AccessToken_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("access_token"));
		RallyHereAPI::WriteJsonValue(Writer, AccessToken_Optional);
	}
	if (RefreshToken_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("refresh_token"));
		RallyHereAPI::WriteJsonValue(Writer, RefreshToken_Optional);
	}
	if (NeedsEula_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("needs_eula"));
		RallyHereAPI::WriteJsonValue(Writer, NeedsEula_Optional);
	}
	if (NeedsTos_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("needs_tos"));
		RallyHereAPI::WriteJsonValue(Writer, NeedsTos_Optional);
	}
	if (NeedsPrivacyPolicy_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("needs_privacy_policy"));
		RallyHereAPI::WriteJsonValue(Writer, NeedsPrivacyPolicy_Optional);
	}
	if (RegeneratedCode_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("regenerated_code"));
		RallyHereAPI::WriteJsonValue(Writer, RegeneratedCode_Optional);
	}
	if (ErrorMessage_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("error_message"));
		RallyHereAPI::WriteJsonValue(Writer, ErrorMessage_Optional);
	}
	if (Restrictions_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("restrictions"));
		RallyHereAPI::WriteJsonValue(Writer, Restrictions_Optional);
	}
	Writer->WriteObjectEnd();
}

bool FRHAPI_OAuthTokenResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	const TSharedPtr<FJsonValue> JsonAccessTokenField = (*Object)->TryGetField(TEXT("access_token"));
	if (JsonAccessTokenField.IsValid())
	{
		AccessToken_IsSet = TryGetJsonValue(JsonAccessTokenField, AccessToken_Optional);
		ParseSuccess &= AccessToken_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRefreshTokenField = (*Object)->TryGetField(TEXT("refresh_token"));
	if (JsonRefreshTokenField.IsValid())
	{
		RefreshToken_IsSet = TryGetJsonValue(JsonRefreshTokenField, RefreshToken_Optional);
		ParseSuccess &= RefreshToken_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonNeedsEulaField = (*Object)->TryGetField(TEXT("needs_eula"));
	if (JsonNeedsEulaField.IsValid())
	{
		NeedsEula_IsSet = TryGetJsonValue(JsonNeedsEulaField, NeedsEula_Optional);
		ParseSuccess &= NeedsEula_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonNeedsTosField = (*Object)->TryGetField(TEXT("needs_tos"));
	if (JsonNeedsTosField.IsValid())
	{
		NeedsTos_IsSet = TryGetJsonValue(JsonNeedsTosField, NeedsTos_Optional);
		ParseSuccess &= NeedsTos_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonNeedsPrivacyPolicyField = (*Object)->TryGetField(TEXT("needs_privacy_policy"));
	if (JsonNeedsPrivacyPolicyField.IsValid())
	{
		NeedsPrivacyPolicy_IsSet = TryGetJsonValue(JsonNeedsPrivacyPolicyField, NeedsPrivacyPolicy_Optional);
		ParseSuccess &= NeedsPrivacyPolicy_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRegeneratedCodeField = (*Object)->TryGetField(TEXT("regenerated_code"));
	if (JsonRegeneratedCodeField.IsValid())
	{
		RegeneratedCode_IsSet = TryGetJsonValue(JsonRegeneratedCodeField, RegeneratedCode_Optional);
		ParseSuccess &= RegeneratedCode_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonErrorMessageField = (*Object)->TryGetField(TEXT("error_message"));
	if (JsonErrorMessageField.IsValid())
	{
		ErrorMessage_IsSet = TryGetJsonValue(JsonErrorMessageField, ErrorMessage_Optional);
		ParseSuccess &= ErrorMessage_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRestrictionsField = (*Object)->TryGetField(TEXT("restrictions"));
	if (JsonRestrictionsField.IsValid())
	{
		Restrictions_IsSet = TryGetJsonValue(JsonRestrictionsField, Restrictions_Optional);
		ParseSuccess &= Restrictions_IsSet;
	}

	return ParseSuccess;
}

