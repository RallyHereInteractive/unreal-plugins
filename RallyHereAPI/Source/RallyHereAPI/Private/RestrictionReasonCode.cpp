// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "RestrictionReasonCode.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for ERHAPI_RestrictionReasonCode
FString EnumToString(const ERHAPI_RestrictionReasonCode& Value)
{
	switch (Value)
	{
	case ERHAPI_RestrictionReasonCode::CheatingAutodetected:
		return TEXT("cheating_autodetected");
	case ERHAPI_RestrictionReasonCode::SpeedhackAutodetect:
		return TEXT("speedhack_autodetect");
	case ERHAPI_RestrictionReasonCode::Other:
		return TEXT("other");
	case ERHAPI_RestrictionReasonCode::CheatingObserved:
		return TEXT("cheating_observed");
	case ERHAPI_RestrictionReasonCode::CheatingReportedByPlayer:
		return TEXT("cheating_reported_by_player");
	case ERHAPI_RestrictionReasonCode::Threats:
		return TEXT("threats");
	case ERHAPI_RestrictionReasonCode::Language:
		return TEXT("language");
	case ERHAPI_RestrictionReasonCode::Griefing:
		return TEXT("griefing");
	case ERHAPI_RestrictionReasonCode::Fraud:
		return TEXT("fraud");
	case ERHAPI_RestrictionReasonCode::RevokeFailed:
		return TEXT("revoke_failed");
	case ERHAPI_RestrictionReasonCode::Unknown:
		return TEXT("unknown");
	case ERHAPI_RestrictionReasonCode::Guardian:
		return TEXT("guardian");
	case ERHAPI_RestrictionReasonCode::IssuerProcess:
		return TEXT("issuer_process");
	case ERHAPI_RestrictionReasonCode::AccountMigration:
		return TEXT("account_migration");
	case ERHAPI_RestrictionReasonCode::UserRequest:
		return TEXT("user_request");
	case ERHAPI_RestrictionReasonCode::Maintenance:
		return TEXT("maintenance");
	case ERHAPI_RestrictionReasonCode::PendingDeletion:
		return TEXT("pending_deletion");
	}

	UE_LOG(LogRallyHereAPI, Error, TEXT("Invalid ERHAPI_RestrictionReasonCode::Values Value (%d)"), (int)Value);
	return TEXT("");
}

bool EnumFromString(const FString& EnumAsString, ERHAPI_RestrictionReasonCode& Value)
{
	static TMap<FString, ERHAPI_RestrictionReasonCode> StringToEnum = { 
		{ TEXT("cheating_autodetected"), ERHAPI_RestrictionReasonCode::CheatingAutodetected },
		{ TEXT("speedhack_autodetect"), ERHAPI_RestrictionReasonCode::SpeedhackAutodetect },
		{ TEXT("other"), ERHAPI_RestrictionReasonCode::Other },
		{ TEXT("cheating_observed"), ERHAPI_RestrictionReasonCode::CheatingObserved },
		{ TEXT("cheating_reported_by_player"), ERHAPI_RestrictionReasonCode::CheatingReportedByPlayer },
		{ TEXT("threats"), ERHAPI_RestrictionReasonCode::Threats },
		{ TEXT("language"), ERHAPI_RestrictionReasonCode::Language },
		{ TEXT("griefing"), ERHAPI_RestrictionReasonCode::Griefing },
		{ TEXT("fraud"), ERHAPI_RestrictionReasonCode::Fraud },
		{ TEXT("revoke_failed"), ERHAPI_RestrictionReasonCode::RevokeFailed },
		{ TEXT("unknown"), ERHAPI_RestrictionReasonCode::Unknown },
		{ TEXT("guardian"), ERHAPI_RestrictionReasonCode::Guardian },
		{ TEXT("issuer_process"), ERHAPI_RestrictionReasonCode::IssuerProcess },
		{ TEXT("account_migration"), ERHAPI_RestrictionReasonCode::AccountMigration },
		{ TEXT("user_request"), ERHAPI_RestrictionReasonCode::UserRequest },
		{ TEXT("maintenance"), ERHAPI_RestrictionReasonCode::Maintenance },
		{ TEXT("pending_deletion"), ERHAPI_RestrictionReasonCode::PendingDeletion },	};

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;
	return Found != nullptr;
}

FStringFormatArg ToStringFormatArg(const ERHAPI_RestrictionReasonCode& Value)
{
	return FStringFormatArg(EnumToString(Value));
}

void WriteJsonValue(TSharedRef<TJsonWriter<>>& Writer, const ERHAPI_RestrictionReasonCode& Value)
{
	RallyHereAPI::WriteJsonValue(Writer, EnumToString(Value));
}

bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, ERHAPI_RestrictionReasonCode& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if (EnumFromString(TmpValue, Value))
			return true;
	}
	return false;
}


