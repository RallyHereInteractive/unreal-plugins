// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "EntitlementEventRequest.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_EntitlementEventRequest

void FRHAPI_EntitlementEventRequest::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("action_type"));
	RallyHereAPI::WriteJsonValue(Writer, EnumToString(ActionType));
	if (Status_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("status"));
		RallyHereAPI::WriteJsonValue(Writer, EnumToString(Status_Optional));
	}
	if (PlayerUuid_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("player_uuid"));
		RallyHereAPI::WriteJsonValue(Writer, PlayerUuid_Optional);
	}
	Writer->WriteIdentifierPrefix(TEXT("platform"));
	RallyHereAPI::WriteJsonValue(Writer, EnumToString(Platform));
	Writer->WriteIdentifierPrefix(TEXT("platform_user_id"));
	RallyHereAPI::WriteJsonValue(Writer, PlatformUserId);
	Writer->WriteIdentifierPrefix(TEXT("sku"));
	RallyHereAPI::WriteJsonValue(Writer, Sku);
	if (Quantity_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("quantity"));
		RallyHereAPI::WriteJsonValue(Writer, Quantity_Optional);
	}
	Writer->WriteIdentifierPrefix(TEXT("platform_transaction_id"));
	RallyHereAPI::WriteJsonValue(Writer, PlatformTransactionId);
	if (PlatformData_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("platform_data"));
		RallyHereAPI::WriteJsonValue(Writer, PlatformData_Optional);
	}
	Writer->WriteObjectEnd();
}

bool FRHAPI_EntitlementEventRequest::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	const TSharedPtr<FJsonValue> JsonActionTypeField = (*Object)->TryGetField(TEXT("action_type"));
	ParseSuccess &= JsonActionTypeField.IsValid() && (!JsonActionTypeField->IsNull() &&  TryGetJsonValue(JsonActionTypeField, ActionType));
	const TSharedPtr<FJsonValue> JsonStatusField = (*Object)->TryGetField(TEXT("status"));
	if (JsonStatusField.IsValid())
	{
		Status_IsSet = TryGetJsonValue(JsonStatusField, Status_Optional);
		ParseSuccess &= Status_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonPlayerUuidField = (*Object)->TryGetField(TEXT("player_uuid"));
	if (JsonPlayerUuidField.IsValid())
	{
		PlayerUuid_IsSet = TryGetJsonValue(JsonPlayerUuidField, PlayerUuid_Optional);
		ParseSuccess &= PlayerUuid_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonPlatformField = (*Object)->TryGetField(TEXT("platform"));
	ParseSuccess &= JsonPlatformField.IsValid() && (!JsonPlatformField->IsNull() &&  TryGetJsonValue(JsonPlatformField, Platform));
	const TSharedPtr<FJsonValue> JsonPlatformUserIdField = (*Object)->TryGetField(TEXT("platform_user_id"));
	ParseSuccess &= JsonPlatformUserIdField.IsValid() && (!JsonPlatformUserIdField->IsNull() &&  TryGetJsonValue(JsonPlatformUserIdField, PlatformUserId));
	const TSharedPtr<FJsonValue> JsonSkuField = (*Object)->TryGetField(TEXT("sku"));
	ParseSuccess &= JsonSkuField.IsValid() && (!JsonSkuField->IsNull() &&  TryGetJsonValue(JsonSkuField, Sku));
	const TSharedPtr<FJsonValue> JsonQuantityField = (*Object)->TryGetField(TEXT("quantity"));
	if (JsonQuantityField.IsValid())
	{
		Quantity_IsSet = TryGetJsonValue(JsonQuantityField, Quantity_Optional);
		ParseSuccess &= Quantity_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonPlatformTransactionIdField = (*Object)->TryGetField(TEXT("platform_transaction_id"));
	ParseSuccess &= JsonPlatformTransactionIdField.IsValid() && (!JsonPlatformTransactionIdField->IsNull() &&  TryGetJsonValue(JsonPlatformTransactionIdField, PlatformTransactionId));
	const TSharedPtr<FJsonValue> JsonPlatformDataField = (*Object)->TryGetField(TEXT("platform_data"));
	if (JsonPlatformDataField.IsValid())
	{
		PlatformData_IsSet = TryGetJsonValue(JsonPlatformDataField, PlatformData_Optional);
		ParseSuccess &= PlatformData_IsSet;
	}

	return ParseSuccess;
}

