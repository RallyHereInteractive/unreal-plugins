// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "PlatformEntitlement.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_PlatformEntitlement

void FRHAPI_PlatformEntitlement::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("platform_sku"));
	RallyHereAPI::WriteJsonValue(Writer, PlatformSku);
	Writer->WriteIdentifierPrefix(TEXT("platform_entitlement_id"));
	RallyHereAPI::WriteJsonValue(Writer, PlatformEntitlementId);
	if (Quantity_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("quantity"));
		RallyHereAPI::WriteJsonValue(Writer, Quantity_Optional);
	}
	if (Status_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("status"));
		RallyHereAPI::WriteJsonValue(Writer, EnumToString(Status_Optional));
	}
	if (ErrorCode_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("error_code"));
		RallyHereAPI::WriteJsonValue(Writer, EnumToString(ErrorCode_Optional));
	}
	if (OrderId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("order_id"));
		RallyHereAPI::WriteJsonValue(Writer, OrderId_Optional);
	}
	Writer->WriteObjectEnd();
}

bool FRHAPI_PlatformEntitlement::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	const TSharedPtr<FJsonValue> JsonPlatformSkuField = (*Object)->TryGetField(TEXT("platform_sku"));
	const bool PlatformSku_IsValid = JsonPlatformSkuField.IsValid() && (!JsonPlatformSkuField->IsNull() && TryGetJsonValue(JsonPlatformSkuField, PlatformSku));
	ParseSuccess &= PlatformSku_IsValid; 
	const TSharedPtr<FJsonValue> JsonPlatformEntitlementIdField = (*Object)->TryGetField(TEXT("platform_entitlement_id"));
	const bool PlatformEntitlementId_IsValid = JsonPlatformEntitlementIdField.IsValid() && (!JsonPlatformEntitlementIdField->IsNull() && TryGetJsonValue(JsonPlatformEntitlementIdField, PlatformEntitlementId));
	ParseSuccess &= PlatformEntitlementId_IsValid; 
	const TSharedPtr<FJsonValue> JsonQuantityField = (*Object)->TryGetField(TEXT("quantity"));
	if (JsonQuantityField.IsValid())
	{
		Quantity_IsSet = TryGetJsonValue(JsonQuantityField, Quantity_Optional);
		ParseSuccess &= Quantity_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonStatusField = (*Object)->TryGetField(TEXT("status"));
	if (JsonStatusField.IsValid())
	{
		Status_IsSet = TryGetJsonValue(JsonStatusField, Status_Optional);
		ParseSuccess &= Status_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonErrorCodeField = (*Object)->TryGetField(TEXT("error_code"));
	if (JsonErrorCodeField.IsValid())
	{
		ErrorCode_IsSet = TryGetJsonValue(JsonErrorCodeField, ErrorCode_Optional);
		ParseSuccess &= ErrorCode_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonOrderIdField = (*Object)->TryGetField(TEXT("order_id"));
	if (JsonOrderIdField.IsValid())
	{
		OrderId_IsSet = TryGetJsonValue(JsonOrderIdField, OrderId_Optional);
		ParseSuccess &= OrderId_IsSet;
	}

	return ParseSuccess;
}

