// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "InventoryRecord.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_InventoryRecord

void FRHAPI_InventoryRecord::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("inventory_id"));
	RallyHereAPI::WriteJsonValue(Writer, InventoryId);
	Writer->WriteIdentifierPrefix(TEXT("type"));
	RallyHereAPI::WriteJsonValue(Writer, EnumToString(Type));
	if (LegacyInventoryId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("legacy_inventory_id"));
		RallyHereAPI::WriteJsonValue(Writer, LegacyInventoryId_Optional);
	}
	if (Bucket_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("bucket"));
		RallyHereAPI::WriteJsonValue(Writer, EnumToString(Bucket_Optional));
	}
	Writer->WriteIdentifierPrefix(TEXT("count"));
	RallyHereAPI::WriteJsonValue(Writer, Count);
	Writer->WriteIdentifierPrefix(TEXT("acquired"));
	RallyHereAPI::WriteJsonValue(Writer, Acquired);
	if (Expires_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("expires"));
		RallyHereAPI::WriteJsonValue(Writer, Expires_Optional);
	}
	if (CustomData_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("custom_data"));
		RallyHereAPI::WriteJsonValue(Writer, CustomData_Optional);
	}
	Writer->WriteObjectEnd();
}

bool FRHAPI_InventoryRecord::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	const TSharedPtr<FJsonValue> JsonInventoryIdField = (*Object)->TryGetField(TEXT("inventory_id"));
	const bool InventoryId_IsValid = JsonInventoryIdField.IsValid() && (!JsonInventoryIdField->IsNull() && TryGetJsonValue(JsonInventoryIdField, InventoryId));
	ParseSuccess &= InventoryId_IsValid; 
	const TSharedPtr<FJsonValue> JsonTypeField = (*Object)->TryGetField(TEXT("type"));
	const bool Type_IsValid = JsonTypeField.IsValid() && (!JsonTypeField->IsNull() && TryGetJsonValue(JsonTypeField, Type));
	ParseSuccess &= Type_IsValid; 
	const TSharedPtr<FJsonValue> JsonLegacyInventoryIdField = (*Object)->TryGetField(TEXT("legacy_inventory_id"));
	if (JsonLegacyInventoryIdField.IsValid())
	{
		LegacyInventoryId_IsSet = TryGetJsonValue(JsonLegacyInventoryIdField, LegacyInventoryId_Optional);
		ParseSuccess &= LegacyInventoryId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonBucketField = (*Object)->TryGetField(TEXT("bucket"));
	if (JsonBucketField.IsValid())
	{
		Bucket_IsSet = TryGetJsonValue(JsonBucketField, Bucket_Optional);
		ParseSuccess &= Bucket_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonCountField = (*Object)->TryGetField(TEXT("count"));
	const bool Count_IsValid = JsonCountField.IsValid() && (!JsonCountField->IsNull() && TryGetJsonValue(JsonCountField, Count));
	ParseSuccess &= Count_IsValid; 
	const TSharedPtr<FJsonValue> JsonAcquiredField = (*Object)->TryGetField(TEXT("acquired"));
	const bool Acquired_IsValid = JsonAcquiredField.IsValid() && (!JsonAcquiredField->IsNull() && TryGetJsonValue(JsonAcquiredField, Acquired));
	ParseSuccess &= Acquired_IsValid; 
	const TSharedPtr<FJsonValue> JsonExpiresField = (*Object)->TryGetField(TEXT("expires"));
	if (JsonExpiresField.IsValid())
	{
		Expires_IsSet = TryGetJsonValue(JsonExpiresField, Expires_Optional);
		ParseSuccess &= Expires_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonCustomDataField = (*Object)->TryGetField(TEXT("custom_data"));
	if (JsonCustomDataField.IsValid())
	{
		CustomData_IsSet = TryGetJsonValue(JsonCustomDataField, CustomData_Optional);
		ParseSuccess &= CustomData_IsSet;
	}

	return ParseSuccess;
}

