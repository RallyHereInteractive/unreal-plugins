// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "BrowserSessionInfo.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_BrowserSessionInfo

void FRHAPI_BrowserSessionInfo::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("session_id"));
	RallyHereAPI::WriteJsonValue(Writer, SessionId);
	if (InstanceHealth_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("instance_health"));
		RallyHereAPI::WriteJsonValue(Writer, EnumToString(InstanceHealth_Optional));
	}
	if (PlayerCount_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("player_count"));
		RallyHereAPI::WriteJsonValue(Writer, PlayerCount_Optional);
	}
	if (MaxPlayerCount_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("max_player_count"));
		RallyHereAPI::WriteJsonValue(Writer, MaxPlayerCount_Optional);
	}
	if (CustomData_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("custom_data"));
		RallyHereAPI::WriteJsonValue(Writer, CustomData_Optional);
	}
	Writer->WriteObjectEnd();
}

bool FRHAPI_BrowserSessionInfo::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	const TSharedPtr<FJsonValue> JsonSessionIdField = (*Object)->TryGetField(TEXT("session_id"));
	const bool SessionId_IsValid = JsonSessionIdField.IsValid() && (!JsonSessionIdField->IsNull() && TryGetJsonValue(JsonSessionIdField, SessionId));
	ParseSuccess &= SessionId_IsValid; 
	const TSharedPtr<FJsonValue> JsonInstanceHealthField = (*Object)->TryGetField(TEXT("instance_health"));
	if (JsonInstanceHealthField.IsValid())
	{
		InstanceHealth_IsSet = TryGetJsonValue(JsonInstanceHealthField, InstanceHealth_Optional);
		ParseSuccess &= InstanceHealth_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonPlayerCountField = (*Object)->TryGetField(TEXT("player_count"));
	if (JsonPlayerCountField.IsValid())
	{
		PlayerCount_IsSet = TryGetJsonValue(JsonPlayerCountField, PlayerCount_Optional);
		ParseSuccess &= PlayerCount_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonMaxPlayerCountField = (*Object)->TryGetField(TEXT("max_player_count"));
	if (JsonMaxPlayerCountField.IsValid())
	{
		MaxPlayerCount_IsSet = TryGetJsonValue(JsonMaxPlayerCountField, MaxPlayerCount_Optional);
		ParseSuccess &= MaxPlayerCount_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonCustomDataField = (*Object)->TryGetField(TEXT("custom_data"));
	if (JsonCustomDataField.IsValid())
	{
		CustomData_IsSet = TryGetJsonValue(JsonCustomDataField, CustomData_Optional);
		ParseSuccess &= CustomData_IsSet;
	}

	return ParseSuccess;
}

