// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "EntitlementEvent.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_EntitlementEvent

void FRHAPI_EntitlementEvent::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("event_id"));
	RallyHereAPI::WriteJsonValue(Writer, EventId);
	Writer->WriteIdentifierPrefix(TEXT("action_type"));
	RallyHereAPI::WriteJsonValue(Writer, EnumToString(ActionType));
	if (EntitlementType_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("entitlement_type"));
		RallyHereAPI::WriteJsonValue(Writer, EnumToString(EntitlementType_Optional));
	}
	Writer->WriteIdentifierPrefix(TEXT("status"));
	RallyHereAPI::WriteJsonValue(Writer, EnumToString(Status));
	Writer->WriteIdentifierPrefix(TEXT("player_uuid"));
	RallyHereAPI::WriteJsonValue(Writer, PlayerUuid);
	if (PlayerId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("player_id"));
		RallyHereAPI::WriteJsonValue(Writer, PlayerId_Optional);
	}
	Writer->WriteIdentifierPrefix(TEXT("platform"));
	RallyHereAPI::WriteJsonValue(Writer, EnumToString(Platform));
	Writer->WriteIdentifierPrefix(TEXT("platform_user_id"));
	RallyHereAPI::WriteJsonValue(Writer, PlatformUserId);
	Writer->WriteIdentifierPrefix(TEXT("sku"));
	RallyHereAPI::WriteJsonValue(Writer, Sku);
	Writer->WriteIdentifierPrefix(TEXT("quantity"));
	RallyHereAPI::WriteJsonValue(Writer, Quantity);
	if (PlatformTransactionId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("platform_transaction_id"));
		RallyHereAPI::WriteJsonValue(Writer, PlatformTransactionId_Optional);
	}
	if (PlatformData_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("platform_data"));
		RallyHereAPI::WriteJsonValue(Writer, PlatformData_Optional);
	}
	if (OrderId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("order_id"));
		RallyHereAPI::WriteJsonValue(Writer, OrderId_Optional);
	}
	if (LootId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("loot_id"));
		RallyHereAPI::WriteJsonValue(Writer, LootId_Optional);
	}
	if (KeyClaimUuid_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("key_claim_uuid"));
		RallyHereAPI::WriteJsonValue(Writer, KeyClaimUuid_Optional);
	}
	Writer->WriteIdentifierPrefix(TEXT("created"));
	RallyHereAPI::WriteJsonValue(Writer, Created);
	Writer->WriteIdentifierPrefix(TEXT("last_modified"));
	RallyHereAPI::WriteJsonValue(Writer, LastModified);
	Writer->WriteObjectEnd();
}

bool FRHAPI_EntitlementEvent::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	const TSharedPtr<FJsonValue> JsonEventIdField = (*Object)->TryGetField(TEXT("event_id"));
	const bool EventId_IsValid = JsonEventIdField.IsValid() && (!JsonEventIdField->IsNull() && TryGetJsonValue(JsonEventIdField, EventId));
	ParseSuccess &= EventId_IsValid; 
	const TSharedPtr<FJsonValue> JsonActionTypeField = (*Object)->TryGetField(TEXT("action_type"));
	const bool ActionType_IsValid = JsonActionTypeField.IsValid() && (!JsonActionTypeField->IsNull() && TryGetJsonValue(JsonActionTypeField, ActionType));
	ParseSuccess &= ActionType_IsValid; 
	const TSharedPtr<FJsonValue> JsonEntitlementTypeField = (*Object)->TryGetField(TEXT("entitlement_type"));
	if (JsonEntitlementTypeField.IsValid())
	{
		EntitlementType_IsSet = TryGetJsonValue(JsonEntitlementTypeField, EntitlementType_Optional);
		ParseSuccess &= EntitlementType_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonStatusField = (*Object)->TryGetField(TEXT("status"));
	const bool Status_IsValid = JsonStatusField.IsValid() && (!JsonStatusField->IsNull() && TryGetJsonValue(JsonStatusField, Status));
	ParseSuccess &= Status_IsValid; 
	const TSharedPtr<FJsonValue> JsonPlayerUuidField = (*Object)->TryGetField(TEXT("player_uuid"));
	const bool PlayerUuid_IsValid = JsonPlayerUuidField.IsValid() && (!JsonPlayerUuidField->IsNull() && TryGetJsonValue(JsonPlayerUuidField, PlayerUuid));
	ParseSuccess &= PlayerUuid_IsValid; 
	const TSharedPtr<FJsonValue> JsonPlayerIdField = (*Object)->TryGetField(TEXT("player_id"));
	if (JsonPlayerIdField.IsValid())
	{
		PlayerId_IsSet = TryGetJsonValue(JsonPlayerIdField, PlayerId_Optional);
		ParseSuccess &= PlayerId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonPlatformField = (*Object)->TryGetField(TEXT("platform"));
	const bool Platform_IsValid = JsonPlatformField.IsValid() && (!JsonPlatformField->IsNull() && TryGetJsonValue(JsonPlatformField, Platform));
	ParseSuccess &= Platform_IsValid; 
	const TSharedPtr<FJsonValue> JsonPlatformUserIdField = (*Object)->TryGetField(TEXT("platform_user_id"));
	const bool PlatformUserId_IsValid = JsonPlatformUserIdField.IsValid() && (!JsonPlatformUserIdField->IsNull() && TryGetJsonValue(JsonPlatformUserIdField, PlatformUserId));
	ParseSuccess &= PlatformUserId_IsValid; 
	const TSharedPtr<FJsonValue> JsonSkuField = (*Object)->TryGetField(TEXT("sku"));
	const bool Sku_IsValid = JsonSkuField.IsValid() && (!JsonSkuField->IsNull() && TryGetJsonValue(JsonSkuField, Sku));
	ParseSuccess &= Sku_IsValid; 
	const TSharedPtr<FJsonValue> JsonQuantityField = (*Object)->TryGetField(TEXT("quantity"));
	const bool Quantity_IsValid = JsonQuantityField.IsValid() && (!JsonQuantityField->IsNull() && TryGetJsonValue(JsonQuantityField, Quantity));
	ParseSuccess &= Quantity_IsValid; 
	const TSharedPtr<FJsonValue> JsonPlatformTransactionIdField = (*Object)->TryGetField(TEXT("platform_transaction_id"));
	if (JsonPlatformTransactionIdField.IsValid())
	{
		PlatformTransactionId_IsSet = TryGetJsonValue(JsonPlatformTransactionIdField, PlatformTransactionId_Optional);
		ParseSuccess &= PlatformTransactionId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonPlatformDataField = (*Object)->TryGetField(TEXT("platform_data"));
	if (JsonPlatformDataField.IsValid())
	{
		PlatformData_IsSet = TryGetJsonValue(JsonPlatformDataField, PlatformData_Optional);
		ParseSuccess &= PlatformData_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonOrderIdField = (*Object)->TryGetField(TEXT("order_id"));
	if (JsonOrderIdField.IsValid())
	{
		OrderId_IsSet = TryGetJsonValue(JsonOrderIdField, OrderId_Optional);
		ParseSuccess &= OrderId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonLootIdField = (*Object)->TryGetField(TEXT("loot_id"));
	if (JsonLootIdField.IsValid())
	{
		LootId_IsSet = TryGetJsonValue(JsonLootIdField, LootId_Optional);
		ParseSuccess &= LootId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonKeyClaimUuidField = (*Object)->TryGetField(TEXT("key_claim_uuid"));
	if (JsonKeyClaimUuidField.IsValid())
	{
		KeyClaimUuid_IsSet = TryGetJsonValue(JsonKeyClaimUuidField, KeyClaimUuid_Optional);
		ParseSuccess &= KeyClaimUuid_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonCreatedField = (*Object)->TryGetField(TEXT("created"));
	const bool Created_IsValid = JsonCreatedField.IsValid() && (!JsonCreatedField->IsNull() && TryGetJsonValue(JsonCreatedField, Created));
	ParseSuccess &= Created_IsValid; 
	const TSharedPtr<FJsonValue> JsonLastModifiedField = (*Object)->TryGetField(TEXT("last_modified"));
	const bool LastModified_IsValid = JsonLastModifiedField.IsValid() && (!JsonLastModifiedField->IsNull() && TryGetJsonValue(JsonLastModifiedField, LastModified));
	ParseSuccess &= LastModified_IsValid; 

	return ParseSuccess;
}

