// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "RallyHereEvent.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_RallyHereEvent

void FRHAPI_RallyHereEvent::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("event_uuid"));
	RallyHereAPI::WriteJsonValue(Writer, EventUuid);
	Writer->WriteIdentifierPrefix(TEXT("event_name"));
	RallyHereAPI::WriteJsonValue(Writer, EventName);
	Writer->WriteIdentifierPrefix(TEXT("event_timestamp"));
	RallyHereAPI::WriteJsonValue(Writer, EventTimestamp);
	Writer->WriteIdentifierPrefix(TEXT("event_params"));
	RallyHereAPI::WriteJsonValue(Writer, EventParams);
	if (CustomData_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("custom_data"));
		RallyHereAPI::WriteJsonValue(Writer, CustomData_Optional);
	}
	if (UserId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("user_id"));
		if (UserId_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, UserId_Optional);
	}
	if (SessionId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("session_id"));
		if (SessionId_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, SessionId_Optional);
	}
	if (CorrelationId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("correlation_id"));
		if (CorrelationId_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, CorrelationId_Optional);
	}
	if (ClientIp_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("client_ip"));
		if (ClientIp_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, ClientIp_Optional);
	}
	Writer->WriteObjectEnd();
}

bool FRHAPI_RallyHereEvent::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	const TSharedPtr<FJsonValue> JsonEventUuidField = (*Object)->TryGetField(TEXT("event_uuid"));
	const bool EventUuid_IsValid = JsonEventUuidField.IsValid() && (!JsonEventUuidField->IsNull() && TryGetJsonValue(JsonEventUuidField, EventUuid));
	ParseSuccess &= EventUuid_IsValid; 
	const TSharedPtr<FJsonValue> JsonEventNameField = (*Object)->TryGetField(TEXT("event_name"));
	const bool EventName_IsValid = JsonEventNameField.IsValid() && (!JsonEventNameField->IsNull() && TryGetJsonValue(JsonEventNameField, EventName));
	ParseSuccess &= EventName_IsValid; 
	const TSharedPtr<FJsonValue> JsonEventTimestampField = (*Object)->TryGetField(TEXT("event_timestamp"));
	const bool EventTimestamp_IsValid = JsonEventTimestampField.IsValid() && (!JsonEventTimestampField->IsNull() && TryGetJsonValue(JsonEventTimestampField, EventTimestamp));
	ParseSuccess &= EventTimestamp_IsValid; 
	const TSharedPtr<FJsonValue> JsonEventParamsField = (*Object)->TryGetField(TEXT("event_params"));
	const bool EventParams_IsValid = JsonEventParamsField.IsValid() && (!JsonEventParamsField->IsNull() && TryGetJsonValue(JsonEventParamsField, EventParams));
	ParseSuccess &= EventParams_IsValid; 
	const TSharedPtr<FJsonValue> JsonCustomDataField = (*Object)->TryGetField(TEXT("custom_data"));
	if (JsonCustomDataField.IsValid())
	{
		CustomData_IsSet = TryGetJsonValue(JsonCustomDataField, CustomData_Optional);
		ParseSuccess &= CustomData_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonUserIdField = (*Object)->TryGetField(TEXT("user_id"));
	if (JsonUserIdField.IsValid())
	{
		UserId_IsNull = JsonUserIdField->IsNull();
		UserId_IsSet = UserId_IsNull || TryGetJsonValue(JsonUserIdField, UserId_Optional);
		ParseSuccess &= UserId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonSessionIdField = (*Object)->TryGetField(TEXT("session_id"));
	if (JsonSessionIdField.IsValid())
	{
		SessionId_IsNull = JsonSessionIdField->IsNull();
		SessionId_IsSet = SessionId_IsNull || TryGetJsonValue(JsonSessionIdField, SessionId_Optional);
		ParseSuccess &= SessionId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonCorrelationIdField = (*Object)->TryGetField(TEXT("correlation_id"));
	if (JsonCorrelationIdField.IsValid())
	{
		CorrelationId_IsNull = JsonCorrelationIdField->IsNull();
		CorrelationId_IsSet = CorrelationId_IsNull || TryGetJsonValue(JsonCorrelationIdField, CorrelationId_Optional);
		ParseSuccess &= CorrelationId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonClientIpField = (*Object)->TryGetField(TEXT("client_ip"));
	if (JsonClientIpField.IsValid())
	{
		ClientIp_IsNull = JsonClientIpField->IsNull();
		ClientIp_IsSet = ClientIp_IsNull || TryGetJsonValue(JsonClientIpField, ClientIp_Optional);
		ParseSuccess &= ClientIp_IsSet;
	}

	return ParseSuccess;
}

