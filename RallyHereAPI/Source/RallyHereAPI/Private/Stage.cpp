// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "Stage.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_Stage

void FRHAPI_Stage::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
	Writer->WriteObjectStart();
	if (Blob_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("blob"));
		RallyHereAPI::WriteJsonValue(Writer, Blob_Optional);
	}
	if (GameVersion_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("game_version"));
		if (GameVersion_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, GameVersion_Optional);
	}
	if (V_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("v"));
		if (V_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, V_Optional);
	}
	if (Type1_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("type_1"));
		if (Type1_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Type1_Optional);
	}
	if (Type2_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("type_2"));
		if (Type2_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Type2_Optional);
	}
	if (Type3_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("type_3"));
		if (Type3_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Type3_Optional);
	}
	if (Type4_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("type_4"));
		if (Type4_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Type4_Optional);
	}
	if (Index_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("index"));
		RallyHereAPI::WriteJsonValue(Writer, Index_Optional);
	}
	if (MatchId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("match_id"));
		if (MatchId_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, MatchId_Optional);
	}
	if (Stat1_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("stat_1"));
		if (Stat1_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Stat1_Optional);
	}
	if (Stat2_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("stat_2"));
		if (Stat2_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Stat2_Optional);
	}
	if (Stat3_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("stat_3"));
		if (Stat3_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Stat3_Optional);
	}
	if (Stat4_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("stat_4"));
		if (Stat4_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Stat4_Optional);
	}
	if (MmrInternal_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("mmr_internal"));
		if (MmrInternal_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, MmrInternal_Optional);
	}
	if (MmrVis_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("mmr_vis"));
		if (MmrVis_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, MmrVis_Optional);
	}
	Writer->WriteIdentifierPrefix(TEXT("stage_id"));
	RallyHereAPI::WriteJsonValue(Writer, StageId);
	if (OwnerEntityType_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("owner_entity_type"));
		if (OwnerEntityType_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, EnumToString(OwnerEntityType_Optional));
	}
	if (OwnerEntityId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("owner_entity_id"));
		if (OwnerEntityId_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, OwnerEntityId_Optional);
	}
	if (MmCount_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("mm_count"));
		RallyHereAPI::WriteJsonValue(Writer, MmCount_Optional);
	}
	if (MmrRangeMin_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("mmr_range_min"));
		if (MmrRangeMin_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, MmrRangeMin_Optional);
	}
	if (MmrRangeMax_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("mmr_range_max"));
		if (MmrRangeMax_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, MmrRangeMax_Optional);
	}
	Writer->WriteIdentifierPrefix(TEXT("created"));
	RallyHereAPI::WriteJsonValue(Writer, Created);
	Writer->WriteIdentifierPrefix(TEXT("modified"));
	RallyHereAPI::WriteJsonValue(Writer, Modified);
	Writer->WriteObjectEnd();
}

bool FRHAPI_Stage::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	const TSharedPtr<FJsonValue> JsonBlobField = (*Object)->TryGetField(TEXT("blob"));
	if (JsonBlobField.IsValid())
	{
		Blob_IsSet = TryGetJsonValue(JsonBlobField, Blob_Optional);
		ParseSuccess &= Blob_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonGameVersionField = (*Object)->TryGetField(TEXT("game_version"));
	if (JsonGameVersionField.IsValid())
	{
		GameVersion_IsNull = JsonGameVersionField->IsNull();
		GameVersion_IsSet = GameVersion_IsNull || TryGetJsonValue(JsonGameVersionField, GameVersion_Optional);
		ParseSuccess &= GameVersion_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonVField = (*Object)->TryGetField(TEXT("v"));
	if (JsonVField.IsValid())
	{
		V_IsNull = JsonVField->IsNull();
		V_IsSet = V_IsNull || TryGetJsonValue(JsonVField, V_Optional);
		ParseSuccess &= V_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonType1Field = (*Object)->TryGetField(TEXT("type_1"));
	if (JsonType1Field.IsValid())
	{
		Type1_IsNull = JsonType1Field->IsNull();
		Type1_IsSet = Type1_IsNull || TryGetJsonValue(JsonType1Field, Type1_Optional);
		ParseSuccess &= Type1_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonType2Field = (*Object)->TryGetField(TEXT("type_2"));
	if (JsonType2Field.IsValid())
	{
		Type2_IsNull = JsonType2Field->IsNull();
		Type2_IsSet = Type2_IsNull || TryGetJsonValue(JsonType2Field, Type2_Optional);
		ParseSuccess &= Type2_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonType3Field = (*Object)->TryGetField(TEXT("type_3"));
	if (JsonType3Field.IsValid())
	{
		Type3_IsNull = JsonType3Field->IsNull();
		Type3_IsSet = Type3_IsNull || TryGetJsonValue(JsonType3Field, Type3_Optional);
		ParseSuccess &= Type3_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonType4Field = (*Object)->TryGetField(TEXT("type_4"));
	if (JsonType4Field.IsValid())
	{
		Type4_IsNull = JsonType4Field->IsNull();
		Type4_IsSet = Type4_IsNull || TryGetJsonValue(JsonType4Field, Type4_Optional);
		ParseSuccess &= Type4_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonIndexField = (*Object)->TryGetField(TEXT("index"));
	if (JsonIndexField.IsValid())
	{
		Index_IsSet = TryGetJsonValue(JsonIndexField, Index_Optional);
		ParseSuccess &= Index_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonMatchIdField = (*Object)->TryGetField(TEXT("match_id"));
	if (JsonMatchIdField.IsValid())
	{
		MatchId_IsNull = JsonMatchIdField->IsNull();
		MatchId_IsSet = MatchId_IsNull || TryGetJsonValue(JsonMatchIdField, MatchId_Optional);
		ParseSuccess &= MatchId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonStat1Field = (*Object)->TryGetField(TEXT("stat_1"));
	if (JsonStat1Field.IsValid())
	{
		Stat1_IsNull = JsonStat1Field->IsNull();
		Stat1_IsSet = Stat1_IsNull || TryGetJsonValue(JsonStat1Field, Stat1_Optional);
		ParseSuccess &= Stat1_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonStat2Field = (*Object)->TryGetField(TEXT("stat_2"));
	if (JsonStat2Field.IsValid())
	{
		Stat2_IsNull = JsonStat2Field->IsNull();
		Stat2_IsSet = Stat2_IsNull || TryGetJsonValue(JsonStat2Field, Stat2_Optional);
		ParseSuccess &= Stat2_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonStat3Field = (*Object)->TryGetField(TEXT("stat_3"));
	if (JsonStat3Field.IsValid())
	{
		Stat3_IsNull = JsonStat3Field->IsNull();
		Stat3_IsSet = Stat3_IsNull || TryGetJsonValue(JsonStat3Field, Stat3_Optional);
		ParseSuccess &= Stat3_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonStat4Field = (*Object)->TryGetField(TEXT("stat_4"));
	if (JsonStat4Field.IsValid())
	{
		Stat4_IsNull = JsonStat4Field->IsNull();
		Stat4_IsSet = Stat4_IsNull || TryGetJsonValue(JsonStat4Field, Stat4_Optional);
		ParseSuccess &= Stat4_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonMmrInternalField = (*Object)->TryGetField(TEXT("mmr_internal"));
	if (JsonMmrInternalField.IsValid())
	{
		MmrInternal_IsNull = JsonMmrInternalField->IsNull();
		MmrInternal_IsSet = MmrInternal_IsNull || TryGetJsonValue(JsonMmrInternalField, MmrInternal_Optional);
		ParseSuccess &= MmrInternal_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonMmrVisField = (*Object)->TryGetField(TEXT("mmr_vis"));
	if (JsonMmrVisField.IsValid())
	{
		MmrVis_IsNull = JsonMmrVisField->IsNull();
		MmrVis_IsSet = MmrVis_IsNull || TryGetJsonValue(JsonMmrVisField, MmrVis_Optional);
		ParseSuccess &= MmrVis_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonStageIdField = (*Object)->TryGetField(TEXT("stage_id"));
	const bool StageId_IsValid = JsonStageIdField.IsValid() && (!JsonStageIdField->IsNull() && TryGetJsonValue(JsonStageIdField, StageId));
	ParseSuccess &= StageId_IsValid; 
	const TSharedPtr<FJsonValue> JsonOwnerEntityTypeField = (*Object)->TryGetField(TEXT("owner_entity_type"));
	if (JsonOwnerEntityTypeField.IsValid())
	{
		OwnerEntityType_IsNull = JsonOwnerEntityTypeField->IsNull();
		OwnerEntityType_IsSet = OwnerEntityType_IsNull || TryGetJsonValue(JsonOwnerEntityTypeField, OwnerEntityType_Optional);
		ParseSuccess &= OwnerEntityType_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonOwnerEntityIdField = (*Object)->TryGetField(TEXT("owner_entity_id"));
	if (JsonOwnerEntityIdField.IsValid())
	{
		OwnerEntityId_IsNull = JsonOwnerEntityIdField->IsNull();
		OwnerEntityId_IsSet = OwnerEntityId_IsNull || TryGetJsonValue(JsonOwnerEntityIdField, OwnerEntityId_Optional);
		ParseSuccess &= OwnerEntityId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonMmCountField = (*Object)->TryGetField(TEXT("mm_count"));
	if (JsonMmCountField.IsValid())
	{
		MmCount_IsSet = TryGetJsonValue(JsonMmCountField, MmCount_Optional);
		ParseSuccess &= MmCount_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonMmrRangeMinField = (*Object)->TryGetField(TEXT("mmr_range_min"));
	if (JsonMmrRangeMinField.IsValid())
	{
		MmrRangeMin_IsNull = JsonMmrRangeMinField->IsNull();
		MmrRangeMin_IsSet = MmrRangeMin_IsNull || TryGetJsonValue(JsonMmrRangeMinField, MmrRangeMin_Optional);
		ParseSuccess &= MmrRangeMin_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonMmrRangeMaxField = (*Object)->TryGetField(TEXT("mmr_range_max"));
	if (JsonMmrRangeMaxField.IsValid())
	{
		MmrRangeMax_IsNull = JsonMmrRangeMaxField->IsNull();
		MmrRangeMax_IsSet = MmrRangeMax_IsNull || TryGetJsonValue(JsonMmrRangeMaxField, MmrRangeMax_Optional);
		ParseSuccess &= MmrRangeMax_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonCreatedField = (*Object)->TryGetField(TEXT("created"));
	const bool Created_IsValid = JsonCreatedField.IsValid() && (!JsonCreatedField->IsNull() && TryGetJsonValue(JsonCreatedField, Created));
	ParseSuccess &= Created_IsValid; 
	const TSharedPtr<FJsonValue> JsonModifiedField = (*Object)->TryGetField(TEXT("modified"));
	const bool Modified_IsValid = JsonModifiedField.IsValid() && (!JsonModifiedField->IsNull() && TryGetJsonValue(JsonModifiedField, Modified));
	ParseSuccess &= Modified_IsValid; 

	return ParseSuccess;
}

