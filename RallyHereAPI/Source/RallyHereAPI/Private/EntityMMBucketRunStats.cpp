// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "EntityMMBucketRunStats.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_EntityMMBucketRunStats

void FRHAPI_EntityMMBucketRunStats::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
	Writer->WriteObjectStart();
	if (Type1_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("type_1"));
		if (Type1_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Type1_Optional);
	}
	if (Type2_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("type_2"));
		if (Type2_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Type2_Optional);
	}
	if (Type3_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("type_3"));
		if (Type3_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Type3_Optional);
	}
	if (Type4_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("type_4"));
		if (Type4_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Type4_Optional);
	}
	Writer->WriteIdentifierPrefix(TEXT("entity_type"));
	RallyHereAPI::WriteJsonValue(Writer, EnumToString(EntityType));
	Writer->WriteIdentifierPrefix(TEXT("entity_id"));
	RallyHereAPI::WriteJsonValue(Writer, EntityId);
	if (StageWins_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("stage_wins"));
		RallyHereAPI::WriteJsonValue(Writer, StageWins_Optional);
	}
	if (StageLosses_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("stage_losses"));
		RallyHereAPI::WriteJsonValue(Writer, StageLosses_Optional);
	}
	if (StageIncompletes_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("stage_incompletes"));
		RallyHereAPI::WriteJsonValue(Writer, StageIncompletes_Optional);
	}
	if (RunWins_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("run_wins"));
		RallyHereAPI::WriteJsonValue(Writer, RunWins_Optional);
	}
	if (RunLosses_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("run_losses"));
		RallyHereAPI::WriteJsonValue(Writer, RunLosses_Optional);
	}
	if (RunCount_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("run_count"));
		RallyHereAPI::WriteJsonValue(Writer, RunCount_Optional);
	}
	if (PlacementsComplete_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("placements_complete"));
		RallyHereAPI::WriteJsonValue(Writer, PlacementsComplete_Optional);
	}
	if (MmrInternal_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("mmr_internal"));
		RallyHereAPI::WriteJsonValue(Writer, MmrInternal_Optional);
	}
	if (MmrVis_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("mmr_vis"));
		RallyHereAPI::WriteJsonValue(Writer, MmrVis_Optional);
	}
	Writer->WriteIdentifierPrefix(TEXT("created"));
	RallyHereAPI::WriteJsonValue(Writer, Created);
	Writer->WriteIdentifierPrefix(TEXT("modified"));
	RallyHereAPI::WriteJsonValue(Writer, Modified);
	Writer->WriteObjectEnd();
}

bool FRHAPI_EntityMMBucketRunStats::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	const TSharedPtr<FJsonValue> JsonType1Field = (*Object)->TryGetField(TEXT("type_1"));
	if (JsonType1Field.IsValid())
	{
		Type1_IsNull = JsonType1Field->IsNull();
		Type1_IsSet = Type1_IsNull || TryGetJsonValue(JsonType1Field, Type1_Optional);
		ParseSuccess &= Type1_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonType2Field = (*Object)->TryGetField(TEXT("type_2"));
	if (JsonType2Field.IsValid())
	{
		Type2_IsNull = JsonType2Field->IsNull();
		Type2_IsSet = Type2_IsNull || TryGetJsonValue(JsonType2Field, Type2_Optional);
		ParseSuccess &= Type2_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonType3Field = (*Object)->TryGetField(TEXT("type_3"));
	if (JsonType3Field.IsValid())
	{
		Type3_IsNull = JsonType3Field->IsNull();
		Type3_IsSet = Type3_IsNull || TryGetJsonValue(JsonType3Field, Type3_Optional);
		ParseSuccess &= Type3_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonType4Field = (*Object)->TryGetField(TEXT("type_4"));
	if (JsonType4Field.IsValid())
	{
		Type4_IsNull = JsonType4Field->IsNull();
		Type4_IsSet = Type4_IsNull || TryGetJsonValue(JsonType4Field, Type4_Optional);
		ParseSuccess &= Type4_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonEntityTypeField = (*Object)->TryGetField(TEXT("entity_type"));
	const bool EntityType_IsValid = JsonEntityTypeField.IsValid() && (!JsonEntityTypeField->IsNull() && TryGetJsonValue(JsonEntityTypeField, EntityType));
	ParseSuccess &= EntityType_IsValid; 
	const TSharedPtr<FJsonValue> JsonEntityIdField = (*Object)->TryGetField(TEXT("entity_id"));
	const bool EntityId_IsValid = JsonEntityIdField.IsValid() && (!JsonEntityIdField->IsNull() && TryGetJsonValue(JsonEntityIdField, EntityId));
	ParseSuccess &= EntityId_IsValid; 
	const TSharedPtr<FJsonValue> JsonStageWinsField = (*Object)->TryGetField(TEXT("stage_wins"));
	if (JsonStageWinsField.IsValid())
	{
		StageWins_IsSet = TryGetJsonValue(JsonStageWinsField, StageWins_Optional);
		ParseSuccess &= StageWins_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonStageLossesField = (*Object)->TryGetField(TEXT("stage_losses"));
	if (JsonStageLossesField.IsValid())
	{
		StageLosses_IsSet = TryGetJsonValue(JsonStageLossesField, StageLosses_Optional);
		ParseSuccess &= StageLosses_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonStageIncompletesField = (*Object)->TryGetField(TEXT("stage_incompletes"));
	if (JsonStageIncompletesField.IsValid())
	{
		StageIncompletes_IsSet = TryGetJsonValue(JsonStageIncompletesField, StageIncompletes_Optional);
		ParseSuccess &= StageIncompletes_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRunWinsField = (*Object)->TryGetField(TEXT("run_wins"));
	if (JsonRunWinsField.IsValid())
	{
		RunWins_IsSet = TryGetJsonValue(JsonRunWinsField, RunWins_Optional);
		ParseSuccess &= RunWins_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRunLossesField = (*Object)->TryGetField(TEXT("run_losses"));
	if (JsonRunLossesField.IsValid())
	{
		RunLosses_IsSet = TryGetJsonValue(JsonRunLossesField, RunLosses_Optional);
		ParseSuccess &= RunLosses_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRunCountField = (*Object)->TryGetField(TEXT("run_count"));
	if (JsonRunCountField.IsValid())
	{
		RunCount_IsSet = TryGetJsonValue(JsonRunCountField, RunCount_Optional);
		ParseSuccess &= RunCount_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonPlacementsCompleteField = (*Object)->TryGetField(TEXT("placements_complete"));
	if (JsonPlacementsCompleteField.IsValid())
	{
		PlacementsComplete_IsSet = TryGetJsonValue(JsonPlacementsCompleteField, PlacementsComplete_Optional);
		ParseSuccess &= PlacementsComplete_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonMmrInternalField = (*Object)->TryGetField(TEXT("mmr_internal"));
	if (JsonMmrInternalField.IsValid())
	{
		MmrInternal_IsSet = TryGetJsonValue(JsonMmrInternalField, MmrInternal_Optional);
		ParseSuccess &= MmrInternal_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonMmrVisField = (*Object)->TryGetField(TEXT("mmr_vis"));
	if (JsonMmrVisField.IsValid())
	{
		MmrVis_IsSet = TryGetJsonValue(JsonMmrVisField, MmrVis_Optional);
		ParseSuccess &= MmrVis_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonCreatedField = (*Object)->TryGetField(TEXT("created"));
	const bool Created_IsValid = JsonCreatedField.IsValid() && (!JsonCreatedField->IsNull() && TryGetJsonValue(JsonCreatedField, Created));
	ParseSuccess &= Created_IsValid; 
	const TSharedPtr<FJsonValue> JsonModifiedField = (*Object)->TryGetField(TEXT("modified"));
	const bool Modified_IsValid = JsonModifiedField.IsValid() && (!JsonModifiedField->IsNull() && TryGetJsonValue(JsonModifiedField, Modified));
	ParseSuccess &= Modified_IsValid; 

	return ParseSuccess;
}

