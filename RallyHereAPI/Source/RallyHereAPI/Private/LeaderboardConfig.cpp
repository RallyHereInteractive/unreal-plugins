// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "LeaderboardConfig.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_LeaderboardConfig

void FRHAPI_LeaderboardConfig::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("leaderboard_id"));
	RallyHereAPI::WriteJsonValue(Writer, LeaderboardId);
	Writer->WriteIdentifierPrefix(TEXT("player_list"));
	RallyHereAPI::WriteJsonValue(Writer, EnumToString(PlayerList));
	Writer->WriteIdentifierPrefix(TEXT("max_size"));
	RallyHereAPI::WriteJsonValue(Writer, MaxSize);
	Writer->WriteIdentifierPrefix(TEXT("sort_order"));
	RallyHereAPI::WriteJsonValue(Writer, EnumToString(SortOrder));
	Writer->WriteIdentifierPrefix(TEXT("source"));
	RallyHereAPI::WriteJsonValue(Writer, EnumToString(Source));
	Writer->WriteIdentifierPrefix(TEXT("source_id"));
	RallyHereAPI::WriteJsonValue(Writer, SourceId);
	if (RemoveRestricted_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("remove_restricted"));
		RallyHereAPI::WriteJsonValue(Writer, RemoveRestricted_Optional);
	}
	if (RequiredRecentLoginDays_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("required_recent_login_days"));
		if (RequiredRecentLoginDays_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, RequiredRecentLoginDays_Optional);
	}
	Writer->WriteIdentifierPrefix(TEXT("update_frequency_seconds"));
	RallyHereAPI::WriteJsonValue(Writer, UpdateFrequencySeconds);
	if (ExposeStat_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("expose_stat"));
		RallyHereAPI::WriteJsonValue(Writer, ExposeStat_Optional);
	}
	if (ExposePlayers_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("expose_players"));
		RallyHereAPI::WriteJsonValue(Writer, ExposePlayers_Optional);
	}
	Writer->WriteObjectEnd();
}

bool FRHAPI_LeaderboardConfig::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	const TSharedPtr<FJsonValue> JsonLeaderboardIdField = (*Object)->TryGetField(TEXT("leaderboard_id"));
	const bool LeaderboardId_IsValid = JsonLeaderboardIdField.IsValid() && (!JsonLeaderboardIdField->IsNull() && TryGetJsonValue(JsonLeaderboardIdField, LeaderboardId));
	ParseSuccess &= LeaderboardId_IsValid; 
	const TSharedPtr<FJsonValue> JsonPlayerListField = (*Object)->TryGetField(TEXT("player_list"));
	const bool PlayerList_IsValid = JsonPlayerListField.IsValid() && (!JsonPlayerListField->IsNull() && TryGetJsonValue(JsonPlayerListField, PlayerList));
	ParseSuccess &= PlayerList_IsValid; 
	const TSharedPtr<FJsonValue> JsonMaxSizeField = (*Object)->TryGetField(TEXT("max_size"));
	const bool MaxSize_IsValid = JsonMaxSizeField.IsValid() && (!JsonMaxSizeField->IsNull() && TryGetJsonValue(JsonMaxSizeField, MaxSize));
	ParseSuccess &= MaxSize_IsValid; 
	const TSharedPtr<FJsonValue> JsonSortOrderField = (*Object)->TryGetField(TEXT("sort_order"));
	const bool SortOrder_IsValid = JsonSortOrderField.IsValid() && (!JsonSortOrderField->IsNull() && TryGetJsonValue(JsonSortOrderField, SortOrder));
	ParseSuccess &= SortOrder_IsValid; 
	const TSharedPtr<FJsonValue> JsonSourceField = (*Object)->TryGetField(TEXT("source"));
	const bool Source_IsValid = JsonSourceField.IsValid() && (!JsonSourceField->IsNull() && TryGetJsonValue(JsonSourceField, Source));
	ParseSuccess &= Source_IsValid; 
	const TSharedPtr<FJsonValue> JsonSourceIdField = (*Object)->TryGetField(TEXT("source_id"));
	const bool SourceId_IsValid = JsonSourceIdField.IsValid() && (!JsonSourceIdField->IsNull() && TryGetJsonValue(JsonSourceIdField, SourceId));
	ParseSuccess &= SourceId_IsValid; 
	const TSharedPtr<FJsonValue> JsonRemoveRestrictedField = (*Object)->TryGetField(TEXT("remove_restricted"));
	if (JsonRemoveRestrictedField.IsValid())
	{
		RemoveRestricted_IsSet = TryGetJsonValue(JsonRemoveRestrictedField, RemoveRestricted_Optional);
		ParseSuccess &= RemoveRestricted_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRequiredRecentLoginDaysField = (*Object)->TryGetField(TEXT("required_recent_login_days"));
	if (JsonRequiredRecentLoginDaysField.IsValid())
	{
		RequiredRecentLoginDays_IsNull = JsonRequiredRecentLoginDaysField->IsNull();
		RequiredRecentLoginDays_IsSet = RequiredRecentLoginDays_IsNull || TryGetJsonValue(JsonRequiredRecentLoginDaysField, RequiredRecentLoginDays_Optional);
		ParseSuccess &= RequiredRecentLoginDays_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonUpdateFrequencySecondsField = (*Object)->TryGetField(TEXT("update_frequency_seconds"));
	const bool UpdateFrequencySeconds_IsValid = JsonUpdateFrequencySecondsField.IsValid() && (!JsonUpdateFrequencySecondsField->IsNull() && TryGetJsonValue(JsonUpdateFrequencySecondsField, UpdateFrequencySeconds));
	ParseSuccess &= UpdateFrequencySeconds_IsValid; 
	const TSharedPtr<FJsonValue> JsonExposeStatField = (*Object)->TryGetField(TEXT("expose_stat"));
	if (JsonExposeStatField.IsValid())
	{
		ExposeStat_IsSet = TryGetJsonValue(JsonExposeStatField, ExposeStat_Optional);
		ParseSuccess &= ExposeStat_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonExposePlayersField = (*Object)->TryGetField(TEXT("expose_players"));
	if (JsonExposePlayersField.IsValid())
	{
		ExposePlayers_IsSet = TryGetJsonValue(JsonExposePlayersField, ExposePlayers_Optional);
		ParseSuccess &= ExposePlayers_IsSet;
	}

	return ParseSuccess;
}

