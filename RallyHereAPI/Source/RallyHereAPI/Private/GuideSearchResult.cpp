// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "GuideSearchResult.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_GuideSearchResult

void FRHAPI_GuideSearchResult::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("guide_type"));
	RallyHereAPI::WriteJsonValue(Writer, GuideType);
	Writer->WriteIdentifierPrefix(TEXT("language"));
	RallyHereAPI::WriteJsonValue(Writer, Language);
	Writer->WriteIdentifierPrefix(TEXT("game_version"));
	RallyHereAPI::WriteJsonValue(Writer, GameVersion);
	Writer->WriteIdentifierPrefix(TEXT("name"));
	RallyHereAPI::WriteJsonValue(Writer, Name);
	if (ShortDesc_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("short_desc"));
		if (ShortDesc_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, ShortDesc_Optional);
	}
	if (PromotionPriority_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("promotion_priority"));
		RallyHereAPI::WriteJsonValue(Writer, PromotionPriority_Optional);
	}
	if (Ref1_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("ref_1"));
		if (Ref1_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Ref1_Optional);
	}
	if (Ref2_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("ref_2"));
		if (Ref2_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Ref2_Optional);
	}
	if (Ref3_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("ref_3"));
		if (Ref3_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Ref3_Optional);
	}
	if (Ref4_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("ref_4"));
		if (Ref4_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Ref4_Optional);
	}
	if (Ref5_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("ref_5"));
		if (Ref5_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Ref5_Optional);
	}
	if (Ref6_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("ref_6"));
		if (Ref6_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Ref6_Optional);
	}
	if (Ref7_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("ref_7"));
		if (Ref7_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Ref7_Optional);
	}
	if (Ref8_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("ref_8"));
		if (Ref8_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Ref8_Optional);
	}
	if (Ref9_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("ref_9"));
		if (Ref9_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Ref9_Optional);
	}
	if (Ref10_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("ref_10"));
		if (Ref10_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Ref10_Optional);
	}
	if (Ref11_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("ref_11"));
		if (Ref11_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Ref11_Optional);
	}
	if (Ref12_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("ref_12"));
		if (Ref12_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Ref12_Optional);
	}
	if (Ref13_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("ref_13"));
		if (Ref13_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Ref13_Optional);
	}
	if (Ref14_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("ref_14"));
		if (Ref14_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Ref14_Optional);
	}
	if (Ref15_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("ref_15"));
		if (Ref15_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Ref15_Optional);
	}
	if (Ref16_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("ref_16"));
		if (Ref16_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Ref16_Optional);
	}
	if (Ref17_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("ref_17"));
		if (Ref17_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Ref17_Optional);
	}
	if (Ref18_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("ref_18"));
		if (Ref18_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Ref18_Optional);
	}
	if (Ref19_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("ref_19"));
		if (Ref19_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Ref19_Optional);
	}
	if (Ref20_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("ref_20"));
		if (Ref20_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Ref20_Optional);
	}
	if (Ref21_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("ref_21"));
		if (Ref21_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Ref21_Optional);
	}
	if (Ref22_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("ref_22"));
		if (Ref22_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Ref22_Optional);
	}
	if (Ref23_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("ref_23"));
		if (Ref23_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Ref23_Optional);
	}
	if (Ref24_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("ref_24"));
		if (Ref24_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Ref24_Optional);
	}
	if (Ref25_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("ref_25"));
		if (Ref25_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Ref25_Optional);
	}
	if (Ref26_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("ref_26"));
		if (Ref26_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Ref26_Optional);
	}
	if (Ref27_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("ref_27"));
		if (Ref27_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Ref27_Optional);
	}
	if (Ref28_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("ref_28"));
		if (Ref28_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Ref28_Optional);
	}
	if (Ref29_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("ref_29"));
		if (Ref29_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Ref29_Optional);
	}
	if (Ref30_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("ref_30"));
		if (Ref30_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Ref30_Optional);
	}
	if (Ref31_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("ref_31"));
		if (Ref31_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Ref31_Optional);
	}
	if (Ref32_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("ref_32"));
		if (Ref32_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Ref32_Optional);
	}
	Writer->WriteIdentifierPrefix(TEXT("guide_id"));
	RallyHereAPI::WriteJsonValue(Writer, GuideId);
	Writer->WriteIdentifierPrefix(TEXT("owner_entity_type"));
	RallyHereAPI::WriteJsonValue(Writer, EnumToString(OwnerEntityType));
	Writer->WriteIdentifierPrefix(TEXT("owner_entity_id"));
	RallyHereAPI::WriteJsonValue(Writer, OwnerEntityId);
	Writer->WriteIdentifierPrefix(TEXT("created"));
	RallyHereAPI::WriteJsonValue(Writer, Created);
	Writer->WriteIdentifierPrefix(TEXT("modified"));
	RallyHereAPI::WriteJsonValue(Writer, Modified);
	if (Favorites_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("favorites"));
		RallyHereAPI::WriteJsonValue(Writer, Favorites_Optional);
	}
	if (Upvotes_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("upvotes"));
		RallyHereAPI::WriteJsonValue(Writer, Upvotes_Optional);
	}
	if (Downvotes_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("downvotes"));
		RallyHereAPI::WriteJsonValue(Writer, Downvotes_Optional);
	}
	Writer->WriteIdentifierPrefix(TEXT("etag"));
	RallyHereAPI::WriteJsonValue(Writer, Etag);
	Writer->WriteObjectEnd();
}

bool FRHAPI_GuideSearchResult::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	const TSharedPtr<FJsonValue> JsonGuideTypeField = (*Object)->TryGetField(TEXT("guide_type"));
	const bool GuideType_IsValid = JsonGuideTypeField.IsValid() && (!JsonGuideTypeField->IsNull() && TryGetJsonValue(JsonGuideTypeField, GuideType));
	ParseSuccess &= GuideType_IsValid; 
	const TSharedPtr<FJsonValue> JsonLanguageField = (*Object)->TryGetField(TEXT("language"));
	const bool Language_IsValid = JsonLanguageField.IsValid() && (!JsonLanguageField->IsNull() && TryGetJsonValue(JsonLanguageField, Language));
	ParseSuccess &= Language_IsValid; 
	const TSharedPtr<FJsonValue> JsonGameVersionField = (*Object)->TryGetField(TEXT("game_version"));
	const bool GameVersion_IsValid = JsonGameVersionField.IsValid() && (!JsonGameVersionField->IsNull() && TryGetJsonValue(JsonGameVersionField, GameVersion));
	ParseSuccess &= GameVersion_IsValid; 
	const TSharedPtr<FJsonValue> JsonNameField = (*Object)->TryGetField(TEXT("name"));
	const bool Name_IsValid = JsonNameField.IsValid() && (!JsonNameField->IsNull() && TryGetJsonValue(JsonNameField, Name));
	ParseSuccess &= Name_IsValid; 
	const TSharedPtr<FJsonValue> JsonShortDescField = (*Object)->TryGetField(TEXT("short_desc"));
	if (JsonShortDescField.IsValid())
	{
		ShortDesc_IsNull = JsonShortDescField->IsNull();
		ShortDesc_IsSet = ShortDesc_IsNull || TryGetJsonValue(JsonShortDescField, ShortDesc_Optional);
		ParseSuccess &= ShortDesc_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonPromotionPriorityField = (*Object)->TryGetField(TEXT("promotion_priority"));
	if (JsonPromotionPriorityField.IsValid())
	{
		PromotionPriority_IsSet = TryGetJsonValue(JsonPromotionPriorityField, PromotionPriority_Optional);
		ParseSuccess &= PromotionPriority_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRef1Field = (*Object)->TryGetField(TEXT("ref_1"));
	if (JsonRef1Field.IsValid())
	{
		Ref1_IsNull = JsonRef1Field->IsNull();
		Ref1_IsSet = Ref1_IsNull || TryGetJsonValue(JsonRef1Field, Ref1_Optional);
		ParseSuccess &= Ref1_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRef2Field = (*Object)->TryGetField(TEXT("ref_2"));
	if (JsonRef2Field.IsValid())
	{
		Ref2_IsNull = JsonRef2Field->IsNull();
		Ref2_IsSet = Ref2_IsNull || TryGetJsonValue(JsonRef2Field, Ref2_Optional);
		ParseSuccess &= Ref2_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRef3Field = (*Object)->TryGetField(TEXT("ref_3"));
	if (JsonRef3Field.IsValid())
	{
		Ref3_IsNull = JsonRef3Field->IsNull();
		Ref3_IsSet = Ref3_IsNull || TryGetJsonValue(JsonRef3Field, Ref3_Optional);
		ParseSuccess &= Ref3_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRef4Field = (*Object)->TryGetField(TEXT("ref_4"));
	if (JsonRef4Field.IsValid())
	{
		Ref4_IsNull = JsonRef4Field->IsNull();
		Ref4_IsSet = Ref4_IsNull || TryGetJsonValue(JsonRef4Field, Ref4_Optional);
		ParseSuccess &= Ref4_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRef5Field = (*Object)->TryGetField(TEXT("ref_5"));
	if (JsonRef5Field.IsValid())
	{
		Ref5_IsNull = JsonRef5Field->IsNull();
		Ref5_IsSet = Ref5_IsNull || TryGetJsonValue(JsonRef5Field, Ref5_Optional);
		ParseSuccess &= Ref5_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRef6Field = (*Object)->TryGetField(TEXT("ref_6"));
	if (JsonRef6Field.IsValid())
	{
		Ref6_IsNull = JsonRef6Field->IsNull();
		Ref6_IsSet = Ref6_IsNull || TryGetJsonValue(JsonRef6Field, Ref6_Optional);
		ParseSuccess &= Ref6_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRef7Field = (*Object)->TryGetField(TEXT("ref_7"));
	if (JsonRef7Field.IsValid())
	{
		Ref7_IsNull = JsonRef7Field->IsNull();
		Ref7_IsSet = Ref7_IsNull || TryGetJsonValue(JsonRef7Field, Ref7_Optional);
		ParseSuccess &= Ref7_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRef8Field = (*Object)->TryGetField(TEXT("ref_8"));
	if (JsonRef8Field.IsValid())
	{
		Ref8_IsNull = JsonRef8Field->IsNull();
		Ref8_IsSet = Ref8_IsNull || TryGetJsonValue(JsonRef8Field, Ref8_Optional);
		ParseSuccess &= Ref8_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRef9Field = (*Object)->TryGetField(TEXT("ref_9"));
	if (JsonRef9Field.IsValid())
	{
		Ref9_IsNull = JsonRef9Field->IsNull();
		Ref9_IsSet = Ref9_IsNull || TryGetJsonValue(JsonRef9Field, Ref9_Optional);
		ParseSuccess &= Ref9_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRef10Field = (*Object)->TryGetField(TEXT("ref_10"));
	if (JsonRef10Field.IsValid())
	{
		Ref10_IsNull = JsonRef10Field->IsNull();
		Ref10_IsSet = Ref10_IsNull || TryGetJsonValue(JsonRef10Field, Ref10_Optional);
		ParseSuccess &= Ref10_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRef11Field = (*Object)->TryGetField(TEXT("ref_11"));
	if (JsonRef11Field.IsValid())
	{
		Ref11_IsNull = JsonRef11Field->IsNull();
		Ref11_IsSet = Ref11_IsNull || TryGetJsonValue(JsonRef11Field, Ref11_Optional);
		ParseSuccess &= Ref11_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRef12Field = (*Object)->TryGetField(TEXT("ref_12"));
	if (JsonRef12Field.IsValid())
	{
		Ref12_IsNull = JsonRef12Field->IsNull();
		Ref12_IsSet = Ref12_IsNull || TryGetJsonValue(JsonRef12Field, Ref12_Optional);
		ParseSuccess &= Ref12_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRef13Field = (*Object)->TryGetField(TEXT("ref_13"));
	if (JsonRef13Field.IsValid())
	{
		Ref13_IsNull = JsonRef13Field->IsNull();
		Ref13_IsSet = Ref13_IsNull || TryGetJsonValue(JsonRef13Field, Ref13_Optional);
		ParseSuccess &= Ref13_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRef14Field = (*Object)->TryGetField(TEXT("ref_14"));
	if (JsonRef14Field.IsValid())
	{
		Ref14_IsNull = JsonRef14Field->IsNull();
		Ref14_IsSet = Ref14_IsNull || TryGetJsonValue(JsonRef14Field, Ref14_Optional);
		ParseSuccess &= Ref14_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRef15Field = (*Object)->TryGetField(TEXT("ref_15"));
	if (JsonRef15Field.IsValid())
	{
		Ref15_IsNull = JsonRef15Field->IsNull();
		Ref15_IsSet = Ref15_IsNull || TryGetJsonValue(JsonRef15Field, Ref15_Optional);
		ParseSuccess &= Ref15_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRef16Field = (*Object)->TryGetField(TEXT("ref_16"));
	if (JsonRef16Field.IsValid())
	{
		Ref16_IsNull = JsonRef16Field->IsNull();
		Ref16_IsSet = Ref16_IsNull || TryGetJsonValue(JsonRef16Field, Ref16_Optional);
		ParseSuccess &= Ref16_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRef17Field = (*Object)->TryGetField(TEXT("ref_17"));
	if (JsonRef17Field.IsValid())
	{
		Ref17_IsNull = JsonRef17Field->IsNull();
		Ref17_IsSet = Ref17_IsNull || TryGetJsonValue(JsonRef17Field, Ref17_Optional);
		ParseSuccess &= Ref17_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRef18Field = (*Object)->TryGetField(TEXT("ref_18"));
	if (JsonRef18Field.IsValid())
	{
		Ref18_IsNull = JsonRef18Field->IsNull();
		Ref18_IsSet = Ref18_IsNull || TryGetJsonValue(JsonRef18Field, Ref18_Optional);
		ParseSuccess &= Ref18_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRef19Field = (*Object)->TryGetField(TEXT("ref_19"));
	if (JsonRef19Field.IsValid())
	{
		Ref19_IsNull = JsonRef19Field->IsNull();
		Ref19_IsSet = Ref19_IsNull || TryGetJsonValue(JsonRef19Field, Ref19_Optional);
		ParseSuccess &= Ref19_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRef20Field = (*Object)->TryGetField(TEXT("ref_20"));
	if (JsonRef20Field.IsValid())
	{
		Ref20_IsNull = JsonRef20Field->IsNull();
		Ref20_IsSet = Ref20_IsNull || TryGetJsonValue(JsonRef20Field, Ref20_Optional);
		ParseSuccess &= Ref20_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRef21Field = (*Object)->TryGetField(TEXT("ref_21"));
	if (JsonRef21Field.IsValid())
	{
		Ref21_IsNull = JsonRef21Field->IsNull();
		Ref21_IsSet = Ref21_IsNull || TryGetJsonValue(JsonRef21Field, Ref21_Optional);
		ParseSuccess &= Ref21_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRef22Field = (*Object)->TryGetField(TEXT("ref_22"));
	if (JsonRef22Field.IsValid())
	{
		Ref22_IsNull = JsonRef22Field->IsNull();
		Ref22_IsSet = Ref22_IsNull || TryGetJsonValue(JsonRef22Field, Ref22_Optional);
		ParseSuccess &= Ref22_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRef23Field = (*Object)->TryGetField(TEXT("ref_23"));
	if (JsonRef23Field.IsValid())
	{
		Ref23_IsNull = JsonRef23Field->IsNull();
		Ref23_IsSet = Ref23_IsNull || TryGetJsonValue(JsonRef23Field, Ref23_Optional);
		ParseSuccess &= Ref23_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRef24Field = (*Object)->TryGetField(TEXT("ref_24"));
	if (JsonRef24Field.IsValid())
	{
		Ref24_IsNull = JsonRef24Field->IsNull();
		Ref24_IsSet = Ref24_IsNull || TryGetJsonValue(JsonRef24Field, Ref24_Optional);
		ParseSuccess &= Ref24_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRef25Field = (*Object)->TryGetField(TEXT("ref_25"));
	if (JsonRef25Field.IsValid())
	{
		Ref25_IsNull = JsonRef25Field->IsNull();
		Ref25_IsSet = Ref25_IsNull || TryGetJsonValue(JsonRef25Field, Ref25_Optional);
		ParseSuccess &= Ref25_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRef26Field = (*Object)->TryGetField(TEXT("ref_26"));
	if (JsonRef26Field.IsValid())
	{
		Ref26_IsNull = JsonRef26Field->IsNull();
		Ref26_IsSet = Ref26_IsNull || TryGetJsonValue(JsonRef26Field, Ref26_Optional);
		ParseSuccess &= Ref26_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRef27Field = (*Object)->TryGetField(TEXT("ref_27"));
	if (JsonRef27Field.IsValid())
	{
		Ref27_IsNull = JsonRef27Field->IsNull();
		Ref27_IsSet = Ref27_IsNull || TryGetJsonValue(JsonRef27Field, Ref27_Optional);
		ParseSuccess &= Ref27_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRef28Field = (*Object)->TryGetField(TEXT("ref_28"));
	if (JsonRef28Field.IsValid())
	{
		Ref28_IsNull = JsonRef28Field->IsNull();
		Ref28_IsSet = Ref28_IsNull || TryGetJsonValue(JsonRef28Field, Ref28_Optional);
		ParseSuccess &= Ref28_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRef29Field = (*Object)->TryGetField(TEXT("ref_29"));
	if (JsonRef29Field.IsValid())
	{
		Ref29_IsNull = JsonRef29Field->IsNull();
		Ref29_IsSet = Ref29_IsNull || TryGetJsonValue(JsonRef29Field, Ref29_Optional);
		ParseSuccess &= Ref29_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRef30Field = (*Object)->TryGetField(TEXT("ref_30"));
	if (JsonRef30Field.IsValid())
	{
		Ref30_IsNull = JsonRef30Field->IsNull();
		Ref30_IsSet = Ref30_IsNull || TryGetJsonValue(JsonRef30Field, Ref30_Optional);
		ParseSuccess &= Ref30_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRef31Field = (*Object)->TryGetField(TEXT("ref_31"));
	if (JsonRef31Field.IsValid())
	{
		Ref31_IsNull = JsonRef31Field->IsNull();
		Ref31_IsSet = Ref31_IsNull || TryGetJsonValue(JsonRef31Field, Ref31_Optional);
		ParseSuccess &= Ref31_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonRef32Field = (*Object)->TryGetField(TEXT("ref_32"));
	if (JsonRef32Field.IsValid())
	{
		Ref32_IsNull = JsonRef32Field->IsNull();
		Ref32_IsSet = Ref32_IsNull || TryGetJsonValue(JsonRef32Field, Ref32_Optional);
		ParseSuccess &= Ref32_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonGuideIdField = (*Object)->TryGetField(TEXT("guide_id"));
	const bool GuideId_IsValid = JsonGuideIdField.IsValid() && (!JsonGuideIdField->IsNull() && TryGetJsonValue(JsonGuideIdField, GuideId));
	ParseSuccess &= GuideId_IsValid; 
	const TSharedPtr<FJsonValue> JsonOwnerEntityTypeField = (*Object)->TryGetField(TEXT("owner_entity_type"));
	const bool OwnerEntityType_IsValid = JsonOwnerEntityTypeField.IsValid() && (!JsonOwnerEntityTypeField->IsNull() && TryGetJsonValue(JsonOwnerEntityTypeField, OwnerEntityType));
	ParseSuccess &= OwnerEntityType_IsValid; 
	const TSharedPtr<FJsonValue> JsonOwnerEntityIdField = (*Object)->TryGetField(TEXT("owner_entity_id"));
	const bool OwnerEntityId_IsValid = JsonOwnerEntityIdField.IsValid() && (!JsonOwnerEntityIdField->IsNull() && TryGetJsonValue(JsonOwnerEntityIdField, OwnerEntityId));
	ParseSuccess &= OwnerEntityId_IsValid; 
	const TSharedPtr<FJsonValue> JsonCreatedField = (*Object)->TryGetField(TEXT("created"));
	const bool Created_IsValid = JsonCreatedField.IsValid() && (!JsonCreatedField->IsNull() && TryGetJsonValue(JsonCreatedField, Created));
	ParseSuccess &= Created_IsValid; 
	const TSharedPtr<FJsonValue> JsonModifiedField = (*Object)->TryGetField(TEXT("modified"));
	const bool Modified_IsValid = JsonModifiedField.IsValid() && (!JsonModifiedField->IsNull() && TryGetJsonValue(JsonModifiedField, Modified));
	ParseSuccess &= Modified_IsValid; 
	const TSharedPtr<FJsonValue> JsonFavoritesField = (*Object)->TryGetField(TEXT("favorites"));
	if (JsonFavoritesField.IsValid())
	{
		Favorites_IsSet = TryGetJsonValue(JsonFavoritesField, Favorites_Optional);
		ParseSuccess &= Favorites_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonUpvotesField = (*Object)->TryGetField(TEXT("upvotes"));
	if (JsonUpvotesField.IsValid())
	{
		Upvotes_IsSet = TryGetJsonValue(JsonUpvotesField, Upvotes_Optional);
		ParseSuccess &= Upvotes_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonDownvotesField = (*Object)->TryGetField(TEXT("downvotes"));
	if (JsonDownvotesField.IsValid())
	{
		Downvotes_IsSet = TryGetJsonValue(JsonDownvotesField, Downvotes_Optional);
		ParseSuccess &= Downvotes_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonEtagField = (*Object)->TryGetField(TEXT("etag"));
	const bool Etag_IsValid = JsonEtagField.IsValid() && (!JsonEtagField->IsNull() && TryGetJsonValue(JsonEtagField, Etag));
	ParseSuccess &= Etag_IsValid; 

	return ParseSuccess;
}

