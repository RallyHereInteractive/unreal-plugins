// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "LoginHistoryEntry.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_LoginHistoryEntry

void FRHAPI_LoginHistoryEntry::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
	Writer->WriteObjectStart();
	if (PlayerUuid_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("player_uuid"));
		RallyHereAPI::WriteJsonValue(Writer, PlayerUuid_Optional);
	}
	if (Platform_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("platform"));
		RallyHereAPI::WriteJsonValue(Writer, EnumToString(Platform_Optional));
	}
	if (PlatformUserId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("platform_user_id"));
		RallyHereAPI::WriteJsonValue(Writer, PlatformUserId_Optional);
	}
	if (PersonId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("person_id"));
		RallyHereAPI::WriteJsonValue(Writer, PersonId_Optional);
	}
	if (UserAgent_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("user_agent"));
		RallyHereAPI::WriteJsonValue(Writer, UserAgent_Optional);
	}
	if (Ip_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("ip"));
		RallyHereAPI::WriteJsonValue(Writer, Ip_Optional);
	}
	if (ClientId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("client_id"));
		RallyHereAPI::WriteJsonValue(Writer, ClientId_Optional);
	}
	if (Timestamp_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("timestamp"));
		RallyHereAPI::WriteJsonValue(Writer, Timestamp_Optional);
	}
	Writer->WriteObjectEnd();
}

bool FRHAPI_LoginHistoryEntry::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	const TSharedPtr<FJsonValue> JsonPlayerUuidField = (*Object)->TryGetField(TEXT("player_uuid"));
	if (JsonPlayerUuidField.IsValid() && !JsonPlayerUuidField->IsNull())
	{
		PlayerUuid_IsSet = TryGetJsonValue(JsonPlayerUuidField, PlayerUuid_Optional);
		ParseSuccess &= PlayerUuid_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonPlatformField = (*Object)->TryGetField(TEXT("platform"));
	if (JsonPlatformField.IsValid() && !JsonPlatformField->IsNull())
	{
		Platform_IsSet = TryGetJsonValue(JsonPlatformField, Platform_Optional);
		ParseSuccess &= Platform_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonPlatformUserIdField = (*Object)->TryGetField(TEXT("platform_user_id"));
	if (JsonPlatformUserIdField.IsValid() && !JsonPlatformUserIdField->IsNull())
	{
		PlatformUserId_IsSet = TryGetJsonValue(JsonPlatformUserIdField, PlatformUserId_Optional);
		ParseSuccess &= PlatformUserId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonPersonIdField = (*Object)->TryGetField(TEXT("person_id"));
	if (JsonPersonIdField.IsValid() && !JsonPersonIdField->IsNull())
	{
		PersonId_IsSet = TryGetJsonValue(JsonPersonIdField, PersonId_Optional);
		ParseSuccess &= PersonId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonUserAgentField = (*Object)->TryGetField(TEXT("user_agent"));
	if (JsonUserAgentField.IsValid() && !JsonUserAgentField->IsNull())
	{
		UserAgent_IsSet = TryGetJsonValue(JsonUserAgentField, UserAgent_Optional);
		ParseSuccess &= UserAgent_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonIpField = (*Object)->TryGetField(TEXT("ip"));
	if (JsonIpField.IsValid() && !JsonIpField->IsNull())
	{
		Ip_IsSet = TryGetJsonValue(JsonIpField, Ip_Optional);
		ParseSuccess &= Ip_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonClientIdField = (*Object)->TryGetField(TEXT("client_id"));
	if (JsonClientIdField.IsValid() && !JsonClientIdField->IsNull())
	{
		ClientId_IsSet = TryGetJsonValue(JsonClientIdField, ClientId_Optional);
		ParseSuccess &= ClientId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonTimestampField = (*Object)->TryGetField(TEXT("timestamp"));
	if (JsonTimestampField.IsValid() && !JsonTimestampField->IsNull())
	{
		Timestamp_IsSet = TryGetJsonValue(JsonTimestampField, Timestamp_Optional);
		ParseSuccess &= Timestamp_IsSet;
	}

	return ParseSuccess;
}

