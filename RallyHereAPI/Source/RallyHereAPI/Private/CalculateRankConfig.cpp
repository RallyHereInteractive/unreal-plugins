// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "CalculateRankConfig.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_CalculateRankConfig

void FRHAPI_CalculateRankConfig::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("max_mu"));
	RallyHereAPI::WriteJsonValue(Writer, MaxMu);
	Writer->WriteIdentifierPrefix(TEXT("min_mu"));
	RallyHereAPI::WriteJsonValue(Writer, MinMu);
	Writer->WriteIdentifierPrefix(TEXT("min_sigma"));
	RallyHereAPI::WriteJsonValue(Writer, MinSigma);
	if (Beta_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("beta"));
		RallyHereAPI::WriteJsonValue(Writer, Beta_Optional);
	}
	Writer->WriteIdentifierPrefix(TEXT("default_mu"));
	RallyHereAPI::WriteJsonValue(Writer, DefaultMu);
	Writer->WriteIdentifierPrefix(TEXT("default_sigma"));
	RallyHereAPI::WriteJsonValue(Writer, DefaultSigma);
	if (DrawProbability_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("draw_probability"));
		RallyHereAPI::WriteJsonValue(Writer, DrawProbability_Optional);
	}
	if (Tau_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("tau"));
		RallyHereAPI::WriteJsonValue(Writer, Tau_Optional);
	}
	Writer->WriteObjectEnd();
}

bool FRHAPI_CalculateRankConfig::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	const TSharedPtr<FJsonValue> JsonMaxMuField = (*Object)->TryGetField(TEXT("max_mu"));
	ParseSuccess &= JsonMaxMuField.IsValid() && !JsonMaxMuField->IsNull() && TryGetJsonValue(JsonMaxMuField, MaxMu);
	const TSharedPtr<FJsonValue> JsonMinMuField = (*Object)->TryGetField(TEXT("min_mu"));
	ParseSuccess &= JsonMinMuField.IsValid() && !JsonMinMuField->IsNull() && TryGetJsonValue(JsonMinMuField, MinMu);
	const TSharedPtr<FJsonValue> JsonMinSigmaField = (*Object)->TryGetField(TEXT("min_sigma"));
	ParseSuccess &= JsonMinSigmaField.IsValid() && !JsonMinSigmaField->IsNull() && TryGetJsonValue(JsonMinSigmaField, MinSigma);
	const TSharedPtr<FJsonValue> JsonBetaField = (*Object)->TryGetField(TEXT("beta"));
	if (JsonBetaField.IsValid() && !JsonBetaField->IsNull())
	{
		Beta_IsSet = TryGetJsonValue(JsonBetaField, Beta_Optional);
		ParseSuccess &= Beta_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonDefaultMuField = (*Object)->TryGetField(TEXT("default_mu"));
	ParseSuccess &= JsonDefaultMuField.IsValid() && !JsonDefaultMuField->IsNull() && TryGetJsonValue(JsonDefaultMuField, DefaultMu);
	const TSharedPtr<FJsonValue> JsonDefaultSigmaField = (*Object)->TryGetField(TEXT("default_sigma"));
	ParseSuccess &= JsonDefaultSigmaField.IsValid() && !JsonDefaultSigmaField->IsNull() && TryGetJsonValue(JsonDefaultSigmaField, DefaultSigma);
	const TSharedPtr<FJsonValue> JsonDrawProbabilityField = (*Object)->TryGetField(TEXT("draw_probability"));
	if (JsonDrawProbabilityField.IsValid() && !JsonDrawProbabilityField->IsNull())
	{
		DrawProbability_IsSet = TryGetJsonValue(JsonDrawProbabilityField, DrawProbability_Optional);
		ParseSuccess &= DrawProbability_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonTauField = (*Object)->TryGetField(TEXT("tau"));
	if (JsonTauField.IsValid() && !JsonTauField->IsNull())
	{
		Tau_IsSet = TryGetJsonValue(JsonTauField, Tau_Optional);
		ParseSuccess &= Tau_IsSet;
	}

	return ParseSuccess;
}

