// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "PlayerPresence.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_PlayerPresence

void FRHAPI_PlayerPresence::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
	Writer->WriteObjectStart();
	if (Status_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("status"));
		RallyHereAPI::WriteJsonValue(Writer, EnumToString(Status_Optional));
	}
	if (Message_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("message"));
		RallyHereAPI::WriteJsonValue(Writer, Message_Optional);
	}
	Writer->WriteIdentifierPrefix(TEXT("platform"));
	RallyHereAPI::WriteJsonValue(Writer, Platform);
	Writer->WriteIdentifierPrefix(TEXT("display_name"));
	RallyHereAPI::WriteJsonValue(Writer, DisplayName);
	if (CustomData_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("custom_data"));
		RallyHereAPI::WriteJsonValue(Writer, CustomData_Optional);
	}
	if (PlayerId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("player_id"));
		if (PlayerId_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, PlayerId_Optional);
	}
	Writer->WriteIdentifierPrefix(TEXT("player_uuid"));
	RallyHereAPI::WriteJsonValue(Writer, PlayerUuid);
	if (DoNotDisturb_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("do_not_disturb"));
		if (DoNotDisturb_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, DoNotDisturb_Optional);
	}
	if (LastSeen_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("last_seen"));
		if (LastSeen_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, LastSeen_Optional);
	}
	Writer->WriteObjectEnd();
}

bool FRHAPI_PlayerPresence::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	const TSharedPtr<FJsonValue> JsonStatusField = (*Object)->TryGetField(TEXT("status"));
	if (JsonStatusField.IsValid())
	{
		Status_IsSet = TryGetJsonValue(JsonStatusField, Status_Optional);
		ParseSuccess &= Status_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonMessageField = (*Object)->TryGetField(TEXT("message"));
	if (JsonMessageField.IsValid())
	{
		Message_IsSet = TryGetJsonValue(JsonMessageField, Message_Optional);
		ParseSuccess &= Message_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonPlatformField = (*Object)->TryGetField(TEXT("platform"));
	const bool Platform_IsValid = JsonPlatformField.IsValid() && (!JsonPlatformField->IsNull() && TryGetJsonValue(JsonPlatformField, Platform));
	ParseSuccess &= Platform_IsValid; 
	const TSharedPtr<FJsonValue> JsonDisplayNameField = (*Object)->TryGetField(TEXT("display_name"));
	const bool DisplayName_IsValid = JsonDisplayNameField.IsValid() && (!JsonDisplayNameField->IsNull() && TryGetJsonValue(JsonDisplayNameField, DisplayName));
	ParseSuccess &= DisplayName_IsValid; 
	const TSharedPtr<FJsonValue> JsonCustomDataField = (*Object)->TryGetField(TEXT("custom_data"));
	if (JsonCustomDataField.IsValid())
	{
		CustomData_IsSet = TryGetJsonValue(JsonCustomDataField, CustomData_Optional);
		ParseSuccess &= CustomData_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonPlayerIdField = (*Object)->TryGetField(TEXT("player_id"));
	if (JsonPlayerIdField.IsValid())
	{
		PlayerId_IsNull = JsonPlayerIdField->IsNull();
		PlayerId_IsSet = PlayerId_IsNull || TryGetJsonValue(JsonPlayerIdField, PlayerId_Optional);
		ParseSuccess &= PlayerId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonPlayerUuidField = (*Object)->TryGetField(TEXT("player_uuid"));
	const bool PlayerUuid_IsValid = JsonPlayerUuidField.IsValid() && (!JsonPlayerUuidField->IsNull() && TryGetJsonValue(JsonPlayerUuidField, PlayerUuid));
	ParseSuccess &= PlayerUuid_IsValid; 
	const TSharedPtr<FJsonValue> JsonDoNotDisturbField = (*Object)->TryGetField(TEXT("do_not_disturb"));
	if (JsonDoNotDisturbField.IsValid())
	{
		DoNotDisturb_IsNull = JsonDoNotDisturbField->IsNull();
		DoNotDisturb_IsSet = DoNotDisturb_IsNull || TryGetJsonValue(JsonDoNotDisturbField, DoNotDisturb_Optional);
		ParseSuccess &= DoNotDisturb_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonLastSeenField = (*Object)->TryGetField(TEXT("last_seen"));
	if (JsonLastSeenField.IsValid())
	{
		LastSeen_IsNull = JsonLastSeenField->IsNull();
		LastSeen_IsSet = LastSeen_IsNull || TryGetJsonValue(JsonLastSeenField, LastSeen_Optional);
		ParseSuccess &= LastSeen_IsSet;
	}

	return ParseSuccess;
}

