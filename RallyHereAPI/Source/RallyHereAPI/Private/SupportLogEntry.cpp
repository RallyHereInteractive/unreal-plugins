// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "SupportLogEntry.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_SupportLogEntry

void FRHAPI_SupportLogEntry::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("support_action_log_id"));
	RallyHereAPI::WriteJsonValue(Writer, SupportActionLogId);
	if (PersonId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("person_id"));
		RallyHereAPI::WriteJsonValue(Writer, PersonId_Optional);
	}
	if (PlayerUuid_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("player_uuid"));
		RallyHereAPI::WriteJsonValue(Writer, PlayerUuid_Optional);
	}
	if (Platform_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("platform"));
		RallyHereAPI::WriteJsonValue(Writer, EnumToString(Platform_Optional));
	}
	if (PlatformUserId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("platform_user_id"));
		RallyHereAPI::WriteJsonValue(Writer, PlatformUserId_Optional);
	}
	Writer->WriteIdentifierPrefix(TEXT("event_name"));
	RallyHereAPI::WriteJsonValue(Writer, EventName);
	Writer->WriteIdentifierPrefix(TEXT("event_description"));
	RallyHereAPI::WriteJsonValue(Writer, EventDescription);
	if (Ip_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("ip"));
		RallyHereAPI::WriteJsonValue(Writer, Ip_Optional);
	}
	if (SupportUsername_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("support_username"));
		RallyHereAPI::WriteJsonValue(Writer, SupportUsername_Optional);
	}
	Writer->WriteIdentifierPrefix(TEXT("created"));
	RallyHereAPI::WriteJsonValue(Writer, Created);
	Writer->WriteObjectEnd();
}

bool FRHAPI_SupportLogEntry::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	const TSharedPtr<FJsonValue> JsonSupportActionLogIdField = (*Object)->TryGetField(TEXT("support_action_log_id"));
	const bool SupportActionLogId_IsValid = JsonSupportActionLogIdField.IsValid() && (!JsonSupportActionLogIdField->IsNull() && TryGetJsonValue(JsonSupportActionLogIdField, SupportActionLogId));
	ParseSuccess &= SupportActionLogId_IsValid; 
	const TSharedPtr<FJsonValue> JsonPersonIdField = (*Object)->TryGetField(TEXT("person_id"));
	if (JsonPersonIdField.IsValid())
	{
		PersonId_IsSet = TryGetJsonValue(JsonPersonIdField, PersonId_Optional);
		ParseSuccess &= PersonId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonPlayerUuidField = (*Object)->TryGetField(TEXT("player_uuid"));
	if (JsonPlayerUuidField.IsValid())
	{
		PlayerUuid_IsSet = TryGetJsonValue(JsonPlayerUuidField, PlayerUuid_Optional);
		ParseSuccess &= PlayerUuid_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonPlatformField = (*Object)->TryGetField(TEXT("platform"));
	if (JsonPlatformField.IsValid())
	{
		Platform_IsSet = TryGetJsonValue(JsonPlatformField, Platform_Optional);
		ParseSuccess &= Platform_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonPlatformUserIdField = (*Object)->TryGetField(TEXT("platform_user_id"));
	if (JsonPlatformUserIdField.IsValid())
	{
		PlatformUserId_IsSet = TryGetJsonValue(JsonPlatformUserIdField, PlatformUserId_Optional);
		ParseSuccess &= PlatformUserId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonEventNameField = (*Object)->TryGetField(TEXT("event_name"));
	const bool EventName_IsValid = JsonEventNameField.IsValid() && (!JsonEventNameField->IsNull() && TryGetJsonValue(JsonEventNameField, EventName));
	ParseSuccess &= EventName_IsValid; 
	const TSharedPtr<FJsonValue> JsonEventDescriptionField = (*Object)->TryGetField(TEXT("event_description"));
	const bool EventDescription_IsValid = JsonEventDescriptionField.IsValid() && (!JsonEventDescriptionField->IsNull() && TryGetJsonValue(JsonEventDescriptionField, EventDescription));
	ParseSuccess &= EventDescription_IsValid; 
	const TSharedPtr<FJsonValue> JsonIpField = (*Object)->TryGetField(TEXT("ip"));
	if (JsonIpField.IsValid())
	{
		Ip_IsSet = TryGetJsonValue(JsonIpField, Ip_Optional);
		ParseSuccess &= Ip_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonSupportUsernameField = (*Object)->TryGetField(TEXT("support_username"));
	if (JsonSupportUsernameField.IsValid())
	{
		SupportUsername_IsSet = TryGetJsonValue(JsonSupportUsernameField, SupportUsername_Optional);
		ParseSuccess &= SupportUsername_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonCreatedField = (*Object)->TryGetField(TEXT("created"));
	const bool Created_IsValid = JsonCreatedField.IsValid() && (!JsonCreatedField->IsNull() && TryGetJsonValue(JsonCreatedField, Created));
	ParseSuccess &= Created_IsValid; 

	return ParseSuccess;
}

