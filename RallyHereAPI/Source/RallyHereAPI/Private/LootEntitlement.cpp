// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "LootEntitlement.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_LootEntitlement

void FRHAPI_LootEntitlement::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("type"));
	RallyHereAPI::WriteJsonValue(Writer, EnumToString(Type));
	Writer->WriteIdentifierPrefix(TEXT("loot_id"));
	RallyHereAPI::WriteJsonValue(Writer, LootId);
	if (RefundLootId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("refund_loot_id"));
		if (RefundLootId_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, RefundLootId_Optional);
	}
	if (ChargebackLootId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("chargeback_loot_id"));
		if (ChargebackLootId_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, ChargebackLootId_Optional);
	}
	if (ChargebackReversalLootId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("chargeback_reversal_loot_id"));
		if (ChargebackReversalLootId_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, ChargebackReversalLootId_Optional);
	}
	Writer->WriteObjectEnd();
}

bool FRHAPI_LootEntitlement::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	const TSharedPtr<FJsonValue> JsonTypeField = (*Object)->TryGetField(TEXT("type"));
	const bool Type_IsValid = JsonTypeField.IsValid() && (!JsonTypeField->IsNull() && TryGetJsonValue(JsonTypeField, Type));
	ParseSuccess &= Type_IsValid; 
	const TSharedPtr<FJsonValue> JsonLootIdField = (*Object)->TryGetField(TEXT("loot_id"));
	const bool LootId_IsValid = JsonLootIdField.IsValid() && (!JsonLootIdField->IsNull() && TryGetJsonValue(JsonLootIdField, LootId));
	ParseSuccess &= LootId_IsValid; 
	const TSharedPtr<FJsonValue> JsonRefundLootIdField = (*Object)->TryGetField(TEXT("refund_loot_id"));
	if (JsonRefundLootIdField.IsValid())
	{
		RefundLootId_IsNull = JsonRefundLootIdField->IsNull();
		RefundLootId_IsSet = RefundLootId_IsNull || TryGetJsonValue(JsonRefundLootIdField, RefundLootId_Optional);
		ParseSuccess &= RefundLootId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonChargebackLootIdField = (*Object)->TryGetField(TEXT("chargeback_loot_id"));
	if (JsonChargebackLootIdField.IsValid())
	{
		ChargebackLootId_IsNull = JsonChargebackLootIdField->IsNull();
		ChargebackLootId_IsSet = ChargebackLootId_IsNull || TryGetJsonValue(JsonChargebackLootIdField, ChargebackLootId_Optional);
		ParseSuccess &= ChargebackLootId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonChargebackReversalLootIdField = (*Object)->TryGetField(TEXT("chargeback_reversal_loot_id"));
	if (JsonChargebackReversalLootIdField.IsValid())
	{
		ChargebackReversalLootId_IsNull = JsonChargebackReversalLootIdField->IsNull();
		ChargebackReversalLootId_IsSet = ChargebackReversalLootId_IsNull || TryGetJsonValue(JsonChargebackReversalLootIdField, ChargebackReversalLootId_Optional);
		ParseSuccess &= ChargebackReversalLootId_IsSet;
	}

	return ParseSuccess;
}

