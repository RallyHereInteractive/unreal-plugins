// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "PlayerOrderEntry.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_PlayerOrderEntry

void FRHAPI_PlayerOrderEntry::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("type"));
	RallyHereAPI::WriteJsonValue(Writer, EnumToString(Type));
	if (LootId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("loot_id"));
		if (LootId_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, LootId_Optional);
	}
	Writer->WriteIdentifierPrefix(TEXT("quantity"));
	RallyHereAPI::WriteJsonValue(Writer, Quantity);
	if (VendorVersion_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("vendor_version"));
		if (VendorVersion_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, VendorVersion_Optional);
	}
	if (VendorEtag_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("vendor_etag"));
		if (VendorEtag_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, VendorEtag_Optional);
	}
	if (DynamicBundleLootIds_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("dynamic_bundle_loot_ids"));
		if (DynamicBundleLootIds_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, DynamicBundleLootIds_Optional);
	}
	if (PurchasePrice_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("purchase_price"));
		if (PurchasePrice_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, PurchasePrice_Optional);
	}
	if (ExternalTranId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("external_tran_id"));
		if (ExternalTranId_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, ExternalTranId_Optional);
	}
	if (ExternalItemSku_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("external_item_sku"));
		if (ExternalItemSku_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, ExternalItemSku_Optional);
	}
	if (UseInventoryBucket_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("use_inventory_bucket"));
		if (UseInventoryBucket_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, EnumToString(UseInventoryBucket_Optional));
	}
	if (PlayerPortalEventId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("player_portal_event_id"));
		if (PlayerPortalEventId_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, PlayerPortalEventId_Optional);
	}
	if (InventoryId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("inventory_id"));
		if (InventoryId_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, InventoryId_Optional);
	}
	if (LegacyInventoryId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("legacy_inventory_id"));
		if (LegacyInventoryId_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, LegacyInventoryId_Optional);
	}
	if (ItemId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("item_id"));
		if (ItemId_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, ItemId_Optional);
	}
	if (Expires_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("expires"));
		if (Expires_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Expires_Optional);
	}
	if (XpQuantityTransformType_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("xp_quantity_transform_type"));
		RallyHereAPI::WriteJsonValue(Writer, EnumToString(XpQuantityTransformType_Optional));
	}
	if (HardQuantityMaximum_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("hard_quantity_maximum"));
		if (HardQuantityMaximum_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, HardQuantityMaximum_Optional);
	}
	if (InventoryOperation_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("inventory_operation"));
		RallyHereAPI::WriteJsonValue(Writer, EnumToString(InventoryOperation_Optional));
	}
	if (InventorySelectorType_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("inventory_selector_type"));
		RallyHereAPI::WriteJsonValue(Writer, EnumToString(InventorySelectorType_Optional));
	}
	if (QuantityMultInventoryItemId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("quantity_mult_inventory_item_id"));
		if (QuantityMultInventoryItemId_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, QuantityMultInventoryItemId_Optional);
	}
	if (TimeFrameId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("time_frame_id"));
		if (TimeFrameId_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, TimeFrameId_Optional);
	}
	if (CustomData_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("custom_data"));
		if (CustomData_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, CustomData_Optional);
	}
	Writer->WriteIdentifierPrefix(TEXT("entry_id"));
	RallyHereAPI::WriteJsonValue(Writer, EntryId);
	if (Result_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("result"));
		RallyHereAPI::WriteJsonValue(Writer, EnumToString(Result_Optional));
	}
	if (Details_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("details"));
		RallyHereAPI::WriteJsonValue(Writer, Details_Optional);
	}
	Writer->WriteObjectEnd();
}

bool FRHAPI_PlayerOrderEntry::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	const TSharedPtr<FJsonValue> JsonTypeField = (*Object)->TryGetField(TEXT("type"));
	const bool Type_IsValid = JsonTypeField.IsValid() && (!JsonTypeField->IsNull() && TryGetJsonValue(JsonTypeField, Type));
	ParseSuccess &= Type_IsValid; 
	const TSharedPtr<FJsonValue> JsonLootIdField = (*Object)->TryGetField(TEXT("loot_id"));
	if (JsonLootIdField.IsValid())
	{
		LootId_IsNull = JsonLootIdField->IsNull();
		LootId_IsSet = LootId_IsNull || TryGetJsonValue(JsonLootIdField, LootId_Optional);
		ParseSuccess &= LootId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonQuantityField = (*Object)->TryGetField(TEXT("quantity"));
	const bool Quantity_IsValid = JsonQuantityField.IsValid() && (!JsonQuantityField->IsNull() && TryGetJsonValue(JsonQuantityField, Quantity));
	ParseSuccess &= Quantity_IsValid; 
	const TSharedPtr<FJsonValue> JsonVendorVersionField = (*Object)->TryGetField(TEXT("vendor_version"));
	if (JsonVendorVersionField.IsValid())
	{
		VendorVersion_IsNull = JsonVendorVersionField->IsNull();
		VendorVersion_IsSet = VendorVersion_IsNull || TryGetJsonValue(JsonVendorVersionField, VendorVersion_Optional);
		ParseSuccess &= VendorVersion_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonVendorEtagField = (*Object)->TryGetField(TEXT("vendor_etag"));
	if (JsonVendorEtagField.IsValid())
	{
		VendorEtag_IsNull = JsonVendorEtagField->IsNull();
		VendorEtag_IsSet = VendorEtag_IsNull || TryGetJsonValue(JsonVendorEtagField, VendorEtag_Optional);
		ParseSuccess &= VendorEtag_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonDynamicBundleLootIdsField = (*Object)->TryGetField(TEXT("dynamic_bundle_loot_ids"));
	if (JsonDynamicBundleLootIdsField.IsValid())
	{
		DynamicBundleLootIds_IsNull = JsonDynamicBundleLootIdsField->IsNull();
		DynamicBundleLootIds_IsSet = DynamicBundleLootIds_IsNull || TryGetJsonValue(JsonDynamicBundleLootIdsField, DynamicBundleLootIds_Optional);
		ParseSuccess &= DynamicBundleLootIds_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonPurchasePriceField = (*Object)->TryGetField(TEXT("purchase_price"));
	if (JsonPurchasePriceField.IsValid())
	{
		PurchasePrice_IsNull = JsonPurchasePriceField->IsNull();
		PurchasePrice_IsSet = PurchasePrice_IsNull || TryGetJsonValue(JsonPurchasePriceField, PurchasePrice_Optional);
		ParseSuccess &= PurchasePrice_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonExternalTranIdField = (*Object)->TryGetField(TEXT("external_tran_id"));
	if (JsonExternalTranIdField.IsValid())
	{
		ExternalTranId_IsNull = JsonExternalTranIdField->IsNull();
		ExternalTranId_IsSet = ExternalTranId_IsNull || TryGetJsonValue(JsonExternalTranIdField, ExternalTranId_Optional);
		ParseSuccess &= ExternalTranId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonExternalItemSkuField = (*Object)->TryGetField(TEXT("external_item_sku"));
	if (JsonExternalItemSkuField.IsValid())
	{
		ExternalItemSku_IsNull = JsonExternalItemSkuField->IsNull();
		ExternalItemSku_IsSet = ExternalItemSku_IsNull || TryGetJsonValue(JsonExternalItemSkuField, ExternalItemSku_Optional);
		ParseSuccess &= ExternalItemSku_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonUseInventoryBucketField = (*Object)->TryGetField(TEXT("use_inventory_bucket"));
	if (JsonUseInventoryBucketField.IsValid())
	{
		UseInventoryBucket_IsNull = JsonUseInventoryBucketField->IsNull();
		UseInventoryBucket_IsSet = UseInventoryBucket_IsNull || TryGetJsonValue(JsonUseInventoryBucketField, UseInventoryBucket_Optional);
		ParseSuccess &= UseInventoryBucket_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonPlayerPortalEventIdField = (*Object)->TryGetField(TEXT("player_portal_event_id"));
	if (JsonPlayerPortalEventIdField.IsValid())
	{
		PlayerPortalEventId_IsNull = JsonPlayerPortalEventIdField->IsNull();
		PlayerPortalEventId_IsSet = PlayerPortalEventId_IsNull || TryGetJsonValue(JsonPlayerPortalEventIdField, PlayerPortalEventId_Optional);
		ParseSuccess &= PlayerPortalEventId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonInventoryIdField = (*Object)->TryGetField(TEXT("inventory_id"));
	if (JsonInventoryIdField.IsValid())
	{
		InventoryId_IsNull = JsonInventoryIdField->IsNull();
		InventoryId_IsSet = InventoryId_IsNull || TryGetJsonValue(JsonInventoryIdField, InventoryId_Optional);
		ParseSuccess &= InventoryId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonLegacyInventoryIdField = (*Object)->TryGetField(TEXT("legacy_inventory_id"));
	if (JsonLegacyInventoryIdField.IsValid())
	{
		LegacyInventoryId_IsNull = JsonLegacyInventoryIdField->IsNull();
		LegacyInventoryId_IsSet = LegacyInventoryId_IsNull || TryGetJsonValue(JsonLegacyInventoryIdField, LegacyInventoryId_Optional);
		ParseSuccess &= LegacyInventoryId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonItemIdField = (*Object)->TryGetField(TEXT("item_id"));
	if (JsonItemIdField.IsValid())
	{
		ItemId_IsNull = JsonItemIdField->IsNull();
		ItemId_IsSet = ItemId_IsNull || TryGetJsonValue(JsonItemIdField, ItemId_Optional);
		ParseSuccess &= ItemId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonExpiresField = (*Object)->TryGetField(TEXT("expires"));
	if (JsonExpiresField.IsValid())
	{
		Expires_IsNull = JsonExpiresField->IsNull();
		Expires_IsSet = Expires_IsNull || TryGetJsonValue(JsonExpiresField, Expires_Optional);
		ParseSuccess &= Expires_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonXpQuantityTransformTypeField = (*Object)->TryGetField(TEXT("xp_quantity_transform_type"));
	if (JsonXpQuantityTransformTypeField.IsValid())
	{
		XpQuantityTransformType_IsSet = TryGetJsonValue(JsonXpQuantityTransformTypeField, XpQuantityTransformType_Optional);
		ParseSuccess &= XpQuantityTransformType_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonHardQuantityMaximumField = (*Object)->TryGetField(TEXT("hard_quantity_maximum"));
	if (JsonHardQuantityMaximumField.IsValid())
	{
		HardQuantityMaximum_IsNull = JsonHardQuantityMaximumField->IsNull();
		HardQuantityMaximum_IsSet = HardQuantityMaximum_IsNull || TryGetJsonValue(JsonHardQuantityMaximumField, HardQuantityMaximum_Optional);
		ParseSuccess &= HardQuantityMaximum_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonInventoryOperationField = (*Object)->TryGetField(TEXT("inventory_operation"));
	if (JsonInventoryOperationField.IsValid())
	{
		InventoryOperation_IsSet = TryGetJsonValue(JsonInventoryOperationField, InventoryOperation_Optional);
		ParseSuccess &= InventoryOperation_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonInventorySelectorTypeField = (*Object)->TryGetField(TEXT("inventory_selector_type"));
	if (JsonInventorySelectorTypeField.IsValid())
	{
		InventorySelectorType_IsSet = TryGetJsonValue(JsonInventorySelectorTypeField, InventorySelectorType_Optional);
		ParseSuccess &= InventorySelectorType_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonQuantityMultInventoryItemIdField = (*Object)->TryGetField(TEXT("quantity_mult_inventory_item_id"));
	if (JsonQuantityMultInventoryItemIdField.IsValid())
	{
		QuantityMultInventoryItemId_IsNull = JsonQuantityMultInventoryItemIdField->IsNull();
		QuantityMultInventoryItemId_IsSet = QuantityMultInventoryItemId_IsNull || TryGetJsonValue(JsonQuantityMultInventoryItemIdField, QuantityMultInventoryItemId_Optional);
		ParseSuccess &= QuantityMultInventoryItemId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonTimeFrameIdField = (*Object)->TryGetField(TEXT("time_frame_id"));
	if (JsonTimeFrameIdField.IsValid())
	{
		TimeFrameId_IsNull = JsonTimeFrameIdField->IsNull();
		TimeFrameId_IsSet = TimeFrameId_IsNull || TryGetJsonValue(JsonTimeFrameIdField, TimeFrameId_Optional);
		ParseSuccess &= TimeFrameId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonCustomDataField = (*Object)->TryGetField(TEXT("custom_data"));
	if (JsonCustomDataField.IsValid())
	{
		CustomData_IsNull = JsonCustomDataField->IsNull();
		CustomData_IsSet = CustomData_IsNull || TryGetJsonValue(JsonCustomDataField, CustomData_Optional);
		ParseSuccess &= CustomData_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonEntryIdField = (*Object)->TryGetField(TEXT("entry_id"));
	const bool EntryId_IsValid = JsonEntryIdField.IsValid() && (!JsonEntryIdField->IsNull() && TryGetJsonValue(JsonEntryIdField, EntryId));
	ParseSuccess &= EntryId_IsValid; 
	const TSharedPtr<FJsonValue> JsonResultField = (*Object)->TryGetField(TEXT("result"));
	if (JsonResultField.IsValid())
	{
		Result_IsSet = TryGetJsonValue(JsonResultField, Result_Optional);
		ParseSuccess &= Result_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonDetailsField = (*Object)->TryGetField(TEXT("details"));
	if (JsonDetailsField.IsValid())
	{
		Details_IsSet = TryGetJsonValue(JsonDetailsField, Details_Optional);
		ParseSuccess &= Details_IsSet;
	}

	return ParseSuccess;
}

