// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "PriceBreakpoint.h"
#include "RallyHereAPIModule.h"
#include "RallyHereAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereAPI::ToStringFormatArg;
using RallyHereAPI::WriteJsonValue;
using RallyHereAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_PriceBreakpoint

void FRHAPI_PriceBreakpoint::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
	Writer->WriteObjectStart();
	if (PriceItemUuid_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("price_item_uuid"));
		if (PriceItemUuid_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, PriceItemUuid_Optional);
	}
	if (PriceItemId_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("price_item_id"));
		if (PriceItemId_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, PriceItemId_Optional);
	}
	Writer->WriteIdentifierPrefix(TEXT("quantity"));
	RallyHereAPI::WriteJsonValue(Writer, Quantity);
	if (Price_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("price"));
		if (Price_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Price_Optional);
	}
	if (Currencies_IsSet)
	{
		Writer->WriteIdentifierPrefix(TEXT("currencies"));
		if (Currencies_IsNull)
			WriteJsonValue(Writer, nullptr);
		else
		RallyHereAPI::WriteJsonValue(Writer, Currencies_Optional);
	}
	Writer->WriteObjectEnd();
}

bool FRHAPI_PriceBreakpoint::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	const TSharedPtr<FJsonValue> JsonPriceItemUuidField = (*Object)->TryGetField(TEXT("price_item_uuid"));
	if (JsonPriceItemUuidField.IsValid())
	{
		PriceItemUuid_IsNull = JsonPriceItemUuidField->IsNull();
		PriceItemUuid_IsSet = PriceItemUuid_IsNull || TryGetJsonValue(JsonPriceItemUuidField, PriceItemUuid_Optional);
		ParseSuccess &= PriceItemUuid_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonPriceItemIdField = (*Object)->TryGetField(TEXT("price_item_id"));
	if (JsonPriceItemIdField.IsValid())
	{
		PriceItemId_IsNull = JsonPriceItemIdField->IsNull();
		PriceItemId_IsSet = PriceItemId_IsNull || TryGetJsonValue(JsonPriceItemIdField, PriceItemId_Optional);
		ParseSuccess &= PriceItemId_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonQuantityField = (*Object)->TryGetField(TEXT("quantity"));
	const bool Quantity_IsValid = JsonQuantityField.IsValid() && (!JsonQuantityField->IsNull() && TryGetJsonValue(JsonQuantityField, Quantity));
	ParseSuccess &= Quantity_IsValid; 
	const TSharedPtr<FJsonValue> JsonPriceField = (*Object)->TryGetField(TEXT("price"));
	if (JsonPriceField.IsValid())
	{
		Price_IsNull = JsonPriceField->IsNull();
		Price_IsSet = Price_IsNull || TryGetJsonValue(JsonPriceField, Price_Optional);
		ParseSuccess &= Price_IsSet;
	}
	const TSharedPtr<FJsonValue> JsonCurrenciesField = (*Object)->TryGetField(TEXT("currencies"));
	if (JsonCurrenciesField.IsValid())
	{
		Currencies_IsNull = JsonCurrenciesField->IsNull();
		Currencies_IsSet = Currencies_IsNull || TryGetJsonValue(JsonCurrenciesField, Currencies_Optional);
		ParseSuccess &= Currencies_IsSet;
	}

	return ParseSuccess;
}

