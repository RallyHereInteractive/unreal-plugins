{{!
Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
Copyright 2022-2023 RallyHere Interactive

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
}}
{{>licenseInfo}}
#include "{{unrealModuleName}}BaseModel.h"
#include "{{unrealModuleName}}Helpers.h"
#include "{{unrealModuleName}}HttpRequester.h"
#include "{{unrealModuleName}}AuthContext.h"
#include "{{unrealModuleName}}Module.h"
#include "{{unrealModuleName}}Settings.h"
#include "Serialization/JsonReader.h"
#include "Serialization/JsonSerializer.h"
#include "HttpModule.h"
#include "Async/AsyncWork.h"

{{#cppNamespaceDeclarations}}
namespace {{this}}
{
{{/cppNamespaceDeclarations}}

bool FHttpRetryManager::Tick(float DeltaTime)
{
	PRAGMA_DISABLE_DEPRECATION_WARNINGS
	FManager::Update();
	PRAGMA_ENABLE_DEPRECATION_WARNINGS
	return true;
}

FResponse::JsonPayloadType FResponse::DefaultJsonPayload = FResponse::JsonPayloadType();
FResponse::StringPayloadType FResponse::DefaultStringPayload = FResponse::StringPayloadType();

FResponse::FResponse(FRequestMetadata InRequestMetadata) :
	Successful(false),HasParseErrors(false),
	ResponseCode{ EHttpResponseCodes::Type::Unknown },
	HttpResponse{},
	RequestMetadata{ MoveTemp(InRequestMetadata) }
{
}

void FResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	ResponseCode = InHttpResponseCode;
	SetSuccessful(EHttpResponseCodes::IsOk(InHttpResponseCode));
}

FString FResponse::GetHttpResponseCodeDescription(EHttpResponseCodes::Type InHttpResponseCode) const
{
	return EHttpResponseCodes::GetDescription(InHttpResponseCode).ToString();
}

bool FResponse::ParseContent()
{
	FString ContentType = HttpResponse->GetContentType();
	ContentType.TrimStartAndEndInline();

	if (ContentType.IsEmpty() || RequestMetadata.Flags.bDisableReadResponseContent)
	{
		return ParseTypelessContent();
	}
	else if (ContentType.StartsWith(TEXT("application/json")) || ContentType.StartsWith("text/json"))
	{
		return ParseJsonTypeContent();
	}
	else if (ContentType.StartsWith(TEXT("text/")))
	{
		return ParseStringTypeContent();
	}
	else if (ContentType.StartsWith(TEXT("application/octet-stream")))
	{
		return ParseBinaryTypeContent();
	}
	else
	{
		UE_LOG(Log{{unrealModuleName}}, Warning, TEXT("Failed to recognize http response type: %s"), *ContentType);
		return ParseUnknownTypeContent();
	}
}

bool FResponse::ParseTypelessContent()
{
	check(HttpResponse != nullptr);

	ClearPayload();

	return true; // Successfully parsed
}

bool FResponse::ParseStringTypeContent()
{
	check(HttpResponse != nullptr);

	SetPayload<StringPayloadType>(HttpResponse->GetContentAsString());
	return true; // Successfully parsed
}

bool FResponse::ParseJsonTypeContent()
{
	check(HttpResponse != nullptr);

	ClearPayload();

	TSharedPtr<FJsonValue> JsonValue;
	const FString ContentAsString = HttpResponse->GetContentAsString();

	if (ContentAsString.Len() == 0 || ContentAsString.TrimStart().Len() == 0)
	{
		// if the response was empty or all whitespace, do not create a json object, but return as non-error
		return true;
	}

	auto Reader = TJsonReaderFactory<>::Create(ContentAsString);

	{
		SCOPED_NAMED_EVENT(RallyHere_DeserializeJsonContent, FColor::Purple);
		
		if (!FJsonSerializer::Deserialize(Reader, JsonValue))
		{
			if (Reader->GetErrorMessage().StartsWith(TEXT("Open Curly or Square Brace token expected, but not found")))
			{
				FString ContentArrayWrapper = TEXT("[") + ContentAsString + TEXT("]");
				Reader = TJsonReaderFactory<>::Create(ContentArrayWrapper);
				if (FJsonSerializer::Deserialize(Reader, JsonValue) && JsonValue.IsValid())
				{
					TArray<TSharedPtr<FJsonValue>>* OutArray;
					if (JsonValue->TryGetArray(OutArray) && OutArray != nullptr && OutArray->Num() > 0)
					{
						JsonValue = (*OutArray).Last();
					}
				}
			}
		}
	}

	if (JsonValue.IsValid())
	{
		SCOPED_NAMED_EVENT(RallyHere_ParseJsonContent, FColor::Purple);
		SetPayload<JsonPayloadType>(JsonValue);

		// attempt to parse the json with the response object (for successful responses, this will fill in the Content subobject)
		HasParseErrors = !FromJson(JsonValue);
		if (HasParseErrors)
		{
			// Report the parse error but do not mark the request as unsuccessful. Data could be partial or malformed, but the request succeeded.
			UE_LOG(Log{{unrealModuleName}}, Warning, TEXT("Parsed JSON successfully, but failed to ingest into API structures (note: failure may be partial):\n%s"), *ContentAsString);
		}
		else
		{
			// Successfully parsed into response
		}
		
		// we received a valid resposne and attempted to parse into unreal structures, so return success
		return true;
	}
	else
	{
		// Report the parse error, as this was supposed to be json but could not be serialized as such
		UE_LOG(Log{{unrealModuleName}}, Error, TEXT("Failed to deserialize JSON content in Http response:\n%s"), *ContentAsString);
		return false;
	}
}

bool FResponse::ParseBinaryTypeContent()
{
	check(HttpResponse != nullptr);

	SetPayload<BinaryPayloadType>(MakeArrayView(HttpResponse->GetContent()));
	return true; // Successfully parsed
}

bool FResponse::ParseUnknownTypeContent()
{
	check(HttpResponse != nullptr);

	// load the response content as binary data, since we do not have a better way to parse it
	SetPayload<BinaryPayloadType>(MakeArrayView(HttpResponse->GetContent()));

	return false; // could not parse unknown type
}

void FAPI::SetURL(const FString& InUrl)
{
	Url = InUrl;
}

FString FAPI::GetURL() const
{
	return Url;
}

FName FAPI::GetName() const
{
	return Name;
}

void FAPI::AddHeaderParam(const FString& Key, const FString& Value)
{
	AdditionalHeaderParams.Add(Key, Value);
}

void FAPI::ClearHeaderParams()
{
	AdditionalHeaderParams.Reset();
}

bool FAPI::IsValid() const
{
	if (Url.IsEmpty())
	{
		UE_LOG(Log{{unrealModuleName}}, Error, TEXT("Endpoint Url is not set, request cannot be performed"));
		return false;
	}

	return true;
}

void FAPI::SetHttpRetryManager(const TSharedRef<FHttpRetrySystem::FManager>& InRetryManager)
{
	if(InRetryManager != RetryManager)
	{
		DefaultRetryManager.Reset();
		RetryManager = InRetryManager;
	}
}

FHttpRequestRef FAPI::CreateHttpRequest(const FRequest& Request) const
{
	auto HttpRequest = FHttpModule::Get().CreateRequest();
	if (Request.GetRetryParams().IsSet())
	{
		if (!RetryManager.IsValid())
		{
			// Create default retry manager if none was specified
			DefaultRetryManager = MakeShared<FHttpRetryManager>(6, 60);
			RetryManager = DefaultRetryManager.ToSharedRef();
		}

		check(RetryManager.IsValid());
		auto RetryManagerRef = RetryManager.ToSharedRef();

		const FHttpRetryParams& Params = Request.GetRetryParams().GetValue();

		// make a new request wrapper that will handle retries
		HttpRequest = MakeShareable(new FHttpRetryRequest(
			RetryManagerRef,
			HttpRequest,
			Params
		));
	}

	return HttpRequest;
}


struct FHandleResponseParseAsyncTask : public FNonAbandonableTask
{
	FHandleResponseParseAsyncTask(const TSharedRef<FResponse>& InResponse, const FAPI_OnHandleResponseAsyncComplete& InDelegate)
		: StoredResponse(InResponse)
		, StoredDelegate(InDelegate)
	{
	}

	/** Returns the stat id for this task */
	FORCEINLINE TStatId GetStatId() const
	{
		RETURN_QUICK_DECLARE_CYCLE_STAT(FHandleResponseParseAsyncTask, STATGROUP_ThreadPoolAsyncTasks);
	}

	void DoWork()
	{
		ParseResponse(StoredResponse, StoredDelegate);
	}
	
	
	static void ParseResponse(TSharedRef<FResponse> Response, FAPI_OnHandleResponseAsyncComplete Delegate)
	{
		bool bParsedHeaders = false;
		bool bParsedContent = false;
		
		{
			SCOPED_NAMED_EVENT(RallyHere_ParseResponse, FColor::Purple);
			Response->ParseResponse(bParsedHeaders, bParsedContent);
		}

		if (!bParsedHeaders)
		{
			// Report the parse error but do not mark the request as unsuccessful. Data could be partial or malformed, but the request succeeded.
			UE_LOG(Log{{unrealModuleName}}, Error, TEXT("Failed to parse Http response headers"));
		}

		if (!bParsedContent)
		{
			// Report the parse error but do not mark the request as unsuccessful. Data could be partial or malformed, but the request succeeded.
			UE_LOG(Log{{unrealModuleName}}, Warning, TEXT("Failed to parse Http response content"));
		}
		
		// if already in the game thread, dispatch immediately, else dispatch on game thread via deferral
		bool bSuccess = bParsedHeaders && bParsedContent;
		if (IsInGameThread())
		{
			Delegate.ExecuteIfBound(bSuccess);
		}
		else
		{
			DECLARE_CYCLE_STAT(TEXT("FHandleResponseParseAsyncTask Callback"), FHandleResponseParseAsyncTask_Callback, STATGROUP_TaskGraphTasks);
		
			const FGraphEventRef Task = FSimpleDelegateGraphTask::CreateAndDispatchWhenReady(
				FSimpleDelegateGraphTask::FDelegate::CreateLambda([Delegate, bSuccess]()
					{
						Delegate.ExecuteIfBound(bSuccess);
					}),
				GET_STATID(FHandleResponseParseAsyncTask_Callback),
				nullptr,
				ENamedThreads::GameThread);
		}
		
	}

	TSharedRef<FResponse> StoredResponse;
	FAPI_OnHandleResponseAsyncComplete StoredDelegate;
};


void FAPI::HandleResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, TSharedPtr<FAuthContext> AuthContext, TSharedRef<FResponse> InOutResponse, const FHttpRequestCompleteDelegate& ResponseDelegate, const FSimpleDelegate& CompletionDelegate, const FRequestMetadata& RequestMetadata, int32 Priority)
{
	SCOPED_NAMED_EVENT(RallyHere_HandleResponse, FColor::Purple);

	InOutResponse->SetHttpResponse(HttpResponse);
	InOutResponse->SetSuccessful(bSucceeded);
	
	// set up a lambda for things we want to run regardless of how completion happens
	auto AlwaysRunOnComplete = [HttpRequest, HttpResponse, bSucceeded, AuthContext, InOutResponse, ResponseDelegate, CompletionDelegate, RequestMetadata, Priority, API = AsShared()](bool bWillRetryWithRefreshedAuth)
	{
		{
			SCOPED_NAMED_EVENT(RallyHere_BroadcastRequestCompleted, FColor::Purple);
			API->OnRequestCompleted().Broadcast(InOutResponse.Get(), HttpRequest, HttpResponse, bSucceeded, bWillRetryWithRefreshedAuth);
		}

		if (!bWillRetryWithRefreshedAuth)
		{
			CompletionDelegate.ExecuteIfBound();
		}
	};
	
	if (!bSucceeded || !HttpResponse.IsValid())
	{
		AlwaysRunOnComplete(false);
		
		return;
	}

	InOutResponse->SetHttpResponseCode((EHttpResponseCodes::Type)HttpResponse->GetResponseCode());
	
	// set up a delegate to run on completion
	auto OnAsyncParseComplete = FAPI_OnHandleResponseAsyncComplete::CreateLambda([AlwaysRunOnComplete, HttpRequest, HttpResponse, bSucceeded, AuthContext, InOutResponse, ResponseDelegate, CompletionDelegate, RequestMetadata, Priority, API = AsShared()](bool bSuccessfullyParsed)
	{
		bool bWillRetryWithRefreshedAuth = false;
		if (bSuccessfullyParsed)
		{
			bWillRetryWithRefreshedAuth = API->OnHandleResponseAsyncComplete(HttpRequest, HttpResponse, bSucceeded, AuthContext, InOutResponse, ResponseDelegate, CompletionDelegate, RequestMetadata, Priority);
		}
		
		AlwaysRunOnComplete(bWillRetryWithRefreshedAuth);
	});
	
	// create an async task, which will potentially be run synchronously
	auto Task = new FAutoDeleteAsyncTask<FHandleResponseParseAsyncTask>(InOutResponse, OnAsyncParseComplete);
	
	// parse the response asynchronously
	const auto MaxContentLength = GetDefault<U{{unrealModuleName}}Settings>()->InlineJsonParseMaximumSize;
	const auto ContentLength = HttpResponse.IsValid() ? HttpResponse->GetContentLength() : 0;
	bool bParseAsync = MaxContentLength > 0 && ContentLength >= MaxContentLength;
	if (!bParseAsync)
	{
		// process in line
		Task->StartSynchronousTask();
	}
	else
	{
		// todo: kick off a background worker
		Task->StartBackgroundTask();
	}
}


bool FAPI::OnHandleResponseAsyncComplete(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, TSharedPtr<FAuthContext> AuthContext, TSharedRef<FResponse> InOutResponse, const FHttpRequestCompleteDelegate& ResponseDelegate, const FSimpleDelegate& CompletionDelegate, const FRequestMetadata& RequestMetadata, int32 Priority)
{
	SCOPED_NAMED_EVENT(RallyHere_OnHandleResponseAsyncComplete, FColor::Purple);
	bool bWillRetryWithRefreshedAuth = false;

	// attempt reauth for certain error codes if an auth context was provided
	if (AuthContext.IsValid())
	{
		if (InOutResponse->GetHttpResponseCode() == EHttpResponseCodes::Denied
			|| InOutResponse->GetHttpResponseCode() == EHttpResponseCodes::Forbidden) // some consoles forcibly retry 401 errors with a modified body, which can generate 403 errors, so check those for an auth success flag
		{
			auto Retry = MakeShared<FRequestPendingAuthRetry>();
			Retry->HttpRequest = HttpRequest;
			Retry->AuthContext = AuthContext;

			// set a callback handle
			Retry->Handle = AuthContext->OnLoginComplete().AddSP(this, &FAPI::RetryRequestAfterAuth, Retry, ResponseDelegate, RequestMetadata, Priority);

			if (AuthContext->ConditionalRefreshOnFailedResponse(InOutResponse.Get(), RequestMetadata))
			{
				// Don't submit the response for this request, we are going to retry it.
				bWillRetryWithRefreshedAuth = true;
			}
			else
			{
				// failed to conditionally refresh, so remove the handle, and return completion
				AuthContext->OnLoginComplete().Remove(Retry->Handle);
			}
		}
	}

	return bWillRetryWithRefreshedAuth;
}

void FAPI::RetryRequestAfterAuth(bool bAuthSuccess, TSharedRef<FRequestPendingAuthRetry> Request, FHttpRequestCompleteDelegate ResponseDelegate, FRequestMetadata RequestMetadata, int32 Priority)
{
	Request->AuthContext->OnLoginComplete().Remove(Request->Handle);
	Request->AuthContext->AddBearerToken(Request->HttpRequest);

	if (auto* HttpRequester = F{{unrealModuleName}}HttpRequester::Get())
	{
		TSharedPtr<F{{unrealModuleName}}HttpRequestData> RequestData = MakeShared<F{{unrealModuleName}}HttpRequestData>(Request->HttpRequest.ToSharedRef(), AsShared(), Priority);
		RequestMetadata.RetryCount++;
		RequestData->SetMetadata(RequestMetadata);
		RequestData->SetDelegate(ResponseDelegate);

		HttpRequester->EnqueueHttpRequest(RequestData);
	}
}

{{#cppNamespaceDeclarations}}
}
{{/cppNamespaceDeclarations}}
