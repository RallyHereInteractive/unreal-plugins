{{!
Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
Copyright 2022-2023 RallyHere Interactive

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
}}
#include "CoreMinimal.h"
#include "{{unrealModuleName}}HttpRequester.h"

{{#cppNamespaceDeclarations}}
namespace {{this}}
{
{{/cppNamespaceDeclarations}}

F{{unrealModuleName}}HttpRequester* F{{unrealModuleName}}HttpRequester::Singleton = nullptr;

F{{unrealModuleName}}HttpRequester::F{{unrealModuleName}}HttpRequester()
{
    MaxSimultaneousRequests = 15;
    PendingRequestCount = 0;
}

void F{{unrealModuleName}}HttpRequester::TryExecuteNextRequest()
{
    if (!CanExecuteRequest())
    {
        return;
    }

    TArray<int32> Keys;

    if (HttpRequestQueue.GetKeys(Keys) > 0)
    {
        Keys.Sort();
        for (int32& Key : Keys)
        {
            if (auto findItem = HttpRequestQueue.Find(Key))
            {
                while ((*findItem).Num())
                {
                    const auto Request = (*findItem).Pop();
                    Request->HttpRequest->OnProcessRequestComplete().BindRaw(this, &F{{unrealModuleName}}HttpRequester::OnResponse, Request->ResponseDelegate);
                    if (Request->HttpRequest->ProcessRequest())
                    {
                        PendingRequestCount++;
                    }

                    {
                        SCOPED_NAMED_EVENT(RallyHere_BroadcastRequestStarted, FColor::Purple);
                        Request->API.OnRequestStarted().Broadcast(Request->Metadata, Request->HttpRequest);
                    }

                    if (MaxSimultaneousRequests > 0 && PendingRequestCount >= MaxSimultaneousRequests)
                    {
                        break;
                    }
                }

                if ((*findItem).Num() == 0)
                {
                    HttpRequestQueue.Remove(Key);
                }
            }

            if (MaxSimultaneousRequests > 0 && PendingRequestCount >= MaxSimultaneousRequests)
            {
                return;
            }
        }
    }
}

void F{{unrealModuleName}}HttpRequester::OnResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FHttpRequestCompleteDelegate ResponseDelegate)
{
    PendingRequestCount--;
    ResponseDelegate.Execute(HttpRequest, HttpResponse, bSucceeded);
    // Whenever we get a request response try to execute new requests if we have any.
    QueueNextRequestCall();
}

void F{{unrealModuleName}}HttpRequester::EnqueueHttpRequest(TSharedPtr<struct F{{unrealModuleName}}HttpRequestData> RequestData)
{
    if (auto findItem = HttpRequestQueue.Find(RequestData->Priority))
    {
        (*findItem).Insert(RequestData, 0);
    }
    else
    {
        HttpRequestQueue.Add(RequestData->Priority, {RequestData});
    }
    // Whenever we get a new request, try to execute requests
    QueueNextRequestCall();
}

void F{{unrealModuleName}}HttpRequester::QueueNextRequestCall()
{
    if (GIsEditor && !GIsPlayInEditorWorld)
    {
        TryExecuteNextRequest();
    }
    else
    {
        // Delay until next frame
        FTSTicker::GetCoreTicker().AddTicker(FTickerDelegate::CreateLambda([](float dts)
        {
            auto* Requester = F{{unrealModuleName}}HttpRequester::Get();
            if (Requester != nullptr)
            {
                Requester->TryExecuteNextRequest();
            }
            return false;
        }), 0.0f);
    }
}

{{#cppNamespaceDeclarations}}
}
{{/cppNamespaceDeclarations}}