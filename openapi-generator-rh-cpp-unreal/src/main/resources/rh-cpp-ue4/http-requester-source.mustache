{{!
Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
Copyright 2022-2023 RallyHere Interactive

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
}}
#include "CoreMinimal.h"
#include "{{unrealModuleName}}HttpRequester.h"

{{#cppNamespaceDeclarations}}
namespace {{this}}
{
{{/cppNamespaceDeclarations}}

TSharedPtr<F{{unrealModuleName}}HttpRequester> F{{unrealModuleName}}HttpRequester::Singleton = nullptr;

F{{unrealModuleName}}HttpRequester::F{{unrealModuleName}}HttpRequester()
{
	MaxSimultaneousRequests = 15;
	InFlightRequestCount = 0;
}

void F{{unrealModuleName}}HttpRequester::FlushRequestQueue(bool bIsExiting)
{
	// temporarily unlimit requests
	TGuardValue<int32> MaxRequestsGuard(MaxSimultaneousRequests, 0);

	// execute all queued requests
	TryExecuteNextRequest(bIsExiting);
}

void F{{unrealModuleName}}HttpRequester::TryExecuteNextRequest(bool bIsExiting)
{
	// this function is intended only to be run on the main game thread, as it can internally trigger delegates
	ensure(IsInGameThread());

	FScopeLock RequestQueueLock(&RequestQueueLockCS);

	if (HttpRequestQueue.IsEmpty() || (MaxSimultaneousRequests > 0 && InFlightRequestCount > MaxSimultaneousRequests))
	{
		return;
	}

	TArray<int32> Keys;

	if (HttpRequestQueue.GetKeys(Keys) > 0)
	{
		Keys.Sort();
		for (int32& Key : Keys)
		{
			if (auto findItem = HttpRequestQueue.Find(Key))
			{
				while ((*findItem).Num())
				{
					const auto Request = (*findItem).Pop();
					Request->Metadata.HttpQueuedTimestamp = FDateTime::Now();
					Request->HttpRequest->OnProcessRequestComplete().BindSP(AsShared(), &F{{unrealModuleName}}HttpRequester::OnResponse, Request->ResponseDelegate);
					if (Request->HttpRequest->ProcessRequest())
					{
						// increment pending request count, so we can keep track of how many requests are currently in-flight
						InFlightRequestCount++;
					}

					// do not fire callback if exiting
					if (!bIsExiting)
					{
						SCOPED_NAMED_EVENT(RallyHere_BroadcastRequestStarted, FColor::Purple);
						Request->API->OnRequestStarted().Broadcast(Request->Metadata, Request->HttpRequest);
					}

					if (MaxSimultaneousRequests > 0 && InFlightRequestCount >= MaxSimultaneousRequests)
					{
						break;
					}
				}

				if ((*findItem).Num() == 0)
				{
					HttpRequestQueue.Remove(Key);
				}
			}

			if (MaxSimultaneousRequests > 0 && InFlightRequestCount >= MaxSimultaneousRequests)
			{
				return;
			}
		}
	}
}

void F{{unrealModuleName}}HttpRequester::OnResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FHttpRequestCompleteDelegate ResponseDelegate)
{
	// execute the response delegate
	ResponseDelegate.Execute(HttpRequest, HttpResponse, bSucceeded);

	// decrement pending request count
	FScopeLock RequestQueueLock(&RequestQueueLockCS);
	InFlightRequestCount--;
}

void F{{unrealModuleName}}HttpRequester::EnqueueHttpRequest(TSharedPtr<struct F{{unrealModuleName}}HttpRequestData> RequestData)
{
	RequestData->Metadata.QueuedTimestamp = FDateTime::Now();

	FScopeLock RequestQueueLock(&RequestQueueLockCS);

	if (auto findItem = HttpRequestQueue.Find(RequestData->Priority))
	{
		(*findItem).Insert(RequestData, 0);
	}
	else
	{
		HttpRequestQueue.Add(RequestData->Priority, {RequestData});
	}
}

void F{{unrealModuleName}}HttpRequester::Tick(float DeltaTime)
{
	TryExecuteNextRequest();
}

{{#cppNamespaceDeclarations}}
}
{{/cppNamespaceDeclarations}}