{{!
Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
Copyright 2022-2023 RallyHere Interactive

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
}}
{{>licenseInfo}}
#include "{{unrealModuleName}}AuthContext.h"
#include "{{unrealModuleName}}Module.h"
#include "{{unrealModuleName}}Helpers.h"
//#include "AuthAPI.h"

{{#cppNamespaceDeclarations}}
namespace {{this}}
{
{{/cppNamespaceDeclarations}}

FAuthContext::FAuthContext(FString ClientId, FString ClientSecret) : 
	ClientId{std::move(ClientId)}, ClientSecret{std::move(ClientSecret)}, LoginComplete{}
{
	UpdateBasicAuthValue();
}

FAuthContext::FAuthContext() : LoginComplete{}
{
}

void FAuthContext::AuthFromWebURL(const FString& URL)
{
	int32 AccessTokenIndex = URL.Find("#access_token=");

	if (AccessTokenIndex > 0)
	{
		AccessToken = URL.RightChop(AccessTokenIndex + 14);
		int32 AccessTokenEndIndex = AccessToken.Find("&");
		if (AccessTokenEndIndex > 0)
		{
			AccessToken = AccessToken.Left(AccessTokenEndIndex);
		}

		{
			SCOPED_NAMED_EVENT(RallyHere_BroadcastLoginComplete, FColor::Purple);
			LoginComplete.Broadcast(true);
		}
	}
}

bool FAuthContext::AuthFromHttpResponse(const FHttpResponsePtr& HttpResponse)
{
    if(HttpResponse.IsValid())
    {
        const FString ContentStr = HttpResponse->GetContentAsString();
        TSharedPtr<FJsonObject> ResponseJsonObj;
        TSharedRef<TJsonReader<TCHAR>> JsonReader = TJsonReaderFactory<TCHAR>::Create(ContentStr);
    
        if (FJsonSerializer::Deserialize(JsonReader, ResponseJsonObj) && ResponseJsonObj.IsValid())
        {
            if (ResponseJsonObj->HasField("access_token"))
            {
                const FString Token = ResponseJsonObj->GetStringField("access_token");
                if (!Token.IsEmpty())
                {
                    AccessToken = Token;

                    SCOPED_NAMED_EVENT(RallyHere_BroadcastLoginComplete, FColor::Purple);
                    LoginComplete.Broadcast(true);

                    return true;
                }
            }
        }
    }
    return false;
}

	bool FAuthContext::Refresh()
	{
		LoginRequested.Broadcast();
		return true;
	}

bool FAuthContext::IsLoggedIn() const
{
		return !AccessToken.IsEmpty();
}

FString FAuthContext::GetAccessToken() const
{
		return AccessToken;
}

void FAuthContext::ClearAuthContext()
{
		AccessToken = "";
}

void FAuthContext::SetClientId(const FString& InClientId)
{
    ClientId = InClientId;
    UpdateBasicAuthValue();
}

void FAuthContext::SetClientSecret(const FString& InClientSecret)
{
    ClientSecret = InClientSecret;
    UpdateBasicAuthValue();
}

FString FAuthContext::GetClientId() const
{
    return ClientId.IsSet() ? ClientId.GetValue() : "";
}
    
bool FAuthContext::AddClientCredentials(const FHttpRequestRef& HttpRequest) const
{
    if (BasicAuthValue.IsSet())
    {
        HttpRequest->SetHeader(TEXT("Authorization"), *BasicAuthValue);
    }

    return true;
}

bool FAuthContext::AddClientCredentials(const FHttpRequestPtr& HttpRequest) const
{
    if (BasicAuthValue.IsSet())
    {
        HttpRequest->SetHeader(TEXT("Authorization"), *BasicAuthValue);
    }

    return true;
}

bool FAuthContext::AddBearerToken(const FHttpRequestRef& HttpRequest) const
{
    if (!IsLoggedIn())
    {
        return false;
    }
    HttpRequest->SetHeader(TEXT("Authorization"), TEXT("Bearer ") + GetAccessToken());
    return true;
}

bool FAuthContext::AddBearerToken(const FHttpRequestPtr& HttpRequest) const
{
    if (!IsLoggedIn())
    {
        return false;
    }
    HttpRequest->SetHeader(TEXT("Authorization"), TEXT("Bearer ") + GetAccessToken());
    return true;
}

void FAuthContext::UpdateBasicAuthValue()
{
    if (ClientId.IsSet() && !ClientId->IsEmpty() && ClientSecret.IsSet() && !ClientSecret->IsEmpty())
    {
        BasicAuthValue = TEXT("Basic ") + Base64UrlEncode(*ClientId + TEXT(":") + *ClientSecret);
    }
    else
    {
        BasicAuthValue.Reset();
    }
}
{{#cppNamespaceDeclarations}}
}
{{/cppNamespaceDeclarations}}
