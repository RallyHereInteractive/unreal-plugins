{{!
Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
Copyright 2022-2023 RallyHere Interactive

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
}}
{{>licenseInfo}}

#include "{{unrealModuleName}}Helpers.h"
#include "{{unrealModuleName}}Module.h"
#include "Interfaces/IHttpRequest.h"
#include "PlatformHttp.h"
#include "Misc/FileHelper.h"
#include "Misc/Paths.h"

{{unrealModelPrefix}}JsonValue {{unrealModelPrefix}}JsonObject::TryGetValue(const FString& FieldName) const
{
	if (!Obj)
	{
		return {{unrealModelPrefix}}JsonValue();
	}

	const TSharedPtr<FJsonValue> Field = Obj->TryGetField(FieldName);
	if (!Field)
	{
		return {{unrealModelPrefix}}JsonValue();
	}

	return {{unrealModelPrefix}}JsonValue(Field);
}

bool {{unrealModelPrefix}}JsonObject::HasField(const FString& FieldName) const
{
	return Obj && Obj->HasField(FieldName);
}

void {{unrealModelPrefix}}JsonObject::SetField(const FString& FieldName, const {{unrealModelPrefix}}JsonValue& Value) const
{
	if (Obj)
	{
		Obj->SetField(FieldName, Value.GetValue());
	}
}

void {{unrealModelPrefix}}JsonObject::RemoveField(const FString& FieldName) const
{
	if (Obj)
	{
		Obj->RemoveField(FieldName);
	}
}

float {{unrealModelPrefix}}JsonObject::GetNumberField(const FString& FieldName) const
{
	return Obj ? Obj->GetNumberField(FieldName) : float{};
}

bool {{unrealModelPrefix}}JsonObject::TryGetNumberField(const FString& FieldName, float& OutNumber) const
{
	if (Obj)
	{
		double Num;
		if (Obj->TryGetNumberField(FieldName, Num))
		{
			OutNumber = static_cast<float>(Num);
			return true;
		}
	}
	return false;
}

void {{unrealModelPrefix}}JsonObject::SetNumberField(const FString& FieldName, float Number) const
{
	if (Obj)
	{
		Obj->SetNumberField(FieldName, static_cast<double>(Number));
	}
}

bool {{unrealModelPrefix}}JsonObject::TryGetIntegerField(const FString& FieldName, int32& OutNumber) const
{
	return Obj && Obj->TryGetNumberField(FieldName, OutNumber);
}

bool {{unrealModelPrefix}}JsonObject::TryGetInteger64Field(const FString& FieldName, int64& OutNumber) const
{
	return Obj && Obj->TryGetNumberField(FieldName, OutNumber);
}

FString {{unrealModelPrefix}}JsonObject::GetStringField(const FString& FieldName) const
{
	return Obj ? Obj->GetStringField(FieldName) : FString{};
}

bool {{unrealModelPrefix}}JsonObject::TryGetStringField(const FString& FieldName, FString& OutString) const
{
	return Obj && Obj->TryGetStringField(FieldName, OutString);
}

bool {{unrealModelPrefix}}JsonObject::TryGetStringArrayField(const FString& FieldName, TArray<FString>& OutArray) const
{
	return Obj && Obj->TryGetStringArrayField(FieldName, OutArray);
}

void {{unrealModelPrefix}}JsonObject::SetStringField(const FString& FieldName, const FString& StringValue) const
{
	if (Obj)
	{
		Obj->SetStringField(FieldName, StringValue);
	}
}

bool {{unrealModelPrefix}}JsonObject::GetBoolField(const FString& FieldName) const
{
	return Obj && Obj->GetBoolField(FieldName);
}

bool {{unrealModelPrefix}}JsonObject::TryGetBoolField(const FString& FieldName, bool& OutBool) const
{
	return Obj && Obj->TryGetBoolField(FieldName, OutBool);
}

void {{unrealModelPrefix}}JsonObject::SetBoolField(const FString& FieldName, bool InValue) const
{
	if (Obj)
	{
		Obj->SetBoolField(FieldName, InValue);
	}
}

TArray<{{unrealModelPrefix}}JsonValue> {{unrealModelPrefix}}JsonObject::GetArrayField(const FString& FieldName) const
{
	TArray<{{unrealModelPrefix}}JsonValue> Arr;
	TryGetArrayField(FieldName, Arr);
	return Arr;
}

bool {{unrealModelPrefix}}JsonObject::TryGetArrayField(const FString& FieldName, TArray<{{unrealModelPrefix}}JsonValue>& OutArray) const
{
	if (!Obj)
	{
		return false;
	}

	const TArray< TSharedPtr<FJsonValue> >* Arr{};
	if (!Obj->TryGetArrayField(FieldName, Arr) || !Arr)
	{
		return false;
	}

	for (const TSharedPtr<FJsonValue>& Val : *Arr)
	{
		OutArray.Add({{unrealModelPrefix}}JsonValue(Val));
	}
	return true;
}

void {{unrealModelPrefix}}JsonObject::SetArrayField(const FString& FieldName, const TArray<{{unrealModelPrefix}}JsonValue>& Array) const
{
	if (!Obj)
	{
		return;
	}

	TArray< TSharedPtr<FJsonValue> > UnrealArr;
	for (const {{unrealModelPrefix}}JsonValue& Val : Array)
	{
		if (TSharedPtr<FJsonValue> UnrealVal = Val.GetValue())
		{
			UnrealArr.Add(UnrealVal);
		}
	}
	Obj->SetArrayField(FieldName, UnrealArr);
}

{{unrealModelPrefix}}JsonObject {{unrealModelPrefix}}JsonObject::GetObjectField(const FString& FieldName) const
{
	{{unrealModelPrefix}}JsonObject OutObj;
	TryGetObjectField(FieldName, OutObj);
	return OutObj;
}

bool {{unrealModelPrefix}}JsonObject::TryGetObjectField(const FString& FieldName, {{unrealModelPrefix}}JsonObject& OutObject) const
{
	if (!Obj)
	{
		return false;
	}

	const TSharedPtr<FJsonObject>* UnrealObj{};
	if (!Obj->TryGetObjectField(FieldName, UnrealObj) || !UnrealObj)
	{
		return false;
	}

	OutObject.SetObject(Obj);
	return true;
}

void {{unrealModelPrefix}}JsonObject::SetObjectField(const FString& FieldName, const {{unrealModelPrefix}}JsonObject& JsonObject) const
{
	if (Obj)
	{
		Obj->SetObjectField(FieldName, JsonObject.GetObject());
	}
}

//////////////////////////////////////////////////////////////////////////

float {{unrealModelPrefix}}JsonValue::AsNumber() const
{
	if (!Value)
	{
		UE_LOG(Log{{unrealModuleName}}, Error, TEXT("Unset Json Value used as a Number."));
		return {};
	}
	return Value->AsNumber();
}

FString {{unrealModelPrefix}}JsonValue::AsString() const
{
	if (!Value)
	{
		UE_LOG(Log{{unrealModuleName}}, Error, TEXT("Unset Json Value used as a String."));
		return {};
	}
	return Value->AsString();
}

bool {{unrealModelPrefix}}JsonValue::AsBool() const
{
	if (!Value)
	{
		UE_LOG(Log{{unrealModuleName}}, Error, TEXT("Unset Json Value used as a Bool."));
		return {};
	}
	return Value->AsBool();
}

bool {{unrealModelPrefix}}JsonValue::IsNull() const
{
	return !Value || Value->IsNull();
}

TArray<{{unrealModelPrefix}}JsonValue> {{unrealModelPrefix}}JsonValue::AsArray() const
{
	TArray<{{unrealModelPrefix}}JsonValue> Result;
	if (Value)
	{
		for (TSharedPtr<FJsonValue> Val : Value->AsArray())
		{
			Result.Add({{unrealModelPrefix}}JsonValue(Val));
		}
	}
	else
	{
		UE_LOG(Log{{unrealModuleName}}, Error, TEXT("Unset Json Value used as a Array."));
	}
	return Result;
}

{{unrealModelPrefix}}JsonObject {{unrealModelPrefix}}JsonValue::AsObject() const
{
	if (Value)
	{
		if (const TSharedPtr<FJsonObject>& Obj = Value->AsObject())
		{
			{{unrealModelPrefix}}JsonObject Result;
			Result.SetObject(Obj);
			return Result;
		}
	}
	else
	{
		UE_LOG(Log{{unrealModuleName}}, Error, TEXT("Unset Json Value used as a Object."));
	}
	return {{unrealModelPrefix}}JsonObject();
}

{{unrealEnumPrefix}}JsonValueType {{unrealModelPrefix}}JsonValue::GetType() const
{
	if (Value)
	{
		switch (Value->Type)
		{
		case EJson::None:
			return {{unrealEnumPrefix}}JsonValueType::None;
		case EJson::Null:
			return {{unrealEnumPrefix}}JsonValueType::Null;
		case EJson::String:
			return {{unrealEnumPrefix}}JsonValueType::String;
		case EJson::Number:
			return {{unrealEnumPrefix}}JsonValueType::Number;
		case EJson::Boolean:
			return {{unrealEnumPrefix}}JsonValueType::Boolean;
		case EJson::Array:
			return {{unrealEnumPrefix}}JsonValueType::Array;
		case EJson::Object:
			return {{unrealEnumPrefix}}JsonValueType::Object;
		}
	}
	return {{unrealEnumPrefix}}JsonValueType::None;
}

bool {{unrealModelPrefix}}JsonValue::TryGetNumber(float& OutNumber) const
{
	return Value && Value->TryGetNumber(OutNumber);
}

bool {{unrealModelPrefix}}JsonValue::TryGetInteger(int32& OutInteger) const
{
	return Value && Value->TryGetNumber(OutInteger);
}

bool {{unrealModelPrefix}}JsonValue::TryGetInteger64(int64& OutInteger64) const
{
	return Value && Value->TryGetNumber(OutInteger64);
}

bool {{unrealModelPrefix}}JsonValue::TryGetString(FString& OutString) const
{
	return Value && Value->TryGetString(OutString);
}

bool {{unrealModelPrefix}}JsonValue::TryGetBool(bool& OutBool) const
{
	return Value && Value->TryGetBool(OutBool);
}

bool {{unrealModelPrefix}}JsonValue::TryGetArray(TArray<{{unrealModelPrefix}}JsonValue>& OutArray) const
{
	const TArray< TSharedPtr<FJsonValue> >* JsonArr{};
	if (!Value || !Value->TryGetArray(JsonArr) || !JsonArr)
	{
		return false;
	}

	for (const TSharedPtr<FJsonValue>& Val : *JsonArr)
	{
		OutArray.Add({{unrealModelPrefix}}JsonValue(Val));
	}
	return true;
}

bool {{unrealModelPrefix}}JsonValue::TryGetObject({{unrealModelPrefix}}JsonObject& OutObject) const
{
	const TSharedPtr<FJsonObject>* JsonObj{};
	if (!Value || !Value->TryGetObject(JsonObj) || !JsonObj)
	{
		return false;
	}

	OutObject.SetObject(*JsonObj);
	return true;
}

bool {{unrealModelPrefix}}JsonValue::CompareEqual(const {{unrealModelPrefix}}JsonValue& Other) const
{
	if (!Value && !Other.Value)
		return true;
	if (!Value || !Other.Value)
		return false;
	return FJsonValue::CompareEqual(*Value, *Other.Value);
}

//////////////////////////////////////////////////////////////////////////

bool {{unrealClassPrefix}}JsonObjectBlueprintLibrary::{{unrealModelPrefix}}JsonObjectToString(const {{unrealModelPrefix}}JsonObject& InObject, FString& OutString)
{
	// serialize to string
	TSharedRef<TJsonWriter<>> Writer = TJsonWriterFactory<>::Create(&OutString);
	if (FJsonSerializer::Serialize(InObject.GetObject().ToSharedRef(), Writer))
	{
		return true;
	}
	
	return false;
}

bool {{unrealClassPrefix}}JsonObjectBlueprintLibrary::StringTo{{unrealModelPrefix}}JsonObject(const FString& InString, {{unrealModelPrefix}}JsonObject& OutObject)
{
	// serialize to object
	auto Reader = TJsonReaderFactory<>::Create(InString);
	TSharedPtr<FJsonObject> JsonObject;
	if (FJsonSerializer::Deserialize(Reader, JsonObject) && JsonObject.IsValid())
	{
		OutObject = {{unrealModelPrefix}}JsonObject(JsonObject);
		return true;
	}
	
	return false;
}

//////////////////////////////////////////////////////////////////////////

bool {{unrealClassPrefix}}JsonValueBlueprintLibrary::{{unrealModelPrefix}}JsonValueToString(const {{unrealModelPrefix}}JsonValue& InValue, FString& OutString)
{
	// serialize to string
	TSharedRef<TJsonWriter<>> Writer = TJsonWriterFactory<>::Create(&OutString);
	if (FJsonSerializer::Serialize(InValue.GetValue().ToSharedRef(), TEXT(""), Writer))
	{
		return true;
	}
	
	return false;
}
bool {{unrealClassPrefix}}JsonValueBlueprintLibrary::StringTo{{unrealModelPrefix}}JsonValue(const FString& InString, {{unrealModelPrefix}}JsonValue& OutValue)
{
	// serialize to value
	auto Reader = TJsonReaderFactory<>::Create(InString);
	TSharedPtr<FJsonValue> JsonValue;
	if (FJsonSerializer::Deserialize(Reader, JsonValue) && JsonValue.IsValid())
	{
		OutValue = {{unrealModelPrefix}}JsonValue(JsonValue);
		return true;
	}
	
	return false;
}

//////////////////////////////////////////////////////////////////////////

{{#cppNamespaceDeclarations}}
namespace {{this}}
{
{{/cppNamespaceDeclarations}}

FHttpFileInput::FHttpFileInput(const TCHAR* InFilePath)
{
	SetFilePath(InFilePath);
}

FHttpFileInput::FHttpFileInput(const FString& InFilePath)
{
	SetFilePath(InFilePath);
}

void FHttpFileInput::SetFilePath(const TCHAR* InFilePath)
{
	FilePath = InFilePath;
	if(ContentType.IsEmpty())
	{
		ContentType = FPlatformHttp::GetMimeType(InFilePath);
	}
}

void FHttpFileInput::SetFilePath(const FString& InFilePath)
{
	SetFilePath(*InFilePath);
}

void FHttpFileInput::SetContentType(const TCHAR* InContentType)
{
	ContentType = InContentType;
}

FString FHttpFileInput::GetFilename() const
{
	return FPaths::GetCleanFilename(FilePath);
}

//////////////////////////////////////////////////////////////////////////

const TCHAR* FHttpMultipartFormData::Delimiter = TEXT("--");
const TCHAR* FHttpMultipartFormData::Newline = TEXT("\r\n");

void FHttpMultipartFormData::SetBoundary(const TCHAR* InBoundary)
{
	checkf(Boundary.IsEmpty(), TEXT("Boundary must be set before usage"));
	Boundary = InBoundary;
}

const FString& FHttpMultipartFormData::GetBoundary() const
{
	if (Boundary.IsEmpty())
	{
		// Generate a random boundary with enough entropy, should avoid occurrences of the boundary in the data.
		// Since the boundary is generated at every request, in case of failure, retries should succeed.
		Boundary = FGuid::NewGuid().ToString(EGuidFormats::Short);
	}

	return Boundary;
}

void FHttpMultipartFormData::SetupHttpRequest(const FHttpRequestRef& HttpRequest)
{
	if(HttpRequest->GetVerb() != TEXT("POST"))
	{
		UE_LOG(Log{{unrealModuleName}}, Error, TEXT("Expected POST verb when using multipart form data"));
	}

	// Append final boundary
	AppendString(Delimiter);
	AppendString(*GetBoundary());
	AppendString(Delimiter);

	HttpRequest->SetHeader("Content-Type", FString::Printf(TEXT("multipart/form-data; boundary=%s"), *GetBoundary()));
	HttpRequest->SetContent(FormData);
}

void FHttpMultipartFormData::AddStringPart(const TCHAR* Name, const TCHAR* Data)
{
	// Add boundary
	AppendString(Delimiter);
	AppendString(*GetBoundary());
	AppendString(Newline);

	// Add header
	AppendString(*FString::Printf(TEXT("Content-Disposition: form-data; name = \"%s\""), Name));
	AppendString(Newline);
	AppendString(*FString::Printf(TEXT("Content-Type: text/plain; charset=utf-8")));
	AppendString(Newline);

	// Add header to body splitter
	AppendString(Newline);

	// Add Data
	AppendString(Data);
	AppendString(Newline);
}

void FHttpMultipartFormData::AddJsonPart(const TCHAR* Name, const FString& JsonString)
{
	// Add boundary
	AppendString(Delimiter);
	AppendString(*GetBoundary());
	AppendString(Newline);

	// Add header
	AppendString(*FString::Printf(TEXT("Content-Disposition: form-data; name=\"%s\""), Name));
	AppendString(Newline);
	AppendString(*FString::Printf(TEXT("Content-Type: application/json; charset=utf-8")));
	AppendString(Newline);

	// Add header to body splitter
	AppendString(Newline);

	// Add Data
	AppendString(*JsonString);
	AppendString(Newline);
}

void FHttpMultipartFormData::AddBinaryPart(const TCHAR* Name, const TArray<uint8>& ByteArray)
{
	// Add boundary
	AppendString(Delimiter);
	AppendString(*GetBoundary());
	AppendString(Newline);

	// Add header
	AppendString(*FString::Printf(TEXT("Content-Disposition: form-data; name=\"%s\""), Name));
	AppendString(Newline);
	AppendString(*FString::Printf(TEXT("Content-Type: application/octet-stream")));
	AppendString(Newline);

	// Add header to body splitter
	AppendString(Newline);

	// Add Data
	FormData.Append(ByteArray);
	AppendString(Newline);
}

void FHttpMultipartFormData::AddFilePart(const TCHAR* Name, const FHttpFileInput& File)
{
	TArray<uint8> FileContents;
	if (!FFileHelper::LoadFileToArray(FileContents, *File.GetFilePath()))
	{
		UE_LOG(Log{{unrealModuleName}}, Error, TEXT("Failed to load file (%s)"), *File.GetFilePath());
		return;
	}

	// Add boundary
	AppendString(Delimiter);
	AppendString(*GetBoundary());
	AppendString(Newline);

	// Add header
	AppendString(*FString::Printf(TEXT("Content-Disposition: form-data; name=\"%s\"; filename=\"%s\""), Name, *File.GetFilename()));
	AppendString(Newline);
	AppendString(*FString::Printf(TEXT("Content-Type: %s"), *File.GetContentType()));
	AppendString(Newline);

	// Add header to body splitter
	AppendString(Newline);

	// Add Data
	FormData.Append(FileContents);
	AppendString(Newline);
}

void FHttpMultipartFormData::AppendString(const TCHAR* Str)
{
	FTCHARToUTF8 utf8Str(Str);
	FormData.Append((uint8*)utf8Str.Get(), utf8Str.Length());
}

//////////////////////////////////////////////////////////////////////////

bool ParseDateTime(const FString& DateTimeString, FDateTime& OutDateTime)
{
	// Iso8601 Format: 	DateTime: YYYY-mm-ddTHH:MM:SS(.sss)(Z|+hh:mm|+hhmm|-hh:mm|-hhmm)
	{
		// We cannot call directly FDateTime::ParseIso8601 because it does not allow for precision beyond the millisecond, but DateTimeString might have more digits
		int32 DotIndex;
		FString StringToParse = DateTimeString;
		if (DateTimeString.FindChar('.', DotIndex))
		{
			int32 TimeZoneIndex;
			if (DateTimeString.FindChar('Z', TimeZoneIndex) || DateTimeString.FindChar('+', TimeZoneIndex) || DateTimeString.FindChar('-', TimeZoneIndex))
			{
				// The string contains a time zone designator starting at TimeZoneIndex
				if (TimeZoneIndex > DotIndex + 4)
				{
					// Trim to millisecond
					StringToParse = DateTimeString.Left(DotIndex + 4) + DateTimeString.RightChop(TimeZoneIndex);
				}
			}
			else
			{
				// the string does not contain a time zone designator, trim it to the millisecond
				StringToParse = DateTimeString.Left(DotIndex + 4);
			}
		}

		if (FDateTime::ParseIso8601(*StringToParse, OutDateTime))
			return true;
	}

	if (FDateTime::ParseHttpDate(DateTimeString, OutDateTime))
		return true;

	return FDateTime::Parse(DateTimeString, OutDateTime);
}

{{#cppNamespaceDeclarations}}
}
{{/cppNamespaceDeclarations}}