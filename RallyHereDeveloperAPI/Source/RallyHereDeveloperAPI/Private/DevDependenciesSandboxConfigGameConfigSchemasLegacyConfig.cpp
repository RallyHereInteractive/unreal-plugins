// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "DevDependenciesSandboxConfigGameConfigSchemasLegacyConfig.h"
#include "RallyHereDeveloperAPIModule.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereDeveloperAPI::ToStringFormatArg;
using RallyHereDeveloperAPI::WriteJsonValue;
using RallyHereDeveloperAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_DevDependenciesSandboxConfigGameConfigSchemasLegacyConfig

void FRHAPI_DevDependenciesSandboxConfigGameConfigSchemasLegacyConfig::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
    Writer->WriteObjectStart();
    if (AllowedGameVersions_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("allowed_game_versions"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, AllowedGameVersions_Optional);
    }
    if (EacEnabled_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("eac_enabled"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, EacEnabled_Optional);
    }
    if (EacCheckBanStatusAtLogin_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("eac_check_ban_status_at_login"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, EacCheckBanStatusAtLogin_Optional);
    }
    if (EacSubmitPlayerReports_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("eac_submit_player_reports"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, EacSubmitPlayerReports_Optional);
    }
    if (Experiments_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("experiments"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, Experiments_Optional);
    }
    if (GameBits_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("game_bits"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, GameBits_Optional);
    }
    if (MaxPartySize_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("max_party_size"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, MaxPartySize_Optional);
    }
    if (MaxPartyInfoCount_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("max_party_info_count"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, MaxPartyInfoCount_Optional);
    }
    if (DefaultMapGameId_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("default_map_game_id"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, DefaultMapGameId_Optional);
    }
    if (GameId_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("game_id"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, GameId_Optional);
    }
    if (InventoryCustomDataItemLegacyTypeField_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("inventory_custom_data_item_legacy_type_field"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, InventoryCustomDataItemLegacyTypeField_Optional);
    }
    if (InventoryCustomDataItemLegacySubtypeField_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("inventory_custom_data_item_legacy_subtype_field"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, InventoryCustomDataItemLegacySubtypeField_Optional);
    }
    if (InventoryCustomDataVendorLegacyTypeField_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("inventory_custom_data_vendor_legacy_type_field"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, InventoryCustomDataVendorLegacyTypeField_Optional);
    }
    Writer->WriteObjectEnd();
}

bool FRHAPI_DevDependenciesSandboxConfigGameConfigSchemasLegacyConfig::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
    const TSharedPtr<FJsonObject>* Object;
    if (!JsonValue->TryGetObject(Object))
        return false;

    bool ParseSuccess = true;

    const TSharedPtr<FJsonValue> JsonAllowedGameVersionsField = (*Object)->TryGetField(TEXT("allowed_game_versions"));
    if (JsonAllowedGameVersionsField.IsValid() && !JsonAllowedGameVersionsField->IsNull())
    {
        AllowedGameVersions_IsSet = TryGetJsonValue(JsonAllowedGameVersionsField, AllowedGameVersions_Optional);
        ParseSuccess &= AllowedGameVersions_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonEacEnabledField = (*Object)->TryGetField(TEXT("eac_enabled"));
    if (JsonEacEnabledField.IsValid() && !JsonEacEnabledField->IsNull())
    {
        EacEnabled_IsSet = TryGetJsonValue(JsonEacEnabledField, EacEnabled_Optional);
        ParseSuccess &= EacEnabled_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonEacCheckBanStatusAtLoginField = (*Object)->TryGetField(TEXT("eac_check_ban_status_at_login"));
    if (JsonEacCheckBanStatusAtLoginField.IsValid() && !JsonEacCheckBanStatusAtLoginField->IsNull())
    {
        EacCheckBanStatusAtLogin_IsSet = TryGetJsonValue(JsonEacCheckBanStatusAtLoginField, EacCheckBanStatusAtLogin_Optional);
        ParseSuccess &= EacCheckBanStatusAtLogin_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonEacSubmitPlayerReportsField = (*Object)->TryGetField(TEXT("eac_submit_player_reports"));
    if (JsonEacSubmitPlayerReportsField.IsValid() && !JsonEacSubmitPlayerReportsField->IsNull())
    {
        EacSubmitPlayerReports_IsSet = TryGetJsonValue(JsonEacSubmitPlayerReportsField, EacSubmitPlayerReports_Optional);
        ParseSuccess &= EacSubmitPlayerReports_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonExperimentsField = (*Object)->TryGetField(TEXT("experiments"));
    if (JsonExperimentsField.IsValid() && !JsonExperimentsField->IsNull())
    {
        Experiments_IsSet = TryGetJsonValue(JsonExperimentsField, Experiments_Optional);
        ParseSuccess &= Experiments_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonGameBitsField = (*Object)->TryGetField(TEXT("game_bits"));
    if (JsonGameBitsField.IsValid() && !JsonGameBitsField->IsNull())
    {
        GameBits_IsSet = TryGetJsonValue(JsonGameBitsField, GameBits_Optional);
        ParseSuccess &= GameBits_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonMaxPartySizeField = (*Object)->TryGetField(TEXT("max_party_size"));
    if (JsonMaxPartySizeField.IsValid() && !JsonMaxPartySizeField->IsNull())
    {
        MaxPartySize_IsSet = TryGetJsonValue(JsonMaxPartySizeField, MaxPartySize_Optional);
        ParseSuccess &= MaxPartySize_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonMaxPartyInfoCountField = (*Object)->TryGetField(TEXT("max_party_info_count"));
    if (JsonMaxPartyInfoCountField.IsValid() && !JsonMaxPartyInfoCountField->IsNull())
    {
        MaxPartyInfoCount_IsSet = TryGetJsonValue(JsonMaxPartyInfoCountField, MaxPartyInfoCount_Optional);
        ParseSuccess &= MaxPartyInfoCount_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonDefaultMapGameIdField = (*Object)->TryGetField(TEXT("default_map_game_id"));
    if (JsonDefaultMapGameIdField.IsValid() && !JsonDefaultMapGameIdField->IsNull())
    {
        DefaultMapGameId_IsSet = TryGetJsonValue(JsonDefaultMapGameIdField, DefaultMapGameId_Optional);
        ParseSuccess &= DefaultMapGameId_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonGameIdField = (*Object)->TryGetField(TEXT("game_id"));
    if (JsonGameIdField.IsValid() && !JsonGameIdField->IsNull())
    {
        GameId_IsSet = TryGetJsonValue(JsonGameIdField, GameId_Optional);
        ParseSuccess &= GameId_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonInventoryCustomDataItemLegacyTypeFieldField = (*Object)->TryGetField(TEXT("inventory_custom_data_item_legacy_type_field"));
    if (JsonInventoryCustomDataItemLegacyTypeFieldField.IsValid() && !JsonInventoryCustomDataItemLegacyTypeFieldField->IsNull())
    {
        InventoryCustomDataItemLegacyTypeField_IsSet = TryGetJsonValue(JsonInventoryCustomDataItemLegacyTypeFieldField, InventoryCustomDataItemLegacyTypeField_Optional);
        ParseSuccess &= InventoryCustomDataItemLegacyTypeField_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonInventoryCustomDataItemLegacySubtypeFieldField = (*Object)->TryGetField(TEXT("inventory_custom_data_item_legacy_subtype_field"));
    if (JsonInventoryCustomDataItemLegacySubtypeFieldField.IsValid() && !JsonInventoryCustomDataItemLegacySubtypeFieldField->IsNull())
    {
        InventoryCustomDataItemLegacySubtypeField_IsSet = TryGetJsonValue(JsonInventoryCustomDataItemLegacySubtypeFieldField, InventoryCustomDataItemLegacySubtypeField_Optional);
        ParseSuccess &= InventoryCustomDataItemLegacySubtypeField_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonInventoryCustomDataVendorLegacyTypeFieldField = (*Object)->TryGetField(TEXT("inventory_custom_data_vendor_legacy_type_field"));
    if (JsonInventoryCustomDataVendorLegacyTypeFieldField.IsValid() && !JsonInventoryCustomDataVendorLegacyTypeFieldField->IsNull())
    {
        InventoryCustomDataVendorLegacyTypeField_IsSet = TryGetJsonValue(JsonInventoryCustomDataVendorLegacyTypeFieldField, InventoryCustomDataVendorLegacyTypeField_Optional);
        ParseSuccess &= InventoryCustomDataVendorLegacyTypeField_IsSet;
    }

    return ParseSuccess;
}

