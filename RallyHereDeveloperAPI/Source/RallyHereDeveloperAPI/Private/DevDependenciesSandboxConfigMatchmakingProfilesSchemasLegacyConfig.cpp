// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "DevDependenciesSandboxConfigMatchmakingProfilesSchemasLegacyConfig.h"
#include "RallyHereDeveloperAPIModule.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereDeveloperAPI::ToStringFormatArg;
using RallyHereDeveloperAPI::WriteJsonValue;
using RallyHereDeveloperAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_DevDependenciesSandboxConfigMatchmakingProfilesSchemasLegacyConfig

void FRHAPI_DevDependenciesSandboxConfigMatchmakingProfilesSchemasLegacyConfig::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
    Writer->WriteObjectStart();
    if (QueueTypeValueId_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("queue_type_value_id"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, QueueTypeValueId_Optional);
    }
    if (TaskForceNumber_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("task_force_number"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, TaskForceNumber_Optional);
    }
    if (NameMsgId_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("name_msg_id"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, NameMsgId_Optional);
    }
    if (DescMsgId_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("desc_msg_id"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, DescMsgId_Optional);
    }
    if (GiveXpFlag_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("give_xp_flag"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, GiveXpFlag_Optional);
    }
    if (Giveachievement_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("giveachievement"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, Giveachievement_Optional);
    }
    if (BlockRewardAfterLevel_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("block_reward_after_level"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, BlockRewardAfterLevel_Optional);
    }
    if (Servertickrate_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("servertickrate"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, Servertickrate_Optional);
    }
    if (Serverfubartickrate_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("serverfubartickrate"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, Serverfubartickrate_Optional);
    }
    if (Playerconnectwait_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("playerconnectwait"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, Playerconnectwait_Optional);
    }
    if (Physicsthreshold_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("physicsthreshold"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, Physicsthreshold_Optional);
    }
    if (PerformanceGroup_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("PerformanceGroup"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, PerformanceGroup_Optional);
    }
    if (GameModeValueId_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("game_mode_value_id"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, GameModeValueId_Optional);
    }
    if (SurveyFreq_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("SurveyFreq"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, SurveyFreq_Optional);
    }
    if (NoTaskforceSelection_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("NoTaskforceSelection"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, NoTaskforceSelection_Optional);
    }
    if (RecordClientStats_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("RecordClientStats"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, RecordClientStats_Optional);
    }
    if (ServerDBStatWriteSeconds_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("ServerDBStatWriteSeconds"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, ServerDBStatWriteSeconds_Optional);
    }
    if (MinPlayersPerTeam_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("min_players_per_team"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, MinPlayersPerTeam_Optional);
    }
    if (MaxPlayersPerTeam_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("max_players_per_team"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, MaxPlayersPerTeam_Optional);
    }
    if (Allowlivespectate_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("allowlivespectate"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, Allowlivespectate_Optional);
    }
    if (MatchQueueId_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("match_queue_id"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, MatchQueueId_Optional);
    }
    if (DeserterFlag_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("deserter_flag"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, DeserterFlag_Optional);
    }
    if (RankingTypeId_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("ranking_type_id"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, RankingTypeId_Optional);
    }
    if (GameTypeValueId_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("game_type_value_id"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, GameTypeValueId_Optional);
    }
    if (PeerToPeer_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("PeerToPeer"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, PeerToPeer_Optional);
    }
    Writer->WriteObjectEnd();
}

bool FRHAPI_DevDependenciesSandboxConfigMatchmakingProfilesSchemasLegacyConfig::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
    const TSharedPtr<FJsonObject>* Object;
    if (!JsonValue->TryGetObject(Object))
        return false;

    bool ParseSuccess = true;

    const TSharedPtr<FJsonValue> JsonQueueTypeValueIdField = (*Object)->TryGetField(TEXT("queue_type_value_id"));
    if (JsonQueueTypeValueIdField.IsValid() && !JsonQueueTypeValueIdField->IsNull())
    {
        QueueTypeValueId_IsSet = TryGetJsonValue(JsonQueueTypeValueIdField, QueueTypeValueId_Optional);
        ParseSuccess &= QueueTypeValueId_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonTaskForceNumberField = (*Object)->TryGetField(TEXT("task_force_number"));
    if (JsonTaskForceNumberField.IsValid() && !JsonTaskForceNumberField->IsNull())
    {
        TaskForceNumber_IsSet = TryGetJsonValue(JsonTaskForceNumberField, TaskForceNumber_Optional);
        ParseSuccess &= TaskForceNumber_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonNameMsgIdField = (*Object)->TryGetField(TEXT("name_msg_id"));
    if (JsonNameMsgIdField.IsValid() && !JsonNameMsgIdField->IsNull())
    {
        NameMsgId_IsSet = TryGetJsonValue(JsonNameMsgIdField, NameMsgId_Optional);
        ParseSuccess &= NameMsgId_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonDescMsgIdField = (*Object)->TryGetField(TEXT("desc_msg_id"));
    if (JsonDescMsgIdField.IsValid() && !JsonDescMsgIdField->IsNull())
    {
        DescMsgId_IsSet = TryGetJsonValue(JsonDescMsgIdField, DescMsgId_Optional);
        ParseSuccess &= DescMsgId_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonGiveXpFlagField = (*Object)->TryGetField(TEXT("give_xp_flag"));
    if (JsonGiveXpFlagField.IsValid() && !JsonGiveXpFlagField->IsNull())
    {
        GiveXpFlag_IsSet = TryGetJsonValue(JsonGiveXpFlagField, GiveXpFlag_Optional);
        ParseSuccess &= GiveXpFlag_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonGiveachievementField = (*Object)->TryGetField(TEXT("giveachievement"));
    if (JsonGiveachievementField.IsValid() && !JsonGiveachievementField->IsNull())
    {
        Giveachievement_IsSet = TryGetJsonValue(JsonGiveachievementField, Giveachievement_Optional);
        ParseSuccess &= Giveachievement_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonBlockRewardAfterLevelField = (*Object)->TryGetField(TEXT("block_reward_after_level"));
    if (JsonBlockRewardAfterLevelField.IsValid() && !JsonBlockRewardAfterLevelField->IsNull())
    {
        BlockRewardAfterLevel_IsSet = TryGetJsonValue(JsonBlockRewardAfterLevelField, BlockRewardAfterLevel_Optional);
        ParseSuccess &= BlockRewardAfterLevel_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonServertickrateField = (*Object)->TryGetField(TEXT("servertickrate"));
    if (JsonServertickrateField.IsValid() && !JsonServertickrateField->IsNull())
    {
        Servertickrate_IsSet = TryGetJsonValue(JsonServertickrateField, Servertickrate_Optional);
        ParseSuccess &= Servertickrate_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonServerfubartickrateField = (*Object)->TryGetField(TEXT("serverfubartickrate"));
    if (JsonServerfubartickrateField.IsValid() && !JsonServerfubartickrateField->IsNull())
    {
        Serverfubartickrate_IsSet = TryGetJsonValue(JsonServerfubartickrateField, Serverfubartickrate_Optional);
        ParseSuccess &= Serverfubartickrate_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonPlayerconnectwaitField = (*Object)->TryGetField(TEXT("playerconnectwait"));
    if (JsonPlayerconnectwaitField.IsValid() && !JsonPlayerconnectwaitField->IsNull())
    {
        Playerconnectwait_IsSet = TryGetJsonValue(JsonPlayerconnectwaitField, Playerconnectwait_Optional);
        ParseSuccess &= Playerconnectwait_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonPhysicsthresholdField = (*Object)->TryGetField(TEXT("physicsthreshold"));
    if (JsonPhysicsthresholdField.IsValid() && !JsonPhysicsthresholdField->IsNull())
    {
        Physicsthreshold_IsSet = TryGetJsonValue(JsonPhysicsthresholdField, Physicsthreshold_Optional);
        ParseSuccess &= Physicsthreshold_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonPerformanceGroupField = (*Object)->TryGetField(TEXT("PerformanceGroup"));
    if (JsonPerformanceGroupField.IsValid() && !JsonPerformanceGroupField->IsNull())
    {
        PerformanceGroup_IsSet = TryGetJsonValue(JsonPerformanceGroupField, PerformanceGroup_Optional);
        ParseSuccess &= PerformanceGroup_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonGameModeValueIdField = (*Object)->TryGetField(TEXT("game_mode_value_id"));
    if (JsonGameModeValueIdField.IsValid() && !JsonGameModeValueIdField->IsNull())
    {
        GameModeValueId_IsSet = TryGetJsonValue(JsonGameModeValueIdField, GameModeValueId_Optional);
        ParseSuccess &= GameModeValueId_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonSurveyFreqField = (*Object)->TryGetField(TEXT("SurveyFreq"));
    if (JsonSurveyFreqField.IsValid() && !JsonSurveyFreqField->IsNull())
    {
        SurveyFreq_IsSet = TryGetJsonValue(JsonSurveyFreqField, SurveyFreq_Optional);
        ParseSuccess &= SurveyFreq_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonNoTaskforceSelectionField = (*Object)->TryGetField(TEXT("NoTaskforceSelection"));
    if (JsonNoTaskforceSelectionField.IsValid() && !JsonNoTaskforceSelectionField->IsNull())
    {
        NoTaskforceSelection_IsSet = TryGetJsonValue(JsonNoTaskforceSelectionField, NoTaskforceSelection_Optional);
        ParseSuccess &= NoTaskforceSelection_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonRecordClientStatsField = (*Object)->TryGetField(TEXT("RecordClientStats"));
    if (JsonRecordClientStatsField.IsValid() && !JsonRecordClientStatsField->IsNull())
    {
        RecordClientStats_IsSet = TryGetJsonValue(JsonRecordClientStatsField, RecordClientStats_Optional);
        ParseSuccess &= RecordClientStats_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonServerDBStatWriteSecondsField = (*Object)->TryGetField(TEXT("ServerDBStatWriteSeconds"));
    if (JsonServerDBStatWriteSecondsField.IsValid() && !JsonServerDBStatWriteSecondsField->IsNull())
    {
        ServerDBStatWriteSeconds_IsSet = TryGetJsonValue(JsonServerDBStatWriteSecondsField, ServerDBStatWriteSeconds_Optional);
        ParseSuccess &= ServerDBStatWriteSeconds_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonMinPlayersPerTeamField = (*Object)->TryGetField(TEXT("min_players_per_team"));
    if (JsonMinPlayersPerTeamField.IsValid() && !JsonMinPlayersPerTeamField->IsNull())
    {
        MinPlayersPerTeam_IsSet = TryGetJsonValue(JsonMinPlayersPerTeamField, MinPlayersPerTeam_Optional);
        ParseSuccess &= MinPlayersPerTeam_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonMaxPlayersPerTeamField = (*Object)->TryGetField(TEXT("max_players_per_team"));
    if (JsonMaxPlayersPerTeamField.IsValid() && !JsonMaxPlayersPerTeamField->IsNull())
    {
        MaxPlayersPerTeam_IsSet = TryGetJsonValue(JsonMaxPlayersPerTeamField, MaxPlayersPerTeam_Optional);
        ParseSuccess &= MaxPlayersPerTeam_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonAllowlivespectateField = (*Object)->TryGetField(TEXT("allowlivespectate"));
    if (JsonAllowlivespectateField.IsValid() && !JsonAllowlivespectateField->IsNull())
    {
        Allowlivespectate_IsSet = TryGetJsonValue(JsonAllowlivespectateField, Allowlivespectate_Optional);
        ParseSuccess &= Allowlivespectate_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonMatchQueueIdField = (*Object)->TryGetField(TEXT("match_queue_id"));
    if (JsonMatchQueueIdField.IsValid() && !JsonMatchQueueIdField->IsNull())
    {
        MatchQueueId_IsSet = TryGetJsonValue(JsonMatchQueueIdField, MatchQueueId_Optional);
        ParseSuccess &= MatchQueueId_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonDeserterFlagField = (*Object)->TryGetField(TEXT("deserter_flag"));
    if (JsonDeserterFlagField.IsValid() && !JsonDeserterFlagField->IsNull())
    {
        DeserterFlag_IsSet = TryGetJsonValue(JsonDeserterFlagField, DeserterFlag_Optional);
        ParseSuccess &= DeserterFlag_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonRankingTypeIdField = (*Object)->TryGetField(TEXT("ranking_type_id"));
    if (JsonRankingTypeIdField.IsValid() && !JsonRankingTypeIdField->IsNull())
    {
        RankingTypeId_IsSet = TryGetJsonValue(JsonRankingTypeIdField, RankingTypeId_Optional);
        ParseSuccess &= RankingTypeId_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonGameTypeValueIdField = (*Object)->TryGetField(TEXT("game_type_value_id"));
    if (JsonGameTypeValueIdField.IsValid() && !JsonGameTypeValueIdField->IsNull())
    {
        GameTypeValueId_IsSet = TryGetJsonValue(JsonGameTypeValueIdField, GameTypeValueId_Optional);
        ParseSuccess &= GameTypeValueId_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonPeerToPeerField = (*Object)->TryGetField(TEXT("PeerToPeer"));
    if (JsonPeerToPeerField.IsValid() && !JsonPeerToPeerField->IsNull())
    {
        PeerToPeer_IsSet = TryGetJsonValue(JsonPeerToPeerField, PeerToPeer_Optional);
        ParseSuccess &= PeerToPeer_IsSet;
    }

    return ParseSuccess;
}

