// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "DevMenuDataEnvironment.h"
#include "RallyHereDeveloperAPIModule.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereDeveloperAPI::ToStringFormatArg;
using RallyHereDeveloperAPI::WriteJsonValue;
using RallyHereDeveloperAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_DevMenuDataEnvironment

void FRHAPI_DevMenuDataEnvironment::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
    Writer->WriteObjectStart();
    Writer->WriteIdentifierPrefix(TEXT("environmentId"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, EnvironmentId);
    Writer->WriteIdentifierPrefix(TEXT("shortName"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, ShortName);
    Writer->WriteIdentifierPrefix(TEXT("environmentName"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, EnvironmentName);
    if (Archive_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("archive"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, Archive_Optional);
    }
    Writer->WriteIdentifierPrefix(TEXT("baseUrl"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, BaseUrl);
    Writer->WriteObjectEnd();
}

bool FRHAPI_DevMenuDataEnvironment::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
    const TSharedPtr<FJsonObject>* Object;
    if (!JsonValue->TryGetObject(Object))
        return false;

    bool ParseSuccess = true;

    const TSharedPtr<FJsonValue> JsonEnvironmentIdField = (*Object)->TryGetField(TEXT("environmentId"));
    ParseSuccess &= JsonEnvironmentIdField.IsValid() && !JsonEnvironmentIdField->IsNull() && TryGetJsonValue(JsonEnvironmentIdField, EnvironmentId);
    const TSharedPtr<FJsonValue> JsonShortNameField = (*Object)->TryGetField(TEXT("shortName"));
    ParseSuccess &= JsonShortNameField.IsValid() && !JsonShortNameField->IsNull() && TryGetJsonValue(JsonShortNameField, ShortName);
    const TSharedPtr<FJsonValue> JsonEnvironmentNameField = (*Object)->TryGetField(TEXT("environmentName"));
    ParseSuccess &= JsonEnvironmentNameField.IsValid() && !JsonEnvironmentNameField->IsNull() && TryGetJsonValue(JsonEnvironmentNameField, EnvironmentName);
    const TSharedPtr<FJsonValue> JsonArchiveField = (*Object)->TryGetField(TEXT("archive"));
    if (JsonArchiveField.IsValid() && !JsonArchiveField->IsNull())
    {
        Archive_IsSet = TryGetJsonValue(JsonArchiveField, Archive_Optional);
        ParseSuccess &= Archive_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonBaseUrlField = (*Object)->TryGetField(TEXT("baseUrl"));
    ParseSuccess &= JsonBaseUrlField.IsValid() && !JsonBaseUrlField->IsNull() && TryGetJsonValue(JsonBaseUrlField, BaseUrl);

    return ParseSuccess;
}

