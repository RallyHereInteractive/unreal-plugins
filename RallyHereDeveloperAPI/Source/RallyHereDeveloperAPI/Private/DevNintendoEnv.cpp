// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "DevNintendoEnv.h"
#include "RallyHereDeveloperAPIModule.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereDeveloperAPI::ToStringFormatArg;
using RallyHereDeveloperAPI::WriteJsonValue;
using RallyHereDeveloperAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_DevNintendoEnv

void FRHAPI_DevNintendoEnv::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
    Writer->WriteObjectStart();
    Writer->WriteIdentifierPrefix(TEXT("dd1"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, Dd1);
    Writer->WriteIdentifierPrefix(TEXT("dp1"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, Dp1);
    Writer->WriteIdentifierPrefix(TEXT("sd1"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, Sd1);
    Writer->WriteIdentifierPrefix(TEXT("sp1"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, Sp1);
    Writer->WriteIdentifierPrefix(TEXT("jd1"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, Jd1);
    Writer->WriteIdentifierPrefix(TEXT("lp1"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, Lp1);
    Writer->WriteObjectEnd();
}

bool FRHAPI_DevNintendoEnv::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
    const TSharedPtr<FJsonObject>* Object;
    if (!JsonValue->TryGetObject(Object))
        return false;

    bool ParseSuccess = true;

    const TSharedPtr<FJsonValue> JsonDd1Field = (*Object)->TryGetField(TEXT("dd1"));
    ParseSuccess &= JsonDd1Field.IsValid() && !JsonDd1Field->IsNull() && TryGetJsonValue(JsonDd1Field, Dd1);
    const TSharedPtr<FJsonValue> JsonDp1Field = (*Object)->TryGetField(TEXT("dp1"));
    ParseSuccess &= JsonDp1Field.IsValid() && !JsonDp1Field->IsNull() && TryGetJsonValue(JsonDp1Field, Dp1);
    const TSharedPtr<FJsonValue> JsonSd1Field = (*Object)->TryGetField(TEXT("sd1"));
    ParseSuccess &= JsonSd1Field.IsValid() && !JsonSd1Field->IsNull() && TryGetJsonValue(JsonSd1Field, Sd1);
    const TSharedPtr<FJsonValue> JsonSp1Field = (*Object)->TryGetField(TEXT("sp1"));
    ParseSuccess &= JsonSp1Field.IsValid() && !JsonSp1Field->IsNull() && TryGetJsonValue(JsonSp1Field, Sp1);
    const TSharedPtr<FJsonValue> JsonJd1Field = (*Object)->TryGetField(TEXT("jd1"));
    ParseSuccess &= JsonJd1Field.IsValid() && !JsonJd1Field->IsNull() && TryGetJsonValue(JsonJd1Field, Jd1);
    const TSharedPtr<FJsonValue> JsonLp1Field = (*Object)->TryGetField(TEXT("lp1"));
    ParseSuccess &= JsonLp1Field.IsValid() && !JsonLp1Field->IsNull() && TryGetJsonValue(JsonLp1Field, Lp1);

    return ParseSuccess;
}

