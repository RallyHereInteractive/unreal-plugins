// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "DevMatchMakingRuleUpdateRequest.h"
#include "RallyHereDeveloperAPIModule.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereDeveloperAPI::ToStringFormatArg;
using RallyHereDeveloperAPI::WriteJsonValue;
using RallyHereDeveloperAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_DevMatchMakingRuleUpdateRequest

void FRHAPI_DevMatchMakingRuleUpdateRequest::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
    Writer->WriteObjectStart();
    if (MatchMakingRulesetId_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("match_making_ruleset_id"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, MatchMakingRulesetId_Optional);
    }
    if (ComparisonOperation_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("comparison_operation"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, EnumToString(ComparisonOperation_Optional));
    }
    if (ItemId_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("item_id"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, ItemId_Optional);
    }
    if (RuleType_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("rule_type"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, EnumToString(RuleType_Optional));
    }
    if (ComparisonValue_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("comparison_value"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, ComparisonValue_Optional);
    }
    Writer->WriteObjectEnd();
}

bool FRHAPI_DevMatchMakingRuleUpdateRequest::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
    const TSharedPtr<FJsonObject>* Object;
    if (!JsonValue->TryGetObject(Object))
        return false;

    bool ParseSuccess = true;

    const TSharedPtr<FJsonValue> JsonMatchMakingRulesetIdField = (*Object)->TryGetField(TEXT("match_making_ruleset_id"));
    if (JsonMatchMakingRulesetIdField.IsValid() && !JsonMatchMakingRulesetIdField->IsNull())
    {
        MatchMakingRulesetId_IsSet = TryGetJsonValue(JsonMatchMakingRulesetIdField, MatchMakingRulesetId_Optional);
        ParseSuccess &= MatchMakingRulesetId_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonComparisonOperationField = (*Object)->TryGetField(TEXT("comparison_operation"));
    if (JsonComparisonOperationField.IsValid() && !JsonComparisonOperationField->IsNull())
    {
        ComparisonOperation_IsSet = TryGetJsonValue(JsonComparisonOperationField, ComparisonOperation_Optional);
        ParseSuccess &= ComparisonOperation_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonItemIdField = (*Object)->TryGetField(TEXT("item_id"));
    if (JsonItemIdField.IsValid() && !JsonItemIdField->IsNull())
    {
        ItemId_IsSet = TryGetJsonValue(JsonItemIdField, ItemId_Optional);
        ParseSuccess &= ItemId_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonRuleTypeField = (*Object)->TryGetField(TEXT("rule_type"));
    if (JsonRuleTypeField.IsValid() && !JsonRuleTypeField->IsNull())
    {
        RuleType_IsSet = TryGetJsonValue(JsonRuleTypeField, RuleType_Optional);
        ParseSuccess &= RuleType_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonComparisonValueField = (*Object)->TryGetField(TEXT("comparison_value"));
    if (JsonComparisonValueField.IsValid() && !JsonComparisonValueField->IsNull())
    {
        ComparisonValue_IsSet = TryGetJsonValue(JsonComparisonValueField, ComparisonValue_Optional);
        ParseSuccess &= ComparisonValue_IsSet;
    }

    return ParseSuccess;
}

