// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "DevCreateXpRequest.h"
#include "RallyHereDeveloperAPIModule.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereDeveloperAPI::ToStringFormatArg;
using RallyHereDeveloperAPI::WriteJsonValue;
using RallyHereDeveloperAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_DevCreateXpRequest

void FRHAPI_DevCreateXpRequest::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
    Writer->WriteObjectStart();
    if (CustomData_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("custom_data"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, CustomData_Optional);
    }
    if (Name_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("name"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, Name_Optional);
    }
    if (Description_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("description"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, Description_Optional);
    }
    if (XpThresholds_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("xp_thresholds"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, XpThresholds_Optional);
    }
    if (LegacyXpId_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("legacy_xp_id"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, LegacyXpId_Optional);
    }
    Writer->WriteObjectEnd();
}

bool FRHAPI_DevCreateXpRequest::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
    const TSharedPtr<FJsonObject>* Object;
    if (!JsonValue->TryGetObject(Object))
        return false;

    bool ParseSuccess = true;

    const TSharedPtr<FJsonValue> JsonCustomDataField = (*Object)->TryGetField(TEXT("custom_data"));
    if (JsonCustomDataField.IsValid() && !JsonCustomDataField->IsNull())
    {
        CustomData_IsSet = TryGetJsonValue(JsonCustomDataField, CustomData_Optional);
        ParseSuccess &= CustomData_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonNameField = (*Object)->TryGetField(TEXT("name"));
    if (JsonNameField.IsValid() && !JsonNameField->IsNull())
    {
        Name_IsSet = TryGetJsonValue(JsonNameField, Name_Optional);
        ParseSuccess &= Name_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonDescriptionField = (*Object)->TryGetField(TEXT("description"));
    if (JsonDescriptionField.IsValid() && !JsonDescriptionField->IsNull())
    {
        Description_IsSet = TryGetJsonValue(JsonDescriptionField, Description_Optional);
        ParseSuccess &= Description_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonXpThresholdsField = (*Object)->TryGetField(TEXT("xp_thresholds"));
    if (JsonXpThresholdsField.IsValid() && !JsonXpThresholdsField->IsNull())
    {
        XpThresholds_IsSet = TryGetJsonValue(JsonXpThresholdsField, XpThresholds_Optional);
        ParseSuccess &= XpThresholds_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonLegacyXpIdField = (*Object)->TryGetField(TEXT("legacy_xp_id"));
    if (JsonLegacyXpIdField.IsValid() && !JsonLegacyXpIdField->IsNull())
    {
        LegacyXpId_IsSet = TryGetJsonValue(JsonLegacyXpIdField, LegacyXpId_Optional);
        ParseSuccess &= LegacyXpId_IsSet;
    }

    return ParseSuccess;
}

