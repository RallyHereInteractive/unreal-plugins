// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "DevSandbox.h"
#include "RallyHereDeveloperAPIModule.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereDeveloperAPI::ToStringFormatArg;
using RallyHereDeveloperAPI::WriteJsonValue;
using RallyHereDeveloperAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_DevSandbox

void FRHAPI_DevSandbox::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
    Writer->WriteObjectStart();
    Writer->WriteIdentifierPrefix(TEXT("sandbox_id"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, SandboxId);
    Writer->WriteIdentifierPrefix(TEXT("product_id"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, ProductId);
    if (Name_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("name"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, Name_Optional);
    }
    if (PrimaryContactEmail_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("primary_contact_email"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, PrimaryContactEmail_Optional);
    }
    Writer->WriteIdentifierPrefix(TEXT("short_name"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, ShortName);
    Writer->WriteIdentifierPrefix(TEXT("last_modified_timestamp"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, LastModifiedTimestamp);
    Writer->WriteIdentifierPrefix(TEXT("created_timestamp"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, CreatedTimestamp);
    if (ClassicSupportToolUrl_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("classic_support_tool_url"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, ClassicSupportToolUrl_Optional);
    }
    Writer->WriteIdentifierPrefix(TEXT("archive"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, Archive);
    Writer->WriteObjectEnd();
}

bool FRHAPI_DevSandbox::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
    const TSharedPtr<FJsonObject>* Object;
    if (!JsonValue->TryGetObject(Object))
        return false;

    bool ParseSuccess = true;

    const TSharedPtr<FJsonValue> JsonSandboxIdField = (*Object)->TryGetField(TEXT("sandbox_id"));
    ParseSuccess &= JsonSandboxIdField.IsValid() && !JsonSandboxIdField->IsNull() && TryGetJsonValue(JsonSandboxIdField, SandboxId);
    const TSharedPtr<FJsonValue> JsonProductIdField = (*Object)->TryGetField(TEXT("product_id"));
    ParseSuccess &= JsonProductIdField.IsValid() && !JsonProductIdField->IsNull() && TryGetJsonValue(JsonProductIdField, ProductId);
    const TSharedPtr<FJsonValue> JsonNameField = (*Object)->TryGetField(TEXT("name"));
    if (JsonNameField.IsValid() && !JsonNameField->IsNull())
    {
        Name_IsSet = TryGetJsonValue(JsonNameField, Name_Optional);
        ParseSuccess &= Name_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonPrimaryContactEmailField = (*Object)->TryGetField(TEXT("primary_contact_email"));
    if (JsonPrimaryContactEmailField.IsValid() && !JsonPrimaryContactEmailField->IsNull())
    {
        PrimaryContactEmail_IsSet = TryGetJsonValue(JsonPrimaryContactEmailField, PrimaryContactEmail_Optional);
        ParseSuccess &= PrimaryContactEmail_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonShortNameField = (*Object)->TryGetField(TEXT("short_name"));
    ParseSuccess &= JsonShortNameField.IsValid() && !JsonShortNameField->IsNull() && TryGetJsonValue(JsonShortNameField, ShortName);
    const TSharedPtr<FJsonValue> JsonLastModifiedTimestampField = (*Object)->TryGetField(TEXT("last_modified_timestamp"));
    ParseSuccess &= JsonLastModifiedTimestampField.IsValid() && !JsonLastModifiedTimestampField->IsNull() && TryGetJsonValue(JsonLastModifiedTimestampField, LastModifiedTimestamp);
    const TSharedPtr<FJsonValue> JsonCreatedTimestampField = (*Object)->TryGetField(TEXT("created_timestamp"));
    ParseSuccess &= JsonCreatedTimestampField.IsValid() && !JsonCreatedTimestampField->IsNull() && TryGetJsonValue(JsonCreatedTimestampField, CreatedTimestamp);
    const TSharedPtr<FJsonValue> JsonClassicSupportToolUrlField = (*Object)->TryGetField(TEXT("classic_support_tool_url"));
    if (JsonClassicSupportToolUrlField.IsValid() && !JsonClassicSupportToolUrlField->IsNull())
    {
        ClassicSupportToolUrl_IsSet = TryGetJsonValue(JsonClassicSupportToolUrlField, ClassicSupportToolUrl_Optional);
        ParseSuccess &= ClassicSupportToolUrl_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonArchiveField = (*Object)->TryGetField(TEXT("archive"));
    ParseSuccess &= JsonArchiveField.IsValid() && !JsonArchiveField->IsNull() && TryGetJsonValue(JsonArchiveField, Archive);

    return ParseSuccess;
}

