// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "DevSandboxRequest.h"
#include "RallyHereDeveloperAPIModule.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereDeveloperAPI::ToStringFormatArg;
using RallyHereDeveloperAPI::WriteJsonValue;
using RallyHereDeveloperAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_DevSandboxRequest

void FRHAPI_DevSandboxRequest::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
    Writer->WriteObjectStart();
    Writer->WriteIdentifierPrefix(TEXT("sandbox_id"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, SandboxId);
    Writer->WriteIdentifierPrefix(TEXT("name"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, Name);
    Writer->WriteIdentifierPrefix(TEXT("primary_contact_email"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, PrimaryContactEmail);
    Writer->WriteIdentifierPrefix(TEXT("short_name"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, ShortName);
    if (Archive_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("archive"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, Archive_Optional);
    }
    if (ClassicSupportToolUrl_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("classic_support_tool_url"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, ClassicSupportToolUrl_Optional);
    }
    Writer->WriteObjectEnd();
}

bool FRHAPI_DevSandboxRequest::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
    const TSharedPtr<FJsonObject>* Object;
    if (!JsonValue->TryGetObject(Object))
        return false;

    bool ParseSuccess = true;

    const TSharedPtr<FJsonValue> JsonSandboxIdField = (*Object)->TryGetField(TEXT("sandbox_id"));
    ParseSuccess &= JsonSandboxIdField.IsValid() && !JsonSandboxIdField->IsNull() && TryGetJsonValue(JsonSandboxIdField, SandboxId);
    const TSharedPtr<FJsonValue> JsonNameField = (*Object)->TryGetField(TEXT("name"));
    ParseSuccess &= JsonNameField.IsValid() && !JsonNameField->IsNull() && TryGetJsonValue(JsonNameField, Name);
    const TSharedPtr<FJsonValue> JsonPrimaryContactEmailField = (*Object)->TryGetField(TEXT("primary_contact_email"));
    ParseSuccess &= JsonPrimaryContactEmailField.IsValid() && !JsonPrimaryContactEmailField->IsNull() && TryGetJsonValue(JsonPrimaryContactEmailField, PrimaryContactEmail);
    const TSharedPtr<FJsonValue> JsonShortNameField = (*Object)->TryGetField(TEXT("short_name"));
    ParseSuccess &= JsonShortNameField.IsValid() && !JsonShortNameField->IsNull() && TryGetJsonValue(JsonShortNameField, ShortName);
    const TSharedPtr<FJsonValue> JsonArchiveField = (*Object)->TryGetField(TEXT("archive"));
    if (JsonArchiveField.IsValid() && !JsonArchiveField->IsNull())
    {
        Archive_IsSet = TryGetJsonValue(JsonArchiveField, Archive_Optional);
        ParseSuccess &= Archive_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonClassicSupportToolUrlField = (*Object)->TryGetField(TEXT("classic_support_tool_url"));
    if (JsonClassicSupportToolUrlField.IsValid() && !JsonClassicSupportToolUrlField->IsNull())
    {
        ClassicSupportToolUrl_IsSet = TryGetJsonValue(JsonClassicSupportToolUrlField, ClassicSupportToolUrl_Optional);
        ParseSuccess &= ClassicSupportToolUrl_IsSet;
    }

    return ParseSuccess;
}

