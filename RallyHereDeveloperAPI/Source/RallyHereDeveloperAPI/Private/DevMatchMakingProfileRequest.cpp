// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "DevMatchMakingProfileRequest.h"
#include "RallyHereDeveloperAPIModule.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereDeveloperAPI::ToStringFormatArg;
using RallyHereDeveloperAPI::WriteJsonValue;
using RallyHereDeveloperAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_DevMatchMakingProfileRequest

void FRHAPI_DevMatchMakingProfileRequest::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
    Writer->WriteObjectStart();
    if (JoinMode_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("join_mode"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, EnumToString(JoinMode_Optional));
    }
    Writer->WriteIdentifierPrefix(TEXT("rank_id"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, RankId);
    Writer->WriteIdentifierPrefix(TEXT("num_sides"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, NumSides);
    Writer->WriteIdentifierPrefix(TEXT("min_players_per_side"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, MinPlayersPerSide);
    Writer->WriteIdentifierPrefix(TEXT("max_players_per_side"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, MaxPlayersPerSide);
    Writer->WriteIdentifierPrefix(TEXT("min_players_per_linking"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, MinPlayersPerLinking);
    Writer->WriteIdentifierPrefix(TEXT("max_players_per_linking"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, MaxPlayersPerLinking);
    Writer->WriteIdentifierPrefix(TEXT("max_side_delta"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, MaxSideDelta);
    Writer->WriteIdentifierPrefix(TEXT("instance_request_template_id"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, InstanceRequestTemplateId);
    if (TaskforceSizeByTime_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("taskforce_size_by_time"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, TaskforceSizeByTime_Optional);
    }
    Writer->WriteIdentifierPrefix(TEXT("match_making_function_config"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, MatchMakingFunctionConfig);
    Writer->WriteIdentifierPrefix(TEXT("match_making_stride_id"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, MatchMakingStrideId);
    Writer->WriteIdentifierPrefix(TEXT("crossplay_partition_id"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, CrossplayPartitionId);
    if (LegacyConfig_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("legacy_config"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, LegacyConfig_Optional);
    }
    if (TrueskillQualityByTimeMaxQuality_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("trueskill_quality_by_time_max_quality"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, TrueskillQualityByTimeMaxQuality_Optional);
    }
    if (TrueskillQualityByTimeMaxMinutes_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("trueskill_quality_by_time_max_minutes"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, TrueskillQualityByTimeMaxMinutes_Optional);
    }
    if (TrueskillQualityByTimeMethod_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("trueskill_quality_by_time_method"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, EnumToString(TrueskillQualityByTimeMethod_Optional));
    }
    Writer->WriteIdentifierPrefix(TEXT("active"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, Active);
    Writer->WriteIdentifierPrefix(TEXT("supports_backfill"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, SupportsBackfill);
    Writer->WriteObjectEnd();
}

bool FRHAPI_DevMatchMakingProfileRequest::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
    const TSharedPtr<FJsonObject>* Object;
    if (!JsonValue->TryGetObject(Object))
        return false;

    bool ParseSuccess = true;

    const TSharedPtr<FJsonValue> JsonJoinModeField = (*Object)->TryGetField(TEXT("join_mode"));
    if (JsonJoinModeField.IsValid() && !JsonJoinModeField->IsNull())
    {
        JoinMode_IsSet = TryGetJsonValue(JsonJoinModeField, JoinMode_Optional);
        ParseSuccess &= JoinMode_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonRankIdField = (*Object)->TryGetField(TEXT("rank_id"));
    ParseSuccess &= JsonRankIdField.IsValid() && !JsonRankIdField->IsNull() && TryGetJsonValue(JsonRankIdField, RankId);
    const TSharedPtr<FJsonValue> JsonNumSidesField = (*Object)->TryGetField(TEXT("num_sides"));
    ParseSuccess &= JsonNumSidesField.IsValid() && !JsonNumSidesField->IsNull() && TryGetJsonValue(JsonNumSidesField, NumSides);
    const TSharedPtr<FJsonValue> JsonMinPlayersPerSideField = (*Object)->TryGetField(TEXT("min_players_per_side"));
    ParseSuccess &= JsonMinPlayersPerSideField.IsValid() && !JsonMinPlayersPerSideField->IsNull() && TryGetJsonValue(JsonMinPlayersPerSideField, MinPlayersPerSide);
    const TSharedPtr<FJsonValue> JsonMaxPlayersPerSideField = (*Object)->TryGetField(TEXT("max_players_per_side"));
    ParseSuccess &= JsonMaxPlayersPerSideField.IsValid() && !JsonMaxPlayersPerSideField->IsNull() && TryGetJsonValue(JsonMaxPlayersPerSideField, MaxPlayersPerSide);
    const TSharedPtr<FJsonValue> JsonMinPlayersPerLinkingField = (*Object)->TryGetField(TEXT("min_players_per_linking"));
    ParseSuccess &= JsonMinPlayersPerLinkingField.IsValid() && !JsonMinPlayersPerLinkingField->IsNull() && TryGetJsonValue(JsonMinPlayersPerLinkingField, MinPlayersPerLinking);
    const TSharedPtr<FJsonValue> JsonMaxPlayersPerLinkingField = (*Object)->TryGetField(TEXT("max_players_per_linking"));
    ParseSuccess &= JsonMaxPlayersPerLinkingField.IsValid() && !JsonMaxPlayersPerLinkingField->IsNull() && TryGetJsonValue(JsonMaxPlayersPerLinkingField, MaxPlayersPerLinking);
    const TSharedPtr<FJsonValue> JsonMaxSideDeltaField = (*Object)->TryGetField(TEXT("max_side_delta"));
    ParseSuccess &= JsonMaxSideDeltaField.IsValid() && !JsonMaxSideDeltaField->IsNull() && TryGetJsonValue(JsonMaxSideDeltaField, MaxSideDelta);
    const TSharedPtr<FJsonValue> JsonInstanceRequestTemplateIdField = (*Object)->TryGetField(TEXT("instance_request_template_id"));
    ParseSuccess &= JsonInstanceRequestTemplateIdField.IsValid() && !JsonInstanceRequestTemplateIdField->IsNull() && TryGetJsonValue(JsonInstanceRequestTemplateIdField, InstanceRequestTemplateId);
    const TSharedPtr<FJsonValue> JsonTaskforceSizeByTimeField = (*Object)->TryGetField(TEXT("taskforce_size_by_time"));
    if (JsonTaskforceSizeByTimeField.IsValid() && !JsonTaskforceSizeByTimeField->IsNull())
    {
        TaskforceSizeByTime_IsSet = TryGetJsonValue(JsonTaskforceSizeByTimeField, TaskforceSizeByTime_Optional);
        ParseSuccess &= TaskforceSizeByTime_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonMatchMakingFunctionConfigField = (*Object)->TryGetField(TEXT("match_making_function_config"));
    ParseSuccess &= JsonMatchMakingFunctionConfigField.IsValid() && !JsonMatchMakingFunctionConfigField->IsNull() && TryGetJsonValue(JsonMatchMakingFunctionConfigField, MatchMakingFunctionConfig);
    const TSharedPtr<FJsonValue> JsonMatchMakingStrideIdField = (*Object)->TryGetField(TEXT("match_making_stride_id"));
    ParseSuccess &= JsonMatchMakingStrideIdField.IsValid() && !JsonMatchMakingStrideIdField->IsNull() && TryGetJsonValue(JsonMatchMakingStrideIdField, MatchMakingStrideId);
    const TSharedPtr<FJsonValue> JsonCrossplayPartitionIdField = (*Object)->TryGetField(TEXT("crossplay_partition_id"));
    ParseSuccess &= JsonCrossplayPartitionIdField.IsValid() && !JsonCrossplayPartitionIdField->IsNull() && TryGetJsonValue(JsonCrossplayPartitionIdField, CrossplayPartitionId);
    const TSharedPtr<FJsonValue> JsonLegacyConfigField = (*Object)->TryGetField(TEXT("legacy_config"));
    if (JsonLegacyConfigField.IsValid() && !JsonLegacyConfigField->IsNull())
    {
        LegacyConfig_IsSet = TryGetJsonValue(JsonLegacyConfigField, LegacyConfig_Optional);
        ParseSuccess &= LegacyConfig_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonTrueskillQualityByTimeMaxQualityField = (*Object)->TryGetField(TEXT("trueskill_quality_by_time_max_quality"));
    if (JsonTrueskillQualityByTimeMaxQualityField.IsValid() && !JsonTrueskillQualityByTimeMaxQualityField->IsNull())
    {
        TrueskillQualityByTimeMaxQuality_IsSet = TryGetJsonValue(JsonTrueskillQualityByTimeMaxQualityField, TrueskillQualityByTimeMaxQuality_Optional);
        ParseSuccess &= TrueskillQualityByTimeMaxQuality_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonTrueskillQualityByTimeMaxMinutesField = (*Object)->TryGetField(TEXT("trueskill_quality_by_time_max_minutes"));
    if (JsonTrueskillQualityByTimeMaxMinutesField.IsValid() && !JsonTrueskillQualityByTimeMaxMinutesField->IsNull())
    {
        TrueskillQualityByTimeMaxMinutes_IsSet = TryGetJsonValue(JsonTrueskillQualityByTimeMaxMinutesField, TrueskillQualityByTimeMaxMinutes_Optional);
        ParseSuccess &= TrueskillQualityByTimeMaxMinutes_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonTrueskillQualityByTimeMethodField = (*Object)->TryGetField(TEXT("trueskill_quality_by_time_method"));
    if (JsonTrueskillQualityByTimeMethodField.IsValid() && !JsonTrueskillQualityByTimeMethodField->IsNull())
    {
        TrueskillQualityByTimeMethod_IsSet = TryGetJsonValue(JsonTrueskillQualityByTimeMethodField, TrueskillQualityByTimeMethod_Optional);
        ParseSuccess &= TrueskillQualityByTimeMethod_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonActiveField = (*Object)->TryGetField(TEXT("active"));
    ParseSuccess &= JsonActiveField.IsValid() && !JsonActiveField->IsNull() && TryGetJsonValue(JsonActiveField, Active);
    const TSharedPtr<FJsonValue> JsonSupportsBackfillField = (*Object)->TryGetField(TEXT("supports_backfill"));
    ParseSuccess &= JsonSupportsBackfillField.IsValid() && !JsonSupportsBackfillField->IsNull() && TryGetJsonValue(JsonSupportsBackfillField, SupportsBackfill);

    return ParseSuccess;
}

