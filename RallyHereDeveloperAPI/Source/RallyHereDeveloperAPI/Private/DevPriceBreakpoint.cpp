// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "DevPriceBreakpoint.h"
#include "RallyHereDeveloperAPIModule.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereDeveloperAPI::ToStringFormatArg;
using RallyHereDeveloperAPI::WriteJsonValue;
using RallyHereDeveloperAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_DevPriceBreakpoint

void FRHAPI_DevPriceBreakpoint::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
    Writer->WriteObjectStart();
    if (CustomData_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("custom_data"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, CustomData_Optional);
    }
    Writer->WriteIdentifierPrefix(TEXT("price_item_id"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, PriceItemId);
    Writer->WriteIdentifierPrefix(TEXT("quantity"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, Quantity);
    Writer->WriteIdentifierPrefix(TEXT("price"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, Price);
    if (PriceItemName_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("price_item_name"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, PriceItemName_Optional);
    }
    Writer->WriteObjectEnd();
}

bool FRHAPI_DevPriceBreakpoint::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
    const TSharedPtr<FJsonObject>* Object;
    if (!JsonValue->TryGetObject(Object))
        return false;

    bool ParseSuccess = true;

    const TSharedPtr<FJsonValue> JsonCustomDataField = (*Object)->TryGetField(TEXT("custom_data"));
    if (JsonCustomDataField.IsValid() && !JsonCustomDataField->IsNull())
    {
        CustomData_IsSet = TryGetJsonValue(JsonCustomDataField, CustomData_Optional);
        ParseSuccess &= CustomData_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonPriceItemIdField = (*Object)->TryGetField(TEXT("price_item_id"));
    ParseSuccess &= JsonPriceItemIdField.IsValid() && !JsonPriceItemIdField->IsNull() && TryGetJsonValue(JsonPriceItemIdField, PriceItemId);
    const TSharedPtr<FJsonValue> JsonQuantityField = (*Object)->TryGetField(TEXT("quantity"));
    ParseSuccess &= JsonQuantityField.IsValid() && !JsonQuantityField->IsNull() && TryGetJsonValue(JsonQuantityField, Quantity);
    const TSharedPtr<FJsonValue> JsonPriceField = (*Object)->TryGetField(TEXT("price"));
    ParseSuccess &= JsonPriceField.IsValid() && !JsonPriceField->IsNull() && TryGetJsonValue(JsonPriceField, Price);
    const TSharedPtr<FJsonValue> JsonPriceItemNameField = (*Object)->TryGetField(TEXT("price_item_name"));
    if (JsonPriceItemNameField.IsValid() && !JsonPriceItemNameField->IsNull())
    {
        PriceItemName_IsSet = TryGetJsonValue(JsonPriceItemNameField, PriceItemName_Optional);
        ParseSuccess &= PriceItemName_IsSet;
    }

    return ParseSuccess;
}

