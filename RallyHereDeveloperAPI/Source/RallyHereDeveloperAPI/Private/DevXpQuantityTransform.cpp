// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "DevXpQuantityTransform.h"
#include "RallyHereDeveloperAPIModule.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereDeveloperAPI::ToStringFormatArg;
using RallyHereDeveloperAPI::WriteJsonValue;
using RallyHereDeveloperAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for ERHAPI_DevXpQuantityTransform
FString EnumToString(const ERHAPI_DevXpQuantityTransform& Value)
{
    switch (Value)
    {
    case ERHAPI_DevXpQuantityTransform::None:
        return TEXT("none");
    case ERHAPI_DevXpQuantityTransform::FromCurrentXpToTargetAdditionalLevelMinXp:
        return TEXT("from_current_xp_to_target_additional_level_min_xp");
    case ERHAPI_DevXpQuantityTransform::FromCurrentLevelMinXpToTargetAdditionalLevelMinXp:
        return TEXT("from_current_level_min_xp_to_target_additional_level_min_xp");
    case ERHAPI_DevXpQuantityTransform::FromZeroToTargetExactLevelMinXp:
        return TEXT("from_zero_to_target_exact_level_min_xp");
    }

    UE_LOG(LogRallyHereDeveloperAPI, Error, TEXT("Invalid ERHAPI_DevXpQuantityTransform::Values Value (%d)"), (int)Value);
    return TEXT("");
}

bool EnumFromString(const FString& EnumAsString, ERHAPI_DevXpQuantityTransform& Value)
{
    static TMap<FString, ERHAPI_DevXpQuantityTransform> StringToEnum = {
        { TEXT("none"), ERHAPI_DevXpQuantityTransform::None },
        { TEXT("from_current_xp_to_target_additional_level_min_xp"), ERHAPI_DevXpQuantityTransform::FromCurrentXpToTargetAdditionalLevelMinXp },
        { TEXT("from_current_level_min_xp_to_target_additional_level_min_xp"), ERHAPI_DevXpQuantityTransform::FromCurrentLevelMinXpToTargetAdditionalLevelMinXp },
        { TEXT("from_zero_to_target_exact_level_min_xp"), ERHAPI_DevXpQuantityTransform::FromZeroToTargetExactLevelMinXp },    };

    const auto Found = StringToEnum.Find(EnumAsString);
    if(Found)
        Value = *Found;
    return Found != nullptr;
}

FStringFormatArg ToStringFormatArg(const ERHAPI_DevXpQuantityTransform& Value)
{
    return FStringFormatArg(EnumToString(Value));
}

void WriteJsonValue(TSharedRef<TJsonWriter<>>& Writer, const ERHAPI_DevXpQuantityTransform& Value)
{
    RallyHereDeveloperAPI::WriteJsonValue(Writer, EnumToString(Value));
}

bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, ERHAPI_DevXpQuantityTransform& Value)
{
    FString TmpValue;
    if (JsonValue->TryGetString(TmpValue))
    {
        if (EnumFromString(TmpValue, Value))
            return true;
    }
    return false;
}


