// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "DevOrgPortalAccountsPermissions.h"
#include "RallyHereDeveloperAPIModule.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereDeveloperAPI::ToStringFormatArg;
using RallyHereDeveloperAPI::WriteJsonValue;
using RallyHereDeveloperAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_DevOrgPortalAccountsPermissions

void FRHAPI_DevOrgPortalAccountsPermissions::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
    Writer->WriteObjectStart();
    Writer->WriteIdentifierPrefix(TEXT("account_permission_id"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, AccountPermissionId);
    Writer->WriteIdentifierPrefix(TEXT("account_id"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, AccountId);
    Writer->WriteIdentifierPrefix(TEXT("account_email"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, AccountEmail);
    if (OrgId_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("org_id"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, OrgId_Optional);
    }
    if (ProductId_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("product_id"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, ProductId_Optional);
    }
    if (SandboxId_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("sandbox_id"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, SandboxId_Optional);
    }
    Writer->WriteIdentifierPrefix(TEXT("permission_id"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, PermissionId);
    Writer->WriteIdentifierPrefix(TEXT("assigned_org_id"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, AssignedOrgId);
    Writer->WriteObjectEnd();
}

bool FRHAPI_DevOrgPortalAccountsPermissions::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
    const TSharedPtr<FJsonObject>* Object;
    if (!JsonValue->TryGetObject(Object))
        return false;

    bool ParseSuccess = true;

    const TSharedPtr<FJsonValue> JsonAccountPermissionIdField = (*Object)->TryGetField(TEXT("account_permission_id"));
    ParseSuccess &= JsonAccountPermissionIdField.IsValid() && !JsonAccountPermissionIdField->IsNull() && TryGetJsonValue(JsonAccountPermissionIdField, AccountPermissionId);
    const TSharedPtr<FJsonValue> JsonAccountIdField = (*Object)->TryGetField(TEXT("account_id"));
    ParseSuccess &= JsonAccountIdField.IsValid() && !JsonAccountIdField->IsNull() && TryGetJsonValue(JsonAccountIdField, AccountId);
    const TSharedPtr<FJsonValue> JsonAccountEmailField = (*Object)->TryGetField(TEXT("account_email"));
    ParseSuccess &= JsonAccountEmailField.IsValid() && !JsonAccountEmailField->IsNull() && TryGetJsonValue(JsonAccountEmailField, AccountEmail);
    const TSharedPtr<FJsonValue> JsonOrgIdField = (*Object)->TryGetField(TEXT("org_id"));
    if (JsonOrgIdField.IsValid() && !JsonOrgIdField->IsNull())
    {
        OrgId_IsSet = TryGetJsonValue(JsonOrgIdField, OrgId_Optional);
        ParseSuccess &= OrgId_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonProductIdField = (*Object)->TryGetField(TEXT("product_id"));
    if (JsonProductIdField.IsValid() && !JsonProductIdField->IsNull())
    {
        ProductId_IsSet = TryGetJsonValue(JsonProductIdField, ProductId_Optional);
        ParseSuccess &= ProductId_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonSandboxIdField = (*Object)->TryGetField(TEXT("sandbox_id"));
    if (JsonSandboxIdField.IsValid() && !JsonSandboxIdField->IsNull())
    {
        SandboxId_IsSet = TryGetJsonValue(JsonSandboxIdField, SandboxId_Optional);
        ParseSuccess &= SandboxId_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonPermissionIdField = (*Object)->TryGetField(TEXT("permission_id"));
    ParseSuccess &= JsonPermissionIdField.IsValid() && !JsonPermissionIdField->IsNull() && TryGetJsonValue(JsonPermissionIdField, PermissionId);
    const TSharedPtr<FJsonValue> JsonAssignedOrgIdField = (*Object)->TryGetField(TEXT("assigned_org_id"));
    ParseSuccess &= JsonAssignedOrgIdField.IsValid() && !JsonAssignedOrgIdField->IsNull() && TryGetJsonValue(JsonAssignedOrgIdField, AssignedOrgId);

    return ParseSuccess;
}

