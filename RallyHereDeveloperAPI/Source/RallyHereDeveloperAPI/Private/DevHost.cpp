// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "DevHost.h"
#include "RallyHereDeveloperAPIModule.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereDeveloperAPI::ToStringFormatArg;
using RallyHereDeveloperAPI::WriteJsonValue;
using RallyHereDeveloperAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_DevHost

void FRHAPI_DevHost::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
    Writer->WriteObjectStart();
    if (InternalHostname_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("internal_hostname"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, InternalHostname_Optional);
    }
    if (PublicHostname_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("public_hostname"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, PublicHostname_Optional);
    }
    if (InternalIpv4_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("internal_ipv4"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, InternalIpv4_Optional);
    }
    if (PublicIpv4_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("public_ipv4"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, PublicIpv4_Optional);
    }
    if (InternalIpv6_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("internal_ipv6"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, InternalIpv6_Optional);
    }
    if (PublicIpv6_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("public_ipv6"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, PublicIpv6_Optional);
    }
    if (GeographicLocation_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("geographic_location"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, GeographicLocation_Optional);
    }
    if (DatacenterProvider_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("datacenter_provider"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, DatacenterProvider_Optional);
    }
    if (DatacenterLocation_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("datacenter_location"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, DatacenterLocation_Optional);
    }
    if (MachineClass_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("machine_class"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, MachineClass_Optional);
    }
    if (MachineClassOverrides_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("machine_class_overrides"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, MachineClassOverrides_Optional);
    }
    if (MachineImage_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("machine_image"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, MachineImage_Optional);
    }
    if (MonthlyPrice_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("monthly_price"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, MonthlyPrice_Optional);
    }
    if (HourlyPrice_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("hourly_price"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, HourlyPrice_Optional);
    }
    if (Notes_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("notes"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, Notes_Optional);
    }
    if (Labels_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("labels"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, Labels_Optional);
    }
    if (DatacenterContract_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("datacenter_contract"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, DatacenterContract_Optional);
    }
    if (PriorHostId_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("prior_host_id"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, PriorHostId_Optional);
    }
    Writer->WriteIdentifierPrefix(TEXT("host_id"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, HostId);
    if (SimpleProductAssignments_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("simple_product_assignments"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, SimpleProductAssignments_Optional);
    }
    Writer->WriteObjectEnd();
}

bool FRHAPI_DevHost::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
    const TSharedPtr<FJsonObject>* Object;
    if (!JsonValue->TryGetObject(Object))
        return false;

    bool ParseSuccess = true;

    const TSharedPtr<FJsonValue> JsonInternalHostnameField = (*Object)->TryGetField(TEXT("internal_hostname"));
    if (JsonInternalHostnameField.IsValid() && !JsonInternalHostnameField->IsNull())
    {
        InternalHostname_IsSet = TryGetJsonValue(JsonInternalHostnameField, InternalHostname_Optional);
        ParseSuccess &= InternalHostname_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonPublicHostnameField = (*Object)->TryGetField(TEXT("public_hostname"));
    if (JsonPublicHostnameField.IsValid() && !JsonPublicHostnameField->IsNull())
    {
        PublicHostname_IsSet = TryGetJsonValue(JsonPublicHostnameField, PublicHostname_Optional);
        ParseSuccess &= PublicHostname_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonInternalIpv4Field = (*Object)->TryGetField(TEXT("internal_ipv4"));
    if (JsonInternalIpv4Field.IsValid() && !JsonInternalIpv4Field->IsNull())
    {
        InternalIpv4_IsSet = TryGetJsonValue(JsonInternalIpv4Field, InternalIpv4_Optional);
        ParseSuccess &= InternalIpv4_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonPublicIpv4Field = (*Object)->TryGetField(TEXT("public_ipv4"));
    if (JsonPublicIpv4Field.IsValid() && !JsonPublicIpv4Field->IsNull())
    {
        PublicIpv4_IsSet = TryGetJsonValue(JsonPublicIpv4Field, PublicIpv4_Optional);
        ParseSuccess &= PublicIpv4_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonInternalIpv6Field = (*Object)->TryGetField(TEXT("internal_ipv6"));
    if (JsonInternalIpv6Field.IsValid() && !JsonInternalIpv6Field->IsNull())
    {
        InternalIpv6_IsSet = TryGetJsonValue(JsonInternalIpv6Field, InternalIpv6_Optional);
        ParseSuccess &= InternalIpv6_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonPublicIpv6Field = (*Object)->TryGetField(TEXT("public_ipv6"));
    if (JsonPublicIpv6Field.IsValid() && !JsonPublicIpv6Field->IsNull())
    {
        PublicIpv6_IsSet = TryGetJsonValue(JsonPublicIpv6Field, PublicIpv6_Optional);
        ParseSuccess &= PublicIpv6_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonGeographicLocationField = (*Object)->TryGetField(TEXT("geographic_location"));
    if (JsonGeographicLocationField.IsValid() && !JsonGeographicLocationField->IsNull())
    {
        GeographicLocation_IsSet = TryGetJsonValue(JsonGeographicLocationField, GeographicLocation_Optional);
        ParseSuccess &= GeographicLocation_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonDatacenterProviderField = (*Object)->TryGetField(TEXT("datacenter_provider"));
    if (JsonDatacenterProviderField.IsValid() && !JsonDatacenterProviderField->IsNull())
    {
        DatacenterProvider_IsSet = TryGetJsonValue(JsonDatacenterProviderField, DatacenterProvider_Optional);
        ParseSuccess &= DatacenterProvider_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonDatacenterLocationField = (*Object)->TryGetField(TEXT("datacenter_location"));
    if (JsonDatacenterLocationField.IsValid() && !JsonDatacenterLocationField->IsNull())
    {
        DatacenterLocation_IsSet = TryGetJsonValue(JsonDatacenterLocationField, DatacenterLocation_Optional);
        ParseSuccess &= DatacenterLocation_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonMachineClassField = (*Object)->TryGetField(TEXT("machine_class"));
    if (JsonMachineClassField.IsValid() && !JsonMachineClassField->IsNull())
    {
        MachineClass_IsSet = TryGetJsonValue(JsonMachineClassField, MachineClass_Optional);
        ParseSuccess &= MachineClass_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonMachineClassOverridesField = (*Object)->TryGetField(TEXT("machine_class_overrides"));
    if (JsonMachineClassOverridesField.IsValid() && !JsonMachineClassOverridesField->IsNull())
    {
        MachineClassOverrides_IsSet = TryGetJsonValue(JsonMachineClassOverridesField, MachineClassOverrides_Optional);
        ParseSuccess &= MachineClassOverrides_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonMachineImageField = (*Object)->TryGetField(TEXT("machine_image"));
    if (JsonMachineImageField.IsValid() && !JsonMachineImageField->IsNull())
    {
        MachineImage_IsSet = TryGetJsonValue(JsonMachineImageField, MachineImage_Optional);
        ParseSuccess &= MachineImage_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonMonthlyPriceField = (*Object)->TryGetField(TEXT("monthly_price"));
    if (JsonMonthlyPriceField.IsValid() && !JsonMonthlyPriceField->IsNull())
    {
        MonthlyPrice_IsSet = TryGetJsonValue(JsonMonthlyPriceField, MonthlyPrice_Optional);
        ParseSuccess &= MonthlyPrice_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonHourlyPriceField = (*Object)->TryGetField(TEXT("hourly_price"));
    if (JsonHourlyPriceField.IsValid() && !JsonHourlyPriceField->IsNull())
    {
        HourlyPrice_IsSet = TryGetJsonValue(JsonHourlyPriceField, HourlyPrice_Optional);
        ParseSuccess &= HourlyPrice_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonNotesField = (*Object)->TryGetField(TEXT("notes"));
    if (JsonNotesField.IsValid() && !JsonNotesField->IsNull())
    {
        Notes_IsSet = TryGetJsonValue(JsonNotesField, Notes_Optional);
        ParseSuccess &= Notes_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonLabelsField = (*Object)->TryGetField(TEXT("labels"));
    if (JsonLabelsField.IsValid() && !JsonLabelsField->IsNull())
    {
        Labels_IsSet = TryGetJsonValue(JsonLabelsField, Labels_Optional);
        ParseSuccess &= Labels_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonDatacenterContractField = (*Object)->TryGetField(TEXT("datacenter_contract"));
    if (JsonDatacenterContractField.IsValid() && !JsonDatacenterContractField->IsNull())
    {
        DatacenterContract_IsSet = TryGetJsonValue(JsonDatacenterContractField, DatacenterContract_Optional);
        ParseSuccess &= DatacenterContract_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonPriorHostIdField = (*Object)->TryGetField(TEXT("prior_host_id"));
    if (JsonPriorHostIdField.IsValid() && !JsonPriorHostIdField->IsNull())
    {
        PriorHostId_IsSet = TryGetJsonValue(JsonPriorHostIdField, PriorHostId_Optional);
        ParseSuccess &= PriorHostId_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonHostIdField = (*Object)->TryGetField(TEXT("host_id"));
    ParseSuccess &= JsonHostIdField.IsValid() && !JsonHostIdField->IsNull() && TryGetJsonValue(JsonHostIdField, HostId);
    const TSharedPtr<FJsonValue> JsonSimpleProductAssignmentsField = (*Object)->TryGetField(TEXT("simple_product_assignments"));
    if (JsonSimpleProductAssignmentsField.IsValid() && !JsonSimpleProductAssignmentsField->IsNull())
    {
        SimpleProductAssignments_IsSet = TryGetJsonValue(JsonSimpleProductAssignmentsField, SimpleProductAssignments_Optional);
        ParseSuccess &= SimpleProductAssignments_IsSet;
    }

    return ParseSuccess;
}

