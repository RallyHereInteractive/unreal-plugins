// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "DevExpandedLootEntitlement.h"
#include "RallyHereDeveloperAPIModule.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereDeveloperAPI::ToStringFormatArg;
using RallyHereDeveloperAPI::WriteJsonValue;
using RallyHereDeveloperAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_DevExpandedLootEntitlement

void FRHAPI_DevExpandedLootEntitlement::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
    Writer->WriteObjectStart();
    Writer->WriteIdentifierPrefix(TEXT("loot_id"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, LootId);
    Writer->WriteIdentifierPrefix(TEXT("type"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, EnumToString(Type));
    if (LootName_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("loot_name"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, LootName_Optional);
    }
    if (LegacyLootId_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("legacy_loot_id"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, LegacyLootId_Optional);
    }
    Writer->WriteObjectEnd();
}

bool FRHAPI_DevExpandedLootEntitlement::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
    const TSharedPtr<FJsonObject>* Object;
    if (!JsonValue->TryGetObject(Object))
        return false;

    bool ParseSuccess = true;

    const TSharedPtr<FJsonValue> JsonLootIdField = (*Object)->TryGetField(TEXT("loot_id"));
    ParseSuccess &= JsonLootIdField.IsValid() && !JsonLootIdField->IsNull() && TryGetJsonValue(JsonLootIdField, LootId);
    const TSharedPtr<FJsonValue> JsonTypeField = (*Object)->TryGetField(TEXT("type"));
    ParseSuccess &= JsonTypeField.IsValid() && !JsonTypeField->IsNull() && TryGetJsonValue(JsonTypeField, Type);
    const TSharedPtr<FJsonValue> JsonLootNameField = (*Object)->TryGetField(TEXT("loot_name"));
    if (JsonLootNameField.IsValid() && !JsonLootNameField->IsNull())
    {
        LootName_IsSet = TryGetJsonValue(JsonLootNameField, LootName_Optional);
        ParseSuccess &= LootName_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonLegacyLootIdField = (*Object)->TryGetField(TEXT("legacy_loot_id"));
    if (JsonLegacyLootIdField.IsValid() && !JsonLegacyLootIdField->IsNull())
    {
        LegacyLootId_IsSet = TryGetJsonValue(JsonLegacyLootIdField, LegacyLootId_Optional);
        ParseSuccess &= LegacyLootId_IsSet;
    }

    return ParseSuccess;
}

