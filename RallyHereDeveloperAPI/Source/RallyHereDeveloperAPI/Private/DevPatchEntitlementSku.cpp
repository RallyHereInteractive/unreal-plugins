// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "DevPatchEntitlementSku.h"
#include "RallyHereDeveloperAPIModule.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereDeveloperAPI::ToStringFormatArg;
using RallyHereDeveloperAPI::WriteJsonValue;
using RallyHereDeveloperAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_DevPatchEntitlementSku

void FRHAPI_DevPatchEntitlementSku::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
    Writer->WriteObjectStart();
    if (CustomData_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("custom_data"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, CustomData_Optional);
    }
    if (Name_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("name"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, Name_Optional);
    }
    if (Description_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("description"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, Description_Optional);
    }
    if (Platform_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("platform"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, EnumToString(Platform_Optional));
    }
    if (LootEntitlement_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("loot_entitlement"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, LootEntitlement_Optional);
    }
    if (ExternalKeyEntitlement_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("external_key_entitlement"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, ExternalKeyEntitlement_Optional);
    }
    if (Sku_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("sku"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, Sku_Optional);
    }
    Writer->WriteObjectEnd();
}

bool FRHAPI_DevPatchEntitlementSku::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
    const TSharedPtr<FJsonObject>* Object;
    if (!JsonValue->TryGetObject(Object))
        return false;

    bool ParseSuccess = true;

    const TSharedPtr<FJsonValue> JsonCustomDataField = (*Object)->TryGetField(TEXT("custom_data"));
    if (JsonCustomDataField.IsValid() && !JsonCustomDataField->IsNull())
    {
        CustomData_IsSet = TryGetJsonValue(JsonCustomDataField, CustomData_Optional);
        ParseSuccess &= CustomData_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonNameField = (*Object)->TryGetField(TEXT("name"));
    if (JsonNameField.IsValid() && !JsonNameField->IsNull())
    {
        Name_IsSet = TryGetJsonValue(JsonNameField, Name_Optional);
        ParseSuccess &= Name_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonDescriptionField = (*Object)->TryGetField(TEXT("description"));
    if (JsonDescriptionField.IsValid() && !JsonDescriptionField->IsNull())
    {
        Description_IsSet = TryGetJsonValue(JsonDescriptionField, Description_Optional);
        ParseSuccess &= Description_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonPlatformField = (*Object)->TryGetField(TEXT("platform"));
    if (JsonPlatformField.IsValid() && !JsonPlatformField->IsNull())
    {
        Platform_IsSet = TryGetJsonValue(JsonPlatformField, Platform_Optional);
        ParseSuccess &= Platform_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonLootEntitlementField = (*Object)->TryGetField(TEXT("loot_entitlement"));
    if (JsonLootEntitlementField.IsValid() && !JsonLootEntitlementField->IsNull())
    {
        LootEntitlement_IsSet = TryGetJsonValue(JsonLootEntitlementField, LootEntitlement_Optional);
        ParseSuccess &= LootEntitlement_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonExternalKeyEntitlementField = (*Object)->TryGetField(TEXT("external_key_entitlement"));
    if (JsonExternalKeyEntitlementField.IsValid() && !JsonExternalKeyEntitlementField->IsNull())
    {
        ExternalKeyEntitlement_IsSet = TryGetJsonValue(JsonExternalKeyEntitlementField, ExternalKeyEntitlement_Optional);
        ParseSuccess &= ExternalKeyEntitlement_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonSkuField = (*Object)->TryGetField(TEXT("sku"));
    if (JsonSkuField.IsValid() && !JsonSkuField->IsNull())
    {
        Sku_IsSet = TryGetJsonValue(JsonSkuField, Sku_Optional);
        ParseSuccess &= Sku_IsSet;
    }

    return ParseSuccess;
}

