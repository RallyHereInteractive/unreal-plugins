// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "DevSteamConfig.h"
#include "RallyHereDeveloperAPIModule.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereDeveloperAPI::ToStringFormatArg;
using RallyHereDeveloperAPI::WriteJsonValue;
using RallyHereDeveloperAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_DevSteamConfig

void FRHAPI_DevSteamConfig::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
    Writer->WriteObjectStart();
    if (EnableLogin_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("enable_login"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, EnableLogin_Optional);
    }
    if (WalletRefundsTriggerBan_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("wallet_refunds_trigger_ban"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, WalletRefundsTriggerBan_Optional);
    }
    if (EnforceVacBans_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("enforce_vac_bans"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, EnforceVacBans_Optional);
    }
    if (EnforcePublisherBans_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("enforce_publisher_bans"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, EnforcePublisherBans_Optional);
    }
    Writer->WriteIdentifierPrefix(TEXT("appid"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, Appid);
    Writer->WriteObjectEnd();
}

bool FRHAPI_DevSteamConfig::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
    const TSharedPtr<FJsonObject>* Object;
    if (!JsonValue->TryGetObject(Object))
        return false;

    bool ParseSuccess = true;

    const TSharedPtr<FJsonValue> JsonEnableLoginField = (*Object)->TryGetField(TEXT("enable_login"));
    if (JsonEnableLoginField.IsValid() && !JsonEnableLoginField->IsNull())
    {
        EnableLogin_IsSet = TryGetJsonValue(JsonEnableLoginField, EnableLogin_Optional);
        ParseSuccess &= EnableLogin_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonWalletRefundsTriggerBanField = (*Object)->TryGetField(TEXT("wallet_refunds_trigger_ban"));
    if (JsonWalletRefundsTriggerBanField.IsValid() && !JsonWalletRefundsTriggerBanField->IsNull())
    {
        WalletRefundsTriggerBan_IsSet = TryGetJsonValue(JsonWalletRefundsTriggerBanField, WalletRefundsTriggerBan_Optional);
        ParseSuccess &= WalletRefundsTriggerBan_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonEnforceVacBansField = (*Object)->TryGetField(TEXT("enforce_vac_bans"));
    if (JsonEnforceVacBansField.IsValid() && !JsonEnforceVacBansField->IsNull())
    {
        EnforceVacBans_IsSet = TryGetJsonValue(JsonEnforceVacBansField, EnforceVacBans_Optional);
        ParseSuccess &= EnforceVacBans_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonEnforcePublisherBansField = (*Object)->TryGetField(TEXT("enforce_publisher_bans"));
    if (JsonEnforcePublisherBansField.IsValid() && !JsonEnforcePublisherBansField->IsNull())
    {
        EnforcePublisherBans_IsSet = TryGetJsonValue(JsonEnforcePublisherBansField, EnforcePublisherBans_Optional);
        ParseSuccess &= EnforcePublisherBans_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonAppidField = (*Object)->TryGetField(TEXT("appid"));
    ParseSuccess &= JsonAppidField.IsValid() && !JsonAppidField->IsNull() && TryGetJsonValue(JsonAppidField, Appid);

    return ParseSuccess;
}

