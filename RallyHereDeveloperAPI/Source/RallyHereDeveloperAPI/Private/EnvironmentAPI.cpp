// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#include "EnvironmentAPI.h"
#include "RallyHereDeveloperAPIModule.h"
#include "RallyHereDeveloperAPIAuthContext.h"
#include "RallyHereDeveloperAPIHttpRequester.h"
#include "HttpModule.h"
#include "Serialization/JsonSerializer.h"

namespace RallyHereDeveloperAPI
{

FEnvironmentAPI::FEnvironmentAPI() : FAPI()
{
    Url = TEXT("/api");
    Name = FName(TEXT("Environment"));
}

FEnvironmentAPI::~FEnvironmentAPI() {}

FHttpRequestPtr FEnvironmentAPI::EnvironmentGetEnvironmentMetricPlayersActive(const FRequest_EnvironmentGetEnvironmentMetricPlayersActive& Request, const FDelegate_EnvironmentGetEnvironmentMetricPlayersActive& Delegate /*= FDelegate_EnvironmentGetEnvironmentMetricPlayersActive()*/, int32 Priority /*= DefaultRallyHereDeveloperAPIPriority*/)
{
    if (!IsValid())
        return nullptr;

    TSharedPtr<FRallyHereDeveloperAPIHttpRequestData> RequestData = MakeShared<FRallyHereDeveloperAPIHttpRequestData>(CreateHttpRequest(Request), *this, Priority);
    RequestData->HttpRequest->SetURL(*(Url + Request.ComputePath()));

    for(const auto& It : AdditionalHeaderParams)
    {
        RequestData->HttpRequest->SetHeader(It.Key, It.Value);
    }

    if (!Request.SetupHttpRequest(RequestData->HttpRequest))
    {
        return nullptr;
    }

    RequestData->SetMetadata(Request.GetRequestMetadata());

    FHttpRequestCompleteDelegate ResponseDelegate;
    ResponseDelegate.BindRaw(this, &FEnvironmentAPI::OnEnvironmentGetEnvironmentMetricPlayersActiveResponse, Delegate, Request.GetRequestMetadata(), Request.GetAuthContext(), Priority);
    RequestData->SetDelegate(ResponseDelegate);

    auto* HttpRequester = FRallyHereDeveloperAPIHttpRequester::Get();
    if (HttpRequester)
    {
        HttpRequester->EnqueueHttpRequest(RequestData);
    }
    return RequestData->HttpRequest;
}

void FEnvironmentAPI::OnEnvironmentGetEnvironmentMetricPlayersActiveResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_EnvironmentGetEnvironmentMetricPlayersActive Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority)
{
    FHttpRequestCompleteDelegate ResponseDelegate;

    if (AuthContextForRetry)
    {
        // An included auth context indicates we should auth-retry this request, we only want to do that at most once per call.
        // So, we set the callback to use a null context for the retry
        ResponseDelegate.BindRaw(this, &FEnvironmentAPI::OnEnvironmentGetEnvironmentMetricPlayersActiveResponse, Delegate, RequestMetadata, TSharedPtr<FAuthContext>(), Priority);
    }

    FResponse_EnvironmentGetEnvironmentMetricPlayersActive Response{ RequestMetadata };
    const bool bWillRetryWithRefreshedAuth = HandleResponse(HttpRequest, HttpResponse, bSucceeded, AuthContextForRetry, Response, ResponseDelegate, RequestMetadata, Priority);

    {
        SCOPED_NAMED_EVENT(RallyHere_BroadcastRequestCompleted, FColor::Purple);
        OnRequestCompleted().Broadcast(Response, HttpRequest, HttpResponse, bSucceeded, bWillRetryWithRefreshedAuth);
    }

    if (!bWillRetryWithRefreshedAuth)
    {
        SCOPED_NAMED_EVENT(RallyHere_ExecuteDelegate, FColor::Purple);
        Delegate.ExecuteIfBound(Response);
    }
}

FRequest_EnvironmentGetEnvironmentMetricPlayersActive::FRequest_EnvironmentGetEnvironmentMetricPlayersActive()
{
    RequestMetadata.Identifier = FGuid::NewGuid();
    RequestMetadata.SimplifiedPath = GetSimplifiedPath();
    RequestMetadata.RetryCount = 0;
}

FName FRequest_EnvironmentGetEnvironmentMetricPlayersActive::GetSimplifiedPath() const
{
    static FName Path = FName(TEXT("/v1/sandbox/{sandbox_id}/analytics/players/active"));
    return Path;
}

FString FRequest_EnvironmentGetEnvironmentMetricPlayersActive::ComputePath() const
{
    TMap<FString, FStringFormatArg> PathParams = { 
        { TEXT("sandbox_id"), ToStringFormatArg(SandboxId) }
    };

    FString Path = FString::Format(TEXT("/v1/sandbox/{sandbox_id}/analytics/players/active"), PathParams);

    TArray<FString> QueryParams;
    if(FromDate.IsSet())
    {
        QueryParams.Add(FString(TEXT("from_date=")) + ToUrlString(FromDate.GetValue()));
    }
    if(ToDate.IsSet())
    {
        QueryParams.Add(FString(TEXT("to_date=")) + ToUrlString(ToDate.GetValue()));
    }
    if(PreviousSeconds.IsSet())
    {
        QueryParams.Add(FString(TEXT("previous_seconds=")) + ToUrlString(PreviousSeconds.GetValue()));
    }
    Path += TCHAR('?');
    Path += FString::Join(QueryParams, TEXT("&"));

    return Path;
}

bool FRequest_EnvironmentGetEnvironmentMetricPlayersActive::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
    static const TArray<FString> Consumes = {  };
    //static const TArray<FString> Produces = { TEXT("application/json") };

    HttpRequest->SetVerb(TEXT("GET"));

    if (!AuthContext)
    {
        UE_LOG(LogRallyHereDeveloperAPI, Error, TEXT("FRequest_EnvironmentGetEnvironmentMetricPlayersActive - missing auth context"));
        return false;
    }
    if (!AuthContext->AddBearerToken(HttpRequest))
    {
        UE_LOG(LogRallyHereDeveloperAPI, Error, TEXT("FRequest_EnvironmentGetEnvironmentMetricPlayersActive - failed to add bearer token"));
        return false;
    }

    if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json"))) // Default to Json Body request
    {
    }
    else if (Consumes.Contains(TEXT("multipart/form-data")))
    {
    }
    else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
    {
    }
    else
    {
        UE_LOG(LogRallyHereDeveloperAPI, Error, TEXT("FRequest_EnvironmentGetEnvironmentMetricPlayersActive - Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
        return false;
    }

    return true;
}

void FResponse_EnvironmentGetEnvironmentMetricPlayersActive::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
    FResponse::SetHttpResponseCode(InHttpResponseCode);
    switch ((int)InHttpResponseCode)
    {
    case 200:
        SetResponseString(TEXT("Successful Response"));
        break;
    case 422:
        SetResponseString(TEXT("Validation Error"));
        break;
    }
}

bool FResponse_EnvironmentGetEnvironmentMetricPlayersActive::TryGetContentFor200(FRHAPI_DevPlatformData& OutContent) const
{
    return TryGetJsonValue(ResponseJson, OutContent);
}

bool FResponse_EnvironmentGetEnvironmentMetricPlayersActive::TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const
{
    return TryGetJsonValue(ResponseJson, OutContent);
}

bool FResponse_EnvironmentGetEnvironmentMetricPlayersActive::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
    return TryGetJsonValue(JsonValue, Content);
}

FResponse_EnvironmentGetEnvironmentMetricPlayersActive::FResponse_EnvironmentGetEnvironmentMetricPlayersActive(FRequestMetadata InRequestMetadata) :
    FResponse(MoveTemp(InRequestMetadata))
{
}

FString Traits_EnvironmentGetEnvironmentMetricPlayersActive::Name = TEXT("EnvironmentGetEnvironmentMetricPlayersActive");

FHttpRequestPtr FEnvironmentAPI::EnvironmentGetEnvironmentMetricPlayersCcu(const FRequest_EnvironmentGetEnvironmentMetricPlayersCcu& Request, const FDelegate_EnvironmentGetEnvironmentMetricPlayersCcu& Delegate /*= FDelegate_EnvironmentGetEnvironmentMetricPlayersCcu()*/, int32 Priority /*= DefaultRallyHereDeveloperAPIPriority*/)
{
    if (!IsValid())
        return nullptr;

    TSharedPtr<FRallyHereDeveloperAPIHttpRequestData> RequestData = MakeShared<FRallyHereDeveloperAPIHttpRequestData>(CreateHttpRequest(Request), *this, Priority);
    RequestData->HttpRequest->SetURL(*(Url + Request.ComputePath()));

    for(const auto& It : AdditionalHeaderParams)
    {
        RequestData->HttpRequest->SetHeader(It.Key, It.Value);
    }

    if (!Request.SetupHttpRequest(RequestData->HttpRequest))
    {
        return nullptr;
    }

    RequestData->SetMetadata(Request.GetRequestMetadata());

    FHttpRequestCompleteDelegate ResponseDelegate;
    ResponseDelegate.BindRaw(this, &FEnvironmentAPI::OnEnvironmentGetEnvironmentMetricPlayersCcuResponse, Delegate, Request.GetRequestMetadata(), Request.GetAuthContext(), Priority);
    RequestData->SetDelegate(ResponseDelegate);

    auto* HttpRequester = FRallyHereDeveloperAPIHttpRequester::Get();
    if (HttpRequester)
    {
        HttpRequester->EnqueueHttpRequest(RequestData);
    }
    return RequestData->HttpRequest;
}

void FEnvironmentAPI::OnEnvironmentGetEnvironmentMetricPlayersCcuResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_EnvironmentGetEnvironmentMetricPlayersCcu Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority)
{
    FHttpRequestCompleteDelegate ResponseDelegate;

    if (AuthContextForRetry)
    {
        // An included auth context indicates we should auth-retry this request, we only want to do that at most once per call.
        // So, we set the callback to use a null context for the retry
        ResponseDelegate.BindRaw(this, &FEnvironmentAPI::OnEnvironmentGetEnvironmentMetricPlayersCcuResponse, Delegate, RequestMetadata, TSharedPtr<FAuthContext>(), Priority);
    }

    FResponse_EnvironmentGetEnvironmentMetricPlayersCcu Response{ RequestMetadata };
    const bool bWillRetryWithRefreshedAuth = HandleResponse(HttpRequest, HttpResponse, bSucceeded, AuthContextForRetry, Response, ResponseDelegate, RequestMetadata, Priority);

    {
        SCOPED_NAMED_EVENT(RallyHere_BroadcastRequestCompleted, FColor::Purple);
        OnRequestCompleted().Broadcast(Response, HttpRequest, HttpResponse, bSucceeded, bWillRetryWithRefreshedAuth);
    }

    if (!bWillRetryWithRefreshedAuth)
    {
        SCOPED_NAMED_EVENT(RallyHere_ExecuteDelegate, FColor::Purple);
        Delegate.ExecuteIfBound(Response);
    }
}

FRequest_EnvironmentGetEnvironmentMetricPlayersCcu::FRequest_EnvironmentGetEnvironmentMetricPlayersCcu()
{
    RequestMetadata.Identifier = FGuid::NewGuid();
    RequestMetadata.SimplifiedPath = GetSimplifiedPath();
    RequestMetadata.RetryCount = 0;
}

FName FRequest_EnvironmentGetEnvironmentMetricPlayersCcu::GetSimplifiedPath() const
{
    static FName Path = FName(TEXT("/v1/sandbox/{sandbox_id}/analytics/players/ccu"));
    return Path;
}

FString FRequest_EnvironmentGetEnvironmentMetricPlayersCcu::ComputePath() const
{
    TMap<FString, FStringFormatArg> PathParams = { 
        { TEXT("sandbox_id"), ToStringFormatArg(SandboxId) }
    };

    FString Path = FString::Format(TEXT("/v1/sandbox/{sandbox_id}/analytics/players/ccu"), PathParams);

    TArray<FString> QueryParams;
    if(FromDate.IsSet())
    {
        QueryParams.Add(FString(TEXT("from_date=")) + ToUrlString(FromDate.GetValue()));
    }
    if(ToDate.IsSet())
    {
        QueryParams.Add(FString(TEXT("to_date=")) + ToUrlString(ToDate.GetValue()));
    }
    if(PreviousSeconds.IsSet())
    {
        QueryParams.Add(FString(TEXT("previous_seconds=")) + ToUrlString(PreviousSeconds.GetValue()));
    }
    Path += TCHAR('?');
    Path += FString::Join(QueryParams, TEXT("&"));

    return Path;
}

bool FRequest_EnvironmentGetEnvironmentMetricPlayersCcu::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
    static const TArray<FString> Consumes = {  };
    //static const TArray<FString> Produces = { TEXT("application/json") };

    HttpRequest->SetVerb(TEXT("GET"));

    if (!AuthContext)
    {
        UE_LOG(LogRallyHereDeveloperAPI, Error, TEXT("FRequest_EnvironmentGetEnvironmentMetricPlayersCcu - missing auth context"));
        return false;
    }
    if (!AuthContext->AddBearerToken(HttpRequest))
    {
        UE_LOG(LogRallyHereDeveloperAPI, Error, TEXT("FRequest_EnvironmentGetEnvironmentMetricPlayersCcu - failed to add bearer token"));
        return false;
    }

    if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json"))) // Default to Json Body request
    {
    }
    else if (Consumes.Contains(TEXT("multipart/form-data")))
    {
    }
    else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
    {
    }
    else
    {
        UE_LOG(LogRallyHereDeveloperAPI, Error, TEXT("FRequest_EnvironmentGetEnvironmentMetricPlayersCcu - Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
        return false;
    }

    return true;
}

void FResponse_EnvironmentGetEnvironmentMetricPlayersCcu::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
    FResponse::SetHttpResponseCode(InHttpResponseCode);
    switch ((int)InHttpResponseCode)
    {
    case 200:
        SetResponseString(TEXT("Successful Response"));
        break;
    case 422:
        SetResponseString(TEXT("Validation Error"));
        break;
    }
}

bool FResponse_EnvironmentGetEnvironmentMetricPlayersCcu::TryGetContentFor200(FRHAPI_DevPlatformData& OutContent) const
{
    return TryGetJsonValue(ResponseJson, OutContent);
}

bool FResponse_EnvironmentGetEnvironmentMetricPlayersCcu::TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const
{
    return TryGetJsonValue(ResponseJson, OutContent);
}

bool FResponse_EnvironmentGetEnvironmentMetricPlayersCcu::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
    return TryGetJsonValue(JsonValue, Content);
}

FResponse_EnvironmentGetEnvironmentMetricPlayersCcu::FResponse_EnvironmentGetEnvironmentMetricPlayersCcu(FRequestMetadata InRequestMetadata) :
    FResponse(MoveTemp(InRequestMetadata))
{
}

FString Traits_EnvironmentGetEnvironmentMetricPlayersCcu::Name = TEXT("EnvironmentGetEnvironmentMetricPlayersCcu");

FHttpRequestPtr FEnvironmentAPI::EnvironmentGetEnvironmentMetricPlayersNew(const FRequest_EnvironmentGetEnvironmentMetricPlayersNew& Request, const FDelegate_EnvironmentGetEnvironmentMetricPlayersNew& Delegate /*= FDelegate_EnvironmentGetEnvironmentMetricPlayersNew()*/, int32 Priority /*= DefaultRallyHereDeveloperAPIPriority*/)
{
    if (!IsValid())
        return nullptr;

    TSharedPtr<FRallyHereDeveloperAPIHttpRequestData> RequestData = MakeShared<FRallyHereDeveloperAPIHttpRequestData>(CreateHttpRequest(Request), *this, Priority);
    RequestData->HttpRequest->SetURL(*(Url + Request.ComputePath()));

    for(const auto& It : AdditionalHeaderParams)
    {
        RequestData->HttpRequest->SetHeader(It.Key, It.Value);
    }

    if (!Request.SetupHttpRequest(RequestData->HttpRequest))
    {
        return nullptr;
    }

    RequestData->SetMetadata(Request.GetRequestMetadata());

    FHttpRequestCompleteDelegate ResponseDelegate;
    ResponseDelegate.BindRaw(this, &FEnvironmentAPI::OnEnvironmentGetEnvironmentMetricPlayersNewResponse, Delegate, Request.GetRequestMetadata(), Request.GetAuthContext(), Priority);
    RequestData->SetDelegate(ResponseDelegate);

    auto* HttpRequester = FRallyHereDeveloperAPIHttpRequester::Get();
    if (HttpRequester)
    {
        HttpRequester->EnqueueHttpRequest(RequestData);
    }
    return RequestData->HttpRequest;
}

void FEnvironmentAPI::OnEnvironmentGetEnvironmentMetricPlayersNewResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_EnvironmentGetEnvironmentMetricPlayersNew Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority)
{
    FHttpRequestCompleteDelegate ResponseDelegate;

    if (AuthContextForRetry)
    {
        // An included auth context indicates we should auth-retry this request, we only want to do that at most once per call.
        // So, we set the callback to use a null context for the retry
        ResponseDelegate.BindRaw(this, &FEnvironmentAPI::OnEnvironmentGetEnvironmentMetricPlayersNewResponse, Delegate, RequestMetadata, TSharedPtr<FAuthContext>(), Priority);
    }

    FResponse_EnvironmentGetEnvironmentMetricPlayersNew Response{ RequestMetadata };
    const bool bWillRetryWithRefreshedAuth = HandleResponse(HttpRequest, HttpResponse, bSucceeded, AuthContextForRetry, Response, ResponseDelegate, RequestMetadata, Priority);

    {
        SCOPED_NAMED_EVENT(RallyHere_BroadcastRequestCompleted, FColor::Purple);
        OnRequestCompleted().Broadcast(Response, HttpRequest, HttpResponse, bSucceeded, bWillRetryWithRefreshedAuth);
    }

    if (!bWillRetryWithRefreshedAuth)
    {
        SCOPED_NAMED_EVENT(RallyHere_ExecuteDelegate, FColor::Purple);
        Delegate.ExecuteIfBound(Response);
    }
}

FRequest_EnvironmentGetEnvironmentMetricPlayersNew::FRequest_EnvironmentGetEnvironmentMetricPlayersNew()
{
    RequestMetadata.Identifier = FGuid::NewGuid();
    RequestMetadata.SimplifiedPath = GetSimplifiedPath();
    RequestMetadata.RetryCount = 0;
}

FName FRequest_EnvironmentGetEnvironmentMetricPlayersNew::GetSimplifiedPath() const
{
    static FName Path = FName(TEXT("/v1/sandbox/{sandbox_id}/analytics/players/new"));
    return Path;
}

FString FRequest_EnvironmentGetEnvironmentMetricPlayersNew::ComputePath() const
{
    TMap<FString, FStringFormatArg> PathParams = { 
        { TEXT("sandbox_id"), ToStringFormatArg(SandboxId) }
    };

    FString Path = FString::Format(TEXT("/v1/sandbox/{sandbox_id}/analytics/players/new"), PathParams);

    TArray<FString> QueryParams;
    if(FromDate.IsSet())
    {
        QueryParams.Add(FString(TEXT("from_date=")) + ToUrlString(FromDate.GetValue()));
    }
    if(ToDate.IsSet())
    {
        QueryParams.Add(FString(TEXT("to_date=")) + ToUrlString(ToDate.GetValue()));
    }
    if(PreviousSeconds.IsSet())
    {
        QueryParams.Add(FString(TEXT("previous_seconds=")) + ToUrlString(PreviousSeconds.GetValue()));
    }
    Path += TCHAR('?');
    Path += FString::Join(QueryParams, TEXT("&"));

    return Path;
}

bool FRequest_EnvironmentGetEnvironmentMetricPlayersNew::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
    static const TArray<FString> Consumes = {  };
    //static const TArray<FString> Produces = { TEXT("application/json") };

    HttpRequest->SetVerb(TEXT("GET"));

    if (!AuthContext)
    {
        UE_LOG(LogRallyHereDeveloperAPI, Error, TEXT("FRequest_EnvironmentGetEnvironmentMetricPlayersNew - missing auth context"));
        return false;
    }
    if (!AuthContext->AddBearerToken(HttpRequest))
    {
        UE_LOG(LogRallyHereDeveloperAPI, Error, TEXT("FRequest_EnvironmentGetEnvironmentMetricPlayersNew - failed to add bearer token"));
        return false;
    }

    if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json"))) // Default to Json Body request
    {
    }
    else if (Consumes.Contains(TEXT("multipart/form-data")))
    {
    }
    else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
    {
    }
    else
    {
        UE_LOG(LogRallyHereDeveloperAPI, Error, TEXT("FRequest_EnvironmentGetEnvironmentMetricPlayersNew - Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
        return false;
    }

    return true;
}

void FResponse_EnvironmentGetEnvironmentMetricPlayersNew::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
    FResponse::SetHttpResponseCode(InHttpResponseCode);
    switch ((int)InHttpResponseCode)
    {
    case 200:
        SetResponseString(TEXT("Successful Response"));
        break;
    case 422:
        SetResponseString(TEXT("Validation Error"));
        break;
    }
}

bool FResponse_EnvironmentGetEnvironmentMetricPlayersNew::TryGetContentFor200(FRHAPI_DevPlatformData& OutContent) const
{
    return TryGetJsonValue(ResponseJson, OutContent);
}

bool FResponse_EnvironmentGetEnvironmentMetricPlayersNew::TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const
{
    return TryGetJsonValue(ResponseJson, OutContent);
}

bool FResponse_EnvironmentGetEnvironmentMetricPlayersNew::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
    return TryGetJsonValue(JsonValue, Content);
}

FResponse_EnvironmentGetEnvironmentMetricPlayersNew::FResponse_EnvironmentGetEnvironmentMetricPlayersNew(FRequestMetadata InRequestMetadata) :
    FResponse(MoveTemp(InRequestMetadata))
{
}

FString Traits_EnvironmentGetEnvironmentMetricPlayersNew::Name = TEXT("EnvironmentGetEnvironmentMetricPlayersNew");

FHttpRequestPtr FEnvironmentAPI::EnvironmentGetEnvironmentMetricPurchases(const FRequest_EnvironmentGetEnvironmentMetricPurchases& Request, const FDelegate_EnvironmentGetEnvironmentMetricPurchases& Delegate /*= FDelegate_EnvironmentGetEnvironmentMetricPurchases()*/, int32 Priority /*= DefaultRallyHereDeveloperAPIPriority*/)
{
    if (!IsValid())
        return nullptr;

    TSharedPtr<FRallyHereDeveloperAPIHttpRequestData> RequestData = MakeShared<FRallyHereDeveloperAPIHttpRequestData>(CreateHttpRequest(Request), *this, Priority);
    RequestData->HttpRequest->SetURL(*(Url + Request.ComputePath()));

    for(const auto& It : AdditionalHeaderParams)
    {
        RequestData->HttpRequest->SetHeader(It.Key, It.Value);
    }

    if (!Request.SetupHttpRequest(RequestData->HttpRequest))
    {
        return nullptr;
    }

    RequestData->SetMetadata(Request.GetRequestMetadata());

    FHttpRequestCompleteDelegate ResponseDelegate;
    ResponseDelegate.BindRaw(this, &FEnvironmentAPI::OnEnvironmentGetEnvironmentMetricPurchasesResponse, Delegate, Request.GetRequestMetadata(), Request.GetAuthContext(), Priority);
    RequestData->SetDelegate(ResponseDelegate);

    auto* HttpRequester = FRallyHereDeveloperAPIHttpRequester::Get();
    if (HttpRequester)
    {
        HttpRequester->EnqueueHttpRequest(RequestData);
    }
    return RequestData->HttpRequest;
}

void FEnvironmentAPI::OnEnvironmentGetEnvironmentMetricPurchasesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_EnvironmentGetEnvironmentMetricPurchases Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority)
{
    FHttpRequestCompleteDelegate ResponseDelegate;

    if (AuthContextForRetry)
    {
        // An included auth context indicates we should auth-retry this request, we only want to do that at most once per call.
        // So, we set the callback to use a null context for the retry
        ResponseDelegate.BindRaw(this, &FEnvironmentAPI::OnEnvironmentGetEnvironmentMetricPurchasesResponse, Delegate, RequestMetadata, TSharedPtr<FAuthContext>(), Priority);
    }

    FResponse_EnvironmentGetEnvironmentMetricPurchases Response{ RequestMetadata };
    const bool bWillRetryWithRefreshedAuth = HandleResponse(HttpRequest, HttpResponse, bSucceeded, AuthContextForRetry, Response, ResponseDelegate, RequestMetadata, Priority);

    {
        SCOPED_NAMED_EVENT(RallyHere_BroadcastRequestCompleted, FColor::Purple);
        OnRequestCompleted().Broadcast(Response, HttpRequest, HttpResponse, bSucceeded, bWillRetryWithRefreshedAuth);
    }

    if (!bWillRetryWithRefreshedAuth)
    {
        SCOPED_NAMED_EVENT(RallyHere_ExecuteDelegate, FColor::Purple);
        Delegate.ExecuteIfBound(Response);
    }
}

FRequest_EnvironmentGetEnvironmentMetricPurchases::FRequest_EnvironmentGetEnvironmentMetricPurchases()
{
    RequestMetadata.Identifier = FGuid::NewGuid();
    RequestMetadata.SimplifiedPath = GetSimplifiedPath();
    RequestMetadata.RetryCount = 0;
}

FName FRequest_EnvironmentGetEnvironmentMetricPurchases::GetSimplifiedPath() const
{
    static FName Path = FName(TEXT("/v1/sandbox/{sandbox_id}/analytics/purchases"));
    return Path;
}

FString FRequest_EnvironmentGetEnvironmentMetricPurchases::ComputePath() const
{
    TMap<FString, FStringFormatArg> PathParams = { 
        { TEXT("sandbox_id"), ToStringFormatArg(SandboxId) }
    };

    FString Path = FString::Format(TEXT("/v1/sandbox/{sandbox_id}/analytics/purchases"), PathParams);

    TArray<FString> QueryParams;
    if(FromDate.IsSet())
    {
        QueryParams.Add(FString(TEXT("from_date=")) + ToUrlString(FromDate.GetValue()));
    }
    if(ToDate.IsSet())
    {
        QueryParams.Add(FString(TEXT("to_date=")) + ToUrlString(ToDate.GetValue()));
    }
    if(PreviousSeconds.IsSet())
    {
        QueryParams.Add(FString(TEXT("previous_seconds=")) + ToUrlString(PreviousSeconds.GetValue()));
    }
    Path += TCHAR('?');
    Path += FString::Join(QueryParams, TEXT("&"));

    return Path;
}

bool FRequest_EnvironmentGetEnvironmentMetricPurchases::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
    static const TArray<FString> Consumes = {  };
    //static const TArray<FString> Produces = { TEXT("application/json") };

    HttpRequest->SetVerb(TEXT("GET"));

    if (!AuthContext)
    {
        UE_LOG(LogRallyHereDeveloperAPI, Error, TEXT("FRequest_EnvironmentGetEnvironmentMetricPurchases - missing auth context"));
        return false;
    }
    if (!AuthContext->AddBearerToken(HttpRequest))
    {
        UE_LOG(LogRallyHereDeveloperAPI, Error, TEXT("FRequest_EnvironmentGetEnvironmentMetricPurchases - failed to add bearer token"));
        return false;
    }

    if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json"))) // Default to Json Body request
    {
    }
    else if (Consumes.Contains(TEXT("multipart/form-data")))
    {
    }
    else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
    {
    }
    else
    {
        UE_LOG(LogRallyHereDeveloperAPI, Error, TEXT("FRequest_EnvironmentGetEnvironmentMetricPurchases - Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
        return false;
    }

    return true;
}

void FResponse_EnvironmentGetEnvironmentMetricPurchases::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
    FResponse::SetHttpResponseCode(InHttpResponseCode);
    switch ((int)InHttpResponseCode)
    {
    case 200:
        SetResponseString(TEXT("Successful Response"));
        break;
    case 422:
        SetResponseString(TEXT("Validation Error"));
        break;
    }
}

bool FResponse_EnvironmentGetEnvironmentMetricPurchases::TryGetContentFor200(FRHAPI_DevPlatformData& OutContent) const
{
    return TryGetJsonValue(ResponseJson, OutContent);
}

bool FResponse_EnvironmentGetEnvironmentMetricPurchases::TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const
{
    return TryGetJsonValue(ResponseJson, OutContent);
}

bool FResponse_EnvironmentGetEnvironmentMetricPurchases::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
    return TryGetJsonValue(JsonValue, Content);
}

FResponse_EnvironmentGetEnvironmentMetricPurchases::FResponse_EnvironmentGetEnvironmentMetricPurchases(FRequestMetadata InRequestMetadata) :
    FResponse(MoveTemp(InRequestMetadata))
{
}

FString Traits_EnvironmentGetEnvironmentMetricPurchases::Name = TEXT("EnvironmentGetEnvironmentMetricPurchases");


}
