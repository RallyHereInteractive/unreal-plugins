// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "DevMenuDataProduct.h"
#include "RallyHereDeveloperAPIModule.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereDeveloperAPI::ToStringFormatArg;
using RallyHereDeveloperAPI::WriteJsonValue;
using RallyHereDeveloperAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_DevMenuDataProduct

void FRHAPI_DevMenuDataProduct::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
    Writer->WriteObjectStart();
    Writer->WriteIdentifierPrefix(TEXT("productId"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, ProductId);
    Writer->WriteIdentifierPrefix(TEXT("productName"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, ProductName);
    Writer->WriteIdentifierPrefix(TEXT("shortName"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, ShortName);
    Writer->WriteIdentifierPrefix(TEXT("sandboxes"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, Sandboxes);
    Writer->WriteIdentifierPrefix(TEXT("environments"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, Environments);
    Writer->WriteIdentifierPrefix(TEXT("archive"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, Archive);
    Writer->WriteObjectEnd();
}

bool FRHAPI_DevMenuDataProduct::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
    const TSharedPtr<FJsonObject>* Object;
    if (!JsonValue->TryGetObject(Object))
        return false;

    bool ParseSuccess = true;

    const TSharedPtr<FJsonValue> JsonProductIdField = (*Object)->TryGetField(TEXT("productId"));
    ParseSuccess &= JsonProductIdField.IsValid() && !JsonProductIdField->IsNull() && TryGetJsonValue(JsonProductIdField, ProductId);
    const TSharedPtr<FJsonValue> JsonProductNameField = (*Object)->TryGetField(TEXT("productName"));
    ParseSuccess &= JsonProductNameField.IsValid() && !JsonProductNameField->IsNull() && TryGetJsonValue(JsonProductNameField, ProductName);
    const TSharedPtr<FJsonValue> JsonShortNameField = (*Object)->TryGetField(TEXT("shortName"));
    ParseSuccess &= JsonShortNameField.IsValid() && !JsonShortNameField->IsNull() && TryGetJsonValue(JsonShortNameField, ShortName);
    const TSharedPtr<FJsonValue> JsonSandboxesField = (*Object)->TryGetField(TEXT("sandboxes"));
    ParseSuccess &= JsonSandboxesField.IsValid() && !JsonSandboxesField->IsNull() && TryGetJsonValue(JsonSandboxesField, Sandboxes);
    const TSharedPtr<FJsonValue> JsonEnvironmentsField = (*Object)->TryGetField(TEXT("environments"));
    ParseSuccess &= JsonEnvironmentsField.IsValid() && !JsonEnvironmentsField->IsNull() && TryGetJsonValue(JsonEnvironmentsField, Environments);
    const TSharedPtr<FJsonValue> JsonArchiveField = (*Object)->TryGetField(TEXT("archive"));
    ParseSuccess &= JsonArchiveField.IsValid() && !JsonArchiveField->IsNull() && TryGetJsonValue(JsonArchiveField, Archive);

    return ParseSuccess;
}

