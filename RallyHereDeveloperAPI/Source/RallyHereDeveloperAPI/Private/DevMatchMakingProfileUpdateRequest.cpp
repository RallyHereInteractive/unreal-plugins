// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "DevMatchMakingProfileUpdateRequest.h"
#include "RallyHereDeveloperAPIModule.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereDeveloperAPI::ToStringFormatArg;
using RallyHereDeveloperAPI::WriteJsonValue;
using RallyHereDeveloperAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_DevMatchMakingProfileUpdateRequest

void FRHAPI_DevMatchMakingProfileUpdateRequest::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
    Writer->WriteObjectStart();
    if (JoinMode_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("join_mode"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, EnumToString(JoinMode_Optional));
    }
    if (RankId_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("rank_id"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, RankId_Optional);
    }
    if (NumSides_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("num_sides"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, NumSides_Optional);
    }
    if (MinPlayersPerSide_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("min_players_per_side"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, MinPlayersPerSide_Optional);
    }
    if (MaxPlayersPerSide_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("max_players_per_side"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, MaxPlayersPerSide_Optional);
    }
    if (MinPlayersPerLinking_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("min_players_per_linking"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, MinPlayersPerLinking_Optional);
    }
    if (MaxPlayersPerLinking_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("max_players_per_linking"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, MaxPlayersPerLinking_Optional);
    }
    if (MaxSideDelta_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("max_side_delta"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, MaxSideDelta_Optional);
    }
    if (InstanceRequestTemplateId_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("instance_request_template_id"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, InstanceRequestTemplateId_Optional);
    }
    if (TaskforceSizeByTime_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("taskforce_size_by_time"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, TaskforceSizeByTime_Optional);
    }
    if (MatchMakingFunctionConfig_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("match_making_function_config"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, MatchMakingFunctionConfig_Optional);
    }
    if (MatchMakingStrideId_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("match_making_stride_id"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, MatchMakingStrideId_Optional);
    }
    if (CrossplayPartitionId_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("crossplay_partition_id"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, CrossplayPartitionId_Optional);
    }
    if (LegacyConfig_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("legacy_config"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, LegacyConfig_Optional);
    }
    if (TrueskillQualityByTimeMaxQuality_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("trueskill_quality_by_time_max_quality"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, TrueskillQualityByTimeMaxQuality_Optional);
    }
    if (TrueskillQualityByTimeMaxMinutes_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("trueskill_quality_by_time_max_minutes"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, TrueskillQualityByTimeMaxMinutes_Optional);
    }
    if (TrueskillQualityByTimeMethod_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("trueskill_quality_by_time_method"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, EnumToString(TrueskillQualityByTimeMethod_Optional));
    }
    if (Active_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("active"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, Active_Optional);
    }
    if (SupportsBackfill_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("supports_backfill"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, SupportsBackfill_Optional);
    }
    Writer->WriteObjectEnd();
}

bool FRHAPI_DevMatchMakingProfileUpdateRequest::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
    const TSharedPtr<FJsonObject>* Object;
    if (!JsonValue->TryGetObject(Object))
        return false;

    bool ParseSuccess = true;

    const TSharedPtr<FJsonValue> JsonJoinModeField = (*Object)->TryGetField(TEXT("join_mode"));
    if (JsonJoinModeField.IsValid() && !JsonJoinModeField->IsNull())
    {
        JoinMode_IsSet = TryGetJsonValue(JsonJoinModeField, JoinMode_Optional);
        ParseSuccess &= JoinMode_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonRankIdField = (*Object)->TryGetField(TEXT("rank_id"));
    if (JsonRankIdField.IsValid() && !JsonRankIdField->IsNull())
    {
        RankId_IsSet = TryGetJsonValue(JsonRankIdField, RankId_Optional);
        ParseSuccess &= RankId_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonNumSidesField = (*Object)->TryGetField(TEXT("num_sides"));
    if (JsonNumSidesField.IsValid() && !JsonNumSidesField->IsNull())
    {
        NumSides_IsSet = TryGetJsonValue(JsonNumSidesField, NumSides_Optional);
        ParseSuccess &= NumSides_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonMinPlayersPerSideField = (*Object)->TryGetField(TEXT("min_players_per_side"));
    if (JsonMinPlayersPerSideField.IsValid() && !JsonMinPlayersPerSideField->IsNull())
    {
        MinPlayersPerSide_IsSet = TryGetJsonValue(JsonMinPlayersPerSideField, MinPlayersPerSide_Optional);
        ParseSuccess &= MinPlayersPerSide_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonMaxPlayersPerSideField = (*Object)->TryGetField(TEXT("max_players_per_side"));
    if (JsonMaxPlayersPerSideField.IsValid() && !JsonMaxPlayersPerSideField->IsNull())
    {
        MaxPlayersPerSide_IsSet = TryGetJsonValue(JsonMaxPlayersPerSideField, MaxPlayersPerSide_Optional);
        ParseSuccess &= MaxPlayersPerSide_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonMinPlayersPerLinkingField = (*Object)->TryGetField(TEXT("min_players_per_linking"));
    if (JsonMinPlayersPerLinkingField.IsValid() && !JsonMinPlayersPerLinkingField->IsNull())
    {
        MinPlayersPerLinking_IsSet = TryGetJsonValue(JsonMinPlayersPerLinkingField, MinPlayersPerLinking_Optional);
        ParseSuccess &= MinPlayersPerLinking_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonMaxPlayersPerLinkingField = (*Object)->TryGetField(TEXT("max_players_per_linking"));
    if (JsonMaxPlayersPerLinkingField.IsValid() && !JsonMaxPlayersPerLinkingField->IsNull())
    {
        MaxPlayersPerLinking_IsSet = TryGetJsonValue(JsonMaxPlayersPerLinkingField, MaxPlayersPerLinking_Optional);
        ParseSuccess &= MaxPlayersPerLinking_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonMaxSideDeltaField = (*Object)->TryGetField(TEXT("max_side_delta"));
    if (JsonMaxSideDeltaField.IsValid() && !JsonMaxSideDeltaField->IsNull())
    {
        MaxSideDelta_IsSet = TryGetJsonValue(JsonMaxSideDeltaField, MaxSideDelta_Optional);
        ParseSuccess &= MaxSideDelta_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonInstanceRequestTemplateIdField = (*Object)->TryGetField(TEXT("instance_request_template_id"));
    if (JsonInstanceRequestTemplateIdField.IsValid() && !JsonInstanceRequestTemplateIdField->IsNull())
    {
        InstanceRequestTemplateId_IsSet = TryGetJsonValue(JsonInstanceRequestTemplateIdField, InstanceRequestTemplateId_Optional);
        ParseSuccess &= InstanceRequestTemplateId_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonTaskforceSizeByTimeField = (*Object)->TryGetField(TEXT("taskforce_size_by_time"));
    if (JsonTaskforceSizeByTimeField.IsValid() && !JsonTaskforceSizeByTimeField->IsNull())
    {
        TaskforceSizeByTime_IsSet = TryGetJsonValue(JsonTaskforceSizeByTimeField, TaskforceSizeByTime_Optional);
        ParseSuccess &= TaskforceSizeByTime_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonMatchMakingFunctionConfigField = (*Object)->TryGetField(TEXT("match_making_function_config"));
    if (JsonMatchMakingFunctionConfigField.IsValid() && !JsonMatchMakingFunctionConfigField->IsNull())
    {
        MatchMakingFunctionConfig_IsSet = TryGetJsonValue(JsonMatchMakingFunctionConfigField, MatchMakingFunctionConfig_Optional);
        ParseSuccess &= MatchMakingFunctionConfig_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonMatchMakingStrideIdField = (*Object)->TryGetField(TEXT("match_making_stride_id"));
    if (JsonMatchMakingStrideIdField.IsValid() && !JsonMatchMakingStrideIdField->IsNull())
    {
        MatchMakingStrideId_IsSet = TryGetJsonValue(JsonMatchMakingStrideIdField, MatchMakingStrideId_Optional);
        ParseSuccess &= MatchMakingStrideId_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonCrossplayPartitionIdField = (*Object)->TryGetField(TEXT("crossplay_partition_id"));
    if (JsonCrossplayPartitionIdField.IsValid() && !JsonCrossplayPartitionIdField->IsNull())
    {
        CrossplayPartitionId_IsSet = TryGetJsonValue(JsonCrossplayPartitionIdField, CrossplayPartitionId_Optional);
        ParseSuccess &= CrossplayPartitionId_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonLegacyConfigField = (*Object)->TryGetField(TEXT("legacy_config"));
    if (JsonLegacyConfigField.IsValid() && !JsonLegacyConfigField->IsNull())
    {
        LegacyConfig_IsSet = TryGetJsonValue(JsonLegacyConfigField, LegacyConfig_Optional);
        ParseSuccess &= LegacyConfig_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonTrueskillQualityByTimeMaxQualityField = (*Object)->TryGetField(TEXT("trueskill_quality_by_time_max_quality"));
    if (JsonTrueskillQualityByTimeMaxQualityField.IsValid() && !JsonTrueskillQualityByTimeMaxQualityField->IsNull())
    {
        TrueskillQualityByTimeMaxQuality_IsSet = TryGetJsonValue(JsonTrueskillQualityByTimeMaxQualityField, TrueskillQualityByTimeMaxQuality_Optional);
        ParseSuccess &= TrueskillQualityByTimeMaxQuality_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonTrueskillQualityByTimeMaxMinutesField = (*Object)->TryGetField(TEXT("trueskill_quality_by_time_max_minutes"));
    if (JsonTrueskillQualityByTimeMaxMinutesField.IsValid() && !JsonTrueskillQualityByTimeMaxMinutesField->IsNull())
    {
        TrueskillQualityByTimeMaxMinutes_IsSet = TryGetJsonValue(JsonTrueskillQualityByTimeMaxMinutesField, TrueskillQualityByTimeMaxMinutes_Optional);
        ParseSuccess &= TrueskillQualityByTimeMaxMinutes_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonTrueskillQualityByTimeMethodField = (*Object)->TryGetField(TEXT("trueskill_quality_by_time_method"));
    if (JsonTrueskillQualityByTimeMethodField.IsValid() && !JsonTrueskillQualityByTimeMethodField->IsNull())
    {
        TrueskillQualityByTimeMethod_IsSet = TryGetJsonValue(JsonTrueskillQualityByTimeMethodField, TrueskillQualityByTimeMethod_Optional);
        ParseSuccess &= TrueskillQualityByTimeMethod_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonActiveField = (*Object)->TryGetField(TEXT("active"));
    if (JsonActiveField.IsValid() && !JsonActiveField->IsNull())
    {
        Active_IsSet = TryGetJsonValue(JsonActiveField, Active_Optional);
        ParseSuccess &= Active_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonSupportsBackfillField = (*Object)->TryGetField(TEXT("supports_backfill"));
    if (JsonSupportsBackfillField.IsValid() && !JsonSupportsBackfillField->IsNull())
    {
        SupportsBackfill_IsSet = TryGetJsonValue(JsonSupportsBackfillField, SupportsBackfill_Optional);
        ParseSuccess &= SupportsBackfill_IsSet;
    }

    return ParseSuccess;
}

