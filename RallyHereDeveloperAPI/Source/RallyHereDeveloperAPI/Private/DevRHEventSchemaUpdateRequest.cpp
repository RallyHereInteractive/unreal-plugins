// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "DevRHEventSchemaUpdateRequest.h"
#include "RallyHereDeveloperAPIModule.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereDeveloperAPI::ToStringFormatArg;
using RallyHereDeveloperAPI::WriteJsonValue;
using RallyHereDeveloperAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_DevRHEventSchemaUpdateRequest

void FRHAPI_DevRHEventSchemaUpdateRequest::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
    Writer->WriteObjectStart();
    Writer->WriteIdentifierPrefix(TEXT("event_name"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, EventName);
    Writer->WriteIdentifierPrefix(TEXT("description"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, Description);
    if (ValueJsonschema_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("value_jsonschema"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, ValueJsonschema_Optional);
    }
    if (State_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("state"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, EnumToString(State_Optional));
    }
    Writer->WriteObjectEnd();
}

bool FRHAPI_DevRHEventSchemaUpdateRequest::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
    const TSharedPtr<FJsonObject>* Object;
    if (!JsonValue->TryGetObject(Object))
        return false;

    bool ParseSuccess = true;

    const TSharedPtr<FJsonValue> JsonEventNameField = (*Object)->TryGetField(TEXT("event_name"));
    ParseSuccess &= JsonEventNameField.IsValid() && !JsonEventNameField->IsNull() && TryGetJsonValue(JsonEventNameField, EventName);
    const TSharedPtr<FJsonValue> JsonDescriptionField = (*Object)->TryGetField(TEXT("description"));
    ParseSuccess &= JsonDescriptionField.IsValid() && !JsonDescriptionField->IsNull() && TryGetJsonValue(JsonDescriptionField, Description);
    const TSharedPtr<FJsonValue> JsonValueJsonschemaField = (*Object)->TryGetField(TEXT("value_jsonschema"));
    if (JsonValueJsonschemaField.IsValid() && !JsonValueJsonschemaField->IsNull())
    {
        ValueJsonschema_IsSet = TryGetJsonValue(JsonValueJsonschemaField, ValueJsonschema_Optional);
        ParseSuccess &= ValueJsonschema_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonStateField = (*Object)->TryGetField(TEXT("state"));
    if (JsonStateField.IsValid() && !JsonStateField->IsNull())
    {
        State_IsSet = TryGetJsonValue(JsonStateField, State_Optional);
        ParseSuccess &= State_IsSet;
    }

    return ParseSuccess;
}

