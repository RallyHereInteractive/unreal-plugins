// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "DevDatacenterContract.h"
#include "RallyHereDeveloperAPIModule.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereDeveloperAPI::ToStringFormatArg;
using RallyHereDeveloperAPI::WriteJsonValue;
using RallyHereDeveloperAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_DevDatacenterContract

void FRHAPI_DevDatacenterContract::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
    Writer->WriteObjectStart();
    if (StartDate_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("start_date"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, StartDate_Optional);
    }
    if (EndDate_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("end_date"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, EndDate_Optional);
    }
    if (CancelDate_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("cancel_date"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, CancelDate_Optional);
    }
    if (PeriodDays_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("period_days"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, PeriodDays_Optional);
    }
    if (ExtendPeriodDays_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("extend_period_days"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, ExtendPeriodDays_Optional);
    }
    if (NoticeDays_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("notice_days"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, NoticeDays_Optional);
    }
    if (PurchaseOrder_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("purchase_order"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, PurchaseOrder_Optional);
    }
    if (PaymentTermDays_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("payment_term_days"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, PaymentTermDays_Optional);
    }
    if (Hosts_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("hosts"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, Hosts_Optional);
    }
    Writer->WriteIdentifierPrefix(TEXT("datacenter_contract_id"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, DatacenterContractId);
    Writer->WriteObjectEnd();
}

bool FRHAPI_DevDatacenterContract::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
    const TSharedPtr<FJsonObject>* Object;
    if (!JsonValue->TryGetObject(Object))
        return false;

    bool ParseSuccess = true;

    const TSharedPtr<FJsonValue> JsonStartDateField = (*Object)->TryGetField(TEXT("start_date"));
    if (JsonStartDateField.IsValid() && !JsonStartDateField->IsNull())
    {
        StartDate_IsSet = TryGetJsonValue(JsonStartDateField, StartDate_Optional);
        ParseSuccess &= StartDate_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonEndDateField = (*Object)->TryGetField(TEXT("end_date"));
    if (JsonEndDateField.IsValid() && !JsonEndDateField->IsNull())
    {
        EndDate_IsSet = TryGetJsonValue(JsonEndDateField, EndDate_Optional);
        ParseSuccess &= EndDate_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonCancelDateField = (*Object)->TryGetField(TEXT("cancel_date"));
    if (JsonCancelDateField.IsValid() && !JsonCancelDateField->IsNull())
    {
        CancelDate_IsSet = TryGetJsonValue(JsonCancelDateField, CancelDate_Optional);
        ParseSuccess &= CancelDate_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonPeriodDaysField = (*Object)->TryGetField(TEXT("period_days"));
    if (JsonPeriodDaysField.IsValid() && !JsonPeriodDaysField->IsNull())
    {
        PeriodDays_IsSet = TryGetJsonValue(JsonPeriodDaysField, PeriodDays_Optional);
        ParseSuccess &= PeriodDays_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonExtendPeriodDaysField = (*Object)->TryGetField(TEXT("extend_period_days"));
    if (JsonExtendPeriodDaysField.IsValid() && !JsonExtendPeriodDaysField->IsNull())
    {
        ExtendPeriodDays_IsSet = TryGetJsonValue(JsonExtendPeriodDaysField, ExtendPeriodDays_Optional);
        ParseSuccess &= ExtendPeriodDays_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonNoticeDaysField = (*Object)->TryGetField(TEXT("notice_days"));
    if (JsonNoticeDaysField.IsValid() && !JsonNoticeDaysField->IsNull())
    {
        NoticeDays_IsSet = TryGetJsonValue(JsonNoticeDaysField, NoticeDays_Optional);
        ParseSuccess &= NoticeDays_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonPurchaseOrderField = (*Object)->TryGetField(TEXT("purchase_order"));
    if (JsonPurchaseOrderField.IsValid() && !JsonPurchaseOrderField->IsNull())
    {
        PurchaseOrder_IsSet = TryGetJsonValue(JsonPurchaseOrderField, PurchaseOrder_Optional);
        ParseSuccess &= PurchaseOrder_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonPaymentTermDaysField = (*Object)->TryGetField(TEXT("payment_term_days"));
    if (JsonPaymentTermDaysField.IsValid() && !JsonPaymentTermDaysField->IsNull())
    {
        PaymentTermDays_IsSet = TryGetJsonValue(JsonPaymentTermDaysField, PaymentTermDays_Optional);
        ParseSuccess &= PaymentTermDays_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonHostsField = (*Object)->TryGetField(TEXT("hosts"));
    if (JsonHostsField.IsValid() && !JsonHostsField->IsNull())
    {
        Hosts_IsSet = TryGetJsonValue(JsonHostsField, Hosts_Optional);
        ParseSuccess &= Hosts_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonDatacenterContractIdField = (*Object)->TryGetField(TEXT("datacenter_contract_id"));
    ParseSuccess &= JsonDatacenterContractIdField.IsValid() && !JsonDatacenterContractIdField->IsNull() && TryGetJsonValue(JsonDatacenterContractIdField, DatacenterContractId);

    return ParseSuccess;
}

