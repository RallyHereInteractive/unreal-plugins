// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0


#include "DevVivoxConfig.h"
#include "RallyHereDeveloperAPIModule.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "Templates/SharedPointer.h"


using RallyHereDeveloperAPI::ToStringFormatArg;
using RallyHereDeveloperAPI::WriteJsonValue;
using RallyHereDeveloperAPI::TryGetJsonValue;

////////////////////////////////////////////////////
// Implementation for FRHAPI_DevVivoxConfig

void FRHAPI_DevVivoxConfig::WriteJson(TSharedRef<TJsonWriter<>>& Writer) const
{
    Writer->WriteObjectStart();
    if (Enable_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("enable"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, Enable_Optional);
    }
    Writer->WriteIdentifierPrefix(TEXT("server"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, Server);
    Writer->WriteIdentifierPrefix(TEXT("key_issuer"));
    RallyHereDeveloperAPI::WriteJsonValue(Writer, KeyIssuer);
    if (KeyTime_IsSet)
    {
        Writer->WriteIdentifierPrefix(TEXT("key_time"));
        RallyHereDeveloperAPI::WriteJsonValue(Writer, KeyTime_Optional);
    }
    Writer->WriteObjectEnd();
}

bool FRHAPI_DevVivoxConfig::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
    const TSharedPtr<FJsonObject>* Object;
    if (!JsonValue->TryGetObject(Object))
        return false;

    bool ParseSuccess = true;

    const TSharedPtr<FJsonValue> JsonEnableField = (*Object)->TryGetField(TEXT("enable"));
    if (JsonEnableField.IsValid() && !JsonEnableField->IsNull())
    {
        Enable_IsSet = TryGetJsonValue(JsonEnableField, Enable_Optional);
        ParseSuccess &= Enable_IsSet;
    }
    const TSharedPtr<FJsonValue> JsonServerField = (*Object)->TryGetField(TEXT("server"));
    ParseSuccess &= JsonServerField.IsValid() && !JsonServerField->IsNull() && TryGetJsonValue(JsonServerField, Server);
    const TSharedPtr<FJsonValue> JsonKeyIssuerField = (*Object)->TryGetField(TEXT("key_issuer"));
    ParseSuccess &= JsonKeyIssuerField.IsValid() && !JsonKeyIssuerField->IsNull() && TryGetJsonValue(JsonKeyIssuerField, KeyIssuer);
    const TSharedPtr<FJsonValue> JsonKeyTimeField = (*Object)->TryGetField(TEXT("key_time"));
    if (JsonKeyTimeField.IsValid() && !JsonKeyTimeField->IsNull())
    {
        KeyTime_IsSet = TryGetJsonValue(JsonKeyTimeField, KeyTime_Optional);
        ParseSuccess &= KeyTime_IsSet;
    }

    return ParseSuccess;
}

