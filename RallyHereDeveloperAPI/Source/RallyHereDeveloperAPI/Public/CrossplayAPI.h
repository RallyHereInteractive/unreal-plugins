// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereDeveloperAPIAuthContext.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevAllCrossplayPartitionsResponse.h"
#include "DevAllCrossplayPoolTagsResponse.h"
#include "DevAllCrossplayPoolsResponse.h"
#include "DevAllCrossplayProfilesResponse.h"
#include "DevCommonConfigPartitions.h"
#include "DevCrossplayPartition.h"
#include "DevCrossplayPartitionRequest.h"
#include "DevCrossplayPool.h"
#include "DevCrossplayPoolRequest.h"
#include "DevCrossplayPoolTag.h"
#include "DevCrossplayPoolTagRequest.h"
#include "DevCrossplayPoolTagUpdateRequest.h"
#include "DevCrossplayPoolUpdateRequest.h"
#include "DevCrossplayProfile.h"
#include "DevCrossplayProfileRequest.h"
#include "DevCrossplayProfileUpdateRequest.h"
#include "DevHTTPValidationError.h"

namespace RallyHereDeveloperAPI
{
using RallyHereDeveloperAPI::ToStringFormatArg;
using RallyHereDeveloperAPI::WriteJsonValue;
using RallyHereDeveloperAPI::TryGetJsonValue;

struct FRequest_SandboxCreateCrossplayPool;
struct FResponse_SandboxCreateCrossplayPool;
struct FRequest_SandboxCreateCrossplayPoolTag;
struct FResponse_SandboxCreateCrossplayPoolTag;
struct FRequest_SandboxCreateCrossplayProfile;
struct FResponse_SandboxCreateCrossplayProfile;
struct FRequest_SandboxCreatePartition;
struct FResponse_SandboxCreatePartition;
struct FRequest_SandboxDeleteCrossplayPool;
struct FResponse_SandboxDeleteCrossplayPool;
struct FRequest_SandboxDeleteCrossplayPoolTag;
struct FResponse_SandboxDeleteCrossplayPoolTag;
struct FRequest_SandboxDeleteCrossplayProfile;
struct FResponse_SandboxDeleteCrossplayProfile;
struct FRequest_SandboxDeletePartition;
struct FResponse_SandboxDeletePartition;
struct FRequest_SandboxGetAllCrossplayPoolTags;
struct FResponse_SandboxGetAllCrossplayPoolTags;
struct FRequest_SandboxGetAllCrossplayPools;
struct FResponse_SandboxGetAllCrossplayPools;
struct FRequest_SandboxGetAllCrossplayPoolsForProfile;
struct FResponse_SandboxGetAllCrossplayPoolsForProfile;
struct FRequest_SandboxGetAllCrossplayProfiles;
struct FResponse_SandboxGetAllCrossplayProfiles;
struct FRequest_SandboxGetAllCrossplayProfilesInPartition;
struct FResponse_SandboxGetAllCrossplayProfilesInPartition;
struct FRequest_SandboxGetAllPartitions;
struct FResponse_SandboxGetAllPartitions;
struct FRequest_SandboxGetCommonCrossplayConfiguration;
struct FResponse_SandboxGetCommonCrossplayConfiguration;
struct FRequest_SandboxGetCrossplayPool;
struct FResponse_SandboxGetCrossplayPool;
struct FRequest_SandboxGetCrossplayPoolTag;
struct FResponse_SandboxGetCrossplayPoolTag;
struct FRequest_SandboxGetCrossplayPoolTagsForPool;
struct FResponse_SandboxGetCrossplayPoolTagsForPool;
struct FRequest_SandboxGetCrossplayProfile;
struct FResponse_SandboxGetCrossplayProfile;
struct FRequest_SandboxGetPartition;
struct FResponse_SandboxGetPartition;
struct FRequest_SandboxPatchCrossplayPool;
struct FResponse_SandboxPatchCrossplayPool;
struct FRequest_SandboxPatchCrossplayPoolTag;
struct FResponse_SandboxPatchCrossplayPoolTag;
struct FRequest_SandboxPatchCrossplayProfile;
struct FResponse_SandboxPatchCrossplayProfile;
struct FRequest_SandboxPatchPartition;
struct FResponse_SandboxPatchPartition;
struct FRequest_SandboxPutCrossplayPool;
struct FResponse_SandboxPutCrossplayPool;
struct FRequest_SandboxPutCrossplayPoolTag;
struct FResponse_SandboxPutCrossplayPoolTag;
struct FRequest_SandboxPutCrossplayProfile;
struct FResponse_SandboxPutCrossplayProfile;
struct FRequest_SandboxPutPartition;
struct FResponse_SandboxPutPartition;

DECLARE_DELEGATE_OneParam(FDelegate_SandboxCreateCrossplayPool, const FResponse_SandboxCreateCrossplayPool&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxCreateCrossplayPoolTag, const FResponse_SandboxCreateCrossplayPoolTag&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxCreateCrossplayProfile, const FResponse_SandboxCreateCrossplayProfile&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxCreatePartition, const FResponse_SandboxCreatePartition&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxDeleteCrossplayPool, const FResponse_SandboxDeleteCrossplayPool&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxDeleteCrossplayPoolTag, const FResponse_SandboxDeleteCrossplayPoolTag&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxDeleteCrossplayProfile, const FResponse_SandboxDeleteCrossplayProfile&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxDeletePartition, const FResponse_SandboxDeletePartition&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetAllCrossplayPoolTags, const FResponse_SandboxGetAllCrossplayPoolTags&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetAllCrossplayPools, const FResponse_SandboxGetAllCrossplayPools&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetAllCrossplayPoolsForProfile, const FResponse_SandboxGetAllCrossplayPoolsForProfile&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetAllCrossplayProfiles, const FResponse_SandboxGetAllCrossplayProfiles&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetAllCrossplayProfilesInPartition, const FResponse_SandboxGetAllCrossplayProfilesInPartition&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetAllPartitions, const FResponse_SandboxGetAllPartitions&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetCommonCrossplayConfiguration, const FResponse_SandboxGetCommonCrossplayConfiguration&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetCrossplayPool, const FResponse_SandboxGetCrossplayPool&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetCrossplayPoolTag, const FResponse_SandboxGetCrossplayPoolTag&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetCrossplayPoolTagsForPool, const FResponse_SandboxGetCrossplayPoolTagsForPool&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetCrossplayProfile, const FResponse_SandboxGetCrossplayProfile&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetPartition, const FResponse_SandboxGetPartition&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxPatchCrossplayPool, const FResponse_SandboxPatchCrossplayPool&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxPatchCrossplayPoolTag, const FResponse_SandboxPatchCrossplayPoolTag&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxPatchCrossplayProfile, const FResponse_SandboxPatchCrossplayProfile&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxPatchPartition, const FResponse_SandboxPatchPartition&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxPutCrossplayPool, const FResponse_SandboxPutCrossplayPool&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxPutCrossplayPoolTag, const FResponse_SandboxPutCrossplayPoolTag&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxPutCrossplayProfile, const FResponse_SandboxPutCrossplayProfile&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxPutPartition, const FResponse_SandboxPutPartition&);

class RALLYHEREDEVELOPERAPI_API FCrossplayAPI : public FAPI
{
public:
    FCrossplayAPI();
    virtual ~FCrossplayAPI();

    FHttpRequestPtr SandboxCreateCrossplayPool(const FRequest_SandboxCreateCrossplayPool& Request, const FDelegate_SandboxCreateCrossplayPool& Delegate = FDelegate_SandboxCreateCrossplayPool(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxCreateCrossplayPoolTag(const FRequest_SandboxCreateCrossplayPoolTag& Request, const FDelegate_SandboxCreateCrossplayPoolTag& Delegate = FDelegate_SandboxCreateCrossplayPoolTag(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxCreateCrossplayProfile(const FRequest_SandboxCreateCrossplayProfile& Request, const FDelegate_SandboxCreateCrossplayProfile& Delegate = FDelegate_SandboxCreateCrossplayProfile(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxCreatePartition(const FRequest_SandboxCreatePartition& Request, const FDelegate_SandboxCreatePartition& Delegate = FDelegate_SandboxCreatePartition(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxDeleteCrossplayPool(const FRequest_SandboxDeleteCrossplayPool& Request, const FDelegate_SandboxDeleteCrossplayPool& Delegate = FDelegate_SandboxDeleteCrossplayPool(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxDeleteCrossplayPoolTag(const FRequest_SandboxDeleteCrossplayPoolTag& Request, const FDelegate_SandboxDeleteCrossplayPoolTag& Delegate = FDelegate_SandboxDeleteCrossplayPoolTag(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxDeleteCrossplayProfile(const FRequest_SandboxDeleteCrossplayProfile& Request, const FDelegate_SandboxDeleteCrossplayProfile& Delegate = FDelegate_SandboxDeleteCrossplayProfile(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxDeletePartition(const FRequest_SandboxDeletePartition& Request, const FDelegate_SandboxDeletePartition& Delegate = FDelegate_SandboxDeletePartition(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetAllCrossplayPoolTags(const FRequest_SandboxGetAllCrossplayPoolTags& Request, const FDelegate_SandboxGetAllCrossplayPoolTags& Delegate = FDelegate_SandboxGetAllCrossplayPoolTags(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetAllCrossplayPools(const FRequest_SandboxGetAllCrossplayPools& Request, const FDelegate_SandboxGetAllCrossplayPools& Delegate = FDelegate_SandboxGetAllCrossplayPools(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetAllCrossplayPoolsForProfile(const FRequest_SandboxGetAllCrossplayPoolsForProfile& Request, const FDelegate_SandboxGetAllCrossplayPoolsForProfile& Delegate = FDelegate_SandboxGetAllCrossplayPoolsForProfile(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetAllCrossplayProfiles(const FRequest_SandboxGetAllCrossplayProfiles& Request, const FDelegate_SandboxGetAllCrossplayProfiles& Delegate = FDelegate_SandboxGetAllCrossplayProfiles(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetAllCrossplayProfilesInPartition(const FRequest_SandboxGetAllCrossplayProfilesInPartition& Request, const FDelegate_SandboxGetAllCrossplayProfilesInPartition& Delegate = FDelegate_SandboxGetAllCrossplayProfilesInPartition(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetAllPartitions(const FRequest_SandboxGetAllPartitions& Request, const FDelegate_SandboxGetAllPartitions& Delegate = FDelegate_SandboxGetAllPartitions(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetCommonCrossplayConfiguration(const FRequest_SandboxGetCommonCrossplayConfiguration& Request, const FDelegate_SandboxGetCommonCrossplayConfiguration& Delegate = FDelegate_SandboxGetCommonCrossplayConfiguration(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetCrossplayPool(const FRequest_SandboxGetCrossplayPool& Request, const FDelegate_SandboxGetCrossplayPool& Delegate = FDelegate_SandboxGetCrossplayPool(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetCrossplayPoolTag(const FRequest_SandboxGetCrossplayPoolTag& Request, const FDelegate_SandboxGetCrossplayPoolTag& Delegate = FDelegate_SandboxGetCrossplayPoolTag(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetCrossplayPoolTagsForPool(const FRequest_SandboxGetCrossplayPoolTagsForPool& Request, const FDelegate_SandboxGetCrossplayPoolTagsForPool& Delegate = FDelegate_SandboxGetCrossplayPoolTagsForPool(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetCrossplayProfile(const FRequest_SandboxGetCrossplayProfile& Request, const FDelegate_SandboxGetCrossplayProfile& Delegate = FDelegate_SandboxGetCrossplayProfile(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetPartition(const FRequest_SandboxGetPartition& Request, const FDelegate_SandboxGetPartition& Delegate = FDelegate_SandboxGetPartition(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxPatchCrossplayPool(const FRequest_SandboxPatchCrossplayPool& Request, const FDelegate_SandboxPatchCrossplayPool& Delegate = FDelegate_SandboxPatchCrossplayPool(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxPatchCrossplayPoolTag(const FRequest_SandboxPatchCrossplayPoolTag& Request, const FDelegate_SandboxPatchCrossplayPoolTag& Delegate = FDelegate_SandboxPatchCrossplayPoolTag(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxPatchCrossplayProfile(const FRequest_SandboxPatchCrossplayProfile& Request, const FDelegate_SandboxPatchCrossplayProfile& Delegate = FDelegate_SandboxPatchCrossplayProfile(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxPatchPartition(const FRequest_SandboxPatchPartition& Request, const FDelegate_SandboxPatchPartition& Delegate = FDelegate_SandboxPatchPartition(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxPutCrossplayPool(const FRequest_SandboxPutCrossplayPool& Request, const FDelegate_SandboxPutCrossplayPool& Delegate = FDelegate_SandboxPutCrossplayPool(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxPutCrossplayPoolTag(const FRequest_SandboxPutCrossplayPoolTag& Request, const FDelegate_SandboxPutCrossplayPoolTag& Delegate = FDelegate_SandboxPutCrossplayPoolTag(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxPutCrossplayProfile(const FRequest_SandboxPutCrossplayProfile& Request, const FDelegate_SandboxPutCrossplayProfile& Delegate = FDelegate_SandboxPutCrossplayProfile(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxPutPartition(const FRequest_SandboxPutPartition& Request, const FDelegate_SandboxPutPartition& Delegate = FDelegate_SandboxPutPartition(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);

private:
    void OnSandboxCreateCrossplayPoolResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxCreateCrossplayPool Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxCreateCrossplayPoolTagResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxCreateCrossplayPoolTag Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxCreateCrossplayProfileResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxCreateCrossplayProfile Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxCreatePartitionResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxCreatePartition Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxDeleteCrossplayPoolResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxDeleteCrossplayPool Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxDeleteCrossplayPoolTagResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxDeleteCrossplayPoolTag Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxDeleteCrossplayProfileResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxDeleteCrossplayProfile Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxDeletePartitionResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxDeletePartition Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetAllCrossplayPoolTagsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetAllCrossplayPoolTags Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetAllCrossplayPoolsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetAllCrossplayPools Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetAllCrossplayPoolsForProfileResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetAllCrossplayPoolsForProfile Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetAllCrossplayProfilesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetAllCrossplayProfiles Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetAllCrossplayProfilesInPartitionResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetAllCrossplayProfilesInPartition Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetAllPartitionsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetAllPartitions Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetCommonCrossplayConfigurationResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetCommonCrossplayConfiguration Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetCrossplayPoolResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetCrossplayPool Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetCrossplayPoolTagResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetCrossplayPoolTag Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetCrossplayPoolTagsForPoolResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetCrossplayPoolTagsForPool Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetCrossplayProfileResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetCrossplayProfile Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetPartitionResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetPartition Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxPatchCrossplayPoolResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxPatchCrossplayPool Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxPatchCrossplayPoolTagResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxPatchCrossplayPoolTag Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxPatchCrossplayProfileResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxPatchCrossplayProfile Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxPatchPartitionResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxPatchPartition Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxPutCrossplayPoolResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxPutCrossplayPool Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxPutCrossplayPoolTagResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxPutCrossplayPoolTag Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxPutCrossplayProfileResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxPutCrossplayProfile Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxPutPartitionResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxPutPartition Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};

/* Create Crossplay Pool
 *
 * Add a new CrossplayPool for a sandbox
 * 
 * Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxCreateCrossplayPool : public FRequest
{
    FRequest_SandboxCreateCrossplayPool();
    virtual ~FRequest_SandboxCreateCrossplayPool() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevCrossplayPoolRequest CrossplayPoolRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxCreateCrossplayPool : public FResponse
{
    FResponse_SandboxCreateCrossplayPool(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxCreateCrossplayPool() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevCrossplayPool Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevCrossplayPool& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxCreateCrossplayPool
{
    typedef FRequest_SandboxCreateCrossplayPool Request;
    typedef FResponse_SandboxCreateCrossplayPool Response;
    typedef FDelegate_SandboxCreateCrossplayPool Delegate;
    typedef FCrossplayAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxCreateCrossplayPool(InRequest, InDelegate, Priority); }
};

/* Create Crossplay Pool Tag
 *
 * Add a new CrossplayPoolTag for a sandbox
 * 
 * Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxCreateCrossplayPoolTag : public FRequest
{
    FRequest_SandboxCreateCrossplayPoolTag();
    virtual ~FRequest_SandboxCreateCrossplayPoolTag() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevCrossplayPoolTagRequest CrossplayPoolTagRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxCreateCrossplayPoolTag : public FResponse
{
    FResponse_SandboxCreateCrossplayPoolTag(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxCreateCrossplayPoolTag() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevCrossplayPoolTag Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevCrossplayPoolTag& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxCreateCrossplayPoolTag
{
    typedef FRequest_SandboxCreateCrossplayPoolTag Request;
    typedef FResponse_SandboxCreateCrossplayPoolTag Response;
    typedef FDelegate_SandboxCreateCrossplayPoolTag Delegate;
    typedef FCrossplayAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxCreateCrossplayPoolTag(InRequest, InDelegate, Priority); }
};

/* Create Crossplay Profile
 *
 * Add a new CrossplayProfile for a sandbox
 * 
 * Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxCreateCrossplayProfile : public FRequest
{
    FRequest_SandboxCreateCrossplayProfile();
    virtual ~FRequest_SandboxCreateCrossplayProfile() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevCrossplayProfileRequest CrossplayProfileRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxCreateCrossplayProfile : public FResponse
{
    FResponse_SandboxCreateCrossplayProfile(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxCreateCrossplayProfile() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevCrossplayProfile Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevCrossplayProfile& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxCreateCrossplayProfile
{
    typedef FRequest_SandboxCreateCrossplayProfile Request;
    typedef FResponse_SandboxCreateCrossplayProfile Response;
    typedef FDelegate_SandboxCreateCrossplayProfile Delegate;
    typedef FCrossplayAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxCreateCrossplayProfile(InRequest, InDelegate, Priority); }
};

/* Create Partition
 *
 * Add a new CrossplayPartition for a sandbox
 * 
 * Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxCreatePartition : public FRequest
{
    FRequest_SandboxCreatePartition();
    virtual ~FRequest_SandboxCreatePartition() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevCrossplayPartitionRequest CrossplayPartitionRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxCreatePartition : public FResponse
{
    FResponse_SandboxCreatePartition(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxCreatePartition() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevCrossplayPartition Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevCrossplayPartition& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxCreatePartition
{
    typedef FRequest_SandboxCreatePartition Request;
    typedef FResponse_SandboxCreatePartition Response;
    typedef FDelegate_SandboxCreatePartition Delegate;
    typedef FCrossplayAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxCreatePartition(InRequest, InDelegate, Priority); }
};

/* Delete Crossplay Pool
 *
 * Delete a CrossplayPool for a sandbox
 * 
 * Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxDeleteCrossplayPool : public FRequest
{
    FRequest_SandboxDeleteCrossplayPool();
    virtual ~FRequest_SandboxDeleteCrossplayPool() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid CrossplayPoolId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxDeleteCrossplayPool : public FResponse
{
    FResponse_SandboxDeleteCrossplayPool(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxDeleteCrossplayPool() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    


    // Manual Response Helpers
    /* Response 204
    Successful Response
    */

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxDeleteCrossplayPool
{
    typedef FRequest_SandboxDeleteCrossplayPool Request;
    typedef FResponse_SandboxDeleteCrossplayPool Response;
    typedef FDelegate_SandboxDeleteCrossplayPool Delegate;
    typedef FCrossplayAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxDeleteCrossplayPool(InRequest, InDelegate, Priority); }
};

/* Delete Crossplay Pool Tag
 *
 * Delete a CrossplayPoolTag for a sandbox
 * 
 * Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxDeleteCrossplayPoolTag : public FRequest
{
    FRequest_SandboxDeleteCrossplayPoolTag();
    virtual ~FRequest_SandboxDeleteCrossplayPoolTag() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid CrossplayPoolTagId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxDeleteCrossplayPoolTag : public FResponse
{
    FResponse_SandboxDeleteCrossplayPoolTag(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxDeleteCrossplayPoolTag() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    


    // Manual Response Helpers
    /* Response 204
    Successful Response
    */

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxDeleteCrossplayPoolTag
{
    typedef FRequest_SandboxDeleteCrossplayPoolTag Request;
    typedef FResponse_SandboxDeleteCrossplayPoolTag Response;
    typedef FDelegate_SandboxDeleteCrossplayPoolTag Delegate;
    typedef FCrossplayAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxDeleteCrossplayPoolTag(InRequest, InDelegate, Priority); }
};

/* Delete Crossplay Profile
 *
 * Delete a CrossplayProfile for a sandbox
 * 
 * Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxDeleteCrossplayProfile : public FRequest
{
    FRequest_SandboxDeleteCrossplayProfile();
    virtual ~FRequest_SandboxDeleteCrossplayProfile() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid CrossplayProfileId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxDeleteCrossplayProfile : public FResponse
{
    FResponse_SandboxDeleteCrossplayProfile(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxDeleteCrossplayProfile() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    


    // Manual Response Helpers
    /* Response 204
    Successful Response
    */

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxDeleteCrossplayProfile
{
    typedef FRequest_SandboxDeleteCrossplayProfile Request;
    typedef FResponse_SandboxDeleteCrossplayProfile Response;
    typedef FDelegate_SandboxDeleteCrossplayProfile Delegate;
    typedef FCrossplayAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxDeleteCrossplayProfile(InRequest, InDelegate, Priority); }
};

/* Delete Partition
 *
 * Delete a CrossplayPartition for a sandbox
 * 
 * Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxDeletePartition : public FRequest
{
    FRequest_SandboxDeletePartition();
    virtual ~FRequest_SandboxDeletePartition() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid CrossplayPartitionId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxDeletePartition : public FResponse
{
    FResponse_SandboxDeletePartition(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxDeletePartition() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    


    // Manual Response Helpers
    /* Response 204
    Successful Response
    */

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxDeletePartition
{
    typedef FRequest_SandboxDeletePartition Request;
    typedef FResponse_SandboxDeletePartition Response;
    typedef FDelegate_SandboxDeletePartition Delegate;
    typedef FCrossplayAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxDeletePartition(InRequest, InDelegate, Priority); }
};

/* Get All Crossplay Pool Tags
 *
 * Get all CrossplayPools for a sandbox
 * 
 * Requires any of permissions: 
 * 	 sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetAllCrossplayPoolTags : public FRequest
{
    FRequest_SandboxGetAllCrossplayPoolTags();
    virtual ~FRequest_SandboxGetAllCrossplayPoolTags() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    /* The maximum number of elements to be returned per call */
    TOptional<int32> PageSize;
    /* Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration */
    TOptional<FString> Cursor;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetAllCrossplayPoolTags : public FResponse
{
    FResponse_SandboxGetAllCrossplayPoolTags(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetAllCrossplayPoolTags() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevAllCrossplayPoolTagsResponse Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevAllCrossplayPoolTagsResponse& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetAllCrossplayPoolTags
{
    typedef FRequest_SandboxGetAllCrossplayPoolTags Request;
    typedef FResponse_SandboxGetAllCrossplayPoolTags Response;
    typedef FDelegate_SandboxGetAllCrossplayPoolTags Delegate;
    typedef FCrossplayAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetAllCrossplayPoolTags(InRequest, InDelegate, Priority); }
};

/* Get All Crossplay Pools
 *
 * Get all CrossplayPools for a sandbox
 * 
 * Requires any of permissions: 
 * 	 sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetAllCrossplayPools : public FRequest
{
    FRequest_SandboxGetAllCrossplayPools();
    virtual ~FRequest_SandboxGetAllCrossplayPools() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    /* The maximum number of elements to be returned per call */
    TOptional<int32> PageSize;
    /* Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration */
    TOptional<FString> Cursor;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetAllCrossplayPools : public FResponse
{
    FResponse_SandboxGetAllCrossplayPools(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetAllCrossplayPools() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevAllCrossplayPoolsResponse Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevAllCrossplayPoolsResponse& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetAllCrossplayPools
{
    typedef FRequest_SandboxGetAllCrossplayPools Request;
    typedef FResponse_SandboxGetAllCrossplayPools Response;
    typedef FDelegate_SandboxGetAllCrossplayPools Delegate;
    typedef FCrossplayAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetAllCrossplayPools(InRequest, InDelegate, Priority); }
};

/* Get All Crossplay Pools For Profile
 *
 * Get all CrossplayPools in a CrossplayProfile for a sandbox
 * 
 *     Requires any of permissions: 
 * 	 sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetAllCrossplayPoolsForProfile : public FRequest
{
    FRequest_SandboxGetAllCrossplayPoolsForProfile();
    virtual ~FRequest_SandboxGetAllCrossplayPoolsForProfile() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid CrossplayProfileId;
    /* Sandbox ID */
    FGuid SandboxId;
    /* The maximum number of elements to be returned per call */
    TOptional<int32> PageSize;
    /* Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration */
    TOptional<FString> Cursor;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetAllCrossplayPoolsForProfile : public FResponse
{
    FResponse_SandboxGetAllCrossplayPoolsForProfile(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetAllCrossplayPoolsForProfile() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevAllCrossplayPoolsResponse Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevAllCrossplayPoolsResponse& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetAllCrossplayPoolsForProfile
{
    typedef FRequest_SandboxGetAllCrossplayPoolsForProfile Request;
    typedef FResponse_SandboxGetAllCrossplayPoolsForProfile Response;
    typedef FDelegate_SandboxGetAllCrossplayPoolsForProfile Delegate;
    typedef FCrossplayAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetAllCrossplayPoolsForProfile(InRequest, InDelegate, Priority); }
};

/* Get All Crossplay Profiles
 *
 * Get all CrossplayProfiles for a sandbox
 * 
 * Requires any of permissions: 
 * 	 sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetAllCrossplayProfiles : public FRequest
{
    FRequest_SandboxGetAllCrossplayProfiles();
    virtual ~FRequest_SandboxGetAllCrossplayProfiles() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    /* The maximum number of elements to be returned per call */
    TOptional<int32> PageSize;
    /* Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration */
    TOptional<FString> Cursor;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetAllCrossplayProfiles : public FResponse
{
    FResponse_SandboxGetAllCrossplayProfiles(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetAllCrossplayProfiles() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevAllCrossplayProfilesResponse Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevAllCrossplayProfilesResponse& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetAllCrossplayProfiles
{
    typedef FRequest_SandboxGetAllCrossplayProfiles Request;
    typedef FResponse_SandboxGetAllCrossplayProfiles Response;
    typedef FDelegate_SandboxGetAllCrossplayProfiles Delegate;
    typedef FCrossplayAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetAllCrossplayProfiles(InRequest, InDelegate, Priority); }
};

/* Get All Crossplay Profiles In Partition
 *
 * Get all CrossplayProfiles in a CrossplayPartition for a sandbox
 * 
 * Requires any of permissions: 
 * 	 sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetAllCrossplayProfilesInPartition : public FRequest
{
    FRequest_SandboxGetAllCrossplayProfilesInPartition();
    virtual ~FRequest_SandboxGetAllCrossplayProfilesInPartition() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid CrossplayPartitionId;
    /* Sandbox ID */
    FGuid SandboxId;
    /* The maximum number of elements to be returned per call */
    TOptional<int32> PageSize;
    /* Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration */
    TOptional<FString> Cursor;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetAllCrossplayProfilesInPartition : public FResponse
{
    FResponse_SandboxGetAllCrossplayProfilesInPartition(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetAllCrossplayProfilesInPartition() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevAllCrossplayProfilesResponse Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevAllCrossplayProfilesResponse& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetAllCrossplayProfilesInPartition
{
    typedef FRequest_SandboxGetAllCrossplayProfilesInPartition Request;
    typedef FResponse_SandboxGetAllCrossplayProfilesInPartition Response;
    typedef FDelegate_SandboxGetAllCrossplayProfilesInPartition Delegate;
    typedef FCrossplayAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetAllCrossplayProfilesInPartition(InRequest, InDelegate, Priority); }
};

/* Get All Partitions
 *
 * Get all CrossplayPartitions for a sandbox
 * 
 * Requires any of permissions: 
 * 	 sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetAllPartitions : public FRequest
{
    FRequest_SandboxGetAllPartitions();
    virtual ~FRequest_SandboxGetAllPartitions() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    /* The maximum number of elements to be returned per call */
    TOptional<int32> PageSize;
    /* Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration */
    TOptional<FString> Cursor;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetAllPartitions : public FResponse
{
    FResponse_SandboxGetAllPartitions(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetAllPartitions() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevAllCrossplayPartitionsResponse Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevAllCrossplayPartitionsResponse& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetAllPartitions
{
    typedef FRequest_SandboxGetAllPartitions Request;
    typedef FResponse_SandboxGetAllPartitions Response;
    typedef FDelegate_SandboxGetAllPartitions Delegate;
    typedef FCrossplayAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetAllPartitions(InRequest, InDelegate, Priority); }
};

/* Get Common Crossplay Configuration
 *
 * Get the set of common Crossplay configuration. These are useful as a starting point for setting up custom Crossplay rules, or if customized rules aren't necessary
 * Requires any of permissions: 
 * 	 sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetCommonCrossplayConfiguration : public FRequest
{
    FRequest_SandboxGetCommonCrossplayConfiguration();
    virtual ~FRequest_SandboxGetCommonCrossplayConfiguration() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetCommonCrossplayConfiguration : public FResponse
{
    FResponse_SandboxGetCommonCrossplayConfiguration(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetCommonCrossplayConfiguration() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevCommonConfigPartitions Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevCommonConfigPartitions& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetCommonCrossplayConfiguration
{
    typedef FRequest_SandboxGetCommonCrossplayConfiguration Request;
    typedef FResponse_SandboxGetCommonCrossplayConfiguration Response;
    typedef FDelegate_SandboxGetCommonCrossplayConfiguration Delegate;
    typedef FCrossplayAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetCommonCrossplayConfiguration(InRequest, InDelegate, Priority); }
};

/* Get Crossplay Pool
 *
 * Get a specific CrossplayPool for a sandbox
 * 
 * Requires any of permissions: 
 * 	 sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetCrossplayPool : public FRequest
{
    FRequest_SandboxGetCrossplayPool();
    virtual ~FRequest_SandboxGetCrossplayPool() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid CrossplayPoolId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetCrossplayPool : public FResponse
{
    FResponse_SandboxGetCrossplayPool(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetCrossplayPool() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevCrossplayPool Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevCrossplayPool& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetCrossplayPool
{
    typedef FRequest_SandboxGetCrossplayPool Request;
    typedef FResponse_SandboxGetCrossplayPool Response;
    typedef FDelegate_SandboxGetCrossplayPool Delegate;
    typedef FCrossplayAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetCrossplayPool(InRequest, InDelegate, Priority); }
};

/* Get Crossplay Pool Tag
 *
 * Get a specific CrossplayPoolTag for a sandbox
 * 
 * Requires any of permissions: 
 * 	 sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetCrossplayPoolTag : public FRequest
{
    FRequest_SandboxGetCrossplayPoolTag();
    virtual ~FRequest_SandboxGetCrossplayPoolTag() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid CrossplayPoolTagId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetCrossplayPoolTag : public FResponse
{
    FResponse_SandboxGetCrossplayPoolTag(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetCrossplayPoolTag() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevCrossplayPoolTag Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevCrossplayPoolTag& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetCrossplayPoolTag
{
    typedef FRequest_SandboxGetCrossplayPoolTag Request;
    typedef FResponse_SandboxGetCrossplayPoolTag Response;
    typedef FDelegate_SandboxGetCrossplayPoolTag Delegate;
    typedef FCrossplayAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetCrossplayPoolTag(InRequest, InDelegate, Priority); }
};

/* Get Crossplay Pool Tags For Pool
 *
 * Get all CrossplayPoolTags in a specific CrossplayPool for a sandbox
 * Requires any of permissions: 
 * 	 sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetCrossplayPoolTagsForPool : public FRequest
{
    FRequest_SandboxGetCrossplayPoolTagsForPool();
    virtual ~FRequest_SandboxGetCrossplayPoolTagsForPool() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid CrossplayPoolId;
    /* Sandbox ID */
    FGuid SandboxId;
    /* The maximum number of elements to be returned per call */
    TOptional<int32> PageSize;
    /* Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration */
    TOptional<FString> Cursor;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetCrossplayPoolTagsForPool : public FResponse
{
    FResponse_SandboxGetCrossplayPoolTagsForPool(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetCrossplayPoolTagsForPool() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevAllCrossplayPoolTagsResponse Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevAllCrossplayPoolTagsResponse& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetCrossplayPoolTagsForPool
{
    typedef FRequest_SandboxGetCrossplayPoolTagsForPool Request;
    typedef FResponse_SandboxGetCrossplayPoolTagsForPool Response;
    typedef FDelegate_SandboxGetCrossplayPoolTagsForPool Delegate;
    typedef FCrossplayAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetCrossplayPoolTagsForPool(InRequest, InDelegate, Priority); }
};

/* Get Crossplay Profile
 *
 * Get a specific CrossplayProfile for a sandbox
 * 
 * Requires any of permissions: 
 * 	 sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetCrossplayProfile : public FRequest
{
    FRequest_SandboxGetCrossplayProfile();
    virtual ~FRequest_SandboxGetCrossplayProfile() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid CrossplayProfileId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetCrossplayProfile : public FResponse
{
    FResponse_SandboxGetCrossplayProfile(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetCrossplayProfile() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevCrossplayProfile Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevCrossplayProfile& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetCrossplayProfile
{
    typedef FRequest_SandboxGetCrossplayProfile Request;
    typedef FResponse_SandboxGetCrossplayProfile Response;
    typedef FDelegate_SandboxGetCrossplayProfile Delegate;
    typedef FCrossplayAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetCrossplayProfile(InRequest, InDelegate, Priority); }
};

/* Get Partition
 *
 * Get a specific CrossplayPartition for a sandbox
 * 
 * Requires any of permissions: 
 * 	 sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetPartition : public FRequest
{
    FRequest_SandboxGetPartition();
    virtual ~FRequest_SandboxGetPartition() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid CrossplayPartitionId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetPartition : public FResponse
{
    FResponse_SandboxGetPartition(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetPartition() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevCrossplayPartition Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevCrossplayPartition& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetPartition
{
    typedef FRequest_SandboxGetPartition Request;
    typedef FResponse_SandboxGetPartition Response;
    typedef FDelegate_SandboxGetPartition Delegate;
    typedef FCrossplayAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetPartition(InRequest, InDelegate, Priority); }
};

/* Patch Crossplay Pool
 *
 * Update a CrossplayPool for a sandbox
 * 
 * Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxPatchCrossplayPool : public FRequest
{
    FRequest_SandboxPatchCrossplayPool();
    virtual ~FRequest_SandboxPatchCrossplayPool() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid CrossplayPoolId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevCrossplayPoolUpdateRequest CrossplayPoolUpdateRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxPatchCrossplayPool : public FResponse
{
    FResponse_SandboxPatchCrossplayPool(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxPatchCrossplayPool() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevCrossplayPool Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevCrossplayPool& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxPatchCrossplayPool
{
    typedef FRequest_SandboxPatchCrossplayPool Request;
    typedef FResponse_SandboxPatchCrossplayPool Response;
    typedef FDelegate_SandboxPatchCrossplayPool Delegate;
    typedef FCrossplayAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxPatchCrossplayPool(InRequest, InDelegate, Priority); }
};

/* Patch Crossplay Pool Tag
 *
 * Update a CrossplayPoolTag for a sandbox
 * 
 * Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxPatchCrossplayPoolTag : public FRequest
{
    FRequest_SandboxPatchCrossplayPoolTag();
    virtual ~FRequest_SandboxPatchCrossplayPoolTag() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid CrossplayPoolTagId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevCrossplayPoolTagUpdateRequest CrossplayPoolTagUpdateRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxPatchCrossplayPoolTag : public FResponse
{
    FResponse_SandboxPatchCrossplayPoolTag(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxPatchCrossplayPoolTag() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevCrossplayPoolTag Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevCrossplayPoolTag& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxPatchCrossplayPoolTag
{
    typedef FRequest_SandboxPatchCrossplayPoolTag Request;
    typedef FResponse_SandboxPatchCrossplayPoolTag Response;
    typedef FDelegate_SandboxPatchCrossplayPoolTag Delegate;
    typedef FCrossplayAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxPatchCrossplayPoolTag(InRequest, InDelegate, Priority); }
};

/* Patch Crossplay Profile
 *
 * Update a CrossplayProfile for a sandbox
 * 
 * Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxPatchCrossplayProfile : public FRequest
{
    FRequest_SandboxPatchCrossplayProfile();
    virtual ~FRequest_SandboxPatchCrossplayProfile() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid CrossplayProfileId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevCrossplayProfileUpdateRequest CrossplayProfileUpdateRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxPatchCrossplayProfile : public FResponse
{
    FResponse_SandboxPatchCrossplayProfile(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxPatchCrossplayProfile() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevCrossplayProfile Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevCrossplayProfile& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxPatchCrossplayProfile
{
    typedef FRequest_SandboxPatchCrossplayProfile Request;
    typedef FResponse_SandboxPatchCrossplayProfile Response;
    typedef FDelegate_SandboxPatchCrossplayProfile Delegate;
    typedef FCrossplayAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxPatchCrossplayProfile(InRequest, InDelegate, Priority); }
};

/* Patch Partition
 *
 * Update a CrossplayPartition for a sandbox
 * 
 * Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxPatchPartition : public FRequest
{
    FRequest_SandboxPatchPartition();
    virtual ~FRequest_SandboxPatchPartition() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid CrossplayPartitionId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevCrossplayPartitionRequest CrossplayPartitionRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxPatchPartition : public FResponse
{
    FResponse_SandboxPatchPartition(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxPatchPartition() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevCrossplayPartition Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevCrossplayPartition& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxPatchPartition
{
    typedef FRequest_SandboxPatchPartition Request;
    typedef FResponse_SandboxPatchPartition Response;
    typedef FDelegate_SandboxPatchPartition Delegate;
    typedef FCrossplayAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxPatchPartition(InRequest, InDelegate, Priority); }
};

/* Put Crossplay Pool
 *
 * Replace a CrossplayPool for a sandbox
 * 
 * Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxPutCrossplayPool : public FRequest
{
    FRequest_SandboxPutCrossplayPool();
    virtual ~FRequest_SandboxPutCrossplayPool() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid CrossplayPoolId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevCrossplayPoolRequest CrossplayPoolRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxPutCrossplayPool : public FResponse
{
    FResponse_SandboxPutCrossplayPool(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxPutCrossplayPool() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevCrossplayPool Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevCrossplayPool& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxPutCrossplayPool
{
    typedef FRequest_SandboxPutCrossplayPool Request;
    typedef FResponse_SandboxPutCrossplayPool Response;
    typedef FDelegate_SandboxPutCrossplayPool Delegate;
    typedef FCrossplayAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxPutCrossplayPool(InRequest, InDelegate, Priority); }
};

/* Put Crossplay Pool Tag
 *
 * Replace a CrossplayPoolTag for a sandbox
 * 
 * Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxPutCrossplayPoolTag : public FRequest
{
    FRequest_SandboxPutCrossplayPoolTag();
    virtual ~FRequest_SandboxPutCrossplayPoolTag() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid CrossplayPoolTagId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevCrossplayPoolTagRequest CrossplayPoolTagRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxPutCrossplayPoolTag : public FResponse
{
    FResponse_SandboxPutCrossplayPoolTag(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxPutCrossplayPoolTag() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevCrossplayPoolTag Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevCrossplayPoolTag& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxPutCrossplayPoolTag
{
    typedef FRequest_SandboxPutCrossplayPoolTag Request;
    typedef FResponse_SandboxPutCrossplayPoolTag Response;
    typedef FDelegate_SandboxPutCrossplayPoolTag Delegate;
    typedef FCrossplayAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxPutCrossplayPoolTag(InRequest, InDelegate, Priority); }
};

/* Put Crossplay Profile
 *
 * Replace a CrossplayProfile for a sandbox
 * 
 * Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxPutCrossplayProfile : public FRequest
{
    FRequest_SandboxPutCrossplayProfile();
    virtual ~FRequest_SandboxPutCrossplayProfile() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid CrossplayProfileId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevCrossplayProfileRequest CrossplayProfileRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxPutCrossplayProfile : public FResponse
{
    FResponse_SandboxPutCrossplayProfile(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxPutCrossplayProfile() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevCrossplayProfile Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevCrossplayProfile& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxPutCrossplayProfile
{
    typedef FRequest_SandboxPutCrossplayProfile Request;
    typedef FResponse_SandboxPutCrossplayProfile Response;
    typedef FDelegate_SandboxPutCrossplayProfile Delegate;
    typedef FCrossplayAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxPutCrossplayProfile(InRequest, InDelegate, Priority); }
};

/* Put Partition
 *
 * Replace a CrossplayPartition for a sandbox
 * 
 * Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxPutPartition : public FRequest
{
    FRequest_SandboxPutPartition();
    virtual ~FRequest_SandboxPutPartition() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid CrossplayPartitionId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevCrossplayPartitionRequest CrossplayPartitionRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxPutPartition : public FResponse
{
    FResponse_SandboxPutPartition(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxPutPartition() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevCrossplayPartition Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevCrossplayPartition& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxPutPartition
{
    typedef FRequest_SandboxPutPartition Request;
    typedef FResponse_SandboxPutPartition Response;
    typedef FDelegate_SandboxPutPartition Delegate;
    typedef FCrossplayAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxPutPartition(InRequest, InDelegate, Priority); }
};


}
