// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereDeveloperAPIBaseModel.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevExperimentalFeature.h"
#include "DevLegacyGameBit.h"
#include "DevDependenciesSandboxConfigGameConfigSchemasLegacyConfig.generated.h"

/** @defgroup RHAPI_DevDependenciesSandboxConfigGameConfigSchemasLegacyConfig RallyHere API Model DevDependenciesSandboxConfigGameConfigSchemasLegacyConfig
 *  @{
 */

/**
 * @brief      Options used by legacy systems.  These are not used by the new APIs.     
 */
USTRUCT(BlueprintType)
struct RALLYHEREDEVELOPERAPI_API FRHAPI_DevDependenciesSandboxConfigGameConfigSchemasLegacyConfig : public FRHAPI_DevModel
{
    GENERATED_BODY()

    /**
    * @brief Fills this object with data from the passed in JSON
    *
    * @param [in] JsonValue Data from the API call.
    *
    * @return true if parsing of the JSON data was successful.
    */
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

    /**
    * @brief Writes the data from this object into the specified JSON Writer stream
    *
    * @param [in] Writer JSON Writer stream to push .
    */
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /** @brief version check used by connection managers for new client/instance connections */
    FString AllowedGameVersions_Optional{  };
    /** @brief true if AllowedGameVersions_Optional has been set to a value */
    bool AllowedGameVersions_IsSet{ false };
    /** @brief Gets the value of AllowedGameVersions_Optional, regardless of it having been set */
    FString& GetAllowedGameVersions() { return AllowedGameVersions_Optional; }
    /** @brief Gets the value of AllowedGameVersions_Optional, regardless of it having been set */
    const FString& GetAllowedGameVersions() const { return AllowedGameVersions_Optional; }
    /** @brief Gets the value of AllowedGameVersions_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetAllowedGameVersions(const FString& DefaultValue) const { if (AllowedGameVersions_IsSet) return AllowedGameVersions_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of AllowedGameVersions_Optional and returns true if it has been set, otherwise returns false */
    bool GetAllowedGameVersions(FString& OutValue) const { if (AllowedGameVersions_IsSet) OutValue = AllowedGameVersions_Optional; return AllowedGameVersions_IsSet; }
    /** @brief Returns a pointer to AllowedGameVersions_Optional, if it has been set, otherwise returns nullptr */
    FString* GetAllowedGameVersionsOrNull() { if (AllowedGameVersions_IsSet) return &AllowedGameVersions_Optional; return nullptr; }
    /** @brief Returns a pointer to AllowedGameVersions_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetAllowedGameVersionsOrNull() const { if (AllowedGameVersions_IsSet) return &AllowedGameVersions_Optional; return nullptr; }
    /** @brief Sets the value of AllowedGameVersions_Optional and also sets AllowedGameVersions_IsSet to true */
    void SetAllowedGameVersions(FString NewValue) { AllowedGameVersions_Optional = NewValue; AllowedGameVersions_IsSet = true; }
     /** @brief Clears the value of AllowedGameVersions_Optional and sets AllowedGameVersions_IsSet to false */
    void ClearAllowedGameVersions() { AllowedGameVersions_Optional = TEXT("*.*.*.*"); AllowedGameVersions_IsSet = false; }
    /** @brief Returns true if AllowedGameVersions_Optional is set and matches the default value */
    bool IsAllowedGameVersionsDefaultValue() const { return AllowedGameVersions_IsSet && AllowedGameVersions_Optional == TEXT("*.*.*.*"); }
    /** @brief Sets the value of AllowedGameVersions_Optional to its default and also sets AllowedGameVersions_IsSet to true */
    void SetAllowedGameVersionsToDefault() { AllowedGameVersions_Optional = TEXT("*.*.*.*"); AllowedGameVersions_IsSet = true; }

    /** @brief Whether or not to enforce EAC checks for new client connections */
    bool EacEnabled_Optional{  };
    /** @brief true if EacEnabled_Optional has been set to a value */
    bool EacEnabled_IsSet{ false };
    /** @brief Gets the value of EacEnabled_Optional, regardless of it having been set */
    bool& GetEacEnabled() { return EacEnabled_Optional; }
    /** @brief Gets the value of EacEnabled_Optional, regardless of it having been set */
    const bool& GetEacEnabled() const { return EacEnabled_Optional; }
    /** @brief Gets the value of EacEnabled_Optional, if it has been set, otherwise it returns DefaultValue */
    const bool& GetEacEnabled(const bool& DefaultValue) const { if (EacEnabled_IsSet) return EacEnabled_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of EacEnabled_Optional and returns true if it has been set, otherwise returns false */
    bool GetEacEnabled(bool& OutValue) const { if (EacEnabled_IsSet) OutValue = EacEnabled_Optional; return EacEnabled_IsSet; }
    /** @brief Returns a pointer to EacEnabled_Optional, if it has been set, otherwise returns nullptr */
    bool* GetEacEnabledOrNull() { if (EacEnabled_IsSet) return &EacEnabled_Optional; return nullptr; }
    /** @brief Returns a pointer to EacEnabled_Optional, if it has been set, otherwise returns nullptr */
    const bool* GetEacEnabledOrNull() const { if (EacEnabled_IsSet) return &EacEnabled_Optional; return nullptr; }
    /** @brief Sets the value of EacEnabled_Optional and also sets EacEnabled_IsSet to true */
    void SetEacEnabled(bool NewValue) { EacEnabled_Optional = NewValue; EacEnabled_IsSet = true; }
     /** @brief Clears the value of EacEnabled_Optional and sets EacEnabled_IsSet to false */
    void ClearEacEnabled() { EacEnabled_Optional = false; EacEnabled_IsSet = false; }
    /** @brief Returns true if EacEnabled_Optional is set and matches the default value */
    bool IsEacEnabledDefaultValue() const { return EacEnabled_IsSet && EacEnabled_Optional == false; }
    /** @brief Sets the value of EacEnabled_Optional to its default and also sets EacEnabled_IsSet to true */
    void SetEacEnabledToDefault() { EacEnabled_Optional = false; EacEnabled_IsSet = true; }

    /** @brief Whether or not to check EAC ban status at login */
    bool EacCheckBanStatusAtLogin_Optional{  };
    /** @brief true if EacCheckBanStatusAtLogin_Optional has been set to a value */
    bool EacCheckBanStatusAtLogin_IsSet{ false };
    /** @brief Gets the value of EacCheckBanStatusAtLogin_Optional, regardless of it having been set */
    bool& GetEacCheckBanStatusAtLogin() { return EacCheckBanStatusAtLogin_Optional; }
    /** @brief Gets the value of EacCheckBanStatusAtLogin_Optional, regardless of it having been set */
    const bool& GetEacCheckBanStatusAtLogin() const { return EacCheckBanStatusAtLogin_Optional; }
    /** @brief Gets the value of EacCheckBanStatusAtLogin_Optional, if it has been set, otherwise it returns DefaultValue */
    const bool& GetEacCheckBanStatusAtLogin(const bool& DefaultValue) const { if (EacCheckBanStatusAtLogin_IsSet) return EacCheckBanStatusAtLogin_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of EacCheckBanStatusAtLogin_Optional and returns true if it has been set, otherwise returns false */
    bool GetEacCheckBanStatusAtLogin(bool& OutValue) const { if (EacCheckBanStatusAtLogin_IsSet) OutValue = EacCheckBanStatusAtLogin_Optional; return EacCheckBanStatusAtLogin_IsSet; }
    /** @brief Returns a pointer to EacCheckBanStatusAtLogin_Optional, if it has been set, otherwise returns nullptr */
    bool* GetEacCheckBanStatusAtLoginOrNull() { if (EacCheckBanStatusAtLogin_IsSet) return &EacCheckBanStatusAtLogin_Optional; return nullptr; }
    /** @brief Returns a pointer to EacCheckBanStatusAtLogin_Optional, if it has been set, otherwise returns nullptr */
    const bool* GetEacCheckBanStatusAtLoginOrNull() const { if (EacCheckBanStatusAtLogin_IsSet) return &EacCheckBanStatusAtLogin_Optional; return nullptr; }
    /** @brief Sets the value of EacCheckBanStatusAtLogin_Optional and also sets EacCheckBanStatusAtLogin_IsSet to true */
    void SetEacCheckBanStatusAtLogin(bool NewValue) { EacCheckBanStatusAtLogin_Optional = NewValue; EacCheckBanStatusAtLogin_IsSet = true; }
     /** @brief Clears the value of EacCheckBanStatusAtLogin_Optional and sets EacCheckBanStatusAtLogin_IsSet to false */
    void ClearEacCheckBanStatusAtLogin() { EacCheckBanStatusAtLogin_Optional = false; EacCheckBanStatusAtLogin_IsSet = false; }
    /** @brief Returns true if EacCheckBanStatusAtLogin_Optional is set and matches the default value */
    bool IsEacCheckBanStatusAtLoginDefaultValue() const { return EacCheckBanStatusAtLogin_IsSet && EacCheckBanStatusAtLogin_Optional == false; }
    /** @brief Sets the value of EacCheckBanStatusAtLogin_Optional to its default and also sets EacCheckBanStatusAtLogin_IsSet to true */
    void SetEacCheckBanStatusAtLoginToDefault() { EacCheckBanStatusAtLogin_Optional = false; EacCheckBanStatusAtLogin_IsSet = true; }

    /** @brief Whether or not to submit player reports to EAC when handling normal player reports */
    bool EacSubmitPlayerReports_Optional{  };
    /** @brief true if EacSubmitPlayerReports_Optional has been set to a value */
    bool EacSubmitPlayerReports_IsSet{ false };
    /** @brief Gets the value of EacSubmitPlayerReports_Optional, regardless of it having been set */
    bool& GetEacSubmitPlayerReports() { return EacSubmitPlayerReports_Optional; }
    /** @brief Gets the value of EacSubmitPlayerReports_Optional, regardless of it having been set */
    const bool& GetEacSubmitPlayerReports() const { return EacSubmitPlayerReports_Optional; }
    /** @brief Gets the value of EacSubmitPlayerReports_Optional, if it has been set, otherwise it returns DefaultValue */
    const bool& GetEacSubmitPlayerReports(const bool& DefaultValue) const { if (EacSubmitPlayerReports_IsSet) return EacSubmitPlayerReports_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of EacSubmitPlayerReports_Optional and returns true if it has been set, otherwise returns false */
    bool GetEacSubmitPlayerReports(bool& OutValue) const { if (EacSubmitPlayerReports_IsSet) OutValue = EacSubmitPlayerReports_Optional; return EacSubmitPlayerReports_IsSet; }
    /** @brief Returns a pointer to EacSubmitPlayerReports_Optional, if it has been set, otherwise returns nullptr */
    bool* GetEacSubmitPlayerReportsOrNull() { if (EacSubmitPlayerReports_IsSet) return &EacSubmitPlayerReports_Optional; return nullptr; }
    /** @brief Returns a pointer to EacSubmitPlayerReports_Optional, if it has been set, otherwise returns nullptr */
    const bool* GetEacSubmitPlayerReportsOrNull() const { if (EacSubmitPlayerReports_IsSet) return &EacSubmitPlayerReports_Optional; return nullptr; }
    /** @brief Sets the value of EacSubmitPlayerReports_Optional and also sets EacSubmitPlayerReports_IsSet to true */
    void SetEacSubmitPlayerReports(bool NewValue) { EacSubmitPlayerReports_Optional = NewValue; EacSubmitPlayerReports_IsSet = true; }
     /** @brief Clears the value of EacSubmitPlayerReports_Optional and sets EacSubmitPlayerReports_IsSet to false */
    void ClearEacSubmitPlayerReports() { EacSubmitPlayerReports_Optional = false; EacSubmitPlayerReports_IsSet = false; }
    /** @brief Returns true if EacSubmitPlayerReports_Optional is set and matches the default value */
    bool IsEacSubmitPlayerReportsDefaultValue() const { return EacSubmitPlayerReports_IsSet && EacSubmitPlayerReports_Optional == false; }
    /** @brief Sets the value of EacSubmitPlayerReports_Optional to its default and also sets EacSubmitPlayerReports_IsSet to true */
    void SetEacSubmitPlayerReportsToDefault() { EacSubmitPlayerReports_Optional = false; EacSubmitPlayerReports_IsSet = true; }

    /** @brief List of experiments and if they are enabled.  Use K/Vs instead */
    TArray<FRHAPI_DevExperimentalFeature> Experiments_Optional{  };
    /** @brief true if Experiments_Optional has been set to a value */
    bool Experiments_IsSet{ false };
    /** @brief Gets the value of Experiments_Optional, regardless of it having been set */
    TArray<FRHAPI_DevExperimentalFeature>& GetExperiments() { return Experiments_Optional; }
    /** @brief Gets the value of Experiments_Optional, regardless of it having been set */
    const TArray<FRHAPI_DevExperimentalFeature>& GetExperiments() const { return Experiments_Optional; }
    /** @brief Gets the value of Experiments_Optional, if it has been set, otherwise it returns DefaultValue */
    const TArray<FRHAPI_DevExperimentalFeature>& GetExperiments(const TArray<FRHAPI_DevExperimentalFeature>& DefaultValue) const { if (Experiments_IsSet) return Experiments_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Experiments_Optional and returns true if it has been set, otherwise returns false */
    bool GetExperiments(TArray<FRHAPI_DevExperimentalFeature>& OutValue) const { if (Experiments_IsSet) OutValue = Experiments_Optional; return Experiments_IsSet; }
    /** @brief Returns a pointer to Experiments_Optional, if it has been set, otherwise returns nullptr */
    TArray<FRHAPI_DevExperimentalFeature>* GetExperimentsOrNull() { if (Experiments_IsSet) return &Experiments_Optional; return nullptr; }
    /** @brief Returns a pointer to Experiments_Optional, if it has been set, otherwise returns nullptr */
    const TArray<FRHAPI_DevExperimentalFeature>* GetExperimentsOrNull() const { if (Experiments_IsSet) return &Experiments_Optional; return nullptr; }
    /** @brief Sets the value of Experiments_Optional and also sets Experiments_IsSet to true */
    void SetExperiments(TArray<FRHAPI_DevExperimentalFeature> NewValue) { Experiments_Optional = NewValue; Experiments_IsSet = true; }
     /** @brief Clears the value of Experiments_Optional and sets Experiments_IsSet to false */
    void ClearExperiments() { Experiments_IsSet = false; }

    /** @brief List of game bits to enable.  Use K/Vs instead */
    TArray<ERHAPI_DevLegacyGameBit> GameBits_Optional{  };
    /** @brief true if GameBits_Optional has been set to a value */
    bool GameBits_IsSet{ false };
    /** @brief Gets the value of GameBits_Optional, regardless of it having been set */
    TArray<ERHAPI_DevLegacyGameBit>& GetGameBits() { return GameBits_Optional; }
    /** @brief Gets the value of GameBits_Optional, regardless of it having been set */
    const TArray<ERHAPI_DevLegacyGameBit>& GetGameBits() const { return GameBits_Optional; }
    /** @brief Gets the value of GameBits_Optional, if it has been set, otherwise it returns DefaultValue */
    const TArray<ERHAPI_DevLegacyGameBit>& GetGameBits(const TArray<ERHAPI_DevLegacyGameBit>& DefaultValue) const { if (GameBits_IsSet) return GameBits_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of GameBits_Optional and returns true if it has been set, otherwise returns false */
    bool GetGameBits(TArray<ERHAPI_DevLegacyGameBit>& OutValue) const { if (GameBits_IsSet) OutValue = GameBits_Optional; return GameBits_IsSet; }
    /** @brief Returns a pointer to GameBits_Optional, if it has been set, otherwise returns nullptr */
    TArray<ERHAPI_DevLegacyGameBit>* GetGameBitsOrNull() { if (GameBits_IsSet) return &GameBits_Optional; return nullptr; }
    /** @brief Returns a pointer to GameBits_Optional, if it has been set, otherwise returns nullptr */
    const TArray<ERHAPI_DevLegacyGameBit>* GetGameBitsOrNull() const { if (GameBits_IsSet) return &GameBits_Optional; return nullptr; }
    /** @brief Sets the value of GameBits_Optional and also sets GameBits_IsSet to true */
    void SetGameBits(TArray<ERHAPI_DevLegacyGameBit> NewValue) { GameBits_Optional = NewValue; GameBits_IsSet = true; }
     /** @brief Clears the value of GameBits_Optional and sets GameBits_IsSet to false */
    void ClearGameBits() { GameBits_IsSet = false; }

    /** @brief Maximum number of players allowed in a party */
    int32 MaxPartySize_Optional{  };
    /** @brief true if MaxPartySize_Optional has been set to a value */
    bool MaxPartySize_IsSet{ false };
    /** @brief Gets the value of MaxPartySize_Optional, regardless of it having been set */
    int32& GetMaxPartySize() { return MaxPartySize_Optional; }
    /** @brief Gets the value of MaxPartySize_Optional, regardless of it having been set */
    const int32& GetMaxPartySize() const { return MaxPartySize_Optional; }
    /** @brief Gets the value of MaxPartySize_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetMaxPartySize(const int32& DefaultValue) const { if (MaxPartySize_IsSet) return MaxPartySize_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of MaxPartySize_Optional and returns true if it has been set, otherwise returns false */
    bool GetMaxPartySize(int32& OutValue) const { if (MaxPartySize_IsSet) OutValue = MaxPartySize_Optional; return MaxPartySize_IsSet; }
    /** @brief Returns a pointer to MaxPartySize_Optional, if it has been set, otherwise returns nullptr */
    int32* GetMaxPartySizeOrNull() { if (MaxPartySize_IsSet) return &MaxPartySize_Optional; return nullptr; }
    /** @brief Returns a pointer to MaxPartySize_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetMaxPartySizeOrNull() const { if (MaxPartySize_IsSet) return &MaxPartySize_Optional; return nullptr; }
    /** @brief Sets the value of MaxPartySize_Optional and also sets MaxPartySize_IsSet to true */
    void SetMaxPartySize(int32 NewValue) { MaxPartySize_Optional = NewValue; MaxPartySize_IsSet = true; }
     /** @brief Clears the value of MaxPartySize_Optional and sets MaxPartySize_IsSet to false */
    void ClearMaxPartySize() { MaxPartySize_Optional = 10; MaxPartySize_IsSet = false; }
    /** @brief Returns true if MaxPartySize_Optional is set and matches the default value */
    bool IsMaxPartySizeDefaultValue() const { return MaxPartySize_IsSet && MaxPartySize_Optional == 10; }
    /** @brief Sets the value of MaxPartySize_Optional to its default and also sets MaxPartySize_IsSet to true */
    void SetMaxPartySizeToDefault() { MaxPartySize_Optional = 10; MaxPartySize_IsSet = true; }

    /** @brief Maximum number of party info entries allowed per party */
    int32 MaxPartyInfoCount_Optional{  };
    /** @brief true if MaxPartyInfoCount_Optional has been set to a value */
    bool MaxPartyInfoCount_IsSet{ false };
    /** @brief Gets the value of MaxPartyInfoCount_Optional, regardless of it having been set */
    int32& GetMaxPartyInfoCount() { return MaxPartyInfoCount_Optional; }
    /** @brief Gets the value of MaxPartyInfoCount_Optional, regardless of it having been set */
    const int32& GetMaxPartyInfoCount() const { return MaxPartyInfoCount_Optional; }
    /** @brief Gets the value of MaxPartyInfoCount_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetMaxPartyInfoCount(const int32& DefaultValue) const { if (MaxPartyInfoCount_IsSet) return MaxPartyInfoCount_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of MaxPartyInfoCount_Optional and returns true if it has been set, otherwise returns false */
    bool GetMaxPartyInfoCount(int32& OutValue) const { if (MaxPartyInfoCount_IsSet) OutValue = MaxPartyInfoCount_Optional; return MaxPartyInfoCount_IsSet; }
    /** @brief Returns a pointer to MaxPartyInfoCount_Optional, if it has been set, otherwise returns nullptr */
    int32* GetMaxPartyInfoCountOrNull() { if (MaxPartyInfoCount_IsSet) return &MaxPartyInfoCount_Optional; return nullptr; }
    /** @brief Returns a pointer to MaxPartyInfoCount_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetMaxPartyInfoCountOrNull() const { if (MaxPartyInfoCount_IsSet) return &MaxPartyInfoCount_Optional; return nullptr; }
    /** @brief Sets the value of MaxPartyInfoCount_Optional and also sets MaxPartyInfoCount_IsSet to true */
    void SetMaxPartyInfoCount(int32 NewValue) { MaxPartyInfoCount_Optional = NewValue; MaxPartyInfoCount_IsSet = true; }
     /** @brief Clears the value of MaxPartyInfoCount_Optional and sets MaxPartyInfoCount_IsSet to false */
    void ClearMaxPartyInfoCount() { MaxPartyInfoCount_Optional = 0; MaxPartyInfoCount_IsSet = false; }
    /** @brief Returns true if MaxPartyInfoCount_Optional is set and matches the default value */
    bool IsMaxPartyInfoCountDefaultValue() const { return MaxPartyInfoCount_IsSet && MaxPartyInfoCount_Optional == 0; }
    /** @brief Sets the value of MaxPartyInfoCount_Optional to its default and also sets MaxPartyInfoCount_IsSet to true */
    void SetMaxPartyInfoCountToDefault() { MaxPartyInfoCount_Optional = 0; MaxPartyInfoCount_IsSet = true; }

    /** @brief Default map game ID to return to when leaving a match */
    int32 DefaultMapGameId_Optional{  };
    /** @brief true if DefaultMapGameId_Optional has been set to a value */
    bool DefaultMapGameId_IsSet{ false };
    /** @brief Gets the value of DefaultMapGameId_Optional, regardless of it having been set */
    int32& GetDefaultMapGameId() { return DefaultMapGameId_Optional; }
    /** @brief Gets the value of DefaultMapGameId_Optional, regardless of it having been set */
    const int32& GetDefaultMapGameId() const { return DefaultMapGameId_Optional; }
    /** @brief Gets the value of DefaultMapGameId_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetDefaultMapGameId(const int32& DefaultValue) const { if (DefaultMapGameId_IsSet) return DefaultMapGameId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of DefaultMapGameId_Optional and returns true if it has been set, otherwise returns false */
    bool GetDefaultMapGameId(int32& OutValue) const { if (DefaultMapGameId_IsSet) OutValue = DefaultMapGameId_Optional; return DefaultMapGameId_IsSet; }
    /** @brief Returns a pointer to DefaultMapGameId_Optional, if it has been set, otherwise returns nullptr */
    int32* GetDefaultMapGameIdOrNull() { if (DefaultMapGameId_IsSet) return &DefaultMapGameId_Optional; return nullptr; }
    /** @brief Returns a pointer to DefaultMapGameId_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetDefaultMapGameIdOrNull() const { if (DefaultMapGameId_IsSet) return &DefaultMapGameId_Optional; return nullptr; }
    /** @brief Sets the value of DefaultMapGameId_Optional and also sets DefaultMapGameId_IsSet to true */
    void SetDefaultMapGameId(int32 NewValue) { DefaultMapGameId_Optional = NewValue; DefaultMapGameId_IsSet = true; }
     /** @brief Clears the value of DefaultMapGameId_Optional and sets DefaultMapGameId_IsSet to false */
    void ClearDefaultMapGameId() { DefaultMapGameId_Optional = 1; DefaultMapGameId_IsSet = false; }
    /** @brief Returns true if DefaultMapGameId_Optional is set and matches the default value */
    bool IsDefaultMapGameIdDefaultValue() const { return DefaultMapGameId_IsSet && DefaultMapGameId_Optional == 1; }
    /** @brief Sets the value of DefaultMapGameId_Optional to its default and also sets DefaultMapGameId_IsSet to true */
    void SetDefaultMapGameIdToDefault() { DefaultMapGameId_Optional = 1; DefaultMapGameId_IsSet = true; }

    /** @brief Game ID to use for the game */
    int32 GameId_Optional{  };
    /** @brief true if GameId_Optional has been set to a value */
    bool GameId_IsSet{ false };
    /** @brief Gets the value of GameId_Optional, regardless of it having been set */
    int32& GetGameId() { return GameId_Optional; }
    /** @brief Gets the value of GameId_Optional, regardless of it having been set */
    const int32& GetGameId() const { return GameId_Optional; }
    /** @brief Gets the value of GameId_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetGameId(const int32& DefaultValue) const { if (GameId_IsSet) return GameId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of GameId_Optional and returns true if it has been set, otherwise returns false */
    bool GetGameId(int32& OutValue) const { if (GameId_IsSet) OutValue = GameId_Optional; return GameId_IsSet; }
    /** @brief Returns a pointer to GameId_Optional, if it has been set, otherwise returns nullptr */
    int32* GetGameIdOrNull() { if (GameId_IsSet) return &GameId_Optional; return nullptr; }
    /** @brief Returns a pointer to GameId_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetGameIdOrNull() const { if (GameId_IsSet) return &GameId_Optional; return nullptr; }
    /** @brief Sets the value of GameId_Optional and also sets GameId_IsSet to true */
    void SetGameId(int32 NewValue) { GameId_Optional = NewValue; GameId_IsSet = true; }
     /** @brief Clears the value of GameId_Optional and sets GameId_IsSet to false */
    void ClearGameId() { GameId_Optional = 0; GameId_IsSet = false; }
    /** @brief Returns true if GameId_Optional is set and matches the default value */
    bool IsGameIdDefaultValue() const { return GameId_IsSet && GameId_Optional == 0; }
    /** @brief Sets the value of GameId_Optional to its default and also sets GameId_IsSet to true */
    void SetGameIdToDefault() { GameId_Optional = 0; GameId_IsSet = true; }

    /** @brief Field name of the property in custom data that maps legacy item type to the fields in Inventory APIs. */
    FString InventoryCustomDataItemLegacyTypeField_Optional{  };
    /** @brief true if InventoryCustomDataItemLegacyTypeField_Optional has been set to a value */
    bool InventoryCustomDataItemLegacyTypeField_IsSet{ false };
    /** @brief Gets the value of InventoryCustomDataItemLegacyTypeField_Optional, regardless of it having been set */
    FString& GetInventoryCustomDataItemLegacyTypeField() { return InventoryCustomDataItemLegacyTypeField_Optional; }
    /** @brief Gets the value of InventoryCustomDataItemLegacyTypeField_Optional, regardless of it having been set */
    const FString& GetInventoryCustomDataItemLegacyTypeField() const { return InventoryCustomDataItemLegacyTypeField_Optional; }
    /** @brief Gets the value of InventoryCustomDataItemLegacyTypeField_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetInventoryCustomDataItemLegacyTypeField(const FString& DefaultValue) const { if (InventoryCustomDataItemLegacyTypeField_IsSet) return InventoryCustomDataItemLegacyTypeField_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of InventoryCustomDataItemLegacyTypeField_Optional and returns true if it has been set, otherwise returns false */
    bool GetInventoryCustomDataItemLegacyTypeField(FString& OutValue) const { if (InventoryCustomDataItemLegacyTypeField_IsSet) OutValue = InventoryCustomDataItemLegacyTypeField_Optional; return InventoryCustomDataItemLegacyTypeField_IsSet; }
    /** @brief Returns a pointer to InventoryCustomDataItemLegacyTypeField_Optional, if it has been set, otherwise returns nullptr */
    FString* GetInventoryCustomDataItemLegacyTypeFieldOrNull() { if (InventoryCustomDataItemLegacyTypeField_IsSet) return &InventoryCustomDataItemLegacyTypeField_Optional; return nullptr; }
    /** @brief Returns a pointer to InventoryCustomDataItemLegacyTypeField_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetInventoryCustomDataItemLegacyTypeFieldOrNull() const { if (InventoryCustomDataItemLegacyTypeField_IsSet) return &InventoryCustomDataItemLegacyTypeField_Optional; return nullptr; }
    /** @brief Sets the value of InventoryCustomDataItemLegacyTypeField_Optional and also sets InventoryCustomDataItemLegacyTypeField_IsSet to true */
    void SetInventoryCustomDataItemLegacyTypeField(FString NewValue) { InventoryCustomDataItemLegacyTypeField_Optional = NewValue; InventoryCustomDataItemLegacyTypeField_IsSet = true; }
     /** @brief Clears the value of InventoryCustomDataItemLegacyTypeField_Optional and sets InventoryCustomDataItemLegacyTypeField_IsSet to false */
    void ClearInventoryCustomDataItemLegacyTypeField() { InventoryCustomDataItemLegacyTypeField_Optional = TEXT("item_legacy_type"); InventoryCustomDataItemLegacyTypeField_IsSet = false; }
    /** @brief Returns true if InventoryCustomDataItemLegacyTypeField_Optional is set and matches the default value */
    bool IsInventoryCustomDataItemLegacyTypeFieldDefaultValue() const { return InventoryCustomDataItemLegacyTypeField_IsSet && InventoryCustomDataItemLegacyTypeField_Optional == TEXT("item_legacy_type"); }
    /** @brief Sets the value of InventoryCustomDataItemLegacyTypeField_Optional to its default and also sets InventoryCustomDataItemLegacyTypeField_IsSet to true */
    void SetInventoryCustomDataItemLegacyTypeFieldToDefault() { InventoryCustomDataItemLegacyTypeField_Optional = TEXT("item_legacy_type"); InventoryCustomDataItemLegacyTypeField_IsSet = true; }

    /** @brief Field name of the property in custom data that maps legacy item subtype to the fields in Inventory APIs */
    FString InventoryCustomDataItemLegacySubtypeField_Optional{  };
    /** @brief true if InventoryCustomDataItemLegacySubtypeField_Optional has been set to a value */
    bool InventoryCustomDataItemLegacySubtypeField_IsSet{ false };
    /** @brief Gets the value of InventoryCustomDataItemLegacySubtypeField_Optional, regardless of it having been set */
    FString& GetInventoryCustomDataItemLegacySubtypeField() { return InventoryCustomDataItemLegacySubtypeField_Optional; }
    /** @brief Gets the value of InventoryCustomDataItemLegacySubtypeField_Optional, regardless of it having been set */
    const FString& GetInventoryCustomDataItemLegacySubtypeField() const { return InventoryCustomDataItemLegacySubtypeField_Optional; }
    /** @brief Gets the value of InventoryCustomDataItemLegacySubtypeField_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetInventoryCustomDataItemLegacySubtypeField(const FString& DefaultValue) const { if (InventoryCustomDataItemLegacySubtypeField_IsSet) return InventoryCustomDataItemLegacySubtypeField_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of InventoryCustomDataItemLegacySubtypeField_Optional and returns true if it has been set, otherwise returns false */
    bool GetInventoryCustomDataItemLegacySubtypeField(FString& OutValue) const { if (InventoryCustomDataItemLegacySubtypeField_IsSet) OutValue = InventoryCustomDataItemLegacySubtypeField_Optional; return InventoryCustomDataItemLegacySubtypeField_IsSet; }
    /** @brief Returns a pointer to InventoryCustomDataItemLegacySubtypeField_Optional, if it has been set, otherwise returns nullptr */
    FString* GetInventoryCustomDataItemLegacySubtypeFieldOrNull() { if (InventoryCustomDataItemLegacySubtypeField_IsSet) return &InventoryCustomDataItemLegacySubtypeField_Optional; return nullptr; }
    /** @brief Returns a pointer to InventoryCustomDataItemLegacySubtypeField_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetInventoryCustomDataItemLegacySubtypeFieldOrNull() const { if (InventoryCustomDataItemLegacySubtypeField_IsSet) return &InventoryCustomDataItemLegacySubtypeField_Optional; return nullptr; }
    /** @brief Sets the value of InventoryCustomDataItemLegacySubtypeField_Optional and also sets InventoryCustomDataItemLegacySubtypeField_IsSet to true */
    void SetInventoryCustomDataItemLegacySubtypeField(FString NewValue) { InventoryCustomDataItemLegacySubtypeField_Optional = NewValue; InventoryCustomDataItemLegacySubtypeField_IsSet = true; }
     /** @brief Clears the value of InventoryCustomDataItemLegacySubtypeField_Optional and sets InventoryCustomDataItemLegacySubtypeField_IsSet to false */
    void ClearInventoryCustomDataItemLegacySubtypeField() { InventoryCustomDataItemLegacySubtypeField_Optional = TEXT("item_legacy_subtype"); InventoryCustomDataItemLegacySubtypeField_IsSet = false; }
    /** @brief Returns true if InventoryCustomDataItemLegacySubtypeField_Optional is set and matches the default value */
    bool IsInventoryCustomDataItemLegacySubtypeFieldDefaultValue() const { return InventoryCustomDataItemLegacySubtypeField_IsSet && InventoryCustomDataItemLegacySubtypeField_Optional == TEXT("item_legacy_subtype"); }
    /** @brief Sets the value of InventoryCustomDataItemLegacySubtypeField_Optional to its default and also sets InventoryCustomDataItemLegacySubtypeField_IsSet to true */
    void SetInventoryCustomDataItemLegacySubtypeFieldToDefault() { InventoryCustomDataItemLegacySubtypeField_Optional = TEXT("item_legacy_subtype"); InventoryCustomDataItemLegacySubtypeField_IsSet = true; }

    /** @brief Field name of the property in custom data that maps legacy vendortype to the fields in Inventory APIs. */
    FString InventoryCustomDataVendorLegacyTypeField_Optional{  };
    /** @brief true if InventoryCustomDataVendorLegacyTypeField_Optional has been set to a value */
    bool InventoryCustomDataVendorLegacyTypeField_IsSet{ false };
    /** @brief Gets the value of InventoryCustomDataVendorLegacyTypeField_Optional, regardless of it having been set */
    FString& GetInventoryCustomDataVendorLegacyTypeField() { return InventoryCustomDataVendorLegacyTypeField_Optional; }
    /** @brief Gets the value of InventoryCustomDataVendorLegacyTypeField_Optional, regardless of it having been set */
    const FString& GetInventoryCustomDataVendorLegacyTypeField() const { return InventoryCustomDataVendorLegacyTypeField_Optional; }
    /** @brief Gets the value of InventoryCustomDataVendorLegacyTypeField_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetInventoryCustomDataVendorLegacyTypeField(const FString& DefaultValue) const { if (InventoryCustomDataVendorLegacyTypeField_IsSet) return InventoryCustomDataVendorLegacyTypeField_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of InventoryCustomDataVendorLegacyTypeField_Optional and returns true if it has been set, otherwise returns false */
    bool GetInventoryCustomDataVendorLegacyTypeField(FString& OutValue) const { if (InventoryCustomDataVendorLegacyTypeField_IsSet) OutValue = InventoryCustomDataVendorLegacyTypeField_Optional; return InventoryCustomDataVendorLegacyTypeField_IsSet; }
    /** @brief Returns a pointer to InventoryCustomDataVendorLegacyTypeField_Optional, if it has been set, otherwise returns nullptr */
    FString* GetInventoryCustomDataVendorLegacyTypeFieldOrNull() { if (InventoryCustomDataVendorLegacyTypeField_IsSet) return &InventoryCustomDataVendorLegacyTypeField_Optional; return nullptr; }
    /** @brief Returns a pointer to InventoryCustomDataVendorLegacyTypeField_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetInventoryCustomDataVendorLegacyTypeFieldOrNull() const { if (InventoryCustomDataVendorLegacyTypeField_IsSet) return &InventoryCustomDataVendorLegacyTypeField_Optional; return nullptr; }
    /** @brief Sets the value of InventoryCustomDataVendorLegacyTypeField_Optional and also sets InventoryCustomDataVendorLegacyTypeField_IsSet to true */
    void SetInventoryCustomDataVendorLegacyTypeField(FString NewValue) { InventoryCustomDataVendorLegacyTypeField_Optional = NewValue; InventoryCustomDataVendorLegacyTypeField_IsSet = true; }
     /** @brief Clears the value of InventoryCustomDataVendorLegacyTypeField_Optional and sets InventoryCustomDataVendorLegacyTypeField_IsSet to false */
    void ClearInventoryCustomDataVendorLegacyTypeField() { InventoryCustomDataVendorLegacyTypeField_Optional = TEXT("vendor_legacy_type"); InventoryCustomDataVendorLegacyTypeField_IsSet = false; }
    /** @brief Returns true if InventoryCustomDataVendorLegacyTypeField_Optional is set and matches the default value */
    bool IsInventoryCustomDataVendorLegacyTypeFieldDefaultValue() const { return InventoryCustomDataVendorLegacyTypeField_IsSet && InventoryCustomDataVendorLegacyTypeField_Optional == TEXT("vendor_legacy_type"); }
    /** @brief Sets the value of InventoryCustomDataVendorLegacyTypeField_Optional to its default and also sets InventoryCustomDataVendorLegacyTypeField_IsSet to true */
    void SetInventoryCustomDataVendorLegacyTypeFieldToDefault() { InventoryCustomDataVendorLegacyTypeField_Optional = TEXT("vendor_legacy_type"); InventoryCustomDataVendorLegacyTypeField_IsSet = true; }
};

/** @} */
