// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereDeveloperAPIAuthContext.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevEntitlementSkuSortOptions.h"
#include "DevEntitlementType.h"
#include "DevExpandProperty.h"
#include "DevPlatform.h"
#include "DevSortOrder.h"
#include "DevCreateEntitlementSkuCollection.h"
#include "DevEntitlementSku.h"
#include "DevEntitlementSkuCollection.h"
#include "DevHTTPValidationError.h"
#include "DevPatchEntitlementSku.h"
#include "DevUpdateEntitlementSku.h"

namespace RallyHereDeveloperAPI
{
using RallyHereDeveloperAPI::ToStringFormatArg;
using RallyHereDeveloperAPI::WriteJsonValue;
using RallyHereDeveloperAPI::TryGetJsonValue;

struct FRequest_SandboxCreateEntitlementSkus;
struct FResponse_SandboxCreateEntitlementSkus;
struct FRequest_SandboxDeleteManyEntitlementSkus;
struct FResponse_SandboxDeleteManyEntitlementSkus;
struct FRequest_SandboxDeleteSingleEntitlementSku;
struct FResponse_SandboxDeleteSingleEntitlementSku;
struct FRequest_SandboxGetEntitlementSkuById;
struct FResponse_SandboxGetEntitlementSkuById;
struct FRequest_SandboxGetEntitlementSkus;
struct FResponse_SandboxGetEntitlementSkus;
struct FRequest_SandboxPatchEntitlementSku;
struct FResponse_SandboxPatchEntitlementSku;
struct FRequest_SandboxUpdateEntitlementSku;
struct FResponse_SandboxUpdateEntitlementSku;

DECLARE_DELEGATE_OneParam(FDelegate_SandboxCreateEntitlementSkus, const FResponse_SandboxCreateEntitlementSkus&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxDeleteManyEntitlementSkus, const FResponse_SandboxDeleteManyEntitlementSkus&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxDeleteSingleEntitlementSku, const FResponse_SandboxDeleteSingleEntitlementSku&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetEntitlementSkuById, const FResponse_SandboxGetEntitlementSkuById&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetEntitlementSkus, const FResponse_SandboxGetEntitlementSkus&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxPatchEntitlementSku, const FResponse_SandboxPatchEntitlementSku&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxUpdateEntitlementSku, const FResponse_SandboxUpdateEntitlementSku&);

class RALLYHEREDEVELOPERAPI_API FSandboxConfigEntitlementSKUAPI : public FAPI
{
public:
    FSandboxConfigEntitlementSKUAPI();
    virtual ~FSandboxConfigEntitlementSKUAPI();

    FHttpRequestPtr SandboxCreateEntitlementSkus(const FRequest_SandboxCreateEntitlementSkus& Request, const FDelegate_SandboxCreateEntitlementSkus& Delegate = FDelegate_SandboxCreateEntitlementSkus(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxDeleteManyEntitlementSkus(const FRequest_SandboxDeleteManyEntitlementSkus& Request, const FDelegate_SandboxDeleteManyEntitlementSkus& Delegate = FDelegate_SandboxDeleteManyEntitlementSkus(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxDeleteSingleEntitlementSku(const FRequest_SandboxDeleteSingleEntitlementSku& Request, const FDelegate_SandboxDeleteSingleEntitlementSku& Delegate = FDelegate_SandboxDeleteSingleEntitlementSku(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetEntitlementSkuById(const FRequest_SandboxGetEntitlementSkuById& Request, const FDelegate_SandboxGetEntitlementSkuById& Delegate = FDelegate_SandboxGetEntitlementSkuById(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetEntitlementSkus(const FRequest_SandboxGetEntitlementSkus& Request, const FDelegate_SandboxGetEntitlementSkus& Delegate = FDelegate_SandboxGetEntitlementSkus(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxPatchEntitlementSku(const FRequest_SandboxPatchEntitlementSku& Request, const FDelegate_SandboxPatchEntitlementSku& Delegate = FDelegate_SandboxPatchEntitlementSku(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxUpdateEntitlementSku(const FRequest_SandboxUpdateEntitlementSku& Request, const FDelegate_SandboxUpdateEntitlementSku& Delegate = FDelegate_SandboxUpdateEntitlementSku(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);

private:
    void OnSandboxCreateEntitlementSkusResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxCreateEntitlementSkus Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxDeleteManyEntitlementSkusResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxDeleteManyEntitlementSkus Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxDeleteSingleEntitlementSkuResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxDeleteSingleEntitlementSku Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetEntitlementSkuByIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetEntitlementSkuById Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetEntitlementSkusResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetEntitlementSkus Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxPatchEntitlementSkuResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxPatchEntitlementSku Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxUpdateEntitlementSkuResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxUpdateEntitlementSku Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};

/* Create Entitlement Skus
 *
 * Create Entitlement Skus. Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxCreateEntitlementSkus : public FRequest
{
    FRequest_SandboxCreateEntitlementSkus();
    virtual ~FRequest_SandboxCreateEntitlementSkus() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevCreateEntitlementSkuCollection CreateEntitlementSkuCollection;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxCreateEntitlementSkus : public FResponse
{
    FResponse_SandboxCreateEntitlementSkus(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxCreateEntitlementSkus() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    TArray<FRHAPI_DevEntitlementSku> Content;


    // Manual Response Helpers
    /* Response 201
    Successful Response
    */
    bool TryGetContentFor201(TArray<FRHAPI_DevEntitlementSku>& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxCreateEntitlementSkus
{
    typedef FRequest_SandboxCreateEntitlementSkus Request;
    typedef FResponse_SandboxCreateEntitlementSkus Response;
    typedef FDelegate_SandboxCreateEntitlementSkus Delegate;
    typedef FSandboxConfigEntitlementSKUAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxCreateEntitlementSkus(InRequest, InDelegate, Priority); }
};

/* Delete Many Entitlement Skus
 *
 * Delete many Entitlement Skus. Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxDeleteManyEntitlementSkus : public FRequest
{
    FRequest_SandboxDeleteManyEntitlementSkus();
    virtual ~FRequest_SandboxDeleteManyEntitlementSkus() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    /* Entitlement Sku IDs to delete */
    TArray<FGuid> EntitlementSkuIds;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxDeleteManyEntitlementSkus : public FResponse
{
    FResponse_SandboxDeleteManyEntitlementSkus(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxDeleteManyEntitlementSkus() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    


    // Manual Response Helpers
    /* Response 204
    Successful Response
    */

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxDeleteManyEntitlementSkus
{
    typedef FRequest_SandboxDeleteManyEntitlementSkus Request;
    typedef FResponse_SandboxDeleteManyEntitlementSkus Response;
    typedef FDelegate_SandboxDeleteManyEntitlementSkus Delegate;
    typedef FSandboxConfigEntitlementSKUAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxDeleteManyEntitlementSkus(InRequest, InDelegate, Priority); }
};

/* Delete Single Entitlement Sku
 *
 * Delete single Entitlement Sku. Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxDeleteSingleEntitlementSku : public FRequest
{
    FRequest_SandboxDeleteSingleEntitlementSku();
    virtual ~FRequest_SandboxDeleteSingleEntitlementSku() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid EntitlementSkuId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxDeleteSingleEntitlementSku : public FResponse
{
    FResponse_SandboxDeleteSingleEntitlementSku(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxDeleteSingleEntitlementSku() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    


    // Manual Response Helpers
    /* Response 204
    Successful Response
    */

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxDeleteSingleEntitlementSku
{
    typedef FRequest_SandboxDeleteSingleEntitlementSku Request;
    typedef FResponse_SandboxDeleteSingleEntitlementSku Response;
    typedef FDelegate_SandboxDeleteSingleEntitlementSku Delegate;
    typedef FSandboxConfigEntitlementSKUAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxDeleteSingleEntitlementSku(InRequest, InDelegate, Priority); }
};

/* Get Entitlement Sku By Id
 *
 * Get Entitlement Sku by ID. Requires any of permissions: 
 * 	 sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetEntitlementSkuById : public FRequest
{
    FRequest_SandboxGetEntitlementSkuById();
    virtual ~FRequest_SandboxGetEntitlementSkuById() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Entitlement Sku ID */
    FGuid EntitlementSkuId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetEntitlementSkuById : public FResponse
{
    FResponse_SandboxGetEntitlementSkuById(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetEntitlementSkuById() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevEntitlementSku Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevEntitlementSku& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetEntitlementSkuById
{
    typedef FRequest_SandboxGetEntitlementSkuById Request;
    typedef FResponse_SandboxGetEntitlementSkuById Response;
    typedef FDelegate_SandboxGetEntitlementSkuById Delegate;
    typedef FSandboxConfigEntitlementSKUAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetEntitlementSkuById(InRequest, InDelegate, Priority); }
};

/* Get Entitlement Skus
 *
 * Get Entitlement Skus by filters. All filters must be true for an Entitlement Sku to be returned. Requires any of permissions: 
 * 	 sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetEntitlementSkus : public FRequest
{
    FRequest_SandboxGetEntitlementSkus();
    virtual ~FRequest_SandboxGetEntitlementSkus() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    /* Entitlement Sku IDs to filter by */
    TOptional<TArray<FGuid>> EntitlementSkuIds;
    /* Filter by Entitlement Sku with matching Loot IDs */
    TOptional<TArray<FGuid>> LootIds;
    /* Filter by Entitlement Sku with matching Loot Entitlement types */
    TOptional<TArray<ERHAPI_DevEntitlementType>> Types;
    /* Filter by Entitlement Sku with matching External Key Campaign IDs */
    TOptional<TArray<FGuid>> ExternalKeyCampaignIds;
    /* Filter by Entitlement Sku with matching platforms */
    TOptional<TArray<ERHAPI_DevPlatform>> Platforms;
    /* Filter by Entitlement Sku with matching SKUs */
    TOptional<TArray<FString>> Skus;
    /* Filter by case insensitive name */
    TOptional<FString> Name;
    /* Filter by last modified account ID */
    TOptional<TArray<FGuid>> LastModifiedAccountIds;
    /* Sort results by */
    TOptional<ERHAPI_DevEntitlementSkuSortOptions> SortBy;
    /* Sort order */
    TOptional<ERHAPI_DevSortOrder> SortOrder;
    /* Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration */
    TOptional<FString> Cursor;
    /* The maximum number of elements to be returned per call */
    TOptional<int32> PageSize;
    /* Resources to expand and fill in additional detail */
    TOptional<TArray<ERHAPI_DevExpandProperty>> Expand;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetEntitlementSkus : public FResponse
{
    FResponse_SandboxGetEntitlementSkus(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetEntitlementSkus() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevEntitlementSkuCollection Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevEntitlementSkuCollection& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetEntitlementSkus
{
    typedef FRequest_SandboxGetEntitlementSkus Request;
    typedef FResponse_SandboxGetEntitlementSkus Response;
    typedef FDelegate_SandboxGetEntitlementSkus Delegate;
    typedef FSandboxConfigEntitlementSKUAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetEntitlementSkus(InRequest, InDelegate, Priority); }
};

/* Patch Entitlement Sku
 *
 * Patch Entitlement Sku. Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxPatchEntitlementSku : public FRequest
{
    FRequest_SandboxPatchEntitlementSku();
    virtual ~FRequest_SandboxPatchEntitlementSku() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid EntitlementSkuId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevPatchEntitlementSku PatchEntitlementSku;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxPatchEntitlementSku : public FResponse
{
    FResponse_SandboxPatchEntitlementSku(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxPatchEntitlementSku() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevEntitlementSku Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevEntitlementSku& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxPatchEntitlementSku
{
    typedef FRequest_SandboxPatchEntitlementSku Request;
    typedef FResponse_SandboxPatchEntitlementSku Response;
    typedef FDelegate_SandboxPatchEntitlementSku Delegate;
    typedef FSandboxConfigEntitlementSKUAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxPatchEntitlementSku(InRequest, InDelegate, Priority); }
};

/* Update Entitlement Sku
 *
 * Update Entitlement Sku. Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxUpdateEntitlementSku : public FRequest
{
    FRequest_SandboxUpdateEntitlementSku();
    virtual ~FRequest_SandboxUpdateEntitlementSku() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid EntitlementSkuId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevUpdateEntitlementSku UpdateEntitlementSku;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxUpdateEntitlementSku : public FResponse
{
    FResponse_SandboxUpdateEntitlementSku(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxUpdateEntitlementSku() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevEntitlementSku Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevEntitlementSku& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxUpdateEntitlementSku
{
    typedef FRequest_SandboxUpdateEntitlementSku Request;
    typedef FResponse_SandboxUpdateEntitlementSku Response;
    typedef FDelegate_SandboxUpdateEntitlementSku Delegate;
    typedef FSandboxConfigEntitlementSKUAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxUpdateEntitlementSku(InRequest, InDelegate, Priority); }
};


}
