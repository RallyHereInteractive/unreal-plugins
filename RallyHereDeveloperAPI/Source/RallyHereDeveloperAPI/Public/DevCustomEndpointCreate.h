// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereDeveloperAPIBaseModel.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevHttpVerb.h"
#include "DevCustomEndpointCreate.generated.h"

/** @defgroup RHAPI_DevCustomEndpointCreate RallyHere API Model DevCustomEndpointCreate
 *  @{
 */

/**
 * @brief This mixin is meant to give a set of common properties to root config models
 */
USTRUCT(BlueprintType)
struct RALLYHEREDEVELOPERAPI_API FRHAPI_DevCustomEndpointCreate : public FRHAPI_DevModel
{
    GENERATED_BODY()

    /**
    * @brief Fills this object with data from the passed in JSON
    *
    * @param [in] JsonValue Data from the API call.
    *
    * @return true if parsing of the JSON data was successful.
    */
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

    /**
    * @brief Writes the data from this object into the specified JSON Writer stream
    *
    * @param [in] Writer JSON Writer stream to push .
    */
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /** @brief Name of the resource */
    FString Name_Optional{  };
    /** @brief true if Name_Optional has been set to a value */
    bool Name_IsSet{ false };
    /** @brief Gets the value of Name_Optional, regardless of it having been set */
    FString& GetName() { return Name_Optional; }
    /** @brief Gets the value of Name_Optional, regardless of it having been set */
    const FString& GetName() const { return Name_Optional; }
    /** @brief Gets the value of Name_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetName(const FString& DefaultValue) const { if (Name_IsSet) return Name_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Name_Optional and returns true if it has been set, otherwise returns false */
    bool GetName(FString& OutValue) const { if (Name_IsSet) OutValue = Name_Optional; return Name_IsSet; }
    /** @brief Returns a pointer to Name_Optional, if it has been set, otherwise returns nullptr */
    FString* GetNameOrNull() { if (Name_IsSet) return &Name_Optional; return nullptr; }
    /** @brief Returns a pointer to Name_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetNameOrNull() const { if (Name_IsSet) return &Name_Optional; return nullptr; }
    /** @brief Sets the value of Name_Optional and also sets Name_IsSet to true */
    void SetName(FString NewValue) { Name_Optional = NewValue; Name_IsSet = true; }
     /** @brief Clears the value of Name_Optional and sets Name_IsSet to false */
    void ClearName() { Name_IsSet = false; }

    /** @brief Description of the resource */
    FString Description_Optional{  };
    /** @brief true if Description_Optional has been set to a value */
    bool Description_IsSet{ false };
    /** @brief Gets the value of Description_Optional, regardless of it having been set */
    FString& GetDescription() { return Description_Optional; }
    /** @brief Gets the value of Description_Optional, regardless of it having been set */
    const FString& GetDescription() const { return Description_Optional; }
    /** @brief Gets the value of Description_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetDescription(const FString& DefaultValue) const { if (Description_IsSet) return Description_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Description_Optional and returns true if it has been set, otherwise returns false */
    bool GetDescription(FString& OutValue) const { if (Description_IsSet) OutValue = Description_Optional; return Description_IsSet; }
    /** @brief Returns a pointer to Description_Optional, if it has been set, otherwise returns nullptr */
    FString* GetDescriptionOrNull() { if (Description_IsSet) return &Description_Optional; return nullptr; }
    /** @brief Returns a pointer to Description_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetDescriptionOrNull() const { if (Description_IsSet) return &Description_Optional; return nullptr; }
    /** @brief Sets the value of Description_Optional and also sets Description_IsSet to true */
    void SetDescription(FString NewValue) { Description_Optional = NewValue; Description_IsSet = true; }
     /** @brief Clears the value of Description_Optional and sets Description_IsSet to false */
    void ClearDescription() { Description_IsSet = false; }

    /** @brief Unique identifier for this custom endpoint */
    FGuid CustomEndpointUniqueId_Optional{  };
    /** @brief true if CustomEndpointUniqueId_Optional has been set to a value */
    bool CustomEndpointUniqueId_IsSet{ false };
    /** @brief Gets the value of CustomEndpointUniqueId_Optional, regardless of it having been set */
    FGuid& GetCustomEndpointUniqueId() { return CustomEndpointUniqueId_Optional; }
    /** @brief Gets the value of CustomEndpointUniqueId_Optional, regardless of it having been set */
    const FGuid& GetCustomEndpointUniqueId() const { return CustomEndpointUniqueId_Optional; }
    /** @brief Gets the value of CustomEndpointUniqueId_Optional, if it has been set, otherwise it returns DefaultValue */
    const FGuid& GetCustomEndpointUniqueId(const FGuid& DefaultValue) const { if (CustomEndpointUniqueId_IsSet) return CustomEndpointUniqueId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of CustomEndpointUniqueId_Optional and returns true if it has been set, otherwise returns false */
    bool GetCustomEndpointUniqueId(FGuid& OutValue) const { if (CustomEndpointUniqueId_IsSet) OutValue = CustomEndpointUniqueId_Optional; return CustomEndpointUniqueId_IsSet; }
    /** @brief Returns a pointer to CustomEndpointUniqueId_Optional, if it has been set, otherwise returns nullptr */
    FGuid* GetCustomEndpointUniqueIdOrNull() { if (CustomEndpointUniqueId_IsSet) return &CustomEndpointUniqueId_Optional; return nullptr; }
    /** @brief Returns a pointer to CustomEndpointUniqueId_Optional, if it has been set, otherwise returns nullptr */
    const FGuid* GetCustomEndpointUniqueIdOrNull() const { if (CustomEndpointUniqueId_IsSet) return &CustomEndpointUniqueId_Optional; return nullptr; }
    /** @brief Sets the value of CustomEndpointUniqueId_Optional and also sets CustomEndpointUniqueId_IsSet to true */
    void SetCustomEndpointUniqueId(FGuid NewValue) { CustomEndpointUniqueId_Optional = NewValue; CustomEndpointUniqueId_IsSet = true; }
     /** @brief Clears the value of CustomEndpointUniqueId_Optional and sets CustomEndpointUniqueId_IsSet to false */
    void ClearCustomEndpointUniqueId() { CustomEndpointUniqueId_Optional = FGuid(TEXT("5eaa7239-b5cc-4347-8a63-9e0adf706db5")); CustomEndpointUniqueId_IsSet = false; }
    /** @brief Returns true if CustomEndpointUniqueId_Optional is set and matches the default value */
    bool IsCustomEndpointUniqueIdDefaultValue() const { return CustomEndpointUniqueId_IsSet && CustomEndpointUniqueId_Optional == FGuid(TEXT("5eaa7239-b5cc-4347-8a63-9e0adf706db5")); }
    /** @brief Sets the value of CustomEndpointUniqueId_Optional to its default and also sets CustomEndpointUniqueId_IsSet to true */
    void SetCustomEndpointUniqueIdToDefault() { CustomEndpointUniqueId_Optional = FGuid(TEXT("5eaa7239-b5cc-4347-8a63-9e0adf706db5")); CustomEndpointUniqueId_IsSet = true; }

    /** @brief The customer defined identifier for this endpoint */
    FString EndpointId{  };
    /** @brief Gets the value of EndpointId */
    FString& GetEndpointId() { return EndpointId; }
    /** @brief Gets the value of EndpointId */
    const FString& GetEndpointId() const { return EndpointId; }
    /** @brief Sets the value of EndpointId */
    void SetEndpointId(FString NewValue) { EndpointId = NewValue;  }

    /** @brief User friendly identifier of setting type */
    FString Url{  };
    /** @brief Gets the value of Url */
    FString& GetUrl() { return Url; }
    /** @brief Gets the value of Url */
    const FString& GetUrl() const { return Url; }
    /** @brief Sets the value of Url */
    void SetUrl(FString NewValue) { Url = NewValue;  }

    /** @brief HTTP verb to use when calling the custom endpoint */
    ERHAPI_DevHttpVerb HttpVerb_Optional{  };
    /** @brief true if HttpVerb_Optional has been set to a value */
    bool HttpVerb_IsSet{ false };
    /** @brief Gets the value of HttpVerb_Optional, regardless of it having been set */
    ERHAPI_DevHttpVerb& GetHttpVerb() { return HttpVerb_Optional; }
    /** @brief Gets the value of HttpVerb_Optional, regardless of it having been set */
    const ERHAPI_DevHttpVerb& GetHttpVerb() const { return HttpVerb_Optional; }
    /** @brief Gets the value of HttpVerb_Optional, if it has been set, otherwise it returns DefaultValue */
    const ERHAPI_DevHttpVerb& GetHttpVerb(const ERHAPI_DevHttpVerb& DefaultValue) const { if (HttpVerb_IsSet) return HttpVerb_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of HttpVerb_Optional and returns true if it has been set, otherwise returns false */
    bool GetHttpVerb(ERHAPI_DevHttpVerb& OutValue) const { if (HttpVerb_IsSet) OutValue = HttpVerb_Optional; return HttpVerb_IsSet; }
    /** @brief Returns a pointer to HttpVerb_Optional, if it has been set, otherwise returns nullptr */
    ERHAPI_DevHttpVerb* GetHttpVerbOrNull() { if (HttpVerb_IsSet) return &HttpVerb_Optional; return nullptr; }
    /** @brief Returns a pointer to HttpVerb_Optional, if it has been set, otherwise returns nullptr */
    const ERHAPI_DevHttpVerb* GetHttpVerbOrNull() const { if (HttpVerb_IsSet) return &HttpVerb_Optional; return nullptr; }
    /** @brief Sets the value of HttpVerb_Optional and also sets HttpVerb_IsSet to true */
    void SetHttpVerb(ERHAPI_DevHttpVerb NewValue) { HttpVerb_Optional = NewValue; HttpVerb_IsSet = true; }
     /** @brief Clears the value of HttpVerb_Optional and sets HttpVerb_IsSet to false */
    void ClearHttpVerb() { HttpVerb_IsSet = false; }

    /** @brief Custom headers to be passed to the endpoint */
    TMap<FString, FString> CustomHeaders_Optional{  };
    /** @brief true if CustomHeaders_Optional has been set to a value */
    bool CustomHeaders_IsSet{ false };
    /** @brief Gets the value of CustomHeaders_Optional, regardless of it having been set */
    TMap<FString, FString>& GetCustomHeaders() { return CustomHeaders_Optional; }
    /** @brief Gets the value of CustomHeaders_Optional, regardless of it having been set */
    const TMap<FString, FString>& GetCustomHeaders() const { return CustomHeaders_Optional; }
    /** @brief Gets the value of CustomHeaders_Optional, if it has been set, otherwise it returns DefaultValue */
    const TMap<FString, FString>& GetCustomHeaders(const TMap<FString, FString>& DefaultValue) const { if (CustomHeaders_IsSet) return CustomHeaders_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of CustomHeaders_Optional and returns true if it has been set, otherwise returns false */
    bool GetCustomHeaders(TMap<FString, FString>& OutValue) const { if (CustomHeaders_IsSet) OutValue = CustomHeaders_Optional; return CustomHeaders_IsSet; }
    /** @brief Returns a pointer to CustomHeaders_Optional, if it has been set, otherwise returns nullptr */
    TMap<FString, FString>* GetCustomHeadersOrNull() { if (CustomHeaders_IsSet) return &CustomHeaders_Optional; return nullptr; }
    /** @brief Returns a pointer to CustomHeaders_Optional, if it has been set, otherwise returns nullptr */
    const TMap<FString, FString>* GetCustomHeadersOrNull() const { if (CustomHeaders_IsSet) return &CustomHeaders_Optional; return nullptr; }
    /** @brief Sets the value of CustomHeaders_Optional and also sets CustomHeaders_IsSet to true */
    void SetCustomHeaders(TMap<FString, FString> NewValue) { CustomHeaders_Optional = NewValue; CustomHeaders_IsSet = true; }
     /** @brief Clears the value of CustomHeaders_Optional and sets CustomHeaders_IsSet to false */
    void ClearCustomHeaders() { CustomHeaders_IsSet = false; }
};

/** @} */
