// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereDeveloperAPIBaseModel.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevCrossplayProfileUpdateRequest.generated.h"

/** @defgroup RHAPI_DevCrossplayProfileUpdateRequest RallyHere API Model DevCrossplayProfileUpdateRequest
 *  @{
 */

/**
 * @brief 
 */
USTRUCT(BlueprintType)
struct RALLYHEREDEVELOPERAPI_API FRHAPI_DevCrossplayProfileUpdateRequest : public FRHAPI_DevModel
{
    GENERATED_BODY()

    /**
    * @brief Fills this object with data from the passed in JSON
    *
    * @param [in] JsonValue Data from the API call.
    *
    * @return true if parsing of the JSON data was successful.
    */
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

    /**
    * @brief Writes the data from this object into the specified JSON Writer stream
    *
    * @param [in] Writer JSON Writer stream to push .
    */
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /** @brief Readable name for this CrossplayProfile */
    FString Name_Optional{  };
    /** @brief true if Name_Optional has been set to a value */
    bool Name_IsSet{ false };
    /** @brief Gets the value of Name_Optional, regardless of it having been set */
    FString& GetName() { return Name_Optional; }
    /** @brief Gets the value of Name_Optional, regardless of it having been set */
    const FString& GetName() const { return Name_Optional; }
    /** @brief Gets the value of Name_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetName(const FString& DefaultValue) const { if (Name_IsSet) return Name_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Name_Optional and returns true if it has been set, otherwise returns false */
    bool GetName(FString& OutValue) const { if (Name_IsSet) OutValue = Name_Optional; return Name_IsSet; }
    /** @brief Returns a pointer to Name_Optional, if it has been set, otherwise returns nullptr */
    FString* GetNameOrNull() { if (Name_IsSet) return &Name_Optional; return nullptr; }
    /** @brief Returns a pointer to Name_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetNameOrNull() const { if (Name_IsSet) return &Name_Optional; return nullptr; }
    /** @brief Sets the value of Name_Optional and also sets Name_IsSet to true */
    void SetName(FString NewValue) { Name_Optional = NewValue; Name_IsSet = true; }
     /** @brief Clears the value of Name_Optional and sets Name_IsSet to false */
    void ClearName() { Name_IsSet = false; }

    /** @brief Which CrossplayPartition this CrossplayProfile belongs to */
    FGuid CrossplayPartitionId_Optional{  };
    /** @brief true if CrossplayPartitionId_Optional has been set to a value */
    bool CrossplayPartitionId_IsSet{ false };
    /** @brief Gets the value of CrossplayPartitionId_Optional, regardless of it having been set */
    FGuid& GetCrossplayPartitionId() { return CrossplayPartitionId_Optional; }
    /** @brief Gets the value of CrossplayPartitionId_Optional, regardless of it having been set */
    const FGuid& GetCrossplayPartitionId() const { return CrossplayPartitionId_Optional; }
    /** @brief Gets the value of CrossplayPartitionId_Optional, if it has been set, otherwise it returns DefaultValue */
    const FGuid& GetCrossplayPartitionId(const FGuid& DefaultValue) const { if (CrossplayPartitionId_IsSet) return CrossplayPartitionId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of CrossplayPartitionId_Optional and returns true if it has been set, otherwise returns false */
    bool GetCrossplayPartitionId(FGuid& OutValue) const { if (CrossplayPartitionId_IsSet) OutValue = CrossplayPartitionId_Optional; return CrossplayPartitionId_IsSet; }
    /** @brief Returns a pointer to CrossplayPartitionId_Optional, if it has been set, otherwise returns nullptr */
    FGuid* GetCrossplayPartitionIdOrNull() { if (CrossplayPartitionId_IsSet) return &CrossplayPartitionId_Optional; return nullptr; }
    /** @brief Returns a pointer to CrossplayPartitionId_Optional, if it has been set, otherwise returns nullptr */
    const FGuid* GetCrossplayPartitionIdOrNull() const { if (CrossplayPartitionId_IsSet) return &CrossplayPartitionId_Optional; return nullptr; }
    /** @brief Sets the value of CrossplayPartitionId_Optional and also sets CrossplayPartitionId_IsSet to true */
    void SetCrossplayPartitionId(FGuid NewValue) { CrossplayPartitionId_Optional = NewValue; CrossplayPartitionId_IsSet = true; }
     /** @brief Clears the value of CrossplayPartitionId_Optional and sets CrossplayPartitionId_IsSet to false */
    void ClearCrossplayPartitionId() { CrossplayPartitionId_IsSet = false; }
};

/** @} */
