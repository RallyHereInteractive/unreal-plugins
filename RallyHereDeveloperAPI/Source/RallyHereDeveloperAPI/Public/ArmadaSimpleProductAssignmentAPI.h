// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereDeveloperAPIAuthContext.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevHTTPValidationError.h"
#include "DevSimpleProductAssignment.h"
#include "DevSimpleProductAssignmentCreate.h"
#include "DevSimpleProductAssignmentUpdate.h"
#include "DevSimpleProductAssignmentVersionsAndTransactions.h"

namespace RallyHereDeveloperAPI
{
using RallyHereDeveloperAPI::ToStringFormatArg;
using RallyHereDeveloperAPI::WriteJsonValue;
using RallyHereDeveloperAPI::TryGetJsonValue;

struct FRequest_CreateSpa;
struct FResponse_CreateSpa;
struct FRequest_GetAllSpas;
struct FResponse_GetAllSpas;
struct FRequest_GetSpa;
struct FResponse_GetSpa;
struct FRequest_GetSpaVersions;
struct FResponse_GetSpaVersions;
struct FRequest_UpdateSpa;
struct FResponse_UpdateSpa;

DECLARE_DELEGATE_OneParam(FDelegate_CreateSpa, const FResponse_CreateSpa&);
DECLARE_DELEGATE_OneParam(FDelegate_GetAllSpas, const FResponse_GetAllSpas&);
DECLARE_DELEGATE_OneParam(FDelegate_GetSpa, const FResponse_GetSpa&);
DECLARE_DELEGATE_OneParam(FDelegate_GetSpaVersions, const FResponse_GetSpaVersions&);
DECLARE_DELEGATE_OneParam(FDelegate_UpdateSpa, const FResponse_UpdateSpa&);

class RALLYHEREDEVELOPERAPI_API FArmadaSimpleProductAssignmentAPI : public FAPI
{
public:
    FArmadaSimpleProductAssignmentAPI();
    virtual ~FArmadaSimpleProductAssignmentAPI();

    FHttpRequestPtr CreateSpa(const FRequest_CreateSpa& Request, const FDelegate_CreateSpa& Delegate = FDelegate_CreateSpa(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr GetAllSpas(const FRequest_GetAllSpas& Request, const FDelegate_GetAllSpas& Delegate = FDelegate_GetAllSpas(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr GetSpa(const FRequest_GetSpa& Request, const FDelegate_GetSpa& Delegate = FDelegate_GetSpa(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr GetSpaVersions(const FRequest_GetSpaVersions& Request, const FDelegate_GetSpaVersions& Delegate = FDelegate_GetSpaVersions(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr UpdateSpa(const FRequest_UpdateSpa& Request, const FDelegate_UpdateSpa& Delegate = FDelegate_UpdateSpa(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);

private:
    void OnCreateSpaResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_CreateSpa Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetAllSpasResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAllSpas Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetSpaResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetSpa Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetSpaVersionsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetSpaVersions Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnUpdateSpaResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdateSpa Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};

/* Create Spa
 *
 * Create a simple product assignment
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_CreateSpa : public FRequest
{
    FRequest_CreateSpa();
    virtual ~FRequest_CreateSpa() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FRHAPI_DevSimpleProductAssignmentCreate SimpleProductAssignmentCreate;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_CreateSpa : public FResponse
{
    FResponse_CreateSpa(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_CreateSpa() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevSimpleProductAssignment Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevSimpleProductAssignment& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_CreateSpa
{
    typedef FRequest_CreateSpa Request;
    typedef FResponse_CreateSpa Response;
    typedef FDelegate_CreateSpa Delegate;
    typedef FArmadaSimpleProductAssignmentAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.CreateSpa(InRequest, InDelegate, Priority); }
};

/* Get All Spas
 *
 * Get all simple product assignments
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_GetAllSpas : public FRequest
{
    FRequest_GetAllSpas();
    virtual ~FRequest_GetAllSpas() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Host IDs to filter by */
    TOptional<TArray<FGuid>> HostIds;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_GetAllSpas : public FResponse
{
    FResponse_GetAllSpas(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetAllSpas() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    TArray<FRHAPI_DevSimpleProductAssignment> Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(TArray<FRHAPI_DevSimpleProductAssignment>& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_GetAllSpas
{
    typedef FRequest_GetAllSpas Request;
    typedef FResponse_GetAllSpas Response;
    typedef FDelegate_GetAllSpas Delegate;
    typedef FArmadaSimpleProductAssignmentAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.GetAllSpas(InRequest, InDelegate, Priority); }
};

/* Get Spa
 *
 * Get a simple product assignment
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_GetSpa : public FRequest
{
    FRequest_GetSpa();
    virtual ~FRequest_GetSpa() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* The simple product assignment ID */
    FGuid SpaId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_GetSpa : public FResponse
{
    FResponse_GetSpa(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetSpa() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevSimpleProductAssignment Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevSimpleProductAssignment& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_GetSpa
{
    typedef FRequest_GetSpa Request;
    typedef FResponse_GetSpa Response;
    typedef FDelegate_GetSpa Delegate;
    typedef FArmadaSimpleProductAssignmentAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.GetSpa(InRequest, InDelegate, Priority); }
};

/* Get Spa Versions
 *
 * Get versions for a simple product assignment
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_GetSpaVersions : public FRequest
{
    FRequest_GetSpaVersions();
    virtual ~FRequest_GetSpaVersions() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* The simple product assignment ID */
    FGuid SpaId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_GetSpaVersions : public FResponse
{
    FResponse_GetSpaVersions(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetSpaVersions() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevSimpleProductAssignmentVersionsAndTransactions Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevSimpleProductAssignmentVersionsAndTransactions& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_GetSpaVersions
{
    typedef FRequest_GetSpaVersions Request;
    typedef FResponse_GetSpaVersions Response;
    typedef FDelegate_GetSpaVersions Delegate;
    typedef FArmadaSimpleProductAssignmentAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.GetSpaVersions(InRequest, InDelegate, Priority); }
};

/* Update Spa
 *
 * Update a simple product assignment
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_UpdateSpa : public FRequest
{
    FRequest_UpdateSpa();
    virtual ~FRequest_UpdateSpa() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* The simple product assignment ID */
    FGuid SpaId;
    FRHAPI_DevSimpleProductAssignmentUpdate SimpleProductAssignmentUpdate;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_UpdateSpa : public FResponse
{
    FResponse_UpdateSpa(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_UpdateSpa() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevSimpleProductAssignment Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevSimpleProductAssignment& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_UpdateSpa
{
    typedef FRequest_UpdateSpa Request;
    typedef FResponse_UpdateSpa Response;
    typedef FDelegate_UpdateSpa Delegate;
    typedef FArmadaSimpleProductAssignmentAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.UpdateSpa(InRequest, InDelegate, Priority); }
};


}
