// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereDeveloperAPIBaseModel.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevOrganizationStructure.generated.h"

/** @defgroup RHAPI_DevOrganizationStructure RallyHere API Model DevOrganizationStructure
 *  @{
 */

/**
 * @brief 
 */
USTRUCT(BlueprintType)
struct RALLYHEREDEVELOPERAPI_API FRHAPI_DevOrganizationStructure : public FRHAPI_DevModel
{
    GENERATED_BODY()

    /**
    * @brief Fills this object with data from the passed in JSON
    *
    * @param [in] JsonValue Data from the API call.
    *
    * @return true if parsing of the JSON data was successful.
    */
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

    /**
    * @brief Writes the data from this object into the specified JSON Writer stream
    *
    * @param [in] Writer JSON Writer stream to push .
    */
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /** @brief Level ID */
    FGuid Level{  };
    /** @brief Gets the value of Level */
    FGuid& GetLevel() { return Level; }
    /** @brief Gets the value of Level */
    const FGuid& GetLevel() const { return Level; }
    /** @brief Sets the value of Level */
    void SetLevel(FGuid NewValue) { Level = NewValue;  }

    /** @brief Level Type */
    FString LevelType_Optional{  };
    /** @brief true if LevelType_Optional has been set to a value */
    bool LevelType_IsSet{ false };
    /** @brief Gets the value of LevelType_Optional, regardless of it having been set */
    FString& GetLevelType() { return LevelType_Optional; }
    /** @brief Gets the value of LevelType_Optional, regardless of it having been set */
    const FString& GetLevelType() const { return LevelType_Optional; }
    /** @brief Gets the value of LevelType_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetLevelType(const FString& DefaultValue) const { if (LevelType_IsSet) return LevelType_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of LevelType_Optional and returns true if it has been set, otherwise returns false */
    bool GetLevelType(FString& OutValue) const { if (LevelType_IsSet) OutValue = LevelType_Optional; return LevelType_IsSet; }
    /** @brief Returns a pointer to LevelType_Optional, if it has been set, otherwise returns nullptr */
    FString* GetLevelTypeOrNull() { if (LevelType_IsSet) return &LevelType_Optional; return nullptr; }
    /** @brief Returns a pointer to LevelType_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetLevelTypeOrNull() const { if (LevelType_IsSet) return &LevelType_Optional; return nullptr; }
    /** @brief Sets the value of LevelType_Optional and also sets LevelType_IsSet to true */
    void SetLevelType(FString NewValue) { LevelType_Optional = NewValue; LevelType_IsSet = true; }
     /** @brief Clears the value of LevelType_Optional and sets LevelType_IsSet to false */
    void ClearLevelType() { LevelType_Optional = TEXT(""); LevelType_IsSet = false; }
    /** @brief Returns true if LevelType_Optional is set and matches the default value */
    bool IsLevelTypeDefaultValue() const { return LevelType_IsSet && LevelType_Optional == TEXT(""); }
    /** @brief Sets the value of LevelType_Optional to its default and also sets LevelType_IsSet to true */
    void SetLevelTypeToDefault() { LevelType_Optional = TEXT(""); LevelType_IsSet = true; }

    /** @brief Level Name */
    FString LevelName_Optional{  };
    /** @brief true if LevelName_Optional has been set to a value */
    bool LevelName_IsSet{ false };
    /** @brief Gets the value of LevelName_Optional, regardless of it having been set */
    FString& GetLevelName() { return LevelName_Optional; }
    /** @brief Gets the value of LevelName_Optional, regardless of it having been set */
    const FString& GetLevelName() const { return LevelName_Optional; }
    /** @brief Gets the value of LevelName_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetLevelName(const FString& DefaultValue) const { if (LevelName_IsSet) return LevelName_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of LevelName_Optional and returns true if it has been set, otherwise returns false */
    bool GetLevelName(FString& OutValue) const { if (LevelName_IsSet) OutValue = LevelName_Optional; return LevelName_IsSet; }
    /** @brief Returns a pointer to LevelName_Optional, if it has been set, otherwise returns nullptr */
    FString* GetLevelNameOrNull() { if (LevelName_IsSet) return &LevelName_Optional; return nullptr; }
    /** @brief Returns a pointer to LevelName_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetLevelNameOrNull() const { if (LevelName_IsSet) return &LevelName_Optional; return nullptr; }
    /** @brief Sets the value of LevelName_Optional and also sets LevelName_IsSet to true */
    void SetLevelName(FString NewValue) { LevelName_Optional = NewValue; LevelName_IsSet = true; }
     /** @brief Clears the value of LevelName_Optional and sets LevelName_IsSet to false */
    void ClearLevelName() { LevelName_Optional = TEXT(""); LevelName_IsSet = false; }
    /** @brief Returns true if LevelName_Optional is set and matches the default value */
    bool IsLevelNameDefaultValue() const { return LevelName_IsSet && LevelName_Optional == TEXT(""); }
    /** @brief Sets the value of LevelName_Optional to its default and also sets LevelName_IsSet to true */
    void SetLevelNameToDefault() { LevelName_Optional = TEXT(""); LevelName_IsSet = true; }
};

/** @} */
