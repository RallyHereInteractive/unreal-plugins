// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereDeveloperAPIBaseModel.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevSocialConfig.generated.h"

/** @defgroup RHAPI_DevSocialConfig RallyHere API Model DevSocialConfig
 *  @{
 */

/**
 * @brief Social options
 */
USTRUCT(BlueprintType)
struct RALLYHEREDEVELOPERAPI_API FRHAPI_DevSocialConfig : public FRHAPI_DevModel
{
    GENERATED_BODY()

    /**
    * @brief Fills this object with data from the passed in JSON
    *
    * @param [in] JsonValue Data from the API call.
    *
    * @return true if parsing of the JSON data was successful.
    */
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

    /**
    * @brief Writes the data from this object into the specified JSON Writer stream
    *
    * @param [in] Writer JSON Writer stream to push .
    */
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /** @brief Maximum allowed friends per player */
    int32 FriendLimit_Optional{  };
    /** @brief true if FriendLimit_Optional has been set to a value */
    bool FriendLimit_IsSet{ false };
    /** @brief Gets the value of FriendLimit_Optional, regardless of it having been set */
    int32& GetFriendLimit() { return FriendLimit_Optional; }
    /** @brief Gets the value of FriendLimit_Optional, regardless of it having been set */
    const int32& GetFriendLimit() const { return FriendLimit_Optional; }
    /** @brief Gets the value of FriendLimit_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetFriendLimit(const int32& DefaultValue) const { if (FriendLimit_IsSet) return FriendLimit_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of FriendLimit_Optional and returns true if it has been set, otherwise returns false */
    bool GetFriendLimit(int32& OutValue) const { if (FriendLimit_IsSet) OutValue = FriendLimit_Optional; return FriendLimit_IsSet; }
    /** @brief Returns a pointer to FriendLimit_Optional, if it has been set, otherwise returns nullptr */
    int32* GetFriendLimitOrNull() { if (FriendLimit_IsSet) return &FriendLimit_Optional; return nullptr; }
    /** @brief Returns a pointer to FriendLimit_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetFriendLimitOrNull() const { if (FriendLimit_IsSet) return &FriendLimit_Optional; return nullptr; }
    /** @brief Sets the value of FriendLimit_Optional and also sets FriendLimit_IsSet to true */
    void SetFriendLimit(int32 NewValue) { FriendLimit_Optional = NewValue; FriendLimit_IsSet = true; }
     /** @brief Clears the value of FriendLimit_Optional and sets FriendLimit_IsSet to false */
    void ClearFriendLimit() { FriendLimit_Optional = 100; FriendLimit_IsSet = false; }
    /** @brief Returns true if FriendLimit_Optional is set and matches the default value */
    bool IsFriendLimitDefaultValue() const { return FriendLimit_IsSet && FriendLimit_Optional == 100; }
    /** @brief Sets the value of FriendLimit_Optional to its default and also sets FriendLimit_IsSet to true */
    void SetFriendLimitToDefault() { FriendLimit_Optional = 100; FriendLimit_IsSet = true; }

    /** @brief Maximum allowed outgoing blocks per player */
    int32 BlockLimit_Optional{  };
    /** @brief true if BlockLimit_Optional has been set to a value */
    bool BlockLimit_IsSet{ false };
    /** @brief Gets the value of BlockLimit_Optional, regardless of it having been set */
    int32& GetBlockLimit() { return BlockLimit_Optional; }
    /** @brief Gets the value of BlockLimit_Optional, regardless of it having been set */
    const int32& GetBlockLimit() const { return BlockLimit_Optional; }
    /** @brief Gets the value of BlockLimit_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetBlockLimit(const int32& DefaultValue) const { if (BlockLimit_IsSet) return BlockLimit_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of BlockLimit_Optional and returns true if it has been set, otherwise returns false */
    bool GetBlockLimit(int32& OutValue) const { if (BlockLimit_IsSet) OutValue = BlockLimit_Optional; return BlockLimit_IsSet; }
    /** @brief Returns a pointer to BlockLimit_Optional, if it has been set, otherwise returns nullptr */
    int32* GetBlockLimitOrNull() { if (BlockLimit_IsSet) return &BlockLimit_Optional; return nullptr; }
    /** @brief Returns a pointer to BlockLimit_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetBlockLimitOrNull() const { if (BlockLimit_IsSet) return &BlockLimit_Optional; return nullptr; }
    /** @brief Sets the value of BlockLimit_Optional and also sets BlockLimit_IsSet to true */
    void SetBlockLimit(int32 NewValue) { BlockLimit_Optional = NewValue; BlockLimit_IsSet = true; }
     /** @brief Clears the value of BlockLimit_Optional and sets BlockLimit_IsSet to false */
    void ClearBlockLimit() { BlockLimit_Optional = 100; BlockLimit_IsSet = false; }
    /** @brief Returns true if BlockLimit_Optional is set and matches the default value */
    bool IsBlockLimitDefaultValue() const { return BlockLimit_IsSet && BlockLimit_Optional == 100; }
    /** @brief Sets the value of BlockLimit_Optional to its default and also sets BlockLimit_IsSet to true */
    void SetBlockLimitToDefault() { BlockLimit_Optional = 100; BlockLimit_IsSet = true; }
};

/** @} */
