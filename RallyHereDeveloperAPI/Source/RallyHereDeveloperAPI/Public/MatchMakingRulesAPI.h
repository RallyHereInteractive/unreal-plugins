// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereDeveloperAPIAuthContext.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevAllMatchMakingRulesResponse.h"
#include "DevHTTPValidationError.h"
#include "DevMatchMakingRule.h"
#include "DevMatchMakingRuleRequest.h"
#include "DevMatchMakingRuleUpdateRequest.h"
#include "Misc/TVariant.h"

namespace RallyHereDeveloperAPI
{
using RallyHereDeveloperAPI::ToStringFormatArg;
using RallyHereDeveloperAPI::WriteJsonValue;
using RallyHereDeveloperAPI::TryGetJsonValue;

struct FRequest_OrgProductSandboxCreateRule;
struct FResponse_OrgProductSandboxCreateRule;
struct FRequest_OrgProductSandboxDeleteRule;
struct FResponse_OrgProductSandboxDeleteRule;
struct FRequest_OrgProductSandboxGetAllRules;
struct FResponse_OrgProductSandboxGetAllRules;
struct FRequest_OrgProductSandboxGetRule;
struct FResponse_OrgProductSandboxGetRule;
struct FRequest_OrgProductSandboxPatchRule;
struct FResponse_OrgProductSandboxPatchRule;
struct FRequest_OrgProductSandboxPutRule;
struct FResponse_OrgProductSandboxPutRule;
struct FRequest_SandboxCreateRule;
struct FResponse_SandboxCreateRule;
struct FRequest_SandboxDeleteRule;
struct FResponse_SandboxDeleteRule;
struct FRequest_SandboxGetAllRules;
struct FResponse_SandboxGetAllRules;
struct FRequest_SandboxGetRule;
struct FResponse_SandboxGetRule;
struct FRequest_SandboxPatchRule;
struct FResponse_SandboxPatchRule;
struct FRequest_SandboxPutRule;
struct FResponse_SandboxPutRule;

DECLARE_DELEGATE_OneParam(FDelegate_OrgProductSandboxCreateRule, const FResponse_OrgProductSandboxCreateRule&);
DECLARE_DELEGATE_OneParam(FDelegate_OrgProductSandboxDeleteRule, const FResponse_OrgProductSandboxDeleteRule&);
DECLARE_DELEGATE_OneParam(FDelegate_OrgProductSandboxGetAllRules, const FResponse_OrgProductSandboxGetAllRules&);
DECLARE_DELEGATE_OneParam(FDelegate_OrgProductSandboxGetRule, const FResponse_OrgProductSandboxGetRule&);
DECLARE_DELEGATE_OneParam(FDelegate_OrgProductSandboxPatchRule, const FResponse_OrgProductSandboxPatchRule&);
DECLARE_DELEGATE_OneParam(FDelegate_OrgProductSandboxPutRule, const FResponse_OrgProductSandboxPutRule&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxCreateRule, const FResponse_SandboxCreateRule&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxDeleteRule, const FResponse_SandboxDeleteRule&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetAllRules, const FResponse_SandboxGetAllRules&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetRule, const FResponse_SandboxGetRule&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxPatchRule, const FResponse_SandboxPatchRule&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxPutRule, const FResponse_SandboxPutRule&);

class RALLYHEREDEVELOPERAPI_API FMatchMakingRulesAPI : public FAPI
{
public:
    FMatchMakingRulesAPI();
    virtual ~FMatchMakingRulesAPI();

    FHttpRequestPtr OrgProductSandboxCreateRule(const FRequest_OrgProductSandboxCreateRule& Request, const FDelegate_OrgProductSandboxCreateRule& Delegate = FDelegate_OrgProductSandboxCreateRule(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr OrgProductSandboxDeleteRule(const FRequest_OrgProductSandboxDeleteRule& Request, const FDelegate_OrgProductSandboxDeleteRule& Delegate = FDelegate_OrgProductSandboxDeleteRule(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr OrgProductSandboxGetAllRules(const FRequest_OrgProductSandboxGetAllRules& Request, const FDelegate_OrgProductSandboxGetAllRules& Delegate = FDelegate_OrgProductSandboxGetAllRules(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr OrgProductSandboxGetRule(const FRequest_OrgProductSandboxGetRule& Request, const FDelegate_OrgProductSandboxGetRule& Delegate = FDelegate_OrgProductSandboxGetRule(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr OrgProductSandboxPatchRule(const FRequest_OrgProductSandboxPatchRule& Request, const FDelegate_OrgProductSandboxPatchRule& Delegate = FDelegate_OrgProductSandboxPatchRule(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr OrgProductSandboxPutRule(const FRequest_OrgProductSandboxPutRule& Request, const FDelegate_OrgProductSandboxPutRule& Delegate = FDelegate_OrgProductSandboxPutRule(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxCreateRule(const FRequest_SandboxCreateRule& Request, const FDelegate_SandboxCreateRule& Delegate = FDelegate_SandboxCreateRule(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxDeleteRule(const FRequest_SandboxDeleteRule& Request, const FDelegate_SandboxDeleteRule& Delegate = FDelegate_SandboxDeleteRule(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetAllRules(const FRequest_SandboxGetAllRules& Request, const FDelegate_SandboxGetAllRules& Delegate = FDelegate_SandboxGetAllRules(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetRule(const FRequest_SandboxGetRule& Request, const FDelegate_SandboxGetRule& Delegate = FDelegate_SandboxGetRule(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxPatchRule(const FRequest_SandboxPatchRule& Request, const FDelegate_SandboxPatchRule& Delegate = FDelegate_SandboxPatchRule(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxPutRule(const FRequest_SandboxPutRule& Request, const FDelegate_SandboxPutRule& Delegate = FDelegate_SandboxPutRule(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);

private:
    void OnOrgProductSandboxCreateRuleResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_OrgProductSandboxCreateRule Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnOrgProductSandboxDeleteRuleResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_OrgProductSandboxDeleteRule Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnOrgProductSandboxGetAllRulesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_OrgProductSandboxGetAllRules Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnOrgProductSandboxGetRuleResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_OrgProductSandboxGetRule Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnOrgProductSandboxPatchRuleResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_OrgProductSandboxPatchRule Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnOrgProductSandboxPutRuleResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_OrgProductSandboxPutRule Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxCreateRuleResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxCreateRule Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxDeleteRuleResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxDeleteRule Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetAllRulesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetAllRules Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetRuleResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetRule Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxPatchRuleResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxPatchRule Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxPutRuleResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxPutRule Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};

/* Create Rule
 *
 * Create a new MatchMakingRule in a sandbox  Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_OrgProductSandboxCreateRule : public FRequest
{
    FRequest_OrgProductSandboxCreateRule();
    virtual ~FRequest_OrgProductSandboxCreateRule() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    /* Product ID or short name */
    TVariant<FGuid, FString> ProductIdentifier;
    /* Sandbox ID or short name */
    TVariant<FGuid, FString> SandboxIdentifier;
    FRHAPI_DevMatchMakingRuleRequest MatchMakingRuleRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_OrgProductSandboxCreateRule : public FResponse
{
    FResponse_OrgProductSandboxCreateRule(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_OrgProductSandboxCreateRule() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMatchMakingRule Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_OrgProductSandboxCreateRule
{
    typedef FRequest_OrgProductSandboxCreateRule Request;
    typedef FResponse_OrgProductSandboxCreateRule Response;
    typedef FDelegate_OrgProductSandboxCreateRule Delegate;
    typedef FMatchMakingRulesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.OrgProductSandboxCreateRule(InRequest, InDelegate, Priority); }
};

/* Delete Rule
 *
 * Update an existing MatchMakingRule in a sandbox  Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_OrgProductSandboxDeleteRule : public FRequest
{
    FRequest_OrgProductSandboxDeleteRule();
    virtual ~FRequest_OrgProductSandboxDeleteRule() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid MatchMakingRuleId;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    /* Product ID or short name */
    TVariant<FGuid, FString> ProductIdentifier;
    /* Sandbox ID or short name */
    TVariant<FGuid, FString> SandboxIdentifier;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_OrgProductSandboxDeleteRule : public FResponse
{
    FResponse_OrgProductSandboxDeleteRule(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_OrgProductSandboxDeleteRule() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;



};

struct RALLYHEREDEVELOPERAPI_API Traits_OrgProductSandboxDeleteRule
{
    typedef FRequest_OrgProductSandboxDeleteRule Request;
    typedef FResponse_OrgProductSandboxDeleteRule Response;
    typedef FDelegate_OrgProductSandboxDeleteRule Delegate;
    typedef FMatchMakingRulesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.OrgProductSandboxDeleteRule(InRequest, InDelegate, Priority); }
};

/* Get All Rules
 *
 * Get all MatchMakingRules in a sandbox  Requires any of permissions:    sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_OrgProductSandboxGetAllRules : public FRequest
{
    FRequest_OrgProductSandboxGetAllRules();
    virtual ~FRequest_OrgProductSandboxGetAllRules() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    /* Product ID or short name */
    TVariant<FGuid, FString> ProductIdentifier;
    /* Sandbox ID or short name */
    TVariant<FGuid, FString> SandboxIdentifier;
    /* The maximum number of elements to be returned per call */
    TOptional<int32> PageSize;
    /* Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration */
    TOptional<FString> Cursor;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_OrgProductSandboxGetAllRules : public FResponse
{
    FResponse_OrgProductSandboxGetAllRules(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_OrgProductSandboxGetAllRules() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevAllMatchMakingRulesResponse Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_OrgProductSandboxGetAllRules
{
    typedef FRequest_OrgProductSandboxGetAllRules Request;
    typedef FResponse_OrgProductSandboxGetAllRules Response;
    typedef FDelegate_OrgProductSandboxGetAllRules Delegate;
    typedef FMatchMakingRulesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.OrgProductSandboxGetAllRules(InRequest, InDelegate, Priority); }
};

/* Get Rule
 *
 * Get specific MatchMakingRule in a sandbox  Requires any of permissions:    sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_OrgProductSandboxGetRule : public FRequest
{
    FRequest_OrgProductSandboxGetRule();
    virtual ~FRequest_OrgProductSandboxGetRule() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid MatchMakingRuleId;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    /* Product ID or short name */
    TVariant<FGuid, FString> ProductIdentifier;
    /* Sandbox ID or short name */
    TVariant<FGuid, FString> SandboxIdentifier;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_OrgProductSandboxGetRule : public FResponse
{
    FResponse_OrgProductSandboxGetRule(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_OrgProductSandboxGetRule() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMatchMakingRule Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_OrgProductSandboxGetRule
{
    typedef FRequest_OrgProductSandboxGetRule Request;
    typedef FResponse_OrgProductSandboxGetRule Response;
    typedef FDelegate_OrgProductSandboxGetRule Delegate;
    typedef FMatchMakingRulesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.OrgProductSandboxGetRule(InRequest, InDelegate, Priority); }
};

/* Patch Rule
 *
 * Update an existing MatchMakingRule in a sandbox  Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_OrgProductSandboxPatchRule : public FRequest
{
    FRequest_OrgProductSandboxPatchRule();
    virtual ~FRequest_OrgProductSandboxPatchRule() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid MatchMakingRuleId;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    /* Product ID or short name */
    TVariant<FGuid, FString> ProductIdentifier;
    /* Sandbox ID or short name */
    TVariant<FGuid, FString> SandboxIdentifier;
    FRHAPI_DevMatchMakingRuleUpdateRequest MatchMakingRuleUpdateRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_OrgProductSandboxPatchRule : public FResponse
{
    FResponse_OrgProductSandboxPatchRule(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_OrgProductSandboxPatchRule() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMatchMakingRule Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_OrgProductSandboxPatchRule
{
    typedef FRequest_OrgProductSandboxPatchRule Request;
    typedef FResponse_OrgProductSandboxPatchRule Response;
    typedef FDelegate_OrgProductSandboxPatchRule Delegate;
    typedef FMatchMakingRulesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.OrgProductSandboxPatchRule(InRequest, InDelegate, Priority); }
};

/* Put Rule
 *
 * Update an existing MatchMakingRule in a sandbox  Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_OrgProductSandboxPutRule : public FRequest
{
    FRequest_OrgProductSandboxPutRule();
    virtual ~FRequest_OrgProductSandboxPutRule() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid MatchMakingRuleId;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    /* Product ID or short name */
    TVariant<FGuid, FString> ProductIdentifier;
    /* Sandbox ID or short name */
    TVariant<FGuid, FString> SandboxIdentifier;
    FRHAPI_DevMatchMakingRuleRequest MatchMakingRuleRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_OrgProductSandboxPutRule : public FResponse
{
    FResponse_OrgProductSandboxPutRule(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_OrgProductSandboxPutRule() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMatchMakingRule Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_OrgProductSandboxPutRule
{
    typedef FRequest_OrgProductSandboxPutRule Request;
    typedef FResponse_OrgProductSandboxPutRule Response;
    typedef FDelegate_OrgProductSandboxPutRule Delegate;
    typedef FMatchMakingRulesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.OrgProductSandboxPutRule(InRequest, InDelegate, Priority); }
};

/* Create Rule
 *
 * Create a new MatchMakingRule in a sandbox  Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxCreateRule : public FRequest
{
    FRequest_SandboxCreateRule();
    virtual ~FRequest_SandboxCreateRule() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevMatchMakingRuleRequest MatchMakingRuleRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxCreateRule : public FResponse
{
    FResponse_SandboxCreateRule(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxCreateRule() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMatchMakingRule Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxCreateRule
{
    typedef FRequest_SandboxCreateRule Request;
    typedef FResponse_SandboxCreateRule Response;
    typedef FDelegate_SandboxCreateRule Delegate;
    typedef FMatchMakingRulesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxCreateRule(InRequest, InDelegate, Priority); }
};

/* Delete Rule
 *
 * Update an existing MatchMakingRule in a sandbox  Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxDeleteRule : public FRequest
{
    FRequest_SandboxDeleteRule();
    virtual ~FRequest_SandboxDeleteRule() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid MatchMakingRuleId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxDeleteRule : public FResponse
{
    FResponse_SandboxDeleteRule(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxDeleteRule() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;



};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxDeleteRule
{
    typedef FRequest_SandboxDeleteRule Request;
    typedef FResponse_SandboxDeleteRule Response;
    typedef FDelegate_SandboxDeleteRule Delegate;
    typedef FMatchMakingRulesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxDeleteRule(InRequest, InDelegate, Priority); }
};

/* Get All Rules
 *
 * Get all MatchMakingRules in a sandbox  Requires any of permissions:    sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetAllRules : public FRequest
{
    FRequest_SandboxGetAllRules();
    virtual ~FRequest_SandboxGetAllRules() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    /* The maximum number of elements to be returned per call */
    TOptional<int32> PageSize;
    /* Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration */
    TOptional<FString> Cursor;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetAllRules : public FResponse
{
    FResponse_SandboxGetAllRules(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetAllRules() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevAllMatchMakingRulesResponse Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetAllRules
{
    typedef FRequest_SandboxGetAllRules Request;
    typedef FResponse_SandboxGetAllRules Response;
    typedef FDelegate_SandboxGetAllRules Delegate;
    typedef FMatchMakingRulesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetAllRules(InRequest, InDelegate, Priority); }
};

/* Get Rule
 *
 * Get specific MatchMakingRule in a sandbox  Requires any of permissions:    sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetRule : public FRequest
{
    FRequest_SandboxGetRule();
    virtual ~FRequest_SandboxGetRule() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid MatchMakingRuleId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetRule : public FResponse
{
    FResponse_SandboxGetRule(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetRule() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMatchMakingRule Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetRule
{
    typedef FRequest_SandboxGetRule Request;
    typedef FResponse_SandboxGetRule Response;
    typedef FDelegate_SandboxGetRule Delegate;
    typedef FMatchMakingRulesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetRule(InRequest, InDelegate, Priority); }
};

/* Patch Rule
 *
 * Update an existing MatchMakingRule in a sandbox  Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxPatchRule : public FRequest
{
    FRequest_SandboxPatchRule();
    virtual ~FRequest_SandboxPatchRule() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid MatchMakingRuleId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevMatchMakingRuleUpdateRequest MatchMakingRuleUpdateRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxPatchRule : public FResponse
{
    FResponse_SandboxPatchRule(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxPatchRule() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMatchMakingRule Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxPatchRule
{
    typedef FRequest_SandboxPatchRule Request;
    typedef FResponse_SandboxPatchRule Response;
    typedef FDelegate_SandboxPatchRule Delegate;
    typedef FMatchMakingRulesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxPatchRule(InRequest, InDelegate, Priority); }
};

/* Put Rule
 *
 * Update an existing MatchMakingRule in a sandbox  Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxPutRule : public FRequest
{
    FRequest_SandboxPutRule();
    virtual ~FRequest_SandboxPutRule() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid MatchMakingRuleId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevMatchMakingRuleRequest MatchMakingRuleRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxPutRule : public FResponse
{
    FResponse_SandboxPutRule(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxPutRule() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMatchMakingRule Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxPutRule
{
    typedef FRequest_SandboxPutRule Request;
    typedef FResponse_SandboxPutRule Response;
    typedef FDelegate_SandboxPutRule Delegate;
    typedef FMatchMakingRulesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxPutRule(InRequest, InDelegate, Priority); }
};


}
