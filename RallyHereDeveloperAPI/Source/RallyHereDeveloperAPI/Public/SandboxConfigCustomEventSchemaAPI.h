// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereDeveloperAPIAuthContext.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevAllEventParamsSchemas.h"
#include "DevEventParamsSchema.h"
#include "DevEventParamsSchemaUpdateRequest.h"
#include "DevHTTPValidationError.h"

namespace RallyHereDeveloperAPI
{
using RallyHereDeveloperAPI::ToStringFormatArg;
using RallyHereDeveloperAPI::WriteJsonValue;
using RallyHereDeveloperAPI::TryGetJsonValue;

struct FRequest_SandboxCreateEventParamsSchema;
struct FResponse_SandboxCreateEventParamsSchema;
struct FRequest_SandboxDeleteEventParamsSchema;
struct FResponse_SandboxDeleteEventParamsSchema;
struct FRequest_SandboxGetEventParamsSchemaForSandbox;
struct FResponse_SandboxGetEventParamsSchemaForSandbox;
struct FRequest_SandboxGetEventParamsSchemaForSandbox1;
struct FResponse_SandboxGetEventParamsSchemaForSandbox1;
struct FRequest_SandboxUpdateEventParamsSchema;
struct FResponse_SandboxUpdateEventParamsSchema;

DECLARE_DELEGATE_OneParam(FDelegate_SandboxCreateEventParamsSchema, const FResponse_SandboxCreateEventParamsSchema&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxDeleteEventParamsSchema, const FResponse_SandboxDeleteEventParamsSchema&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetEventParamsSchemaForSandbox, const FResponse_SandboxGetEventParamsSchemaForSandbox&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetEventParamsSchemaForSandbox1, const FResponse_SandboxGetEventParamsSchemaForSandbox1&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxUpdateEventParamsSchema, const FResponse_SandboxUpdateEventParamsSchema&);

class RALLYHEREDEVELOPERAPI_API FSandboxConfigCustomEventSchemaAPI : public FAPI
{
public:
    FSandboxConfigCustomEventSchemaAPI();
    virtual ~FSandboxConfigCustomEventSchemaAPI();

    FHttpRequestPtr SandboxCreateEventParamsSchema(const FRequest_SandboxCreateEventParamsSchema& Request, const FDelegate_SandboxCreateEventParamsSchema& Delegate = FDelegate_SandboxCreateEventParamsSchema(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxDeleteEventParamsSchema(const FRequest_SandboxDeleteEventParamsSchema& Request, const FDelegate_SandboxDeleteEventParamsSchema& Delegate = FDelegate_SandboxDeleteEventParamsSchema(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetEventParamsSchemaForSandbox(const FRequest_SandboxGetEventParamsSchemaForSandbox& Request, const FDelegate_SandboxGetEventParamsSchemaForSandbox& Delegate = FDelegate_SandboxGetEventParamsSchemaForSandbox(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetEventParamsSchemaForSandbox1(const FRequest_SandboxGetEventParamsSchemaForSandbox1& Request, const FDelegate_SandboxGetEventParamsSchemaForSandbox1& Delegate = FDelegate_SandboxGetEventParamsSchemaForSandbox1(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxUpdateEventParamsSchema(const FRequest_SandboxUpdateEventParamsSchema& Request, const FDelegate_SandboxUpdateEventParamsSchema& Delegate = FDelegate_SandboxUpdateEventParamsSchema(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);

private:
    void OnSandboxCreateEventParamsSchemaResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxCreateEventParamsSchema Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxDeleteEventParamsSchemaResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxDeleteEventParamsSchema Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetEventParamsSchemaForSandboxResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetEventParamsSchemaForSandbox Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetEventParamsSchemaForSandbox1Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetEventParamsSchemaForSandbox1 Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxUpdateEventParamsSchemaResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxUpdateEventParamsSchema Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};

/* Create Event Params Schema
 *
 * Create Custom Event Schema requires sandbox:config:edit permission
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxCreateEventParamsSchema : public FRequest
{
    FRequest_SandboxCreateEventParamsSchema();
    virtual ~FRequest_SandboxCreateEventParamsSchema() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevEventParamsSchemaUpdateRequest EventParamsSchemaUpdateRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxCreateEventParamsSchema : public FResponse
{
    FResponse_SandboxCreateEventParamsSchema(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxCreateEventParamsSchema() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevEventParamsSchema Content;


    // Manual Response Helpers
    /* Response 201
    Successful Response
    */
    bool TryGetContentFor201(FRHAPI_DevEventParamsSchema& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxCreateEventParamsSchema
{
    typedef FRequest_SandboxCreateEventParamsSchema Request;
    typedef FResponse_SandboxCreateEventParamsSchema Response;
    typedef FDelegate_SandboxCreateEventParamsSchema Delegate;
    typedef FSandboxConfigCustomEventSchemaAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxCreateEventParamsSchema(InRequest, InDelegate, Priority); }
};

/* Delete Event Params Schema
 *
 * Delete Event Params Schema, requires sandbox:config:edit permission
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxDeleteEventParamsSchema : public FRequest
{
    FRequest_SandboxDeleteEventParamsSchema();
    virtual ~FRequest_SandboxDeleteEventParamsSchema() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Event Params Schema event_name */
    FString EventName;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxDeleteEventParamsSchema : public FResponse
{
    FResponse_SandboxDeleteEventParamsSchema(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxDeleteEventParamsSchema() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    bool Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(bool& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxDeleteEventParamsSchema
{
    typedef FRequest_SandboxDeleteEventParamsSchema Request;
    typedef FResponse_SandboxDeleteEventParamsSchema Response;
    typedef FDelegate_SandboxDeleteEventParamsSchema Delegate;
    typedef FSandboxConfigCustomEventSchemaAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxDeleteEventParamsSchema(InRequest, InDelegate, Priority); }
};

/* Get Event Params Schema For Sandbox
 *
 * Get All Event Params Schemas, requires sandbox:config:view permission
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetEventParamsSchemaForSandbox : public FRequest
{
    FRequest_SandboxGetEventParamsSchemaForSandbox();
    virtual ~FRequest_SandboxGetEventParamsSchemaForSandbox() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    /* The maximum number of elements to be returned per call */
    TOptional<int32> PageSize;
    /* Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration */
    TOptional<FString> Cursor;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetEventParamsSchemaForSandbox : public FResponse
{
    FResponse_SandboxGetEventParamsSchemaForSandbox(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetEventParamsSchemaForSandbox() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevAllEventParamsSchemas Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevAllEventParamsSchemas& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetEventParamsSchemaForSandbox
{
    typedef FRequest_SandboxGetEventParamsSchemaForSandbox Request;
    typedef FResponse_SandboxGetEventParamsSchemaForSandbox Response;
    typedef FDelegate_SandboxGetEventParamsSchemaForSandbox Delegate;
    typedef FSandboxConfigCustomEventSchemaAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetEventParamsSchemaForSandbox(InRequest, InDelegate, Priority); }
};

/* Get Event Params Schema For Sandbox
 *
 * Get Custom Event Params Schema definition by event_name, requires sandbox:config:view permission
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetEventParamsSchemaForSandbox1 : public FRequest
{
    FRequest_SandboxGetEventParamsSchemaForSandbox1();
    virtual ~FRequest_SandboxGetEventParamsSchemaForSandbox1() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Event Params Schema event name */
    FString EventName;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetEventParamsSchemaForSandbox1 : public FResponse
{
    FResponse_SandboxGetEventParamsSchemaForSandbox1(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetEventParamsSchemaForSandbox1() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevEventParamsSchema Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevEventParamsSchema& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetEventParamsSchemaForSandbox1
{
    typedef FRequest_SandboxGetEventParamsSchemaForSandbox1 Request;
    typedef FResponse_SandboxGetEventParamsSchemaForSandbox1 Response;
    typedef FDelegate_SandboxGetEventParamsSchemaForSandbox1 Delegate;
    typedef FSandboxConfigCustomEventSchemaAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetEventParamsSchemaForSandbox1(InRequest, InDelegate, Priority); }
};

/* Update Event Params Schema
 *
 * Update Custom Event Params Schema, requires sandbox:config:edit permission
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxUpdateEventParamsSchema : public FRequest
{
    FRequest_SandboxUpdateEventParamsSchema();
    virtual ~FRequest_SandboxUpdateEventParamsSchema() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Event params schema event_name */
    FString EventName;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevEventParamsSchemaUpdateRequest EventParamsSchemaUpdateRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxUpdateEventParamsSchema : public FResponse
{
    FResponse_SandboxUpdateEventParamsSchema(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxUpdateEventParamsSchema() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevEventParamsSchema Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevEventParamsSchema& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxUpdateEventParamsSchema
{
    typedef FRequest_SandboxUpdateEventParamsSchema Request;
    typedef FResponse_SandboxUpdateEventParamsSchema Response;
    typedef FDelegate_SandboxUpdateEventParamsSchema Delegate;
    typedef FSandboxConfigCustomEventSchemaAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxUpdateEventParamsSchema(InRequest, InDelegate, Priority); }
};


}
