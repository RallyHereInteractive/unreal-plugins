// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereDeveloperAPIBaseModel.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevMatchMakingTemplateGroupRequest.generated.h"

/** @defgroup RHAPI_DevMatchMakingTemplateGroupRequest RallyHere API Model DevMatchMakingTemplateGroupRequest
 *  @{
 */

/**
 * @brief 
 */
USTRUCT(BlueprintType)
struct RALLYHEREDEVELOPERAPI_API FRHAPI_DevMatchMakingTemplateGroupRequest : public FRHAPI_DevModel
{
    GENERATED_BODY()

    /**
    * @brief Fills this object with data from the passed in JSON
    *
    * @param [in] JsonValue Data from the API call.
    *
    * @return true if parsing of the JSON data was successful.
    */
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

    /**
    * @brief Writes the data from this object into the specified JSON Writer stream
    *
    * @param [in] Writer JSON Writer stream to push .
    */
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /** @brief Readable name to describe this ruleset */
    FString Name{  };
    /** @brief Gets the value of Name */
    FString& GetName() { return Name; }
    /** @brief Gets the value of Name */
    const FString& GetName() const { return Name; }
    /** @brief Sets the value of Name */
    void SetName(FString NewValue) { Name = NewValue;  }

    /** @brief ID to uniquely identify this MatchMakingTemplateGroup */
    FGuid MatchMakingTemplateGroupId_Optional{  };
    /** @brief true if MatchMakingTemplateGroupId_Optional has been set to a value */
    bool MatchMakingTemplateGroupId_IsSet{ false };
    /** @brief Gets the value of MatchMakingTemplateGroupId_Optional, regardless of it having been set */
    FGuid& GetMatchMakingTemplateGroupId() { return MatchMakingTemplateGroupId_Optional; }
    /** @brief Gets the value of MatchMakingTemplateGroupId_Optional, regardless of it having been set */
    const FGuid& GetMatchMakingTemplateGroupId() const { return MatchMakingTemplateGroupId_Optional; }
    /** @brief Gets the value of MatchMakingTemplateGroupId_Optional, if it has been set, otherwise it returns DefaultValue */
    const FGuid& GetMatchMakingTemplateGroupId(const FGuid& DefaultValue) const { if (MatchMakingTemplateGroupId_IsSet) return MatchMakingTemplateGroupId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of MatchMakingTemplateGroupId_Optional and returns true if it has been set, otherwise returns false */
    bool GetMatchMakingTemplateGroupId(FGuid& OutValue) const { if (MatchMakingTemplateGroupId_IsSet) OutValue = MatchMakingTemplateGroupId_Optional; return MatchMakingTemplateGroupId_IsSet; }
    /** @brief Returns a pointer to MatchMakingTemplateGroupId_Optional, if it has been set, otherwise returns nullptr */
    FGuid* GetMatchMakingTemplateGroupIdOrNull() { if (MatchMakingTemplateGroupId_IsSet) return &MatchMakingTemplateGroupId_Optional; return nullptr; }
    /** @brief Returns a pointer to MatchMakingTemplateGroupId_Optional, if it has been set, otherwise returns nullptr */
    const FGuid* GetMatchMakingTemplateGroupIdOrNull() const { if (MatchMakingTemplateGroupId_IsSet) return &MatchMakingTemplateGroupId_Optional; return nullptr; }
    /** @brief Sets the value of MatchMakingTemplateGroupId_Optional and also sets MatchMakingTemplateGroupId_IsSet to true */
    void SetMatchMakingTemplateGroupId(FGuid NewValue) { MatchMakingTemplateGroupId_Optional = NewValue; MatchMakingTemplateGroupId_IsSet = true; }
     /** @brief Clears the value of MatchMakingTemplateGroupId_Optional and sets MatchMakingTemplateGroupId_IsSet to false */
    void ClearMatchMakingTemplateGroupId() { MatchMakingTemplateGroupId_IsSet = false; }
};

/** @} */
