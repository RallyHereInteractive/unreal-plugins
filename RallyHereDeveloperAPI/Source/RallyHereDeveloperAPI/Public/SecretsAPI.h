// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereDeveloperAPIAuthContext.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevHTTPValidationError.h"

namespace RallyHereDeveloperAPI
{
using RallyHereDeveloperAPI::ToStringFormatArg;
using RallyHereDeveloperAPI::WriteJsonValue;
using RallyHereDeveloperAPI::TryGetJsonValue;

struct FRequest_UnwrapSecret;
struct FResponse_UnwrapSecret;
struct FRequest_WrapSecret;
struct FResponse_WrapSecret;

DECLARE_DELEGATE_OneParam(FDelegate_UnwrapSecret, const FResponse_UnwrapSecret&);
DECLARE_DELEGATE_OneParam(FDelegate_WrapSecret, const FResponse_WrapSecret&);

class RALLYHEREDEVELOPERAPI_API FSecretsAPI : public FAPI
{
public:
    FSecretsAPI();
    virtual ~FSecretsAPI();

    FHttpRequestPtr UnwrapSecret(const FRequest_UnwrapSecret& Request, const FDelegate_UnwrapSecret& Delegate = FDelegate_UnwrapSecret(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr WrapSecret(const FRequest_WrapSecret& Request, const FDelegate_WrapSecret& Delegate = FDelegate_WrapSecret(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);

private:
    void OnUnwrapSecretResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UnwrapSecret Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnWrapSecretResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_WrapSecret Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};

/* Unwrap Secret
 *
 * This endpoint will contact vault to unwrap the provided token.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_UnwrapSecret : public FRequest
{
    FRequest_UnwrapSecret();
    virtual ~FRequest_UnwrapSecret() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Token to unwrap */
    FString Token;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_UnwrapSecret : public FResponse
{
    FResponse_UnwrapSecret(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_UnwrapSecret() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevJsonValue Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevJsonValue& OutContent) const;

    /* Response 404
    Not Found
    */

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_UnwrapSecret
{
    typedef FRequest_UnwrapSecret Request;
    typedef FResponse_UnwrapSecret Response;
    typedef FDelegate_UnwrapSecret Delegate;
    typedef FSecretsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.UnwrapSecret(InRequest, InDelegate, Priority); }
};

/* Wrap Secret
 *
 * Wraps any JSON object or string in a vault token and returns the token to be handed to someone to unwrap securely.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_WrapSecret : public FRequest
{
    FRequest_WrapSecret();
    virtual ~FRequest_WrapSecret() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FRHAPI_DevJsonValue Body;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_WrapSecret : public FResponse
{
    FResponse_WrapSecret(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_WrapSecret() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevJsonValue Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevJsonValue& OutContent) const;

    /* Response 404
    Not Found
    */

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_WrapSecret
{
    typedef FRequest_WrapSecret Request;
    typedef FResponse_WrapSecret Response;
    typedef FDelegate_WrapSecret Delegate;
    typedef FSecretsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.WrapSecret(InRequest, InDelegate, Priority); }
};


}
