// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereDeveloperAPIAuthContext.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevAccountOrganization.h"
#include "DevAccountOrganizationAccount.h"
#include "DevAccountOrganizationAccountInfo.h"
#include "DevAccountOrganizationCreateRequest.h"
#include "DevHTTPValidationError.h"
#include "Misc/TVariant.h"

namespace RallyHereDeveloperAPI
{
using RallyHereDeveloperAPI::ToStringFormatArg;
using RallyHereDeveloperAPI::WriteJsonValue;
using RallyHereDeveloperAPI::TryGetJsonValue;

struct FRequest_CreateAccountForOrg;
struct FResponse_CreateAccountForOrg;
struct FRequest_DeleteAccountFromOrgApi;
struct FResponse_DeleteAccountFromOrgApi;
struct FRequest_GetAccountForOrg;
struct FResponse_GetAccountForOrg;
struct FRequest_GetAllAccountsInOrg;
struct FResponse_GetAllAccountsInOrg;
struct FRequest_GetOrgsForAccounts;
struct FResponse_GetOrgsForAccounts;

DECLARE_DELEGATE_OneParam(FDelegate_CreateAccountForOrg, const FResponse_CreateAccountForOrg&);
DECLARE_DELEGATE_OneParam(FDelegate_DeleteAccountFromOrgApi, const FResponse_DeleteAccountFromOrgApi&);
DECLARE_DELEGATE_OneParam(FDelegate_GetAccountForOrg, const FResponse_GetAccountForOrg&);
DECLARE_DELEGATE_OneParam(FDelegate_GetAllAccountsInOrg, const FResponse_GetAllAccountsInOrg&);
DECLARE_DELEGATE_OneParam(FDelegate_GetOrgsForAccounts, const FResponse_GetOrgsForAccounts&);

class RALLYHEREDEVELOPERAPI_API FOrganizationAccountAPI : public FAPI
{
public:
    FOrganizationAccountAPI();
    virtual ~FOrganizationAccountAPI();

    FHttpRequestPtr CreateAccountForOrg(const FRequest_CreateAccountForOrg& Request, const FDelegate_CreateAccountForOrg& Delegate = FDelegate_CreateAccountForOrg(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr DeleteAccountFromOrgApi(const FRequest_DeleteAccountFromOrgApi& Request, const FDelegate_DeleteAccountFromOrgApi& Delegate = FDelegate_DeleteAccountFromOrgApi(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr GetAccountForOrg(const FRequest_GetAccountForOrg& Request, const FDelegate_GetAccountForOrg& Delegate = FDelegate_GetAccountForOrg(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr GetAllAccountsInOrg(const FRequest_GetAllAccountsInOrg& Request, const FDelegate_GetAllAccountsInOrg& Delegate = FDelegate_GetAllAccountsInOrg(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr GetOrgsForAccounts(const FRequest_GetOrgsForAccounts& Request, const FDelegate_GetOrgsForAccounts& Delegate = FDelegate_GetOrgsForAccounts(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);

private:
    void OnCreateAccountForOrgResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_CreateAccountForOrg Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnDeleteAccountFromOrgApiResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_DeleteAccountFromOrgApi Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetAccountForOrgResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAccountForOrg Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetAllAccountsInOrgResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAllAccountsInOrg Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetOrgsForAccountsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetOrgsForAccounts Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};

/* Create Account For Org
 *
 * Create an Account if it does not exists and assign Account to Organization. If an existing account is found (matched by email) then the existing first, last, and nicknames will be used and values provided will be ignored. To update first, last, and nickname fields use the Account update API.This API requires accountOrg:config:edit permissions for the Organization.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_CreateAccountForOrg : public FRequest
{
    FRequest_CreateAccountForOrg();
    virtual ~FRequest_CreateAccountForOrg() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    FRHAPI_DevAccountOrganizationCreateRequest AccountOrganizationCreateRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_CreateAccountForOrg : public FResponse
{
    FResponse_CreateAccountForOrg(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_CreateAccountForOrg() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevAccountOrganization Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevAccountOrganization& OutContent) const;

    /* Response 400
    Bad Request
    */

    /* Response 409
    Conflict
    */

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_CreateAccountForOrg
{
    typedef FRequest_CreateAccountForOrg Request;
    typedef FResponse_CreateAccountForOrg Response;
    typedef FDelegate_CreateAccountForOrg Delegate;
    typedef FOrganizationAccountAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.CreateAccountForOrg(InRequest, InDelegate, Priority); }
};

/* Delete Account From Org Api
 *
 * Delete an Account Organization assignment, requires accountOrg:config:edit permissions
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_DeleteAccountFromOrgApi : public FRequest
{
    FRequest_DeleteAccountFromOrgApi();
    virtual ~FRequest_DeleteAccountFromOrgApi() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    /* Account ID */
    TVariant<FGuid, FString> AccountIdentifier;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_DeleteAccountFromOrgApi : public FResponse
{
    FResponse_DeleteAccountFromOrgApi(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_DeleteAccountFromOrgApi() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevJsonValue Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevJsonValue& OutContent) const;

    /* Response 400
    Bad Request
    */

    /* Response 404
    Not Found
    */

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_DeleteAccountFromOrgApi
{
    typedef FRequest_DeleteAccountFromOrgApi Request;
    typedef FResponse_DeleteAccountFromOrgApi Response;
    typedef FDelegate_DeleteAccountFromOrgApi Delegate;
    typedef FOrganizationAccountAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.DeleteAccountFromOrgApi(InRequest, InDelegate, Priority); }
};

/* Get Account For Org
 *
 * Get account details by account ID for Organization,requires accountOrg:config:view | accountOrg:config:edit permissions
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_GetAccountForOrg : public FRequest
{
    FRequest_GetAccountForOrg();
    virtual ~FRequest_GetAccountForOrg() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    /* Account ID */
    TVariant<FGuid, FString> AccountIdentifier;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_GetAccountForOrg : public FResponse
{
    FResponse_GetAccountForOrg(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetAccountForOrg() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevAccountOrganizationAccount Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevAccountOrganizationAccount& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_GetAccountForOrg
{
    typedef FRequest_GetAccountForOrg Request;
    typedef FResponse_GetAccountForOrg Response;
    typedef FDelegate_GetAccountForOrg Delegate;
    typedef FOrganizationAccountAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.GetAccountForOrg(InRequest, InDelegate, Priority); }
};

/* Get All Accounts In Org
 *
 * Get all Accounts in an Organization, requires accountOrg:config:view | accountOrg:config:edit permissions
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_GetAllAccountsInOrg : public FRequest
{
    FRequest_GetAllAccountsInOrg();
    virtual ~FRequest_GetAllAccountsInOrg() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_GetAllAccountsInOrg : public FResponse
{
    FResponse_GetAllAccountsInOrg(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetAllAccountsInOrg() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    TArray<FRHAPI_DevAccountOrganizationAccountInfo> Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(TArray<FRHAPI_DevAccountOrganizationAccountInfo>& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_GetAllAccountsInOrg
{
    typedef FRequest_GetAllAccountsInOrg Request;
    typedef FResponse_GetAllAccountsInOrg Response;
    typedef FDelegate_GetAllAccountsInOrg Delegate;
    typedef FOrganizationAccountAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.GetAllAccountsInOrg(InRequest, InDelegate, Priority); }
};

/* Get Orgs For Accounts
 *
 * Get all Organizations for an Account, requires globalAdmin:*:* permissions
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_GetOrgsForAccounts : public FRequest
{
    FRequest_GetOrgsForAccounts();
    virtual ~FRequest_GetOrgsForAccounts() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Account Identifier */
    TVariant<FGuid, FString> AccountIdentifier;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_GetOrgsForAccounts : public FResponse
{
    FResponse_GetOrgsForAccounts(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetOrgsForAccounts() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    TArray<FRHAPI_DevAccountOrganization> Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(TArray<FRHAPI_DevAccountOrganization>& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_GetOrgsForAccounts
{
    typedef FRequest_GetOrgsForAccounts Request;
    typedef FResponse_GetOrgsForAccounts Response;
    typedef FDelegate_GetOrgsForAccounts Delegate;
    typedef FOrganizationAccountAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.GetOrgsForAccounts(InRequest, InDelegate, Priority); }
};


}
