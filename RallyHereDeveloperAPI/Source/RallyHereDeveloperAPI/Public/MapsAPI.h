// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereDeveloperAPIAuthContext.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevAllMapSelectionListEntriesResponse.h"
#include "DevAllMapSelectionListsResponse.h"
#include "DevAllMapsResponse.h"
#include "DevHTTPValidationError.h"
#include "DevMap.h"
#include "DevMapRequest.h"
#include "DevMapSelectionList.h"
#include "DevMapSelectionListEntry.h"
#include "DevMapSelectionListEntryRequest.h"
#include "DevMapSelectionListEntryUpdateRequest.h"
#include "DevMapSelectionListRequest.h"
#include "DevMapSelectionListUpdateRequest.h"
#include "DevMapUpdateRequest.h"
#include "Misc/TVariant.h"

namespace RallyHereDeveloperAPI
{
using RallyHereDeveloperAPI::ToStringFormatArg;
using RallyHereDeveloperAPI::WriteJsonValue;
using RallyHereDeveloperAPI::TryGetJsonValue;

struct FRequest_OrgProductSandboxCreateMap;
struct FResponse_OrgProductSandboxCreateMap;
struct FRequest_OrgProductSandboxCreateMapSelectionListEntry;
struct FResponse_OrgProductSandboxCreateMapSelectionListEntry;
struct FRequest_OrgProductSandboxCreateSelectionList;
struct FResponse_OrgProductSandboxCreateSelectionList;
struct FRequest_OrgProductSandboxDeleteMap;
struct FResponse_OrgProductSandboxDeleteMap;
struct FRequest_OrgProductSandboxDeleteMapSelectionList;
struct FResponse_OrgProductSandboxDeleteMapSelectionList;
struct FRequest_OrgProductSandboxDeleteMapSelectionListEntry;
struct FResponse_OrgProductSandboxDeleteMapSelectionListEntry;
struct FRequest_OrgProductSandboxGetAllMapSelectionListEntriesForMapSelectionList;
struct FResponse_OrgProductSandboxGetAllMapSelectionListEntriesForMapSelectionList;
struct FRequest_OrgProductSandboxGetAllMapSelectionLists;
struct FResponse_OrgProductSandboxGetAllMapSelectionLists;
struct FRequest_OrgProductSandboxGetAllMaps;
struct FResponse_OrgProductSandboxGetAllMaps;
struct FRequest_OrgProductSandboxGetMap;
struct FResponse_OrgProductSandboxGetMap;
struct FRequest_OrgProductSandboxGetMapSelectionList;
struct FResponse_OrgProductSandboxGetMapSelectionList;
struct FRequest_OrgProductSandboxGetMapSelectionListEntry;
struct FResponse_OrgProductSandboxGetMapSelectionListEntry;
struct FRequest_OrgProductSandboxPatchMap;
struct FResponse_OrgProductSandboxPatchMap;
struct FRequest_OrgProductSandboxPatchSelectionList;
struct FResponse_OrgProductSandboxPatchSelectionList;
struct FRequest_OrgProductSandboxPatchSelectionListEntry;
struct FResponse_OrgProductSandboxPatchSelectionListEntry;
struct FRequest_OrgProductSandboxPutMap;
struct FResponse_OrgProductSandboxPutMap;
struct FRequest_OrgProductSandboxPutSelectionList;
struct FResponse_OrgProductSandboxPutSelectionList;
struct FRequest_OrgProductSandboxPutSelectionListEntry;
struct FResponse_OrgProductSandboxPutSelectionListEntry;
struct FRequest_SandboxCreateMap;
struct FResponse_SandboxCreateMap;
struct FRequest_SandboxCreateMapSelectionListEntry;
struct FResponse_SandboxCreateMapSelectionListEntry;
struct FRequest_SandboxCreateSelectionList;
struct FResponse_SandboxCreateSelectionList;
struct FRequest_SandboxDeleteMap;
struct FResponse_SandboxDeleteMap;
struct FRequest_SandboxDeleteMapSelectionList;
struct FResponse_SandboxDeleteMapSelectionList;
struct FRequest_SandboxDeleteMapSelectionListEntry;
struct FResponse_SandboxDeleteMapSelectionListEntry;
struct FRequest_SandboxGetAllMapSelectionListEntriesForMapSelectionList;
struct FResponse_SandboxGetAllMapSelectionListEntriesForMapSelectionList;
struct FRequest_SandboxGetAllMapSelectionLists;
struct FResponse_SandboxGetAllMapSelectionLists;
struct FRequest_SandboxGetAllMaps;
struct FResponse_SandboxGetAllMaps;
struct FRequest_SandboxGetMap;
struct FResponse_SandboxGetMap;
struct FRequest_SandboxGetMapSelectionList;
struct FResponse_SandboxGetMapSelectionList;
struct FRequest_SandboxGetMapSelectionListEntry;
struct FResponse_SandboxGetMapSelectionListEntry;
struct FRequest_SandboxPatchMap;
struct FResponse_SandboxPatchMap;
struct FRequest_SandboxPatchSelectionList;
struct FResponse_SandboxPatchSelectionList;
struct FRequest_SandboxPatchSelectionListEntry;
struct FResponse_SandboxPatchSelectionListEntry;
struct FRequest_SandboxPutMap;
struct FResponse_SandboxPutMap;
struct FRequest_SandboxPutSelectionList;
struct FResponse_SandboxPutSelectionList;
struct FRequest_SandboxPutSelectionListEntry;
struct FResponse_SandboxPutSelectionListEntry;

DECLARE_DELEGATE_OneParam(FDelegate_OrgProductSandboxCreateMap, const FResponse_OrgProductSandboxCreateMap&);
DECLARE_DELEGATE_OneParam(FDelegate_OrgProductSandboxCreateMapSelectionListEntry, const FResponse_OrgProductSandboxCreateMapSelectionListEntry&);
DECLARE_DELEGATE_OneParam(FDelegate_OrgProductSandboxCreateSelectionList, const FResponse_OrgProductSandboxCreateSelectionList&);
DECLARE_DELEGATE_OneParam(FDelegate_OrgProductSandboxDeleteMap, const FResponse_OrgProductSandboxDeleteMap&);
DECLARE_DELEGATE_OneParam(FDelegate_OrgProductSandboxDeleteMapSelectionList, const FResponse_OrgProductSandboxDeleteMapSelectionList&);
DECLARE_DELEGATE_OneParam(FDelegate_OrgProductSandboxDeleteMapSelectionListEntry, const FResponse_OrgProductSandboxDeleteMapSelectionListEntry&);
DECLARE_DELEGATE_OneParam(FDelegate_OrgProductSandboxGetAllMapSelectionListEntriesForMapSelectionList, const FResponse_OrgProductSandboxGetAllMapSelectionListEntriesForMapSelectionList&);
DECLARE_DELEGATE_OneParam(FDelegate_OrgProductSandboxGetAllMapSelectionLists, const FResponse_OrgProductSandboxGetAllMapSelectionLists&);
DECLARE_DELEGATE_OneParam(FDelegate_OrgProductSandboxGetAllMaps, const FResponse_OrgProductSandboxGetAllMaps&);
DECLARE_DELEGATE_OneParam(FDelegate_OrgProductSandboxGetMap, const FResponse_OrgProductSandboxGetMap&);
DECLARE_DELEGATE_OneParam(FDelegate_OrgProductSandboxGetMapSelectionList, const FResponse_OrgProductSandboxGetMapSelectionList&);
DECLARE_DELEGATE_OneParam(FDelegate_OrgProductSandboxGetMapSelectionListEntry, const FResponse_OrgProductSandboxGetMapSelectionListEntry&);
DECLARE_DELEGATE_OneParam(FDelegate_OrgProductSandboxPatchMap, const FResponse_OrgProductSandboxPatchMap&);
DECLARE_DELEGATE_OneParam(FDelegate_OrgProductSandboxPatchSelectionList, const FResponse_OrgProductSandboxPatchSelectionList&);
DECLARE_DELEGATE_OneParam(FDelegate_OrgProductSandboxPatchSelectionListEntry, const FResponse_OrgProductSandboxPatchSelectionListEntry&);
DECLARE_DELEGATE_OneParam(FDelegate_OrgProductSandboxPutMap, const FResponse_OrgProductSandboxPutMap&);
DECLARE_DELEGATE_OneParam(FDelegate_OrgProductSandboxPutSelectionList, const FResponse_OrgProductSandboxPutSelectionList&);
DECLARE_DELEGATE_OneParam(FDelegate_OrgProductSandboxPutSelectionListEntry, const FResponse_OrgProductSandboxPutSelectionListEntry&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxCreateMap, const FResponse_SandboxCreateMap&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxCreateMapSelectionListEntry, const FResponse_SandboxCreateMapSelectionListEntry&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxCreateSelectionList, const FResponse_SandboxCreateSelectionList&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxDeleteMap, const FResponse_SandboxDeleteMap&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxDeleteMapSelectionList, const FResponse_SandboxDeleteMapSelectionList&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxDeleteMapSelectionListEntry, const FResponse_SandboxDeleteMapSelectionListEntry&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetAllMapSelectionListEntriesForMapSelectionList, const FResponse_SandboxGetAllMapSelectionListEntriesForMapSelectionList&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetAllMapSelectionLists, const FResponse_SandboxGetAllMapSelectionLists&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetAllMaps, const FResponse_SandboxGetAllMaps&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetMap, const FResponse_SandboxGetMap&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetMapSelectionList, const FResponse_SandboxGetMapSelectionList&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetMapSelectionListEntry, const FResponse_SandboxGetMapSelectionListEntry&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxPatchMap, const FResponse_SandboxPatchMap&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxPatchSelectionList, const FResponse_SandboxPatchSelectionList&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxPatchSelectionListEntry, const FResponse_SandboxPatchSelectionListEntry&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxPutMap, const FResponse_SandboxPutMap&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxPutSelectionList, const FResponse_SandboxPutSelectionList&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxPutSelectionListEntry, const FResponse_SandboxPutSelectionListEntry&);

class RALLYHEREDEVELOPERAPI_API FMapsAPI : public FAPI
{
public:
    FMapsAPI();
    virtual ~FMapsAPI();

    FHttpRequestPtr OrgProductSandboxCreateMap(const FRequest_OrgProductSandboxCreateMap& Request, const FDelegate_OrgProductSandboxCreateMap& Delegate = FDelegate_OrgProductSandboxCreateMap(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr OrgProductSandboxCreateMapSelectionListEntry(const FRequest_OrgProductSandboxCreateMapSelectionListEntry& Request, const FDelegate_OrgProductSandboxCreateMapSelectionListEntry& Delegate = FDelegate_OrgProductSandboxCreateMapSelectionListEntry(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr OrgProductSandboxCreateSelectionList(const FRequest_OrgProductSandboxCreateSelectionList& Request, const FDelegate_OrgProductSandboxCreateSelectionList& Delegate = FDelegate_OrgProductSandboxCreateSelectionList(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr OrgProductSandboxDeleteMap(const FRequest_OrgProductSandboxDeleteMap& Request, const FDelegate_OrgProductSandboxDeleteMap& Delegate = FDelegate_OrgProductSandboxDeleteMap(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr OrgProductSandboxDeleteMapSelectionList(const FRequest_OrgProductSandboxDeleteMapSelectionList& Request, const FDelegate_OrgProductSandboxDeleteMapSelectionList& Delegate = FDelegate_OrgProductSandboxDeleteMapSelectionList(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr OrgProductSandboxDeleteMapSelectionListEntry(const FRequest_OrgProductSandboxDeleteMapSelectionListEntry& Request, const FDelegate_OrgProductSandboxDeleteMapSelectionListEntry& Delegate = FDelegate_OrgProductSandboxDeleteMapSelectionListEntry(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr OrgProductSandboxGetAllMapSelectionListEntriesForMapSelectionList(const FRequest_OrgProductSandboxGetAllMapSelectionListEntriesForMapSelectionList& Request, const FDelegate_OrgProductSandboxGetAllMapSelectionListEntriesForMapSelectionList& Delegate = FDelegate_OrgProductSandboxGetAllMapSelectionListEntriesForMapSelectionList(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr OrgProductSandboxGetAllMapSelectionLists(const FRequest_OrgProductSandboxGetAllMapSelectionLists& Request, const FDelegate_OrgProductSandboxGetAllMapSelectionLists& Delegate = FDelegate_OrgProductSandboxGetAllMapSelectionLists(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr OrgProductSandboxGetAllMaps(const FRequest_OrgProductSandboxGetAllMaps& Request, const FDelegate_OrgProductSandboxGetAllMaps& Delegate = FDelegate_OrgProductSandboxGetAllMaps(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr OrgProductSandboxGetMap(const FRequest_OrgProductSandboxGetMap& Request, const FDelegate_OrgProductSandboxGetMap& Delegate = FDelegate_OrgProductSandboxGetMap(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr OrgProductSandboxGetMapSelectionList(const FRequest_OrgProductSandboxGetMapSelectionList& Request, const FDelegate_OrgProductSandboxGetMapSelectionList& Delegate = FDelegate_OrgProductSandboxGetMapSelectionList(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr OrgProductSandboxGetMapSelectionListEntry(const FRequest_OrgProductSandboxGetMapSelectionListEntry& Request, const FDelegate_OrgProductSandboxGetMapSelectionListEntry& Delegate = FDelegate_OrgProductSandboxGetMapSelectionListEntry(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr OrgProductSandboxPatchMap(const FRequest_OrgProductSandboxPatchMap& Request, const FDelegate_OrgProductSandboxPatchMap& Delegate = FDelegate_OrgProductSandboxPatchMap(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr OrgProductSandboxPatchSelectionList(const FRequest_OrgProductSandboxPatchSelectionList& Request, const FDelegate_OrgProductSandboxPatchSelectionList& Delegate = FDelegate_OrgProductSandboxPatchSelectionList(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr OrgProductSandboxPatchSelectionListEntry(const FRequest_OrgProductSandboxPatchSelectionListEntry& Request, const FDelegate_OrgProductSandboxPatchSelectionListEntry& Delegate = FDelegate_OrgProductSandboxPatchSelectionListEntry(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr OrgProductSandboxPutMap(const FRequest_OrgProductSandboxPutMap& Request, const FDelegate_OrgProductSandboxPutMap& Delegate = FDelegate_OrgProductSandboxPutMap(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr OrgProductSandboxPutSelectionList(const FRequest_OrgProductSandboxPutSelectionList& Request, const FDelegate_OrgProductSandboxPutSelectionList& Delegate = FDelegate_OrgProductSandboxPutSelectionList(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr OrgProductSandboxPutSelectionListEntry(const FRequest_OrgProductSandboxPutSelectionListEntry& Request, const FDelegate_OrgProductSandboxPutSelectionListEntry& Delegate = FDelegate_OrgProductSandboxPutSelectionListEntry(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxCreateMap(const FRequest_SandboxCreateMap& Request, const FDelegate_SandboxCreateMap& Delegate = FDelegate_SandboxCreateMap(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxCreateMapSelectionListEntry(const FRequest_SandboxCreateMapSelectionListEntry& Request, const FDelegate_SandboxCreateMapSelectionListEntry& Delegate = FDelegate_SandboxCreateMapSelectionListEntry(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxCreateSelectionList(const FRequest_SandboxCreateSelectionList& Request, const FDelegate_SandboxCreateSelectionList& Delegate = FDelegate_SandboxCreateSelectionList(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxDeleteMap(const FRequest_SandboxDeleteMap& Request, const FDelegate_SandboxDeleteMap& Delegate = FDelegate_SandboxDeleteMap(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxDeleteMapSelectionList(const FRequest_SandboxDeleteMapSelectionList& Request, const FDelegate_SandboxDeleteMapSelectionList& Delegate = FDelegate_SandboxDeleteMapSelectionList(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxDeleteMapSelectionListEntry(const FRequest_SandboxDeleteMapSelectionListEntry& Request, const FDelegate_SandboxDeleteMapSelectionListEntry& Delegate = FDelegate_SandboxDeleteMapSelectionListEntry(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetAllMapSelectionListEntriesForMapSelectionList(const FRequest_SandboxGetAllMapSelectionListEntriesForMapSelectionList& Request, const FDelegate_SandboxGetAllMapSelectionListEntriesForMapSelectionList& Delegate = FDelegate_SandboxGetAllMapSelectionListEntriesForMapSelectionList(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetAllMapSelectionLists(const FRequest_SandboxGetAllMapSelectionLists& Request, const FDelegate_SandboxGetAllMapSelectionLists& Delegate = FDelegate_SandboxGetAllMapSelectionLists(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetAllMaps(const FRequest_SandboxGetAllMaps& Request, const FDelegate_SandboxGetAllMaps& Delegate = FDelegate_SandboxGetAllMaps(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetMap(const FRequest_SandboxGetMap& Request, const FDelegate_SandboxGetMap& Delegate = FDelegate_SandboxGetMap(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetMapSelectionList(const FRequest_SandboxGetMapSelectionList& Request, const FDelegate_SandboxGetMapSelectionList& Delegate = FDelegate_SandboxGetMapSelectionList(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetMapSelectionListEntry(const FRequest_SandboxGetMapSelectionListEntry& Request, const FDelegate_SandboxGetMapSelectionListEntry& Delegate = FDelegate_SandboxGetMapSelectionListEntry(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxPatchMap(const FRequest_SandboxPatchMap& Request, const FDelegate_SandboxPatchMap& Delegate = FDelegate_SandboxPatchMap(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxPatchSelectionList(const FRequest_SandboxPatchSelectionList& Request, const FDelegate_SandboxPatchSelectionList& Delegate = FDelegate_SandboxPatchSelectionList(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxPatchSelectionListEntry(const FRequest_SandboxPatchSelectionListEntry& Request, const FDelegate_SandboxPatchSelectionListEntry& Delegate = FDelegate_SandboxPatchSelectionListEntry(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxPutMap(const FRequest_SandboxPutMap& Request, const FDelegate_SandboxPutMap& Delegate = FDelegate_SandboxPutMap(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxPutSelectionList(const FRequest_SandboxPutSelectionList& Request, const FDelegate_SandboxPutSelectionList& Delegate = FDelegate_SandboxPutSelectionList(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxPutSelectionListEntry(const FRequest_SandboxPutSelectionListEntry& Request, const FDelegate_SandboxPutSelectionListEntry& Delegate = FDelegate_SandboxPutSelectionListEntry(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);

private:
    void OnOrgProductSandboxCreateMapResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_OrgProductSandboxCreateMap Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnOrgProductSandboxCreateMapSelectionListEntryResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_OrgProductSandboxCreateMapSelectionListEntry Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnOrgProductSandboxCreateSelectionListResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_OrgProductSandboxCreateSelectionList Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnOrgProductSandboxDeleteMapResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_OrgProductSandboxDeleteMap Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnOrgProductSandboxDeleteMapSelectionListResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_OrgProductSandboxDeleteMapSelectionList Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnOrgProductSandboxDeleteMapSelectionListEntryResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_OrgProductSandboxDeleteMapSelectionListEntry Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnOrgProductSandboxGetAllMapSelectionListEntriesForMapSelectionListResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_OrgProductSandboxGetAllMapSelectionListEntriesForMapSelectionList Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnOrgProductSandboxGetAllMapSelectionListsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_OrgProductSandboxGetAllMapSelectionLists Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnOrgProductSandboxGetAllMapsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_OrgProductSandboxGetAllMaps Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnOrgProductSandboxGetMapResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_OrgProductSandboxGetMap Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnOrgProductSandboxGetMapSelectionListResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_OrgProductSandboxGetMapSelectionList Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnOrgProductSandboxGetMapSelectionListEntryResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_OrgProductSandboxGetMapSelectionListEntry Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnOrgProductSandboxPatchMapResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_OrgProductSandboxPatchMap Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnOrgProductSandboxPatchSelectionListResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_OrgProductSandboxPatchSelectionList Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnOrgProductSandboxPatchSelectionListEntryResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_OrgProductSandboxPatchSelectionListEntry Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnOrgProductSandboxPutMapResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_OrgProductSandboxPutMap Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnOrgProductSandboxPutSelectionListResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_OrgProductSandboxPutSelectionList Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnOrgProductSandboxPutSelectionListEntryResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_OrgProductSandboxPutSelectionListEntry Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxCreateMapResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxCreateMap Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxCreateMapSelectionListEntryResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxCreateMapSelectionListEntry Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxCreateSelectionListResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxCreateSelectionList Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxDeleteMapResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxDeleteMap Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxDeleteMapSelectionListResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxDeleteMapSelectionList Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxDeleteMapSelectionListEntryResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxDeleteMapSelectionListEntry Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetAllMapSelectionListEntriesForMapSelectionListResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetAllMapSelectionListEntriesForMapSelectionList Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetAllMapSelectionListsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetAllMapSelectionLists Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetAllMapsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetAllMaps Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetMapResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetMap Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetMapSelectionListResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetMapSelectionList Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetMapSelectionListEntryResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetMapSelectionListEntry Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxPatchMapResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxPatchMap Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxPatchSelectionListResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxPatchSelectionList Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxPatchSelectionListEntryResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxPatchSelectionListEntry Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxPutMapResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxPutMap Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxPutSelectionListResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxPutSelectionList Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxPutSelectionListEntryResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxPutSelectionListEntry Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};

/* Create Map
 *
 * Add a new Map for a sandbox                   Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_OrgProductSandboxCreateMap : public FRequest
{
    FRequest_OrgProductSandboxCreateMap();
    virtual ~FRequest_OrgProductSandboxCreateMap() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    /* Product ID or short name */
    TVariant<FGuid, FString> ProductIdentifier;
    /* Sandbox ID or short name */
    TVariant<FGuid, FString> SandboxIdentifier;
    FRHAPI_DevMapRequest MapRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_OrgProductSandboxCreateMap : public FResponse
{
    FResponse_OrgProductSandboxCreateMap(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_OrgProductSandboxCreateMap() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMap Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_OrgProductSandboxCreateMap
{
    typedef FRequest_OrgProductSandboxCreateMap Request;
    typedef FResponse_OrgProductSandboxCreateMap Response;
    typedef FDelegate_OrgProductSandboxCreateMap Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.OrgProductSandboxCreateMap(InRequest, InDelegate, Priority); }
};

/* Create Map Selection List Entry
 *
 * Add a new Map Selection List Entry for a Map Selection List  Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_OrgProductSandboxCreateMapSelectionListEntry : public FRequest
{
    FRequest_OrgProductSandboxCreateMapSelectionListEntry();
    virtual ~FRequest_OrgProductSandboxCreateMapSelectionListEntry() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid SelectionListId;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    /* Product ID or short name */
    TVariant<FGuid, FString> ProductIdentifier;
    /* Sandbox ID or short name */
    TVariant<FGuid, FString> SandboxIdentifier;
    FRHAPI_DevMapSelectionListEntryRequest MapSelectionListEntryRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_OrgProductSandboxCreateMapSelectionListEntry : public FResponse
{
    FResponse_OrgProductSandboxCreateMapSelectionListEntry(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_OrgProductSandboxCreateMapSelectionListEntry() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMapSelectionListEntry Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_OrgProductSandboxCreateMapSelectionListEntry
{
    typedef FRequest_OrgProductSandboxCreateMapSelectionListEntry Request;
    typedef FResponse_OrgProductSandboxCreateMapSelectionListEntry Response;
    typedef FDelegate_OrgProductSandboxCreateMapSelectionListEntry Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.OrgProductSandboxCreateMapSelectionListEntry(InRequest, InDelegate, Priority); }
};

/* Create Selection List
 *
 * Add a new Map Selection List for a sandbox  Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_OrgProductSandboxCreateSelectionList : public FRequest
{
    FRequest_OrgProductSandboxCreateSelectionList();
    virtual ~FRequest_OrgProductSandboxCreateSelectionList() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    /* Product ID or short name */
    TVariant<FGuid, FString> ProductIdentifier;
    /* Sandbox ID or short name */
    TVariant<FGuid, FString> SandboxIdentifier;
    FRHAPI_DevMapSelectionListRequest MapSelectionListRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_OrgProductSandboxCreateSelectionList : public FResponse
{
    FResponse_OrgProductSandboxCreateSelectionList(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_OrgProductSandboxCreateSelectionList() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMapSelectionList Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_OrgProductSandboxCreateSelectionList
{
    typedef FRequest_OrgProductSandboxCreateSelectionList Request;
    typedef FResponse_OrgProductSandboxCreateSelectionList Response;
    typedef FDelegate_OrgProductSandboxCreateSelectionList Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.OrgProductSandboxCreateSelectionList(InRequest, InDelegate, Priority); }
};

/* Delete Map
 *
 * Delete a specific Map in a sandbox  Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_OrgProductSandboxDeleteMap : public FRequest
{
    FRequest_OrgProductSandboxDeleteMap();
    virtual ~FRequest_OrgProductSandboxDeleteMap() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid MapId;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    /* Product ID or short name */
    TVariant<FGuid, FString> ProductIdentifier;
    /* Sandbox ID or short name */
    TVariant<FGuid, FString> SandboxIdentifier;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_OrgProductSandboxDeleteMap : public FResponse
{
    FResponse_OrgProductSandboxDeleteMap(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_OrgProductSandboxDeleteMap() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;



};

struct RALLYHEREDEVELOPERAPI_API Traits_OrgProductSandboxDeleteMap
{
    typedef FRequest_OrgProductSandboxDeleteMap Request;
    typedef FResponse_OrgProductSandboxDeleteMap Response;
    typedef FDelegate_OrgProductSandboxDeleteMap Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.OrgProductSandboxDeleteMap(InRequest, InDelegate, Priority); }
};

/* Delete Map Selection List
 *
 * Delete a specific Map Selection List in a sandbox  Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_OrgProductSandboxDeleteMapSelectionList : public FRequest
{
    FRequest_OrgProductSandboxDeleteMapSelectionList();
    virtual ~FRequest_OrgProductSandboxDeleteMapSelectionList() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid SelectionListId;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    /* Product ID or short name */
    TVariant<FGuid, FString> ProductIdentifier;
    /* Sandbox ID or short name */
    TVariant<FGuid, FString> SandboxIdentifier;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_OrgProductSandboxDeleteMapSelectionList : public FResponse
{
    FResponse_OrgProductSandboxDeleteMapSelectionList(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_OrgProductSandboxDeleteMapSelectionList() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;



};

struct RALLYHEREDEVELOPERAPI_API Traits_OrgProductSandboxDeleteMapSelectionList
{
    typedef FRequest_OrgProductSandboxDeleteMapSelectionList Request;
    typedef FResponse_OrgProductSandboxDeleteMapSelectionList Response;
    typedef FDelegate_OrgProductSandboxDeleteMapSelectionList Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.OrgProductSandboxDeleteMapSelectionList(InRequest, InDelegate, Priority); }
};

/* Delete Map Selection List Entry
 *
 * Delete a specific Map Selection List Entry for a Map Selection List  Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_OrgProductSandboxDeleteMapSelectionListEntry : public FRequest
{
    FRequest_OrgProductSandboxDeleteMapSelectionListEntry();
    virtual ~FRequest_OrgProductSandboxDeleteMapSelectionListEntry() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid SelectionListId;
    FGuid MapSelectionListEntryId;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    /* Product ID or short name */
    TVariant<FGuid, FString> ProductIdentifier;
    /* Sandbox ID or short name */
    TVariant<FGuid, FString> SandboxIdentifier;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_OrgProductSandboxDeleteMapSelectionListEntry : public FResponse
{
    FResponse_OrgProductSandboxDeleteMapSelectionListEntry(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_OrgProductSandboxDeleteMapSelectionListEntry() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;



};

struct RALLYHEREDEVELOPERAPI_API Traits_OrgProductSandboxDeleteMapSelectionListEntry
{
    typedef FRequest_OrgProductSandboxDeleteMapSelectionListEntry Request;
    typedef FResponse_OrgProductSandboxDeleteMapSelectionListEntry Response;
    typedef FDelegate_OrgProductSandboxDeleteMapSelectionListEntry Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.OrgProductSandboxDeleteMapSelectionListEntry(InRequest, InDelegate, Priority); }
};

/* Get All Map Selection List Entries For Map Selection List
 *
 * Get all Map Selection List entries for a specific Map Selection List  Requires any of permissions:    sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_OrgProductSandboxGetAllMapSelectionListEntriesForMapSelectionList : public FRequest
{
    FRequest_OrgProductSandboxGetAllMapSelectionListEntriesForMapSelectionList();
    virtual ~FRequest_OrgProductSandboxGetAllMapSelectionListEntriesForMapSelectionList() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid SelectionListId;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    /* Product ID or short name */
    TVariant<FGuid, FString> ProductIdentifier;
    /* Sandbox ID or short name */
    TVariant<FGuid, FString> SandboxIdentifier;
    /* The maximum number of elements to be returned per call */
    TOptional<int32> PageSize;
    /* Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration */
    TOptional<FString> Cursor;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_OrgProductSandboxGetAllMapSelectionListEntriesForMapSelectionList : public FResponse
{
    FResponse_OrgProductSandboxGetAllMapSelectionListEntriesForMapSelectionList(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_OrgProductSandboxGetAllMapSelectionListEntriesForMapSelectionList() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevAllMapSelectionListEntriesResponse Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_OrgProductSandboxGetAllMapSelectionListEntriesForMapSelectionList
{
    typedef FRequest_OrgProductSandboxGetAllMapSelectionListEntriesForMapSelectionList Request;
    typedef FResponse_OrgProductSandboxGetAllMapSelectionListEntriesForMapSelectionList Response;
    typedef FDelegate_OrgProductSandboxGetAllMapSelectionListEntriesForMapSelectionList Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.OrgProductSandboxGetAllMapSelectionListEntriesForMapSelectionList(InRequest, InDelegate, Priority); }
};

/* Get All Map Selection Lists
 *
 * Get all MapSelectionLists for a sandbox  Requires any of permissions:    sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_OrgProductSandboxGetAllMapSelectionLists : public FRequest
{
    FRequest_OrgProductSandboxGetAllMapSelectionLists();
    virtual ~FRequest_OrgProductSandboxGetAllMapSelectionLists() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    /* Product ID or short name */
    TVariant<FGuid, FString> ProductIdentifier;
    /* Sandbox ID or short name */
    TVariant<FGuid, FString> SandboxIdentifier;
    /* The maximum number of elements to be returned per call */
    TOptional<int32> PageSize;
    /* Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration */
    TOptional<FString> Cursor;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_OrgProductSandboxGetAllMapSelectionLists : public FResponse
{
    FResponse_OrgProductSandboxGetAllMapSelectionLists(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_OrgProductSandboxGetAllMapSelectionLists() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevAllMapSelectionListsResponse Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_OrgProductSandboxGetAllMapSelectionLists
{
    typedef FRequest_OrgProductSandboxGetAllMapSelectionLists Request;
    typedef FResponse_OrgProductSandboxGetAllMapSelectionLists Response;
    typedef FDelegate_OrgProductSandboxGetAllMapSelectionLists Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.OrgProductSandboxGetAllMapSelectionLists(InRequest, InDelegate, Priority); }
};

/* Get All Maps
 *
 * Get all Maps for a sandbox  Requires any of permissions:    sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_OrgProductSandboxGetAllMaps : public FRequest
{
    FRequest_OrgProductSandboxGetAllMaps();
    virtual ~FRequest_OrgProductSandboxGetAllMaps() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    /* Product ID or short name */
    TVariant<FGuid, FString> ProductIdentifier;
    /* Sandbox ID or short name */
    TVariant<FGuid, FString> SandboxIdentifier;
    /* The maximum number of elements to be returned per call */
    TOptional<int32> PageSize;
    /* Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration */
    TOptional<FString> Cursor;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_OrgProductSandboxGetAllMaps : public FResponse
{
    FResponse_OrgProductSandboxGetAllMaps(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_OrgProductSandboxGetAllMaps() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevAllMapsResponse Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_OrgProductSandboxGetAllMaps
{
    typedef FRequest_OrgProductSandboxGetAllMaps Request;
    typedef FResponse_OrgProductSandboxGetAllMaps Response;
    typedef FDelegate_OrgProductSandboxGetAllMaps Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.OrgProductSandboxGetAllMaps(InRequest, InDelegate, Priority); }
};

/* Get Map
 *
 * Get a specific Map for a sandbox          Requires any of permissions:    sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_OrgProductSandboxGetMap : public FRequest
{
    FRequest_OrgProductSandboxGetMap();
    virtual ~FRequest_OrgProductSandboxGetMap() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid MapId;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    /* Product ID or short name */
    TVariant<FGuid, FString> ProductIdentifier;
    /* Sandbox ID or short name */
    TVariant<FGuid, FString> SandboxIdentifier;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_OrgProductSandboxGetMap : public FResponse
{
    FResponse_OrgProductSandboxGetMap(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_OrgProductSandboxGetMap() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMap Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_OrgProductSandboxGetMap
{
    typedef FRequest_OrgProductSandboxGetMap Request;
    typedef FResponse_OrgProductSandboxGetMap Response;
    typedef FDelegate_OrgProductSandboxGetMap Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.OrgProductSandboxGetMap(InRequest, InDelegate, Priority); }
};

/* Get Map Selection List
 *
 * Get a specific Map Selection List for a sandbox  Requires any of permissions:    sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_OrgProductSandboxGetMapSelectionList : public FRequest
{
    FRequest_OrgProductSandboxGetMapSelectionList();
    virtual ~FRequest_OrgProductSandboxGetMapSelectionList() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid SelectionListId;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    /* Product ID or short name */
    TVariant<FGuid, FString> ProductIdentifier;
    /* Sandbox ID or short name */
    TVariant<FGuid, FString> SandboxIdentifier;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_OrgProductSandboxGetMapSelectionList : public FResponse
{
    FResponse_OrgProductSandboxGetMapSelectionList(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_OrgProductSandboxGetMapSelectionList() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMapSelectionList Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_OrgProductSandboxGetMapSelectionList
{
    typedef FRequest_OrgProductSandboxGetMapSelectionList Request;
    typedef FResponse_OrgProductSandboxGetMapSelectionList Response;
    typedef FDelegate_OrgProductSandboxGetMapSelectionList Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.OrgProductSandboxGetMapSelectionList(InRequest, InDelegate, Priority); }
};

/* Get Map Selection List Entry
 *
 * Get a specific Map Selection List Entry for a Map Selection List  Requires any of permissions:    sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_OrgProductSandboxGetMapSelectionListEntry : public FRequest
{
    FRequest_OrgProductSandboxGetMapSelectionListEntry();
    virtual ~FRequest_OrgProductSandboxGetMapSelectionListEntry() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid SelectionListId;
    FGuid MapSelectionListEntryId;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    /* Product ID or short name */
    TVariant<FGuid, FString> ProductIdentifier;
    /* Sandbox ID or short name */
    TVariant<FGuid, FString> SandboxIdentifier;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_OrgProductSandboxGetMapSelectionListEntry : public FResponse
{
    FResponse_OrgProductSandboxGetMapSelectionListEntry(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_OrgProductSandboxGetMapSelectionListEntry() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMapSelectionListEntry Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_OrgProductSandboxGetMapSelectionListEntry
{
    typedef FRequest_OrgProductSandboxGetMapSelectionListEntry Request;
    typedef FResponse_OrgProductSandboxGetMapSelectionListEntry Response;
    typedef FDelegate_OrgProductSandboxGetMapSelectionListEntry Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.OrgProductSandboxGetMapSelectionListEntry(InRequest, InDelegate, Priority); }
};

/* Patch Map
 *
 * Update a specific Map in a sandbox                    Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_OrgProductSandboxPatchMap : public FRequest
{
    FRequest_OrgProductSandboxPatchMap();
    virtual ~FRequest_OrgProductSandboxPatchMap() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid MapId;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    /* Product ID or short name */
    TVariant<FGuid, FString> ProductIdentifier;
    /* Sandbox ID or short name */
    TVariant<FGuid, FString> SandboxIdentifier;
    FRHAPI_DevMapUpdateRequest MapUpdateRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_OrgProductSandboxPatchMap : public FResponse
{
    FResponse_OrgProductSandboxPatchMap(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_OrgProductSandboxPatchMap() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMap Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_OrgProductSandboxPatchMap
{
    typedef FRequest_OrgProductSandboxPatchMap Request;
    typedef FResponse_OrgProductSandboxPatchMap Response;
    typedef FDelegate_OrgProductSandboxPatchMap Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.OrgProductSandboxPatchMap(InRequest, InDelegate, Priority); }
};

/* Patch Selection List
 *
 * Update an existing Map Selection List for a sandbox  Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_OrgProductSandboxPatchSelectionList : public FRequest
{
    FRequest_OrgProductSandboxPatchSelectionList();
    virtual ~FRequest_OrgProductSandboxPatchSelectionList() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid SelectionListId;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    /* Product ID or short name */
    TVariant<FGuid, FString> ProductIdentifier;
    /* Sandbox ID or short name */
    TVariant<FGuid, FString> SandboxIdentifier;
    FRHAPI_DevMapSelectionListUpdateRequest MapSelectionListUpdateRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_OrgProductSandboxPatchSelectionList : public FResponse
{
    FResponse_OrgProductSandboxPatchSelectionList(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_OrgProductSandboxPatchSelectionList() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMapSelectionList Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_OrgProductSandboxPatchSelectionList
{
    typedef FRequest_OrgProductSandboxPatchSelectionList Request;
    typedef FResponse_OrgProductSandboxPatchSelectionList Response;
    typedef FDelegate_OrgProductSandboxPatchSelectionList Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.OrgProductSandboxPatchSelectionList(InRequest, InDelegate, Priority); }
};

/* Patch Selection List Entry
 *
 * Update an existing Map Selection List Entry for a Map Selection List  Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_OrgProductSandboxPatchSelectionListEntry : public FRequest
{
    FRequest_OrgProductSandboxPatchSelectionListEntry();
    virtual ~FRequest_OrgProductSandboxPatchSelectionListEntry() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid SelectionListId;
    FGuid MapSelectionListEntryId;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    /* Product ID or short name */
    TVariant<FGuid, FString> ProductIdentifier;
    /* Sandbox ID or short name */
    TVariant<FGuid, FString> SandboxIdentifier;
    FRHAPI_DevMapSelectionListEntryUpdateRequest MapSelectionListEntryUpdateRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_OrgProductSandboxPatchSelectionListEntry : public FResponse
{
    FResponse_OrgProductSandboxPatchSelectionListEntry(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_OrgProductSandboxPatchSelectionListEntry() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMapSelectionListEntry Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_OrgProductSandboxPatchSelectionListEntry
{
    typedef FRequest_OrgProductSandboxPatchSelectionListEntry Request;
    typedef FResponse_OrgProductSandboxPatchSelectionListEntry Response;
    typedef FDelegate_OrgProductSandboxPatchSelectionListEntry Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.OrgProductSandboxPatchSelectionListEntry(InRequest, InDelegate, Priority); }
};

/* Put Map
 *
 * Update a specific Map in a sandbox  Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_OrgProductSandboxPutMap : public FRequest
{
    FRequest_OrgProductSandboxPutMap();
    virtual ~FRequest_OrgProductSandboxPutMap() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid MapId;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    /* Product ID or short name */
    TVariant<FGuid, FString> ProductIdentifier;
    /* Sandbox ID or short name */
    TVariant<FGuid, FString> SandboxIdentifier;
    FRHAPI_DevMapRequest MapRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_OrgProductSandboxPutMap : public FResponse
{
    FResponse_OrgProductSandboxPutMap(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_OrgProductSandboxPutMap() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMap Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_OrgProductSandboxPutMap
{
    typedef FRequest_OrgProductSandboxPutMap Request;
    typedef FResponse_OrgProductSandboxPutMap Response;
    typedef FDelegate_OrgProductSandboxPutMap Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.OrgProductSandboxPutMap(InRequest, InDelegate, Priority); }
};

/* Put Selection List
 *
 * Update an existing Map Selection List for a sandbox                  Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_OrgProductSandboxPutSelectionList : public FRequest
{
    FRequest_OrgProductSandboxPutSelectionList();
    virtual ~FRequest_OrgProductSandboxPutSelectionList() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid SelectionListId;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    /* Product ID or short name */
    TVariant<FGuid, FString> ProductIdentifier;
    /* Sandbox ID or short name */
    TVariant<FGuid, FString> SandboxIdentifier;
    FRHAPI_DevMapSelectionListRequest MapSelectionListRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_OrgProductSandboxPutSelectionList : public FResponse
{
    FResponse_OrgProductSandboxPutSelectionList(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_OrgProductSandboxPutSelectionList() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMapSelectionList Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_OrgProductSandboxPutSelectionList
{
    typedef FRequest_OrgProductSandboxPutSelectionList Request;
    typedef FResponse_OrgProductSandboxPutSelectionList Response;
    typedef FDelegate_OrgProductSandboxPutSelectionList Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.OrgProductSandboxPutSelectionList(InRequest, InDelegate, Priority); }
};

/* Put Selection List Entry
 *
 * Update an existing Map Selection List Entry for a Map Selection List  Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_OrgProductSandboxPutSelectionListEntry : public FRequest
{
    FRequest_OrgProductSandboxPutSelectionListEntry();
    virtual ~FRequest_OrgProductSandboxPutSelectionListEntry() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid SelectionListId;
    FGuid MapSelectionListEntryId;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    /* Product ID or short name */
    TVariant<FGuid, FString> ProductIdentifier;
    /* Sandbox ID or short name */
    TVariant<FGuid, FString> SandboxIdentifier;
    FRHAPI_DevMapSelectionListEntryRequest MapSelectionListEntryRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_OrgProductSandboxPutSelectionListEntry : public FResponse
{
    FResponse_OrgProductSandboxPutSelectionListEntry(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_OrgProductSandboxPutSelectionListEntry() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMapSelectionListEntry Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_OrgProductSandboxPutSelectionListEntry
{
    typedef FRequest_OrgProductSandboxPutSelectionListEntry Request;
    typedef FResponse_OrgProductSandboxPutSelectionListEntry Response;
    typedef FDelegate_OrgProductSandboxPutSelectionListEntry Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.OrgProductSandboxPutSelectionListEntry(InRequest, InDelegate, Priority); }
};

/* Create Map
 *
 * Add a new Map for a sandbox                   Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxCreateMap : public FRequest
{
    FRequest_SandboxCreateMap();
    virtual ~FRequest_SandboxCreateMap() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevMapRequest MapRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxCreateMap : public FResponse
{
    FResponse_SandboxCreateMap(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxCreateMap() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMap Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxCreateMap
{
    typedef FRequest_SandboxCreateMap Request;
    typedef FResponse_SandboxCreateMap Response;
    typedef FDelegate_SandboxCreateMap Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxCreateMap(InRequest, InDelegate, Priority); }
};

/* Create Map Selection List Entry
 *
 * Add a new Map Selection List Entry for a Map Selection List  Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxCreateMapSelectionListEntry : public FRequest
{
    FRequest_SandboxCreateMapSelectionListEntry();
    virtual ~FRequest_SandboxCreateMapSelectionListEntry() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid SelectionListId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevMapSelectionListEntryRequest MapSelectionListEntryRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxCreateMapSelectionListEntry : public FResponse
{
    FResponse_SandboxCreateMapSelectionListEntry(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxCreateMapSelectionListEntry() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMapSelectionListEntry Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxCreateMapSelectionListEntry
{
    typedef FRequest_SandboxCreateMapSelectionListEntry Request;
    typedef FResponse_SandboxCreateMapSelectionListEntry Response;
    typedef FDelegate_SandboxCreateMapSelectionListEntry Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxCreateMapSelectionListEntry(InRequest, InDelegate, Priority); }
};

/* Create Selection List
 *
 * Add a new Map Selection List for a sandbox  Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxCreateSelectionList : public FRequest
{
    FRequest_SandboxCreateSelectionList();
    virtual ~FRequest_SandboxCreateSelectionList() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevMapSelectionListRequest MapSelectionListRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxCreateSelectionList : public FResponse
{
    FResponse_SandboxCreateSelectionList(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxCreateSelectionList() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMapSelectionList Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxCreateSelectionList
{
    typedef FRequest_SandboxCreateSelectionList Request;
    typedef FResponse_SandboxCreateSelectionList Response;
    typedef FDelegate_SandboxCreateSelectionList Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxCreateSelectionList(InRequest, InDelegate, Priority); }
};

/* Delete Map
 *
 * Delete a specific Map in a sandbox  Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxDeleteMap : public FRequest
{
    FRequest_SandboxDeleteMap();
    virtual ~FRequest_SandboxDeleteMap() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid MapId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxDeleteMap : public FResponse
{
    FResponse_SandboxDeleteMap(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxDeleteMap() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;



};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxDeleteMap
{
    typedef FRequest_SandboxDeleteMap Request;
    typedef FResponse_SandboxDeleteMap Response;
    typedef FDelegate_SandboxDeleteMap Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxDeleteMap(InRequest, InDelegate, Priority); }
};

/* Delete Map Selection List
 *
 * Delete a specific Map Selection List in a sandbox  Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxDeleteMapSelectionList : public FRequest
{
    FRequest_SandboxDeleteMapSelectionList();
    virtual ~FRequest_SandboxDeleteMapSelectionList() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid SelectionListId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxDeleteMapSelectionList : public FResponse
{
    FResponse_SandboxDeleteMapSelectionList(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxDeleteMapSelectionList() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;



};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxDeleteMapSelectionList
{
    typedef FRequest_SandboxDeleteMapSelectionList Request;
    typedef FResponse_SandboxDeleteMapSelectionList Response;
    typedef FDelegate_SandboxDeleteMapSelectionList Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxDeleteMapSelectionList(InRequest, InDelegate, Priority); }
};

/* Delete Map Selection List Entry
 *
 * Delete a specific Map Selection List Entry for a Map Selection List  Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxDeleteMapSelectionListEntry : public FRequest
{
    FRequest_SandboxDeleteMapSelectionListEntry();
    virtual ~FRequest_SandboxDeleteMapSelectionListEntry() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid SelectionListId;
    FGuid MapSelectionListEntryId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxDeleteMapSelectionListEntry : public FResponse
{
    FResponse_SandboxDeleteMapSelectionListEntry(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxDeleteMapSelectionListEntry() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;



};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxDeleteMapSelectionListEntry
{
    typedef FRequest_SandboxDeleteMapSelectionListEntry Request;
    typedef FResponse_SandboxDeleteMapSelectionListEntry Response;
    typedef FDelegate_SandboxDeleteMapSelectionListEntry Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxDeleteMapSelectionListEntry(InRequest, InDelegate, Priority); }
};

/* Get All Map Selection List Entries For Map Selection List
 *
 * Get all Map Selection List entries for a specific Map Selection List  Requires any of permissions:    sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetAllMapSelectionListEntriesForMapSelectionList : public FRequest
{
    FRequest_SandboxGetAllMapSelectionListEntriesForMapSelectionList();
    virtual ~FRequest_SandboxGetAllMapSelectionListEntriesForMapSelectionList() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid SelectionListId;
    /* Sandbox ID */
    FGuid SandboxId;
    /* The maximum number of elements to be returned per call */
    TOptional<int32> PageSize;
    /* Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration */
    TOptional<FString> Cursor;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetAllMapSelectionListEntriesForMapSelectionList : public FResponse
{
    FResponse_SandboxGetAllMapSelectionListEntriesForMapSelectionList(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetAllMapSelectionListEntriesForMapSelectionList() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevAllMapSelectionListEntriesResponse Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetAllMapSelectionListEntriesForMapSelectionList
{
    typedef FRequest_SandboxGetAllMapSelectionListEntriesForMapSelectionList Request;
    typedef FResponse_SandboxGetAllMapSelectionListEntriesForMapSelectionList Response;
    typedef FDelegate_SandboxGetAllMapSelectionListEntriesForMapSelectionList Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetAllMapSelectionListEntriesForMapSelectionList(InRequest, InDelegate, Priority); }
};

/* Get All Map Selection Lists
 *
 * Get all MapSelectionLists for a sandbox  Requires any of permissions:    sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetAllMapSelectionLists : public FRequest
{
    FRequest_SandboxGetAllMapSelectionLists();
    virtual ~FRequest_SandboxGetAllMapSelectionLists() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    /* The maximum number of elements to be returned per call */
    TOptional<int32> PageSize;
    /* Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration */
    TOptional<FString> Cursor;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetAllMapSelectionLists : public FResponse
{
    FResponse_SandboxGetAllMapSelectionLists(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetAllMapSelectionLists() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevAllMapSelectionListsResponse Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetAllMapSelectionLists
{
    typedef FRequest_SandboxGetAllMapSelectionLists Request;
    typedef FResponse_SandboxGetAllMapSelectionLists Response;
    typedef FDelegate_SandboxGetAllMapSelectionLists Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetAllMapSelectionLists(InRequest, InDelegate, Priority); }
};

/* Get All Maps
 *
 * Get all Maps for a sandbox  Requires any of permissions:    sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetAllMaps : public FRequest
{
    FRequest_SandboxGetAllMaps();
    virtual ~FRequest_SandboxGetAllMaps() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    /* The maximum number of elements to be returned per call */
    TOptional<int32> PageSize;
    /* Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration */
    TOptional<FString> Cursor;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetAllMaps : public FResponse
{
    FResponse_SandboxGetAllMaps(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetAllMaps() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevAllMapsResponse Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetAllMaps
{
    typedef FRequest_SandboxGetAllMaps Request;
    typedef FResponse_SandboxGetAllMaps Response;
    typedef FDelegate_SandboxGetAllMaps Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetAllMaps(InRequest, InDelegate, Priority); }
};

/* Get Map
 *
 * Get a specific Map for a sandbox          Requires any of permissions:    sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetMap : public FRequest
{
    FRequest_SandboxGetMap();
    virtual ~FRequest_SandboxGetMap() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid MapId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetMap : public FResponse
{
    FResponse_SandboxGetMap(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetMap() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMap Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetMap
{
    typedef FRequest_SandboxGetMap Request;
    typedef FResponse_SandboxGetMap Response;
    typedef FDelegate_SandboxGetMap Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetMap(InRequest, InDelegate, Priority); }
};

/* Get Map Selection List
 *
 * Get a specific Map Selection List for a sandbox  Requires any of permissions:    sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetMapSelectionList : public FRequest
{
    FRequest_SandboxGetMapSelectionList();
    virtual ~FRequest_SandboxGetMapSelectionList() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid SelectionListId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetMapSelectionList : public FResponse
{
    FResponse_SandboxGetMapSelectionList(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetMapSelectionList() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMapSelectionList Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetMapSelectionList
{
    typedef FRequest_SandboxGetMapSelectionList Request;
    typedef FResponse_SandboxGetMapSelectionList Response;
    typedef FDelegate_SandboxGetMapSelectionList Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetMapSelectionList(InRequest, InDelegate, Priority); }
};

/* Get Map Selection List Entry
 *
 * Get a specific Map Selection List Entry for a Map Selection List  Requires any of permissions:    sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetMapSelectionListEntry : public FRequest
{
    FRequest_SandboxGetMapSelectionListEntry();
    virtual ~FRequest_SandboxGetMapSelectionListEntry() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid SelectionListId;
    FGuid MapSelectionListEntryId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetMapSelectionListEntry : public FResponse
{
    FResponse_SandboxGetMapSelectionListEntry(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetMapSelectionListEntry() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMapSelectionListEntry Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetMapSelectionListEntry
{
    typedef FRequest_SandboxGetMapSelectionListEntry Request;
    typedef FResponse_SandboxGetMapSelectionListEntry Response;
    typedef FDelegate_SandboxGetMapSelectionListEntry Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetMapSelectionListEntry(InRequest, InDelegate, Priority); }
};

/* Patch Map
 *
 * Update a specific Map in a sandbox                    Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxPatchMap : public FRequest
{
    FRequest_SandboxPatchMap();
    virtual ~FRequest_SandboxPatchMap() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid MapId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevMapUpdateRequest MapUpdateRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxPatchMap : public FResponse
{
    FResponse_SandboxPatchMap(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxPatchMap() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMap Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxPatchMap
{
    typedef FRequest_SandboxPatchMap Request;
    typedef FResponse_SandboxPatchMap Response;
    typedef FDelegate_SandboxPatchMap Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxPatchMap(InRequest, InDelegate, Priority); }
};

/* Patch Selection List
 *
 * Update an existing Map Selection List for a sandbox  Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxPatchSelectionList : public FRequest
{
    FRequest_SandboxPatchSelectionList();
    virtual ~FRequest_SandboxPatchSelectionList() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid SelectionListId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevMapSelectionListUpdateRequest MapSelectionListUpdateRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxPatchSelectionList : public FResponse
{
    FResponse_SandboxPatchSelectionList(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxPatchSelectionList() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMapSelectionList Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxPatchSelectionList
{
    typedef FRequest_SandboxPatchSelectionList Request;
    typedef FResponse_SandboxPatchSelectionList Response;
    typedef FDelegate_SandboxPatchSelectionList Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxPatchSelectionList(InRequest, InDelegate, Priority); }
};

/* Patch Selection List Entry
 *
 * Update an existing Map Selection List Entry for a Map Selection List  Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxPatchSelectionListEntry : public FRequest
{
    FRequest_SandboxPatchSelectionListEntry();
    virtual ~FRequest_SandboxPatchSelectionListEntry() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid SelectionListId;
    FGuid MapSelectionListEntryId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevMapSelectionListEntryUpdateRequest MapSelectionListEntryUpdateRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxPatchSelectionListEntry : public FResponse
{
    FResponse_SandboxPatchSelectionListEntry(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxPatchSelectionListEntry() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMapSelectionListEntry Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxPatchSelectionListEntry
{
    typedef FRequest_SandboxPatchSelectionListEntry Request;
    typedef FResponse_SandboxPatchSelectionListEntry Response;
    typedef FDelegate_SandboxPatchSelectionListEntry Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxPatchSelectionListEntry(InRequest, InDelegate, Priority); }
};

/* Put Map
 *
 * Update a specific Map in a sandbox  Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxPutMap : public FRequest
{
    FRequest_SandboxPutMap();
    virtual ~FRequest_SandboxPutMap() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid MapId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevMapRequest MapRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxPutMap : public FResponse
{
    FResponse_SandboxPutMap(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxPutMap() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMap Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxPutMap
{
    typedef FRequest_SandboxPutMap Request;
    typedef FResponse_SandboxPutMap Response;
    typedef FDelegate_SandboxPutMap Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxPutMap(InRequest, InDelegate, Priority); }
};

/* Put Selection List
 *
 * Update an existing Map Selection List for a sandbox                  Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxPutSelectionList : public FRequest
{
    FRequest_SandboxPutSelectionList();
    virtual ~FRequest_SandboxPutSelectionList() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid SelectionListId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevMapSelectionListRequest MapSelectionListRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxPutSelectionList : public FResponse
{
    FResponse_SandboxPutSelectionList(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxPutSelectionList() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMapSelectionList Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxPutSelectionList
{
    typedef FRequest_SandboxPutSelectionList Request;
    typedef FResponse_SandboxPutSelectionList Response;
    typedef FDelegate_SandboxPutSelectionList Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxPutSelectionList(InRequest, InDelegate, Priority); }
};

/* Put Selection List Entry
 *
 * Update an existing Map Selection List Entry for a Map Selection List  Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxPutSelectionListEntry : public FRequest
{
    FRequest_SandboxPutSelectionListEntry();
    virtual ~FRequest_SandboxPutSelectionListEntry() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid SelectionListId;
    FGuid MapSelectionListEntryId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevMapSelectionListEntryRequest MapSelectionListEntryRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxPutSelectionListEntry : public FResponse
{
    FResponse_SandboxPutSelectionListEntry(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxPutSelectionListEntry() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMapSelectionListEntry Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxPutSelectionListEntry
{
    typedef FRequest_SandboxPutSelectionListEntry Request;
    typedef FResponse_SandboxPutSelectionListEntry Response;
    typedef FDelegate_SandboxPutSelectionListEntry Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxPutSelectionListEntry(InRequest, InDelegate, Priority); }
};


}
