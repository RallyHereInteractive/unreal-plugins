// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereDeveloperAPIAuthContext.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevAllMapSelectionListEntriesResponse.h"
#include "DevAllMapSelectionListsResponse.h"
#include "DevAllMapsResponse.h"
#include "DevHTTPValidationError.h"
#include "DevMap.h"
#include "DevMapRequest.h"
#include "DevMapSelectionList.h"
#include "DevMapSelectionListBase.h"
#include "DevMapSelectionListEntry.h"
#include "DevMapSelectionListEntryFlattened.h"
#include "DevMapSelectionListEntryRequest.h"
#include "DevMapSelectionListEntryUpdateRequest.h"
#include "DevMapSelectionListFlattened.h"
#include "DevMapSelectionListRequest.h"
#include "DevMapSelectionListUpdateRequest.h"
#include "DevMapUpdateRequest.h"

namespace RallyHereDeveloperAPI
{
using RallyHereDeveloperAPI::ToStringFormatArg;
using RallyHereDeveloperAPI::WriteJsonValue;
using RallyHereDeveloperAPI::TryGetJsonValue;

struct FRequest_SandboxCreateMap;
struct FResponse_SandboxCreateMap;
struct FRequest_SandboxCreateMapSelectionListEntry;
struct FResponse_SandboxCreateMapSelectionListEntry;
struct FRequest_SandboxCreateSelectionList;
struct FResponse_SandboxCreateSelectionList;
struct FRequest_SandboxDeleteMap;
struct FResponse_SandboxDeleteMap;
struct FRequest_SandboxDeleteMapSelectionList;
struct FResponse_SandboxDeleteMapSelectionList;
struct FRequest_SandboxDeleteMapSelectionListEntry;
struct FResponse_SandboxDeleteMapSelectionListEntry;
struct FRequest_SandboxGetAllMapSelectionListEntriesForMapSelectionList;
struct FResponse_SandboxGetAllMapSelectionListEntriesForMapSelectionList;
struct FRequest_SandboxGetAllMapSelectionLists;
struct FResponse_SandboxGetAllMapSelectionLists;
struct FRequest_SandboxGetAllMaps;
struct FResponse_SandboxGetAllMaps;
struct FRequest_SandboxGetMap;
struct FResponse_SandboxGetMap;
struct FRequest_SandboxGetMapSelectionList;
struct FResponse_SandboxGetMapSelectionList;
struct FRequest_SandboxGetMapSelectionListEntry;
struct FResponse_SandboxGetMapSelectionListEntry;
struct FRequest_SandboxPatchMap;
struct FResponse_SandboxPatchMap;
struct FRequest_SandboxPatchSelectionList;
struct FResponse_SandboxPatchSelectionList;
struct FRequest_SandboxPatchSelectionListEntry;
struct FResponse_SandboxPatchSelectionListEntry;
struct FRequest_SandboxPutMap;
struct FResponse_SandboxPutMap;
struct FRequest_SandboxPutSelectionList;
struct FResponse_SandboxPutSelectionList;
struct FRequest_SandboxPutSelectionListEntry;
struct FResponse_SandboxPutSelectionListEntry;

DECLARE_DELEGATE_OneParam(FDelegate_SandboxCreateMap, const FResponse_SandboxCreateMap&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxCreateMapSelectionListEntry, const FResponse_SandboxCreateMapSelectionListEntry&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxCreateSelectionList, const FResponse_SandboxCreateSelectionList&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxDeleteMap, const FResponse_SandboxDeleteMap&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxDeleteMapSelectionList, const FResponse_SandboxDeleteMapSelectionList&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxDeleteMapSelectionListEntry, const FResponse_SandboxDeleteMapSelectionListEntry&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetAllMapSelectionListEntriesForMapSelectionList, const FResponse_SandboxGetAllMapSelectionListEntriesForMapSelectionList&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetAllMapSelectionLists, const FResponse_SandboxGetAllMapSelectionLists&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetAllMaps, const FResponse_SandboxGetAllMaps&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetMap, const FResponse_SandboxGetMap&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetMapSelectionList, const FResponse_SandboxGetMapSelectionList&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetMapSelectionListEntry, const FResponse_SandboxGetMapSelectionListEntry&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxPatchMap, const FResponse_SandboxPatchMap&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxPatchSelectionList, const FResponse_SandboxPatchSelectionList&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxPatchSelectionListEntry, const FResponse_SandboxPatchSelectionListEntry&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxPutMap, const FResponse_SandboxPutMap&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxPutSelectionList, const FResponse_SandboxPutSelectionList&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxPutSelectionListEntry, const FResponse_SandboxPutSelectionListEntry&);

class RALLYHEREDEVELOPERAPI_API FMapsAPI : public FAPI
{
public:
    FMapsAPI();
    virtual ~FMapsAPI();

    FHttpRequestPtr SandboxCreateMap(const FRequest_SandboxCreateMap& Request, const FDelegate_SandboxCreateMap& Delegate = FDelegate_SandboxCreateMap(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxCreateMapSelectionListEntry(const FRequest_SandboxCreateMapSelectionListEntry& Request, const FDelegate_SandboxCreateMapSelectionListEntry& Delegate = FDelegate_SandboxCreateMapSelectionListEntry(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxCreateSelectionList(const FRequest_SandboxCreateSelectionList& Request, const FDelegate_SandboxCreateSelectionList& Delegate = FDelegate_SandboxCreateSelectionList(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxDeleteMap(const FRequest_SandboxDeleteMap& Request, const FDelegate_SandboxDeleteMap& Delegate = FDelegate_SandboxDeleteMap(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxDeleteMapSelectionList(const FRequest_SandboxDeleteMapSelectionList& Request, const FDelegate_SandboxDeleteMapSelectionList& Delegate = FDelegate_SandboxDeleteMapSelectionList(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxDeleteMapSelectionListEntry(const FRequest_SandboxDeleteMapSelectionListEntry& Request, const FDelegate_SandboxDeleteMapSelectionListEntry& Delegate = FDelegate_SandboxDeleteMapSelectionListEntry(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetAllMapSelectionListEntriesForMapSelectionList(const FRequest_SandboxGetAllMapSelectionListEntriesForMapSelectionList& Request, const FDelegate_SandboxGetAllMapSelectionListEntriesForMapSelectionList& Delegate = FDelegate_SandboxGetAllMapSelectionListEntriesForMapSelectionList(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetAllMapSelectionLists(const FRequest_SandboxGetAllMapSelectionLists& Request, const FDelegate_SandboxGetAllMapSelectionLists& Delegate = FDelegate_SandboxGetAllMapSelectionLists(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetAllMaps(const FRequest_SandboxGetAllMaps& Request, const FDelegate_SandboxGetAllMaps& Delegate = FDelegate_SandboxGetAllMaps(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetMap(const FRequest_SandboxGetMap& Request, const FDelegate_SandboxGetMap& Delegate = FDelegate_SandboxGetMap(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetMapSelectionList(const FRequest_SandboxGetMapSelectionList& Request, const FDelegate_SandboxGetMapSelectionList& Delegate = FDelegate_SandboxGetMapSelectionList(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetMapSelectionListEntry(const FRequest_SandboxGetMapSelectionListEntry& Request, const FDelegate_SandboxGetMapSelectionListEntry& Delegate = FDelegate_SandboxGetMapSelectionListEntry(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxPatchMap(const FRequest_SandboxPatchMap& Request, const FDelegate_SandboxPatchMap& Delegate = FDelegate_SandboxPatchMap(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxPatchSelectionList(const FRequest_SandboxPatchSelectionList& Request, const FDelegate_SandboxPatchSelectionList& Delegate = FDelegate_SandboxPatchSelectionList(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxPatchSelectionListEntry(const FRequest_SandboxPatchSelectionListEntry& Request, const FDelegate_SandboxPatchSelectionListEntry& Delegate = FDelegate_SandboxPatchSelectionListEntry(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxPutMap(const FRequest_SandboxPutMap& Request, const FDelegate_SandboxPutMap& Delegate = FDelegate_SandboxPutMap(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxPutSelectionList(const FRequest_SandboxPutSelectionList& Request, const FDelegate_SandboxPutSelectionList& Delegate = FDelegate_SandboxPutSelectionList(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxPutSelectionListEntry(const FRequest_SandboxPutSelectionListEntry& Request, const FDelegate_SandboxPutSelectionListEntry& Delegate = FDelegate_SandboxPutSelectionListEntry(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);

private:
    void OnSandboxCreateMapResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxCreateMap Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxCreateMapSelectionListEntryResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxCreateMapSelectionListEntry Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxCreateSelectionListResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxCreateSelectionList Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxDeleteMapResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxDeleteMap Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxDeleteMapSelectionListResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxDeleteMapSelectionList Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxDeleteMapSelectionListEntryResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxDeleteMapSelectionListEntry Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetAllMapSelectionListEntriesForMapSelectionListResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetAllMapSelectionListEntriesForMapSelectionList Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetAllMapSelectionListsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetAllMapSelectionLists Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetAllMapsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetAllMaps Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetMapResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetMap Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetMapSelectionListResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetMapSelectionList Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetMapSelectionListEntryResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetMapSelectionListEntry Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxPatchMapResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxPatchMap Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxPatchSelectionListResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxPatchSelectionList Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxPatchSelectionListEntryResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxPatchSelectionListEntry Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxPutMapResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxPutMap Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxPutSelectionListResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxPutSelectionList Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxPutSelectionListEntryResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxPutSelectionListEntry Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};

/* Create Map
 *
 * Add a new Map for a sandbox
 *                  
 * Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxCreateMap : public FRequest
{
    FRequest_SandboxCreateMap();
    virtual ~FRequest_SandboxCreateMap() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevMapRequest MapRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxCreateMap : public FResponse
{
    FResponse_SandboxCreateMap(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxCreateMap() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMap Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevMap& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxCreateMap
{
    typedef FRequest_SandboxCreateMap Request;
    typedef FResponse_SandboxCreateMap Response;
    typedef FDelegate_SandboxCreateMap Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxCreateMap(InRequest, InDelegate, Priority); }
};

/* Create Map Selection List Entry
 *
 * Add a new Map Selection List Entry for a Map Selection List
 * 
 * Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxCreateMapSelectionListEntry : public FRequest
{
    FRequest_SandboxCreateMapSelectionListEntry();
    virtual ~FRequest_SandboxCreateMapSelectionListEntry() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid MapSelectionListId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevMapSelectionListEntryRequest MapSelectionListEntryRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxCreateMapSelectionListEntry : public FResponse
{
    FResponse_SandboxCreateMapSelectionListEntry(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxCreateMapSelectionListEntry() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMapSelectionListEntry Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevMapSelectionListEntry& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxCreateMapSelectionListEntry
{
    typedef FRequest_SandboxCreateMapSelectionListEntry Request;
    typedef FResponse_SandboxCreateMapSelectionListEntry Response;
    typedef FDelegate_SandboxCreateMapSelectionListEntry Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxCreateMapSelectionListEntry(InRequest, InDelegate, Priority); }
};

/* Create Selection List
 *
 * Add a new Map Selection List for a sandbox
 * 
 * Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxCreateSelectionList : public FRequest
{
    FRequest_SandboxCreateSelectionList();
    virtual ~FRequest_SandboxCreateSelectionList() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevMapSelectionListRequest MapSelectionListRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxCreateSelectionList : public FResponse
{
    FResponse_SandboxCreateSelectionList(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxCreateSelectionList() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMapSelectionList Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevMapSelectionList& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxCreateSelectionList
{
    typedef FRequest_SandboxCreateSelectionList Request;
    typedef FResponse_SandboxCreateSelectionList Response;
    typedef FDelegate_SandboxCreateSelectionList Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxCreateSelectionList(InRequest, InDelegate, Priority); }
};

/* Delete Map
 *
 * Delete a specific Map in a sandbox
 * 
 * Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxDeleteMap : public FRequest
{
    FRequest_SandboxDeleteMap();
    virtual ~FRequest_SandboxDeleteMap() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid MapId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxDeleteMap : public FResponse
{
    FResponse_SandboxDeleteMap(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxDeleteMap() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    


    // Manual Response Helpers
    /* Response 204
    Successful Response
    */

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxDeleteMap
{
    typedef FRequest_SandboxDeleteMap Request;
    typedef FResponse_SandboxDeleteMap Response;
    typedef FDelegate_SandboxDeleteMap Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxDeleteMap(InRequest, InDelegate, Priority); }
};

/* Delete Map Selection List
 *
 * Delete a specific Map Selection List in a sandbox
 * 
 * Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxDeleteMapSelectionList : public FRequest
{
    FRequest_SandboxDeleteMapSelectionList();
    virtual ~FRequest_SandboxDeleteMapSelectionList() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid MapSelectionListId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxDeleteMapSelectionList : public FResponse
{
    FResponse_SandboxDeleteMapSelectionList(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxDeleteMapSelectionList() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    


    // Manual Response Helpers
    /* Response 204
    Successful Response
    */

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxDeleteMapSelectionList
{
    typedef FRequest_SandboxDeleteMapSelectionList Request;
    typedef FResponse_SandboxDeleteMapSelectionList Response;
    typedef FDelegate_SandboxDeleteMapSelectionList Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxDeleteMapSelectionList(InRequest, InDelegate, Priority); }
};

/* Delete Map Selection List Entry
 *
 * Delete a specific Map Selection List Entry for a Map Selection List
 * 
 * Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxDeleteMapSelectionListEntry : public FRequest
{
    FRequest_SandboxDeleteMapSelectionListEntry();
    virtual ~FRequest_SandboxDeleteMapSelectionListEntry() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid MapSelectionListId;
    FGuid MapSelectionListEntryId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxDeleteMapSelectionListEntry : public FResponse
{
    FResponse_SandboxDeleteMapSelectionListEntry(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxDeleteMapSelectionListEntry() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    


    // Manual Response Helpers
    /* Response 204
    Successful Response
    */

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxDeleteMapSelectionListEntry
{
    typedef FRequest_SandboxDeleteMapSelectionListEntry Request;
    typedef FResponse_SandboxDeleteMapSelectionListEntry Response;
    typedef FDelegate_SandboxDeleteMapSelectionListEntry Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxDeleteMapSelectionListEntry(InRequest, InDelegate, Priority); }
};

/* Get All Map Selection List Entries For Map Selection List
 *
 * Get all Map Selection List entries for a specific Map Selection List
 * 
 * Requires any of permissions: 
 * 	 sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetAllMapSelectionListEntriesForMapSelectionList : public FRequest
{
    FRequest_SandboxGetAllMapSelectionListEntriesForMapSelectionList();
    virtual ~FRequest_SandboxGetAllMapSelectionListEntriesForMapSelectionList() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid MapSelectionListId;
    /* Sandbox ID */
    FGuid SandboxId;
    /* The maximum number of elements to be returned per call */
    TOptional<int32> PageSize;
    /* Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration */
    TOptional<FString> Cursor;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetAllMapSelectionListEntriesForMapSelectionList : public FResponse
{
    FResponse_SandboxGetAllMapSelectionListEntriesForMapSelectionList(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetAllMapSelectionListEntriesForMapSelectionList() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevAllMapSelectionListEntriesResponse Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevAllMapSelectionListEntriesResponse& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetAllMapSelectionListEntriesForMapSelectionList
{
    typedef FRequest_SandboxGetAllMapSelectionListEntriesForMapSelectionList Request;
    typedef FResponse_SandboxGetAllMapSelectionListEntriesForMapSelectionList Response;
    typedef FDelegate_SandboxGetAllMapSelectionListEntriesForMapSelectionList Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetAllMapSelectionListEntriesForMapSelectionList(InRequest, InDelegate, Priority); }
};

/* Get All Map Selection Lists
 *
 * Get all MapSelectionLists for a sandbox
 * 
 * Requires any of permissions: 
 * 	 sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetAllMapSelectionLists : public FRequest
{
    FRequest_SandboxGetAllMapSelectionLists();
    virtual ~FRequest_SandboxGetAllMapSelectionLists() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    /* The maximum number of elements to be returned per call */
    TOptional<int32> PageSize;
    /* Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration */
    TOptional<FString> Cursor;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetAllMapSelectionLists : public FResponse
{
    FResponse_SandboxGetAllMapSelectionLists(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetAllMapSelectionLists() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevAllMapSelectionListsResponse Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevAllMapSelectionListsResponse& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetAllMapSelectionLists
{
    typedef FRequest_SandboxGetAllMapSelectionLists Request;
    typedef FResponse_SandboxGetAllMapSelectionLists Response;
    typedef FDelegate_SandboxGetAllMapSelectionLists Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetAllMapSelectionLists(InRequest, InDelegate, Priority); }
};

/* Get All Maps
 *
 * Get all Maps for a sandbox
 * 
 * Requires any of permissions: 
 * 	 sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetAllMaps : public FRequest
{
    FRequest_SandboxGetAllMaps();
    virtual ~FRequest_SandboxGetAllMaps() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    /* The maximum number of elements to be returned per call */
    TOptional<int32> PageSize;
    /* Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration */
    TOptional<FString> Cursor;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetAllMaps : public FResponse
{
    FResponse_SandboxGetAllMaps(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetAllMaps() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevAllMapsResponse Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevAllMapsResponse& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetAllMaps
{
    typedef FRequest_SandboxGetAllMaps Request;
    typedef FResponse_SandboxGetAllMaps Response;
    typedef FDelegate_SandboxGetAllMaps Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetAllMaps(InRequest, InDelegate, Priority); }
};

/* Get Map
 *
 * Get a specific Map for a sandbox
 *         
 * Requires any of permissions: 
 * 	 sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetMap : public FRequest
{
    FRequest_SandboxGetMap();
    virtual ~FRequest_SandboxGetMap() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid MapId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetMap : public FResponse
{
    FResponse_SandboxGetMap(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetMap() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMap Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevMap& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetMap
{
    typedef FRequest_SandboxGetMap Request;
    typedef FResponse_SandboxGetMap Response;
    typedef FDelegate_SandboxGetMap Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetMap(InRequest, InDelegate, Priority); }
};

/* Get Map Selection List
 *
 * Get a specific Map Selection List for a sandbox
 * 
 * Requires any of permissions: 
 * 	 sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetMapSelectionList : public FRequest
{
    FRequest_SandboxGetMapSelectionList();
    virtual ~FRequest_SandboxGetMapSelectionList() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid MapSelectionListId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetMapSelectionList : public FResponse
{
    FResponse_SandboxGetMapSelectionList(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetMapSelectionList() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMapSelectionListFlattened Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevMapSelectionListFlattened& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetMapSelectionList
{
    typedef FRequest_SandboxGetMapSelectionList Request;
    typedef FResponse_SandboxGetMapSelectionList Response;
    typedef FDelegate_SandboxGetMapSelectionList Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetMapSelectionList(InRequest, InDelegate, Priority); }
};

/* Get Map Selection List Entry
 *
 * Get a specific Map Selection List Entry for a Map Selection List
 * 
 * Requires any of permissions: 
 * 	 sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetMapSelectionListEntry : public FRequest
{
    FRequest_SandboxGetMapSelectionListEntry();
    virtual ~FRequest_SandboxGetMapSelectionListEntry() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid MapSelectionListId;
    FGuid MapSelectionListEntryId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetMapSelectionListEntry : public FResponse
{
    FResponse_SandboxGetMapSelectionListEntry(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetMapSelectionListEntry() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMapSelectionListEntryFlattened Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevMapSelectionListEntryFlattened& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetMapSelectionListEntry
{
    typedef FRequest_SandboxGetMapSelectionListEntry Request;
    typedef FResponse_SandboxGetMapSelectionListEntry Response;
    typedef FDelegate_SandboxGetMapSelectionListEntry Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetMapSelectionListEntry(InRequest, InDelegate, Priority); }
};

/* Patch Map
 *
 * Update a specific Map in a sandbox
 *                   
 * Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxPatchMap : public FRequest
{
    FRequest_SandboxPatchMap();
    virtual ~FRequest_SandboxPatchMap() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid MapId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevMapUpdateRequest MapUpdateRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxPatchMap : public FResponse
{
    FResponse_SandboxPatchMap(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxPatchMap() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMap Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevMap& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxPatchMap
{
    typedef FRequest_SandboxPatchMap Request;
    typedef FResponse_SandboxPatchMap Response;
    typedef FDelegate_SandboxPatchMap Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxPatchMap(InRequest, InDelegate, Priority); }
};

/* Patch Selection List
 *
 * Update an existing Map Selection List for a sandbox
 * 
 * Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxPatchSelectionList : public FRequest
{
    FRequest_SandboxPatchSelectionList();
    virtual ~FRequest_SandboxPatchSelectionList() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid MapSelectionListId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevMapSelectionListUpdateRequest MapSelectionListUpdateRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxPatchSelectionList : public FResponse
{
    FResponse_SandboxPatchSelectionList(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxPatchSelectionList() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMapSelectionList Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevMapSelectionList& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxPatchSelectionList
{
    typedef FRequest_SandboxPatchSelectionList Request;
    typedef FResponse_SandboxPatchSelectionList Response;
    typedef FDelegate_SandboxPatchSelectionList Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxPatchSelectionList(InRequest, InDelegate, Priority); }
};

/* Patch Selection List Entry
 *
 * Update an existing Map Selection List Entry for a Map Selection List
 * 
 * Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxPatchSelectionListEntry : public FRequest
{
    FRequest_SandboxPatchSelectionListEntry();
    virtual ~FRequest_SandboxPatchSelectionListEntry() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid MapSelectionListId;
    FGuid MapSelectionListEntryId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevMapSelectionListEntryUpdateRequest MapSelectionListEntryUpdateRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxPatchSelectionListEntry : public FResponse
{
    FResponse_SandboxPatchSelectionListEntry(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxPatchSelectionListEntry() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMapSelectionListEntry Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevMapSelectionListEntry& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxPatchSelectionListEntry
{
    typedef FRequest_SandboxPatchSelectionListEntry Request;
    typedef FResponse_SandboxPatchSelectionListEntry Response;
    typedef FDelegate_SandboxPatchSelectionListEntry Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxPatchSelectionListEntry(InRequest, InDelegate, Priority); }
};

/* Put Map
 *
 * Update a specific Map in a sandbox
 * 
 * Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxPutMap : public FRequest
{
    FRequest_SandboxPutMap();
    virtual ~FRequest_SandboxPutMap() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid MapId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevMapRequest MapRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxPutMap : public FResponse
{
    FResponse_SandboxPutMap(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxPutMap() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMap Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevMap& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxPutMap
{
    typedef FRequest_SandboxPutMap Request;
    typedef FResponse_SandboxPutMap Response;
    typedef FDelegate_SandboxPutMap Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxPutMap(InRequest, InDelegate, Priority); }
};

/* Put Selection List
 *
 * Update an existing Map Selection List for a sandbox
 *                 
 * Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxPutSelectionList : public FRequest
{
    FRequest_SandboxPutSelectionList();
    virtual ~FRequest_SandboxPutSelectionList() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid MapSelectionListId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevMapSelectionListBase MapSelectionListBase;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxPutSelectionList : public FResponse
{
    FResponse_SandboxPutSelectionList(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxPutSelectionList() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMapSelectionList Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevMapSelectionList& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxPutSelectionList
{
    typedef FRequest_SandboxPutSelectionList Request;
    typedef FResponse_SandboxPutSelectionList Response;
    typedef FDelegate_SandboxPutSelectionList Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxPutSelectionList(InRequest, InDelegate, Priority); }
};

/* Put Selection List Entry
 *
 * Update an existing Map Selection List Entry for a Map Selection List
 * 
 * Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxPutSelectionListEntry : public FRequest
{
    FRequest_SandboxPutSelectionListEntry();
    virtual ~FRequest_SandboxPutSelectionListEntry() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid MapSelectionListId;
    FGuid MapSelectionListEntryId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevMapSelectionListEntryRequest MapSelectionListEntryRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxPutSelectionListEntry : public FResponse
{
    FResponse_SandboxPutSelectionListEntry(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxPutSelectionListEntry() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMapSelectionListEntry Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevMapSelectionListEntry& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxPutSelectionListEntry
{
    typedef FRequest_SandboxPutSelectionListEntry Request;
    typedef FResponse_SandboxPutSelectionListEntry Response;
    typedef FDelegate_SandboxPutSelectionListEntry Delegate;
    typedef FMapsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxPutSelectionListEntry(InRequest, InDelegate, Priority); }
};


}
