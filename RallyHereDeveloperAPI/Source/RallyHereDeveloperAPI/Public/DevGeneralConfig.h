// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereDeveloperAPIBaseModel.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevAmazonConfig.h"
#include "DevAnonConfig.h"
#include "DevAppleConfig.h"
#include "DevBasicConfig.h"
#include "DevEpicOnlineServicesConfig.h"
#include "DevGoogleConfig.h"
#include "DevLegacyConfig.h"
#include "DevNintendoConfig.h"
#include "DevPlaystationConfig.h"
#include "DevSocialConfig.h"
#include "DevSteamConfig.h"
#include "DevTwitchConfig.h"
#include "DevVivoxConfig.h"
#include "DevXboxConfig.h"
#include "DevGeneralConfig.generated.h"

/** @defgroup RHAPI_DevGeneralConfig RallyHere API Model DevGeneralConfig
 *  @{
 */

/**
 * @brief General config about a sandbox that doesn&#39;t have a more appropriate breakdown
 */
USTRUCT(BlueprintType)
struct RALLYHEREDEVELOPERAPI_API FRHAPI_DevGeneralConfig : public FRHAPI_DevModel
{
    GENERATED_BODY()

    /**
    * @brief Fills this object with data from the passed in JSON
    *
    * @param [in] JsonValue Data from the API call.
    *
    * @return true if parsing of the JSON data was successful.
    */
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

    /**
    * @brief Writes the data from this object into the specified JSON Writer stream
    *
    * @param [in] Writer JSON Writer stream to push .
    */
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /** @brief Account ID of the user who last modified the resource */
    FGuid LastModifiedAccountId_Optional{  };
    /** @brief true if LastModifiedAccountId_Optional has been set to a value */
    bool LastModifiedAccountId_IsSet{ false };
    /** @brief Gets the value of LastModifiedAccountId_Optional, regardless of it having been set */
    FGuid& GetLastModifiedAccountId() { return LastModifiedAccountId_Optional; }
    /** @brief Gets the value of LastModifiedAccountId_Optional, regardless of it having been set */
    const FGuid& GetLastModifiedAccountId() const { return LastModifiedAccountId_Optional; }
    /** @brief Gets the value of LastModifiedAccountId_Optional, if it has been set, otherwise it returns DefaultValue */
    const FGuid& GetLastModifiedAccountId(const FGuid& DefaultValue) const { if (LastModifiedAccountId_IsSet) return LastModifiedAccountId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of LastModifiedAccountId_Optional and returns true if it has been set, otherwise returns false */
    bool GetLastModifiedAccountId(FGuid& OutValue) const { if (LastModifiedAccountId_IsSet) OutValue = LastModifiedAccountId_Optional; return LastModifiedAccountId_IsSet; }
    /** @brief Returns a pointer to LastModifiedAccountId_Optional, if it has been set, otherwise returns nullptr */
    FGuid* GetLastModifiedAccountIdOrNull() { if (LastModifiedAccountId_IsSet) return &LastModifiedAccountId_Optional; return nullptr; }
    /** @brief Returns a pointer to LastModifiedAccountId_Optional, if it has been set, otherwise returns nullptr */
    const FGuid* GetLastModifiedAccountIdOrNull() const { if (LastModifiedAccountId_IsSet) return &LastModifiedAccountId_Optional; return nullptr; }
    /** @brief Sets the value of LastModifiedAccountId_Optional and also sets LastModifiedAccountId_IsSet to true */
    void SetLastModifiedAccountId(FGuid NewValue) { LastModifiedAccountId_Optional = NewValue; LastModifiedAccountId_IsSet = true; }
     /** @brief Clears the value of LastModifiedAccountId_Optional and sets LastModifiedAccountId_IsSet to false */
    void ClearLastModifiedAccountId() { LastModifiedAccountId_IsSet = false; }

    /** @brief Timestamp of when the resource was last modified */
    FDateTime LastModifiedTimestamp_Optional{  };
    /** @brief true if LastModifiedTimestamp_Optional has been set to a value */
    bool LastModifiedTimestamp_IsSet{ false };
    /** @brief Gets the value of LastModifiedTimestamp_Optional, regardless of it having been set */
    FDateTime& GetLastModifiedTimestamp() { return LastModifiedTimestamp_Optional; }
    /** @brief Gets the value of LastModifiedTimestamp_Optional, regardless of it having been set */
    const FDateTime& GetLastModifiedTimestamp() const { return LastModifiedTimestamp_Optional; }
    /** @brief Gets the value of LastModifiedTimestamp_Optional, if it has been set, otherwise it returns DefaultValue */
    const FDateTime& GetLastModifiedTimestamp(const FDateTime& DefaultValue) const { if (LastModifiedTimestamp_IsSet) return LastModifiedTimestamp_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of LastModifiedTimestamp_Optional and returns true if it has been set, otherwise returns false */
    bool GetLastModifiedTimestamp(FDateTime& OutValue) const { if (LastModifiedTimestamp_IsSet) OutValue = LastModifiedTimestamp_Optional; return LastModifiedTimestamp_IsSet; }
    /** @brief Returns a pointer to LastModifiedTimestamp_Optional, if it has been set, otherwise returns nullptr */
    FDateTime* GetLastModifiedTimestampOrNull() { if (LastModifiedTimestamp_IsSet) return &LastModifiedTimestamp_Optional; return nullptr; }
    /** @brief Returns a pointer to LastModifiedTimestamp_Optional, if it has been set, otherwise returns nullptr */
    const FDateTime* GetLastModifiedTimestampOrNull() const { if (LastModifiedTimestamp_IsSet) return &LastModifiedTimestamp_Optional; return nullptr; }
    /** @brief Sets the value of LastModifiedTimestamp_Optional and also sets LastModifiedTimestamp_IsSet to true */
    void SetLastModifiedTimestamp(FDateTime NewValue) { LastModifiedTimestamp_Optional = NewValue; LastModifiedTimestamp_IsSet = true; }
     /** @brief Clears the value of LastModifiedTimestamp_Optional and sets LastModifiedTimestamp_IsSet to false */
    void ClearLastModifiedTimestamp() { LastModifiedTimestamp_IsSet = false; }

    /** @brief Timestamp of when the resource was created */
    FDateTime CreatedTimestamp_Optional{  };
    /** @brief true if CreatedTimestamp_Optional has been set to a value */
    bool CreatedTimestamp_IsSet{ false };
    /** @brief Gets the value of CreatedTimestamp_Optional, regardless of it having been set */
    FDateTime& GetCreatedTimestamp() { return CreatedTimestamp_Optional; }
    /** @brief Gets the value of CreatedTimestamp_Optional, regardless of it having been set */
    const FDateTime& GetCreatedTimestamp() const { return CreatedTimestamp_Optional; }
    /** @brief Gets the value of CreatedTimestamp_Optional, if it has been set, otherwise it returns DefaultValue */
    const FDateTime& GetCreatedTimestamp(const FDateTime& DefaultValue) const { if (CreatedTimestamp_IsSet) return CreatedTimestamp_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of CreatedTimestamp_Optional and returns true if it has been set, otherwise returns false */
    bool GetCreatedTimestamp(FDateTime& OutValue) const { if (CreatedTimestamp_IsSet) OutValue = CreatedTimestamp_Optional; return CreatedTimestamp_IsSet; }
    /** @brief Returns a pointer to CreatedTimestamp_Optional, if it has been set, otherwise returns nullptr */
    FDateTime* GetCreatedTimestampOrNull() { if (CreatedTimestamp_IsSet) return &CreatedTimestamp_Optional; return nullptr; }
    /** @brief Returns a pointer to CreatedTimestamp_Optional, if it has been set, otherwise returns nullptr */
    const FDateTime* GetCreatedTimestampOrNull() const { if (CreatedTimestamp_IsSet) return &CreatedTimestamp_Optional; return nullptr; }
    /** @brief Sets the value of CreatedTimestamp_Optional and also sets CreatedTimestamp_IsSet to true */
    void SetCreatedTimestamp(FDateTime NewValue) { CreatedTimestamp_Optional = NewValue; CreatedTimestamp_IsSet = true; }
     /** @brief Clears the value of CreatedTimestamp_Optional and sets CreatedTimestamp_IsSet to false */
    void ClearCreatedTimestamp() { CreatedTimestamp_IsSet = false; }

    FRHAPI_DevSocialConfig Social_Optional{  };
    /** @brief true if Social_Optional has been set to a value */
    bool Social_IsSet{ false };
    /** @brief Gets the value of Social_Optional, regardless of it having been set */
    FRHAPI_DevSocialConfig& GetSocial() { return Social_Optional; }
    /** @brief Gets the value of Social_Optional, regardless of it having been set */
    const FRHAPI_DevSocialConfig& GetSocial() const { return Social_Optional; }
    /** @brief Gets the value of Social_Optional, if it has been set, otherwise it returns DefaultValue */
    const FRHAPI_DevSocialConfig& GetSocial(const FRHAPI_DevSocialConfig& DefaultValue) const { if (Social_IsSet) return Social_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Social_Optional and returns true if it has been set, otherwise returns false */
    bool GetSocial(FRHAPI_DevSocialConfig& OutValue) const { if (Social_IsSet) OutValue = Social_Optional; return Social_IsSet; }
    /** @brief Returns a pointer to Social_Optional, if it has been set, otherwise returns nullptr */
    FRHAPI_DevSocialConfig* GetSocialOrNull() { if (Social_IsSet) return &Social_Optional; return nullptr; }
    /** @brief Returns a pointer to Social_Optional, if it has been set, otherwise returns nullptr */
    const FRHAPI_DevSocialConfig* GetSocialOrNull() const { if (Social_IsSet) return &Social_Optional; return nullptr; }
    /** @brief Sets the value of Social_Optional and also sets Social_IsSet to true */
    void SetSocial(FRHAPI_DevSocialConfig NewValue) { Social_Optional = NewValue; Social_IsSet = true; }
     /** @brief Clears the value of Social_Optional and sets Social_IsSet to false */
    void ClearSocial() { Social_IsSet = false; }

    FRHAPI_DevBasicConfig Basic_Optional{  };
    /** @brief true if Basic_Optional has been set to a value */
    bool Basic_IsSet{ false };
    /** @brief Gets the value of Basic_Optional, regardless of it having been set */
    FRHAPI_DevBasicConfig& GetBasic() { return Basic_Optional; }
    /** @brief Gets the value of Basic_Optional, regardless of it having been set */
    const FRHAPI_DevBasicConfig& GetBasic() const { return Basic_Optional; }
    /** @brief Gets the value of Basic_Optional, if it has been set, otherwise it returns DefaultValue */
    const FRHAPI_DevBasicConfig& GetBasic(const FRHAPI_DevBasicConfig& DefaultValue) const { if (Basic_IsSet) return Basic_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Basic_Optional and returns true if it has been set, otherwise returns false */
    bool GetBasic(FRHAPI_DevBasicConfig& OutValue) const { if (Basic_IsSet) OutValue = Basic_Optional; return Basic_IsSet; }
    /** @brief Returns a pointer to Basic_Optional, if it has been set, otherwise returns nullptr */
    FRHAPI_DevBasicConfig* GetBasicOrNull() { if (Basic_IsSet) return &Basic_Optional; return nullptr; }
    /** @brief Returns a pointer to Basic_Optional, if it has been set, otherwise returns nullptr */
    const FRHAPI_DevBasicConfig* GetBasicOrNull() const { if (Basic_IsSet) return &Basic_Optional; return nullptr; }
    /** @brief Sets the value of Basic_Optional and also sets Basic_IsSet to true */
    void SetBasic(FRHAPI_DevBasicConfig NewValue) { Basic_Optional = NewValue; Basic_IsSet = true; }
     /** @brief Clears the value of Basic_Optional and sets Basic_IsSet to false */
    void ClearBasic() { Basic_IsSet = false; }

    FRHAPI_DevAnonConfig Anon_Optional{  };
    /** @brief true if Anon_Optional has been set to a value */
    bool Anon_IsSet{ false };
    /** @brief Gets the value of Anon_Optional, regardless of it having been set */
    FRHAPI_DevAnonConfig& GetAnon() { return Anon_Optional; }
    /** @brief Gets the value of Anon_Optional, regardless of it having been set */
    const FRHAPI_DevAnonConfig& GetAnon() const { return Anon_Optional; }
    /** @brief Gets the value of Anon_Optional, if it has been set, otherwise it returns DefaultValue */
    const FRHAPI_DevAnonConfig& GetAnon(const FRHAPI_DevAnonConfig& DefaultValue) const { if (Anon_IsSet) return Anon_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Anon_Optional and returns true if it has been set, otherwise returns false */
    bool GetAnon(FRHAPI_DevAnonConfig& OutValue) const { if (Anon_IsSet) OutValue = Anon_Optional; return Anon_IsSet; }
    /** @brief Returns a pointer to Anon_Optional, if it has been set, otherwise returns nullptr */
    FRHAPI_DevAnonConfig* GetAnonOrNull() { if (Anon_IsSet) return &Anon_Optional; return nullptr; }
    /** @brief Returns a pointer to Anon_Optional, if it has been set, otherwise returns nullptr */
    const FRHAPI_DevAnonConfig* GetAnonOrNull() const { if (Anon_IsSet) return &Anon_Optional; return nullptr; }
    /** @brief Sets the value of Anon_Optional and also sets Anon_IsSet to true */
    void SetAnon(FRHAPI_DevAnonConfig NewValue) { Anon_Optional = NewValue; Anon_IsSet = true; }
     /** @brief Clears the value of Anon_Optional and sets Anon_IsSet to false */
    void ClearAnon() { Anon_IsSet = false; }

    FRHAPI_DevEpicOnlineServicesConfig Epic_Optional{  };
    /** @brief true if Epic_Optional has been set to a value */
    bool Epic_IsSet{ false };
    /** @brief Gets the value of Epic_Optional, regardless of it having been set */
    FRHAPI_DevEpicOnlineServicesConfig& GetEpic() { return Epic_Optional; }
    /** @brief Gets the value of Epic_Optional, regardless of it having been set */
    const FRHAPI_DevEpicOnlineServicesConfig& GetEpic() const { return Epic_Optional; }
    /** @brief Gets the value of Epic_Optional, if it has been set, otherwise it returns DefaultValue */
    const FRHAPI_DevEpicOnlineServicesConfig& GetEpic(const FRHAPI_DevEpicOnlineServicesConfig& DefaultValue) const { if (Epic_IsSet) return Epic_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Epic_Optional and returns true if it has been set, otherwise returns false */
    bool GetEpic(FRHAPI_DevEpicOnlineServicesConfig& OutValue) const { if (Epic_IsSet) OutValue = Epic_Optional; return Epic_IsSet; }
    /** @brief Returns a pointer to Epic_Optional, if it has been set, otherwise returns nullptr */
    FRHAPI_DevEpicOnlineServicesConfig* GetEpicOrNull() { if (Epic_IsSet) return &Epic_Optional; return nullptr; }
    /** @brief Returns a pointer to Epic_Optional, if it has been set, otherwise returns nullptr */
    const FRHAPI_DevEpicOnlineServicesConfig* GetEpicOrNull() const { if (Epic_IsSet) return &Epic_Optional; return nullptr; }
    /** @brief Sets the value of Epic_Optional and also sets Epic_IsSet to true */
    void SetEpic(FRHAPI_DevEpicOnlineServicesConfig NewValue) { Epic_Optional = NewValue; Epic_IsSet = true; }
     /** @brief Clears the value of Epic_Optional and sets Epic_IsSet to false */
    void ClearEpic() { Epic_IsSet = false; }

    FRHAPI_DevSteamConfig Steam_Optional{  };
    /** @brief true if Steam_Optional has been set to a value */
    bool Steam_IsSet{ false };
    /** @brief Gets the value of Steam_Optional, regardless of it having been set */
    FRHAPI_DevSteamConfig& GetSteam() { return Steam_Optional; }
    /** @brief Gets the value of Steam_Optional, regardless of it having been set */
    const FRHAPI_DevSteamConfig& GetSteam() const { return Steam_Optional; }
    /** @brief Gets the value of Steam_Optional, if it has been set, otherwise it returns DefaultValue */
    const FRHAPI_DevSteamConfig& GetSteam(const FRHAPI_DevSteamConfig& DefaultValue) const { if (Steam_IsSet) return Steam_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Steam_Optional and returns true if it has been set, otherwise returns false */
    bool GetSteam(FRHAPI_DevSteamConfig& OutValue) const { if (Steam_IsSet) OutValue = Steam_Optional; return Steam_IsSet; }
    /** @brief Returns a pointer to Steam_Optional, if it has been set, otherwise returns nullptr */
    FRHAPI_DevSteamConfig* GetSteamOrNull() { if (Steam_IsSet) return &Steam_Optional; return nullptr; }
    /** @brief Returns a pointer to Steam_Optional, if it has been set, otherwise returns nullptr */
    const FRHAPI_DevSteamConfig* GetSteamOrNull() const { if (Steam_IsSet) return &Steam_Optional; return nullptr; }
    /** @brief Sets the value of Steam_Optional and also sets Steam_IsSet to true */
    void SetSteam(FRHAPI_DevSteamConfig NewValue) { Steam_Optional = NewValue; Steam_IsSet = true; }
     /** @brief Clears the value of Steam_Optional and sets Steam_IsSet to false */
    void ClearSteam() { Steam_IsSet = false; }

    FRHAPI_DevPlaystationConfig Playstation_Optional{  };
    /** @brief true if Playstation_Optional has been set to a value */
    bool Playstation_IsSet{ false };
    /** @brief Gets the value of Playstation_Optional, regardless of it having been set */
    FRHAPI_DevPlaystationConfig& GetPlaystation() { return Playstation_Optional; }
    /** @brief Gets the value of Playstation_Optional, regardless of it having been set */
    const FRHAPI_DevPlaystationConfig& GetPlaystation() const { return Playstation_Optional; }
    /** @brief Gets the value of Playstation_Optional, if it has been set, otherwise it returns DefaultValue */
    const FRHAPI_DevPlaystationConfig& GetPlaystation(const FRHAPI_DevPlaystationConfig& DefaultValue) const { if (Playstation_IsSet) return Playstation_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Playstation_Optional and returns true if it has been set, otherwise returns false */
    bool GetPlaystation(FRHAPI_DevPlaystationConfig& OutValue) const { if (Playstation_IsSet) OutValue = Playstation_Optional; return Playstation_IsSet; }
    /** @brief Returns a pointer to Playstation_Optional, if it has been set, otherwise returns nullptr */
    FRHAPI_DevPlaystationConfig* GetPlaystationOrNull() { if (Playstation_IsSet) return &Playstation_Optional; return nullptr; }
    /** @brief Returns a pointer to Playstation_Optional, if it has been set, otherwise returns nullptr */
    const FRHAPI_DevPlaystationConfig* GetPlaystationOrNull() const { if (Playstation_IsSet) return &Playstation_Optional; return nullptr; }
    /** @brief Sets the value of Playstation_Optional and also sets Playstation_IsSet to true */
    void SetPlaystation(FRHAPI_DevPlaystationConfig NewValue) { Playstation_Optional = NewValue; Playstation_IsSet = true; }
     /** @brief Clears the value of Playstation_Optional and sets Playstation_IsSet to false */
    void ClearPlaystation() { Playstation_IsSet = false; }

    FRHAPI_DevNintendoConfig Nintendo_Optional{  };
    /** @brief true if Nintendo_Optional has been set to a value */
    bool Nintendo_IsSet{ false };
    /** @brief Gets the value of Nintendo_Optional, regardless of it having been set */
    FRHAPI_DevNintendoConfig& GetNintendo() { return Nintendo_Optional; }
    /** @brief Gets the value of Nintendo_Optional, regardless of it having been set */
    const FRHAPI_DevNintendoConfig& GetNintendo() const { return Nintendo_Optional; }
    /** @brief Gets the value of Nintendo_Optional, if it has been set, otherwise it returns DefaultValue */
    const FRHAPI_DevNintendoConfig& GetNintendo(const FRHAPI_DevNintendoConfig& DefaultValue) const { if (Nintendo_IsSet) return Nintendo_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Nintendo_Optional and returns true if it has been set, otherwise returns false */
    bool GetNintendo(FRHAPI_DevNintendoConfig& OutValue) const { if (Nintendo_IsSet) OutValue = Nintendo_Optional; return Nintendo_IsSet; }
    /** @brief Returns a pointer to Nintendo_Optional, if it has been set, otherwise returns nullptr */
    FRHAPI_DevNintendoConfig* GetNintendoOrNull() { if (Nintendo_IsSet) return &Nintendo_Optional; return nullptr; }
    /** @brief Returns a pointer to Nintendo_Optional, if it has been set, otherwise returns nullptr */
    const FRHAPI_DevNintendoConfig* GetNintendoOrNull() const { if (Nintendo_IsSet) return &Nintendo_Optional; return nullptr; }
    /** @brief Sets the value of Nintendo_Optional and also sets Nintendo_IsSet to true */
    void SetNintendo(FRHAPI_DevNintendoConfig NewValue) { Nintendo_Optional = NewValue; Nintendo_IsSet = true; }
     /** @brief Clears the value of Nintendo_Optional and sets Nintendo_IsSet to false */
    void ClearNintendo() { Nintendo_IsSet = false; }

    FRHAPI_DevTwitchConfig Twitch_Optional{  };
    /** @brief true if Twitch_Optional has been set to a value */
    bool Twitch_IsSet{ false };
    /** @brief Gets the value of Twitch_Optional, regardless of it having been set */
    FRHAPI_DevTwitchConfig& GetTwitch() { return Twitch_Optional; }
    /** @brief Gets the value of Twitch_Optional, regardless of it having been set */
    const FRHAPI_DevTwitchConfig& GetTwitch() const { return Twitch_Optional; }
    /** @brief Gets the value of Twitch_Optional, if it has been set, otherwise it returns DefaultValue */
    const FRHAPI_DevTwitchConfig& GetTwitch(const FRHAPI_DevTwitchConfig& DefaultValue) const { if (Twitch_IsSet) return Twitch_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Twitch_Optional and returns true if it has been set, otherwise returns false */
    bool GetTwitch(FRHAPI_DevTwitchConfig& OutValue) const { if (Twitch_IsSet) OutValue = Twitch_Optional; return Twitch_IsSet; }
    /** @brief Returns a pointer to Twitch_Optional, if it has been set, otherwise returns nullptr */
    FRHAPI_DevTwitchConfig* GetTwitchOrNull() { if (Twitch_IsSet) return &Twitch_Optional; return nullptr; }
    /** @brief Returns a pointer to Twitch_Optional, if it has been set, otherwise returns nullptr */
    const FRHAPI_DevTwitchConfig* GetTwitchOrNull() const { if (Twitch_IsSet) return &Twitch_Optional; return nullptr; }
    /** @brief Sets the value of Twitch_Optional and also sets Twitch_IsSet to true */
    void SetTwitch(FRHAPI_DevTwitchConfig NewValue) { Twitch_Optional = NewValue; Twitch_IsSet = true; }
     /** @brief Clears the value of Twitch_Optional and sets Twitch_IsSet to false */
    void ClearTwitch() { Twitch_IsSet = false; }

    FRHAPI_DevAmazonConfig Amazon_Optional{  };
    /** @brief true if Amazon_Optional has been set to a value */
    bool Amazon_IsSet{ false };
    /** @brief Gets the value of Amazon_Optional, regardless of it having been set */
    FRHAPI_DevAmazonConfig& GetAmazon() { return Amazon_Optional; }
    /** @brief Gets the value of Amazon_Optional, regardless of it having been set */
    const FRHAPI_DevAmazonConfig& GetAmazon() const { return Amazon_Optional; }
    /** @brief Gets the value of Amazon_Optional, if it has been set, otherwise it returns DefaultValue */
    const FRHAPI_DevAmazonConfig& GetAmazon(const FRHAPI_DevAmazonConfig& DefaultValue) const { if (Amazon_IsSet) return Amazon_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Amazon_Optional and returns true if it has been set, otherwise returns false */
    bool GetAmazon(FRHAPI_DevAmazonConfig& OutValue) const { if (Amazon_IsSet) OutValue = Amazon_Optional; return Amazon_IsSet; }
    /** @brief Returns a pointer to Amazon_Optional, if it has been set, otherwise returns nullptr */
    FRHAPI_DevAmazonConfig* GetAmazonOrNull() { if (Amazon_IsSet) return &Amazon_Optional; return nullptr; }
    /** @brief Returns a pointer to Amazon_Optional, if it has been set, otherwise returns nullptr */
    const FRHAPI_DevAmazonConfig* GetAmazonOrNull() const { if (Amazon_IsSet) return &Amazon_Optional; return nullptr; }
    /** @brief Sets the value of Amazon_Optional and also sets Amazon_IsSet to true */
    void SetAmazon(FRHAPI_DevAmazonConfig NewValue) { Amazon_Optional = NewValue; Amazon_IsSet = true; }
     /** @brief Clears the value of Amazon_Optional and sets Amazon_IsSet to false */
    void ClearAmazon() { Amazon_IsSet = false; }

    FRHAPI_DevGoogleConfig Google_Optional{  };
    /** @brief true if Google_Optional has been set to a value */
    bool Google_IsSet{ false };
    /** @brief Gets the value of Google_Optional, regardless of it having been set */
    FRHAPI_DevGoogleConfig& GetGoogle() { return Google_Optional; }
    /** @brief Gets the value of Google_Optional, regardless of it having been set */
    const FRHAPI_DevGoogleConfig& GetGoogle() const { return Google_Optional; }
    /** @brief Gets the value of Google_Optional, if it has been set, otherwise it returns DefaultValue */
    const FRHAPI_DevGoogleConfig& GetGoogle(const FRHAPI_DevGoogleConfig& DefaultValue) const { if (Google_IsSet) return Google_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Google_Optional and returns true if it has been set, otherwise returns false */
    bool GetGoogle(FRHAPI_DevGoogleConfig& OutValue) const { if (Google_IsSet) OutValue = Google_Optional; return Google_IsSet; }
    /** @brief Returns a pointer to Google_Optional, if it has been set, otherwise returns nullptr */
    FRHAPI_DevGoogleConfig* GetGoogleOrNull() { if (Google_IsSet) return &Google_Optional; return nullptr; }
    /** @brief Returns a pointer to Google_Optional, if it has been set, otherwise returns nullptr */
    const FRHAPI_DevGoogleConfig* GetGoogleOrNull() const { if (Google_IsSet) return &Google_Optional; return nullptr; }
    /** @brief Sets the value of Google_Optional and also sets Google_IsSet to true */
    void SetGoogle(FRHAPI_DevGoogleConfig NewValue) { Google_Optional = NewValue; Google_IsSet = true; }
     /** @brief Clears the value of Google_Optional and sets Google_IsSet to false */
    void ClearGoogle() { Google_IsSet = false; }

    FRHAPI_DevAppleConfig Apple_Optional{  };
    /** @brief true if Apple_Optional has been set to a value */
    bool Apple_IsSet{ false };
    /** @brief Gets the value of Apple_Optional, regardless of it having been set */
    FRHAPI_DevAppleConfig& GetApple() { return Apple_Optional; }
    /** @brief Gets the value of Apple_Optional, regardless of it having been set */
    const FRHAPI_DevAppleConfig& GetApple() const { return Apple_Optional; }
    /** @brief Gets the value of Apple_Optional, if it has been set, otherwise it returns DefaultValue */
    const FRHAPI_DevAppleConfig& GetApple(const FRHAPI_DevAppleConfig& DefaultValue) const { if (Apple_IsSet) return Apple_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Apple_Optional and returns true if it has been set, otherwise returns false */
    bool GetApple(FRHAPI_DevAppleConfig& OutValue) const { if (Apple_IsSet) OutValue = Apple_Optional; return Apple_IsSet; }
    /** @brief Returns a pointer to Apple_Optional, if it has been set, otherwise returns nullptr */
    FRHAPI_DevAppleConfig* GetAppleOrNull() { if (Apple_IsSet) return &Apple_Optional; return nullptr; }
    /** @brief Returns a pointer to Apple_Optional, if it has been set, otherwise returns nullptr */
    const FRHAPI_DevAppleConfig* GetAppleOrNull() const { if (Apple_IsSet) return &Apple_Optional; return nullptr; }
    /** @brief Sets the value of Apple_Optional and also sets Apple_IsSet to true */
    void SetApple(FRHAPI_DevAppleConfig NewValue) { Apple_Optional = NewValue; Apple_IsSet = true; }
     /** @brief Clears the value of Apple_Optional and sets Apple_IsSet to false */
    void ClearApple() { Apple_IsSet = false; }

    FRHAPI_DevXboxConfig Xbox_Optional{  };
    /** @brief true if Xbox_Optional has been set to a value */
    bool Xbox_IsSet{ false };
    /** @brief Gets the value of Xbox_Optional, regardless of it having been set */
    FRHAPI_DevXboxConfig& GetXbox() { return Xbox_Optional; }
    /** @brief Gets the value of Xbox_Optional, regardless of it having been set */
    const FRHAPI_DevXboxConfig& GetXbox() const { return Xbox_Optional; }
    /** @brief Gets the value of Xbox_Optional, if it has been set, otherwise it returns DefaultValue */
    const FRHAPI_DevXboxConfig& GetXbox(const FRHAPI_DevXboxConfig& DefaultValue) const { if (Xbox_IsSet) return Xbox_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Xbox_Optional and returns true if it has been set, otherwise returns false */
    bool GetXbox(FRHAPI_DevXboxConfig& OutValue) const { if (Xbox_IsSet) OutValue = Xbox_Optional; return Xbox_IsSet; }
    /** @brief Returns a pointer to Xbox_Optional, if it has been set, otherwise returns nullptr */
    FRHAPI_DevXboxConfig* GetXboxOrNull() { if (Xbox_IsSet) return &Xbox_Optional; return nullptr; }
    /** @brief Returns a pointer to Xbox_Optional, if it has been set, otherwise returns nullptr */
    const FRHAPI_DevXboxConfig* GetXboxOrNull() const { if (Xbox_IsSet) return &Xbox_Optional; return nullptr; }
    /** @brief Sets the value of Xbox_Optional and also sets Xbox_IsSet to true */
    void SetXbox(FRHAPI_DevXboxConfig NewValue) { Xbox_Optional = NewValue; Xbox_IsSet = true; }
     /** @brief Clears the value of Xbox_Optional and sets Xbox_IsSet to false */
    void ClearXbox() { Xbox_IsSet = false; }

    FRHAPI_DevVivoxConfig Vivox_Optional{  };
    /** @brief true if Vivox_Optional has been set to a value */
    bool Vivox_IsSet{ false };
    /** @brief Gets the value of Vivox_Optional, regardless of it having been set */
    FRHAPI_DevVivoxConfig& GetVivox() { return Vivox_Optional; }
    /** @brief Gets the value of Vivox_Optional, regardless of it having been set */
    const FRHAPI_DevVivoxConfig& GetVivox() const { return Vivox_Optional; }
    /** @brief Gets the value of Vivox_Optional, if it has been set, otherwise it returns DefaultValue */
    const FRHAPI_DevVivoxConfig& GetVivox(const FRHAPI_DevVivoxConfig& DefaultValue) const { if (Vivox_IsSet) return Vivox_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Vivox_Optional and returns true if it has been set, otherwise returns false */
    bool GetVivox(FRHAPI_DevVivoxConfig& OutValue) const { if (Vivox_IsSet) OutValue = Vivox_Optional; return Vivox_IsSet; }
    /** @brief Returns a pointer to Vivox_Optional, if it has been set, otherwise returns nullptr */
    FRHAPI_DevVivoxConfig* GetVivoxOrNull() { if (Vivox_IsSet) return &Vivox_Optional; return nullptr; }
    /** @brief Returns a pointer to Vivox_Optional, if it has been set, otherwise returns nullptr */
    const FRHAPI_DevVivoxConfig* GetVivoxOrNull() const { if (Vivox_IsSet) return &Vivox_Optional; return nullptr; }
    /** @brief Sets the value of Vivox_Optional and also sets Vivox_IsSet to true */
    void SetVivox(FRHAPI_DevVivoxConfig NewValue) { Vivox_Optional = NewValue; Vivox_IsSet = true; }
     /** @brief Clears the value of Vivox_Optional and sets Vivox_IsSet to false */
    void ClearVivox() { Vivox_IsSet = false; }

    FRHAPI_DevLegacyConfig Legacy_Optional{  };
    /** @brief true if Legacy_Optional has been set to a value */
    bool Legacy_IsSet{ false };
    /** @brief Gets the value of Legacy_Optional, regardless of it having been set */
    FRHAPI_DevLegacyConfig& GetLegacy() { return Legacy_Optional; }
    /** @brief Gets the value of Legacy_Optional, regardless of it having been set */
    const FRHAPI_DevLegacyConfig& GetLegacy() const { return Legacy_Optional; }
    /** @brief Gets the value of Legacy_Optional, if it has been set, otherwise it returns DefaultValue */
    const FRHAPI_DevLegacyConfig& GetLegacy(const FRHAPI_DevLegacyConfig& DefaultValue) const { if (Legacy_IsSet) return Legacy_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Legacy_Optional and returns true if it has been set, otherwise returns false */
    bool GetLegacy(FRHAPI_DevLegacyConfig& OutValue) const { if (Legacy_IsSet) OutValue = Legacy_Optional; return Legacy_IsSet; }
    /** @brief Returns a pointer to Legacy_Optional, if it has been set, otherwise returns nullptr */
    FRHAPI_DevLegacyConfig* GetLegacyOrNull() { if (Legacy_IsSet) return &Legacy_Optional; return nullptr; }
    /** @brief Returns a pointer to Legacy_Optional, if it has been set, otherwise returns nullptr */
    const FRHAPI_DevLegacyConfig* GetLegacyOrNull() const { if (Legacy_IsSet) return &Legacy_Optional; return nullptr; }
    /** @brief Sets the value of Legacy_Optional and also sets Legacy_IsSet to true */
    void SetLegacy(FRHAPI_DevLegacyConfig NewValue) { Legacy_Optional = NewValue; Legacy_IsSet = true; }
     /** @brief Clears the value of Legacy_Optional and sets Legacy_IsSet to false */
    void ClearLegacy() { Legacy_IsSet = false; }

    /** @brief Default role ID for players without a role */
    FString DefaultRoleId_Optional{  };
    /** @brief true if DefaultRoleId_Optional has been set to a value */
    bool DefaultRoleId_IsSet{ false };
    /** @brief Gets the value of DefaultRoleId_Optional, regardless of it having been set */
    FString& GetDefaultRoleId() { return DefaultRoleId_Optional; }
    /** @brief Gets the value of DefaultRoleId_Optional, regardless of it having been set */
    const FString& GetDefaultRoleId() const { return DefaultRoleId_Optional; }
    /** @brief Gets the value of DefaultRoleId_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetDefaultRoleId(const FString& DefaultValue) const { if (DefaultRoleId_IsSet) return DefaultRoleId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of DefaultRoleId_Optional and returns true if it has been set, otherwise returns false */
    bool GetDefaultRoleId(FString& OutValue) const { if (DefaultRoleId_IsSet) OutValue = DefaultRoleId_Optional; return DefaultRoleId_IsSet; }
    /** @brief Returns a pointer to DefaultRoleId_Optional, if it has been set, otherwise returns nullptr */
    FString* GetDefaultRoleIdOrNull() { if (DefaultRoleId_IsSet) return &DefaultRoleId_Optional; return nullptr; }
    /** @brief Returns a pointer to DefaultRoleId_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetDefaultRoleIdOrNull() const { if (DefaultRoleId_IsSet) return &DefaultRoleId_Optional; return nullptr; }
    /** @brief Sets the value of DefaultRoleId_Optional and also sets DefaultRoleId_IsSet to true */
    void SetDefaultRoleId(FString NewValue) { DefaultRoleId_Optional = NewValue; DefaultRoleId_IsSet = true; }
     /** @brief Clears the value of DefaultRoleId_Optional and sets DefaultRoleId_IsSet to false */
    void ClearDefaultRoleId() { DefaultRoleId_IsSet = false; }

    /** @brief List of loot IDs to grant to players when they start a new inventory session */
    TArray<FString> InventorySessionLoot_Optional{  };
    /** @brief true if InventorySessionLoot_Optional has been set to a value */
    bool InventorySessionLoot_IsSet{ false };
    /** @brief Gets the value of InventorySessionLoot_Optional, regardless of it having been set */
    TArray<FString>& GetInventorySessionLoot() { return InventorySessionLoot_Optional; }
    /** @brief Gets the value of InventorySessionLoot_Optional, regardless of it having been set */
    const TArray<FString>& GetInventorySessionLoot() const { return InventorySessionLoot_Optional; }
    /** @brief Gets the value of InventorySessionLoot_Optional, if it has been set, otherwise it returns DefaultValue */
    const TArray<FString>& GetInventorySessionLoot(const TArray<FString>& DefaultValue) const { if (InventorySessionLoot_IsSet) return InventorySessionLoot_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of InventorySessionLoot_Optional and returns true if it has been set, otherwise returns false */
    bool GetInventorySessionLoot(TArray<FString>& OutValue) const { if (InventorySessionLoot_IsSet) OutValue = InventorySessionLoot_Optional; return InventorySessionLoot_IsSet; }
    /** @brief Returns a pointer to InventorySessionLoot_Optional, if it has been set, otherwise returns nullptr */
    TArray<FString>* GetInventorySessionLootOrNull() { if (InventorySessionLoot_IsSet) return &InventorySessionLoot_Optional; return nullptr; }
    /** @brief Returns a pointer to InventorySessionLoot_Optional, if it has been set, otherwise returns nullptr */
    const TArray<FString>* GetInventorySessionLootOrNull() const { if (InventorySessionLoot_IsSet) return &InventorySessionLoot_Optional; return nullptr; }
    /** @brief Sets the value of InventorySessionLoot_Optional and also sets InventorySessionLoot_IsSet to true */
    void SetInventorySessionLoot(TArray<FString> NewValue) { InventorySessionLoot_Optional = NewValue; InventorySessionLoot_IsSet = true; }
     /** @brief Clears the value of InventorySessionLoot_Optional and sets InventorySessionLoot_IsSet to false */
    void ClearInventorySessionLoot() { InventorySessionLoot_IsSet = false; }

    /** @brief Whether or not to allow the client source to update inventory */
    bool AllowClientToUpdateInventory_Optional{  };
    /** @brief true if AllowClientToUpdateInventory_Optional has been set to a value */
    bool AllowClientToUpdateInventory_IsSet{ false };
    /** @brief Gets the value of AllowClientToUpdateInventory_Optional, regardless of it having been set */
    bool& GetAllowClientToUpdateInventory() { return AllowClientToUpdateInventory_Optional; }
    /** @brief Gets the value of AllowClientToUpdateInventory_Optional, regardless of it having been set */
    const bool& GetAllowClientToUpdateInventory() const { return AllowClientToUpdateInventory_Optional; }
    /** @brief Gets the value of AllowClientToUpdateInventory_Optional, if it has been set, otherwise it returns DefaultValue */
    const bool& GetAllowClientToUpdateInventory(const bool& DefaultValue) const { if (AllowClientToUpdateInventory_IsSet) return AllowClientToUpdateInventory_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of AllowClientToUpdateInventory_Optional and returns true if it has been set, otherwise returns false */
    bool GetAllowClientToUpdateInventory(bool& OutValue) const { if (AllowClientToUpdateInventory_IsSet) OutValue = AllowClientToUpdateInventory_Optional; return AllowClientToUpdateInventory_IsSet; }
    /** @brief Returns a pointer to AllowClientToUpdateInventory_Optional, if it has been set, otherwise returns nullptr */
    bool* GetAllowClientToUpdateInventoryOrNull() { if (AllowClientToUpdateInventory_IsSet) return &AllowClientToUpdateInventory_Optional; return nullptr; }
    /** @brief Returns a pointer to AllowClientToUpdateInventory_Optional, if it has been set, otherwise returns nullptr */
    const bool* GetAllowClientToUpdateInventoryOrNull() const { if (AllowClientToUpdateInventory_IsSet) return &AllowClientToUpdateInventory_Optional; return nullptr; }
    /** @brief Sets the value of AllowClientToUpdateInventory_Optional and also sets AllowClientToUpdateInventory_IsSet to true */
    void SetAllowClientToUpdateInventory(bool NewValue) { AllowClientToUpdateInventory_Optional = NewValue; AllowClientToUpdateInventory_IsSet = true; }
     /** @brief Clears the value of AllowClientToUpdateInventory_Optional and sets AllowClientToUpdateInventory_IsSet to false */
    void ClearAllowClientToUpdateInventory() { AllowClientToUpdateInventory_Optional = false; AllowClientToUpdateInventory_IsSet = false; }
    /** @brief Returns true if AllowClientToUpdateInventory_Optional is set and matches the default value */
    bool IsAllowClientToUpdateInventoryDefaultValue() const { return AllowClientToUpdateInventory_IsSet && AllowClientToUpdateInventory_Optional == false; }
    /** @brief Sets the value of AllowClientToUpdateInventory_Optional to its default and also sets AllowClientToUpdateInventory_IsSet to true */
    void SetAllowClientToUpdateInventoryToDefault() { AllowClientToUpdateInventory_Optional = false; AllowClientToUpdateInventory_IsSet = true; }

    /** @brief List of loot IDs to grant to players when they have an email */
    TArray<FString> EmailRewardLoot_Optional{  };
    /** @brief true if EmailRewardLoot_Optional has been set to a value */
    bool EmailRewardLoot_IsSet{ false };
    /** @brief Gets the value of EmailRewardLoot_Optional, regardless of it having been set */
    TArray<FString>& GetEmailRewardLoot() { return EmailRewardLoot_Optional; }
    /** @brief Gets the value of EmailRewardLoot_Optional, regardless of it having been set */
    const TArray<FString>& GetEmailRewardLoot() const { return EmailRewardLoot_Optional; }
    /** @brief Gets the value of EmailRewardLoot_Optional, if it has been set, otherwise it returns DefaultValue */
    const TArray<FString>& GetEmailRewardLoot(const TArray<FString>& DefaultValue) const { if (EmailRewardLoot_IsSet) return EmailRewardLoot_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of EmailRewardLoot_Optional and returns true if it has been set, otherwise returns false */
    bool GetEmailRewardLoot(TArray<FString>& OutValue) const { if (EmailRewardLoot_IsSet) OutValue = EmailRewardLoot_Optional; return EmailRewardLoot_IsSet; }
    /** @brief Returns a pointer to EmailRewardLoot_Optional, if it has been set, otherwise returns nullptr */
    TArray<FString>* GetEmailRewardLootOrNull() { if (EmailRewardLoot_IsSet) return &EmailRewardLoot_Optional; return nullptr; }
    /** @brief Returns a pointer to EmailRewardLoot_Optional, if it has been set, otherwise returns nullptr */
    const TArray<FString>* GetEmailRewardLootOrNull() const { if (EmailRewardLoot_IsSet) return &EmailRewardLoot_Optional; return nullptr; }
    /** @brief Sets the value of EmailRewardLoot_Optional and also sets EmailRewardLoot_IsSet to true */
    void SetEmailRewardLoot(TArray<FString> NewValue) { EmailRewardLoot_Optional = NewValue; EmailRewardLoot_IsSet = true; }
     /** @brief Clears the value of EmailRewardLoot_Optional and sets EmailRewardLoot_IsSet to false */
    void ClearEmailRewardLoot() { EmailRewardLoot_IsSet = false; }

    /** @brief Are coupons allowed to be used for purchasing Loot? */
    bool CouponEnable_Optional{  };
    /** @brief true if CouponEnable_Optional has been set to a value */
    bool CouponEnable_IsSet{ false };
    /** @brief Gets the value of CouponEnable_Optional, regardless of it having been set */
    bool& GetCouponEnable() { return CouponEnable_Optional; }
    /** @brief Gets the value of CouponEnable_Optional, regardless of it having been set */
    const bool& GetCouponEnable() const { return CouponEnable_Optional; }
    /** @brief Gets the value of CouponEnable_Optional, if it has been set, otherwise it returns DefaultValue */
    const bool& GetCouponEnable(const bool& DefaultValue) const { if (CouponEnable_IsSet) return CouponEnable_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of CouponEnable_Optional and returns true if it has been set, otherwise returns false */
    bool GetCouponEnable(bool& OutValue) const { if (CouponEnable_IsSet) OutValue = CouponEnable_Optional; return CouponEnable_IsSet; }
    /** @brief Returns a pointer to CouponEnable_Optional, if it has been set, otherwise returns nullptr */
    bool* GetCouponEnableOrNull() { if (CouponEnable_IsSet) return &CouponEnable_Optional; return nullptr; }
    /** @brief Returns a pointer to CouponEnable_Optional, if it has been set, otherwise returns nullptr */
    const bool* GetCouponEnableOrNull() const { if (CouponEnable_IsSet) return &CouponEnable_Optional; return nullptr; }
    /** @brief Sets the value of CouponEnable_Optional and also sets CouponEnable_IsSet to true */
    void SetCouponEnable(bool NewValue) { CouponEnable_Optional = NewValue; CouponEnable_IsSet = true; }
     /** @brief Clears the value of CouponEnable_Optional and sets CouponEnable_IsSet to false */
    void ClearCouponEnable() { CouponEnable_Optional = true; CouponEnable_IsSet = false; }
    /** @brief Returns true if CouponEnable_Optional is set and matches the default value */
    bool IsCouponEnableDefaultValue() const { return CouponEnable_IsSet && CouponEnable_Optional == true; }
    /** @brief Sets the value of CouponEnable_Optional to its default and also sets CouponEnable_IsSet to true */
    void SetCouponEnableToDefault() { CouponEnable_Optional = true; CouponEnable_IsSet = true; }

    /** @brief Vendor ID that lists all enabled coupons */
    FString CouponVendorId_Optional{  };
    /** @brief true if CouponVendorId_Optional has been set to a value */
    bool CouponVendorId_IsSet{ false };
    /** @brief Gets the value of CouponVendorId_Optional, regardless of it having been set */
    FString& GetCouponVendorId() { return CouponVendorId_Optional; }
    /** @brief Gets the value of CouponVendorId_Optional, regardless of it having been set */
    const FString& GetCouponVendorId() const { return CouponVendorId_Optional; }
    /** @brief Gets the value of CouponVendorId_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetCouponVendorId(const FString& DefaultValue) const { if (CouponVendorId_IsSet) return CouponVendorId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of CouponVendorId_Optional and returns true if it has been set, otherwise returns false */
    bool GetCouponVendorId(FString& OutValue) const { if (CouponVendorId_IsSet) OutValue = CouponVendorId_Optional; return CouponVendorId_IsSet; }
    /** @brief Returns a pointer to CouponVendorId_Optional, if it has been set, otherwise returns nullptr */
    FString* GetCouponVendorIdOrNull() { if (CouponVendorId_IsSet) return &CouponVendorId_Optional; return nullptr; }
    /** @brief Returns a pointer to CouponVendorId_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetCouponVendorIdOrNull() const { if (CouponVendorId_IsSet) return &CouponVendorId_Optional; return nullptr; }
    /** @brief Sets the value of CouponVendorId_Optional and also sets CouponVendorId_IsSet to true */
    void SetCouponVendorId(FString NewValue) { CouponVendorId_Optional = NewValue; CouponVendorId_IsSet = true; }
     /** @brief Clears the value of CouponVendorId_Optional and sets CouponVendorId_IsSet to false */
    void ClearCouponVendorId() { CouponVendorId_IsSet = false; }
};

/** @} */
