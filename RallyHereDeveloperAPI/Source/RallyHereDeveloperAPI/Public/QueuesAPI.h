// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereDeveloperAPIAuthContext.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevAllQueuesResponse.h"
#include "DevHTTPValidationError.h"
#include "DevQueue.h"
#include "DevQueueRequest.h"
#include "DevQueueUpdateRequest.h"

namespace RallyHereDeveloperAPI
{
using RallyHereDeveloperAPI::ToStringFormatArg;
using RallyHereDeveloperAPI::WriteJsonValue;
using RallyHereDeveloperAPI::TryGetJsonValue;

struct FRequest_SandboxCreateQueue;
struct FResponse_SandboxCreateQueue;
struct FRequest_SandboxDeleteQueue;
struct FResponse_SandboxDeleteQueue;
struct FRequest_SandboxGetAllQueues;
struct FResponse_SandboxGetAllQueues;
struct FRequest_SandboxGetQueue;
struct FResponse_SandboxGetQueue;
struct FRequest_SandboxPatchQueue;
struct FResponse_SandboxPatchQueue;
struct FRequest_SandboxPutQueue;
struct FResponse_SandboxPutQueue;

DECLARE_DELEGATE_OneParam(FDelegate_SandboxCreateQueue, const FResponse_SandboxCreateQueue&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxDeleteQueue, const FResponse_SandboxDeleteQueue&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetAllQueues, const FResponse_SandboxGetAllQueues&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetQueue, const FResponse_SandboxGetQueue&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxPatchQueue, const FResponse_SandboxPatchQueue&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxPutQueue, const FResponse_SandboxPutQueue&);

class RALLYHEREDEVELOPERAPI_API FQueuesAPI : public FAPI
{
public:
    FQueuesAPI();
    virtual ~FQueuesAPI();

    FHttpRequestPtr SandboxCreateQueue(const FRequest_SandboxCreateQueue& Request, const FDelegate_SandboxCreateQueue& Delegate = FDelegate_SandboxCreateQueue(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxDeleteQueue(const FRequest_SandboxDeleteQueue& Request, const FDelegate_SandboxDeleteQueue& Delegate = FDelegate_SandboxDeleteQueue(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetAllQueues(const FRequest_SandboxGetAllQueues& Request, const FDelegate_SandboxGetAllQueues& Delegate = FDelegate_SandboxGetAllQueues(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetQueue(const FRequest_SandboxGetQueue& Request, const FDelegate_SandboxGetQueue& Delegate = FDelegate_SandboxGetQueue(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxPatchQueue(const FRequest_SandboxPatchQueue& Request, const FDelegate_SandboxPatchQueue& Delegate = FDelegate_SandboxPatchQueue(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxPutQueue(const FRequest_SandboxPutQueue& Request, const FDelegate_SandboxPutQueue& Delegate = FDelegate_SandboxPutQueue(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);

private:
    void OnSandboxCreateQueueResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxCreateQueue Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxDeleteQueueResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxDeleteQueue Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetAllQueuesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetAllQueues Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetQueueResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetQueue Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxPatchQueueResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxPatchQueue Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxPutQueueResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxPutQueue Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};

/* Create Queue
 *
 * Create a new Queue for a sandbox
 * 
 * Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxCreateQueue : public FRequest
{
    FRequest_SandboxCreateQueue();
    virtual ~FRequest_SandboxCreateQueue() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevQueueRequest QueueRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxCreateQueue : public FResponse
{
    FResponse_SandboxCreateQueue(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxCreateQueue() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevQueue Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevQueue& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxCreateQueue
{
    typedef FRequest_SandboxCreateQueue Request;
    typedef FResponse_SandboxCreateQueue Response;
    typedef FDelegate_SandboxCreateQueue Delegate;
    typedef FQueuesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxCreateQueue(InRequest, InDelegate, Priority); }
};

/* Delete Queue
 *
 * Delete a Queue for a sandbox
 * 
 * Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxDeleteQueue : public FRequest
{
    FRequest_SandboxDeleteQueue();
    virtual ~FRequest_SandboxDeleteQueue() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid QueueId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxDeleteQueue : public FResponse
{
    FResponse_SandboxDeleteQueue(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxDeleteQueue() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    


    // Manual Response Helpers
    /* Response 204
    Successful Response
    */

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxDeleteQueue
{
    typedef FRequest_SandboxDeleteQueue Request;
    typedef FResponse_SandboxDeleteQueue Response;
    typedef FDelegate_SandboxDeleteQueue Delegate;
    typedef FQueuesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxDeleteQueue(InRequest, InDelegate, Priority); }
};

/* Get All Queues
 *
 * Get all Queues for a sandbox
 * 
 * Requires any of permissions: 
 * 	 sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetAllQueues : public FRequest
{
    FRequest_SandboxGetAllQueues();
    virtual ~FRequest_SandboxGetAllQueues() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    /* The maximum number of elements to be returned per call */
    TOptional<int32> PageSize;
    /* Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration */
    TOptional<FString> Cursor;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetAllQueues : public FResponse
{
    FResponse_SandboxGetAllQueues(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetAllQueues() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevAllQueuesResponse Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevAllQueuesResponse& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetAllQueues
{
    typedef FRequest_SandboxGetAllQueues Request;
    typedef FResponse_SandboxGetAllQueues Response;
    typedef FDelegate_SandboxGetAllQueues Delegate;
    typedef FQueuesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetAllQueues(InRequest, InDelegate, Priority); }
};

/* Get Queue
 *
 * Get a specific Queue for a sandbox
 * 
 * Requires any of permissions: 
 * 	 sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetQueue : public FRequest
{
    FRequest_SandboxGetQueue();
    virtual ~FRequest_SandboxGetQueue() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid QueueId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetQueue : public FResponse
{
    FResponse_SandboxGetQueue(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetQueue() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevQueue Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevQueue& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetQueue
{
    typedef FRequest_SandboxGetQueue Request;
    typedef FResponse_SandboxGetQueue Response;
    typedef FDelegate_SandboxGetQueue Delegate;
    typedef FQueuesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetQueue(InRequest, InDelegate, Priority); }
};

/* Patch Queue
 *
 * Update an existing Queue for a sandbox
 * 
 * Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxPatchQueue : public FRequest
{
    FRequest_SandboxPatchQueue();
    virtual ~FRequest_SandboxPatchQueue() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid QueueId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevQueueUpdateRequest QueueUpdateRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxPatchQueue : public FResponse
{
    FResponse_SandboxPatchQueue(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxPatchQueue() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevQueue Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevQueue& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxPatchQueue
{
    typedef FRequest_SandboxPatchQueue Request;
    typedef FResponse_SandboxPatchQueue Response;
    typedef FDelegate_SandboxPatchQueue Delegate;
    typedef FQueuesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxPatchQueue(InRequest, InDelegate, Priority); }
};

/* Put Queue
 *
 * Update an existing Queue for a sandbox
 * 
 * Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxPutQueue : public FRequest
{
    FRequest_SandboxPutQueue();
    virtual ~FRequest_SandboxPutQueue() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid QueueId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevQueueRequest QueueRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxPutQueue : public FResponse
{
    FResponse_SandboxPutQueue(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxPutQueue() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevQueue Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevQueue& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxPutQueue
{
    typedef FRequest_SandboxPutQueue Request;
    typedef FResponse_SandboxPutQueue Response;
    typedef FDelegate_SandboxPutQueue Delegate;
    typedef FQueuesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxPutQueue(InRequest, InDelegate, Priority); }
};


}
