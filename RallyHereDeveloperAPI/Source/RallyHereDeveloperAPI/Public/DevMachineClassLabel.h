// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereDeveloperAPIBaseModel.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevMachineClassLabel.generated.h"

/** @defgroup RHAPI_DevMachineClassLabel RallyHere API Model DevMachineClassLabel
 *  @{
 */

/**
 * @brief Labels that can be applied to MachineClasses. Useful for creating groups of machine classes. Some examples might be:  OPS may want a higher-level name that represents what they consider the \&quot;same\&quot; sort of machine across multiple provider types. This way they could see all of them grouped together.  This can be used to help implement the classic \&quot;performance groups\&quot;. So you may have labels like \&quot;can_support_realm_royale_100_man\&quot; or \&quot;can_support_dko_1v1\&quot; .
 */
USTRUCT(BlueprintType)
struct RALLYHEREDEVELOPERAPI_API FRHAPI_DevMachineClassLabel : public FRHAPI_DevModel
{
    GENERATED_BODY()

    /**
    * @brief Fills this object with data from the passed in JSON
    *
    * @param [in] JsonValue Data from the API call.
    *
    * @return true if parsing of the JSON data was successful.
    */
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

    /**
    * @brief Writes the data from this object into the specified JSON Writer stream
    *
    * @param [in] Writer JSON Writer stream to push .
    */
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /** @brief The text of the label */
    FString Label{  };
    /** @brief Gets the value of Label */
    FString& GetLabel() { return Label; }
    /** @brief Gets the value of Label */
    const FString& GetLabel() const { return Label; }
    /** @brief Sets the value of Label */
    void SetLabel(FString NewValue) { Label = NewValue;  }

    /** @brief The ID of the MachineClass this label is associated with */
    FGuid MachineClassId{  };
    /** @brief Gets the value of MachineClassId */
    FGuid& GetMachineClassId() { return MachineClassId; }
    /** @brief Gets the value of MachineClassId */
    const FGuid& GetMachineClassId() const { return MachineClassId; }
    /** @brief Sets the value of MachineClassId */
    void SetMachineClassId(FGuid NewValue) { MachineClassId = NewValue;  }

    int32 MachineClassLabelId{ 0 };
    /** @brief Gets the value of MachineClassLabelId */
    int32& GetMachineClassLabelId() { return MachineClassLabelId; }
    /** @brief Gets the value of MachineClassLabelId */
    const int32& GetMachineClassLabelId() const { return MachineClassLabelId; }
    /** @brief Sets the value of MachineClassLabelId */
    void SetMachineClassLabelId(int32 NewValue) { MachineClassLabelId = NewValue;  }
    /** @brief Returns true if MachineClassLabelId matches the default value */
    bool IsMachineClassLabelIdDefaultValue() const { return MachineClassLabelId == 0; }
    /** @brief Sets the value of MachineClassLabelId to its default  */
    void SetMachineClassLabelIdToDefault() { MachineClassLabelId = 0;  }
};

/** @} */
