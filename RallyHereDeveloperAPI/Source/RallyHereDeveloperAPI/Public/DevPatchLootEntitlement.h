// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereDeveloperAPIBaseModel.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevEntitlementType.h"
#include "DevPatchLootEntitlement.generated.h"

/** @defgroup RHAPI_DevPatchLootEntitlement RallyHere API Model DevPatchLootEntitlement
 *  @{
 */

/**
 * @brief Represents the mapping of an External SKU to a Loot that will be granted to the player when the player has a matching sku
 */
USTRUCT(BlueprintType)
struct RALLYHEREDEVELOPERAPI_API FRHAPI_DevPatchLootEntitlement : public FRHAPI_DevModel
{
    GENERATED_BODY()

    /**
    * @brief Fills this object with data from the passed in JSON
    *
    * @param [in] JsonValue Data from the API call.
    *
    * @return true if parsing of the JSON data was successful.
    */
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

    /**
    * @brief Writes the data from this object into the specified JSON Writer stream
    *
    * @param [in] Writer JSON Writer stream to push .
    */
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /** @brief The Loot ID. */
    FGuid LootId_Optional{  };
    /** @brief true if LootId_Optional has been set to a value */
    bool LootId_IsSet{ false };
    /** @brief Gets the value of LootId_Optional, regardless of it having been set */
    FGuid& GetLootId() { return LootId_Optional; }
    /** @brief Gets the value of LootId_Optional, regardless of it having been set */
    const FGuid& GetLootId() const { return LootId_Optional; }
    /** @brief Gets the value of LootId_Optional, if it has been set, otherwise it returns DefaultValue */
    const FGuid& GetLootId(const FGuid& DefaultValue) const { if (LootId_IsSet) return LootId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of LootId_Optional and returns true if it has been set, otherwise returns false */
    bool GetLootId(FGuid& OutValue) const { if (LootId_IsSet) OutValue = LootId_Optional; return LootId_IsSet; }
    /** @brief Returns a pointer to LootId_Optional, if it has been set, otherwise returns nullptr */
    FGuid* GetLootIdOrNull() { if (LootId_IsSet) return &LootId_Optional; return nullptr; }
    /** @brief Returns a pointer to LootId_Optional, if it has been set, otherwise returns nullptr */
    const FGuid* GetLootIdOrNull() const { if (LootId_IsSet) return &LootId_Optional; return nullptr; }
    /** @brief Sets the value of LootId_Optional and also sets LootId_IsSet to true */
    void SetLootId(FGuid NewValue) { LootId_Optional = NewValue; LootId_IsSet = true; }
     /** @brief Clears the value of LootId_Optional and sets LootId_IsSet to false */
    void ClearLootId() { LootId_IsSet = false; }

    /** @brief Determine how the entitlement is handled on the Platform's side.  */
    ERHAPI_DevEntitlementType Type_Optional{  };
    /** @brief true if Type_Optional has been set to a value */
    bool Type_IsSet{ false };
    /** @brief Gets the value of Type_Optional, regardless of it having been set */
    ERHAPI_DevEntitlementType& GetType() { return Type_Optional; }
    /** @brief Gets the value of Type_Optional, regardless of it having been set */
    const ERHAPI_DevEntitlementType& GetType() const { return Type_Optional; }
    /** @brief Gets the value of Type_Optional, if it has been set, otherwise it returns DefaultValue */
    const ERHAPI_DevEntitlementType& GetType(const ERHAPI_DevEntitlementType& DefaultValue) const { if (Type_IsSet) return Type_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Type_Optional and returns true if it has been set, otherwise returns false */
    bool GetType(ERHAPI_DevEntitlementType& OutValue) const { if (Type_IsSet) OutValue = Type_Optional; return Type_IsSet; }
    /** @brief Returns a pointer to Type_Optional, if it has been set, otherwise returns nullptr */
    ERHAPI_DevEntitlementType* GetTypeOrNull() { if (Type_IsSet) return &Type_Optional; return nullptr; }
    /** @brief Returns a pointer to Type_Optional, if it has been set, otherwise returns nullptr */
    const ERHAPI_DevEntitlementType* GetTypeOrNull() const { if (Type_IsSet) return &Type_Optional; return nullptr; }
    /** @brief Sets the value of Type_Optional and also sets Type_IsSet to true */
    void SetType(ERHAPI_DevEntitlementType NewValue) { Type_Optional = NewValue; Type_IsSet = true; }
     /** @brief Clears the value of Type_Optional and sets Type_IsSet to false */
    void ClearType() { Type_IsSet = false; }
};

/** @} */
