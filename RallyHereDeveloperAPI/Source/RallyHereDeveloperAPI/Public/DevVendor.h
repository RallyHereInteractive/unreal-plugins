// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereDeveloperAPIBaseModel.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevLoot.h"
#include "DevVendorType.h"
#include "DevVendor.generated.h"

/** @defgroup RHAPI_DevVendor RallyHere API Model DevVendor
 *  @{
 */

/**
 * @brief This mixin is meant to give a set of common properties to root config models
 */
USTRUCT(BlueprintType)
struct RALLYHEREDEVELOPERAPI_API FRHAPI_DevVendor : public FRHAPI_DevModel
{
    GENERATED_BODY()

    /**
    * @brief Fills this object with data from the passed in JSON
    *
    * @param [in] JsonValue Data from the API call.
    *
    * @return true if parsing of the JSON data was successful.
    */
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

    /**
    * @brief Writes the data from this object into the specified JSON Writer stream
    *
    * @param [in] Writer JSON Writer stream to push .
    */
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /** @brief Custom data associated with the resource */
    TMap<FString, FString> CustomData_Optional{  };
    /** @brief true if CustomData_Optional has been set to a value */
    bool CustomData_IsSet{ false };
    /** @brief Gets the value of CustomData_Optional, regardless of it having been set */
    TMap<FString, FString>& GetCustomData() { return CustomData_Optional; }
    /** @brief Gets the value of CustomData_Optional, regardless of it having been set */
    const TMap<FString, FString>& GetCustomData() const { return CustomData_Optional; }
    /** @brief Gets the value of CustomData_Optional, if it has been set, otherwise it returns DefaultValue */
    const TMap<FString, FString>& GetCustomData(const TMap<FString, FString>& DefaultValue) const { if (CustomData_IsSet) return CustomData_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of CustomData_Optional and returns true if it has been set, otherwise returns false */
    bool GetCustomData(TMap<FString, FString>& OutValue) const { if (CustomData_IsSet) OutValue = CustomData_Optional; return CustomData_IsSet; }
    /** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
    TMap<FString, FString>* GetCustomDataOrNull() { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
    /** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
    const TMap<FString, FString>* GetCustomDataOrNull() const { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
    /** @brief Sets the value of CustomData_Optional and also sets CustomData_IsSet to true */
    void SetCustomData(TMap<FString, FString> NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true; }
     /** @brief Clears the value of CustomData_Optional and sets CustomData_IsSet to false */
    void ClearCustomData() { CustomData_IsSet = false; }

    /** @brief Name of the resource */
    FString Name_Optional{  };
    /** @brief true if Name_Optional has been set to a value */
    bool Name_IsSet{ false };
    /** @brief Gets the value of Name_Optional, regardless of it having been set */
    FString& GetName() { return Name_Optional; }
    /** @brief Gets the value of Name_Optional, regardless of it having been set */
    const FString& GetName() const { return Name_Optional; }
    /** @brief Gets the value of Name_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetName(const FString& DefaultValue) const { if (Name_IsSet) return Name_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Name_Optional and returns true if it has been set, otherwise returns false */
    bool GetName(FString& OutValue) const { if (Name_IsSet) OutValue = Name_Optional; return Name_IsSet; }
    /** @brief Returns a pointer to Name_Optional, if it has been set, otherwise returns nullptr */
    FString* GetNameOrNull() { if (Name_IsSet) return &Name_Optional; return nullptr; }
    /** @brief Returns a pointer to Name_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetNameOrNull() const { if (Name_IsSet) return &Name_Optional; return nullptr; }
    /** @brief Sets the value of Name_Optional and also sets Name_IsSet to true */
    void SetName(FString NewValue) { Name_Optional = NewValue; Name_IsSet = true; }
     /** @brief Clears the value of Name_Optional and sets Name_IsSet to false */
    void ClearName() { Name_IsSet = false; }

    /** @brief Description of the resource */
    FString Description_Optional{  };
    /** @brief true if Description_Optional has been set to a value */
    bool Description_IsSet{ false };
    /** @brief Gets the value of Description_Optional, regardless of it having been set */
    FString& GetDescription() { return Description_Optional; }
    /** @brief Gets the value of Description_Optional, regardless of it having been set */
    const FString& GetDescription() const { return Description_Optional; }
    /** @brief Gets the value of Description_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetDescription(const FString& DefaultValue) const { if (Description_IsSet) return Description_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Description_Optional and returns true if it has been set, otherwise returns false */
    bool GetDescription(FString& OutValue) const { if (Description_IsSet) OutValue = Description_Optional; return Description_IsSet; }
    /** @brief Returns a pointer to Description_Optional, if it has been set, otherwise returns nullptr */
    FString* GetDescriptionOrNull() { if (Description_IsSet) return &Description_Optional; return nullptr; }
    /** @brief Returns a pointer to Description_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetDescriptionOrNull() const { if (Description_IsSet) return &Description_Optional; return nullptr; }
    /** @brief Sets the value of Description_Optional and also sets Description_IsSet to true */
    void SetDescription(FString NewValue) { Description_Optional = NewValue; Description_IsSet = true; }
     /** @brief Clears the value of Description_Optional and sets Description_IsSet to false */
    void ClearDescription() { Description_IsSet = false; }

    /** @brief Account ID of the user who last modified the resource */
    FGuid LastModifiedAccountId_Optional{  };
    /** @brief true if LastModifiedAccountId_Optional has been set to a value */
    bool LastModifiedAccountId_IsSet{ false };
    /** @brief Gets the value of LastModifiedAccountId_Optional, regardless of it having been set */
    FGuid& GetLastModifiedAccountId() { return LastModifiedAccountId_Optional; }
    /** @brief Gets the value of LastModifiedAccountId_Optional, regardless of it having been set */
    const FGuid& GetLastModifiedAccountId() const { return LastModifiedAccountId_Optional; }
    /** @brief Gets the value of LastModifiedAccountId_Optional, if it has been set, otherwise it returns DefaultValue */
    const FGuid& GetLastModifiedAccountId(const FGuid& DefaultValue) const { if (LastModifiedAccountId_IsSet) return LastModifiedAccountId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of LastModifiedAccountId_Optional and returns true if it has been set, otherwise returns false */
    bool GetLastModifiedAccountId(FGuid& OutValue) const { if (LastModifiedAccountId_IsSet) OutValue = LastModifiedAccountId_Optional; return LastModifiedAccountId_IsSet; }
    /** @brief Returns a pointer to LastModifiedAccountId_Optional, if it has been set, otherwise returns nullptr */
    FGuid* GetLastModifiedAccountIdOrNull() { if (LastModifiedAccountId_IsSet) return &LastModifiedAccountId_Optional; return nullptr; }
    /** @brief Returns a pointer to LastModifiedAccountId_Optional, if it has been set, otherwise returns nullptr */
    const FGuid* GetLastModifiedAccountIdOrNull() const { if (LastModifiedAccountId_IsSet) return &LastModifiedAccountId_Optional; return nullptr; }
    /** @brief Sets the value of LastModifiedAccountId_Optional and also sets LastModifiedAccountId_IsSet to true */
    void SetLastModifiedAccountId(FGuid NewValue) { LastModifiedAccountId_Optional = NewValue; LastModifiedAccountId_IsSet = true; }
     /** @brief Clears the value of LastModifiedAccountId_Optional and sets LastModifiedAccountId_IsSet to false */
    void ClearLastModifiedAccountId() { LastModifiedAccountId_IsSet = false; }

    /** @brief Timestamp of when the resource was last modified */
    FDateTime LastModifiedTimestamp_Optional{  };
    /** @brief true if LastModifiedTimestamp_Optional has been set to a value */
    bool LastModifiedTimestamp_IsSet{ false };
    /** @brief Gets the value of LastModifiedTimestamp_Optional, regardless of it having been set */
    FDateTime& GetLastModifiedTimestamp() { return LastModifiedTimestamp_Optional; }
    /** @brief Gets the value of LastModifiedTimestamp_Optional, regardless of it having been set */
    const FDateTime& GetLastModifiedTimestamp() const { return LastModifiedTimestamp_Optional; }
    /** @brief Gets the value of LastModifiedTimestamp_Optional, if it has been set, otherwise it returns DefaultValue */
    const FDateTime& GetLastModifiedTimestamp(const FDateTime& DefaultValue) const { if (LastModifiedTimestamp_IsSet) return LastModifiedTimestamp_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of LastModifiedTimestamp_Optional and returns true if it has been set, otherwise returns false */
    bool GetLastModifiedTimestamp(FDateTime& OutValue) const { if (LastModifiedTimestamp_IsSet) OutValue = LastModifiedTimestamp_Optional; return LastModifiedTimestamp_IsSet; }
    /** @brief Returns a pointer to LastModifiedTimestamp_Optional, if it has been set, otherwise returns nullptr */
    FDateTime* GetLastModifiedTimestampOrNull() { if (LastModifiedTimestamp_IsSet) return &LastModifiedTimestamp_Optional; return nullptr; }
    /** @brief Returns a pointer to LastModifiedTimestamp_Optional, if it has been set, otherwise returns nullptr */
    const FDateTime* GetLastModifiedTimestampOrNull() const { if (LastModifiedTimestamp_IsSet) return &LastModifiedTimestamp_Optional; return nullptr; }
    /** @brief Sets the value of LastModifiedTimestamp_Optional and also sets LastModifiedTimestamp_IsSet to true */
    void SetLastModifiedTimestamp(FDateTime NewValue) { LastModifiedTimestamp_Optional = NewValue; LastModifiedTimestamp_IsSet = true; }
     /** @brief Clears the value of LastModifiedTimestamp_Optional and sets LastModifiedTimestamp_IsSet to false */
    void ClearLastModifiedTimestamp() { LastModifiedTimestamp_IsSet = false; }

    /** @brief Timestamp of when the resource was created */
    FDateTime CreatedTimestamp_Optional{  };
    /** @brief true if CreatedTimestamp_Optional has been set to a value */
    bool CreatedTimestamp_IsSet{ false };
    /** @brief Gets the value of CreatedTimestamp_Optional, regardless of it having been set */
    FDateTime& GetCreatedTimestamp() { return CreatedTimestamp_Optional; }
    /** @brief Gets the value of CreatedTimestamp_Optional, regardless of it having been set */
    const FDateTime& GetCreatedTimestamp() const { return CreatedTimestamp_Optional; }
    /** @brief Gets the value of CreatedTimestamp_Optional, if it has been set, otherwise it returns DefaultValue */
    const FDateTime& GetCreatedTimestamp(const FDateTime& DefaultValue) const { if (CreatedTimestamp_IsSet) return CreatedTimestamp_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of CreatedTimestamp_Optional and returns true if it has been set, otherwise returns false */
    bool GetCreatedTimestamp(FDateTime& OutValue) const { if (CreatedTimestamp_IsSet) OutValue = CreatedTimestamp_Optional; return CreatedTimestamp_IsSet; }
    /** @brief Returns a pointer to CreatedTimestamp_Optional, if it has been set, otherwise returns nullptr */
    FDateTime* GetCreatedTimestampOrNull() { if (CreatedTimestamp_IsSet) return &CreatedTimestamp_Optional; return nullptr; }
    /** @brief Returns a pointer to CreatedTimestamp_Optional, if it has been set, otherwise returns nullptr */
    const FDateTime* GetCreatedTimestampOrNull() const { if (CreatedTimestamp_IsSet) return &CreatedTimestamp_Optional; return nullptr; }
    /** @brief Sets the value of CreatedTimestamp_Optional and also sets CreatedTimestamp_IsSet to true */
    void SetCreatedTimestamp(FDateTime NewValue) { CreatedTimestamp_Optional = NewValue; CreatedTimestamp_IsSet = true; }
     /** @brief Clears the value of CreatedTimestamp_Optional and sets CreatedTimestamp_IsSet to false */
    void ClearCreatedTimestamp() { CreatedTimestamp_IsSet = false; }

    /** @brief ID of the Sandbox */
    FGuid SandboxId_Optional{  };
    /** @brief true if SandboxId_Optional has been set to a value */
    bool SandboxId_IsSet{ false };
    /** @brief Gets the value of SandboxId_Optional, regardless of it having been set */
    FGuid& GetSandboxId() { return SandboxId_Optional; }
    /** @brief Gets the value of SandboxId_Optional, regardless of it having been set */
    const FGuid& GetSandboxId() const { return SandboxId_Optional; }
    /** @brief Gets the value of SandboxId_Optional, if it has been set, otherwise it returns DefaultValue */
    const FGuid& GetSandboxId(const FGuid& DefaultValue) const { if (SandboxId_IsSet) return SandboxId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of SandboxId_Optional and returns true if it has been set, otherwise returns false */
    bool GetSandboxId(FGuid& OutValue) const { if (SandboxId_IsSet) OutValue = SandboxId_Optional; return SandboxId_IsSet; }
    /** @brief Returns a pointer to SandboxId_Optional, if it has been set, otherwise returns nullptr */
    FGuid* GetSandboxIdOrNull() { if (SandboxId_IsSet) return &SandboxId_Optional; return nullptr; }
    /** @brief Returns a pointer to SandboxId_Optional, if it has been set, otherwise returns nullptr */
    const FGuid* GetSandboxIdOrNull() const { if (SandboxId_IsSet) return &SandboxId_Optional; return nullptr; }
    /** @brief Sets the value of SandboxId_Optional and also sets SandboxId_IsSet to true */
    void SetSandboxId(FGuid NewValue) { SandboxId_Optional = NewValue; SandboxId_IsSet = true; }
     /** @brief Clears the value of SandboxId_Optional and sets SandboxId_IsSet to false */
    void ClearSandboxId() { SandboxId_IsSet = false; }

    /** @brief The ID of the Vendor. */
    FGuid VendorId{  };
    /** @brief Gets the value of VendorId */
    FGuid& GetVendorId() { return VendorId; }
    /** @brief Gets the value of VendorId */
    const FGuid& GetVendorId() const { return VendorId; }
    /** @brief Sets the value of VendorId */
    void SetVendorId(FGuid NewValue) { VendorId = NewValue;  }

    /** @brief The legacy ID of the Vendor. */
    int32 LegacyVendorId_Optional{  };
    /** @brief true if LegacyVendorId_Optional has been set to a value */
    bool LegacyVendorId_IsSet{ false };
    /** @brief Gets the value of LegacyVendorId_Optional, regardless of it having been set */
    int32& GetLegacyVendorId() { return LegacyVendorId_Optional; }
    /** @brief Gets the value of LegacyVendorId_Optional, regardless of it having been set */
    const int32& GetLegacyVendorId() const { return LegacyVendorId_Optional; }
    /** @brief Gets the value of LegacyVendorId_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetLegacyVendorId(const int32& DefaultValue) const { if (LegacyVendorId_IsSet) return LegacyVendorId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of LegacyVendorId_Optional and returns true if it has been set, otherwise returns false */
    bool GetLegacyVendorId(int32& OutValue) const { if (LegacyVendorId_IsSet) OutValue = LegacyVendorId_Optional; return LegacyVendorId_IsSet; }
    /** @brief Returns a pointer to LegacyVendorId_Optional, if it has been set, otherwise returns nullptr */
    int32* GetLegacyVendorIdOrNull() { if (LegacyVendorId_IsSet) return &LegacyVendorId_Optional; return nullptr; }
    /** @brief Returns a pointer to LegacyVendorId_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetLegacyVendorIdOrNull() const { if (LegacyVendorId_IsSet) return &LegacyVendorId_Optional; return nullptr; }
    /** @brief Sets the value of LegacyVendorId_Optional and also sets LegacyVendorId_IsSet to true */
    void SetLegacyVendorId(int32 NewValue) { LegacyVendorId_Optional = NewValue; LegacyVendorId_IsSet = true; }
     /** @brief Clears the value of LegacyVendorId_Optional and sets LegacyVendorId_IsSet to false */
    void ClearLegacyVendorId() { LegacyVendorId_Optional = 0; LegacyVendorId_IsSet = false; }
    /** @brief Returns true if LegacyVendorId_Optional is set and matches the default value */
    bool IsLegacyVendorIdDefaultValue() const { return LegacyVendorId_IsSet && LegacyVendorId_Optional == 0; }
    /** @brief Sets the value of LegacyVendorId_Optional to its default and also sets LegacyVendorId_IsSet to true */
    void SetLegacyVendorIdToDefault() { LegacyVendorId_Optional = 0; LegacyVendorId_IsSet = true; }

    /** @brief Determines how the Vendor fulfills the loot. */
    ERHAPI_DevVendorType VendorType_Optional{  };
    /** @brief true if VendorType_Optional has been set to a value */
    bool VendorType_IsSet{ false };
    /** @brief Gets the value of VendorType_Optional, regardless of it having been set */
    ERHAPI_DevVendorType& GetVendorType() { return VendorType_Optional; }
    /** @brief Gets the value of VendorType_Optional, regardless of it having been set */
    const ERHAPI_DevVendorType& GetVendorType() const { return VendorType_Optional; }
    /** @brief Gets the value of VendorType_Optional, if it has been set, otherwise it returns DefaultValue */
    const ERHAPI_DevVendorType& GetVendorType(const ERHAPI_DevVendorType& DefaultValue) const { if (VendorType_IsSet) return VendorType_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of VendorType_Optional and returns true if it has been set, otherwise returns false */
    bool GetVendorType(ERHAPI_DevVendorType& OutValue) const { if (VendorType_IsSet) OutValue = VendorType_Optional; return VendorType_IsSet; }
    /** @brief Returns a pointer to VendorType_Optional, if it has been set, otherwise returns nullptr */
    ERHAPI_DevVendorType* GetVendorTypeOrNull() { if (VendorType_IsSet) return &VendorType_Optional; return nullptr; }
    /** @brief Returns a pointer to VendorType_Optional, if it has been set, otherwise returns nullptr */
    const ERHAPI_DevVendorType* GetVendorTypeOrNull() const { if (VendorType_IsSet) return &VendorType_Optional; return nullptr; }
    /** @brief Sets the value of VendorType_Optional and also sets VendorType_IsSet to true */
    void SetVendorType(ERHAPI_DevVendorType NewValue) { VendorType_Optional = NewValue; VendorType_IsSet = true; }
     /** @brief Clears the value of VendorType_Optional and sets VendorType_IsSet to false */
    void ClearVendorType() { VendorType_IsSet = false; }

    /** @brief The Loot the Vendor will fulfill. */
    TArray<FRHAPI_DevLoot> Loot_Optional{  };
    /** @brief true if Loot_Optional has been set to a value */
    bool Loot_IsSet{ false };
    /** @brief Gets the value of Loot_Optional, regardless of it having been set */
    TArray<FRHAPI_DevLoot>& GetLoot() { return Loot_Optional; }
    /** @brief Gets the value of Loot_Optional, regardless of it having been set */
    const TArray<FRHAPI_DevLoot>& GetLoot() const { return Loot_Optional; }
    /** @brief Gets the value of Loot_Optional, if it has been set, otherwise it returns DefaultValue */
    const TArray<FRHAPI_DevLoot>& GetLoot(const TArray<FRHAPI_DevLoot>& DefaultValue) const { if (Loot_IsSet) return Loot_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Loot_Optional and returns true if it has been set, otherwise returns false */
    bool GetLoot(TArray<FRHAPI_DevLoot>& OutValue) const { if (Loot_IsSet) OutValue = Loot_Optional; return Loot_IsSet; }
    /** @brief Returns a pointer to Loot_Optional, if it has been set, otherwise returns nullptr */
    TArray<FRHAPI_DevLoot>* GetLootOrNull() { if (Loot_IsSet) return &Loot_Optional; return nullptr; }
    /** @brief Returns a pointer to Loot_Optional, if it has been set, otherwise returns nullptr */
    const TArray<FRHAPI_DevLoot>* GetLootOrNull() const { if (Loot_IsSet) return &Loot_Optional; return nullptr; }
    /** @brief Sets the value of Loot_Optional and also sets Loot_IsSet to true */
    void SetLoot(TArray<FRHAPI_DevLoot> NewValue) { Loot_Optional = NewValue; Loot_IsSet = true; }
     /** @brief Clears the value of Loot_Optional and sets Loot_IsSet to false */
    void ClearLoot() { Loot_IsSet = false; }
};

/** @} */
