// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereDeveloperAPIBaseModel.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevPlatformSessionTemplateUpdateRequest.generated.h"

/** @defgroup RHAPI_DevPlatformSessionTemplateUpdateRequest RallyHere API Model DevPlatformSessionTemplateUpdateRequest
 *  @{
 */

/**
 * @brief
 */
USTRUCT(BlueprintType)
struct RALLYHEREDEVELOPERAPI_API FRHAPI_DevPlatformSessionTemplateUpdateRequest : public FRHAPI_DevModel
{
    GENERATED_BODY()

    /**
    * @brief Fills this object with data from the passed in JSON
    *
    * @param [in] JsonValue Data from the API call.
    *
    * @return true if parsing of the JSON data was successful.
    */
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

    /**
    * @brief Writes the data from this object into the specified JSON Writer stream
    *
    * @param [in] Writer JSON Writer stream to push .
    */
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /** @brief The platform's name for this type of platform session */
    FString PlatformSessionType_Optional{  };
    /** @brief true if PlatformSessionType_Optional has been set to a value */
    bool PlatformSessionType_IsSet{ false };
    /** @brief Gets the value of PlatformSessionType_Optional, regardless of it having been set */
    FString& GetPlatformSessionType() { return PlatformSessionType_Optional; }
    /** @brief Gets the value of PlatformSessionType_Optional, regardless of it having been set */
    const FString& GetPlatformSessionType() const { return PlatformSessionType_Optional; }
    /** @brief Gets the value of PlatformSessionType_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetPlatformSessionType(const FString& DefaultValue) const { if (PlatformSessionType_IsSet) return PlatformSessionType_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of PlatformSessionType_Optional and returns true if it has been set, otherwise returns false */
    bool GetPlatformSessionType(FString& OutValue) const { if (PlatformSessionType_IsSet) OutValue = PlatformSessionType_Optional; return PlatformSessionType_IsSet; }
    /** @brief Returns a pointer to PlatformSessionType_Optional, if it has been set, otherwise returns nullptr */
    FString* GetPlatformSessionTypeOrNull() { if (PlatformSessionType_IsSet) return &PlatformSessionType_Optional; return nullptr; }
    /** @brief Returns a pointer to PlatformSessionType_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetPlatformSessionTypeOrNull() const { if (PlatformSessionType_IsSet) return &PlatformSessionType_Optional; return nullptr; }
    /** @brief Sets the value of PlatformSessionType_Optional and also sets PlatformSessionType_IsSet to true */
    void SetPlatformSessionType(FString NewValue) { PlatformSessionType_Optional = NewValue; PlatformSessionType_IsSet = true; }
     /** @brief Clears the value of PlatformSessionType_Optional and sets PlatformSessionType_IsSet to false */
    void ClearPlatformSessionType() { PlatformSessionType_IsSet = false; }

    /** @brief Custom passthrough data that will be added to all sessions of this type */
    TMap<FString, FString> CustomData_Optional{  };
    /** @brief true if CustomData_Optional has been set to a value */
    bool CustomData_IsSet{ false };
    /** @brief Gets the value of CustomData_Optional, regardless of it having been set */
    TMap<FString, FString>& GetCustomData() { return CustomData_Optional; }
    /** @brief Gets the value of CustomData_Optional, regardless of it having been set */
    const TMap<FString, FString>& GetCustomData() const { return CustomData_Optional; }
    /** @brief Gets the value of CustomData_Optional, if it has been set, otherwise it returns DefaultValue */
    const TMap<FString, FString>& GetCustomData(const TMap<FString, FString>& DefaultValue) const { if (CustomData_IsSet) return CustomData_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of CustomData_Optional and returns true if it has been set, otherwise returns false */
    bool GetCustomData(TMap<FString, FString>& OutValue) const { if (CustomData_IsSet) OutValue = CustomData_Optional; return CustomData_IsSet; }
    /** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
    TMap<FString, FString>* GetCustomDataOrNull() { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
    /** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
    const TMap<FString, FString>* GetCustomDataOrNull() const { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
    /** @brief Sets the value of CustomData_Optional and also sets CustomData_IsSet to true */
    void SetCustomData(TMap<FString, FString> NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true; }
     /** @brief Clears the value of CustomData_Optional and sets CustomData_IsSet to false */
    void ClearCustomData() { CustomData_IsSet = false; }
};

/** @} */
