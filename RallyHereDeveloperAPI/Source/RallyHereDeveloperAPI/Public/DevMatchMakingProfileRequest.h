// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereDeveloperAPIBaseModel.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevMatchMakingFunctionConfig.h"
#include "DevProfileJoinMode.h"
#include "DevTaskforceSizeByTime.h"
#include "DevMatchMakingProfileRequest.generated.h"

/** @defgroup RHAPI_DevMatchMakingProfileRequest RallyHere API Model DevMatchMakingProfileRequest
 *  @{
 */

/**
 * @brief
 */
USTRUCT(BlueprintType)
struct RALLYHEREDEVELOPERAPI_API FRHAPI_DevMatchMakingProfileRequest : public FRHAPI_DevModel
{
    GENERATED_BODY()

    /**
    * @brief Fills this object with data from the passed in JSON
    *
    * @param [in] JsonValue Data from the API call.
    *
    * @return true if parsing of the JSON data was successful.
    */
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

    /**
    * @brief Writes the data from this object into the specified JSON Writer stream
    *
    * @param [in] Writer JSON Writer stream to push .
    */
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /** @brief What mode to set on the MatchMakingProfile (normal, backfill etc) */
    ERHAPI_DevProfileJoinMode JoinMode_Optional{  };
    /** @brief true if JoinMode_Optional has been set to a value */
    bool JoinMode_IsSet{ false };
    /** @brief Gets the value of JoinMode_Optional, regardless of it having been set */
    ERHAPI_DevProfileJoinMode& GetJoinMode() { return JoinMode_Optional; }
    /** @brief Gets the value of JoinMode_Optional, regardless of it having been set */
    const ERHAPI_DevProfileJoinMode& GetJoinMode() const { return JoinMode_Optional; }
    /** @brief Gets the value of JoinMode_Optional, if it has been set, otherwise it returns DefaultValue */
    const ERHAPI_DevProfileJoinMode& GetJoinMode(const ERHAPI_DevProfileJoinMode& DefaultValue) const { if (JoinMode_IsSet) return JoinMode_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of JoinMode_Optional and returns true if it has been set, otherwise returns false */
    bool GetJoinMode(ERHAPI_DevProfileJoinMode& OutValue) const { if (JoinMode_IsSet) OutValue = JoinMode_Optional; return JoinMode_IsSet; }
    /** @brief Returns a pointer to JoinMode_Optional, if it has been set, otherwise returns nullptr */
    ERHAPI_DevProfileJoinMode* GetJoinModeOrNull() { if (JoinMode_IsSet) return &JoinMode_Optional; return nullptr; }
    /** @brief Returns a pointer to JoinMode_Optional, if it has been set, otherwise returns nullptr */
    const ERHAPI_DevProfileJoinMode* GetJoinModeOrNull() const { if (JoinMode_IsSet) return &JoinMode_Optional; return nullptr; }
    /** @brief Sets the value of JoinMode_Optional and also sets JoinMode_IsSet to true */
    void SetJoinMode(ERHAPI_DevProfileJoinMode NewValue) { JoinMode_Optional = NewValue; JoinMode_IsSet = true; }
     /** @brief Clears the value of JoinMode_Optional and sets JoinMode_IsSet to false */
    void ClearJoinMode() { JoinMode_IsSet = false; }

    /** @brief Which rank this queue should use MMR from to make matches from, and update at the end of match (1v1 MMR or 2v2 MMR for example) */
    FGuid RankId{  };
    /** @brief Gets the value of RankId */
    FGuid& GetRankId() { return RankId; }
    /** @brief Gets the value of RankId */
    const FGuid& GetRankId() const { return RankId; }
    /** @brief Sets the value of RankId */
    void SetRankId(FGuid NewValue) { RankId = NewValue;  }

    /** @brief The number of sides a game in this queue will have (2 in a 1v1 and 3 in a 1v1v1 for example */
    int32 NumSides{ 0 };
    /** @brief Gets the value of NumSides */
    int32& GetNumSides() { return NumSides; }
    /** @brief Gets the value of NumSides */
    const int32& GetNumSides() const { return NumSides; }
    /** @brief Sets the value of NumSides */
    void SetNumSides(int32 NewValue) { NumSides = NewValue;  }
    /** @brief Returns true if NumSides matches the default value */
    bool IsNumSidesDefaultValue() const { return NumSides == 0; }
    /** @brief Sets the value of NumSides to its default  */
    void SetNumSidesToDefault() { NumSides = 0;  }

    /** @brief The maximum number of players that can be on each team */
    int32 MaxPlayersPerSide{ 0 };
    /** @brief Gets the value of MaxPlayersPerSide */
    int32& GetMaxPlayersPerSide() { return MaxPlayersPerSide; }
    /** @brief Gets the value of MaxPlayersPerSide */
    const int32& GetMaxPlayersPerSide() const { return MaxPlayersPerSide; }
    /** @brief Sets the value of MaxPlayersPerSide */
    void SetMaxPlayersPerSide(int32 NewValue) { MaxPlayersPerSide = NewValue;  }
    /** @brief Returns true if MaxPlayersPerSide matches the default value */
    bool IsMaxPlayersPerSideDefaultValue() const { return MaxPlayersPerSide == 0; }
    /** @brief Sets the value of MaxPlayersPerSide to its default  */
    void SetMaxPlayersPerSideToDefault() { MaxPlayersPerSide = 0;  }

    /** @brief The minimum number of players that can be on each team */
    int32 MinPlayersPerSide{ 0 };
    /** @brief Gets the value of MinPlayersPerSide */
    int32& GetMinPlayersPerSide() { return MinPlayersPerSide; }
    /** @brief Gets the value of MinPlayersPerSide */
    const int32& GetMinPlayersPerSide() const { return MinPlayersPerSide; }
    /** @brief Sets the value of MinPlayersPerSide */
    void SetMinPlayersPerSide(int32 NewValue) { MinPlayersPerSide = NewValue;  }
    /** @brief Returns true if MinPlayersPerSide matches the default value */
    bool IsMinPlayersPerSideDefaultValue() const { return MinPlayersPerSide == 0; }
    /** @brief Sets the value of MinPlayersPerSide to its default  */
    void SetMinPlayersPerSideToDefault() { MinPlayersPerSide = 0;  }

    /** @brief The minimum number of players that can be on a single linking (a party) */
    int32 MinPlayersPerLinking{ 0 };
    /** @brief Gets the value of MinPlayersPerLinking */
    int32& GetMinPlayersPerLinking() { return MinPlayersPerLinking; }
    /** @brief Gets the value of MinPlayersPerLinking */
    const int32& GetMinPlayersPerLinking() const { return MinPlayersPerLinking; }
    /** @brief Sets the value of MinPlayersPerLinking */
    void SetMinPlayersPerLinking(int32 NewValue) { MinPlayersPerLinking = NewValue;  }
    /** @brief Returns true if MinPlayersPerLinking matches the default value */
    bool IsMinPlayersPerLinkingDefaultValue() const { return MinPlayersPerLinking == 0; }
    /** @brief Sets the value of MinPlayersPerLinking to its default  */
    void SetMinPlayersPerLinkingToDefault() { MinPlayersPerLinking = 0;  }

    /** @brief The maximum number of players that can be on a single linking (a party) */
    int32 MaxPlayersPerLinking{ 0 };
    /** @brief Gets the value of MaxPlayersPerLinking */
    int32& GetMaxPlayersPerLinking() { return MaxPlayersPerLinking; }
    /** @brief Gets the value of MaxPlayersPerLinking */
    const int32& GetMaxPlayersPerLinking() const { return MaxPlayersPerLinking; }
    /** @brief Sets the value of MaxPlayersPerLinking */
    void SetMaxPlayersPerLinking(int32 NewValue) { MaxPlayersPerLinking = NewValue;  }
    /** @brief Returns true if MaxPlayersPerLinking matches the default value */
    bool IsMaxPlayersPerLinkingDefaultValue() const { return MaxPlayersPerLinking == 0; }
    /** @brief Sets the value of MaxPlayersPerLinking to its default  */
    void SetMaxPlayersPerLinkingToDefault() { MaxPlayersPerLinking = 0;  }

    /** @brief The maximum difference in players per side when generating a match from this profile */
    int32 MaxSideDelta{ 0 };
    /** @brief Gets the value of MaxSideDelta */
    int32& GetMaxSideDelta() { return MaxSideDelta; }
    /** @brief Gets the value of MaxSideDelta */
    const int32& GetMaxSideDelta() const { return MaxSideDelta; }
    /** @brief Sets the value of MaxSideDelta */
    void SetMaxSideDelta(int32 NewValue) { MaxSideDelta = NewValue;  }
    /** @brief Returns true if MaxSideDelta matches the default value */
    bool IsMaxSideDeltaDefaultValue() const { return MaxSideDelta == 0; }
    /** @brief Sets the value of MaxSideDelta to its default  */
    void SetMaxSideDeltaToDefault() { MaxSideDelta = 0;  }

    /** @brief Which instance request template is used for matches generated from this profile */
    FGuid InstanceRequestTemplateId{  };
    /** @brief Gets the value of InstanceRequestTemplateId */
    FGuid& GetInstanceRequestTemplateId() { return InstanceRequestTemplateId; }
    /** @brief Gets the value of InstanceRequestTemplateId */
    const FGuid& GetInstanceRequestTemplateId() const { return InstanceRequestTemplateId; }
    /** @brief Sets the value of InstanceRequestTemplateId */
    void SetInstanceRequestTemplateId(FGuid NewValue) { InstanceRequestTemplateId = NewValue;  }

    FRHAPI_DevTaskforceSizeByTime TaskforceSizeByTime_Optional{  };
    /** @brief true if TaskforceSizeByTime_Optional has been set to a value */
    bool TaskforceSizeByTime_IsSet{ false };
    /** @brief Gets the value of TaskforceSizeByTime_Optional, regardless of it having been set */
    FRHAPI_DevTaskforceSizeByTime& GetTaskforceSizeByTime() { return TaskforceSizeByTime_Optional; }
    /** @brief Gets the value of TaskforceSizeByTime_Optional, regardless of it having been set */
    const FRHAPI_DevTaskforceSizeByTime& GetTaskforceSizeByTime() const { return TaskforceSizeByTime_Optional; }
    /** @brief Gets the value of TaskforceSizeByTime_Optional, if it has been set, otherwise it returns DefaultValue */
    const FRHAPI_DevTaskforceSizeByTime& GetTaskforceSizeByTime(const FRHAPI_DevTaskforceSizeByTime& DefaultValue) const { if (TaskforceSizeByTime_IsSet) return TaskforceSizeByTime_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of TaskforceSizeByTime_Optional and returns true if it has been set, otherwise returns false */
    bool GetTaskforceSizeByTime(FRHAPI_DevTaskforceSizeByTime& OutValue) const { if (TaskforceSizeByTime_IsSet) OutValue = TaskforceSizeByTime_Optional; return TaskforceSizeByTime_IsSet; }
    /** @brief Returns a pointer to TaskforceSizeByTime_Optional, if it has been set, otherwise returns nullptr */
    FRHAPI_DevTaskforceSizeByTime* GetTaskforceSizeByTimeOrNull() { if (TaskforceSizeByTime_IsSet) return &TaskforceSizeByTime_Optional; return nullptr; }
    /** @brief Returns a pointer to TaskforceSizeByTime_Optional, if it has been set, otherwise returns nullptr */
    const FRHAPI_DevTaskforceSizeByTime* GetTaskforceSizeByTimeOrNull() const { if (TaskforceSizeByTime_IsSet) return &TaskforceSizeByTime_Optional; return nullptr; }
    /** @brief Sets the value of TaskforceSizeByTime_Optional and also sets TaskforceSizeByTime_IsSet to true */
    void SetTaskforceSizeByTime(FRHAPI_DevTaskforceSizeByTime NewValue) { TaskforceSizeByTime_Optional = NewValue; TaskforceSizeByTime_IsSet = true; }
     /** @brief Clears the value of TaskforceSizeByTime_Optional and sets TaskforceSizeByTime_IsSet to false */
    void ClearTaskforceSizeByTime() { TaskforceSizeByTime_IsSet = false; }

    FRHAPI_DevMatchMakingFunctionConfig MatchMakingFunctionConfig{  };
    /** @brief Gets the value of MatchMakingFunctionConfig */
    FRHAPI_DevMatchMakingFunctionConfig& GetMatchMakingFunctionConfig() { return MatchMakingFunctionConfig; }
    /** @brief Gets the value of MatchMakingFunctionConfig */
    const FRHAPI_DevMatchMakingFunctionConfig& GetMatchMakingFunctionConfig() const { return MatchMakingFunctionConfig; }
    /** @brief Sets the value of MatchMakingFunctionConfig */
    void SetMatchMakingFunctionConfig(FRHAPI_DevMatchMakingFunctionConfig NewValue) { MatchMakingFunctionConfig = NewValue;  }

    /** @brief Which matchmaking strides should be used to divide the queue population */
    FGuid StrideId{  };
    /** @brief Gets the value of StrideId */
    FGuid& GetStrideId() { return StrideId; }
    /** @brief Gets the value of StrideId */
    const FGuid& GetStrideId() const { return StrideId; }
    /** @brief Sets the value of StrideId */
    void SetStrideId(FGuid NewValue) { StrideId = NewValue;  }

    /** @brief Dictionary of config required for legacy games */
    TMap<FString, FString> LegacyConfig_Optional{  };
    /** @brief true if LegacyConfig_Optional has been set to a value */
    bool LegacyConfig_IsSet{ false };
    /** @brief Gets the value of LegacyConfig_Optional, regardless of it having been set */
    TMap<FString, FString>& GetLegacyConfig() { return LegacyConfig_Optional; }
    /** @brief Gets the value of LegacyConfig_Optional, regardless of it having been set */
    const TMap<FString, FString>& GetLegacyConfig() const { return LegacyConfig_Optional; }
    /** @brief Gets the value of LegacyConfig_Optional, if it has been set, otherwise it returns DefaultValue */
    const TMap<FString, FString>& GetLegacyConfig(const TMap<FString, FString>& DefaultValue) const { if (LegacyConfig_IsSet) return LegacyConfig_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of LegacyConfig_Optional and returns true if it has been set, otherwise returns false */
    bool GetLegacyConfig(TMap<FString, FString>& OutValue) const { if (LegacyConfig_IsSet) OutValue = LegacyConfig_Optional; return LegacyConfig_IsSet; }
    /** @brief Returns a pointer to LegacyConfig_Optional, if it has been set, otherwise returns nullptr */
    TMap<FString, FString>* GetLegacyConfigOrNull() { if (LegacyConfig_IsSet) return &LegacyConfig_Optional; return nullptr; }
    /** @brief Returns a pointer to LegacyConfig_Optional, if it has been set, otherwise returns nullptr */
    const TMap<FString, FString>* GetLegacyConfigOrNull() const { if (LegacyConfig_IsSet) return &LegacyConfig_Optional; return nullptr; }
    /** @brief Sets the value of LegacyConfig_Optional and also sets LegacyConfig_IsSet to true */
    void SetLegacyConfig(TMap<FString, FString> NewValue) { LegacyConfig_Optional = NewValue; LegacyConfig_IsSet = true; }
     /** @brief Clears the value of LegacyConfig_Optional and sets LegacyConfig_IsSet to false */
    void ClearLegacyConfig() { LegacyConfig_IsSet = false; }

    /** @brief The trueskill quality threshold that this profile will start trying to match with */
    float TrueskillQualityByTimeMaxQuality_Optional{  };
    /** @brief true if TrueskillQualityByTimeMaxQuality_Optional has been set to a value */
    bool TrueskillQualityByTimeMaxQuality_IsSet{ false };
    /** @brief Gets the value of TrueskillQualityByTimeMaxQuality_Optional, regardless of it having been set */
    float& GetTrueskillQualityByTimeMaxQuality() { return TrueskillQualityByTimeMaxQuality_Optional; }
    /** @brief Gets the value of TrueskillQualityByTimeMaxQuality_Optional, regardless of it having been set */
    const float& GetTrueskillQualityByTimeMaxQuality() const { return TrueskillQualityByTimeMaxQuality_Optional; }
    /** @brief Gets the value of TrueskillQualityByTimeMaxQuality_Optional, if it has been set, otherwise it returns DefaultValue */
    const float& GetTrueskillQualityByTimeMaxQuality(const float& DefaultValue) const { if (TrueskillQualityByTimeMaxQuality_IsSet) return TrueskillQualityByTimeMaxQuality_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of TrueskillQualityByTimeMaxQuality_Optional and returns true if it has been set, otherwise returns false */
    bool GetTrueskillQualityByTimeMaxQuality(float& OutValue) const { if (TrueskillQualityByTimeMaxQuality_IsSet) OutValue = TrueskillQualityByTimeMaxQuality_Optional; return TrueskillQualityByTimeMaxQuality_IsSet; }
    /** @brief Returns a pointer to TrueskillQualityByTimeMaxQuality_Optional, if it has been set, otherwise returns nullptr */
    float* GetTrueskillQualityByTimeMaxQualityOrNull() { if (TrueskillQualityByTimeMaxQuality_IsSet) return &TrueskillQualityByTimeMaxQuality_Optional; return nullptr; }
    /** @brief Returns a pointer to TrueskillQualityByTimeMaxQuality_Optional, if it has been set, otherwise returns nullptr */
    const float* GetTrueskillQualityByTimeMaxQualityOrNull() const { if (TrueskillQualityByTimeMaxQuality_IsSet) return &TrueskillQualityByTimeMaxQuality_Optional; return nullptr; }
    /** @brief Sets the value of TrueskillQualityByTimeMaxQuality_Optional and also sets TrueskillQualityByTimeMaxQuality_IsSet to true */
    void SetTrueskillQualityByTimeMaxQuality(float NewValue) { TrueskillQualityByTimeMaxQuality_Optional = NewValue; TrueskillQualityByTimeMaxQuality_IsSet = true; }
     /** @brief Clears the value of TrueskillQualityByTimeMaxQuality_Optional and sets TrueskillQualityByTimeMaxQuality_IsSet to false */
    void ClearTrueskillQualityByTimeMaxQuality() { TrueskillQualityByTimeMaxQuality_IsSet = false; }

    /** @brief The max amount of time we will try to create matches before quality will be disregarded */
    float TrueskillQualityByTimeMaxMinutes_Optional{  };
    /** @brief true if TrueskillQualityByTimeMaxMinutes_Optional has been set to a value */
    bool TrueskillQualityByTimeMaxMinutes_IsSet{ false };
    /** @brief Gets the value of TrueskillQualityByTimeMaxMinutes_Optional, regardless of it having been set */
    float& GetTrueskillQualityByTimeMaxMinutes() { return TrueskillQualityByTimeMaxMinutes_Optional; }
    /** @brief Gets the value of TrueskillQualityByTimeMaxMinutes_Optional, regardless of it having been set */
    const float& GetTrueskillQualityByTimeMaxMinutes() const { return TrueskillQualityByTimeMaxMinutes_Optional; }
    /** @brief Gets the value of TrueskillQualityByTimeMaxMinutes_Optional, if it has been set, otherwise it returns DefaultValue */
    const float& GetTrueskillQualityByTimeMaxMinutes(const float& DefaultValue) const { if (TrueskillQualityByTimeMaxMinutes_IsSet) return TrueskillQualityByTimeMaxMinutes_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of TrueskillQualityByTimeMaxMinutes_Optional and returns true if it has been set, otherwise returns false */
    bool GetTrueskillQualityByTimeMaxMinutes(float& OutValue) const { if (TrueskillQualityByTimeMaxMinutes_IsSet) OutValue = TrueskillQualityByTimeMaxMinutes_Optional; return TrueskillQualityByTimeMaxMinutes_IsSet; }
    /** @brief Returns a pointer to TrueskillQualityByTimeMaxMinutes_Optional, if it has been set, otherwise returns nullptr */
    float* GetTrueskillQualityByTimeMaxMinutesOrNull() { if (TrueskillQualityByTimeMaxMinutes_IsSet) return &TrueskillQualityByTimeMaxMinutes_Optional; return nullptr; }
    /** @brief Returns a pointer to TrueskillQualityByTimeMaxMinutes_Optional, if it has been set, otherwise returns nullptr */
    const float* GetTrueskillQualityByTimeMaxMinutesOrNull() const { if (TrueskillQualityByTimeMaxMinutes_IsSet) return &TrueskillQualityByTimeMaxMinutes_Optional; return nullptr; }
    /** @brief Sets the value of TrueskillQualityByTimeMaxMinutes_Optional and also sets TrueskillQualityByTimeMaxMinutes_IsSet to true */
    void SetTrueskillQualityByTimeMaxMinutes(float NewValue) { TrueskillQualityByTimeMaxMinutes_Optional = NewValue; TrueskillQualityByTimeMaxMinutes_IsSet = true; }
     /** @brief Clears the value of TrueskillQualityByTimeMaxMinutes_Optional and sets TrueskillQualityByTimeMaxMinutes_IsSet to false */
    void ClearTrueskillQualityByTimeMaxMinutes() { TrueskillQualityByTimeMaxMinutes_IsSet = false; }

    /** @brief Method used to decay the required quality of matches over time. Currently only 'two_term_quadratic' is supported */
    FString TrueskillQualityByTimeMethod_Optional{  };
    /** @brief true if TrueskillQualityByTimeMethod_Optional has been set to a value */
    bool TrueskillQualityByTimeMethod_IsSet{ false };
    /** @brief Gets the value of TrueskillQualityByTimeMethod_Optional, regardless of it having been set */
    FString& GetTrueskillQualityByTimeMethod() { return TrueskillQualityByTimeMethod_Optional; }
    /** @brief Gets the value of TrueskillQualityByTimeMethod_Optional, regardless of it having been set */
    const FString& GetTrueskillQualityByTimeMethod() const { return TrueskillQualityByTimeMethod_Optional; }
    /** @brief Gets the value of TrueskillQualityByTimeMethod_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetTrueskillQualityByTimeMethod(const FString& DefaultValue) const { if (TrueskillQualityByTimeMethod_IsSet) return TrueskillQualityByTimeMethod_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of TrueskillQualityByTimeMethod_Optional and returns true if it has been set, otherwise returns false */
    bool GetTrueskillQualityByTimeMethod(FString& OutValue) const { if (TrueskillQualityByTimeMethod_IsSet) OutValue = TrueskillQualityByTimeMethod_Optional; return TrueskillQualityByTimeMethod_IsSet; }
    /** @brief Returns a pointer to TrueskillQualityByTimeMethod_Optional, if it has been set, otherwise returns nullptr */
    FString* GetTrueskillQualityByTimeMethodOrNull() { if (TrueskillQualityByTimeMethod_IsSet) return &TrueskillQualityByTimeMethod_Optional; return nullptr; }
    /** @brief Returns a pointer to TrueskillQualityByTimeMethod_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetTrueskillQualityByTimeMethodOrNull() const { if (TrueskillQualityByTimeMethod_IsSet) return &TrueskillQualityByTimeMethod_Optional; return nullptr; }
    /** @brief Sets the value of TrueskillQualityByTimeMethod_Optional and also sets TrueskillQualityByTimeMethod_IsSet to true */
    void SetTrueskillQualityByTimeMethod(FString NewValue) { TrueskillQualityByTimeMethod_Optional = NewValue; TrueskillQualityByTimeMethod_IsSet = true; }
     /** @brief Clears the value of TrueskillQualityByTimeMethod_Optional and sets TrueskillQualityByTimeMethod_IsSet to false */
    void ClearTrueskillQualityByTimeMethod() { TrueskillQualityByTimeMethod_IsSet = false; }

    /** @brief Flag determining whether or not this profile will actively be ticked */
    bool Active{ false };
    /** @brief Gets the value of Active */
    bool& GetActive() { return Active; }
    /** @brief Gets the value of Active */
    const bool& GetActive() const { return Active; }
    /** @brief Sets the value of Active */
    void SetActive(bool NewValue) { Active = NewValue;  }
    /** @brief Returns true if Active matches the default value */
    bool IsActiveDefaultValue() const { return Active == false; }
    /** @brief Sets the value of Active to its default  */
    void SetActiveToDefault() { Active = false;  }
};

/** @} */
