// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereDeveloperAPIBaseModel.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevPortalPermissionOrgGroup.generated.h"

/** @defgroup RHAPI_DevPortalPermissionOrgGroup RallyHere API Model DevPortalPermissionOrgGroup
 *  @{
 */

/**
 * @brief 
 */
USTRUCT(BlueprintType)
struct RALLYHEREDEVELOPERAPI_API FRHAPI_DevPortalPermissionOrgGroup : public FRHAPI_DevModel
{
    GENERATED_BODY()

    /**
    * @brief Fills this object with data from the passed in JSON
    *
    * @param [in] JsonValue Data from the API call.
    *
    * @return true if parsing of the JSON data was successful.
    */
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

    /**
    * @brief Writes the data from this object into the specified JSON Writer stream
    *
    * @param [in] Writer JSON Writer stream to push .
    */
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    FGuid GroupId{  };
    /** @brief Gets the value of GroupId */
    FGuid& GetGroupId() { return GroupId; }
    /** @brief Gets the value of GroupId */
    const FGuid& GetGroupId() const { return GroupId; }
    /** @brief Sets the value of GroupId */
    void SetGroupId(FGuid NewValue) { GroupId = NewValue;  }

    FString OrgGroupName{  };
    /** @brief Gets the value of OrgGroupName */
    FString& GetOrgGroupName() { return OrgGroupName; }
    /** @brief Gets the value of OrgGroupName */
    const FString& GetOrgGroupName() const { return OrgGroupName; }
    /** @brief Sets the value of OrgGroupName */
    void SetOrgGroupName(FString NewValue) { OrgGroupName = NewValue;  }

    FGuid OrgId{  };
    /** @brief Gets the value of OrgId */
    FGuid& GetOrgId() { return OrgId; }
    /** @brief Gets the value of OrgId */
    const FGuid& GetOrgId() const { return OrgId; }
    /** @brief Sets the value of OrgId */
    void SetOrgId(FGuid NewValue) { OrgId = NewValue;  }

    FString DisplayName_Optional{  };
    /** @brief true if DisplayName_Optional has been set to a value */
    bool DisplayName_IsSet{ false };
    /** @brief Gets the value of DisplayName_Optional, regardless of it having been set */
    FString& GetDisplayName() { return DisplayName_Optional; }
    /** @brief Gets the value of DisplayName_Optional, regardless of it having been set */
    const FString& GetDisplayName() const { return DisplayName_Optional; }
    /** @brief Gets the value of DisplayName_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetDisplayName(const FString& DefaultValue) const { if (DisplayName_IsSet) return DisplayName_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of DisplayName_Optional and returns true if it has been set, otherwise returns false */
    bool GetDisplayName(FString& OutValue) const { if (DisplayName_IsSet) OutValue = DisplayName_Optional; return DisplayName_IsSet; }
    /** @brief Returns a pointer to DisplayName_Optional, if it has been set, otherwise returns nullptr */
    FString* GetDisplayNameOrNull() { if (DisplayName_IsSet) return &DisplayName_Optional; return nullptr; }
    /** @brief Returns a pointer to DisplayName_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetDisplayNameOrNull() const { if (DisplayName_IsSet) return &DisplayName_Optional; return nullptr; }
    /** @brief Sets the value of DisplayName_Optional and also sets DisplayName_IsSet to true */
    void SetDisplayName(FString NewValue) { DisplayName_Optional = NewValue; DisplayName_IsSet = true; }
     /** @brief Clears the value of DisplayName_Optional and sets DisplayName_IsSet to false */
    void ClearDisplayName() { DisplayName_IsSet = false; }

    FString Description_Optional{  };
    /** @brief true if Description_Optional has been set to a value */
    bool Description_IsSet{ false };
    /** @brief Gets the value of Description_Optional, regardless of it having been set */
    FString& GetDescription() { return Description_Optional; }
    /** @brief Gets the value of Description_Optional, regardless of it having been set */
    const FString& GetDescription() const { return Description_Optional; }
    /** @brief Gets the value of Description_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetDescription(const FString& DefaultValue) const { if (Description_IsSet) return Description_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Description_Optional and returns true if it has been set, otherwise returns false */
    bool GetDescription(FString& OutValue) const { if (Description_IsSet) OutValue = Description_Optional; return Description_IsSet; }
    /** @brief Returns a pointer to Description_Optional, if it has been set, otherwise returns nullptr */
    FString* GetDescriptionOrNull() { if (Description_IsSet) return &Description_Optional; return nullptr; }
    /** @brief Returns a pointer to Description_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetDescriptionOrNull() const { if (Description_IsSet) return &Description_Optional; return nullptr; }
    /** @brief Sets the value of Description_Optional and also sets Description_IsSet to true */
    void SetDescription(FString NewValue) { Description_Optional = NewValue; Description_IsSet = true; }
     /** @brief Clears the value of Description_Optional and sets Description_IsSet to false */
    void ClearDescription() { Description_IsSet = false; }
};

/** @} */
