// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereDeveloperAPIBaseModel.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevUpdateClientRequest.generated.h"

/** @defgroup RHAPI_DevUpdateClientRequest RallyHere API Model DevUpdateClientRequest
 *  @{
 */

/**
 * @brief 
 */
USTRUCT(BlueprintType)
struct RALLYHEREDEVELOPERAPI_API FRHAPI_DevUpdateClientRequest : public FRHAPI_DevModel
{
    GENERATED_BODY()

    /**
    * @brief Fills this object with data from the passed in JSON
    *
    * @param [in] JsonValue Data from the API call.
    *
    * @return true if parsing of the JSON data was successful.
    */
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

    /**
    * @brief Writes the data from this object into the specified JSON Writer stream
    *
    * @param [in] Writer JSON Writer stream to push .
    */
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /** @brief Client name */
    FString Name{  };
    /** @brief Gets the value of Name */
    FString& GetName() { return Name; }
    /** @brief Gets the value of Name */
    const FString& GetName() const { return Name; }
    /** @brief Sets the value of Name */
    void SetName(FString NewValue) { Name = NewValue;  }

    /** @brief Policy ID to use for the client */
    FGuid PolicyId{  };
    /** @brief Gets the value of PolicyId */
    FGuid& GetPolicyId() { return PolicyId; }
    /** @brief Gets the value of PolicyId */
    const FGuid& GetPolicyId() const { return PolicyId; }
    /** @brief Sets the value of PolicyId */
    void SetPolicyId(FGuid NewValue) { PolicyId = NewValue;  }

    /** @brief Client description */
    FString Description{  };
    /** @brief Gets the value of Description */
    FString& GetDescription() { return Description; }
    /** @brief Gets the value of Description */
    const FString& GetDescription() const { return Description; }
    /** @brief Sets the value of Description */
    void SetDescription(FString NewValue) { Description = NewValue;  }

    /** @brief Rotate the client secret */
    bool RotateSecret_Optional{  };
    /** @brief true if RotateSecret_Optional has been set to a value */
    bool RotateSecret_IsSet{ false };
    /** @brief Gets the value of RotateSecret_Optional, regardless of it having been set */
    bool& GetRotateSecret() { return RotateSecret_Optional; }
    /** @brief Gets the value of RotateSecret_Optional, regardless of it having been set */
    const bool& GetRotateSecret() const { return RotateSecret_Optional; }
    /** @brief Gets the value of RotateSecret_Optional, if it has been set, otherwise it returns DefaultValue */
    const bool& GetRotateSecret(const bool& DefaultValue) const { if (RotateSecret_IsSet) return RotateSecret_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of RotateSecret_Optional and returns true if it has been set, otherwise returns false */
    bool GetRotateSecret(bool& OutValue) const { if (RotateSecret_IsSet) OutValue = RotateSecret_Optional; return RotateSecret_IsSet; }
    /** @brief Returns a pointer to RotateSecret_Optional, if it has been set, otherwise returns nullptr */
    bool* GetRotateSecretOrNull() { if (RotateSecret_IsSet) return &RotateSecret_Optional; return nullptr; }
    /** @brief Returns a pointer to RotateSecret_Optional, if it has been set, otherwise returns nullptr */
    const bool* GetRotateSecretOrNull() const { if (RotateSecret_IsSet) return &RotateSecret_Optional; return nullptr; }
    /** @brief Sets the value of RotateSecret_Optional and also sets RotateSecret_IsSet to true */
    void SetRotateSecret(bool NewValue) { RotateSecret_Optional = NewValue; RotateSecret_IsSet = true; }
     /** @brief Clears the value of RotateSecret_Optional and sets RotateSecret_IsSet to false */
    void ClearRotateSecret() { RotateSecret_Optional = false; RotateSecret_IsSet = false; }
    /** @brief Returns true if RotateSecret_Optional is set and matches the default value */
    bool IsRotateSecretDefaultValue() const { return RotateSecret_IsSet && RotateSecret_Optional == false; }
    /** @brief Sets the value of RotateSecret_Optional to its default and also sets RotateSecret_IsSet to true */
    void SetRotateSecretToDefault() { RotateSecret_Optional = false; RotateSecret_IsSet = true; }
};

/** @} */
