// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereDeveloperAPIAuthContext.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevDatacenterProvider.h"
#include "DevDatacenterProviderCreate.h"
#include "DevDatacenterProviderUpdate.h"
#include "DevDatacenterProviderVersionsAndTransactions.h"
#include "DevHTTPValidationError.h"

namespace RallyHereDeveloperAPI
{
using RallyHereDeveloperAPI::ToStringFormatArg;
using RallyHereDeveloperAPI::WriteJsonValue;
using RallyHereDeveloperAPI::TryGetJsonValue;

struct FRequest_CreateDp;
struct FResponse_CreateDp;
struct FRequest_GetAllDps;
struct FResponse_GetAllDps;
struct FRequest_GetDp;
struct FResponse_GetDp;
struct FRequest_GetDpVersions;
struct FResponse_GetDpVersions;
struct FRequest_UpdateDp;
struct FResponse_UpdateDp;

DECLARE_DELEGATE_OneParam(FDelegate_CreateDp, const FResponse_CreateDp&);
DECLARE_DELEGATE_OneParam(FDelegate_GetAllDps, const FResponse_GetAllDps&);
DECLARE_DELEGATE_OneParam(FDelegate_GetDp, const FResponse_GetDp&);
DECLARE_DELEGATE_OneParam(FDelegate_GetDpVersions, const FResponse_GetDpVersions&);
DECLARE_DELEGATE_OneParam(FDelegate_UpdateDp, const FResponse_UpdateDp&);

class RALLYHEREDEVELOPERAPI_API FArmadaDatacenterProviderAPI : public FAPI
{
public:
    FArmadaDatacenterProviderAPI();
    virtual ~FArmadaDatacenterProviderAPI();

    FHttpRequestPtr CreateDp(const FRequest_CreateDp& Request, const FDelegate_CreateDp& Delegate = FDelegate_CreateDp(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr GetAllDps(const FRequest_GetAllDps& Request, const FDelegate_GetAllDps& Delegate = FDelegate_GetAllDps(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr GetDp(const FRequest_GetDp& Request, const FDelegate_GetDp& Delegate = FDelegate_GetDp(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr GetDpVersions(const FRequest_GetDpVersions& Request, const FDelegate_GetDpVersions& Delegate = FDelegate_GetDpVersions(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr UpdateDp(const FRequest_UpdateDp& Request, const FDelegate_UpdateDp& Delegate = FDelegate_UpdateDp(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);

private:
    void OnCreateDpResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_CreateDp Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetAllDpsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAllDps Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetDpResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetDp Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetDpVersionsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetDpVersions Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnUpdateDpResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdateDp Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};

/* Create Dp
 *
 * Create a datacenter provider
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_CreateDp : public FRequest
{
    FRequest_CreateDp();
    virtual ~FRequest_CreateDp() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FRHAPI_DevDatacenterProviderCreate DatacenterProviderCreate;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_CreateDp : public FResponse
{
    FResponse_CreateDp(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_CreateDp() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevDatacenterProvider Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevDatacenterProvider& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_CreateDp
{
    typedef FRequest_CreateDp Request;
    typedef FResponse_CreateDp Response;
    typedef FDelegate_CreateDp Delegate;
    typedef FArmadaDatacenterProviderAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.CreateDp(InRequest, InDelegate, Priority); }
};

/* Get All Dps
 *
 * Get all datacenter providers
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_GetAllDps : public FRequest
{
    FRequest_GetAllDps();
    virtual ~FRequest_GetAllDps() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_GetAllDps : public FResponse
{
    FResponse_GetAllDps(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetAllDps() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    TArray<FRHAPI_DevDatacenterProvider> Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(TArray<FRHAPI_DevDatacenterProvider>& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_GetAllDps
{
    typedef FRequest_GetAllDps Request;
    typedef FResponse_GetAllDps Response;
    typedef FDelegate_GetAllDps Delegate;
    typedef FArmadaDatacenterProviderAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.GetAllDps(InRequest, InDelegate, Priority); }
};

/* Get Dp
 *
 * Get a datacenter provider
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_GetDp : public FRequest
{
    FRequest_GetDp();
    virtual ~FRequest_GetDp() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* The datacenter provider ID */
    FGuid DpId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_GetDp : public FResponse
{
    FResponse_GetDp(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetDp() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevDatacenterProvider Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevDatacenterProvider& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_GetDp
{
    typedef FRequest_GetDp Request;
    typedef FResponse_GetDp Response;
    typedef FDelegate_GetDp Delegate;
    typedef FArmadaDatacenterProviderAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.GetDp(InRequest, InDelegate, Priority); }
};

/* Get Dp Versions
 *
 * Get all version history for a datacenter provider
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_GetDpVersions : public FRequest
{
    FRequest_GetDpVersions();
    virtual ~FRequest_GetDpVersions() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* The datacenter provider ID */
    FGuid DpId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_GetDpVersions : public FResponse
{
    FResponse_GetDpVersions(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetDpVersions() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevDatacenterProviderVersionsAndTransactions Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevDatacenterProviderVersionsAndTransactions& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_GetDpVersions
{
    typedef FRequest_GetDpVersions Request;
    typedef FResponse_GetDpVersions Response;
    typedef FDelegate_GetDpVersions Delegate;
    typedef FArmadaDatacenterProviderAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.GetDpVersions(InRequest, InDelegate, Priority); }
};

/* Update Dp
 *
 * Update a datacenter provider
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_UpdateDp : public FRequest
{
    FRequest_UpdateDp();
    virtual ~FRequest_UpdateDp() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* The datacenter provider ID */
    FGuid DpId;
    FRHAPI_DevDatacenterProviderUpdate DatacenterProviderUpdate;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_UpdateDp : public FResponse
{
    FResponse_UpdateDp(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_UpdateDp() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevDatacenterProvider Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevDatacenterProvider& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_UpdateDp
{
    typedef FRequest_UpdateDp Request;
    typedef FResponse_UpdateDp Response;
    typedef FDelegate_UpdateDp Delegate;
    typedef FArmadaDatacenterProviderAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.UpdateDp(InRequest, InDelegate, Priority); }
};


}
