// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereDeveloperAPIBaseModel.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevUuidGenerationType.h"
#include "DevLegacyIdGenerationConfig.generated.h"

/** @defgroup RHAPI_DevLegacyIdGenerationConfig RallyHere API Model DevLegacyIdGenerationConfig
 *  @{
 */

/**
 * @brief Options used to effect how IDs are generated to help bridge the gap between the legacy int based IDs and the new UUID based IDs. These options will not be supported in the future and it is recommended to stop using anything but UUID4 as soon as possible.
 */
USTRUCT(BlueprintType)
struct RALLYHEREDEVELOPERAPI_API FRHAPI_DevLegacyIdGenerationConfig : public FRHAPI_DevModel
{
    GENERATED_BODY()

    /**
    * @brief Fills this object with data from the passed in JSON
    *
    * @param [in] JsonValue Data from the API call.
    *
    * @return true if parsing of the JSON data was successful.
    */
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

    /**
    * @brief Writes the data from this object into the specified JSON Writer stream
    *
    * @param [in] Writer JSON Writer stream to push .
    */
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /** @brief How to generate Vendor IDs */
    ERHAPI_DevUuidGenerationType Vendor_Optional{  };
    /** @brief true if Vendor_Optional has been set to a value */
    bool Vendor_IsSet{ false };
    /** @brief Gets the value of Vendor_Optional, regardless of it having been set */
    ERHAPI_DevUuidGenerationType& GetVendor() { return Vendor_Optional; }
    /** @brief Gets the value of Vendor_Optional, regardless of it having been set */
    const ERHAPI_DevUuidGenerationType& GetVendor() const { return Vendor_Optional; }
    /** @brief Gets the value of Vendor_Optional, if it has been set, otherwise it returns DefaultValue */
    const ERHAPI_DevUuidGenerationType& GetVendor(const ERHAPI_DevUuidGenerationType& DefaultValue) const { if (Vendor_IsSet) return Vendor_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Vendor_Optional and returns true if it has been set, otherwise returns false */
    bool GetVendor(ERHAPI_DevUuidGenerationType& OutValue) const { if (Vendor_IsSet) OutValue = Vendor_Optional; return Vendor_IsSet; }
    /** @brief Returns a pointer to Vendor_Optional, if it has been set, otherwise returns nullptr */
    ERHAPI_DevUuidGenerationType* GetVendorOrNull() { if (Vendor_IsSet) return &Vendor_Optional; return nullptr; }
    /** @brief Returns a pointer to Vendor_Optional, if it has been set, otherwise returns nullptr */
    const ERHAPI_DevUuidGenerationType* GetVendorOrNull() const { if (Vendor_IsSet) return &Vendor_Optional; return nullptr; }
    /** @brief Sets the value of Vendor_Optional and also sets Vendor_IsSet to true */
    void SetVendor(ERHAPI_DevUuidGenerationType NewValue) { Vendor_Optional = NewValue; Vendor_IsSet = true; }
     /** @brief Clears the value of Vendor_Optional and sets Vendor_IsSet to false */
    void ClearVendor() { Vendor_IsSet = false; }

    /** @brief How to generate Loot IDs */
    ERHAPI_DevUuidGenerationType Loot_Optional{  };
    /** @brief true if Loot_Optional has been set to a value */
    bool Loot_IsSet{ false };
    /** @brief Gets the value of Loot_Optional, regardless of it having been set */
    ERHAPI_DevUuidGenerationType& GetLoot() { return Loot_Optional; }
    /** @brief Gets the value of Loot_Optional, regardless of it having been set */
    const ERHAPI_DevUuidGenerationType& GetLoot() const { return Loot_Optional; }
    /** @brief Gets the value of Loot_Optional, if it has been set, otherwise it returns DefaultValue */
    const ERHAPI_DevUuidGenerationType& GetLoot(const ERHAPI_DevUuidGenerationType& DefaultValue) const { if (Loot_IsSet) return Loot_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Loot_Optional and returns true if it has been set, otherwise returns false */
    bool GetLoot(ERHAPI_DevUuidGenerationType& OutValue) const { if (Loot_IsSet) OutValue = Loot_Optional; return Loot_IsSet; }
    /** @brief Returns a pointer to Loot_Optional, if it has been set, otherwise returns nullptr */
    ERHAPI_DevUuidGenerationType* GetLootOrNull() { if (Loot_IsSet) return &Loot_Optional; return nullptr; }
    /** @brief Returns a pointer to Loot_Optional, if it has been set, otherwise returns nullptr */
    const ERHAPI_DevUuidGenerationType* GetLootOrNull() const { if (Loot_IsSet) return &Loot_Optional; return nullptr; }
    /** @brief Sets the value of Loot_Optional and also sets Loot_IsSet to true */
    void SetLoot(ERHAPI_DevUuidGenerationType NewValue) { Loot_Optional = NewValue; Loot_IsSet = true; }
     /** @brief Clears the value of Loot_Optional and sets Loot_IsSet to false */
    void ClearLoot() { Loot_IsSet = false; }

    /** @brief How to generate Item IDs */
    ERHAPI_DevUuidGenerationType Item_Optional{  };
    /** @brief true if Item_Optional has been set to a value */
    bool Item_IsSet{ false };
    /** @brief Gets the value of Item_Optional, regardless of it having been set */
    ERHAPI_DevUuidGenerationType& GetItem() { return Item_Optional; }
    /** @brief Gets the value of Item_Optional, regardless of it having been set */
    const ERHAPI_DevUuidGenerationType& GetItem() const { return Item_Optional; }
    /** @brief Gets the value of Item_Optional, if it has been set, otherwise it returns DefaultValue */
    const ERHAPI_DevUuidGenerationType& GetItem(const ERHAPI_DevUuidGenerationType& DefaultValue) const { if (Item_IsSet) return Item_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Item_Optional and returns true if it has been set, otherwise returns false */
    bool GetItem(ERHAPI_DevUuidGenerationType& OutValue) const { if (Item_IsSet) OutValue = Item_Optional; return Item_IsSet; }
    /** @brief Returns a pointer to Item_Optional, if it has been set, otherwise returns nullptr */
    ERHAPI_DevUuidGenerationType* GetItemOrNull() { if (Item_IsSet) return &Item_Optional; return nullptr; }
    /** @brief Returns a pointer to Item_Optional, if it has been set, otherwise returns nullptr */
    const ERHAPI_DevUuidGenerationType* GetItemOrNull() const { if (Item_IsSet) return &Item_Optional; return nullptr; }
    /** @brief Sets the value of Item_Optional and also sets Item_IsSet to true */
    void SetItem(ERHAPI_DevUuidGenerationType NewValue) { Item_Optional = NewValue; Item_IsSet = true; }
     /** @brief Clears the value of Item_Optional and sets Item_IsSet to false */
    void ClearItem() { Item_IsSet = false; }

    /** @brief How to generate Inventory Bucket Use Rule Set IDs */
    ERHAPI_DevUuidGenerationType InventoryBucketUseRuleSet_Optional{  };
    /** @brief true if InventoryBucketUseRuleSet_Optional has been set to a value */
    bool InventoryBucketUseRuleSet_IsSet{ false };
    /** @brief Gets the value of InventoryBucketUseRuleSet_Optional, regardless of it having been set */
    ERHAPI_DevUuidGenerationType& GetInventoryBucketUseRuleSet() { return InventoryBucketUseRuleSet_Optional; }
    /** @brief Gets the value of InventoryBucketUseRuleSet_Optional, regardless of it having been set */
    const ERHAPI_DevUuidGenerationType& GetInventoryBucketUseRuleSet() const { return InventoryBucketUseRuleSet_Optional; }
    /** @brief Gets the value of InventoryBucketUseRuleSet_Optional, if it has been set, otherwise it returns DefaultValue */
    const ERHAPI_DevUuidGenerationType& GetInventoryBucketUseRuleSet(const ERHAPI_DevUuidGenerationType& DefaultValue) const { if (InventoryBucketUseRuleSet_IsSet) return InventoryBucketUseRuleSet_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of InventoryBucketUseRuleSet_Optional and returns true if it has been set, otherwise returns false */
    bool GetInventoryBucketUseRuleSet(ERHAPI_DevUuidGenerationType& OutValue) const { if (InventoryBucketUseRuleSet_IsSet) OutValue = InventoryBucketUseRuleSet_Optional; return InventoryBucketUseRuleSet_IsSet; }
    /** @brief Returns a pointer to InventoryBucketUseRuleSet_Optional, if it has been set, otherwise returns nullptr */
    ERHAPI_DevUuidGenerationType* GetInventoryBucketUseRuleSetOrNull() { if (InventoryBucketUseRuleSet_IsSet) return &InventoryBucketUseRuleSet_Optional; return nullptr; }
    /** @brief Returns a pointer to InventoryBucketUseRuleSet_Optional, if it has been set, otherwise returns nullptr */
    const ERHAPI_DevUuidGenerationType* GetInventoryBucketUseRuleSetOrNull() const { if (InventoryBucketUseRuleSet_IsSet) return &InventoryBucketUseRuleSet_Optional; return nullptr; }
    /** @brief Sets the value of InventoryBucketUseRuleSet_Optional and also sets InventoryBucketUseRuleSet_IsSet to true */
    void SetInventoryBucketUseRuleSet(ERHAPI_DevUuidGenerationType NewValue) { InventoryBucketUseRuleSet_Optional = NewValue; InventoryBucketUseRuleSet_IsSet = true; }
     /** @brief Clears the value of InventoryBucketUseRuleSet_Optional and sets InventoryBucketUseRuleSet_IsSet to false */
    void ClearInventoryBucketUseRuleSet() { InventoryBucketUseRuleSet_IsSet = false; }

    /** @brief How to generate Xp IDs */
    ERHAPI_DevUuidGenerationType Xp_Optional{  };
    /** @brief true if Xp_Optional has been set to a value */
    bool Xp_IsSet{ false };
    /** @brief Gets the value of Xp_Optional, regardless of it having been set */
    ERHAPI_DevUuidGenerationType& GetXp() { return Xp_Optional; }
    /** @brief Gets the value of Xp_Optional, regardless of it having been set */
    const ERHAPI_DevUuidGenerationType& GetXp() const { return Xp_Optional; }
    /** @brief Gets the value of Xp_Optional, if it has been set, otherwise it returns DefaultValue */
    const ERHAPI_DevUuidGenerationType& GetXp(const ERHAPI_DevUuidGenerationType& DefaultValue) const { if (Xp_IsSet) return Xp_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Xp_Optional and returns true if it has been set, otherwise returns false */
    bool GetXp(ERHAPI_DevUuidGenerationType& OutValue) const { if (Xp_IsSet) OutValue = Xp_Optional; return Xp_IsSet; }
    /** @brief Returns a pointer to Xp_Optional, if it has been set, otherwise returns nullptr */
    ERHAPI_DevUuidGenerationType* GetXpOrNull() { if (Xp_IsSet) return &Xp_Optional; return nullptr; }
    /** @brief Returns a pointer to Xp_Optional, if it has been set, otherwise returns nullptr */
    const ERHAPI_DevUuidGenerationType* GetXpOrNull() const { if (Xp_IsSet) return &Xp_Optional; return nullptr; }
    /** @brief Sets the value of Xp_Optional and also sets Xp_IsSet to true */
    void SetXp(ERHAPI_DevUuidGenerationType NewValue) { Xp_Optional = NewValue; Xp_IsSet = true; }
     /** @brief Clears the value of Xp_Optional and sets Xp_IsSet to false */
    void ClearXp() { Xp_IsSet = false; }

    /** @brief How to generate Role IDs */
    ERHAPI_DevUuidGenerationType Role_Optional{  };
    /** @brief true if Role_Optional has been set to a value */
    bool Role_IsSet{ false };
    /** @brief Gets the value of Role_Optional, regardless of it having been set */
    ERHAPI_DevUuidGenerationType& GetRole() { return Role_Optional; }
    /** @brief Gets the value of Role_Optional, regardless of it having been set */
    const ERHAPI_DevUuidGenerationType& GetRole() const { return Role_Optional; }
    /** @brief Gets the value of Role_Optional, if it has been set, otherwise it returns DefaultValue */
    const ERHAPI_DevUuidGenerationType& GetRole(const ERHAPI_DevUuidGenerationType& DefaultValue) const { if (Role_IsSet) return Role_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Role_Optional and returns true if it has been set, otherwise returns false */
    bool GetRole(ERHAPI_DevUuidGenerationType& OutValue) const { if (Role_IsSet) OutValue = Role_Optional; return Role_IsSet; }
    /** @brief Returns a pointer to Role_Optional, if it has been set, otherwise returns nullptr */
    ERHAPI_DevUuidGenerationType* GetRoleOrNull() { if (Role_IsSet) return &Role_Optional; return nullptr; }
    /** @brief Returns a pointer to Role_Optional, if it has been set, otherwise returns nullptr */
    const ERHAPI_DevUuidGenerationType* GetRoleOrNull() const { if (Role_IsSet) return &Role_Optional; return nullptr; }
    /** @brief Sets the value of Role_Optional and also sets Role_IsSet to true */
    void SetRole(ERHAPI_DevUuidGenerationType NewValue) { Role_Optional = NewValue; Role_IsSet = true; }
     /** @brief Clears the value of Role_Optional and sets Role_IsSet to false */
    void ClearRole() { Role_IsSet = false; }
};

/** @} */
