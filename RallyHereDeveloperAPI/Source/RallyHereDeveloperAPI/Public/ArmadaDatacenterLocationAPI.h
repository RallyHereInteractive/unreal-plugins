// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereDeveloperAPIAuthContext.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevDatacenterLocation.h"
#include "DevDatacenterLocationCreate.h"
#include "DevDatacenterLocationUpdate.h"
#include "DevDatacenterLocationVersionsAndTransactions.h"
#include "DevHTTPValidationError.h"

namespace RallyHereDeveloperAPI
{
using RallyHereDeveloperAPI::ToStringFormatArg;
using RallyHereDeveloperAPI::WriteJsonValue;
using RallyHereDeveloperAPI::TryGetJsonValue;

struct FRequest_CreateDl;
struct FResponse_CreateDl;
struct FRequest_GetAllDls;
struct FResponse_GetAllDls;
struct FRequest_GetDl;
struct FResponse_GetDl;
struct FRequest_GetDlVersions;
struct FResponse_GetDlVersions;
struct FRequest_UpdateDl;
struct FResponse_UpdateDl;

DECLARE_DELEGATE_OneParam(FDelegate_CreateDl, const FResponse_CreateDl&);
DECLARE_DELEGATE_OneParam(FDelegate_GetAllDls, const FResponse_GetAllDls&);
DECLARE_DELEGATE_OneParam(FDelegate_GetDl, const FResponse_GetDl&);
DECLARE_DELEGATE_OneParam(FDelegate_GetDlVersions, const FResponse_GetDlVersions&);
DECLARE_DELEGATE_OneParam(FDelegate_UpdateDl, const FResponse_UpdateDl&);

class RALLYHEREDEVELOPERAPI_API FArmadaDatacenterLocationAPI : public FAPI
{
public:
    FArmadaDatacenterLocationAPI();
    virtual ~FArmadaDatacenterLocationAPI();

    FHttpRequestPtr CreateDl(const FRequest_CreateDl& Request, const FDelegate_CreateDl& Delegate = FDelegate_CreateDl(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr GetAllDls(const FRequest_GetAllDls& Request, const FDelegate_GetAllDls& Delegate = FDelegate_GetAllDls(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr GetDl(const FRequest_GetDl& Request, const FDelegate_GetDl& Delegate = FDelegate_GetDl(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr GetDlVersions(const FRequest_GetDlVersions& Request, const FDelegate_GetDlVersions& Delegate = FDelegate_GetDlVersions(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr UpdateDl(const FRequest_UpdateDl& Request, const FDelegate_UpdateDl& Delegate = FDelegate_UpdateDl(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);

private:
    void OnCreateDlResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_CreateDl Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetAllDlsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAllDls Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetDlResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetDl Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetDlVersionsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetDlVersions Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnUpdateDlResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdateDl Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};

/* Create Dl
 *
 * Create a datacenter location
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_CreateDl : public FRequest
{
    FRequest_CreateDl();
    virtual ~FRequest_CreateDl() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FRHAPI_DevDatacenterLocationCreate DatacenterLocationCreate;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_CreateDl : public FResponse
{
    FResponse_CreateDl(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_CreateDl() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevDatacenterLocation Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevDatacenterLocation& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_CreateDl
{
    typedef FRequest_CreateDl Request;
    typedef FResponse_CreateDl Response;
    typedef FDelegate_CreateDl Delegate;
    typedef FArmadaDatacenterLocationAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.CreateDl(InRequest, InDelegate, Priority); }
};

/* Get All Dls
 *
 * Get all datacenter locations
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_GetAllDls : public FRequest
{
    FRequest_GetAllDls();
    virtual ~FRequest_GetAllDls() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_GetAllDls : public FResponse
{
    FResponse_GetAllDls(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetAllDls() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    TArray<FRHAPI_DevDatacenterLocation> Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(TArray<FRHAPI_DevDatacenterLocation>& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_GetAllDls
{
    typedef FRequest_GetAllDls Request;
    typedef FResponse_GetAllDls Response;
    typedef FDelegate_GetAllDls Delegate;
    typedef FArmadaDatacenterLocationAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.GetAllDls(InRequest, InDelegate, Priority); }
};

/* Get Dl
 *
 * Get a datacenter location
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_GetDl : public FRequest
{
    FRequest_GetDl();
    virtual ~FRequest_GetDl() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* The datacenter location ID */
    FGuid DlId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_GetDl : public FResponse
{
    FResponse_GetDl(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetDl() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevDatacenterLocation Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevDatacenterLocation& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_GetDl
{
    typedef FRequest_GetDl Request;
    typedef FResponse_GetDl Response;
    typedef FDelegate_GetDl Delegate;
    typedef FArmadaDatacenterLocationAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.GetDl(InRequest, InDelegate, Priority); }
};

/* Get Dl Versions
 *
 * Get all version history for a datacenter location
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_GetDlVersions : public FRequest
{
    FRequest_GetDlVersions();
    virtual ~FRequest_GetDlVersions() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* The datacenter location ID */
    FGuid DlId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_GetDlVersions : public FResponse
{
    FResponse_GetDlVersions(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetDlVersions() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevDatacenterLocationVersionsAndTransactions Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevDatacenterLocationVersionsAndTransactions& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_GetDlVersions
{
    typedef FRequest_GetDlVersions Request;
    typedef FResponse_GetDlVersions Response;
    typedef FDelegate_GetDlVersions Delegate;
    typedef FArmadaDatacenterLocationAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.GetDlVersions(InRequest, InDelegate, Priority); }
};

/* Update Dl
 *
 * Update a datacenter location
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_UpdateDl : public FRequest
{
    FRequest_UpdateDl();
    virtual ~FRequest_UpdateDl() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* The datacenter location ID */
    FGuid DlId;
    FRHAPI_DevDatacenterLocationUpdate DatacenterLocationUpdate;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_UpdateDl : public FResponse
{
    FResponse_UpdateDl(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_UpdateDl() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevDatacenterLocation Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevDatacenterLocation& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_UpdateDl
{
    typedef FRequest_UpdateDl Request;
    typedef FResponse_UpdateDl Response;
    typedef FDelegate_UpdateDl Delegate;
    typedef FArmadaDatacenterLocationAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.UpdateDl(InRequest, InDelegate, Priority); }
};


}
