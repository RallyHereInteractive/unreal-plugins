// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereDeveloperAPIBaseModel.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevPortalAccountPermission.generated.h"

/** @defgroup RHAPI_DevPortalAccountPermission RallyHere API Model DevPortalAccountPermission
 *  @{
 */

/**
 * @brief 
 */
USTRUCT(BlueprintType)
struct RALLYHEREDEVELOPERAPI_API FRHAPI_DevPortalAccountPermission : public FRHAPI_DevModel
{
    GENERATED_BODY()

    /**
    * @brief Fills this object with data from the passed in JSON
    *
    * @param [in] JsonValue Data from the API call.
    *
    * @return true if parsing of the JSON data was successful.
    */
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

    /**
    * @brief Writes the data from this object into the specified JSON Writer stream
    *
    * @param [in] Writer JSON Writer stream to push .
    */
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /** @brief Account permission id uniquely identifies this permission assignment */
    FGuid AccountPermissionId{  };
    /** @brief Gets the value of AccountPermissionId */
    FGuid& GetAccountPermissionId() { return AccountPermissionId; }
    /** @brief Gets the value of AccountPermissionId */
    const FGuid& GetAccountPermissionId() const { return AccountPermissionId; }
    /** @brief Sets the value of AccountPermissionId */
    void SetAccountPermissionId(FGuid NewValue) { AccountPermissionId = NewValue;  }

    /** @brief Account id this permission is assigned to */
    FGuid AccountId{  };
    /** @brief Gets the value of AccountId */
    FGuid& GetAccountId() { return AccountId; }
    /** @brief Gets the value of AccountId */
    const FGuid& GetAccountId() const { return AccountId; }
    /** @brief Sets the value of AccountId */
    void SetAccountId(FGuid NewValue) { AccountId = NewValue;  }

    /** @brief Organization that this permission belongs to */
    FGuid AssignedOrgId{  };
    /** @brief Gets the value of AssignedOrgId */
    FGuid& GetAssignedOrgId() { return AssignedOrgId; }
    /** @brief Gets the value of AssignedOrgId */
    const FGuid& GetAssignedOrgId() const { return AssignedOrgId; }
    /** @brief Sets the value of AssignedOrgId */
    void SetAssignedOrgId(FGuid NewValue) { AssignedOrgId = NewValue;  }

    FGuid OrgId_Optional{  };
    /** @brief true if OrgId_Optional has been set to a value */
    bool OrgId_IsSet{ false };
    /** @brief Gets the value of OrgId_Optional, regardless of it having been set */
    FGuid& GetOrgId() { return OrgId_Optional; }
    /** @brief Gets the value of OrgId_Optional, regardless of it having been set */
    const FGuid& GetOrgId() const { return OrgId_Optional; }
    /** @brief Gets the value of OrgId_Optional, if it has been set, otherwise it returns DefaultValue */
    const FGuid& GetOrgId(const FGuid& DefaultValue) const { if (OrgId_IsSet) return OrgId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of OrgId_Optional and returns true if it has been set, otherwise returns false */
    bool GetOrgId(FGuid& OutValue) const { if (OrgId_IsSet) OutValue = OrgId_Optional; return OrgId_IsSet; }
    /** @brief Returns a pointer to OrgId_Optional, if it has been set, otherwise returns nullptr */
    FGuid* GetOrgIdOrNull() { if (OrgId_IsSet) return &OrgId_Optional; return nullptr; }
    /** @brief Returns a pointer to OrgId_Optional, if it has been set, otherwise returns nullptr */
    const FGuid* GetOrgIdOrNull() const { if (OrgId_IsSet) return &OrgId_Optional; return nullptr; }
    /** @brief Sets the value of OrgId_Optional and also sets OrgId_IsSet to true */
    void SetOrgId(FGuid NewValue) { OrgId_Optional = NewValue; OrgId_IsSet = true; }
     /** @brief Clears the value of OrgId_Optional and sets OrgId_IsSet to false */
    void ClearOrgId() { OrgId_IsSet = false; }

    FGuid ProductId_Optional{  };
    /** @brief true if ProductId_Optional has been set to a value */
    bool ProductId_IsSet{ false };
    /** @brief Gets the value of ProductId_Optional, regardless of it having been set */
    FGuid& GetProductId() { return ProductId_Optional; }
    /** @brief Gets the value of ProductId_Optional, regardless of it having been set */
    const FGuid& GetProductId() const { return ProductId_Optional; }
    /** @brief Gets the value of ProductId_Optional, if it has been set, otherwise it returns DefaultValue */
    const FGuid& GetProductId(const FGuid& DefaultValue) const { if (ProductId_IsSet) return ProductId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of ProductId_Optional and returns true if it has been set, otherwise returns false */
    bool GetProductId(FGuid& OutValue) const { if (ProductId_IsSet) OutValue = ProductId_Optional; return ProductId_IsSet; }
    /** @brief Returns a pointer to ProductId_Optional, if it has been set, otherwise returns nullptr */
    FGuid* GetProductIdOrNull() { if (ProductId_IsSet) return &ProductId_Optional; return nullptr; }
    /** @brief Returns a pointer to ProductId_Optional, if it has been set, otherwise returns nullptr */
    const FGuid* GetProductIdOrNull() const { if (ProductId_IsSet) return &ProductId_Optional; return nullptr; }
    /** @brief Sets the value of ProductId_Optional and also sets ProductId_IsSet to true */
    void SetProductId(FGuid NewValue) { ProductId_Optional = NewValue; ProductId_IsSet = true; }
     /** @brief Clears the value of ProductId_Optional and sets ProductId_IsSet to false */
    void ClearProductId() { ProductId_IsSet = false; }

    FGuid SandboxId_Optional{  };
    /** @brief true if SandboxId_Optional has been set to a value */
    bool SandboxId_IsSet{ false };
    /** @brief Gets the value of SandboxId_Optional, regardless of it having been set */
    FGuid& GetSandboxId() { return SandboxId_Optional; }
    /** @brief Gets the value of SandboxId_Optional, regardless of it having been set */
    const FGuid& GetSandboxId() const { return SandboxId_Optional; }
    /** @brief Gets the value of SandboxId_Optional, if it has been set, otherwise it returns DefaultValue */
    const FGuid& GetSandboxId(const FGuid& DefaultValue) const { if (SandboxId_IsSet) return SandboxId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of SandboxId_Optional and returns true if it has been set, otherwise returns false */
    bool GetSandboxId(FGuid& OutValue) const { if (SandboxId_IsSet) OutValue = SandboxId_Optional; return SandboxId_IsSet; }
    /** @brief Returns a pointer to SandboxId_Optional, if it has been set, otherwise returns nullptr */
    FGuid* GetSandboxIdOrNull() { if (SandboxId_IsSet) return &SandboxId_Optional; return nullptr; }
    /** @brief Returns a pointer to SandboxId_Optional, if it has been set, otherwise returns nullptr */
    const FGuid* GetSandboxIdOrNull() const { if (SandboxId_IsSet) return &SandboxId_Optional; return nullptr; }
    /** @brief Sets the value of SandboxId_Optional and also sets SandboxId_IsSet to true */
    void SetSandboxId(FGuid NewValue) { SandboxId_Optional = NewValue; SandboxId_IsSet = true; }
     /** @brief Clears the value of SandboxId_Optional and sets SandboxId_IsSet to false */
    void ClearSandboxId() { SandboxId_IsSet = false; }

    FString PermissionId{  };
    /** @brief Gets the value of PermissionId */
    FString& GetPermissionId() { return PermissionId; }
    /** @brief Gets the value of PermissionId */
    const FString& GetPermissionId() const { return PermissionId; }
    /** @brief Sets the value of PermissionId */
    void SetPermissionId(FString NewValue) { PermissionId = NewValue;  }
};

/** @} */
