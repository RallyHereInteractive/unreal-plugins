// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereDeveloperAPIBaseModel.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevMMRGroupingMethod.h"
#include "DevMatchMakingTemplateRequest.generated.h"

/** @defgroup RHAPI_DevMatchMakingTemplateRequest RallyHere API Model DevMatchMakingTemplateRequest
 *  @{
 */

/**
 * @brief 
 */
USTRUCT(BlueprintType)
struct RALLYHEREDEVELOPERAPI_API FRHAPI_DevMatchMakingTemplateRequest : public FRHAPI_DevModel
{
    GENERATED_BODY()

    /**
    * @brief Fills this object with data from the passed in JSON
    *
    * @param [in] JsonValue Data from the API call.
    *
    * @return true if parsing of the JSON data was successful.
    */
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

    /**
    * @brief Writes the data from this object into the specified JSON Writer stream
    *
    * @param [in] Writer JSON Writer stream to push .
    */
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /** @brief ID to uniquely identify this MatchMakingTemplate */
    FGuid MatchMakingTemplateId_Optional{  };
    /** @brief true if MatchMakingTemplateId_Optional has been set to a value */
    bool MatchMakingTemplateId_IsSet{ false };
    /** @brief Gets the value of MatchMakingTemplateId_Optional, regardless of it having been set */
    FGuid& GetMatchMakingTemplateId() { return MatchMakingTemplateId_Optional; }
    /** @brief Gets the value of MatchMakingTemplateId_Optional, regardless of it having been set */
    const FGuid& GetMatchMakingTemplateId() const { return MatchMakingTemplateId_Optional; }
    /** @brief Gets the value of MatchMakingTemplateId_Optional, if it has been set, otherwise it returns DefaultValue */
    const FGuid& GetMatchMakingTemplateId(const FGuid& DefaultValue) const { if (MatchMakingTemplateId_IsSet) return MatchMakingTemplateId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of MatchMakingTemplateId_Optional and returns true if it has been set, otherwise returns false */
    bool GetMatchMakingTemplateId(FGuid& OutValue) const { if (MatchMakingTemplateId_IsSet) OutValue = MatchMakingTemplateId_Optional; return MatchMakingTemplateId_IsSet; }
    /** @brief Returns a pointer to MatchMakingTemplateId_Optional, if it has been set, otherwise returns nullptr */
    FGuid* GetMatchMakingTemplateIdOrNull() { if (MatchMakingTemplateId_IsSet) return &MatchMakingTemplateId_Optional; return nullptr; }
    /** @brief Returns a pointer to MatchMakingTemplateId_Optional, if it has been set, otherwise returns nullptr */
    const FGuid* GetMatchMakingTemplateIdOrNull() const { if (MatchMakingTemplateId_IsSet) return &MatchMakingTemplateId_Optional; return nullptr; }
    /** @brief Sets the value of MatchMakingTemplateId_Optional and also sets MatchMakingTemplateId_IsSet to true */
    void SetMatchMakingTemplateId(FGuid NewValue) { MatchMakingTemplateId_Optional = NewValue; MatchMakingTemplateId_IsSet = true; }
     /** @brief Clears the value of MatchMakingTemplateId_Optional and sets MatchMakingTemplateId_IsSet to false */
    void ClearMatchMakingTemplateId() { MatchMakingTemplateId_IsSet = false; }

    /** @brief Which group of MatchMakingTemplates this template belongs to */
    FGuid MatchMakingTemplateGroupId{  };
    /** @brief Gets the value of MatchMakingTemplateGroupId */
    FGuid& GetMatchMakingTemplateGroupId() { return MatchMakingTemplateGroupId; }
    /** @brief Gets the value of MatchMakingTemplateGroupId */
    const FGuid& GetMatchMakingTemplateGroupId() const { return MatchMakingTemplateGroupId; }
    /** @brief Sets the value of MatchMakingTemplateGroupId */
    void SetMatchMakingTemplateGroupId(FGuid NewValue) { MatchMakingTemplateGroupId = NewValue;  }

    /** @brief What method should be used to calculate a group's MMR based on the individual player's ranks */
    ERHAPI_DevMMRGroupingMethod MmrGroupingMethod{  };
    /** @brief Gets the value of MmrGroupingMethod */
    ERHAPI_DevMMRGroupingMethod& GetMmrGroupingMethod() { return MmrGroupingMethod; }
    /** @brief Gets the value of MmrGroupingMethod */
    const ERHAPI_DevMMRGroupingMethod& GetMmrGroupingMethod() const { return MmrGroupingMethod; }
    /** @brief Sets the value of MmrGroupingMethod */
    void SetMmrGroupingMethod(ERHAPI_DevMMRGroupingMethod NewValue) { MmrGroupingMethod = NewValue;  }

    /** @brief Which ruleset needs to be satisfied to use this template */
    FGuid MatchMakingRulesetId_Optional{  };
    /** @brief true if MatchMakingRulesetId_Optional has been set to a value */
    bool MatchMakingRulesetId_IsSet{ false };
    /** @brief Gets the value of MatchMakingRulesetId_Optional, regardless of it having been set */
    FGuid& GetMatchMakingRulesetId() { return MatchMakingRulesetId_Optional; }
    /** @brief Gets the value of MatchMakingRulesetId_Optional, regardless of it having been set */
    const FGuid& GetMatchMakingRulesetId() const { return MatchMakingRulesetId_Optional; }
    /** @brief Gets the value of MatchMakingRulesetId_Optional, if it has been set, otherwise it returns DefaultValue */
    const FGuid& GetMatchMakingRulesetId(const FGuid& DefaultValue) const { if (MatchMakingRulesetId_IsSet) return MatchMakingRulesetId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of MatchMakingRulesetId_Optional and returns true if it has been set, otherwise returns false */
    bool GetMatchMakingRulesetId(FGuid& OutValue) const { if (MatchMakingRulesetId_IsSet) OutValue = MatchMakingRulesetId_Optional; return MatchMakingRulesetId_IsSet; }
    /** @brief Returns a pointer to MatchMakingRulesetId_Optional, if it has been set, otherwise returns nullptr */
    FGuid* GetMatchMakingRulesetIdOrNull() { if (MatchMakingRulesetId_IsSet) return &MatchMakingRulesetId_Optional; return nullptr; }
    /** @brief Returns a pointer to MatchMakingRulesetId_Optional, if it has been set, otherwise returns nullptr */
    const FGuid* GetMatchMakingRulesetIdOrNull() const { if (MatchMakingRulesetId_IsSet) return &MatchMakingRulesetId_Optional; return nullptr; }
    /** @brief Sets the value of MatchMakingRulesetId_Optional and also sets MatchMakingRulesetId_IsSet to true */
    void SetMatchMakingRulesetId(FGuid NewValue) { MatchMakingRulesetId_Optional = NewValue; MatchMakingRulesetId_IsSet = true; }
     /** @brief Clears the value of MatchMakingRulesetId_Optional and sets MatchMakingRulesetId_IsSet to false */
    void ClearMatchMakingRulesetId() { MatchMakingRulesetId_IsSet = false; }

    /** @brief Which list of MatchMakingProfiles should be used with this template */
    FGuid MatchMakingProfileListId{  };
    /** @brief Gets the value of MatchMakingProfileListId */
    FGuid& GetMatchMakingProfileListId() { return MatchMakingProfileListId; }
    /** @brief Gets the value of MatchMakingProfileListId */
    const FGuid& GetMatchMakingProfileListId() const { return MatchMakingProfileListId; }
    /** @brief Sets the value of MatchMakingProfileListId */
    void SetMatchMakingProfileListId(FGuid NewValue) { MatchMakingProfileListId = NewValue;  }

    /** @brief Old config used by Legacy systems. These values are ignored by the current APIs */
    FRHAPI_DevJsonObject LegacyConfig_Optional{  };
    /** @brief true if LegacyConfig_Optional has been set to a value */
    bool LegacyConfig_IsSet{ false };
    /** @brief Gets the value of LegacyConfig_Optional, regardless of it having been set */
    FRHAPI_DevJsonObject& GetLegacyConfig() { return LegacyConfig_Optional; }
    /** @brief Gets the value of LegacyConfig_Optional, regardless of it having been set */
    const FRHAPI_DevJsonObject& GetLegacyConfig() const { return LegacyConfig_Optional; }
    /** @brief Gets the value of LegacyConfig_Optional, if it has been set, otherwise it returns DefaultValue */
    const FRHAPI_DevJsonObject& GetLegacyConfig(const FRHAPI_DevJsonObject& DefaultValue) const { if (LegacyConfig_IsSet) return LegacyConfig_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of LegacyConfig_Optional and returns true if it has been set, otherwise returns false */
    bool GetLegacyConfig(FRHAPI_DevJsonObject& OutValue) const { if (LegacyConfig_IsSet) OutValue = LegacyConfig_Optional; return LegacyConfig_IsSet; }
    /** @brief Returns a pointer to LegacyConfig_Optional, if it has been set, otherwise returns nullptr */
    FRHAPI_DevJsonObject* GetLegacyConfigOrNull() { if (LegacyConfig_IsSet) return &LegacyConfig_Optional; return nullptr; }
    /** @brief Returns a pointer to LegacyConfig_Optional, if it has been set, otherwise returns nullptr */
    const FRHAPI_DevJsonObject* GetLegacyConfigOrNull() const { if (LegacyConfig_IsSet) return &LegacyConfig_Optional; return nullptr; }
    /** @brief Sets the value of LegacyConfig_Optional and also sets LegacyConfig_IsSet to true */
    void SetLegacyConfig(FRHAPI_DevJsonObject NewValue) { LegacyConfig_Optional = NewValue; LegacyConfig_IsSet = true; }
     /** @brief Clears the value of LegacyConfig_Optional and sets LegacyConfig_IsSet to false */
    void ClearLegacyConfig() { LegacyConfig_IsSet = false; }
};

/** @} */
