// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereDeveloperAPIAuthContext.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevExpandProperty.h"
#include "DevInventoryBucketUseRuleSetSortOptions.h"
#include "DevInventoryOperation.h"
#include "DevInventorySelector.h"
#include "DevItemSortOptions.h"
#include "DevItemType.h"
#include "DevLootSortOptions.h"
#include "DevPricePointSortOptions.h"
#include "DevSortOrder.h"
#include "DevVendorSortOptions.h"
#include "DevVendorType.h"
#include "DevXpSortOptions.h"
#include "DevCreateInventoryBucketUseRuleSetCollection.h"
#include "DevCreateItemCollection.h"
#include "DevCreateLootCollection.h"
#include "DevCreatePricePointCollection.h"
#include "DevCreateVendorCollection.h"
#include "DevCreateXpCollection.h"
#include "DevHTTPValidationError.h"
#include "DevInventoryBucketUseRuleSet.h"
#include "DevInventoryBucketUseRuleSetCollection.h"
#include "DevItem.h"
#include "DevItemCollection.h"
#include "DevLoot.h"
#include "DevLootCollection.h"
#include "DevPricePoint.h"
#include "DevPricePointCollection.h"
#include "DevUpdateInventoryBucketUseRuleSet.h"
#include "DevUpdateItemRequest.h"
#include "DevUpdateLootRequest.h"
#include "DevUpdatePricePoint.h"
#include "DevUpdateVendorRequest.h"
#include "DevUpdateXpRequest.h"
#include "DevVendor.h"
#include "DevVendorCollection.h"
#include "DevXp.h"
#include "DevXpCollection.h"
#include "DevXpLevelThreshold.h"
#include "DevXpLevelThresholdRequest.h"
#include "DevXpThresholdCollection.h"

namespace RallyHereDeveloperAPI
{
using RallyHereDeveloperAPI::ToStringFormatArg;
using RallyHereDeveloperAPI::WriteJsonValue;
using RallyHereDeveloperAPI::TryGetJsonValue;

struct FRequest_SandboxCreateInventoryBucketUseRuleSets;
struct FResponse_SandboxCreateInventoryBucketUseRuleSets;
struct FRequest_SandboxCreateItems;
struct FResponse_SandboxCreateItems;
struct FRequest_SandboxCreateLoot;
struct FResponse_SandboxCreateLoot;
struct FRequest_SandboxCreateManyXp;
struct FResponse_SandboxCreateManyXp;
struct FRequest_SandboxCreatePricePoints;
struct FResponse_SandboxCreatePricePoints;
struct FRequest_SandboxCreateVendors;
struct FResponse_SandboxCreateVendors;
struct FRequest_SandboxCreateXpThreshold;
struct FResponse_SandboxCreateXpThreshold;
struct FRequest_SandboxDeleteManyItems;
struct FResponse_SandboxDeleteManyItems;
struct FRequest_SandboxDeleteManyLoot;
struct FResponse_SandboxDeleteManyLoot;
struct FRequest_SandboxDeleteManyPricePoints;
struct FResponse_SandboxDeleteManyPricePoints;
struct FRequest_SandboxDeleteManyRuleSets;
struct FResponse_SandboxDeleteManyRuleSets;
struct FRequest_SandboxDeleteManyXp;
struct FResponse_SandboxDeleteManyXp;
struct FRequest_SandboxDeleteSingleItem;
struct FResponse_SandboxDeleteSingleItem;
struct FRequest_SandboxDeleteSingleLoot;
struct FResponse_SandboxDeleteSingleLoot;
struct FRequest_SandboxDeleteSinglePricePoint;
struct FResponse_SandboxDeleteSinglePricePoint;
struct FRequest_SandboxDeleteSingleRuleSet;
struct FResponse_SandboxDeleteSingleRuleSet;
struct FRequest_SandboxDeleteSingleXp;
struct FResponse_SandboxDeleteSingleXp;
struct FRequest_SandboxDeleteSingleXpThreshold;
struct FResponse_SandboxDeleteSingleXpThreshold;
struct FRequest_SandboxDeleteVendor;
struct FResponse_SandboxDeleteVendor;
struct FRequest_SandboxDeleteVendors;
struct FResponse_SandboxDeleteVendors;
struct FRequest_SandboxGetItemById;
struct FResponse_SandboxGetItemById;
struct FRequest_SandboxGetItems;
struct FResponse_SandboxGetItems;
struct FRequest_SandboxGetLoot;
struct FResponse_SandboxGetLoot;
struct FRequest_SandboxGetLootById;
struct FResponse_SandboxGetLootById;
struct FRequest_SandboxGetManyXp;
struct FResponse_SandboxGetManyXp;
struct FRequest_SandboxGetManyXpThresholds;
struct FResponse_SandboxGetManyXpThresholds;
struct FRequest_SandboxGetPricePointById;
struct FResponse_SandboxGetPricePointById;
struct FRequest_SandboxGetPricePoints;
struct FResponse_SandboxGetPricePoints;
struct FRequest_SandboxGetRuleSetById;
struct FResponse_SandboxGetRuleSetById;
struct FRequest_SandboxGetRuleSets;
struct FResponse_SandboxGetRuleSets;
struct FRequest_SandboxGetVendorById;
struct FResponse_SandboxGetVendorById;
struct FRequest_SandboxGetVendors;
struct FResponse_SandboxGetVendors;
struct FRequest_SandboxGetXpById;
struct FResponse_SandboxGetXpById;
struct FRequest_SandboxGetXpThresholdByIdAndXpId;
struct FResponse_SandboxGetXpThresholdByIdAndXpId;
struct FRequest_SandboxUpdateItem;
struct FResponse_SandboxUpdateItem;
struct FRequest_SandboxUpdateLoot;
struct FResponse_SandboxUpdateLoot;
struct FRequest_SandboxUpdatePricePoint;
struct FResponse_SandboxUpdatePricePoint;
struct FRequest_SandboxUpdateRuleSet;
struct FResponse_SandboxUpdateRuleSet;
struct FRequest_SandboxUpdateVendor;
struct FResponse_SandboxUpdateVendor;
struct FRequest_SandboxUpdateXp;
struct FResponse_SandboxUpdateXp;
struct FRequest_SandboxUpdateXpThreshold;
struct FResponse_SandboxUpdateXpThreshold;

DECLARE_DELEGATE_OneParam(FDelegate_SandboxCreateInventoryBucketUseRuleSets, const FResponse_SandboxCreateInventoryBucketUseRuleSets&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxCreateItems, const FResponse_SandboxCreateItems&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxCreateLoot, const FResponse_SandboxCreateLoot&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxCreateManyXp, const FResponse_SandboxCreateManyXp&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxCreatePricePoints, const FResponse_SandboxCreatePricePoints&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxCreateVendors, const FResponse_SandboxCreateVendors&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxCreateXpThreshold, const FResponse_SandboxCreateXpThreshold&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxDeleteManyItems, const FResponse_SandboxDeleteManyItems&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxDeleteManyLoot, const FResponse_SandboxDeleteManyLoot&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxDeleteManyPricePoints, const FResponse_SandboxDeleteManyPricePoints&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxDeleteManyRuleSets, const FResponse_SandboxDeleteManyRuleSets&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxDeleteManyXp, const FResponse_SandboxDeleteManyXp&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxDeleteSingleItem, const FResponse_SandboxDeleteSingleItem&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxDeleteSingleLoot, const FResponse_SandboxDeleteSingleLoot&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxDeleteSinglePricePoint, const FResponse_SandboxDeleteSinglePricePoint&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxDeleteSingleRuleSet, const FResponse_SandboxDeleteSingleRuleSet&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxDeleteSingleXp, const FResponse_SandboxDeleteSingleXp&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxDeleteSingleXpThreshold, const FResponse_SandboxDeleteSingleXpThreshold&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxDeleteVendor, const FResponse_SandboxDeleteVendor&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxDeleteVendors, const FResponse_SandboxDeleteVendors&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetItemById, const FResponse_SandboxGetItemById&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetItems, const FResponse_SandboxGetItems&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetLoot, const FResponse_SandboxGetLoot&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetLootById, const FResponse_SandboxGetLootById&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetManyXp, const FResponse_SandboxGetManyXp&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetManyXpThresholds, const FResponse_SandboxGetManyXpThresholds&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetPricePointById, const FResponse_SandboxGetPricePointById&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetPricePoints, const FResponse_SandboxGetPricePoints&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetRuleSetById, const FResponse_SandboxGetRuleSetById&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetRuleSets, const FResponse_SandboxGetRuleSets&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetVendorById, const FResponse_SandboxGetVendorById&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetVendors, const FResponse_SandboxGetVendors&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetXpById, const FResponse_SandboxGetXpById&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetXpThresholdByIdAndXpId, const FResponse_SandboxGetXpThresholdByIdAndXpId&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxUpdateItem, const FResponse_SandboxUpdateItem&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxUpdateLoot, const FResponse_SandboxUpdateLoot&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxUpdatePricePoint, const FResponse_SandboxUpdatePricePoint&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxUpdateRuleSet, const FResponse_SandboxUpdateRuleSet&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxUpdateVendor, const FResponse_SandboxUpdateVendor&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxUpdateXp, const FResponse_SandboxUpdateXp&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxUpdateXpThreshold, const FResponse_SandboxUpdateXpThreshold&);

class RALLYHEREDEVELOPERAPI_API FCatalogAPI : public FAPI
{
public:
    FCatalogAPI();
    virtual ~FCatalogAPI();

    FHttpRequestPtr SandboxCreateInventoryBucketUseRuleSets(const FRequest_SandboxCreateInventoryBucketUseRuleSets& Request, const FDelegate_SandboxCreateInventoryBucketUseRuleSets& Delegate = FDelegate_SandboxCreateInventoryBucketUseRuleSets(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxCreateItems(const FRequest_SandboxCreateItems& Request, const FDelegate_SandboxCreateItems& Delegate = FDelegate_SandboxCreateItems(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxCreateLoot(const FRequest_SandboxCreateLoot& Request, const FDelegate_SandboxCreateLoot& Delegate = FDelegate_SandboxCreateLoot(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxCreateManyXp(const FRequest_SandboxCreateManyXp& Request, const FDelegate_SandboxCreateManyXp& Delegate = FDelegate_SandboxCreateManyXp(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxCreatePricePoints(const FRequest_SandboxCreatePricePoints& Request, const FDelegate_SandboxCreatePricePoints& Delegate = FDelegate_SandboxCreatePricePoints(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxCreateVendors(const FRequest_SandboxCreateVendors& Request, const FDelegate_SandboxCreateVendors& Delegate = FDelegate_SandboxCreateVendors(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxCreateXpThreshold(const FRequest_SandboxCreateXpThreshold& Request, const FDelegate_SandboxCreateXpThreshold& Delegate = FDelegate_SandboxCreateXpThreshold(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxDeleteManyItems(const FRequest_SandboxDeleteManyItems& Request, const FDelegate_SandboxDeleteManyItems& Delegate = FDelegate_SandboxDeleteManyItems(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxDeleteManyLoot(const FRequest_SandboxDeleteManyLoot& Request, const FDelegate_SandboxDeleteManyLoot& Delegate = FDelegate_SandboxDeleteManyLoot(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxDeleteManyPricePoints(const FRequest_SandboxDeleteManyPricePoints& Request, const FDelegate_SandboxDeleteManyPricePoints& Delegate = FDelegate_SandboxDeleteManyPricePoints(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxDeleteManyRuleSets(const FRequest_SandboxDeleteManyRuleSets& Request, const FDelegate_SandboxDeleteManyRuleSets& Delegate = FDelegate_SandboxDeleteManyRuleSets(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxDeleteManyXp(const FRequest_SandboxDeleteManyXp& Request, const FDelegate_SandboxDeleteManyXp& Delegate = FDelegate_SandboxDeleteManyXp(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxDeleteSingleItem(const FRequest_SandboxDeleteSingleItem& Request, const FDelegate_SandboxDeleteSingleItem& Delegate = FDelegate_SandboxDeleteSingleItem(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxDeleteSingleLoot(const FRequest_SandboxDeleteSingleLoot& Request, const FDelegate_SandboxDeleteSingleLoot& Delegate = FDelegate_SandboxDeleteSingleLoot(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxDeleteSinglePricePoint(const FRequest_SandboxDeleteSinglePricePoint& Request, const FDelegate_SandboxDeleteSinglePricePoint& Delegate = FDelegate_SandboxDeleteSinglePricePoint(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxDeleteSingleRuleSet(const FRequest_SandboxDeleteSingleRuleSet& Request, const FDelegate_SandboxDeleteSingleRuleSet& Delegate = FDelegate_SandboxDeleteSingleRuleSet(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxDeleteSingleXp(const FRequest_SandboxDeleteSingleXp& Request, const FDelegate_SandboxDeleteSingleXp& Delegate = FDelegate_SandboxDeleteSingleXp(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxDeleteSingleXpThreshold(const FRequest_SandboxDeleteSingleXpThreshold& Request, const FDelegate_SandboxDeleteSingleXpThreshold& Delegate = FDelegate_SandboxDeleteSingleXpThreshold(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxDeleteVendor(const FRequest_SandboxDeleteVendor& Request, const FDelegate_SandboxDeleteVendor& Delegate = FDelegate_SandboxDeleteVendor(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxDeleteVendors(const FRequest_SandboxDeleteVendors& Request, const FDelegate_SandboxDeleteVendors& Delegate = FDelegate_SandboxDeleteVendors(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetItemById(const FRequest_SandboxGetItemById& Request, const FDelegate_SandboxGetItemById& Delegate = FDelegate_SandboxGetItemById(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetItems(const FRequest_SandboxGetItems& Request, const FDelegate_SandboxGetItems& Delegate = FDelegate_SandboxGetItems(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetLoot(const FRequest_SandboxGetLoot& Request, const FDelegate_SandboxGetLoot& Delegate = FDelegate_SandboxGetLoot(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetLootById(const FRequest_SandboxGetLootById& Request, const FDelegate_SandboxGetLootById& Delegate = FDelegate_SandboxGetLootById(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetManyXp(const FRequest_SandboxGetManyXp& Request, const FDelegate_SandboxGetManyXp& Delegate = FDelegate_SandboxGetManyXp(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetManyXpThresholds(const FRequest_SandboxGetManyXpThresholds& Request, const FDelegate_SandboxGetManyXpThresholds& Delegate = FDelegate_SandboxGetManyXpThresholds(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetPricePointById(const FRequest_SandboxGetPricePointById& Request, const FDelegate_SandboxGetPricePointById& Delegate = FDelegate_SandboxGetPricePointById(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetPricePoints(const FRequest_SandboxGetPricePoints& Request, const FDelegate_SandboxGetPricePoints& Delegate = FDelegate_SandboxGetPricePoints(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetRuleSetById(const FRequest_SandboxGetRuleSetById& Request, const FDelegate_SandboxGetRuleSetById& Delegate = FDelegate_SandboxGetRuleSetById(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetRuleSets(const FRequest_SandboxGetRuleSets& Request, const FDelegate_SandboxGetRuleSets& Delegate = FDelegate_SandboxGetRuleSets(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetVendorById(const FRequest_SandboxGetVendorById& Request, const FDelegate_SandboxGetVendorById& Delegate = FDelegate_SandboxGetVendorById(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetVendors(const FRequest_SandboxGetVendors& Request, const FDelegate_SandboxGetVendors& Delegate = FDelegate_SandboxGetVendors(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetXpById(const FRequest_SandboxGetXpById& Request, const FDelegate_SandboxGetXpById& Delegate = FDelegate_SandboxGetXpById(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetXpThresholdByIdAndXpId(const FRequest_SandboxGetXpThresholdByIdAndXpId& Request, const FDelegate_SandboxGetXpThresholdByIdAndXpId& Delegate = FDelegate_SandboxGetXpThresholdByIdAndXpId(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxUpdateItem(const FRequest_SandboxUpdateItem& Request, const FDelegate_SandboxUpdateItem& Delegate = FDelegate_SandboxUpdateItem(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxUpdateLoot(const FRequest_SandboxUpdateLoot& Request, const FDelegate_SandboxUpdateLoot& Delegate = FDelegate_SandboxUpdateLoot(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxUpdatePricePoint(const FRequest_SandboxUpdatePricePoint& Request, const FDelegate_SandboxUpdatePricePoint& Delegate = FDelegate_SandboxUpdatePricePoint(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxUpdateRuleSet(const FRequest_SandboxUpdateRuleSet& Request, const FDelegate_SandboxUpdateRuleSet& Delegate = FDelegate_SandboxUpdateRuleSet(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxUpdateVendor(const FRequest_SandboxUpdateVendor& Request, const FDelegate_SandboxUpdateVendor& Delegate = FDelegate_SandboxUpdateVendor(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxUpdateXp(const FRequest_SandboxUpdateXp& Request, const FDelegate_SandboxUpdateXp& Delegate = FDelegate_SandboxUpdateXp(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxUpdateXpThreshold(const FRequest_SandboxUpdateXpThreshold& Request, const FDelegate_SandboxUpdateXpThreshold& Delegate = FDelegate_SandboxUpdateXpThreshold(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);

private:
    void OnSandboxCreateInventoryBucketUseRuleSetsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxCreateInventoryBucketUseRuleSets Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxCreateItemsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxCreateItems Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxCreateLootResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxCreateLoot Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxCreateManyXpResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxCreateManyXp Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxCreatePricePointsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxCreatePricePoints Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxCreateVendorsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxCreateVendors Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxCreateXpThresholdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxCreateXpThreshold Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxDeleteManyItemsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxDeleteManyItems Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxDeleteManyLootResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxDeleteManyLoot Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxDeleteManyPricePointsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxDeleteManyPricePoints Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxDeleteManyRuleSetsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxDeleteManyRuleSets Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxDeleteManyXpResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxDeleteManyXp Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxDeleteSingleItemResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxDeleteSingleItem Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxDeleteSingleLootResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxDeleteSingleLoot Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxDeleteSinglePricePointResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxDeleteSinglePricePoint Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxDeleteSingleRuleSetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxDeleteSingleRuleSet Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxDeleteSingleXpResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxDeleteSingleXp Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxDeleteSingleXpThresholdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxDeleteSingleXpThreshold Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxDeleteVendorResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxDeleteVendor Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxDeleteVendorsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxDeleteVendors Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetItemByIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetItemById Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetItemsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetItems Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetLootResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetLoot Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetLootByIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetLootById Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetManyXpResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetManyXp Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetManyXpThresholdsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetManyXpThresholds Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetPricePointByIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetPricePointById Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetPricePointsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetPricePoints Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetRuleSetByIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetRuleSetById Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetRuleSetsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetRuleSets Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetVendorByIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetVendorById Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetVendorsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetVendors Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetXpByIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetXpById Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetXpThresholdByIdAndXpIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetXpThresholdByIdAndXpId Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxUpdateItemResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxUpdateItem Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxUpdateLootResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxUpdateLoot Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxUpdatePricePointResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxUpdatePricePoint Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxUpdateRuleSetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxUpdateRuleSet Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxUpdateVendorResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxUpdateVendor Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxUpdateXpResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxUpdateXp Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxUpdateXpThresholdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxUpdateXpThreshold Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};

/* Create Inventory Bucket Use Rule Sets
 *
 * Create Inventory Bucket Use Rule Sets. Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxCreateInventoryBucketUseRuleSets : public FRequest
{
    FRequest_SandboxCreateInventoryBucketUseRuleSets();
    virtual ~FRequest_SandboxCreateInventoryBucketUseRuleSets() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevCreateInventoryBucketUseRuleSetCollection CreateInventoryBucketUseRuleSetCollection;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxCreateInventoryBucketUseRuleSets : public FResponse
{
    FResponse_SandboxCreateInventoryBucketUseRuleSets(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxCreateInventoryBucketUseRuleSets() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    TArray<FRHAPI_DevInventoryBucketUseRuleSet> Content;


    // Manual Response Helpers
    /* Response 201
    Successful Response
    */
    bool TryGetContentFor201(TArray<FRHAPI_DevInventoryBucketUseRuleSet>& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxCreateInventoryBucketUseRuleSets
{
    typedef FRequest_SandboxCreateInventoryBucketUseRuleSets Request;
    typedef FResponse_SandboxCreateInventoryBucketUseRuleSets Response;
    typedef FDelegate_SandboxCreateInventoryBucketUseRuleSets Delegate;
    typedef FCatalogAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxCreateInventoryBucketUseRuleSets(InRequest, InDelegate, Priority); }
};

/* Create Items
 *
 * Create Items. Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxCreateItems : public FRequest
{
    FRequest_SandboxCreateItems();
    virtual ~FRequest_SandboxCreateItems() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevCreateItemCollection CreateItemCollection;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxCreateItems : public FResponse
{
    FResponse_SandboxCreateItems(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxCreateItems() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    TArray<FRHAPI_DevItem> Content;


    // Manual Response Helpers
    /* Response 201
    Successful Response
    */
    bool TryGetContentFor201(TArray<FRHAPI_DevItem>& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxCreateItems
{
    typedef FRequest_SandboxCreateItems Request;
    typedef FResponse_SandboxCreateItems Response;
    typedef FDelegate_SandboxCreateItems Delegate;
    typedef FCatalogAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxCreateItems(InRequest, InDelegate, Priority); }
};

/* Create Loot
 *
 * Create Loot. Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxCreateLoot : public FRequest
{
    FRequest_SandboxCreateLoot();
    virtual ~FRequest_SandboxCreateLoot() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevCreateLootCollection CreateLootCollection;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxCreateLoot : public FResponse
{
    FResponse_SandboxCreateLoot(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxCreateLoot() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    TArray<FRHAPI_DevLoot> Content;


    // Manual Response Helpers
    /* Response 201
    Successful Response
    */
    bool TryGetContentFor201(TArray<FRHAPI_DevLoot>& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxCreateLoot
{
    typedef FRequest_SandboxCreateLoot Request;
    typedef FResponse_SandboxCreateLoot Response;
    typedef FDelegate_SandboxCreateLoot Delegate;
    typedef FCatalogAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxCreateLoot(InRequest, InDelegate, Priority); }
};

/* Create Many Xp
 *
 * Create many XP. Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxCreateManyXp : public FRequest
{
    FRequest_SandboxCreateManyXp();
    virtual ~FRequest_SandboxCreateManyXp() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevCreateXpCollection CreateXpCollection;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxCreateManyXp : public FResponse
{
    FResponse_SandboxCreateManyXp(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxCreateManyXp() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    TArray<FRHAPI_DevXp> Content;


    // Manual Response Helpers
    /* Response 201
    Successful Response
    */
    bool TryGetContentFor201(TArray<FRHAPI_DevXp>& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxCreateManyXp
{
    typedef FRequest_SandboxCreateManyXp Request;
    typedef FResponse_SandboxCreateManyXp Response;
    typedef FDelegate_SandboxCreateManyXp Delegate;
    typedef FCatalogAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxCreateManyXp(InRequest, InDelegate, Priority); }
};

/* Create Price Points
 *
 * Create Price Points. Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxCreatePricePoints : public FRequest
{
    FRequest_SandboxCreatePricePoints();
    virtual ~FRequest_SandboxCreatePricePoints() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevCreatePricePointCollection CreatePricePointCollection;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxCreatePricePoints : public FResponse
{
    FResponse_SandboxCreatePricePoints(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxCreatePricePoints() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    TArray<FRHAPI_DevPricePoint> Content;


    // Manual Response Helpers
    /* Response 201
    Successful Response
    */
    bool TryGetContentFor201(TArray<FRHAPI_DevPricePoint>& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxCreatePricePoints
{
    typedef FRequest_SandboxCreatePricePoints Request;
    typedef FResponse_SandboxCreatePricePoints Response;
    typedef FDelegate_SandboxCreatePricePoints Delegate;
    typedef FCatalogAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxCreatePricePoints(InRequest, InDelegate, Priority); }
};

/* Create Vendors
 *
 * Create Vendors. Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxCreateVendors : public FRequest
{
    FRequest_SandboxCreateVendors();
    virtual ~FRequest_SandboxCreateVendors() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevCreateVendorCollection CreateVendorCollection;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxCreateVendors : public FResponse
{
    FResponse_SandboxCreateVendors(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxCreateVendors() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    TArray<FRHAPI_DevVendor> Content;


    // Manual Response Helpers
    /* Response 201
    Successful Response
    */
    bool TryGetContentFor201(TArray<FRHAPI_DevVendor>& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxCreateVendors
{
    typedef FRequest_SandboxCreateVendors Request;
    typedef FResponse_SandboxCreateVendors Response;
    typedef FDelegate_SandboxCreateVendors Delegate;
    typedef FCatalogAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxCreateVendors(InRequest, InDelegate, Priority); }
};

/* Create Xp Threshold
 *
 * Create Xp Threshold. Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxCreateXpThreshold : public FRequest
{
    FRequest_SandboxCreateXpThreshold();
    virtual ~FRequest_SandboxCreateXpThreshold() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid XpId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevXpLevelThresholdRequest XpLevelThresholdRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxCreateXpThreshold : public FResponse
{
    FResponse_SandboxCreateXpThreshold(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxCreateXpThreshold() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevXpLevelThreshold Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevXpLevelThreshold& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxCreateXpThreshold
{
    typedef FRequest_SandboxCreateXpThreshold Request;
    typedef FResponse_SandboxCreateXpThreshold Response;
    typedef FDelegate_SandboxCreateXpThreshold Delegate;
    typedef FCatalogAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxCreateXpThreshold(InRequest, InDelegate, Priority); }
};

/* Delete Many Items
 *
 * Delete many Items. Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxDeleteManyItems : public FRequest
{
    FRequest_SandboxDeleteManyItems();
    virtual ~FRequest_SandboxDeleteManyItems() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    /* Item IDs to delete */
    TArray<FGuid> ItemIds;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxDeleteManyItems : public FResponse
{
    FResponse_SandboxDeleteManyItems(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxDeleteManyItems() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    


    // Manual Response Helpers
    /* Response 204
    Successful Response
    */

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxDeleteManyItems
{
    typedef FRequest_SandboxDeleteManyItems Request;
    typedef FResponse_SandboxDeleteManyItems Response;
    typedef FDelegate_SandboxDeleteManyItems Delegate;
    typedef FCatalogAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxDeleteManyItems(InRequest, InDelegate, Priority); }
};

/* Delete Many Loot
 *
 * Delete many Loot. Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxDeleteManyLoot : public FRequest
{
    FRequest_SandboxDeleteManyLoot();
    virtual ~FRequest_SandboxDeleteManyLoot() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    /* Loot IDs to delete */
    TArray<FGuid> LootIds;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxDeleteManyLoot : public FResponse
{
    FResponse_SandboxDeleteManyLoot(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxDeleteManyLoot() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    


    // Manual Response Helpers
    /* Response 204
    Successful Response
    */

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxDeleteManyLoot
{
    typedef FRequest_SandboxDeleteManyLoot Request;
    typedef FResponse_SandboxDeleteManyLoot Response;
    typedef FDelegate_SandboxDeleteManyLoot Delegate;
    typedef FCatalogAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxDeleteManyLoot(InRequest, InDelegate, Priority); }
};

/* Delete Many Price Points
 *
 * Delete many Price Points. Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxDeleteManyPricePoints : public FRequest
{
    FRequest_SandboxDeleteManyPricePoints();
    virtual ~FRequest_SandboxDeleteManyPricePoints() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    /* Price Point IDs to delete */
    TArray<FGuid> PricePointIds;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxDeleteManyPricePoints : public FResponse
{
    FResponse_SandboxDeleteManyPricePoints(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxDeleteManyPricePoints() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    


    // Manual Response Helpers
    /* Response 204
    Successful Response
    */

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxDeleteManyPricePoints
{
    typedef FRequest_SandboxDeleteManyPricePoints Request;
    typedef FResponse_SandboxDeleteManyPricePoints Response;
    typedef FDelegate_SandboxDeleteManyPricePoints Delegate;
    typedef FCatalogAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxDeleteManyPricePoints(InRequest, InDelegate, Priority); }
};

/* Delete Many Rule Sets
 *
 * Delete many Inventory Bucket Use Rule Sets. Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxDeleteManyRuleSets : public FRequest
{
    FRequest_SandboxDeleteManyRuleSets();
    virtual ~FRequest_SandboxDeleteManyRuleSets() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    /* Inventory Bucket Use Rule Set IDs to delete */
    TArray<FGuid> RuleSetIds;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxDeleteManyRuleSets : public FResponse
{
    FResponse_SandboxDeleteManyRuleSets(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxDeleteManyRuleSets() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    


    // Manual Response Helpers
    /* Response 204
    Successful Response
    */

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxDeleteManyRuleSets
{
    typedef FRequest_SandboxDeleteManyRuleSets Request;
    typedef FResponse_SandboxDeleteManyRuleSets Response;
    typedef FDelegate_SandboxDeleteManyRuleSets Delegate;
    typedef FCatalogAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxDeleteManyRuleSets(InRequest, InDelegate, Priority); }
};

/* Delete Many Xp
 *
 * Delete many Xp. Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxDeleteManyXp : public FRequest
{
    FRequest_SandboxDeleteManyXp();
    virtual ~FRequest_SandboxDeleteManyXp() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    /* Xp IDs to delete */
    TArray<FGuid> XpIds;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxDeleteManyXp : public FResponse
{
    FResponse_SandboxDeleteManyXp(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxDeleteManyXp() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    


    // Manual Response Helpers
    /* Response 204
    Successful Response
    */

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxDeleteManyXp
{
    typedef FRequest_SandboxDeleteManyXp Request;
    typedef FResponse_SandboxDeleteManyXp Response;
    typedef FDelegate_SandboxDeleteManyXp Delegate;
    typedef FCatalogAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxDeleteManyXp(InRequest, InDelegate, Priority); }
};

/* Delete Single Item
 *
 * Delete single Item. Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxDeleteSingleItem : public FRequest
{
    FRequest_SandboxDeleteSingleItem();
    virtual ~FRequest_SandboxDeleteSingleItem() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid ItemId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxDeleteSingleItem : public FResponse
{
    FResponse_SandboxDeleteSingleItem(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxDeleteSingleItem() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    


    // Manual Response Helpers
    /* Response 204
    Successful Response
    */

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxDeleteSingleItem
{
    typedef FRequest_SandboxDeleteSingleItem Request;
    typedef FResponse_SandboxDeleteSingleItem Response;
    typedef FDelegate_SandboxDeleteSingleItem Delegate;
    typedef FCatalogAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxDeleteSingleItem(InRequest, InDelegate, Priority); }
};

/* Delete Single Loot
 *
 * Delete single Loot. Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxDeleteSingleLoot : public FRequest
{
    FRequest_SandboxDeleteSingleLoot();
    virtual ~FRequest_SandboxDeleteSingleLoot() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid LootId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxDeleteSingleLoot : public FResponse
{
    FResponse_SandboxDeleteSingleLoot(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxDeleteSingleLoot() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    


    // Manual Response Helpers
    /* Response 204
    Successful Response
    */

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxDeleteSingleLoot
{
    typedef FRequest_SandboxDeleteSingleLoot Request;
    typedef FResponse_SandboxDeleteSingleLoot Response;
    typedef FDelegate_SandboxDeleteSingleLoot Delegate;
    typedef FCatalogAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxDeleteSingleLoot(InRequest, InDelegate, Priority); }
};

/* Delete Single Price Point
 *
 * Delete single Price Point. Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxDeleteSinglePricePoint : public FRequest
{
    FRequest_SandboxDeleteSinglePricePoint();
    virtual ~FRequest_SandboxDeleteSinglePricePoint() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid PricePointId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxDeleteSinglePricePoint : public FResponse
{
    FResponse_SandboxDeleteSinglePricePoint(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxDeleteSinglePricePoint() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    


    // Manual Response Helpers
    /* Response 204
    Successful Response
    */

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxDeleteSinglePricePoint
{
    typedef FRequest_SandboxDeleteSinglePricePoint Request;
    typedef FResponse_SandboxDeleteSinglePricePoint Response;
    typedef FDelegate_SandboxDeleteSinglePricePoint Delegate;
    typedef FCatalogAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxDeleteSinglePricePoint(InRequest, InDelegate, Priority); }
};

/* Delete Single Rule Set
 *
 * Delete single Inventory Bucket Use Rule Set. Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxDeleteSingleRuleSet : public FRequest
{
    FRequest_SandboxDeleteSingleRuleSet();
    virtual ~FRequest_SandboxDeleteSingleRuleSet() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid InventoryBucketUseRuleSetId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxDeleteSingleRuleSet : public FResponse
{
    FResponse_SandboxDeleteSingleRuleSet(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxDeleteSingleRuleSet() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    


    // Manual Response Helpers
    /* Response 204
    Successful Response
    */

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxDeleteSingleRuleSet
{
    typedef FRequest_SandboxDeleteSingleRuleSet Request;
    typedef FResponse_SandboxDeleteSingleRuleSet Response;
    typedef FDelegate_SandboxDeleteSingleRuleSet Delegate;
    typedef FCatalogAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxDeleteSingleRuleSet(InRequest, InDelegate, Priority); }
};

/* Delete Single Xp
 *
 * Delete single Xp. Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxDeleteSingleXp : public FRequest
{
    FRequest_SandboxDeleteSingleXp();
    virtual ~FRequest_SandboxDeleteSingleXp() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid XpId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxDeleteSingleXp : public FResponse
{
    FResponse_SandboxDeleteSingleXp(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxDeleteSingleXp() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    


    // Manual Response Helpers
    /* Response 204
    Successful Response
    */

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxDeleteSingleXp
{
    typedef FRequest_SandboxDeleteSingleXp Request;
    typedef FResponse_SandboxDeleteSingleXp Response;
    typedef FDelegate_SandboxDeleteSingleXp Delegate;
    typedef FCatalogAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxDeleteSingleXp(InRequest, InDelegate, Priority); }
};

/* Delete Single Xp Threshold
 *
 * Delete Xp Threshold. Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxDeleteSingleXpThreshold : public FRequest
{
    FRequest_SandboxDeleteSingleXpThreshold();
    virtual ~FRequest_SandboxDeleteSingleXpThreshold() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid XpId;
    FGuid XpThresholdId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxDeleteSingleXpThreshold : public FResponse
{
    FResponse_SandboxDeleteSingleXpThreshold(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxDeleteSingleXpThreshold() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    


    // Manual Response Helpers
    /* Response 204
    Successful Response
    */

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxDeleteSingleXpThreshold
{
    typedef FRequest_SandboxDeleteSingleXpThreshold Request;
    typedef FResponse_SandboxDeleteSingleXpThreshold Response;
    typedef FDelegate_SandboxDeleteSingleXpThreshold Delegate;
    typedef FCatalogAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxDeleteSingleXpThreshold(InRequest, InDelegate, Priority); }
};

/* Delete Vendor
 *
 * Delete Vendor. Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxDeleteVendor : public FRequest
{
    FRequest_SandboxDeleteVendor();
    virtual ~FRequest_SandboxDeleteVendor() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid VendorId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxDeleteVendor : public FResponse
{
    FResponse_SandboxDeleteVendor(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxDeleteVendor() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    


    // Manual Response Helpers
    /* Response 204
    Successful Response
    */

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxDeleteVendor
{
    typedef FRequest_SandboxDeleteVendor Request;
    typedef FResponse_SandboxDeleteVendor Response;
    typedef FDelegate_SandboxDeleteVendor Delegate;
    typedef FCatalogAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxDeleteVendor(InRequest, InDelegate, Priority); }
};

/* Delete Vendors
 *
 * Delete Vendors. Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxDeleteVendors : public FRequest
{
    FRequest_SandboxDeleteVendors();
    virtual ~FRequest_SandboxDeleteVendors() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    /* Vendor IDs to delete */
    TArray<FGuid> VendorIds;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxDeleteVendors : public FResponse
{
    FResponse_SandboxDeleteVendors(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxDeleteVendors() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    


    // Manual Response Helpers
    /* Response 204
    Successful Response
    */

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxDeleteVendors
{
    typedef FRequest_SandboxDeleteVendors Request;
    typedef FResponse_SandboxDeleteVendors Response;
    typedef FDelegate_SandboxDeleteVendors Delegate;
    typedef FCatalogAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxDeleteVendors(InRequest, InDelegate, Priority); }
};

/* Get Item By Id
 *
 * Get Item by ID. Requires any of permissions: 
 * 	 sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetItemById : public FRequest
{
    FRequest_SandboxGetItemById();
    virtual ~FRequest_SandboxGetItemById() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Item ID */
    FGuid ItemId;
    /* Sandbox ID */
    FGuid SandboxId;
    /* Resources to expand and fill in additional detail */
    TOptional<TArray<ERHAPI_DevExpandProperty>> Expand;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetItemById : public FResponse
{
    FResponse_SandboxGetItemById(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetItemById() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevItem Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevItem& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetItemById
{
    typedef FRequest_SandboxGetItemById Request;
    typedef FResponse_SandboxGetItemById Response;
    typedef FDelegate_SandboxGetItemById Delegate;
    typedef FCatalogAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetItemById(InRequest, InDelegate, Priority); }
};

/* Get Items
 *
 * Get Items by filters. All filters must be true for an Item to be returned. Requires any of permissions: 
 * 	 sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetItems : public FRequest
{
    FRequest_SandboxGetItems();
    virtual ~FRequest_SandboxGetItems() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    /* Item IDs to filter by */
    TOptional<TArray<FGuid>> ItemIds;
    /* Legacy Item IDs to filter by */
    TOptional<TArray<int32>> LegacyItemIds;
    /* Item types to filter by */
    TOptional<TArray<ERHAPI_DevItemType>> Types;
    /* Coupon Currency Item IDs to filter by */
    TOptional<TArray<FGuid>> CouponCurrencyItemIds;
    /* Inventory Bucket Use Rule Set IDs to filter by */
    TOptional<TArray<FGuid>> InventoryBucketUseRuleSetIds;
    /* Level Xp IDs to filter by */
    TOptional<TArray<FGuid>> LevelXpIds;
    /* Filter by case insensitive name */
    TOptional<FString> Name;
    /* Resources to expand and fill in additional detail */
    TOptional<TArray<ERHAPI_DevExpandProperty>> Expand;
    /* Filter by last modified account ID */
    TOptional<TArray<FGuid>> LastModifiedAccountIds;
    /* Sort results by */
    TOptional<ERHAPI_DevItemSortOptions> SortBy;
    /* Sort order */
    TOptional<ERHAPI_DevSortOrder> SortOrder;
    /* Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration */
    TOptional<FString> Cursor;
    /* The maximum number of elements to be returned per call */
    TOptional<int32> PageSize;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetItems : public FResponse
{
    FResponse_SandboxGetItems(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetItems() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevItemCollection Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevItemCollection& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetItems
{
    typedef FRequest_SandboxGetItems Request;
    typedef FResponse_SandboxGetItems Response;
    typedef FDelegate_SandboxGetItems Delegate;
    typedef FCatalogAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetItems(InRequest, InDelegate, Priority); }
};

/* Get Loot
 *
 * Get Loot by filters. All filters must be true for a Loot to be returned. Requires any of permissions: 
 * 	 sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetLoot : public FRequest
{
    FRequest_SandboxGetLoot();
    virtual ~FRequest_SandboxGetLoot() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    /* Loot IDs to filter by */
    TOptional<TArray<FGuid>> LootIds;
    /* Legacy Loot IDs to filter by */
    TOptional<TArray<int32>> LegacyLootIds;
    /* Vendor IDs to filter by */
    TOptional<TArray<FGuid>> VendorIds;
    /* Inventory Selector types to filter by */
    TOptional<TArray<ERHAPI_DevInventorySelector>> InventorySelectorTypes;
    /* Inventory Selector types to filter by */
    TOptional<TArray<ERHAPI_DevInventoryOperation>> InventoryOperations;
    /* Filter by case insensitive name */
    TOptional<FString> Name;
    /* Item IDs to filter by */
    TOptional<TArray<FGuid>> ItemIds;
    /* Sub Vendor IDs to filter by */
    TOptional<TArray<FGuid>> SubVendorIds;
    /* Price Point IDs to filter by */
    TOptional<TArray<FGuid>> CurrentPricePointIds;
    /* Price Point IDs to filter by */
    TOptional<TArray<FGuid>> PreSalePricePointIds;
    /* Filter by active status */
    TOptional<bool> Active;
    /* Resources to expand and fill in additional detail */
    TOptional<TArray<ERHAPI_DevExpandProperty>> Expand;
    /* Filter by last modified account ID */
    TOptional<TArray<FGuid>> LastModifiedAccountIds;
    /* Sort results by */
    TOptional<ERHAPI_DevLootSortOptions> SortBy;
    /* Sort order */
    TOptional<ERHAPI_DevSortOrder> SortOrder;
    /* Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration */
    TOptional<FString> Cursor;
    /* The maximum number of elements to be returned per call */
    TOptional<int32> PageSize;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetLoot : public FResponse
{
    FResponse_SandboxGetLoot(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetLoot() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevLootCollection Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevLootCollection& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetLoot
{
    typedef FRequest_SandboxGetLoot Request;
    typedef FResponse_SandboxGetLoot Response;
    typedef FDelegate_SandboxGetLoot Delegate;
    typedef FCatalogAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetLoot(InRequest, InDelegate, Priority); }
};

/* Get Loot By Id
 *
 * Get Loot by ID. Requires any of permissions: 
 * 	 sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetLootById : public FRequest
{
    FRequest_SandboxGetLootById();
    virtual ~FRequest_SandboxGetLootById() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Loot ID */
    FGuid LootId;
    /* Sandbox ID */
    FGuid SandboxId;
    /* Resources to expand and fill in additional detail */
    TOptional<TArray<ERHAPI_DevExpandProperty>> Expand;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetLootById : public FResponse
{
    FResponse_SandboxGetLootById(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetLootById() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevLoot Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevLoot& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetLootById
{
    typedef FRequest_SandboxGetLootById Request;
    typedef FResponse_SandboxGetLootById Response;
    typedef FDelegate_SandboxGetLootById Delegate;
    typedef FCatalogAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetLootById(InRequest, InDelegate, Priority); }
};

/* Get Many Xp
 *
 * Get Xp by filters. All filters must be true for a Xp to be returned. Requires any of permissions: 
 * 	 sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetManyXp : public FRequest
{
    FRequest_SandboxGetManyXp();
    virtual ~FRequest_SandboxGetManyXp() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    /* Xp IDs to filter by */
    TOptional<TArray<FGuid>> XpIds;
    /* Legacy Xp IDs to filter by */
    TOptional<TArray<int32>> LegacyXpIds;
    /* Filter by case insensitive name */
    TOptional<FString> Name;
    /* Filter by last modified account ID */
    TOptional<TArray<FGuid>> LastModifiedAccountIds;
    /* Sort results by */
    TOptional<ERHAPI_DevXpSortOptions> SortBy;
    /* Sort order */
    TOptional<ERHAPI_DevSortOrder> SortOrder;
    /* Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration */
    TOptional<FString> Cursor;
    /* The maximum number of elements to be returned per call */
    TOptional<int32> PageSize;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetManyXp : public FResponse
{
    FResponse_SandboxGetManyXp(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetManyXp() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevXpCollection Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevXpCollection& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetManyXp
{
    typedef FRequest_SandboxGetManyXp Request;
    typedef FResponse_SandboxGetManyXp Response;
    typedef FDelegate_SandboxGetManyXp Delegate;
    typedef FCatalogAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetManyXp(InRequest, InDelegate, Priority); }
};

/* Get Many Xp Thresholds
 *
 * Get Xp Thresholds for Xp table. Requires any of permissions: 
 * 	 sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetManyXpThresholds : public FRequest
{
    FRequest_SandboxGetManyXpThresholds();
    virtual ~FRequest_SandboxGetManyXpThresholds() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid XpId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetManyXpThresholds : public FResponse
{
    FResponse_SandboxGetManyXpThresholds(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetManyXpThresholds() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevXpThresholdCollection Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevXpThresholdCollection& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetManyXpThresholds
{
    typedef FRequest_SandboxGetManyXpThresholds Request;
    typedef FResponse_SandboxGetManyXpThresholds Response;
    typedef FDelegate_SandboxGetManyXpThresholds Delegate;
    typedef FCatalogAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetManyXpThresholds(InRequest, InDelegate, Priority); }
};

/* Get Price Point By Id
 *
 * Get Price Point by ID. Requires any of permissions: 
 * 	 sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetPricePointById : public FRequest
{
    FRequest_SandboxGetPricePointById();
    virtual ~FRequest_SandboxGetPricePointById() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Price Point ID */
    FGuid PricePointId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetPricePointById : public FResponse
{
    FResponse_SandboxGetPricePointById(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetPricePointById() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevPricePoint Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevPricePoint& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetPricePointById
{
    typedef FRequest_SandboxGetPricePointById Request;
    typedef FResponse_SandboxGetPricePointById Response;
    typedef FDelegate_SandboxGetPricePointById Delegate;
    typedef FCatalogAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetPricePointById(InRequest, InDelegate, Priority); }
};

/* Get Price Points
 *
 * Get Price Points by filters. All filters must be true for a Price Point to be returned. Requires any of permissions: 
 * 	 sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetPricePoints : public FRequest
{
    FRequest_SandboxGetPricePoints();
    virtual ~FRequest_SandboxGetPricePoints() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    /* Price Point IDs to filter by */
    TOptional<TArray<FGuid>> PricePointIds;
    /* Filter by Price Points with matching strict flag */
    TOptional<bool> StrictFlag;
    /* Filter by Price Points with matching cap flag */
    TOptional<bool> CapFlag;
    /* Filter by case insensitive name */
    TOptional<FString> Name;
    /* Resources to expand and fill in additional detail */
    TOptional<TArray<ERHAPI_DevExpandProperty>> Expand;
    /* Filter by last modified account ID */
    TOptional<TArray<FGuid>> LastModifiedAccountIds;
    /* Sort results by */
    TOptional<ERHAPI_DevPricePointSortOptions> SortBy;
    /* Sort order */
    TOptional<ERHAPI_DevSortOrder> SortOrder;
    /* Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration */
    TOptional<FString> Cursor;
    /* The maximum number of elements to be returned per call */
    TOptional<int32> PageSize;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetPricePoints : public FResponse
{
    FResponse_SandboxGetPricePoints(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetPricePoints() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevPricePointCollection Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevPricePointCollection& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetPricePoints
{
    typedef FRequest_SandboxGetPricePoints Request;
    typedef FResponse_SandboxGetPricePoints Response;
    typedef FDelegate_SandboxGetPricePoints Delegate;
    typedef FCatalogAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetPricePoints(InRequest, InDelegate, Priority); }
};

/* Get Rule Set By Id
 *
 * Get Inventory Bucket Use Rule Set by ID. Requires any of permissions: 
 * 	 sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetRuleSetById : public FRequest
{
    FRequest_SandboxGetRuleSetById();
    virtual ~FRequest_SandboxGetRuleSetById() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Inventory Bucket Use Rule Set ID */
    FGuid InventoryBucketUseRuleSetId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetRuleSetById : public FResponse
{
    FResponse_SandboxGetRuleSetById(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetRuleSetById() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevInventoryBucketUseRuleSet Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevInventoryBucketUseRuleSet& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetRuleSetById
{
    typedef FRequest_SandboxGetRuleSetById Request;
    typedef FResponse_SandboxGetRuleSetById Response;
    typedef FDelegate_SandboxGetRuleSetById Delegate;
    typedef FCatalogAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetRuleSetById(InRequest, InDelegate, Priority); }
};

/* Get Rule Sets
 *
 * Get Inventory Bucket Use Rule Sets by filters. All filters must be true for an Inventory Bucket Use Rule Sets to be returned. Requires any of permissions: 
 * 	 sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetRuleSets : public FRequest
{
    FRequest_SandboxGetRuleSets();
    virtual ~FRequest_SandboxGetRuleSets() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    /* Inventory Bucket Use Rule Set IDs to filter by */
    TOptional<TArray<FGuid>> InventoryBucketUseRuleSetIds;
    /* Legacy Inventory Bucket Use Rule Set IDs to filter by */
    TOptional<TArray<int32>> LegacyInventoryBucketUseRuleSetIds;
    /* Filter by case insensitive name */
    TOptional<FString> Name;
    /* Filter by last modified account ID */
    TOptional<TArray<FGuid>> LastModifiedAccountIds;
    /* Sort results by */
    TOptional<ERHAPI_DevInventoryBucketUseRuleSetSortOptions> SortBy;
    /* Sort order */
    TOptional<ERHAPI_DevSortOrder> SortOrder;
    /* Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration */
    TOptional<FString> Cursor;
    /* The maximum number of elements to be returned per call */
    TOptional<int32> PageSize;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetRuleSets : public FResponse
{
    FResponse_SandboxGetRuleSets(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetRuleSets() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevInventoryBucketUseRuleSetCollection Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevInventoryBucketUseRuleSetCollection& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetRuleSets
{
    typedef FRequest_SandboxGetRuleSets Request;
    typedef FResponse_SandboxGetRuleSets Response;
    typedef FDelegate_SandboxGetRuleSets Delegate;
    typedef FCatalogAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetRuleSets(InRequest, InDelegate, Priority); }
};

/* Get Vendor By Id
 *
 * Get Vendor by ID. Requires any of permissions: 
 * 	 sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetVendorById : public FRequest
{
    FRequest_SandboxGetVendorById();
    virtual ~FRequest_SandboxGetVendorById() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Vendor ID */
    FGuid VendorId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetVendorById : public FResponse
{
    FResponse_SandboxGetVendorById(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetVendorById() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevVendor Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevVendor& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetVendorById
{
    typedef FRequest_SandboxGetVendorById Request;
    typedef FResponse_SandboxGetVendorById Response;
    typedef FDelegate_SandboxGetVendorById Delegate;
    typedef FCatalogAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetVendorById(InRequest, InDelegate, Priority); }
};

/* Get Vendors
 *
 * Get Vendors by filters. All filters must be true for a Vendor to be returned. Requires any of permissions: 
 * 	 sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetVendors : public FRequest
{
    FRequest_SandboxGetVendors();
    virtual ~FRequest_SandboxGetVendors() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    /* Vendor IDs to filter by */
    TOptional<TArray<FGuid>> VendorIds;
    /* Legacy Vendor IDs to filter by */
    TOptional<TArray<int32>> LegacyVendorIds;
    /* Vendor types to filter by */
    TOptional<TArray<ERHAPI_DevVendorType>> Types;
    /* Filter by case insensitive name */
    TOptional<FString> Name;
    /* Filter by last modified account ID */
    TOptional<TArray<FGuid>> LastModifiedAccountIds;
    /* Sort results by */
    TOptional<ERHAPI_DevVendorSortOptions> SortBy;
    /* Sort order */
    TOptional<ERHAPI_DevSortOrder> SortOrder;
    /* Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration */
    TOptional<FString> Cursor;
    /* The maximum number of elements to be returned per call */
    TOptional<int32> PageSize;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetVendors : public FResponse
{
    FResponse_SandboxGetVendors(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetVendors() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevVendorCollection Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevVendorCollection& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetVendors
{
    typedef FRequest_SandboxGetVendors Request;
    typedef FResponse_SandboxGetVendors Response;
    typedef FDelegate_SandboxGetVendors Delegate;
    typedef FCatalogAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetVendors(InRequest, InDelegate, Priority); }
};

/* Get Xp By Id
 *
 * Get Xp by ID. Requires any of permissions: 
 * 	 sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetXpById : public FRequest
{
    FRequest_SandboxGetXpById();
    virtual ~FRequest_SandboxGetXpById() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Xp ID */
    FGuid XpId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetXpById : public FResponse
{
    FResponse_SandboxGetXpById(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetXpById() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevXp Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevXp& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetXpById
{
    typedef FRequest_SandboxGetXpById Request;
    typedef FResponse_SandboxGetXpById Response;
    typedef FDelegate_SandboxGetXpById Delegate;
    typedef FCatalogAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetXpById(InRequest, InDelegate, Priority); }
};

/* Get Xp Threshold By Id And Xp Id
 *
 * Get Xp Threshold by ID. Requires any of permissions: 
 * 	 sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetXpThresholdByIdAndXpId : public FRequest
{
    FRequest_SandboxGetXpThresholdByIdAndXpId();
    virtual ~FRequest_SandboxGetXpThresholdByIdAndXpId() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid XpId;
    FGuid XpThresholdId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetXpThresholdByIdAndXpId : public FResponse
{
    FResponse_SandboxGetXpThresholdByIdAndXpId(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetXpThresholdByIdAndXpId() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevXpLevelThreshold Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevXpLevelThreshold& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetXpThresholdByIdAndXpId
{
    typedef FRequest_SandboxGetXpThresholdByIdAndXpId Request;
    typedef FResponse_SandboxGetXpThresholdByIdAndXpId Response;
    typedef FDelegate_SandboxGetXpThresholdByIdAndXpId Delegate;
    typedef FCatalogAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetXpThresholdByIdAndXpId(InRequest, InDelegate, Priority); }
};

/* Update Item
 *
 * Update Item. Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxUpdateItem : public FRequest
{
    FRequest_SandboxUpdateItem();
    virtual ~FRequest_SandboxUpdateItem() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid ItemId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevUpdateItemRequest UpdateItemRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxUpdateItem : public FResponse
{
    FResponse_SandboxUpdateItem(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxUpdateItem() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevItem Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevItem& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxUpdateItem
{
    typedef FRequest_SandboxUpdateItem Request;
    typedef FResponse_SandboxUpdateItem Response;
    typedef FDelegate_SandboxUpdateItem Delegate;
    typedef FCatalogAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxUpdateItem(InRequest, InDelegate, Priority); }
};

/* Update Loot
 *
 * Update Loot. Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxUpdateLoot : public FRequest
{
    FRequest_SandboxUpdateLoot();
    virtual ~FRequest_SandboxUpdateLoot() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid LootId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevUpdateLootRequest UpdateLootRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxUpdateLoot : public FResponse
{
    FResponse_SandboxUpdateLoot(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxUpdateLoot() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevLoot Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevLoot& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxUpdateLoot
{
    typedef FRequest_SandboxUpdateLoot Request;
    typedef FResponse_SandboxUpdateLoot Response;
    typedef FDelegate_SandboxUpdateLoot Delegate;
    typedef FCatalogAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxUpdateLoot(InRequest, InDelegate, Priority); }
};

/* Update Price Point
 *
 * Update Price Point. Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxUpdatePricePoint : public FRequest
{
    FRequest_SandboxUpdatePricePoint();
    virtual ~FRequest_SandboxUpdatePricePoint() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid PricePointId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevUpdatePricePoint UpdatePricePoint;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxUpdatePricePoint : public FResponse
{
    FResponse_SandboxUpdatePricePoint(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxUpdatePricePoint() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevPricePoint Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevPricePoint& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxUpdatePricePoint
{
    typedef FRequest_SandboxUpdatePricePoint Request;
    typedef FResponse_SandboxUpdatePricePoint Response;
    typedef FDelegate_SandboxUpdatePricePoint Delegate;
    typedef FCatalogAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxUpdatePricePoint(InRequest, InDelegate, Priority); }
};

/* Update Rule Set
 *
 * Update Inventory Bucket Rule Set. Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxUpdateRuleSet : public FRequest
{
    FRequest_SandboxUpdateRuleSet();
    virtual ~FRequest_SandboxUpdateRuleSet() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid InventoryBucketUseRuleSetId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevUpdateInventoryBucketUseRuleSet UpdateInventoryBucketUseRuleSet;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxUpdateRuleSet : public FResponse
{
    FResponse_SandboxUpdateRuleSet(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxUpdateRuleSet() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevInventoryBucketUseRuleSet Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevInventoryBucketUseRuleSet& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxUpdateRuleSet
{
    typedef FRequest_SandboxUpdateRuleSet Request;
    typedef FResponse_SandboxUpdateRuleSet Response;
    typedef FDelegate_SandboxUpdateRuleSet Delegate;
    typedef FCatalogAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxUpdateRuleSet(InRequest, InDelegate, Priority); }
};

/* Update Vendor
 *
 * Update Vendor. If Loot is provided, it will do a full replace of all Loot on the Vendor. Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxUpdateVendor : public FRequest
{
    FRequest_SandboxUpdateVendor();
    virtual ~FRequest_SandboxUpdateVendor() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid VendorId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevUpdateVendorRequest UpdateVendorRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxUpdateVendor : public FResponse
{
    FResponse_SandboxUpdateVendor(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxUpdateVendor() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevVendor Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevVendor& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxUpdateVendor
{
    typedef FRequest_SandboxUpdateVendor Request;
    typedef FResponse_SandboxUpdateVendor Response;
    typedef FDelegate_SandboxUpdateVendor Delegate;
    typedef FCatalogAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxUpdateVendor(InRequest, InDelegate, Priority); }
};

/* Update Xp
 *
 * Update Xp. Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxUpdateXp : public FRequest
{
    FRequest_SandboxUpdateXp();
    virtual ~FRequest_SandboxUpdateXp() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid XpId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevUpdateXpRequest UpdateXpRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxUpdateXp : public FResponse
{
    FResponse_SandboxUpdateXp(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxUpdateXp() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevXp Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevXp& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxUpdateXp
{
    typedef FRequest_SandboxUpdateXp Request;
    typedef FResponse_SandboxUpdateXp Response;
    typedef FDelegate_SandboxUpdateXp Delegate;
    typedef FCatalogAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxUpdateXp(InRequest, InDelegate, Priority); }
};

/* Update Xp Threshold
 *
 * Update Xp Threshold. Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxUpdateXpThreshold : public FRequest
{
    FRequest_SandboxUpdateXpThreshold();
    virtual ~FRequest_SandboxUpdateXpThreshold() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid XpId;
    FGuid XpThresholdId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevXpLevelThresholdRequest XpLevelThresholdRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxUpdateXpThreshold : public FResponse
{
    FResponse_SandboxUpdateXpThreshold(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxUpdateXpThreshold() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevXpLevelThreshold Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevXpLevelThreshold& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxUpdateXpThreshold
{
    typedef FRequest_SandboxUpdateXpThreshold Request;
    typedef FResponse_SandboxUpdateXpThreshold Response;
    typedef FDelegate_SandboxUpdateXpThreshold Delegate;
    typedef FCatalogAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxUpdateXpThreshold(InRequest, InDelegate, Priority); }
};


}
