// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereDeveloperAPIAuthContext.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevAllCustomEndpointsResponse.h"
#include "DevCustomEndpoint.h"
#include "DevCustomEndpointCreate.h"
#include "DevCustomEndpointUpdate.h"
#include "DevHTTPValidationError.h"

namespace RallyHereDeveloperAPI
{
using RallyHereDeveloperAPI::ToStringFormatArg;
using RallyHereDeveloperAPI::WriteJsonValue;
using RallyHereDeveloperAPI::TryGetJsonValue;

struct FRequest_SandboxCreateCustomEndpoint;
struct FResponse_SandboxCreateCustomEndpoint;
struct FRequest_SandboxDeleteCustomEndpoint;
struct FResponse_SandboxDeleteCustomEndpoint;
struct FRequest_SandboxGetAllCustomEndpointsForSandbox;
struct FResponse_SandboxGetAllCustomEndpointsForSandbox;
struct FRequest_SandboxGetCustomEndpointForSandboxAndCustomEndpointUniqueId;
struct FResponse_SandboxGetCustomEndpointForSandboxAndCustomEndpointUniqueId;
struct FRequest_SandboxUpdateCustomEndpoint;
struct FResponse_SandboxUpdateCustomEndpoint;

DECLARE_DELEGATE_OneParam(FDelegate_SandboxCreateCustomEndpoint, const FResponse_SandboxCreateCustomEndpoint&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxDeleteCustomEndpoint, const FResponse_SandboxDeleteCustomEndpoint&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetAllCustomEndpointsForSandbox, const FResponse_SandboxGetAllCustomEndpointsForSandbox&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetCustomEndpointForSandboxAndCustomEndpointUniqueId, const FResponse_SandboxGetCustomEndpointForSandboxAndCustomEndpointUniqueId&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxUpdateCustomEndpoint, const FResponse_SandboxUpdateCustomEndpoint&);

class RALLYHEREDEVELOPERAPI_API FSandboxConfigCustomEndpointsAPI : public FAPI
{
public:
    FSandboxConfigCustomEndpointsAPI();
    virtual ~FSandboxConfigCustomEndpointsAPI();

    FHttpRequestPtr SandboxCreateCustomEndpoint(const FRequest_SandboxCreateCustomEndpoint& Request, const FDelegate_SandboxCreateCustomEndpoint& Delegate = FDelegate_SandboxCreateCustomEndpoint(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxDeleteCustomEndpoint(const FRequest_SandboxDeleteCustomEndpoint& Request, const FDelegate_SandboxDeleteCustomEndpoint& Delegate = FDelegate_SandboxDeleteCustomEndpoint(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetAllCustomEndpointsForSandbox(const FRequest_SandboxGetAllCustomEndpointsForSandbox& Request, const FDelegate_SandboxGetAllCustomEndpointsForSandbox& Delegate = FDelegate_SandboxGetAllCustomEndpointsForSandbox(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetCustomEndpointForSandboxAndCustomEndpointUniqueId(const FRequest_SandboxGetCustomEndpointForSandboxAndCustomEndpointUniqueId& Request, const FDelegate_SandboxGetCustomEndpointForSandboxAndCustomEndpointUniqueId& Delegate = FDelegate_SandboxGetCustomEndpointForSandboxAndCustomEndpointUniqueId(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxUpdateCustomEndpoint(const FRequest_SandboxUpdateCustomEndpoint& Request, const FDelegate_SandboxUpdateCustomEndpoint& Delegate = FDelegate_SandboxUpdateCustomEndpoint(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);

private:
    void OnSandboxCreateCustomEndpointResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxCreateCustomEndpoint Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxDeleteCustomEndpointResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxDeleteCustomEndpoint Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetAllCustomEndpointsForSandboxResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetAllCustomEndpointsForSandbox Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetCustomEndpointForSandboxAndCustomEndpointUniqueIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetCustomEndpointForSandboxAndCustomEndpointUniqueId Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxUpdateCustomEndpointResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxUpdateCustomEndpoint Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};

/* Create Custom Endpoint
 *
 * Create Custom Endpoint, requires sandbox:config:edit permission
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxCreateCustomEndpoint : public FRequest
{
    FRequest_SandboxCreateCustomEndpoint();
    virtual ~FRequest_SandboxCreateCustomEndpoint() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevCustomEndpointCreate CustomEndpointCreate;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxCreateCustomEndpoint : public FResponse
{
    FResponse_SandboxCreateCustomEndpoint(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxCreateCustomEndpoint() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevCustomEndpoint Content;


    // Manual Response Helpers
    /* Response 201
    Successful Response
    */
    bool TryGetContentFor201(FRHAPI_DevCustomEndpoint& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxCreateCustomEndpoint
{
    typedef FRequest_SandboxCreateCustomEndpoint Request;
    typedef FResponse_SandboxCreateCustomEndpoint Response;
    typedef FDelegate_SandboxCreateCustomEndpoint Delegate;
    typedef FSandboxConfigCustomEndpointsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxCreateCustomEndpoint(InRequest, InDelegate, Priority); }
};

/* Delete Custom Endpoint
 *
 * Delete Custom Endpoint, requires sandbox:config:edit permission
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxDeleteCustomEndpoint : public FRequest
{
    FRequest_SandboxDeleteCustomEndpoint();
    virtual ~FRequest_SandboxDeleteCustomEndpoint() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid CustomEndpointUniqueId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxDeleteCustomEndpoint : public FResponse
{
    FResponse_SandboxDeleteCustomEndpoint(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxDeleteCustomEndpoint() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    bool Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(bool& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxDeleteCustomEndpoint
{
    typedef FRequest_SandboxDeleteCustomEndpoint Request;
    typedef FResponse_SandboxDeleteCustomEndpoint Response;
    typedef FDelegate_SandboxDeleteCustomEndpoint Delegate;
    typedef FSandboxConfigCustomEndpointsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxDeleteCustomEndpoint(InRequest, InDelegate, Priority); }
};

/* Get All Custom Endpoints For Sandbox
 *
 * Get all Custom Endpoints for Sandbox, requires sandbox:config:view | sandbox:config:edit permission
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetAllCustomEndpointsForSandbox : public FRequest
{
    FRequest_SandboxGetAllCustomEndpointsForSandbox();
    virtual ~FRequest_SandboxGetAllCustomEndpointsForSandbox() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    /* The maximum number of elements to be returned per call */
    TOptional<int32> PageSize;
    /* Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration */
    TOptional<FString> Cursor;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetAllCustomEndpointsForSandbox : public FResponse
{
    FResponse_SandboxGetAllCustomEndpointsForSandbox(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetAllCustomEndpointsForSandbox() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevAllCustomEndpointsResponse Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevAllCustomEndpointsResponse& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetAllCustomEndpointsForSandbox
{
    typedef FRequest_SandboxGetAllCustomEndpointsForSandbox Request;
    typedef FResponse_SandboxGetAllCustomEndpointsForSandbox Response;
    typedef FDelegate_SandboxGetAllCustomEndpointsForSandbox Delegate;
    typedef FSandboxConfigCustomEndpointsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetAllCustomEndpointsForSandbox(InRequest, InDelegate, Priority); }
};

/* Get Custom Endpoint For Sandbox And Custom Endpoint Unique Id
 *
 * Get a Custom Endpoint for Sandbox, requires sandbox:config:view | sandbox:config:edit permission
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetCustomEndpointForSandboxAndCustomEndpointUniqueId : public FRequest
{
    FRequest_SandboxGetCustomEndpointForSandboxAndCustomEndpointUniqueId();
    virtual ~FRequest_SandboxGetCustomEndpointForSandboxAndCustomEndpointUniqueId() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid CustomEndpointUniqueId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetCustomEndpointForSandboxAndCustomEndpointUniqueId : public FResponse
{
    FResponse_SandboxGetCustomEndpointForSandboxAndCustomEndpointUniqueId(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetCustomEndpointForSandboxAndCustomEndpointUniqueId() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevCustomEndpoint Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevCustomEndpoint& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetCustomEndpointForSandboxAndCustomEndpointUniqueId
{
    typedef FRequest_SandboxGetCustomEndpointForSandboxAndCustomEndpointUniqueId Request;
    typedef FResponse_SandboxGetCustomEndpointForSandboxAndCustomEndpointUniqueId Response;
    typedef FDelegate_SandboxGetCustomEndpointForSandboxAndCustomEndpointUniqueId Delegate;
    typedef FSandboxConfigCustomEndpointsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetCustomEndpointForSandboxAndCustomEndpointUniqueId(InRequest, InDelegate, Priority); }
};

/* Update Custom Endpoint
 *
 * Update Custom Endpoint, requires sandbox:config:edit permission
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxUpdateCustomEndpoint : public FRequest
{
    FRequest_SandboxUpdateCustomEndpoint();
    virtual ~FRequest_SandboxUpdateCustomEndpoint() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid CustomEndpointUniqueId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevCustomEndpointUpdate CustomEndpointUpdate;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxUpdateCustomEndpoint : public FResponse
{
    FResponse_SandboxUpdateCustomEndpoint(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxUpdateCustomEndpoint() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevCustomEndpoint Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevCustomEndpoint& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxUpdateCustomEndpoint
{
    typedef FRequest_SandboxUpdateCustomEndpoint Request;
    typedef FResponse_SandboxUpdateCustomEndpoint Response;
    typedef FDelegate_SandboxUpdateCustomEndpoint Delegate;
    typedef FSandboxConfigCustomEndpointsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxUpdateCustomEndpoint(InRequest, InDelegate, Priority); }
};


}
