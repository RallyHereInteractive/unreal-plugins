// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereDeveloperAPIAuthContext.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevAllMatchMakingTemplateGroupsResponse.h"
#include "DevAllMatchMakingTemplatesResponse.h"
#include "DevHTTPValidationError.h"
#include "DevMatchMakingTemplate.h"
#include "DevMatchMakingTemplateGroup.h"
#include "DevMatchMakingTemplateGroupRequest.h"
#include "DevMatchMakingTemplateGroupUpdateRequest.h"
#include "DevMatchMakingTemplateRequest.h"
#include "DevMatchMakingTemplateResponse.h"
#include "DevMatchMakingTemplateUpdateRequest.h"

namespace RallyHereDeveloperAPI
{
using RallyHereDeveloperAPI::ToStringFormatArg;
using RallyHereDeveloperAPI::WriteJsonValue;
using RallyHereDeveloperAPI::TryGetJsonValue;

struct FRequest_SandboxCreateGroup;
struct FResponse_SandboxCreateGroup;
struct FRequest_SandboxCreateMmTemplate;
struct FResponse_SandboxCreateMmTemplate;
struct FRequest_SandboxDeleteGroup;
struct FResponse_SandboxDeleteGroup;
struct FRequest_SandboxDeleteMmTemplate;
struct FResponse_SandboxDeleteMmTemplate;
struct FRequest_SandboxGetAllGroups;
struct FResponse_SandboxGetAllGroups;
struct FRequest_SandboxGetAllMmTemplates;
struct FResponse_SandboxGetAllMmTemplates;
struct FRequest_SandboxGetAllMmTemplatesInGroup;
struct FResponse_SandboxGetAllMmTemplatesInGroup;
struct FRequest_SandboxGetGroup;
struct FResponse_SandboxGetGroup;
struct FRequest_SandboxGetMmTemplate;
struct FResponse_SandboxGetMmTemplate;
struct FRequest_SandboxPatchGroup;
struct FResponse_SandboxPatchGroup;
struct FRequest_SandboxPatchMmTemplate;
struct FResponse_SandboxPatchMmTemplate;
struct FRequest_SandboxPutGroup;
struct FResponse_SandboxPutGroup;
struct FRequest_SandboxPutMmTemplate;
struct FResponse_SandboxPutMmTemplate;

DECLARE_DELEGATE_OneParam(FDelegate_SandboxCreateGroup, const FResponse_SandboxCreateGroup&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxCreateMmTemplate, const FResponse_SandboxCreateMmTemplate&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxDeleteGroup, const FResponse_SandboxDeleteGroup&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxDeleteMmTemplate, const FResponse_SandboxDeleteMmTemplate&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetAllGroups, const FResponse_SandboxGetAllGroups&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetAllMmTemplates, const FResponse_SandboxGetAllMmTemplates&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetAllMmTemplatesInGroup, const FResponse_SandboxGetAllMmTemplatesInGroup&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetGroup, const FResponse_SandboxGetGroup&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetMmTemplate, const FResponse_SandboxGetMmTemplate&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxPatchGroup, const FResponse_SandboxPatchGroup&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxPatchMmTemplate, const FResponse_SandboxPatchMmTemplate&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxPutGroup, const FResponse_SandboxPutGroup&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxPutMmTemplate, const FResponse_SandboxPutMmTemplate&);

class RALLYHEREDEVELOPERAPI_API FMatchMakingTemplatesAPI : public FAPI
{
public:
    FMatchMakingTemplatesAPI();
    virtual ~FMatchMakingTemplatesAPI();

    FHttpRequestPtr SandboxCreateGroup(const FRequest_SandboxCreateGroup& Request, const FDelegate_SandboxCreateGroup& Delegate = FDelegate_SandboxCreateGroup(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxCreateMmTemplate(const FRequest_SandboxCreateMmTemplate& Request, const FDelegate_SandboxCreateMmTemplate& Delegate = FDelegate_SandboxCreateMmTemplate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxDeleteGroup(const FRequest_SandboxDeleteGroup& Request, const FDelegate_SandboxDeleteGroup& Delegate = FDelegate_SandboxDeleteGroup(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxDeleteMmTemplate(const FRequest_SandboxDeleteMmTemplate& Request, const FDelegate_SandboxDeleteMmTemplate& Delegate = FDelegate_SandboxDeleteMmTemplate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetAllGroups(const FRequest_SandboxGetAllGroups& Request, const FDelegate_SandboxGetAllGroups& Delegate = FDelegate_SandboxGetAllGroups(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetAllMmTemplates(const FRequest_SandboxGetAllMmTemplates& Request, const FDelegate_SandboxGetAllMmTemplates& Delegate = FDelegate_SandboxGetAllMmTemplates(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetAllMmTemplatesInGroup(const FRequest_SandboxGetAllMmTemplatesInGroup& Request, const FDelegate_SandboxGetAllMmTemplatesInGroup& Delegate = FDelegate_SandboxGetAllMmTemplatesInGroup(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetGroup(const FRequest_SandboxGetGroup& Request, const FDelegate_SandboxGetGroup& Delegate = FDelegate_SandboxGetGroup(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetMmTemplate(const FRequest_SandboxGetMmTemplate& Request, const FDelegate_SandboxGetMmTemplate& Delegate = FDelegate_SandboxGetMmTemplate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxPatchGroup(const FRequest_SandboxPatchGroup& Request, const FDelegate_SandboxPatchGroup& Delegate = FDelegate_SandboxPatchGroup(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxPatchMmTemplate(const FRequest_SandboxPatchMmTemplate& Request, const FDelegate_SandboxPatchMmTemplate& Delegate = FDelegate_SandboxPatchMmTemplate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxPutGroup(const FRequest_SandboxPutGroup& Request, const FDelegate_SandboxPutGroup& Delegate = FDelegate_SandboxPutGroup(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxPutMmTemplate(const FRequest_SandboxPutMmTemplate& Request, const FDelegate_SandboxPutMmTemplate& Delegate = FDelegate_SandboxPutMmTemplate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);

private:
    void OnSandboxCreateGroupResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxCreateGroup Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxCreateMmTemplateResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxCreateMmTemplate Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxDeleteGroupResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxDeleteGroup Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxDeleteMmTemplateResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxDeleteMmTemplate Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetAllGroupsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetAllGroups Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetAllMmTemplatesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetAllMmTemplates Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetAllMmTemplatesInGroupResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetAllMmTemplatesInGroup Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetGroupResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetGroup Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetMmTemplateResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetMmTemplate Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxPatchGroupResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxPatchGroup Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxPatchMmTemplateResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxPatchMmTemplate Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxPutGroupResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxPutGroup Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxPutMmTemplateResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxPutMmTemplate Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};

/* Create Group
 *
 * Create a new MatchMakingTemplateGroup in a sandbox
 * 
 * Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxCreateGroup : public FRequest
{
    FRequest_SandboxCreateGroup();
    virtual ~FRequest_SandboxCreateGroup() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevMatchMakingTemplateGroupRequest MatchMakingTemplateGroupRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxCreateGroup : public FResponse
{
    FResponse_SandboxCreateGroup(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxCreateGroup() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMatchMakingTemplateGroup Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevMatchMakingTemplateGroup& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxCreateGroup
{
    typedef FRequest_SandboxCreateGroup Request;
    typedef FResponse_SandboxCreateGroup Response;
    typedef FDelegate_SandboxCreateGroup Delegate;
    typedef FMatchMakingTemplatesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxCreateGroup(InRequest, InDelegate, Priority); }
};

/* Create Mm Template
 *
 * Create a new MatchMakingTemplates in a sandbox
 * 
 * Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxCreateMmTemplate : public FRequest
{
    FRequest_SandboxCreateMmTemplate();
    virtual ~FRequest_SandboxCreateMmTemplate() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevMatchMakingTemplateRequest MatchMakingTemplateRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxCreateMmTemplate : public FResponse
{
    FResponse_SandboxCreateMmTemplate(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxCreateMmTemplate() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMatchMakingTemplate Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevMatchMakingTemplate& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxCreateMmTemplate
{
    typedef FRequest_SandboxCreateMmTemplate Request;
    typedef FResponse_SandboxCreateMmTemplate Response;
    typedef FDelegate_SandboxCreateMmTemplate Delegate;
    typedef FMatchMakingTemplatesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxCreateMmTemplate(InRequest, InDelegate, Priority); }
};

/* Delete Group
 *
 * Update an existing MatchMakingTemplateGroup in a sandbox
 * 
 * Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxDeleteGroup : public FRequest
{
    FRequest_SandboxDeleteGroup();
    virtual ~FRequest_SandboxDeleteGroup() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid MatchMakingTemplateGroupId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxDeleteGroup : public FResponse
{
    FResponse_SandboxDeleteGroup(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxDeleteGroup() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    


    // Manual Response Helpers
    /* Response 204
    Successful Response
    */

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxDeleteGroup
{
    typedef FRequest_SandboxDeleteGroup Request;
    typedef FResponse_SandboxDeleteGroup Response;
    typedef FDelegate_SandboxDeleteGroup Delegate;
    typedef FMatchMakingTemplatesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxDeleteGroup(InRequest, InDelegate, Priority); }
};

/* Delete Mm Template
 *
 * Delete an existing MatchMakingTemplates in a sandbox
 * 
 * Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxDeleteMmTemplate : public FRequest
{
    FRequest_SandboxDeleteMmTemplate();
    virtual ~FRequest_SandboxDeleteMmTemplate() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid MatchMakingTemplateId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxDeleteMmTemplate : public FResponse
{
    FResponse_SandboxDeleteMmTemplate(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxDeleteMmTemplate() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    


    // Manual Response Helpers
    /* Response 204
    Successful Response
    */

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxDeleteMmTemplate
{
    typedef FRequest_SandboxDeleteMmTemplate Request;
    typedef FResponse_SandboxDeleteMmTemplate Response;
    typedef FDelegate_SandboxDeleteMmTemplate Delegate;
    typedef FMatchMakingTemplatesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxDeleteMmTemplate(InRequest, InDelegate, Priority); }
};

/* Get All Groups
 *
 * Get all MatchMakingTemplateGroups in a sandbox
 * 
 * Requires any of permissions: 
 * 	 sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetAllGroups : public FRequest
{
    FRequest_SandboxGetAllGroups();
    virtual ~FRequest_SandboxGetAllGroups() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    /* The maximum number of elements to be returned per call */
    TOptional<int32> PageSize;
    /* Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration */
    TOptional<FString> Cursor;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetAllGroups : public FResponse
{
    FResponse_SandboxGetAllGroups(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetAllGroups() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevAllMatchMakingTemplateGroupsResponse Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevAllMatchMakingTemplateGroupsResponse& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetAllGroups
{
    typedef FRequest_SandboxGetAllGroups Request;
    typedef FResponse_SandboxGetAllGroups Response;
    typedef FDelegate_SandboxGetAllGroups Delegate;
    typedef FMatchMakingTemplatesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetAllGroups(InRequest, InDelegate, Priority); }
};

/* Get All Mm Templates
 *
 * Get all MatchMakingTemplates in a sandbox
 * 
 * Requires any of permissions: 
 * 	 sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetAllMmTemplates : public FRequest
{
    FRequest_SandboxGetAllMmTemplates();
    virtual ~FRequest_SandboxGetAllMmTemplates() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    /* The maximum number of elements to be returned per call */
    TOptional<int32> PageSize;
    /* Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration */
    TOptional<FString> Cursor;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetAllMmTemplates : public FResponse
{
    FResponse_SandboxGetAllMmTemplates(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetAllMmTemplates() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevAllMatchMakingTemplatesResponse Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevAllMatchMakingTemplatesResponse& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetAllMmTemplates
{
    typedef FRequest_SandboxGetAllMmTemplates Request;
    typedef FResponse_SandboxGetAllMmTemplates Response;
    typedef FDelegate_SandboxGetAllMmTemplates Delegate;
    typedef FMatchMakingTemplatesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetAllMmTemplates(InRequest, InDelegate, Priority); }
};

/* Get All Mm Templates In Group
 *
 * Get all MatchMakingTemplates in a MatchMakingTemplateGroup
 * 
 * Requires any of permissions: 
 * 	 sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetAllMmTemplatesInGroup : public FRequest
{
    FRequest_SandboxGetAllMmTemplatesInGroup();
    virtual ~FRequest_SandboxGetAllMmTemplatesInGroup() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid MatchMakingTemplateGroupId;
    /* Sandbox ID */
    FGuid SandboxId;
    /* The maximum number of elements to be returned per call */
    TOptional<int32> PageSize;
    /* Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration */
    TOptional<FString> Cursor;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetAllMmTemplatesInGroup : public FResponse
{
    FResponse_SandboxGetAllMmTemplatesInGroup(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetAllMmTemplatesInGroup() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevAllMatchMakingTemplatesResponse Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevAllMatchMakingTemplatesResponse& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetAllMmTemplatesInGroup
{
    typedef FRequest_SandboxGetAllMmTemplatesInGroup Request;
    typedef FResponse_SandboxGetAllMmTemplatesInGroup Response;
    typedef FDelegate_SandboxGetAllMmTemplatesInGroup Delegate;
    typedef FMatchMakingTemplatesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetAllMmTemplatesInGroup(InRequest, InDelegate, Priority); }
};

/* Get Group
 *
 * Get specific MatchMakingTemplateGroup in a sandbox
 * 
 * Requires any of permissions: 
 * 	 sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetGroup : public FRequest
{
    FRequest_SandboxGetGroup();
    virtual ~FRequest_SandboxGetGroup() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid MatchMakingTemplateGroupId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetGroup : public FResponse
{
    FResponse_SandboxGetGroup(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetGroup() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMatchMakingTemplateGroup Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevMatchMakingTemplateGroup& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetGroup
{
    typedef FRequest_SandboxGetGroup Request;
    typedef FResponse_SandboxGetGroup Response;
    typedef FDelegate_SandboxGetGroup Delegate;
    typedef FMatchMakingTemplatesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetGroup(InRequest, InDelegate, Priority); }
};

/* Get Mm Template
 *
 * Get a specific MatchMakingTemplates in a sandbox
 * 
 * Requires any of permissions: 
 * 	 sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetMmTemplate : public FRequest
{
    FRequest_SandboxGetMmTemplate();
    virtual ~FRequest_SandboxGetMmTemplate() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid MatchMakingTemplateId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetMmTemplate : public FResponse
{
    FResponse_SandboxGetMmTemplate(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetMmTemplate() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMatchMakingTemplateResponse Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevMatchMakingTemplateResponse& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetMmTemplate
{
    typedef FRequest_SandboxGetMmTemplate Request;
    typedef FResponse_SandboxGetMmTemplate Response;
    typedef FDelegate_SandboxGetMmTemplate Delegate;
    typedef FMatchMakingTemplatesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetMmTemplate(InRequest, InDelegate, Priority); }
};

/* Patch Group
 *
 * Update an existing MatchMakingTemplateGroup in a sandbox
 * 
 * Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxPatchGroup : public FRequest
{
    FRequest_SandboxPatchGroup();
    virtual ~FRequest_SandboxPatchGroup() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid MatchMakingTemplateGroupId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevMatchMakingTemplateGroupUpdateRequest MatchMakingTemplateGroupUpdateRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxPatchGroup : public FResponse
{
    FResponse_SandboxPatchGroup(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxPatchGroup() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMatchMakingTemplateGroup Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevMatchMakingTemplateGroup& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxPatchGroup
{
    typedef FRequest_SandboxPatchGroup Request;
    typedef FResponse_SandboxPatchGroup Response;
    typedef FDelegate_SandboxPatchGroup Delegate;
    typedef FMatchMakingTemplatesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxPatchGroup(InRequest, InDelegate, Priority); }
};

/* Patch Mm Template
 *
 * Update an existing MatchMakingTemplates in a sandbox
 * 
 * Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxPatchMmTemplate : public FRequest
{
    FRequest_SandboxPatchMmTemplate();
    virtual ~FRequest_SandboxPatchMmTemplate() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid MatchMakingTemplateId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevMatchMakingTemplateUpdateRequest MatchMakingTemplateUpdateRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxPatchMmTemplate : public FResponse
{
    FResponse_SandboxPatchMmTemplate(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxPatchMmTemplate() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMatchMakingTemplate Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevMatchMakingTemplate& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxPatchMmTemplate
{
    typedef FRequest_SandboxPatchMmTemplate Request;
    typedef FResponse_SandboxPatchMmTemplate Response;
    typedef FDelegate_SandboxPatchMmTemplate Delegate;
    typedef FMatchMakingTemplatesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxPatchMmTemplate(InRequest, InDelegate, Priority); }
};

/* Put Group
 *
 * Update an existing MatchMakingTemplateGroup in a sandbox
 * 
 * Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxPutGroup : public FRequest
{
    FRequest_SandboxPutGroup();
    virtual ~FRequest_SandboxPutGroup() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid MatchMakingTemplateGroupId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevMatchMakingTemplateGroupRequest MatchMakingTemplateGroupRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxPutGroup : public FResponse
{
    FResponse_SandboxPutGroup(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxPutGroup() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMatchMakingTemplateGroup Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevMatchMakingTemplateGroup& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxPutGroup
{
    typedef FRequest_SandboxPutGroup Request;
    typedef FResponse_SandboxPutGroup Response;
    typedef FDelegate_SandboxPutGroup Delegate;
    typedef FMatchMakingTemplatesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxPutGroup(InRequest, InDelegate, Priority); }
};

/* Put Mm Template
 *
 * Update an existing MatchMakingTemplates in a sandbox
 * 
 * Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxPutMmTemplate : public FRequest
{
    FRequest_SandboxPutMmTemplate();
    virtual ~FRequest_SandboxPutMmTemplate() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid MatchMakingTemplateId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevMatchMakingTemplateRequest MatchMakingTemplateRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxPutMmTemplate : public FResponse
{
    FResponse_SandboxPutMmTemplate(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxPutMmTemplate() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMatchMakingTemplate Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevMatchMakingTemplate& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxPutMmTemplate
{
    typedef FRequest_SandboxPutMmTemplate Request;
    typedef FResponse_SandboxPutMmTemplate Response;
    typedef FDelegate_SandboxPutMmTemplate Delegate;
    typedef FMatchMakingTemplatesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxPutMmTemplate(InRequest, InDelegate, Priority); }
};


}
