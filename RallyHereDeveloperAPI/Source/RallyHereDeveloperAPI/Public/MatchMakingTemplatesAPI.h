// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereDeveloperAPIAuthContext.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevAllMatchMakingTemplatesResponse.h"
#include "DevHTTPValidationError.h"
#include "DevMatchMakingTemplate.h"
#include "DevMatchMakingTemplateRequest.h"
#include "DevMatchMakingTemplateUpdateRequest.h"
#include "Misc/TVariant.h"

namespace RallyHereDeveloperAPI
{
using RallyHereDeveloperAPI::ToStringFormatArg;
using RallyHereDeveloperAPI::WriteJsonValue;
using RallyHereDeveloperAPI::TryGetJsonValue;

struct FRequest_OrgProductSandboxCreateMmTemplate;
struct FResponse_OrgProductSandboxCreateMmTemplate;
struct FRequest_OrgProductSandboxDeleteMmTemplate;
struct FResponse_OrgProductSandboxDeleteMmTemplate;
struct FRequest_OrgProductSandboxGetAllMmTemplates;
struct FResponse_OrgProductSandboxGetAllMmTemplates;
struct FRequest_OrgProductSandboxGetAllMmTemplatesInGroup;
struct FResponse_OrgProductSandboxGetAllMmTemplatesInGroup;
struct FRequest_OrgProductSandboxGetMmTemplate;
struct FResponse_OrgProductSandboxGetMmTemplate;
struct FRequest_OrgProductSandboxPatchMmTemplate;
struct FResponse_OrgProductSandboxPatchMmTemplate;
struct FRequest_OrgProductSandboxPutMmTemplate;
struct FResponse_OrgProductSandboxPutMmTemplate;
struct FRequest_SandboxCreateMmTemplate;
struct FResponse_SandboxCreateMmTemplate;
struct FRequest_SandboxDeleteMmTemplate;
struct FResponse_SandboxDeleteMmTemplate;
struct FRequest_SandboxGetAllMmTemplates;
struct FResponse_SandboxGetAllMmTemplates;
struct FRequest_SandboxGetAllMmTemplatesInGroup;
struct FResponse_SandboxGetAllMmTemplatesInGroup;
struct FRequest_SandboxGetMmTemplate;
struct FResponse_SandboxGetMmTemplate;
struct FRequest_SandboxPatchMmTemplate;
struct FResponse_SandboxPatchMmTemplate;
struct FRequest_SandboxPutMmTemplate;
struct FResponse_SandboxPutMmTemplate;

DECLARE_DELEGATE_OneParam(FDelegate_OrgProductSandboxCreateMmTemplate, const FResponse_OrgProductSandboxCreateMmTemplate&);
DECLARE_DELEGATE_OneParam(FDelegate_OrgProductSandboxDeleteMmTemplate, const FResponse_OrgProductSandboxDeleteMmTemplate&);
DECLARE_DELEGATE_OneParam(FDelegate_OrgProductSandboxGetAllMmTemplates, const FResponse_OrgProductSandboxGetAllMmTemplates&);
DECLARE_DELEGATE_OneParam(FDelegate_OrgProductSandboxGetAllMmTemplatesInGroup, const FResponse_OrgProductSandboxGetAllMmTemplatesInGroup&);
DECLARE_DELEGATE_OneParam(FDelegate_OrgProductSandboxGetMmTemplate, const FResponse_OrgProductSandboxGetMmTemplate&);
DECLARE_DELEGATE_OneParam(FDelegate_OrgProductSandboxPatchMmTemplate, const FResponse_OrgProductSandboxPatchMmTemplate&);
DECLARE_DELEGATE_OneParam(FDelegate_OrgProductSandboxPutMmTemplate, const FResponse_OrgProductSandboxPutMmTemplate&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxCreateMmTemplate, const FResponse_SandboxCreateMmTemplate&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxDeleteMmTemplate, const FResponse_SandboxDeleteMmTemplate&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetAllMmTemplates, const FResponse_SandboxGetAllMmTemplates&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetAllMmTemplatesInGroup, const FResponse_SandboxGetAllMmTemplatesInGroup&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetMmTemplate, const FResponse_SandboxGetMmTemplate&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxPatchMmTemplate, const FResponse_SandboxPatchMmTemplate&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxPutMmTemplate, const FResponse_SandboxPutMmTemplate&);

class RALLYHEREDEVELOPERAPI_API FMatchMakingTemplatesAPI : public FAPI
{
public:
    FMatchMakingTemplatesAPI();
    virtual ~FMatchMakingTemplatesAPI();

    FHttpRequestPtr OrgProductSandboxCreateMmTemplate(const FRequest_OrgProductSandboxCreateMmTemplate& Request, const FDelegate_OrgProductSandboxCreateMmTemplate& Delegate = FDelegate_OrgProductSandboxCreateMmTemplate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr OrgProductSandboxDeleteMmTemplate(const FRequest_OrgProductSandboxDeleteMmTemplate& Request, const FDelegate_OrgProductSandboxDeleteMmTemplate& Delegate = FDelegate_OrgProductSandboxDeleteMmTemplate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr OrgProductSandboxGetAllMmTemplates(const FRequest_OrgProductSandboxGetAllMmTemplates& Request, const FDelegate_OrgProductSandboxGetAllMmTemplates& Delegate = FDelegate_OrgProductSandboxGetAllMmTemplates(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr OrgProductSandboxGetAllMmTemplatesInGroup(const FRequest_OrgProductSandboxGetAllMmTemplatesInGroup& Request, const FDelegate_OrgProductSandboxGetAllMmTemplatesInGroup& Delegate = FDelegate_OrgProductSandboxGetAllMmTemplatesInGroup(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr OrgProductSandboxGetMmTemplate(const FRequest_OrgProductSandboxGetMmTemplate& Request, const FDelegate_OrgProductSandboxGetMmTemplate& Delegate = FDelegate_OrgProductSandboxGetMmTemplate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr OrgProductSandboxPatchMmTemplate(const FRequest_OrgProductSandboxPatchMmTemplate& Request, const FDelegate_OrgProductSandboxPatchMmTemplate& Delegate = FDelegate_OrgProductSandboxPatchMmTemplate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr OrgProductSandboxPutMmTemplate(const FRequest_OrgProductSandboxPutMmTemplate& Request, const FDelegate_OrgProductSandboxPutMmTemplate& Delegate = FDelegate_OrgProductSandboxPutMmTemplate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxCreateMmTemplate(const FRequest_SandboxCreateMmTemplate& Request, const FDelegate_SandboxCreateMmTemplate& Delegate = FDelegate_SandboxCreateMmTemplate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxDeleteMmTemplate(const FRequest_SandboxDeleteMmTemplate& Request, const FDelegate_SandboxDeleteMmTemplate& Delegate = FDelegate_SandboxDeleteMmTemplate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetAllMmTemplates(const FRequest_SandboxGetAllMmTemplates& Request, const FDelegate_SandboxGetAllMmTemplates& Delegate = FDelegate_SandboxGetAllMmTemplates(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetAllMmTemplatesInGroup(const FRequest_SandboxGetAllMmTemplatesInGroup& Request, const FDelegate_SandboxGetAllMmTemplatesInGroup& Delegate = FDelegate_SandboxGetAllMmTemplatesInGroup(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetMmTemplate(const FRequest_SandboxGetMmTemplate& Request, const FDelegate_SandboxGetMmTemplate& Delegate = FDelegate_SandboxGetMmTemplate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxPatchMmTemplate(const FRequest_SandboxPatchMmTemplate& Request, const FDelegate_SandboxPatchMmTemplate& Delegate = FDelegate_SandboxPatchMmTemplate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxPutMmTemplate(const FRequest_SandboxPutMmTemplate& Request, const FDelegate_SandboxPutMmTemplate& Delegate = FDelegate_SandboxPutMmTemplate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);

private:
    void OnOrgProductSandboxCreateMmTemplateResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_OrgProductSandboxCreateMmTemplate Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnOrgProductSandboxDeleteMmTemplateResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_OrgProductSandboxDeleteMmTemplate Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnOrgProductSandboxGetAllMmTemplatesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_OrgProductSandboxGetAllMmTemplates Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnOrgProductSandboxGetAllMmTemplatesInGroupResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_OrgProductSandboxGetAllMmTemplatesInGroup Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnOrgProductSandboxGetMmTemplateResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_OrgProductSandboxGetMmTemplate Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnOrgProductSandboxPatchMmTemplateResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_OrgProductSandboxPatchMmTemplate Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnOrgProductSandboxPutMmTemplateResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_OrgProductSandboxPutMmTemplate Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxCreateMmTemplateResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxCreateMmTemplate Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxDeleteMmTemplateResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxDeleteMmTemplate Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetAllMmTemplatesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetAllMmTemplates Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetAllMmTemplatesInGroupResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetAllMmTemplatesInGroup Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetMmTemplateResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetMmTemplate Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxPatchMmTemplateResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxPatchMmTemplate Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxPutMmTemplateResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxPutMmTemplate Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};

/* Create Mm Template
 *
 * Create a new MatchMakingTemplates in a sandbox  Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_OrgProductSandboxCreateMmTemplate : public FRequest
{
    FRequest_OrgProductSandboxCreateMmTemplate();
    virtual ~FRequest_OrgProductSandboxCreateMmTemplate() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    /* Product ID or short name */
    TVariant<FGuid, FString> ProductIdentifier;
    /* Sandbox ID or short name */
    TVariant<FGuid, FString> SandboxIdentifier;
    FRHAPI_DevMatchMakingTemplateRequest MatchMakingTemplateRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_OrgProductSandboxCreateMmTemplate : public FResponse
{
    FResponse_OrgProductSandboxCreateMmTemplate(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_OrgProductSandboxCreateMmTemplate() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMatchMakingTemplate Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_OrgProductSandboxCreateMmTemplate
{
    typedef FRequest_OrgProductSandboxCreateMmTemplate Request;
    typedef FResponse_OrgProductSandboxCreateMmTemplate Response;
    typedef FDelegate_OrgProductSandboxCreateMmTemplate Delegate;
    typedef FMatchMakingTemplatesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.OrgProductSandboxCreateMmTemplate(InRequest, InDelegate, Priority); }
};

/* Delete Mm Template
 *
 * Delete an existing MatchMakingTemplates in a sandbox  Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_OrgProductSandboxDeleteMmTemplate : public FRequest
{
    FRequest_OrgProductSandboxDeleteMmTemplate();
    virtual ~FRequest_OrgProductSandboxDeleteMmTemplate() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid MatchMakingTemplateId;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    /* Product ID or short name */
    TVariant<FGuid, FString> ProductIdentifier;
    /* Sandbox ID or short name */
    TVariant<FGuid, FString> SandboxIdentifier;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_OrgProductSandboxDeleteMmTemplate : public FResponse
{
    FResponse_OrgProductSandboxDeleteMmTemplate(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_OrgProductSandboxDeleteMmTemplate() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;



};

struct RALLYHEREDEVELOPERAPI_API Traits_OrgProductSandboxDeleteMmTemplate
{
    typedef FRequest_OrgProductSandboxDeleteMmTemplate Request;
    typedef FResponse_OrgProductSandboxDeleteMmTemplate Response;
    typedef FDelegate_OrgProductSandboxDeleteMmTemplate Delegate;
    typedef FMatchMakingTemplatesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.OrgProductSandboxDeleteMmTemplate(InRequest, InDelegate, Priority); }
};

/* Get All Mm Templates
 *
 * Get all MatchMakingTemplates in a sandbox  Requires any of permissions:    sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_OrgProductSandboxGetAllMmTemplates : public FRequest
{
    FRequest_OrgProductSandboxGetAllMmTemplates();
    virtual ~FRequest_OrgProductSandboxGetAllMmTemplates() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    /* Product ID or short name */
    TVariant<FGuid, FString> ProductIdentifier;
    /* Sandbox ID or short name */
    TVariant<FGuid, FString> SandboxIdentifier;
    /* The maximum number of elements to be returned per call */
    TOptional<int32> PageSize;
    /* Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration */
    TOptional<FString> Cursor;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_OrgProductSandboxGetAllMmTemplates : public FResponse
{
    FResponse_OrgProductSandboxGetAllMmTemplates(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_OrgProductSandboxGetAllMmTemplates() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevAllMatchMakingTemplatesResponse Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_OrgProductSandboxGetAllMmTemplates
{
    typedef FRequest_OrgProductSandboxGetAllMmTemplates Request;
    typedef FResponse_OrgProductSandboxGetAllMmTemplates Response;
    typedef FDelegate_OrgProductSandboxGetAllMmTemplates Delegate;
    typedef FMatchMakingTemplatesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.OrgProductSandboxGetAllMmTemplates(InRequest, InDelegate, Priority); }
};

/* Get All Mm Templates In Group
 *
 * Get all MatchMakingTemplates in a MatchMakingTemplateGroup  Requires any of permissions:    sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_OrgProductSandboxGetAllMmTemplatesInGroup : public FRequest
{
    FRequest_OrgProductSandboxGetAllMmTemplatesInGroup();
    virtual ~FRequest_OrgProductSandboxGetAllMmTemplatesInGroup() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid GroupId;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    /* Product ID or short name */
    TVariant<FGuid, FString> ProductIdentifier;
    /* Sandbox ID or short name */
    TVariant<FGuid, FString> SandboxIdentifier;
    /* The maximum number of elements to be returned per call */
    TOptional<int32> PageSize;
    /* Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration */
    TOptional<FString> Cursor;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_OrgProductSandboxGetAllMmTemplatesInGroup : public FResponse
{
    FResponse_OrgProductSandboxGetAllMmTemplatesInGroup(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_OrgProductSandboxGetAllMmTemplatesInGroup() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevAllMatchMakingTemplatesResponse Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_OrgProductSandboxGetAllMmTemplatesInGroup
{
    typedef FRequest_OrgProductSandboxGetAllMmTemplatesInGroup Request;
    typedef FResponse_OrgProductSandboxGetAllMmTemplatesInGroup Response;
    typedef FDelegate_OrgProductSandboxGetAllMmTemplatesInGroup Delegate;
    typedef FMatchMakingTemplatesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.OrgProductSandboxGetAllMmTemplatesInGroup(InRequest, InDelegate, Priority); }
};

/* Get Mm Template
 *
 * Get a specific MatchMakingTemplates in a sandbox  Requires any of permissions:    sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_OrgProductSandboxGetMmTemplate : public FRequest
{
    FRequest_OrgProductSandboxGetMmTemplate();
    virtual ~FRequest_OrgProductSandboxGetMmTemplate() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid MatchMakingTemplateId;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    /* Product ID or short name */
    TVariant<FGuid, FString> ProductIdentifier;
    /* Sandbox ID or short name */
    TVariant<FGuid, FString> SandboxIdentifier;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_OrgProductSandboxGetMmTemplate : public FResponse
{
    FResponse_OrgProductSandboxGetMmTemplate(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_OrgProductSandboxGetMmTemplate() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMatchMakingTemplate Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_OrgProductSandboxGetMmTemplate
{
    typedef FRequest_OrgProductSandboxGetMmTemplate Request;
    typedef FResponse_OrgProductSandboxGetMmTemplate Response;
    typedef FDelegate_OrgProductSandboxGetMmTemplate Delegate;
    typedef FMatchMakingTemplatesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.OrgProductSandboxGetMmTemplate(InRequest, InDelegate, Priority); }
};

/* Patch Mm Template
 *
 * Update an existing MatchMakingTemplates in a sandbox  Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_OrgProductSandboxPatchMmTemplate : public FRequest
{
    FRequest_OrgProductSandboxPatchMmTemplate();
    virtual ~FRequest_OrgProductSandboxPatchMmTemplate() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid MatchMakingTemplateId;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    /* Product ID or short name */
    TVariant<FGuid, FString> ProductIdentifier;
    /* Sandbox ID or short name */
    TVariant<FGuid, FString> SandboxIdentifier;
    FRHAPI_DevMatchMakingTemplateUpdateRequest MatchMakingTemplateUpdateRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_OrgProductSandboxPatchMmTemplate : public FResponse
{
    FResponse_OrgProductSandboxPatchMmTemplate(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_OrgProductSandboxPatchMmTemplate() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMatchMakingTemplate Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_OrgProductSandboxPatchMmTemplate
{
    typedef FRequest_OrgProductSandboxPatchMmTemplate Request;
    typedef FResponse_OrgProductSandboxPatchMmTemplate Response;
    typedef FDelegate_OrgProductSandboxPatchMmTemplate Delegate;
    typedef FMatchMakingTemplatesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.OrgProductSandboxPatchMmTemplate(InRequest, InDelegate, Priority); }
};

/* Put Mm Template
 *
 * Update an existing MatchMakingTemplates in a sandbox  Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_OrgProductSandboxPutMmTemplate : public FRequest
{
    FRequest_OrgProductSandboxPutMmTemplate();
    virtual ~FRequest_OrgProductSandboxPutMmTemplate() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid MatchMakingTemplateId;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    /* Product ID or short name */
    TVariant<FGuid, FString> ProductIdentifier;
    /* Sandbox ID or short name */
    TVariant<FGuid, FString> SandboxIdentifier;
    FRHAPI_DevMatchMakingTemplateUpdateRequest MatchMakingTemplateUpdateRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_OrgProductSandboxPutMmTemplate : public FResponse
{
    FResponse_OrgProductSandboxPutMmTemplate(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_OrgProductSandboxPutMmTemplate() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMatchMakingTemplate Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_OrgProductSandboxPutMmTemplate
{
    typedef FRequest_OrgProductSandboxPutMmTemplate Request;
    typedef FResponse_OrgProductSandboxPutMmTemplate Response;
    typedef FDelegate_OrgProductSandboxPutMmTemplate Delegate;
    typedef FMatchMakingTemplatesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.OrgProductSandboxPutMmTemplate(InRequest, InDelegate, Priority); }
};

/* Create Mm Template
 *
 * Create a new MatchMakingTemplates in a sandbox  Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxCreateMmTemplate : public FRequest
{
    FRequest_SandboxCreateMmTemplate();
    virtual ~FRequest_SandboxCreateMmTemplate() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevMatchMakingTemplateRequest MatchMakingTemplateRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxCreateMmTemplate : public FResponse
{
    FResponse_SandboxCreateMmTemplate(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxCreateMmTemplate() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMatchMakingTemplate Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxCreateMmTemplate
{
    typedef FRequest_SandboxCreateMmTemplate Request;
    typedef FResponse_SandboxCreateMmTemplate Response;
    typedef FDelegate_SandboxCreateMmTemplate Delegate;
    typedef FMatchMakingTemplatesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxCreateMmTemplate(InRequest, InDelegate, Priority); }
};

/* Delete Mm Template
 *
 * Delete an existing MatchMakingTemplates in a sandbox  Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxDeleteMmTemplate : public FRequest
{
    FRequest_SandboxDeleteMmTemplate();
    virtual ~FRequest_SandboxDeleteMmTemplate() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid MatchMakingTemplateId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxDeleteMmTemplate : public FResponse
{
    FResponse_SandboxDeleteMmTemplate(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxDeleteMmTemplate() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;



};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxDeleteMmTemplate
{
    typedef FRequest_SandboxDeleteMmTemplate Request;
    typedef FResponse_SandboxDeleteMmTemplate Response;
    typedef FDelegate_SandboxDeleteMmTemplate Delegate;
    typedef FMatchMakingTemplatesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxDeleteMmTemplate(InRequest, InDelegate, Priority); }
};

/* Get All Mm Templates
 *
 * Get all MatchMakingTemplates in a sandbox  Requires any of permissions:    sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetAllMmTemplates : public FRequest
{
    FRequest_SandboxGetAllMmTemplates();
    virtual ~FRequest_SandboxGetAllMmTemplates() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    /* The maximum number of elements to be returned per call */
    TOptional<int32> PageSize;
    /* Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration */
    TOptional<FString> Cursor;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetAllMmTemplates : public FResponse
{
    FResponse_SandboxGetAllMmTemplates(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetAllMmTemplates() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevAllMatchMakingTemplatesResponse Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetAllMmTemplates
{
    typedef FRequest_SandboxGetAllMmTemplates Request;
    typedef FResponse_SandboxGetAllMmTemplates Response;
    typedef FDelegate_SandboxGetAllMmTemplates Delegate;
    typedef FMatchMakingTemplatesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetAllMmTemplates(InRequest, InDelegate, Priority); }
};

/* Get All Mm Templates In Group
 *
 * Get all MatchMakingTemplates in a MatchMakingTemplateGroup  Requires any of permissions:    sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetAllMmTemplatesInGroup : public FRequest
{
    FRequest_SandboxGetAllMmTemplatesInGroup();
    virtual ~FRequest_SandboxGetAllMmTemplatesInGroup() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid GroupId;
    /* Sandbox ID */
    FGuid SandboxId;
    /* The maximum number of elements to be returned per call */
    TOptional<int32> PageSize;
    /* Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration */
    TOptional<FString> Cursor;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetAllMmTemplatesInGroup : public FResponse
{
    FResponse_SandboxGetAllMmTemplatesInGroup(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetAllMmTemplatesInGroup() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevAllMatchMakingTemplatesResponse Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetAllMmTemplatesInGroup
{
    typedef FRequest_SandboxGetAllMmTemplatesInGroup Request;
    typedef FResponse_SandboxGetAllMmTemplatesInGroup Response;
    typedef FDelegate_SandboxGetAllMmTemplatesInGroup Delegate;
    typedef FMatchMakingTemplatesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetAllMmTemplatesInGroup(InRequest, InDelegate, Priority); }
};

/* Get Mm Template
 *
 * Get a specific MatchMakingTemplates in a sandbox  Requires any of permissions:    sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetMmTemplate : public FRequest
{
    FRequest_SandboxGetMmTemplate();
    virtual ~FRequest_SandboxGetMmTemplate() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid MatchMakingTemplateId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetMmTemplate : public FResponse
{
    FResponse_SandboxGetMmTemplate(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetMmTemplate() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMatchMakingTemplate Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetMmTemplate
{
    typedef FRequest_SandboxGetMmTemplate Request;
    typedef FResponse_SandboxGetMmTemplate Response;
    typedef FDelegate_SandboxGetMmTemplate Delegate;
    typedef FMatchMakingTemplatesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetMmTemplate(InRequest, InDelegate, Priority); }
};

/* Patch Mm Template
 *
 * Update an existing MatchMakingTemplates in a sandbox  Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxPatchMmTemplate : public FRequest
{
    FRequest_SandboxPatchMmTemplate();
    virtual ~FRequest_SandboxPatchMmTemplate() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid MatchMakingTemplateId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevMatchMakingTemplateUpdateRequest MatchMakingTemplateUpdateRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxPatchMmTemplate : public FResponse
{
    FResponse_SandboxPatchMmTemplate(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxPatchMmTemplate() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMatchMakingTemplate Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxPatchMmTemplate
{
    typedef FRequest_SandboxPatchMmTemplate Request;
    typedef FResponse_SandboxPatchMmTemplate Response;
    typedef FDelegate_SandboxPatchMmTemplate Delegate;
    typedef FMatchMakingTemplatesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxPatchMmTemplate(InRequest, InDelegate, Priority); }
};

/* Put Mm Template
 *
 * Update an existing MatchMakingTemplates in a sandbox  Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxPutMmTemplate : public FRequest
{
    FRequest_SandboxPutMmTemplate();
    virtual ~FRequest_SandboxPutMmTemplate() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid MatchMakingTemplateId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevMatchMakingTemplateUpdateRequest MatchMakingTemplateUpdateRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxPutMmTemplate : public FResponse
{
    FResponse_SandboxPutMmTemplate(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxPutMmTemplate() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevMatchMakingTemplate Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxPutMmTemplate
{
    typedef FRequest_SandboxPutMmTemplate Request;
    typedef FResponse_SandboxPutMmTemplate Response;
    typedef FDelegate_SandboxPutMmTemplate Delegate;
    typedef FMatchMakingTemplatesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxPutMmTemplate(InRequest, InDelegate, Priority); }
};


}
