// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereDeveloperAPIAuthContext.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevHTTPValidationError.h"
#include "DevPortalAccountPermission.h"
#include "DevPortalAccountPermissionRequest.h"
#include "DevPortalPermission.h"
#include "DevPortalPermissionOrgGroup.h"
#include "DevPortalPermissionsOrgGroupAccount.h"
#include "DevPortalPermissionsOrgGroupPermission.h"
#include "DevPortalPermissionsOrgGroupPermissionRequest.h"
#include "Misc/TVariant.h"

namespace RallyHereDeveloperAPI
{
using RallyHereDeveloperAPI::ToStringFormatArg;
using RallyHereDeveloperAPI::WriteJsonValue;
using RallyHereDeveloperAPI::TryGetJsonValue;

struct FRequest_CreateAccountPermissions;
struct FResponse_CreateAccountPermissions;
struct FRequest_CreateOrgGroup;
struct FResponse_CreateOrgGroup;
struct FRequest_CreatePortalPermissions;
struct FResponse_CreatePortalPermissions;
struct FRequest_CreatePortalPermissionsOrgGroupAccount;
struct FResponse_CreatePortalPermissionsOrgGroupAccount;
struct FRequest_CreatePortalPermissionsOrgGroupPermission;
struct FResponse_CreatePortalPermissionsOrgGroupPermission;
struct FRequest_DeleteAccountPermissions;
struct FResponse_DeleteAccountPermissions;
struct FRequest_DeleteOrgGroup;
struct FResponse_DeleteOrgGroup;
struct FRequest_DeletePortalPermission;
struct FResponse_DeletePortalPermission;
struct FRequest_DeletePortalPermissionsOrgGroupAccount;
struct FResponse_DeletePortalPermissionsOrgGroupAccount;
struct FRequest_DeletePortalPermissionsOrgGroupPermission;
struct FResponse_DeletePortalPermissionsOrgGroupPermission;
struct FRequest_GetAllAccountPermissionsForAccount;
struct FResponse_GetAllAccountPermissionsForAccount;
struct FRequest_GetAllAccountPermissionsForAssignedOrg;
struct FResponse_GetAllAccountPermissionsForAssignedOrg;
struct FRequest_GetAllPermissionsForPermissionsOrgGroup;
struct FResponse_GetAllPermissionsForPermissionsOrgGroup;
struct FRequest_GetAllPortalPermissions;
struct FResponse_GetAllPortalPermissions;
struct FRequest_GetOrgGroupsForOrg;
struct FResponse_GetOrgGroupsForOrg;
struct FRequest_GetPermissionsForPermissionsOrgGroup;
struct FResponse_GetPermissionsForPermissionsOrgGroup;
struct FRequest_GetPortalPermissionById;
struct FResponse_GetPortalPermissionById;
struct FRequest_GetPortalPermissionsOrgGroupAccounts;
struct FResponse_GetPortalPermissionsOrgGroupAccounts;
struct FRequest_GetPortalPermissionsOrgGroupsAssignedToAccountForOrg;
struct FResponse_GetPortalPermissionsOrgGroupsAssignedToAccountForOrg;
struct FRequest_UpdateOrgGroup;
struct FResponse_UpdateOrgGroup;

DECLARE_DELEGATE_OneParam(FDelegate_CreateAccountPermissions, const FResponse_CreateAccountPermissions&);
DECLARE_DELEGATE_OneParam(FDelegate_CreateOrgGroup, const FResponse_CreateOrgGroup&);
DECLARE_DELEGATE_OneParam(FDelegate_CreatePortalPermissions, const FResponse_CreatePortalPermissions&);
DECLARE_DELEGATE_OneParam(FDelegate_CreatePortalPermissionsOrgGroupAccount, const FResponse_CreatePortalPermissionsOrgGroupAccount&);
DECLARE_DELEGATE_OneParam(FDelegate_CreatePortalPermissionsOrgGroupPermission, const FResponse_CreatePortalPermissionsOrgGroupPermission&);
DECLARE_DELEGATE_OneParam(FDelegate_DeleteAccountPermissions, const FResponse_DeleteAccountPermissions&);
DECLARE_DELEGATE_OneParam(FDelegate_DeleteOrgGroup, const FResponse_DeleteOrgGroup&);
DECLARE_DELEGATE_OneParam(FDelegate_DeletePortalPermission, const FResponse_DeletePortalPermission&);
DECLARE_DELEGATE_OneParam(FDelegate_DeletePortalPermissionsOrgGroupAccount, const FResponse_DeletePortalPermissionsOrgGroupAccount&);
DECLARE_DELEGATE_OneParam(FDelegate_DeletePortalPermissionsOrgGroupPermission, const FResponse_DeletePortalPermissionsOrgGroupPermission&);
DECLARE_DELEGATE_OneParam(FDelegate_GetAllAccountPermissionsForAccount, const FResponse_GetAllAccountPermissionsForAccount&);
DECLARE_DELEGATE_OneParam(FDelegate_GetAllAccountPermissionsForAssignedOrg, const FResponse_GetAllAccountPermissionsForAssignedOrg&);
DECLARE_DELEGATE_OneParam(FDelegate_GetAllPermissionsForPermissionsOrgGroup, const FResponse_GetAllPermissionsForPermissionsOrgGroup&);
DECLARE_DELEGATE_OneParam(FDelegate_GetAllPortalPermissions, const FResponse_GetAllPortalPermissions&);
DECLARE_DELEGATE_OneParam(FDelegate_GetOrgGroupsForOrg, const FResponse_GetOrgGroupsForOrg&);
DECLARE_DELEGATE_OneParam(FDelegate_GetPermissionsForPermissionsOrgGroup, const FResponse_GetPermissionsForPermissionsOrgGroup&);
DECLARE_DELEGATE_OneParam(FDelegate_GetPortalPermissionById, const FResponse_GetPortalPermissionById&);
DECLARE_DELEGATE_OneParam(FDelegate_GetPortalPermissionsOrgGroupAccounts, const FResponse_GetPortalPermissionsOrgGroupAccounts&);
DECLARE_DELEGATE_OneParam(FDelegate_GetPortalPermissionsOrgGroupsAssignedToAccountForOrg, const FResponse_GetPortalPermissionsOrgGroupsAssignedToAccountForOrg&);
DECLARE_DELEGATE_OneParam(FDelegate_UpdateOrgGroup, const FResponse_UpdateOrgGroup&);

class RALLYHEREDEVELOPERAPI_API FPortalPermissionsAPI : public FAPI
{
public:
    FPortalPermissionsAPI();
    virtual ~FPortalPermissionsAPI();

    FHttpRequestPtr CreateAccountPermissions(const FRequest_CreateAccountPermissions& Request, const FDelegate_CreateAccountPermissions& Delegate = FDelegate_CreateAccountPermissions(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr CreateOrgGroup(const FRequest_CreateOrgGroup& Request, const FDelegate_CreateOrgGroup& Delegate = FDelegate_CreateOrgGroup(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr CreatePortalPermissions(const FRequest_CreatePortalPermissions& Request, const FDelegate_CreatePortalPermissions& Delegate = FDelegate_CreatePortalPermissions(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr CreatePortalPermissionsOrgGroupAccount(const FRequest_CreatePortalPermissionsOrgGroupAccount& Request, const FDelegate_CreatePortalPermissionsOrgGroupAccount& Delegate = FDelegate_CreatePortalPermissionsOrgGroupAccount(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr CreatePortalPermissionsOrgGroupPermission(const FRequest_CreatePortalPermissionsOrgGroupPermission& Request, const FDelegate_CreatePortalPermissionsOrgGroupPermission& Delegate = FDelegate_CreatePortalPermissionsOrgGroupPermission(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr DeleteAccountPermissions(const FRequest_DeleteAccountPermissions& Request, const FDelegate_DeleteAccountPermissions& Delegate = FDelegate_DeleteAccountPermissions(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr DeleteOrgGroup(const FRequest_DeleteOrgGroup& Request, const FDelegate_DeleteOrgGroup& Delegate = FDelegate_DeleteOrgGroup(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr DeletePortalPermission(const FRequest_DeletePortalPermission& Request, const FDelegate_DeletePortalPermission& Delegate = FDelegate_DeletePortalPermission(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr DeletePortalPermissionsOrgGroupAccount(const FRequest_DeletePortalPermissionsOrgGroupAccount& Request, const FDelegate_DeletePortalPermissionsOrgGroupAccount& Delegate = FDelegate_DeletePortalPermissionsOrgGroupAccount(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr DeletePortalPermissionsOrgGroupPermission(const FRequest_DeletePortalPermissionsOrgGroupPermission& Request, const FDelegate_DeletePortalPermissionsOrgGroupPermission& Delegate = FDelegate_DeletePortalPermissionsOrgGroupPermission(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr GetAllAccountPermissionsForAccount(const FRequest_GetAllAccountPermissionsForAccount& Request, const FDelegate_GetAllAccountPermissionsForAccount& Delegate = FDelegate_GetAllAccountPermissionsForAccount(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr GetAllAccountPermissionsForAssignedOrg(const FRequest_GetAllAccountPermissionsForAssignedOrg& Request, const FDelegate_GetAllAccountPermissionsForAssignedOrg& Delegate = FDelegate_GetAllAccountPermissionsForAssignedOrg(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr GetAllPermissionsForPermissionsOrgGroup(const FRequest_GetAllPermissionsForPermissionsOrgGroup& Request, const FDelegate_GetAllPermissionsForPermissionsOrgGroup& Delegate = FDelegate_GetAllPermissionsForPermissionsOrgGroup(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr GetAllPortalPermissions(const FRequest_GetAllPortalPermissions& Request, const FDelegate_GetAllPortalPermissions& Delegate = FDelegate_GetAllPortalPermissions(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr GetOrgGroupsForOrg(const FRequest_GetOrgGroupsForOrg& Request, const FDelegate_GetOrgGroupsForOrg& Delegate = FDelegate_GetOrgGroupsForOrg(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr GetPermissionsForPermissionsOrgGroup(const FRequest_GetPermissionsForPermissionsOrgGroup& Request, const FDelegate_GetPermissionsForPermissionsOrgGroup& Delegate = FDelegate_GetPermissionsForPermissionsOrgGroup(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr GetPortalPermissionById(const FRequest_GetPortalPermissionById& Request, const FDelegate_GetPortalPermissionById& Delegate = FDelegate_GetPortalPermissionById(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr GetPortalPermissionsOrgGroupAccounts(const FRequest_GetPortalPermissionsOrgGroupAccounts& Request, const FDelegate_GetPortalPermissionsOrgGroupAccounts& Delegate = FDelegate_GetPortalPermissionsOrgGroupAccounts(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr GetPortalPermissionsOrgGroupsAssignedToAccountForOrg(const FRequest_GetPortalPermissionsOrgGroupsAssignedToAccountForOrg& Request, const FDelegate_GetPortalPermissionsOrgGroupsAssignedToAccountForOrg& Delegate = FDelegate_GetPortalPermissionsOrgGroupsAssignedToAccountForOrg(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr UpdateOrgGroup(const FRequest_UpdateOrgGroup& Request, const FDelegate_UpdateOrgGroup& Delegate = FDelegate_UpdateOrgGroup(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);

private:
    void OnCreateAccountPermissionsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_CreateAccountPermissions Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnCreateOrgGroupResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_CreateOrgGroup Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnCreatePortalPermissionsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_CreatePortalPermissions Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnCreatePortalPermissionsOrgGroupAccountResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_CreatePortalPermissionsOrgGroupAccount Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnCreatePortalPermissionsOrgGroupPermissionResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_CreatePortalPermissionsOrgGroupPermission Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnDeleteAccountPermissionsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_DeleteAccountPermissions Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnDeleteOrgGroupResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_DeleteOrgGroup Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnDeletePortalPermissionResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_DeletePortalPermission Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnDeletePortalPermissionsOrgGroupAccountResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_DeletePortalPermissionsOrgGroupAccount Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnDeletePortalPermissionsOrgGroupPermissionResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_DeletePortalPermissionsOrgGroupPermission Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetAllAccountPermissionsForAccountResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAllAccountPermissionsForAccount Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetAllAccountPermissionsForAssignedOrgResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAllAccountPermissionsForAssignedOrg Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetAllPermissionsForPermissionsOrgGroupResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAllPermissionsForPermissionsOrgGroup Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetAllPortalPermissionsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAllPortalPermissions Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetOrgGroupsForOrgResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetOrgGroupsForOrg Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetPermissionsForPermissionsOrgGroupResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPermissionsForPermissionsOrgGroup Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetPortalPermissionByIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPortalPermissionById Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetPortalPermissionsOrgGroupAccountsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPortalPermissionsOrgGroupAccounts Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetPortalPermissionsOrgGroupsAssignedToAccountForOrgResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetPortalPermissionsOrgGroupsAssignedToAccountForOrg Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnUpdateOrgGroupResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdateOrgGroup Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};

/* Create Account Permissions
 *
 * Create a new account permission, requires accountPermissions:config:edit permission
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_CreateAccountPermissions : public FRequest
{
    FRequest_CreateAccountPermissions();
    virtual ~FRequest_CreateAccountPermissions() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FRHAPI_DevPortalAccountPermissionRequest Body;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_CreateAccountPermissions : public FResponse
{
    FResponse_CreateAccountPermissions(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_CreateAccountPermissions() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevPortalAccountPermission Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_CreateAccountPermissions
{
    typedef FRequest_CreateAccountPermissions Request;
    typedef FResponse_CreateAccountPermissions Response;
    typedef FDelegate_CreateAccountPermissions Delegate;
    typedef FPortalPermissionsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.CreateAccountPermissions(InRequest, InDelegate, Priority); }
};

/* Create Org Group
 *
 * Create an Org Group, requires permissionsOrgGroup:config:edit | portalPermissions:config:edit permission
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_CreateOrgGroup : public FRequest
{
    FRequest_CreateOrgGroup();
    virtual ~FRequest_CreateOrgGroup() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FRHAPI_DevPortalPermissionOrgGroup Body;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_CreateOrgGroup : public FResponse
{
    FResponse_CreateOrgGroup(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_CreateOrgGroup() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevPortalPermissionOrgGroup Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_CreateOrgGroup
{
    typedef FRequest_CreateOrgGroup Request;
    typedef FResponse_CreateOrgGroup Response;
    typedef FDelegate_CreateOrgGroup Delegate;
    typedef FPortalPermissionsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.CreateOrgGroup(InRequest, InDelegate, Priority); }
};

/* Create Portal Permissions
 *
 * Create a new portal permission, requires portalPermissions:config:edit permission
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_CreatePortalPermissions : public FRequest
{
    FRequest_CreatePortalPermissions();
    virtual ~FRequest_CreatePortalPermissions() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Permission ID in the format <type>:<scope>:<access> */
    FString PermissionId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_CreatePortalPermissions : public FResponse
{
    FResponse_CreatePortalPermissions(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_CreatePortalPermissions() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevPortalPermission Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_CreatePortalPermissions
{
    typedef FRequest_CreatePortalPermissions Request;
    typedef FResponse_CreatePortalPermissions Response;
    typedef FDelegate_CreatePortalPermissions Delegate;
    typedef FPortalPermissionsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.CreatePortalPermissions(InRequest, InDelegate, Priority); }
};

/* Create Portal Permissions Org Group Account
 *
 * Assign a Permission Group to an Account, requires permissionsOrgGroupAccount:config:edit | portalPermissions:config:edit permission
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_CreatePortalPermissionsOrgGroupAccount : public FRequest
{
    FRequest_CreatePortalPermissionsOrgGroupAccount();
    virtual ~FRequest_CreatePortalPermissionsOrgGroupAccount() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    FRHAPI_DevPortalPermissionsOrgGroupAccount Body;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_CreatePortalPermissionsOrgGroupAccount : public FResponse
{
    FResponse_CreatePortalPermissionsOrgGroupAccount(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_CreatePortalPermissionsOrgGroupAccount() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevPortalPermissionsOrgGroupAccount Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_CreatePortalPermissionsOrgGroupAccount
{
    typedef FRequest_CreatePortalPermissionsOrgGroupAccount Request;
    typedef FResponse_CreatePortalPermissionsOrgGroupAccount Response;
    typedef FDelegate_CreatePortalPermissionsOrgGroupAccount Delegate;
    typedef FPortalPermissionsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.CreatePortalPermissionsOrgGroupAccount(InRequest, InDelegate, Priority); }
};

/* Create Portal Permissions Org Group Permission
 *
 * Create a permission for an Org Group, requires permissionsOrgGroup:config:edit | portalPermissions:config:edit permission
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_CreatePortalPermissionsOrgGroupPermission : public FRequest
{
    FRequest_CreatePortalPermissionsOrgGroupPermission();
    virtual ~FRequest_CreatePortalPermissionsOrgGroupPermission() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    FRHAPI_DevPortalPermissionsOrgGroupPermissionRequest Body;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_CreatePortalPermissionsOrgGroupPermission : public FResponse
{
    FResponse_CreatePortalPermissionsOrgGroupPermission(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_CreatePortalPermissionsOrgGroupPermission() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevPortalPermissionsOrgGroupPermission Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_CreatePortalPermissionsOrgGroupPermission
{
    typedef FRequest_CreatePortalPermissionsOrgGroupPermission Request;
    typedef FResponse_CreatePortalPermissionsOrgGroupPermission Response;
    typedef FDelegate_CreatePortalPermissionsOrgGroupPermission Delegate;
    typedef FPortalPermissionsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.CreatePortalPermissionsOrgGroupPermission(InRequest, InDelegate, Priority); }
};

/* Delete Account Permissions
 *
 * Delete an Account Permission, requires accountPermissions:config:edit permission
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_DeleteAccountPermissions : public FRequest
{
    FRequest_DeleteAccountPermissions();
    virtual ~FRequest_DeleteAccountPermissions() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Organization ID */
    FGuid AssignedOrgId;
    /* Account ID */
    FGuid AccountId;
    /* Permission ID */
    FString PermissionId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_DeleteAccountPermissions : public FResponse
{
    FResponse_DeleteAccountPermissions(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_DeleteAccountPermissions() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevJsonValue Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_DeleteAccountPermissions
{
    typedef FRequest_DeleteAccountPermissions Request;
    typedef FResponse_DeleteAccountPermissions Response;
    typedef FDelegate_DeleteAccountPermissions Delegate;
    typedef FPortalPermissionsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.DeleteAccountPermissions(InRequest, InDelegate, Priority); }
};

/* Delete Org Group
 *
 * Delete an Org Group, requires permissionsOrgGroup:config:edit | portalPermissions:config:edit permission
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_DeleteOrgGroup : public FRequest
{
    FRequest_DeleteOrgGroup();
    virtual ~FRequest_DeleteOrgGroup() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    /* Org Group ID */
    FGuid GroupId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_DeleteOrgGroup : public FResponse
{
    FResponse_DeleteOrgGroup(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_DeleteOrgGroup() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevJsonValue Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_DeleteOrgGroup
{
    typedef FRequest_DeleteOrgGroup Request;
    typedef FResponse_DeleteOrgGroup Response;
    typedef FDelegate_DeleteOrgGroup Delegate;
    typedef FPortalPermissionsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.DeleteOrgGroup(InRequest, InDelegate, Priority); }
};

/* Delete Portal Permission
 *
 * Delete a portal permission, requires portalPermissions:config:edit permission
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_DeletePortalPermission : public FRequest
{
    FRequest_DeletePortalPermission();
    virtual ~FRequest_DeletePortalPermission() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Permission ID in the format <type>:<scope>:<access> */
    TVariant<FGuid, FString> PermissionId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_DeletePortalPermission : public FResponse
{
    FResponse_DeletePortalPermission(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_DeletePortalPermission() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevJsonValue Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_DeletePortalPermission
{
    typedef FRequest_DeletePortalPermission Request;
    typedef FResponse_DeletePortalPermission Response;
    typedef FDelegate_DeletePortalPermission Delegate;
    typedef FPortalPermissionsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.DeletePortalPermission(InRequest, InDelegate, Priority); }
};

/* Delete Portal Permissions Org Group Account
 *
 * Delete a Permission Group from an Account, requires permissionsOrgGroupAccount:config:edit | portalPermissions:config:edit permission
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_DeletePortalPermissionsOrgGroupAccount : public FRequest
{
    FRequest_DeletePortalPermissionsOrgGroupAccount();
    virtual ~FRequest_DeletePortalPermissionsOrgGroupAccount() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    /* Org Group ID */
    FGuid GroupId;
    /* Account ID */
    FGuid AccountId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_DeletePortalPermissionsOrgGroupAccount : public FResponse
{
    FResponse_DeletePortalPermissionsOrgGroupAccount(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_DeletePortalPermissionsOrgGroupAccount() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevJsonValue Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_DeletePortalPermissionsOrgGroupAccount
{
    typedef FRequest_DeletePortalPermissionsOrgGroupAccount Request;
    typedef FResponse_DeletePortalPermissionsOrgGroupAccount Response;
    typedef FDelegate_DeletePortalPermissionsOrgGroupAccount Delegate;
    typedef FPortalPermissionsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.DeletePortalPermissionsOrgGroupAccount(InRequest, InDelegate, Priority); }
};

/* Delete Portal Permissions Org Group Permission
 *
 * Delete a permission for an Org Group, requires permissionsOrgGroup:config:edit | portalPermissions:config:edit permission
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_DeletePortalPermissionsOrgGroupPermission : public FRequest
{
    FRequest_DeletePortalPermissionsOrgGroupPermission();
    virtual ~FRequest_DeletePortalPermissionsOrgGroupPermission() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    /* Org Group ID */
    FGuid GroupId;
    /* Permissions Group Permission ID */
    FGuid GroupPermissionId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_DeletePortalPermissionsOrgGroupPermission : public FResponse
{
    FResponse_DeletePortalPermissionsOrgGroupPermission(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_DeletePortalPermissionsOrgGroupPermission() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevJsonValue Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_DeletePortalPermissionsOrgGroupPermission
{
    typedef FRequest_DeletePortalPermissionsOrgGroupPermission Request;
    typedef FResponse_DeletePortalPermissionsOrgGroupPermission Response;
    typedef FDelegate_DeletePortalPermissionsOrgGroupPermission Delegate;
    typedef FPortalPermissionsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.DeletePortalPermissionsOrgGroupPermission(InRequest, InDelegate, Priority); }
};

/* Get All Account Permissions For Account
 *
 * Get all permissions assigned to an account, requires globalAdmin permission
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_GetAllAccountPermissionsForAccount : public FRequest
{
    FRequest_GetAllAccountPermissionsForAccount();
    virtual ~FRequest_GetAllAccountPermissionsForAccount() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Account ID */
    FGuid AccountId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_GetAllAccountPermissionsForAccount : public FResponse
{
    FResponse_GetAllAccountPermissionsForAccount(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetAllAccountPermissionsForAccount() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    TArray<FRHAPI_DevPortalAccountPermission> Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_GetAllAccountPermissionsForAccount
{
    typedef FRequest_GetAllAccountPermissionsForAccount Request;
    typedef FResponse_GetAllAccountPermissionsForAccount Response;
    typedef FDelegate_GetAllAccountPermissionsForAccount Delegate;
    typedef FPortalPermissionsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.GetAllAccountPermissionsForAccount(InRequest, InDelegate, Priority); }
};

/* Get All Account Permissions For Assigned Org
 *
 * Get all permissions assigned to an account for a specific org, requires accountPermissions:config:view permission
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_GetAllAccountPermissionsForAssignedOrg : public FRequest
{
    FRequest_GetAllAccountPermissionsForAssignedOrg();
    virtual ~FRequest_GetAllAccountPermissionsForAssignedOrg() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Org ID or Short Name */
    TVariant<FGuid, FString> OrgIdentifier;
    /* Account ID */
    FGuid AccountId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_GetAllAccountPermissionsForAssignedOrg : public FResponse
{
    FResponse_GetAllAccountPermissionsForAssignedOrg(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetAllAccountPermissionsForAssignedOrg() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    TArray<FRHAPI_DevPortalAccountPermission> Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_GetAllAccountPermissionsForAssignedOrg
{
    typedef FRequest_GetAllAccountPermissionsForAssignedOrg Request;
    typedef FResponse_GetAllAccountPermissionsForAssignedOrg Response;
    typedef FDelegate_GetAllAccountPermissionsForAssignedOrg Delegate;
    typedef FPortalPermissionsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.GetAllAccountPermissionsForAssignedOrg(InRequest, InDelegate, Priority); }
};

/* Get All Permissions For Permissions Org Group
 *
 * Get all permissions for an Org Group, requires permissionsOrgGroup:config:view | portalPermissions:config:view | permissionsOrgGroup:config:edit | portalPermissions:config:edit permission
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_GetAllPermissionsForPermissionsOrgGroup : public FRequest
{
    FRequest_GetAllPermissionsForPermissionsOrgGroup();
    virtual ~FRequest_GetAllPermissionsForPermissionsOrgGroup() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    /* Group ID */
    FGuid GroupId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_GetAllPermissionsForPermissionsOrgGroup : public FResponse
{
    FResponse_GetAllPermissionsForPermissionsOrgGroup(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetAllPermissionsForPermissionsOrgGroup() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    TArray<FRHAPI_DevPortalPermissionsOrgGroupPermission> Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_GetAllPermissionsForPermissionsOrgGroup
{
    typedef FRequest_GetAllPermissionsForPermissionsOrgGroup Request;
    typedef FResponse_GetAllPermissionsForPermissionsOrgGroup Response;
    typedef FDelegate_GetAllPermissionsForPermissionsOrgGroup Delegate;
    typedef FPortalPermissionsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.GetAllPermissionsForPermissionsOrgGroup(InRequest, InDelegate, Priority); }
};

/* Get All Portal Permissions
 *
 * Get all portal permissions, requires global admin permissions
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_GetAllPortalPermissions : public FRequest
{
    FRequest_GetAllPortalPermissions();
    virtual ~FRequest_GetAllPortalPermissions() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_GetAllPortalPermissions : public FResponse
{
    FResponse_GetAllPortalPermissions(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetAllPortalPermissions() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    TArray<FRHAPI_DevPortalPermission> Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_GetAllPortalPermissions
{
    typedef FRequest_GetAllPortalPermissions Request;
    typedef FResponse_GetAllPortalPermissions Response;
    typedef FDelegate_GetAllPortalPermissions Delegate;
    typedef FPortalPermissionsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.GetAllPortalPermissions(InRequest, InDelegate, Priority); }
};

/* Get Org Groups For Org
 *
 * Get all Org Groups for an Organization, requires permissionsOrgGroup:config:view | portalPermissions:config:view | permissionsOrgGroup:config:edit | portalPermissions:config:edit permission
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_GetOrgGroupsForOrg : public FRequest
{
    FRequest_GetOrgGroupsForOrg();
    virtual ~FRequest_GetOrgGroupsForOrg() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_GetOrgGroupsForOrg : public FResponse
{
    FResponse_GetOrgGroupsForOrg(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetOrgGroupsForOrg() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    TArray<FRHAPI_DevPortalPermissionOrgGroup> Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_GetOrgGroupsForOrg
{
    typedef FRequest_GetOrgGroupsForOrg Request;
    typedef FResponse_GetOrgGroupsForOrg Response;
    typedef FDelegate_GetOrgGroupsForOrg Delegate;
    typedef FPortalPermissionsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.GetOrgGroupsForOrg(InRequest, InDelegate, Priority); }
};

/* Get Permissions For Permissions Org Group
 *
 * Get a permission for an Org Group, requires permissionsOrgGroup:config:view | portalPermissions:config:view | permissionsOrgGroup:config:edit | portalPermissions:config:edit permission
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_GetPermissionsForPermissionsOrgGroup : public FRequest
{
    FRequest_GetPermissionsForPermissionsOrgGroup();
    virtual ~FRequest_GetPermissionsForPermissionsOrgGroup() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    /* Org Group ID */
    FGuid GroupId;
    /* Permissions Group Permission ID */
    FGuid GroupPermissionId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_GetPermissionsForPermissionsOrgGroup : public FResponse
{
    FResponse_GetPermissionsForPermissionsOrgGroup(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetPermissionsForPermissionsOrgGroup() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevPortalPermissionsOrgGroupPermission Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_GetPermissionsForPermissionsOrgGroup
{
    typedef FRequest_GetPermissionsForPermissionsOrgGroup Request;
    typedef FResponse_GetPermissionsForPermissionsOrgGroup Response;
    typedef FDelegate_GetPermissionsForPermissionsOrgGroup Delegate;
    typedef FPortalPermissionsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.GetPermissionsForPermissionsOrgGroup(InRequest, InDelegate, Priority); }
};

/* Get Portal Permission By Id
 *
 * Get portal permission by ID, requires portalPermissions:config:view permission
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_GetPortalPermissionById : public FRequest
{
    FRequest_GetPortalPermissionById();
    virtual ~FRequest_GetPortalPermissionById() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Permission ID in the format <type>:<scope>:<access> */
    FString PermissionId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_GetPortalPermissionById : public FResponse
{
    FResponse_GetPortalPermissionById(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetPortalPermissionById() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevPortalPermission Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_GetPortalPermissionById
{
    typedef FRequest_GetPortalPermissionById Request;
    typedef FResponse_GetPortalPermissionById Response;
    typedef FDelegate_GetPortalPermissionById Delegate;
    typedef FPortalPermissionsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.GetPortalPermissionById(InRequest, InDelegate, Priority); }
};

/* Get Portal Permissions Org Group Accounts
 *
 * Get all permissions for an Org Group, requires permissionsOrgGroupAccount:config:view | portalPermissions:config:view permission | permissionsOrgGroupAccount:config:edit | portalPermissions:config:edit permission
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_GetPortalPermissionsOrgGroupAccounts : public FRequest
{
    FRequest_GetPortalPermissionsOrgGroupAccounts();
    virtual ~FRequest_GetPortalPermissionsOrgGroupAccounts() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    /* Org Group ID */
    FGuid GroupId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_GetPortalPermissionsOrgGroupAccounts : public FResponse
{
    FResponse_GetPortalPermissionsOrgGroupAccounts(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetPortalPermissionsOrgGroupAccounts() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    TArray<FRHAPI_DevPortalPermissionsOrgGroupAccount> Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_GetPortalPermissionsOrgGroupAccounts
{
    typedef FRequest_GetPortalPermissionsOrgGroupAccounts Request;
    typedef FResponse_GetPortalPermissionsOrgGroupAccounts Response;
    typedef FDelegate_GetPortalPermissionsOrgGroupAccounts Delegate;
    typedef FPortalPermissionsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.GetPortalPermissionsOrgGroupAccounts(InRequest, InDelegate, Priority); }
};

/* Get Portal Permissions Org Groups Assigned To Account For Org
 *
 * Get all permissions for an Account, requires permissionsOrgGroupAccount:config:view | portalPermissions:config:view permission | permissionsOrgGroupAccount:config:edit | portalPermissions:config:edit permission
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_GetPortalPermissionsOrgGroupsAssignedToAccountForOrg : public FRequest
{
    FRequest_GetPortalPermissionsOrgGroupsAssignedToAccountForOrg();
    virtual ~FRequest_GetPortalPermissionsOrgGroupsAssignedToAccountForOrg() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    /* Account ID */
    FGuid AccountId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_GetPortalPermissionsOrgGroupsAssignedToAccountForOrg : public FResponse
{
    FResponse_GetPortalPermissionsOrgGroupsAssignedToAccountForOrg(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetPortalPermissionsOrgGroupsAssignedToAccountForOrg() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    TArray<FRHAPI_DevPortalPermissionsOrgGroupAccount> Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_GetPortalPermissionsOrgGroupsAssignedToAccountForOrg
{
    typedef FRequest_GetPortalPermissionsOrgGroupsAssignedToAccountForOrg Request;
    typedef FResponse_GetPortalPermissionsOrgGroupsAssignedToAccountForOrg Response;
    typedef FDelegate_GetPortalPermissionsOrgGroupsAssignedToAccountForOrg Delegate;
    typedef FPortalPermissionsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.GetPortalPermissionsOrgGroupsAssignedToAccountForOrg(InRequest, InDelegate, Priority); }
};

/* Update Org Group
 *
 * Update an Org Group, requires permissionsOrgGroup:config:edit | portalPermissions:config:edit permission
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_UpdateOrgGroup : public FRequest
{
    FRequest_UpdateOrgGroup();
    virtual ~FRequest_UpdateOrgGroup() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    FRHAPI_DevPortalPermissionOrgGroup Body;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_UpdateOrgGroup : public FResponse
{
    FResponse_UpdateOrgGroup(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_UpdateOrgGroup() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevPortalPermissionOrgGroup Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_UpdateOrgGroup
{
    typedef FRequest_UpdateOrgGroup Request;
    typedef FResponse_UpdateOrgGroup Response;
    typedef FDelegate_UpdateOrgGroup Delegate;
    typedef FPortalPermissionsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.UpdateOrgGroup(InRequest, InDelegate, Priority); }
};


}
