// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereDeveloperAPIBaseModel.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevDatacenterProvider.h"
#include "DevMachineClassCreate.generated.h"

/** @defgroup RHAPI_DevMachineClassCreate RallyHere API Model DevMachineClassCreate
 *  @{
 */

/**
 * @brief A description of a type of performance characteristics either real or virtual. At DigitalOcean and Azure this is called VM Size. At AWS this is called Instance type. At Google this is called machine type or machine configuration.
 */
USTRUCT(BlueprintType)
struct RALLYHEREDEVELOPERAPI_API FRHAPI_DevMachineClassCreate : public FRHAPI_DevModel
{
    GENERATED_BODY()

    /**
    * @brief Fills this object with data from the passed in JSON
    *
    * @param [in] JsonValue Data from the API call.
    *
    * @return true if parsing of the JSON data was successful.
    */
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

    /**
    * @brief Writes the data from this object into the specified JSON Writer stream
    *
    * @param [in] Writer JSON Writer stream to push .
    */
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    FRHAPI_DevDatacenterProvider DatacenterProvider_Optional{  };
    /** @brief true if DatacenterProvider_Optional has been set to a value */
    bool DatacenterProvider_IsSet{ false };
    /** @brief Gets the value of DatacenterProvider_Optional, regardless of it having been set */
    FRHAPI_DevDatacenterProvider& GetDatacenterProvider() { return DatacenterProvider_Optional; }
    /** @brief Gets the value of DatacenterProvider_Optional, regardless of it having been set */
    const FRHAPI_DevDatacenterProvider& GetDatacenterProvider() const { return DatacenterProvider_Optional; }
    /** @brief Gets the value of DatacenterProvider_Optional, if it has been set, otherwise it returns DefaultValue */
    const FRHAPI_DevDatacenterProvider& GetDatacenterProvider(const FRHAPI_DevDatacenterProvider& DefaultValue) const { if (DatacenterProvider_IsSet) return DatacenterProvider_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of DatacenterProvider_Optional and returns true if it has been set, otherwise returns false */
    bool GetDatacenterProvider(FRHAPI_DevDatacenterProvider& OutValue) const { if (DatacenterProvider_IsSet) OutValue = DatacenterProvider_Optional; return DatacenterProvider_IsSet; }
    /** @brief Returns a pointer to DatacenterProvider_Optional, if it has been set, otherwise returns nullptr */
    FRHAPI_DevDatacenterProvider* GetDatacenterProviderOrNull() { if (DatacenterProvider_IsSet) return &DatacenterProvider_Optional; return nullptr; }
    /** @brief Returns a pointer to DatacenterProvider_Optional, if it has been set, otherwise returns nullptr */
    const FRHAPI_DevDatacenterProvider* GetDatacenterProviderOrNull() const { if (DatacenterProvider_IsSet) return &DatacenterProvider_Optional; return nullptr; }
    /** @brief Sets the value of DatacenterProvider_Optional and also sets DatacenterProvider_IsSet to true */
    void SetDatacenterProvider(FRHAPI_DevDatacenterProvider NewValue) { DatacenterProvider_Optional = NewValue; DatacenterProvider_IsSet = true; }
     /** @brief Clears the value of DatacenterProvider_Optional and sets DatacenterProvider_IsSet to false */
    void ClearDatacenterProvider() { DatacenterProvider_IsSet = false; }

    /** @brief The name of the machine class used by the provider */
    FString Name{  };
    /** @brief Gets the value of Name */
    FString& GetName() { return Name; }
    /** @brief Gets the value of Name */
    const FString& GetName() const { return Name; }
    /** @brief Sets the value of Name */
    void SetName(FString NewValue) { Name = NewValue;  }

    /** @brief The type of machine class used by the provider. General Purpose, CPU Optimized, etc. */
    FString Type{  };
    /** @brief Gets the value of Type */
    FString& GetType() { return Type; }
    /** @brief Gets the value of Type */
    const FString& GetType() const { return Type; }
    /** @brief Sets the value of Type */
    void SetType(FString NewValue) { Type = NewValue;  }

    /** @brief Labels that can be applied to the machine class for organizational purposes */
    TArray<FString> Labels_Optional{  };
    /** @brief true if Labels_Optional has been set to a value */
    bool Labels_IsSet{ false };
    /** @brief Gets the value of Labels_Optional, regardless of it having been set */
    TArray<FString>& GetLabels() { return Labels_Optional; }
    /** @brief Gets the value of Labels_Optional, regardless of it having been set */
    const TArray<FString>& GetLabels() const { return Labels_Optional; }
    /** @brief Gets the value of Labels_Optional, if it has been set, otherwise it returns DefaultValue */
    const TArray<FString>& GetLabels(const TArray<FString>& DefaultValue) const { if (Labels_IsSet) return Labels_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Labels_Optional and returns true if it has been set, otherwise returns false */
    bool GetLabels(TArray<FString>& OutValue) const { if (Labels_IsSet) OutValue = Labels_Optional; return Labels_IsSet; }
    /** @brief Returns a pointer to Labels_Optional, if it has been set, otherwise returns nullptr */
    TArray<FString>* GetLabelsOrNull() { if (Labels_IsSet) return &Labels_Optional; return nullptr; }
    /** @brief Returns a pointer to Labels_Optional, if it has been set, otherwise returns nullptr */
    const TArray<FString>* GetLabelsOrNull() const { if (Labels_IsSet) return &Labels_Optional; return nullptr; }
    /** @brief Sets the value of Labels_Optional and also sets Labels_IsSet to true */
    void SetLabels(TArray<FString> NewValue) { Labels_Optional = NewValue; Labels_IsSet = true; }
     /** @brief Clears the value of Labels_Optional and sets Labels_IsSet to false */
    void ClearLabels() { Labels_IsSet = false; }

    /** @brief The monthly price of this machine class */
    float MonthlyPrice_Optional{  };
    /** @brief true if MonthlyPrice_Optional has been set to a value */
    bool MonthlyPrice_IsSet{ false };
    /** @brief Gets the value of MonthlyPrice_Optional, regardless of it having been set */
    float& GetMonthlyPrice() { return MonthlyPrice_Optional; }
    /** @brief Gets the value of MonthlyPrice_Optional, regardless of it having been set */
    const float& GetMonthlyPrice() const { return MonthlyPrice_Optional; }
    /** @brief Gets the value of MonthlyPrice_Optional, if it has been set, otherwise it returns DefaultValue */
    const float& GetMonthlyPrice(const float& DefaultValue) const { if (MonthlyPrice_IsSet) return MonthlyPrice_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of MonthlyPrice_Optional and returns true if it has been set, otherwise returns false */
    bool GetMonthlyPrice(float& OutValue) const { if (MonthlyPrice_IsSet) OutValue = MonthlyPrice_Optional; return MonthlyPrice_IsSet; }
    /** @brief Returns a pointer to MonthlyPrice_Optional, if it has been set, otherwise returns nullptr */
    float* GetMonthlyPriceOrNull() { if (MonthlyPrice_IsSet) return &MonthlyPrice_Optional; return nullptr; }
    /** @brief Returns a pointer to MonthlyPrice_Optional, if it has been set, otherwise returns nullptr */
    const float* GetMonthlyPriceOrNull() const { if (MonthlyPrice_IsSet) return &MonthlyPrice_Optional; return nullptr; }
    /** @brief Sets the value of MonthlyPrice_Optional and also sets MonthlyPrice_IsSet to true */
    void SetMonthlyPrice(float NewValue) { MonthlyPrice_Optional = NewValue; MonthlyPrice_IsSet = true; }
     /** @brief Clears the value of MonthlyPrice_Optional and sets MonthlyPrice_IsSet to false */
    void ClearMonthlyPrice() { MonthlyPrice_IsSet = false; }

    /** @brief The hourly price of this machine class */
    float HourlyPrice_Optional{  };
    /** @brief true if HourlyPrice_Optional has been set to a value */
    bool HourlyPrice_IsSet{ false };
    /** @brief Gets the value of HourlyPrice_Optional, regardless of it having been set */
    float& GetHourlyPrice() { return HourlyPrice_Optional; }
    /** @brief Gets the value of HourlyPrice_Optional, regardless of it having been set */
    const float& GetHourlyPrice() const { return HourlyPrice_Optional; }
    /** @brief Gets the value of HourlyPrice_Optional, if it has been set, otherwise it returns DefaultValue */
    const float& GetHourlyPrice(const float& DefaultValue) const { if (HourlyPrice_IsSet) return HourlyPrice_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of HourlyPrice_Optional and returns true if it has been set, otherwise returns false */
    bool GetHourlyPrice(float& OutValue) const { if (HourlyPrice_IsSet) OutValue = HourlyPrice_Optional; return HourlyPrice_IsSet; }
    /** @brief Returns a pointer to HourlyPrice_Optional, if it has been set, otherwise returns nullptr */
    float* GetHourlyPriceOrNull() { if (HourlyPrice_IsSet) return &HourlyPrice_Optional; return nullptr; }
    /** @brief Returns a pointer to HourlyPrice_Optional, if it has been set, otherwise returns nullptr */
    const float* GetHourlyPriceOrNull() const { if (HourlyPrice_IsSet) return &HourlyPrice_Optional; return nullptr; }
    /** @brief Sets the value of HourlyPrice_Optional and also sets HourlyPrice_IsSet to true */
    void SetHourlyPrice(float NewValue) { HourlyPrice_Optional = NewValue; HourlyPrice_IsSet = true; }
     /** @brief Clears the value of HourlyPrice_Optional and sets HourlyPrice_IsSet to false */
    void ClearHourlyPrice() { HourlyPrice_IsSet = false; }

    /** @brief The number of CPUs */
    int32 CpuCount_Optional{  };
    /** @brief true if CpuCount_Optional has been set to a value */
    bool CpuCount_IsSet{ false };
    /** @brief Gets the value of CpuCount_Optional, regardless of it having been set */
    int32& GetCpuCount() { return CpuCount_Optional; }
    /** @brief Gets the value of CpuCount_Optional, regardless of it having been set */
    const int32& GetCpuCount() const { return CpuCount_Optional; }
    /** @brief Gets the value of CpuCount_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetCpuCount(const int32& DefaultValue) const { if (CpuCount_IsSet) return CpuCount_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of CpuCount_Optional and returns true if it has been set, otherwise returns false */
    bool GetCpuCount(int32& OutValue) const { if (CpuCount_IsSet) OutValue = CpuCount_Optional; return CpuCount_IsSet; }
    /** @brief Returns a pointer to CpuCount_Optional, if it has been set, otherwise returns nullptr */
    int32* GetCpuCountOrNull() { if (CpuCount_IsSet) return &CpuCount_Optional; return nullptr; }
    /** @brief Returns a pointer to CpuCount_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetCpuCountOrNull() const { if (CpuCount_IsSet) return &CpuCount_Optional; return nullptr; }
    /** @brief Sets the value of CpuCount_Optional and also sets CpuCount_IsSet to true */
    void SetCpuCount(int32 NewValue) { CpuCount_Optional = NewValue; CpuCount_IsSet = true; }
     /** @brief Clears the value of CpuCount_Optional and sets CpuCount_IsSet to false */
    void ClearCpuCount() { CpuCount_Optional = 0; CpuCount_IsSet = false; }
    /** @brief Returns true if CpuCount_Optional is set and matches the default value */
    bool IsCpuCountDefaultValue() const { return CpuCount_IsSet && CpuCount_Optional == 0; }
    /** @brief Sets the value of CpuCount_Optional to its default and also sets CpuCount_IsSet to true */
    void SetCpuCountToDefault() { CpuCount_Optional = 0; CpuCount_IsSet = true; }

    /** @brief A description of the CPU including type, family, model, and stepping */
    FString CpuInfo_Optional{  };
    /** @brief true if CpuInfo_Optional has been set to a value */
    bool CpuInfo_IsSet{ false };
    /** @brief Gets the value of CpuInfo_Optional, regardless of it having been set */
    FString& GetCpuInfo() { return CpuInfo_Optional; }
    /** @brief Gets the value of CpuInfo_Optional, regardless of it having been set */
    const FString& GetCpuInfo() const { return CpuInfo_Optional; }
    /** @brief Gets the value of CpuInfo_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetCpuInfo(const FString& DefaultValue) const { if (CpuInfo_IsSet) return CpuInfo_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of CpuInfo_Optional and returns true if it has been set, otherwise returns false */
    bool GetCpuInfo(FString& OutValue) const { if (CpuInfo_IsSet) OutValue = CpuInfo_Optional; return CpuInfo_IsSet; }
    /** @brief Returns a pointer to CpuInfo_Optional, if it has been set, otherwise returns nullptr */
    FString* GetCpuInfoOrNull() { if (CpuInfo_IsSet) return &CpuInfo_Optional; return nullptr; }
    /** @brief Returns a pointer to CpuInfo_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetCpuInfoOrNull() const { if (CpuInfo_IsSet) return &CpuInfo_Optional; return nullptr; }
    /** @brief Sets the value of CpuInfo_Optional and also sets CpuInfo_IsSet to true */
    void SetCpuInfo(FString NewValue) { CpuInfo_Optional = NewValue; CpuInfo_IsSet = true; }
     /** @brief Clears the value of CpuInfo_Optional and sets CpuInfo_IsSet to false */
    void ClearCpuInfo() { CpuInfo_IsSet = false; }

    /** @brief The short description of the CPU type. e.g. Intel Xeon E5-2673 v4 @ 2.30GHz */
    FString CpuType_Optional{  };
    /** @brief true if CpuType_Optional has been set to a value */
    bool CpuType_IsSet{ false };
    /** @brief Gets the value of CpuType_Optional, regardless of it having been set */
    FString& GetCpuType() { return CpuType_Optional; }
    /** @brief Gets the value of CpuType_Optional, regardless of it having been set */
    const FString& GetCpuType() const { return CpuType_Optional; }
    /** @brief Gets the value of CpuType_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetCpuType(const FString& DefaultValue) const { if (CpuType_IsSet) return CpuType_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of CpuType_Optional and returns true if it has been set, otherwise returns false */
    bool GetCpuType(FString& OutValue) const { if (CpuType_IsSet) OutValue = CpuType_Optional; return CpuType_IsSet; }
    /** @brief Returns a pointer to CpuType_Optional, if it has been set, otherwise returns nullptr */
    FString* GetCpuTypeOrNull() { if (CpuType_IsSet) return &CpuType_Optional; return nullptr; }
    /** @brief Returns a pointer to CpuType_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetCpuTypeOrNull() const { if (CpuType_IsSet) return &CpuType_Optional; return nullptr; }
    /** @brief Sets the value of CpuType_Optional and also sets CpuType_IsSet to true */
    void SetCpuType(FString NewValue) { CpuType_Optional = NewValue; CpuType_IsSet = true; }
     /** @brief Clears the value of CpuType_Optional and sets CpuType_IsSet to false */
    void ClearCpuType() { CpuType_IsSet = false; }

    /** @brief The number of populated CPU sockets */
    int32 CpuSockets_Optional{  };
    /** @brief true if CpuSockets_Optional has been set to a value */
    bool CpuSockets_IsSet{ false };
    /** @brief Gets the value of CpuSockets_Optional, regardless of it having been set */
    int32& GetCpuSockets() { return CpuSockets_Optional; }
    /** @brief Gets the value of CpuSockets_Optional, regardless of it having been set */
    const int32& GetCpuSockets() const { return CpuSockets_Optional; }
    /** @brief Gets the value of CpuSockets_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetCpuSockets(const int32& DefaultValue) const { if (CpuSockets_IsSet) return CpuSockets_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of CpuSockets_Optional and returns true if it has been set, otherwise returns false */
    bool GetCpuSockets(int32& OutValue) const { if (CpuSockets_IsSet) OutValue = CpuSockets_Optional; return CpuSockets_IsSet; }
    /** @brief Returns a pointer to CpuSockets_Optional, if it has been set, otherwise returns nullptr */
    int32* GetCpuSocketsOrNull() { if (CpuSockets_IsSet) return &CpuSockets_Optional; return nullptr; }
    /** @brief Returns a pointer to CpuSockets_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetCpuSocketsOrNull() const { if (CpuSockets_IsSet) return &CpuSockets_Optional; return nullptr; }
    /** @brief Sets the value of CpuSockets_Optional and also sets CpuSockets_IsSet to true */
    void SetCpuSockets(int32 NewValue) { CpuSockets_Optional = NewValue; CpuSockets_IsSet = true; }
     /** @brief Clears the value of CpuSockets_Optional and sets CpuSockets_IsSet to false */
    void ClearCpuSockets() { CpuSockets_Optional = 0; CpuSockets_IsSet = false; }
    /** @brief Returns true if CpuSockets_Optional is set and matches the default value */
    bool IsCpuSocketsDefaultValue() const { return CpuSockets_IsSet && CpuSockets_Optional == 0; }
    /** @brief Sets the value of CpuSockets_Optional to its default and also sets CpuSockets_IsSet to true */
    void SetCpuSocketsToDefault() { CpuSockets_Optional = 0; CpuSockets_IsSet = true; }

    /** @brief The number of CPU cores */
    int32 CpuCores_Optional{  };
    /** @brief true if CpuCores_Optional has been set to a value */
    bool CpuCores_IsSet{ false };
    /** @brief Gets the value of CpuCores_Optional, regardless of it having been set */
    int32& GetCpuCores() { return CpuCores_Optional; }
    /** @brief Gets the value of CpuCores_Optional, regardless of it having been set */
    const int32& GetCpuCores() const { return CpuCores_Optional; }
    /** @brief Gets the value of CpuCores_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetCpuCores(const int32& DefaultValue) const { if (CpuCores_IsSet) return CpuCores_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of CpuCores_Optional and returns true if it has been set, otherwise returns false */
    bool GetCpuCores(int32& OutValue) const { if (CpuCores_IsSet) OutValue = CpuCores_Optional; return CpuCores_IsSet; }
    /** @brief Returns a pointer to CpuCores_Optional, if it has been set, otherwise returns nullptr */
    int32* GetCpuCoresOrNull() { if (CpuCores_IsSet) return &CpuCores_Optional; return nullptr; }
    /** @brief Returns a pointer to CpuCores_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetCpuCoresOrNull() const { if (CpuCores_IsSet) return &CpuCores_Optional; return nullptr; }
    /** @brief Sets the value of CpuCores_Optional and also sets CpuCores_IsSet to true */
    void SetCpuCores(int32 NewValue) { CpuCores_Optional = NewValue; CpuCores_IsSet = true; }
     /** @brief Clears the value of CpuCores_Optional and sets CpuCores_IsSet to false */
    void ClearCpuCores() { CpuCores_Optional = 0; CpuCores_IsSet = false; }
    /** @brief Returns true if CpuCores_Optional is set and matches the default value */
    bool IsCpuCoresDefaultValue() const { return CpuCores_IsSet && CpuCores_Optional == 0; }
    /** @brief Sets the value of CpuCores_Optional to its default and also sets CpuCores_IsSet to true */
    void SetCpuCoresToDefault() { CpuCores_Optional = 0; CpuCores_IsSet = true; }

    /** @brief The number of CPU threads. Will be more than cores if hyperthreading is enabled. */
    int32 CpuThreads_Optional{  };
    /** @brief true if CpuThreads_Optional has been set to a value */
    bool CpuThreads_IsSet{ false };
    /** @brief Gets the value of CpuThreads_Optional, regardless of it having been set */
    int32& GetCpuThreads() { return CpuThreads_Optional; }
    /** @brief Gets the value of CpuThreads_Optional, regardless of it having been set */
    const int32& GetCpuThreads() const { return CpuThreads_Optional; }
    /** @brief Gets the value of CpuThreads_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetCpuThreads(const int32& DefaultValue) const { if (CpuThreads_IsSet) return CpuThreads_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of CpuThreads_Optional and returns true if it has been set, otherwise returns false */
    bool GetCpuThreads(int32& OutValue) const { if (CpuThreads_IsSet) OutValue = CpuThreads_Optional; return CpuThreads_IsSet; }
    /** @brief Returns a pointer to CpuThreads_Optional, if it has been set, otherwise returns nullptr */
    int32* GetCpuThreadsOrNull() { if (CpuThreads_IsSet) return &CpuThreads_Optional; return nullptr; }
    /** @brief Returns a pointer to CpuThreads_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetCpuThreadsOrNull() const { if (CpuThreads_IsSet) return &CpuThreads_Optional; return nullptr; }
    /** @brief Sets the value of CpuThreads_Optional and also sets CpuThreads_IsSet to true */
    void SetCpuThreads(int32 NewValue) { CpuThreads_Optional = NewValue; CpuThreads_IsSet = true; }
     /** @brief Clears the value of CpuThreads_Optional and sets CpuThreads_IsSet to false */
    void ClearCpuThreads() { CpuThreads_Optional = 0; CpuThreads_IsSet = false; }
    /** @brief Returns true if CpuThreads_Optional is set and matches the default value */
    bool IsCpuThreadsDefaultValue() const { return CpuThreads_IsSet && CpuThreads_Optional == 0; }
    /** @brief Sets the value of CpuThreads_Optional to its default and also sets CpuThreads_IsSet to true */
    void SetCpuThreadsToDefault() { CpuThreads_Optional = 0; CpuThreads_IsSet = true; }

    /** @brief The amount of memory in gigabytes */
    int32 MemorySizeGigabytes_Optional{  };
    /** @brief true if MemorySizeGigabytes_Optional has been set to a value */
    bool MemorySizeGigabytes_IsSet{ false };
    /** @brief Gets the value of MemorySizeGigabytes_Optional, regardless of it having been set */
    int32& GetMemorySizeGigabytes() { return MemorySizeGigabytes_Optional; }
    /** @brief Gets the value of MemorySizeGigabytes_Optional, regardless of it having been set */
    const int32& GetMemorySizeGigabytes() const { return MemorySizeGigabytes_Optional; }
    /** @brief Gets the value of MemorySizeGigabytes_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetMemorySizeGigabytes(const int32& DefaultValue) const { if (MemorySizeGigabytes_IsSet) return MemorySizeGigabytes_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of MemorySizeGigabytes_Optional and returns true if it has been set, otherwise returns false */
    bool GetMemorySizeGigabytes(int32& OutValue) const { if (MemorySizeGigabytes_IsSet) OutValue = MemorySizeGigabytes_Optional; return MemorySizeGigabytes_IsSet; }
    /** @brief Returns a pointer to MemorySizeGigabytes_Optional, if it has been set, otherwise returns nullptr */
    int32* GetMemorySizeGigabytesOrNull() { if (MemorySizeGigabytes_IsSet) return &MemorySizeGigabytes_Optional; return nullptr; }
    /** @brief Returns a pointer to MemorySizeGigabytes_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetMemorySizeGigabytesOrNull() const { if (MemorySizeGigabytes_IsSet) return &MemorySizeGigabytes_Optional; return nullptr; }
    /** @brief Sets the value of MemorySizeGigabytes_Optional and also sets MemorySizeGigabytes_IsSet to true */
    void SetMemorySizeGigabytes(int32 NewValue) { MemorySizeGigabytes_Optional = NewValue; MemorySizeGigabytes_IsSet = true; }
     /** @brief Clears the value of MemorySizeGigabytes_Optional and sets MemorySizeGigabytes_IsSet to false */
    void ClearMemorySizeGigabytes() { MemorySizeGigabytes_Optional = 0; MemorySizeGigabytes_IsSet = false; }
    /** @brief Returns true if MemorySizeGigabytes_Optional is set and matches the default value */
    bool IsMemorySizeGigabytesDefaultValue() const { return MemorySizeGigabytes_IsSet && MemorySizeGigabytes_Optional == 0; }
    /** @brief Sets the value of MemorySizeGigabytes_Optional to its default and also sets MemorySizeGigabytes_IsSet to true */
    void SetMemorySizeGigabytesToDefault() { MemorySizeGigabytes_Optional = 0; MemorySizeGigabytes_IsSet = true; }

    /** @brief The type of memory. e.g. DDR4 */
    FString MemoryType_Optional{  };
    /** @brief true if MemoryType_Optional has been set to a value */
    bool MemoryType_IsSet{ false };
    /** @brief Gets the value of MemoryType_Optional, regardless of it having been set */
    FString& GetMemoryType() { return MemoryType_Optional; }
    /** @brief Gets the value of MemoryType_Optional, regardless of it having been set */
    const FString& GetMemoryType() const { return MemoryType_Optional; }
    /** @brief Gets the value of MemoryType_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetMemoryType(const FString& DefaultValue) const { if (MemoryType_IsSet) return MemoryType_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of MemoryType_Optional and returns true if it has been set, otherwise returns false */
    bool GetMemoryType(FString& OutValue) const { if (MemoryType_IsSet) OutValue = MemoryType_Optional; return MemoryType_IsSet; }
    /** @brief Returns a pointer to MemoryType_Optional, if it has been set, otherwise returns nullptr */
    FString* GetMemoryTypeOrNull() { if (MemoryType_IsSet) return &MemoryType_Optional; return nullptr; }
    /** @brief Returns a pointer to MemoryType_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetMemoryTypeOrNull() const { if (MemoryType_IsSet) return &MemoryType_Optional; return nullptr; }
    /** @brief Sets the value of MemoryType_Optional and also sets MemoryType_IsSet to true */
    void SetMemoryType(FString NewValue) { MemoryType_Optional = NewValue; MemoryType_IsSet = true; }
     /** @brief Clears the value of MemoryType_Optional and sets MemoryType_IsSet to false */
    void ClearMemoryType() { MemoryType_IsSet = false; }

    /** @brief The speed rating of the memory in MHz */
    int32 MemorySpeedRating_Optional{  };
    /** @brief true if MemorySpeedRating_Optional has been set to a value */
    bool MemorySpeedRating_IsSet{ false };
    /** @brief Gets the value of MemorySpeedRating_Optional, regardless of it having been set */
    int32& GetMemorySpeedRating() { return MemorySpeedRating_Optional; }
    /** @brief Gets the value of MemorySpeedRating_Optional, regardless of it having been set */
    const int32& GetMemorySpeedRating() const { return MemorySpeedRating_Optional; }
    /** @brief Gets the value of MemorySpeedRating_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetMemorySpeedRating(const int32& DefaultValue) const { if (MemorySpeedRating_IsSet) return MemorySpeedRating_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of MemorySpeedRating_Optional and returns true if it has been set, otherwise returns false */
    bool GetMemorySpeedRating(int32& OutValue) const { if (MemorySpeedRating_IsSet) OutValue = MemorySpeedRating_Optional; return MemorySpeedRating_IsSet; }
    /** @brief Returns a pointer to MemorySpeedRating_Optional, if it has been set, otherwise returns nullptr */
    int32* GetMemorySpeedRatingOrNull() { if (MemorySpeedRating_IsSet) return &MemorySpeedRating_Optional; return nullptr; }
    /** @brief Returns a pointer to MemorySpeedRating_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetMemorySpeedRatingOrNull() const { if (MemorySpeedRating_IsSet) return &MemorySpeedRating_Optional; return nullptr; }
    /** @brief Sets the value of MemorySpeedRating_Optional and also sets MemorySpeedRating_IsSet to true */
    void SetMemorySpeedRating(int32 NewValue) { MemorySpeedRating_Optional = NewValue; MemorySpeedRating_IsSet = true; }
     /** @brief Clears the value of MemorySpeedRating_Optional and sets MemorySpeedRating_IsSet to false */
    void ClearMemorySpeedRating() { MemorySpeedRating_Optional = 0; MemorySpeedRating_IsSet = false; }
    /** @brief Returns true if MemorySpeedRating_Optional is set and matches the default value */
    bool IsMemorySpeedRatingDefaultValue() const { return MemorySpeedRating_IsSet && MemorySpeedRating_Optional == 0; }
    /** @brief Sets the value of MemorySpeedRating_Optional to its default and also sets MemorySpeedRating_IsSet to true */
    void SetMemorySpeedRatingToDefault() { MemorySpeedRating_Optional = 0; MemorySpeedRating_IsSet = true; }

    /** @brief The memory timings. e.g. 15-15-15-36 */
    FString MemoryTimings_Optional{  };
    /** @brief true if MemoryTimings_Optional has been set to a value */
    bool MemoryTimings_IsSet{ false };
    /** @brief Gets the value of MemoryTimings_Optional, regardless of it having been set */
    FString& GetMemoryTimings() { return MemoryTimings_Optional; }
    /** @brief Gets the value of MemoryTimings_Optional, regardless of it having been set */
    const FString& GetMemoryTimings() const { return MemoryTimings_Optional; }
    /** @brief Gets the value of MemoryTimings_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetMemoryTimings(const FString& DefaultValue) const { if (MemoryTimings_IsSet) return MemoryTimings_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of MemoryTimings_Optional and returns true if it has been set, otherwise returns false */
    bool GetMemoryTimings(FString& OutValue) const { if (MemoryTimings_IsSet) OutValue = MemoryTimings_Optional; return MemoryTimings_IsSet; }
    /** @brief Returns a pointer to MemoryTimings_Optional, if it has been set, otherwise returns nullptr */
    FString* GetMemoryTimingsOrNull() { if (MemoryTimings_IsSet) return &MemoryTimings_Optional; return nullptr; }
    /** @brief Returns a pointer to MemoryTimings_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetMemoryTimingsOrNull() const { if (MemoryTimings_IsSet) return &MemoryTimings_Optional; return nullptr; }
    /** @brief Sets the value of MemoryTimings_Optional and also sets MemoryTimings_IsSet to true */
    void SetMemoryTimings(FString NewValue) { MemoryTimings_Optional = NewValue; MemoryTimings_IsSet = true; }
     /** @brief Clears the value of MemoryTimings_Optional and sets MemoryTimings_IsSet to false */
    void ClearMemoryTimings() { MemoryTimings_IsSet = false; }

    /** @brief The type of disk. e.g. SSD */
    FString DiskType_Optional{  };
    /** @brief true if DiskType_Optional has been set to a value */
    bool DiskType_IsSet{ false };
    /** @brief Gets the value of DiskType_Optional, regardless of it having been set */
    FString& GetDiskType() { return DiskType_Optional; }
    /** @brief Gets the value of DiskType_Optional, regardless of it having been set */
    const FString& GetDiskType() const { return DiskType_Optional; }
    /** @brief Gets the value of DiskType_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetDiskType(const FString& DefaultValue) const { if (DiskType_IsSet) return DiskType_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of DiskType_Optional and returns true if it has been set, otherwise returns false */
    bool GetDiskType(FString& OutValue) const { if (DiskType_IsSet) OutValue = DiskType_Optional; return DiskType_IsSet; }
    /** @brief Returns a pointer to DiskType_Optional, if it has been set, otherwise returns nullptr */
    FString* GetDiskTypeOrNull() { if (DiskType_IsSet) return &DiskType_Optional; return nullptr; }
    /** @brief Returns a pointer to DiskType_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetDiskTypeOrNull() const { if (DiskType_IsSet) return &DiskType_Optional; return nullptr; }
    /** @brief Sets the value of DiskType_Optional and also sets DiskType_IsSet to true */
    void SetDiskType(FString NewValue) { DiskType_Optional = NewValue; DiskType_IsSet = true; }
     /** @brief Clears the value of DiskType_Optional and sets DiskType_IsSet to false */
    void ClearDiskType() { DiskType_IsSet = false; }

    /** @brief The size of the disk in gigabytes */
    int32 DiskSizeGigabytes_Optional{  };
    /** @brief true if DiskSizeGigabytes_Optional has been set to a value */
    bool DiskSizeGigabytes_IsSet{ false };
    /** @brief Gets the value of DiskSizeGigabytes_Optional, regardless of it having been set */
    int32& GetDiskSizeGigabytes() { return DiskSizeGigabytes_Optional; }
    /** @brief Gets the value of DiskSizeGigabytes_Optional, regardless of it having been set */
    const int32& GetDiskSizeGigabytes() const { return DiskSizeGigabytes_Optional; }
    /** @brief Gets the value of DiskSizeGigabytes_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetDiskSizeGigabytes(const int32& DefaultValue) const { if (DiskSizeGigabytes_IsSet) return DiskSizeGigabytes_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of DiskSizeGigabytes_Optional and returns true if it has been set, otherwise returns false */
    bool GetDiskSizeGigabytes(int32& OutValue) const { if (DiskSizeGigabytes_IsSet) OutValue = DiskSizeGigabytes_Optional; return DiskSizeGigabytes_IsSet; }
    /** @brief Returns a pointer to DiskSizeGigabytes_Optional, if it has been set, otherwise returns nullptr */
    int32* GetDiskSizeGigabytesOrNull() { if (DiskSizeGigabytes_IsSet) return &DiskSizeGigabytes_Optional; return nullptr; }
    /** @brief Returns a pointer to DiskSizeGigabytes_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetDiskSizeGigabytesOrNull() const { if (DiskSizeGigabytes_IsSet) return &DiskSizeGigabytes_Optional; return nullptr; }
    /** @brief Sets the value of DiskSizeGigabytes_Optional and also sets DiskSizeGigabytes_IsSet to true */
    void SetDiskSizeGigabytes(int32 NewValue) { DiskSizeGigabytes_Optional = NewValue; DiskSizeGigabytes_IsSet = true; }
     /** @brief Clears the value of DiskSizeGigabytes_Optional and sets DiskSizeGigabytes_IsSet to false */
    void ClearDiskSizeGigabytes() { DiskSizeGigabytes_Optional = 0; DiskSizeGigabytes_IsSet = false; }
    /** @brief Returns true if DiskSizeGigabytes_Optional is set and matches the default value */
    bool IsDiskSizeGigabytesDefaultValue() const { return DiskSizeGigabytes_IsSet && DiskSizeGigabytes_Optional == 0; }
    /** @brief Sets the value of DiskSizeGigabytes_Optional to its default and also sets DiskSizeGigabytes_IsSet to true */
    void SetDiskSizeGigabytesToDefault() { DiskSizeGigabytes_Optional = 0; DiskSizeGigabytes_IsSet = true; }

    /** @brief The sequential read speed of the disk */
    FString DiskSequentialRead_Optional{  };
    /** @brief true if DiskSequentialRead_Optional has been set to a value */
    bool DiskSequentialRead_IsSet{ false };
    /** @brief Gets the value of DiskSequentialRead_Optional, regardless of it having been set */
    FString& GetDiskSequentialRead() { return DiskSequentialRead_Optional; }
    /** @brief Gets the value of DiskSequentialRead_Optional, regardless of it having been set */
    const FString& GetDiskSequentialRead() const { return DiskSequentialRead_Optional; }
    /** @brief Gets the value of DiskSequentialRead_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetDiskSequentialRead(const FString& DefaultValue) const { if (DiskSequentialRead_IsSet) return DiskSequentialRead_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of DiskSequentialRead_Optional and returns true if it has been set, otherwise returns false */
    bool GetDiskSequentialRead(FString& OutValue) const { if (DiskSequentialRead_IsSet) OutValue = DiskSequentialRead_Optional; return DiskSequentialRead_IsSet; }
    /** @brief Returns a pointer to DiskSequentialRead_Optional, if it has been set, otherwise returns nullptr */
    FString* GetDiskSequentialReadOrNull() { if (DiskSequentialRead_IsSet) return &DiskSequentialRead_Optional; return nullptr; }
    /** @brief Returns a pointer to DiskSequentialRead_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetDiskSequentialReadOrNull() const { if (DiskSequentialRead_IsSet) return &DiskSequentialRead_Optional; return nullptr; }
    /** @brief Sets the value of DiskSequentialRead_Optional and also sets DiskSequentialRead_IsSet to true */
    void SetDiskSequentialRead(FString NewValue) { DiskSequentialRead_Optional = NewValue; DiskSequentialRead_IsSet = true; }
     /** @brief Clears the value of DiskSequentialRead_Optional and sets DiskSequentialRead_IsSet to false */
    void ClearDiskSequentialRead() { DiskSequentialRead_IsSet = false; }

    /** @brief The sequential write speed of the disk */
    FString DiskSequentialWrite_Optional{  };
    /** @brief true if DiskSequentialWrite_Optional has been set to a value */
    bool DiskSequentialWrite_IsSet{ false };
    /** @brief Gets the value of DiskSequentialWrite_Optional, regardless of it having been set */
    FString& GetDiskSequentialWrite() { return DiskSequentialWrite_Optional; }
    /** @brief Gets the value of DiskSequentialWrite_Optional, regardless of it having been set */
    const FString& GetDiskSequentialWrite() const { return DiskSequentialWrite_Optional; }
    /** @brief Gets the value of DiskSequentialWrite_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetDiskSequentialWrite(const FString& DefaultValue) const { if (DiskSequentialWrite_IsSet) return DiskSequentialWrite_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of DiskSequentialWrite_Optional and returns true if it has been set, otherwise returns false */
    bool GetDiskSequentialWrite(FString& OutValue) const { if (DiskSequentialWrite_IsSet) OutValue = DiskSequentialWrite_Optional; return DiskSequentialWrite_IsSet; }
    /** @brief Returns a pointer to DiskSequentialWrite_Optional, if it has been set, otherwise returns nullptr */
    FString* GetDiskSequentialWriteOrNull() { if (DiskSequentialWrite_IsSet) return &DiskSequentialWrite_Optional; return nullptr; }
    /** @brief Returns a pointer to DiskSequentialWrite_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetDiskSequentialWriteOrNull() const { if (DiskSequentialWrite_IsSet) return &DiskSequentialWrite_Optional; return nullptr; }
    /** @brief Sets the value of DiskSequentialWrite_Optional and also sets DiskSequentialWrite_IsSet to true */
    void SetDiskSequentialWrite(FString NewValue) { DiskSequentialWrite_Optional = NewValue; DiskSequentialWrite_IsSet = true; }
     /** @brief Clears the value of DiskSequentialWrite_Optional and sets DiskSequentialWrite_IsSet to false */
    void ClearDiskSequentialWrite() { DiskSequentialWrite_IsSet = false; }

    /** @brief The random read speed of the disk */
    FString DiskRandomRead_Optional{  };
    /** @brief true if DiskRandomRead_Optional has been set to a value */
    bool DiskRandomRead_IsSet{ false };
    /** @brief Gets the value of DiskRandomRead_Optional, regardless of it having been set */
    FString& GetDiskRandomRead() { return DiskRandomRead_Optional; }
    /** @brief Gets the value of DiskRandomRead_Optional, regardless of it having been set */
    const FString& GetDiskRandomRead() const { return DiskRandomRead_Optional; }
    /** @brief Gets the value of DiskRandomRead_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetDiskRandomRead(const FString& DefaultValue) const { if (DiskRandomRead_IsSet) return DiskRandomRead_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of DiskRandomRead_Optional and returns true if it has been set, otherwise returns false */
    bool GetDiskRandomRead(FString& OutValue) const { if (DiskRandomRead_IsSet) OutValue = DiskRandomRead_Optional; return DiskRandomRead_IsSet; }
    /** @brief Returns a pointer to DiskRandomRead_Optional, if it has been set, otherwise returns nullptr */
    FString* GetDiskRandomReadOrNull() { if (DiskRandomRead_IsSet) return &DiskRandomRead_Optional; return nullptr; }
    /** @brief Returns a pointer to DiskRandomRead_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetDiskRandomReadOrNull() const { if (DiskRandomRead_IsSet) return &DiskRandomRead_Optional; return nullptr; }
    /** @brief Sets the value of DiskRandomRead_Optional and also sets DiskRandomRead_IsSet to true */
    void SetDiskRandomRead(FString NewValue) { DiskRandomRead_Optional = NewValue; DiskRandomRead_IsSet = true; }
     /** @brief Clears the value of DiskRandomRead_Optional and sets DiskRandomRead_IsSet to false */
    void ClearDiskRandomRead() { DiskRandomRead_IsSet = false; }

    /** @brief The random write speed of the disk */
    FString DiskRandomWrite_Optional{  };
    /** @brief true if DiskRandomWrite_Optional has been set to a value */
    bool DiskRandomWrite_IsSet{ false };
    /** @brief Gets the value of DiskRandomWrite_Optional, regardless of it having been set */
    FString& GetDiskRandomWrite() { return DiskRandomWrite_Optional; }
    /** @brief Gets the value of DiskRandomWrite_Optional, regardless of it having been set */
    const FString& GetDiskRandomWrite() const { return DiskRandomWrite_Optional; }
    /** @brief Gets the value of DiskRandomWrite_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetDiskRandomWrite(const FString& DefaultValue) const { if (DiskRandomWrite_IsSet) return DiskRandomWrite_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of DiskRandomWrite_Optional and returns true if it has been set, otherwise returns false */
    bool GetDiskRandomWrite(FString& OutValue) const { if (DiskRandomWrite_IsSet) OutValue = DiskRandomWrite_Optional; return DiskRandomWrite_IsSet; }
    /** @brief Returns a pointer to DiskRandomWrite_Optional, if it has been set, otherwise returns nullptr */
    FString* GetDiskRandomWriteOrNull() { if (DiskRandomWrite_IsSet) return &DiskRandomWrite_Optional; return nullptr; }
    /** @brief Returns a pointer to DiskRandomWrite_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetDiskRandomWriteOrNull() const { if (DiskRandomWrite_IsSet) return &DiskRandomWrite_Optional; return nullptr; }
    /** @brief Sets the value of DiskRandomWrite_Optional and also sets DiskRandomWrite_IsSet to true */
    void SetDiskRandomWrite(FString NewValue) { DiskRandomWrite_Optional = NewValue; DiskRandomWrite_IsSet = true; }
     /** @brief Clears the value of DiskRandomWrite_Optional and sets DiskRandomWrite_IsSet to false */
    void ClearDiskRandomWrite() { DiskRandomWrite_IsSet = false; }

    /** @brief The number of IOPS the disk can handle */
    int32 DiskIops_Optional{  };
    /** @brief true if DiskIops_Optional has been set to a value */
    bool DiskIops_IsSet{ false };
    /** @brief Gets the value of DiskIops_Optional, regardless of it having been set */
    int32& GetDiskIops() { return DiskIops_Optional; }
    /** @brief Gets the value of DiskIops_Optional, regardless of it having been set */
    const int32& GetDiskIops() const { return DiskIops_Optional; }
    /** @brief Gets the value of DiskIops_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetDiskIops(const int32& DefaultValue) const { if (DiskIops_IsSet) return DiskIops_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of DiskIops_Optional and returns true if it has been set, otherwise returns false */
    bool GetDiskIops(int32& OutValue) const { if (DiskIops_IsSet) OutValue = DiskIops_Optional; return DiskIops_IsSet; }
    /** @brief Returns a pointer to DiskIops_Optional, if it has been set, otherwise returns nullptr */
    int32* GetDiskIopsOrNull() { if (DiskIops_IsSet) return &DiskIops_Optional; return nullptr; }
    /** @brief Returns a pointer to DiskIops_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetDiskIopsOrNull() const { if (DiskIops_IsSet) return &DiskIops_Optional; return nullptr; }
    /** @brief Sets the value of DiskIops_Optional and also sets DiskIops_IsSet to true */
    void SetDiskIops(int32 NewValue) { DiskIops_Optional = NewValue; DiskIops_IsSet = true; }
     /** @brief Clears the value of DiskIops_Optional and sets DiskIops_IsSet to false */
    void ClearDiskIops() { DiskIops_Optional = 0; DiskIops_IsSet = false; }
    /** @brief Returns true if DiskIops_Optional is set and matches the default value */
    bool IsDiskIopsDefaultValue() const { return DiskIops_IsSet && DiskIops_Optional == 0; }
    /** @brief Sets the value of DiskIops_Optional to its default and also sets DiskIops_IsSet to true */
    void SetDiskIopsToDefault() { DiskIops_Optional = 0; DiskIops_IsSet = true; }

    /** @brief The latency of the disk in milliseconds */
    int32 DiskLatencyMs_Optional{  };
    /** @brief true if DiskLatencyMs_Optional has been set to a value */
    bool DiskLatencyMs_IsSet{ false };
    /** @brief Gets the value of DiskLatencyMs_Optional, regardless of it having been set */
    int32& GetDiskLatencyMs() { return DiskLatencyMs_Optional; }
    /** @brief Gets the value of DiskLatencyMs_Optional, regardless of it having been set */
    const int32& GetDiskLatencyMs() const { return DiskLatencyMs_Optional; }
    /** @brief Gets the value of DiskLatencyMs_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetDiskLatencyMs(const int32& DefaultValue) const { if (DiskLatencyMs_IsSet) return DiskLatencyMs_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of DiskLatencyMs_Optional and returns true if it has been set, otherwise returns false */
    bool GetDiskLatencyMs(int32& OutValue) const { if (DiskLatencyMs_IsSet) OutValue = DiskLatencyMs_Optional; return DiskLatencyMs_IsSet; }
    /** @brief Returns a pointer to DiskLatencyMs_Optional, if it has been set, otherwise returns nullptr */
    int32* GetDiskLatencyMsOrNull() { if (DiskLatencyMs_IsSet) return &DiskLatencyMs_Optional; return nullptr; }
    /** @brief Returns a pointer to DiskLatencyMs_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetDiskLatencyMsOrNull() const { if (DiskLatencyMs_IsSet) return &DiskLatencyMs_Optional; return nullptr; }
    /** @brief Sets the value of DiskLatencyMs_Optional and also sets DiskLatencyMs_IsSet to true */
    void SetDiskLatencyMs(int32 NewValue) { DiskLatencyMs_Optional = NewValue; DiskLatencyMs_IsSet = true; }
     /** @brief Clears the value of DiskLatencyMs_Optional and sets DiskLatencyMs_IsSet to false */
    void ClearDiskLatencyMs() { DiskLatencyMs_Optional = 0; DiskLatencyMs_IsSet = false; }
    /** @brief Returns true if DiskLatencyMs_Optional is set and matches the default value */
    bool IsDiskLatencyMsDefaultValue() const { return DiskLatencyMs_IsSet && DiskLatencyMs_Optional == 0; }
    /** @brief Sets the value of DiskLatencyMs_Optional to its default and also sets DiskLatencyMs_IsSet to true */
    void SetDiskLatencyMsToDefault() { DiskLatencyMs_Optional = 0; DiskLatencyMs_IsSet = true; }

    /** @brief The network speed in gigabits per second */
    int32 NetworkGbps_Optional{  };
    /** @brief true if NetworkGbps_Optional has been set to a value */
    bool NetworkGbps_IsSet{ false };
    /** @brief Gets the value of NetworkGbps_Optional, regardless of it having been set */
    int32& GetNetworkGbps() { return NetworkGbps_Optional; }
    /** @brief Gets the value of NetworkGbps_Optional, regardless of it having been set */
    const int32& GetNetworkGbps() const { return NetworkGbps_Optional; }
    /** @brief Gets the value of NetworkGbps_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetNetworkGbps(const int32& DefaultValue) const { if (NetworkGbps_IsSet) return NetworkGbps_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of NetworkGbps_Optional and returns true if it has been set, otherwise returns false */
    bool GetNetworkGbps(int32& OutValue) const { if (NetworkGbps_IsSet) OutValue = NetworkGbps_Optional; return NetworkGbps_IsSet; }
    /** @brief Returns a pointer to NetworkGbps_Optional, if it has been set, otherwise returns nullptr */
    int32* GetNetworkGbpsOrNull() { if (NetworkGbps_IsSet) return &NetworkGbps_Optional; return nullptr; }
    /** @brief Returns a pointer to NetworkGbps_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetNetworkGbpsOrNull() const { if (NetworkGbps_IsSet) return &NetworkGbps_Optional; return nullptr; }
    /** @brief Sets the value of NetworkGbps_Optional and also sets NetworkGbps_IsSet to true */
    void SetNetworkGbps(int32 NewValue) { NetworkGbps_Optional = NewValue; NetworkGbps_IsSet = true; }
     /** @brief Clears the value of NetworkGbps_Optional and sets NetworkGbps_IsSet to false */
    void ClearNetworkGbps() { NetworkGbps_Optional = 0; NetworkGbps_IsSet = false; }
    /** @brief Returns true if NetworkGbps_Optional is set and matches the default value */
    bool IsNetworkGbpsDefaultValue() const { return NetworkGbps_IsSet && NetworkGbps_Optional == 0; }
    /** @brief Sets the value of NetworkGbps_Optional to its default and also sets NetworkGbps_IsSet to true */
    void SetNetworkGbpsToDefault() { NetworkGbps_Optional = 0; NetworkGbps_IsSet = true; }

    /** @brief The type of GPU. e.g. NVIDIA Tesla V100 */
    FString GpuType_Optional{  };
    /** @brief true if GpuType_Optional has been set to a value */
    bool GpuType_IsSet{ false };
    /** @brief Gets the value of GpuType_Optional, regardless of it having been set */
    FString& GetGpuType() { return GpuType_Optional; }
    /** @brief Gets the value of GpuType_Optional, regardless of it having been set */
    const FString& GetGpuType() const { return GpuType_Optional; }
    /** @brief Gets the value of GpuType_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetGpuType(const FString& DefaultValue) const { if (GpuType_IsSet) return GpuType_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of GpuType_Optional and returns true if it has been set, otherwise returns false */
    bool GetGpuType(FString& OutValue) const { if (GpuType_IsSet) OutValue = GpuType_Optional; return GpuType_IsSet; }
    /** @brief Returns a pointer to GpuType_Optional, if it has been set, otherwise returns nullptr */
    FString* GetGpuTypeOrNull() { if (GpuType_IsSet) return &GpuType_Optional; return nullptr; }
    /** @brief Returns a pointer to GpuType_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetGpuTypeOrNull() const { if (GpuType_IsSet) return &GpuType_Optional; return nullptr; }
    /** @brief Sets the value of GpuType_Optional and also sets GpuType_IsSet to true */
    void SetGpuType(FString NewValue) { GpuType_Optional = NewValue; GpuType_IsSet = true; }
     /** @brief Clears the value of GpuType_Optional and sets GpuType_IsSet to false */
    void ClearGpuType() { GpuType_IsSet = false; }

    /** @brief The number of GPUs */
    int32 GpuCount_Optional{  };
    /** @brief true if GpuCount_Optional has been set to a value */
    bool GpuCount_IsSet{ false };
    /** @brief Gets the value of GpuCount_Optional, regardless of it having been set */
    int32& GetGpuCount() { return GpuCount_Optional; }
    /** @brief Gets the value of GpuCount_Optional, regardless of it having been set */
    const int32& GetGpuCount() const { return GpuCount_Optional; }
    /** @brief Gets the value of GpuCount_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetGpuCount(const int32& DefaultValue) const { if (GpuCount_IsSet) return GpuCount_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of GpuCount_Optional and returns true if it has been set, otherwise returns false */
    bool GetGpuCount(int32& OutValue) const { if (GpuCount_IsSet) OutValue = GpuCount_Optional; return GpuCount_IsSet; }
    /** @brief Returns a pointer to GpuCount_Optional, if it has been set, otherwise returns nullptr */
    int32* GetGpuCountOrNull() { if (GpuCount_IsSet) return &GpuCount_Optional; return nullptr; }
    /** @brief Returns a pointer to GpuCount_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetGpuCountOrNull() const { if (GpuCount_IsSet) return &GpuCount_Optional; return nullptr; }
    /** @brief Sets the value of GpuCount_Optional and also sets GpuCount_IsSet to true */
    void SetGpuCount(int32 NewValue) { GpuCount_Optional = NewValue; GpuCount_IsSet = true; }
     /** @brief Clears the value of GpuCount_Optional and sets GpuCount_IsSet to false */
    void ClearGpuCount() { GpuCount_Optional = 0; GpuCount_IsSet = false; }
    /** @brief Returns true if GpuCount_Optional is set and matches the default value */
    bool IsGpuCountDefaultValue() const { return GpuCount_IsSet && GpuCount_Optional == 0; }
    /** @brief Sets the value of GpuCount_Optional to its default and also sets GpuCount_IsSet to true */
    void SetGpuCountToDefault() { GpuCount_Optional = 0; GpuCount_IsSet = true; }

    /** @brief The amount of GPU memory in gigabytes. Should be the lowest available memory if there are multiple GPUs. */
    int32 GpuMemoryGigabytes_Optional{  };
    /** @brief true if GpuMemoryGigabytes_Optional has been set to a value */
    bool GpuMemoryGigabytes_IsSet{ false };
    /** @brief Gets the value of GpuMemoryGigabytes_Optional, regardless of it having been set */
    int32& GetGpuMemoryGigabytes() { return GpuMemoryGigabytes_Optional; }
    /** @brief Gets the value of GpuMemoryGigabytes_Optional, regardless of it having been set */
    const int32& GetGpuMemoryGigabytes() const { return GpuMemoryGigabytes_Optional; }
    /** @brief Gets the value of GpuMemoryGigabytes_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetGpuMemoryGigabytes(const int32& DefaultValue) const { if (GpuMemoryGigabytes_IsSet) return GpuMemoryGigabytes_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of GpuMemoryGigabytes_Optional and returns true if it has been set, otherwise returns false */
    bool GetGpuMemoryGigabytes(int32& OutValue) const { if (GpuMemoryGigabytes_IsSet) OutValue = GpuMemoryGigabytes_Optional; return GpuMemoryGigabytes_IsSet; }
    /** @brief Returns a pointer to GpuMemoryGigabytes_Optional, if it has been set, otherwise returns nullptr */
    int32* GetGpuMemoryGigabytesOrNull() { if (GpuMemoryGigabytes_IsSet) return &GpuMemoryGigabytes_Optional; return nullptr; }
    /** @brief Returns a pointer to GpuMemoryGigabytes_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetGpuMemoryGigabytesOrNull() const { if (GpuMemoryGigabytes_IsSet) return &GpuMemoryGigabytes_Optional; return nullptr; }
    /** @brief Sets the value of GpuMemoryGigabytes_Optional and also sets GpuMemoryGigabytes_IsSet to true */
    void SetGpuMemoryGigabytes(int32 NewValue) { GpuMemoryGigabytes_Optional = NewValue; GpuMemoryGigabytes_IsSet = true; }
     /** @brief Clears the value of GpuMemoryGigabytes_Optional and sets GpuMemoryGigabytes_IsSet to false */
    void ClearGpuMemoryGigabytes() { GpuMemoryGigabytes_Optional = 0; GpuMemoryGigabytes_IsSet = false; }
    /** @brief Returns true if GpuMemoryGigabytes_Optional is set and matches the default value */
    bool IsGpuMemoryGigabytesDefaultValue() const { return GpuMemoryGigabytes_IsSet && GpuMemoryGigabytes_Optional == 0; }
    /** @brief Sets the value of GpuMemoryGigabytes_Optional to its default and also sets GpuMemoryGigabytes_IsSet to true */
    void SetGpuMemoryGigabytesToDefault() { GpuMemoryGigabytes_Optional = 0; GpuMemoryGigabytes_IsSet = true; }

    FGuid DatacenterProviderId_Optional{  };
    /** @brief true if DatacenterProviderId_Optional has been set to a value */
    bool DatacenterProviderId_IsSet{ false };
    /** @brief Gets the value of DatacenterProviderId_Optional, regardless of it having been set */
    FGuid& GetDatacenterProviderId() { return DatacenterProviderId_Optional; }
    /** @brief Gets the value of DatacenterProviderId_Optional, regardless of it having been set */
    const FGuid& GetDatacenterProviderId() const { return DatacenterProviderId_Optional; }
    /** @brief Gets the value of DatacenterProviderId_Optional, if it has been set, otherwise it returns DefaultValue */
    const FGuid& GetDatacenterProviderId(const FGuid& DefaultValue) const { if (DatacenterProviderId_IsSet) return DatacenterProviderId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of DatacenterProviderId_Optional and returns true if it has been set, otherwise returns false */
    bool GetDatacenterProviderId(FGuid& OutValue) const { if (DatacenterProviderId_IsSet) OutValue = DatacenterProviderId_Optional; return DatacenterProviderId_IsSet; }
    /** @brief Returns a pointer to DatacenterProviderId_Optional, if it has been set, otherwise returns nullptr */
    FGuid* GetDatacenterProviderIdOrNull() { if (DatacenterProviderId_IsSet) return &DatacenterProviderId_Optional; return nullptr; }
    /** @brief Returns a pointer to DatacenterProviderId_Optional, if it has been set, otherwise returns nullptr */
    const FGuid* GetDatacenterProviderIdOrNull() const { if (DatacenterProviderId_IsSet) return &DatacenterProviderId_Optional; return nullptr; }
    /** @brief Sets the value of DatacenterProviderId_Optional and also sets DatacenterProviderId_IsSet to true */
    void SetDatacenterProviderId(FGuid NewValue) { DatacenterProviderId_Optional = NewValue; DatacenterProviderId_IsSet = true; }
     /** @brief Clears the value of DatacenterProviderId_Optional and sets DatacenterProviderId_IsSet to false */
    void ClearDatacenterProviderId() { DatacenterProviderId_IsSet = false; }
};

/** @} */
