// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereDeveloperAPIBaseModel.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevXpLevelThresholdRequest.h"
#include "DevCreateXpRequest.generated.h"

/** @defgroup RHAPI_DevCreateXpRequest RallyHere API Model DevCreateXpRequest
 *  @{
 */

/**
 * @brief A request to create XP.
 */
USTRUCT(BlueprintType)
struct RALLYHEREDEVELOPERAPI_API FRHAPI_DevCreateXpRequest : public FRHAPI_DevModel
{
    GENERATED_BODY()

    /**
    * @brief Fills this object with data from the passed in JSON
    *
    * @param [in] JsonValue Data from the API call.
    *
    * @return true if parsing of the JSON data was successful.
    */
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

    /**
    * @brief Writes the data from this object into the specified JSON Writer stream
    *
    * @param [in] Writer JSON Writer stream to push .
    */
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /** @brief Custom data associated with the resource */
    TMap<FString, FString> CustomData_Optional{  };
    /** @brief true if CustomData_Optional has been set to a value */
    bool CustomData_IsSet{ false };
    /** @brief Gets the value of CustomData_Optional, regardless of it having been set */
    TMap<FString, FString>& GetCustomData() { return CustomData_Optional; }
    /** @brief Gets the value of CustomData_Optional, regardless of it having been set */
    const TMap<FString, FString>& GetCustomData() const { return CustomData_Optional; }
    /** @brief Gets the value of CustomData_Optional, if it has been set, otherwise it returns DefaultValue */
    const TMap<FString, FString>& GetCustomData(const TMap<FString, FString>& DefaultValue) const { if (CustomData_IsSet) return CustomData_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of CustomData_Optional and returns true if it has been set, otherwise returns false */
    bool GetCustomData(TMap<FString, FString>& OutValue) const { if (CustomData_IsSet) OutValue = CustomData_Optional; return CustomData_IsSet; }
    /** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
    TMap<FString, FString>* GetCustomDataOrNull() { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
    /** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
    const TMap<FString, FString>* GetCustomDataOrNull() const { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
    /** @brief Sets the value of CustomData_Optional and also sets CustomData_IsSet to true */
    void SetCustomData(TMap<FString, FString> NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true; }
     /** @brief Clears the value of CustomData_Optional and sets CustomData_IsSet to false */
    void ClearCustomData() { CustomData_IsSet = false; }

    /** @brief Name of the resource */
    FString Name_Optional{  };
    /** @brief true if Name_Optional has been set to a value */
    bool Name_IsSet{ false };
    /** @brief Gets the value of Name_Optional, regardless of it having been set */
    FString& GetName() { return Name_Optional; }
    /** @brief Gets the value of Name_Optional, regardless of it having been set */
    const FString& GetName() const { return Name_Optional; }
    /** @brief Gets the value of Name_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetName(const FString& DefaultValue) const { if (Name_IsSet) return Name_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Name_Optional and returns true if it has been set, otherwise returns false */
    bool GetName(FString& OutValue) const { if (Name_IsSet) OutValue = Name_Optional; return Name_IsSet; }
    /** @brief Returns a pointer to Name_Optional, if it has been set, otherwise returns nullptr */
    FString* GetNameOrNull() { if (Name_IsSet) return &Name_Optional; return nullptr; }
    /** @brief Returns a pointer to Name_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetNameOrNull() const { if (Name_IsSet) return &Name_Optional; return nullptr; }
    /** @brief Sets the value of Name_Optional and also sets Name_IsSet to true */
    void SetName(FString NewValue) { Name_Optional = NewValue; Name_IsSet = true; }
     /** @brief Clears the value of Name_Optional and sets Name_IsSet to false */
    void ClearName() { Name_IsSet = false; }

    /** @brief Description of the resource */
    FString Description_Optional{  };
    /** @brief true if Description_Optional has been set to a value */
    bool Description_IsSet{ false };
    /** @brief Gets the value of Description_Optional, regardless of it having been set */
    FString& GetDescription() { return Description_Optional; }
    /** @brief Gets the value of Description_Optional, regardless of it having been set */
    const FString& GetDescription() const { return Description_Optional; }
    /** @brief Gets the value of Description_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetDescription(const FString& DefaultValue) const { if (Description_IsSet) return Description_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Description_Optional and returns true if it has been set, otherwise returns false */
    bool GetDescription(FString& OutValue) const { if (Description_IsSet) OutValue = Description_Optional; return Description_IsSet; }
    /** @brief Returns a pointer to Description_Optional, if it has been set, otherwise returns nullptr */
    FString* GetDescriptionOrNull() { if (Description_IsSet) return &Description_Optional; return nullptr; }
    /** @brief Returns a pointer to Description_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetDescriptionOrNull() const { if (Description_IsSet) return &Description_Optional; return nullptr; }
    /** @brief Sets the value of Description_Optional and also sets Description_IsSet to true */
    void SetDescription(FString NewValue) { Description_Optional = NewValue; Description_IsSet = true; }
     /** @brief Clears the value of Description_Optional and sets Description_IsSet to false */
    void ClearDescription() { Description_IsSet = false; }

    /** @brief The XP Thresholds. */
    TArray<FRHAPI_DevXpLevelThresholdRequest> XpThresholds_Optional{  };
    /** @brief true if XpThresholds_Optional has been set to a value */
    bool XpThresholds_IsSet{ false };
    /** @brief Gets the value of XpThresholds_Optional, regardless of it having been set */
    TArray<FRHAPI_DevXpLevelThresholdRequest>& GetXpThresholds() { return XpThresholds_Optional; }
    /** @brief Gets the value of XpThresholds_Optional, regardless of it having been set */
    const TArray<FRHAPI_DevXpLevelThresholdRequest>& GetXpThresholds() const { return XpThresholds_Optional; }
    /** @brief Gets the value of XpThresholds_Optional, if it has been set, otherwise it returns DefaultValue */
    const TArray<FRHAPI_DevXpLevelThresholdRequest>& GetXpThresholds(const TArray<FRHAPI_DevXpLevelThresholdRequest>& DefaultValue) const { if (XpThresholds_IsSet) return XpThresholds_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of XpThresholds_Optional and returns true if it has been set, otherwise returns false */
    bool GetXpThresholds(TArray<FRHAPI_DevXpLevelThresholdRequest>& OutValue) const { if (XpThresholds_IsSet) OutValue = XpThresholds_Optional; return XpThresholds_IsSet; }
    /** @brief Returns a pointer to XpThresholds_Optional, if it has been set, otherwise returns nullptr */
    TArray<FRHAPI_DevXpLevelThresholdRequest>* GetXpThresholdsOrNull() { if (XpThresholds_IsSet) return &XpThresholds_Optional; return nullptr; }
    /** @brief Returns a pointer to XpThresholds_Optional, if it has been set, otherwise returns nullptr */
    const TArray<FRHAPI_DevXpLevelThresholdRequest>* GetXpThresholdsOrNull() const { if (XpThresholds_IsSet) return &XpThresholds_Optional; return nullptr; }
    /** @brief Sets the value of XpThresholds_Optional and also sets XpThresholds_IsSet to true */
    void SetXpThresholds(TArray<FRHAPI_DevXpLevelThresholdRequest> NewValue) { XpThresholds_Optional = NewValue; XpThresholds_IsSet = true; }
     /** @brief Clears the value of XpThresholds_Optional and sets XpThresholds_IsSet to false */
    void ClearXpThresholds() { XpThresholds_IsSet = false; }

    /** @brief The legacy ID of the XP. */
    int32 LegacyXpId_Optional{  };
    /** @brief true if LegacyXpId_Optional has been set to a value */
    bool LegacyXpId_IsSet{ false };
    /** @brief Gets the value of LegacyXpId_Optional, regardless of it having been set */
    int32& GetLegacyXpId() { return LegacyXpId_Optional; }
    /** @brief Gets the value of LegacyXpId_Optional, regardless of it having been set */
    const int32& GetLegacyXpId() const { return LegacyXpId_Optional; }
    /** @brief Gets the value of LegacyXpId_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetLegacyXpId(const int32& DefaultValue) const { if (LegacyXpId_IsSet) return LegacyXpId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of LegacyXpId_Optional and returns true if it has been set, otherwise returns false */
    bool GetLegacyXpId(int32& OutValue) const { if (LegacyXpId_IsSet) OutValue = LegacyXpId_Optional; return LegacyXpId_IsSet; }
    /** @brief Returns a pointer to LegacyXpId_Optional, if it has been set, otherwise returns nullptr */
    int32* GetLegacyXpIdOrNull() { if (LegacyXpId_IsSet) return &LegacyXpId_Optional; return nullptr; }
    /** @brief Returns a pointer to LegacyXpId_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetLegacyXpIdOrNull() const { if (LegacyXpId_IsSet) return &LegacyXpId_Optional; return nullptr; }
    /** @brief Sets the value of LegacyXpId_Optional and also sets LegacyXpId_IsSet to true */
    void SetLegacyXpId(int32 NewValue) { LegacyXpId_Optional = NewValue; LegacyXpId_IsSet = true; }
     /** @brief Clears the value of LegacyXpId_Optional and sets LegacyXpId_IsSet to false */
    void ClearLegacyXpId() { LegacyXpId_Optional = 0; LegacyXpId_IsSet = false; }
    /** @brief Returns true if LegacyXpId_Optional is set and matches the default value */
    bool IsLegacyXpIdDefaultValue() const { return LegacyXpId_IsSet && LegacyXpId_Optional == 0; }
    /** @brief Sets the value of LegacyXpId_Optional to its default and also sets LegacyXpId_IsSet to true */
    void SetLegacyXpIdToDefault() { LegacyXpId_Optional = 0; LegacyXpId_IsSet = true; }
};

/** @} */
