// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereDeveloperAPIBaseModel.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevSimpleProductAssignmentUpdate.generated.h"

/** @defgroup RHAPI_DevSimpleProductAssignmentUpdate RallyHere API Model DevSimpleProductAssignmentUpdate
 *  @{
 */

/**
 * @brief This is a minimal assignment type that represents how we currently handle assignments, but should be improved upon in the future.
 */
USTRUCT(BlueprintType)
struct RALLYHEREDEVELOPERAPI_API FRHAPI_DevSimpleProductAssignmentUpdate : public FRHAPI_DevModel
{
    GENERATED_BODY()

    /**
    * @brief Fills this object with data from the passed in JSON
    *
    * @param [in] JsonValue Data from the API call.
    *
    * @return true if parsing of the JSON data was successful.
    */
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

    /**
    * @brief Writes the data from this object into the specified JSON Writer stream
    *
    * @param [in] Writer JSON Writer stream to push .
    */
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /** @brief The name of the product that will be used directly by the deployment system. e.g., paladins, roco */
    FString Name_Optional{  };
    /** @brief true if Name_Optional has been set to a value */
    bool Name_IsSet{ false };
    /** @brief Gets the value of Name_Optional, regardless of it having been set */
    FString& GetName() { return Name_Optional; }
    /** @brief Gets the value of Name_Optional, regardless of it having been set */
    const FString& GetName() const { return Name_Optional; }
    /** @brief Gets the value of Name_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetName(const FString& DefaultValue) const { if (Name_IsSet) return Name_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Name_Optional and returns true if it has been set, otherwise returns false */
    bool GetName(FString& OutValue) const { if (Name_IsSet) OutValue = Name_Optional; return Name_IsSet; }
    /** @brief Returns a pointer to Name_Optional, if it has been set, otherwise returns nullptr */
    FString* GetNameOrNull() { if (Name_IsSet) return &Name_Optional; return nullptr; }
    /** @brief Returns a pointer to Name_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetNameOrNull() const { if (Name_IsSet) return &Name_Optional; return nullptr; }
    /** @brief Sets the value of Name_Optional and also sets Name_IsSet to true */
    void SetName(FString NewValue) { Name_Optional = NewValue; Name_IsSet = true; }
     /** @brief Clears the value of Name_Optional and sets Name_IsSet to false */
    void ClearName() { Name_IsSet = false; }

    /** @brief The number of instances of the product that will be used directly by the deployment system. */
    int32 Count_Optional{  };
    /** @brief true if Count_Optional has been set to a value */
    bool Count_IsSet{ false };
    /** @brief Gets the value of Count_Optional, regardless of it having been set */
    int32& GetCount() { return Count_Optional; }
    /** @brief Gets the value of Count_Optional, regardless of it having been set */
    const int32& GetCount() const { return Count_Optional; }
    /** @brief Gets the value of Count_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetCount(const int32& DefaultValue) const { if (Count_IsSet) return Count_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Count_Optional and returns true if it has been set, otherwise returns false */
    bool GetCount(int32& OutValue) const { if (Count_IsSet) OutValue = Count_Optional; return Count_IsSet; }
    /** @brief Returns a pointer to Count_Optional, if it has been set, otherwise returns nullptr */
    int32* GetCountOrNull() { if (Count_IsSet) return &Count_Optional; return nullptr; }
    /** @brief Returns a pointer to Count_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetCountOrNull() const { if (Count_IsSet) return &Count_Optional; return nullptr; }
    /** @brief Sets the value of Count_Optional and also sets Count_IsSet to true */
    void SetCount(int32 NewValue) { Count_Optional = NewValue; Count_IsSet = true; }
     /** @brief Clears the value of Count_Optional and sets Count_IsSet to false */
    void ClearCount() { Count_Optional = 0; Count_IsSet = false; }
    /** @brief Returns true if Count_Optional is set and matches the default value */
    bool IsCountDefaultValue() const { return Count_IsSet && Count_Optional == 0; }
    /** @brief Sets the value of Count_Optional to its default and also sets Count_IsSet to true */
    void SetCountToDefault() { Count_Optional = 0; Count_IsSet = true; }

    /** @brief The ID of the host this assignment is associated with */
    FGuid HostId_Optional{  };
    /** @brief true if HostId_Optional has been set to a value */
    bool HostId_IsSet{ false };
    /** @brief Gets the value of HostId_Optional, regardless of it having been set */
    FGuid& GetHostId() { return HostId_Optional; }
    /** @brief Gets the value of HostId_Optional, regardless of it having been set */
    const FGuid& GetHostId() const { return HostId_Optional; }
    /** @brief Gets the value of HostId_Optional, if it has been set, otherwise it returns DefaultValue */
    const FGuid& GetHostId(const FGuid& DefaultValue) const { if (HostId_IsSet) return HostId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of HostId_Optional and returns true if it has been set, otherwise returns false */
    bool GetHostId(FGuid& OutValue) const { if (HostId_IsSet) OutValue = HostId_Optional; return HostId_IsSet; }
    /** @brief Returns a pointer to HostId_Optional, if it has been set, otherwise returns nullptr */
    FGuid* GetHostIdOrNull() { if (HostId_IsSet) return &HostId_Optional; return nullptr; }
    /** @brief Returns a pointer to HostId_Optional, if it has been set, otherwise returns nullptr */
    const FGuid* GetHostIdOrNull() const { if (HostId_IsSet) return &HostId_Optional; return nullptr; }
    /** @brief Sets the value of HostId_Optional and also sets HostId_IsSet to true */
    void SetHostId(FGuid NewValue) { HostId_Optional = NewValue; HostId_IsSet = true; }
     /** @brief Clears the value of HostId_Optional and sets HostId_IsSet to false */
    void ClearHostId() { HostId_IsSet = false; }
};

/** @} */
