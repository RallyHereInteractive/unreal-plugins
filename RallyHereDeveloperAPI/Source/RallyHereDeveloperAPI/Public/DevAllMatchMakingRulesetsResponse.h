// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereDeveloperAPIBaseModel.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevMatchMakingRuleset.h"
#include "DevAllMatchMakingRulesetsResponse.generated.h"

/** @defgroup RHAPI_DevAllMatchMakingRulesetsResponse RallyHere API Model DevAllMatchMakingRulesetsResponse
 *  @{
 */

/**
 * @brief 
 */
USTRUCT(BlueprintType)
struct RALLYHEREDEVELOPERAPI_API FRHAPI_DevAllMatchMakingRulesetsResponse : public FRHAPI_DevModel
{
    GENERATED_BODY()

    /**
    * @brief Fills this object with data from the passed in JSON
    *
    * @param [in] JsonValue Data from the API call.
    *
    * @return true if parsing of the JSON data was successful.
    */
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

    /**
    * @brief Writes the data from this object into the specified JSON Writer stream
    *
    * @param [in] Writer JSON Writer stream to push .
    */
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /** @brief Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration */
    FString Cursor{  };
    /** @brief Gets the value of Cursor */
    FString& GetCursor() { return Cursor; }
    /** @brief Gets the value of Cursor */
    const FString& GetCursor() const { return Cursor; }
    /** @brief Sets the value of Cursor */
    void SetCursor(FString NewValue) { Cursor = NewValue;  }

    /** @brief List of MatchMakingRulesets */
    TArray<FRHAPI_DevMatchMakingRuleset> Rulesets_Optional{  };
    /** @brief true if Rulesets_Optional has been set to a value */
    bool Rulesets_IsSet{ false };
    /** @brief Gets the value of Rulesets_Optional, regardless of it having been set */
    TArray<FRHAPI_DevMatchMakingRuleset>& GetRulesets() { return Rulesets_Optional; }
    /** @brief Gets the value of Rulesets_Optional, regardless of it having been set */
    const TArray<FRHAPI_DevMatchMakingRuleset>& GetRulesets() const { return Rulesets_Optional; }
    /** @brief Gets the value of Rulesets_Optional, if it has been set, otherwise it returns DefaultValue */
    const TArray<FRHAPI_DevMatchMakingRuleset>& GetRulesets(const TArray<FRHAPI_DevMatchMakingRuleset>& DefaultValue) const { if (Rulesets_IsSet) return Rulesets_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Rulesets_Optional and returns true if it has been set, otherwise returns false */
    bool GetRulesets(TArray<FRHAPI_DevMatchMakingRuleset>& OutValue) const { if (Rulesets_IsSet) OutValue = Rulesets_Optional; return Rulesets_IsSet; }
    /** @brief Returns a pointer to Rulesets_Optional, if it has been set, otherwise returns nullptr */
    TArray<FRHAPI_DevMatchMakingRuleset>* GetRulesetsOrNull() { if (Rulesets_IsSet) return &Rulesets_Optional; return nullptr; }
    /** @brief Returns a pointer to Rulesets_Optional, if it has been set, otherwise returns nullptr */
    const TArray<FRHAPI_DevMatchMakingRuleset>* GetRulesetsOrNull() const { if (Rulesets_IsSet) return &Rulesets_Optional; return nullptr; }
    /** @brief Sets the value of Rulesets_Optional and also sets Rulesets_IsSet to true */
    void SetRulesets(TArray<FRHAPI_DevMatchMakingRuleset> NewValue) { Rulesets_Optional = NewValue; Rulesets_IsSet = true; }
     /** @brief Clears the value of Rulesets_Optional and sets Rulesets_IsSet to false */
    void ClearRulesets() { Rulesets_IsSet = false; }
};

/** @} */
