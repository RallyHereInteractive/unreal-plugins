// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereDeveloperAPIAuthContext.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevHTTPValidationError.h"
#include "DevHost.h"
#include "DevHostCreate.h"
#include "DevHostLabel.h"
#include "DevHostLabelCreate.h"
#include "DevHostUpdate.h"
#include "DevHostVersionsAndTransactions.h"

namespace RallyHereDeveloperAPI
{
using RallyHereDeveloperAPI::ToStringFormatArg;
using RallyHereDeveloperAPI::WriteJsonValue;
using RallyHereDeveloperAPI::TryGetJsonValue;

struct FRequest_CreateHost;
struct FResponse_CreateHost;
struct FRequest_CreateHostl;
struct FResponse_CreateHostl;
struct FRequest_DeleteHost;
struct FResponse_DeleteHost;
struct FRequest_DeleteHostl;
struct FResponse_DeleteHostl;
struct FRequest_GetAllHosts;
struct FResponse_GetAllHosts;
struct FRequest_GetCost;
struct FResponse_GetCost;
struct FRequest_GetHost;
struct FResponse_GetHost;
struct FRequest_GetHostVersions;
struct FResponse_GetHostVersions;
struct FRequest_UpdateHost;
struct FResponse_UpdateHost;

DECLARE_DELEGATE_OneParam(FDelegate_CreateHost, const FResponse_CreateHost&);
DECLARE_DELEGATE_OneParam(FDelegate_CreateHostl, const FResponse_CreateHostl&);
DECLARE_DELEGATE_OneParam(FDelegate_DeleteHost, const FResponse_DeleteHost&);
DECLARE_DELEGATE_OneParam(FDelegate_DeleteHostl, const FResponse_DeleteHostl&);
DECLARE_DELEGATE_OneParam(FDelegate_GetAllHosts, const FResponse_GetAllHosts&);
DECLARE_DELEGATE_OneParam(FDelegate_GetCost, const FResponse_GetCost&);
DECLARE_DELEGATE_OneParam(FDelegate_GetHost, const FResponse_GetHost&);
DECLARE_DELEGATE_OneParam(FDelegate_GetHostVersions, const FResponse_GetHostVersions&);
DECLARE_DELEGATE_OneParam(FDelegate_UpdateHost, const FResponse_UpdateHost&);

class RALLYHEREDEVELOPERAPI_API FArmadaHostAPI : public FAPI
{
public:
    FArmadaHostAPI();
    virtual ~FArmadaHostAPI();

    FHttpRequestPtr CreateHost(const FRequest_CreateHost& Request, const FDelegate_CreateHost& Delegate = FDelegate_CreateHost(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr CreateHostl(const FRequest_CreateHostl& Request, const FDelegate_CreateHostl& Delegate = FDelegate_CreateHostl(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr DeleteHost(const FRequest_DeleteHost& Request, const FDelegate_DeleteHost& Delegate = FDelegate_DeleteHost(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr DeleteHostl(const FRequest_DeleteHostl& Request, const FDelegate_DeleteHostl& Delegate = FDelegate_DeleteHostl(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr GetAllHosts(const FRequest_GetAllHosts& Request, const FDelegate_GetAllHosts& Delegate = FDelegate_GetAllHosts(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr GetCost(const FRequest_GetCost& Request, const FDelegate_GetCost& Delegate = FDelegate_GetCost(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr GetHost(const FRequest_GetHost& Request, const FDelegate_GetHost& Delegate = FDelegate_GetHost(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr GetHostVersions(const FRequest_GetHostVersions& Request, const FDelegate_GetHostVersions& Delegate = FDelegate_GetHostVersions(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr UpdateHost(const FRequest_UpdateHost& Request, const FDelegate_UpdateHost& Delegate = FDelegate_UpdateHost(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);

private:
    void OnCreateHostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_CreateHost Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnCreateHostlResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_CreateHostl Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnDeleteHostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_DeleteHost Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnDeleteHostlResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_DeleteHostl Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetAllHostsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAllHosts Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetCostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetCost Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetHostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetHost Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetHostVersionsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetHostVersions Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnUpdateHostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdateHost Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};

/* Create Host
 *
 * Create a host
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_CreateHost : public FRequest
{
    FRequest_CreateHost();
    virtual ~FRequest_CreateHost() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FRHAPI_DevHostCreate HostCreate;
    TOptional<FDateTime> TransactionDate;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_CreateHost : public FResponse
{
    FResponse_CreateHost(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_CreateHost() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevHost Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevHost& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_CreateHost
{
    typedef FRequest_CreateHost Request;
    typedef FResponse_CreateHost Response;
    typedef FDelegate_CreateHost Delegate;
    typedef FArmadaHostAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.CreateHost(InRequest, InDelegate, Priority); }
};

/* Create Hostl
 *
 * Create a host label
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_CreateHostl : public FRequest
{
    FRequest_CreateHostl();
    virtual ~FRequest_CreateHostl() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FRHAPI_DevHostLabelCreate HostLabelCreate;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_CreateHostl : public FResponse
{
    FResponse_CreateHostl(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_CreateHostl() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevHostLabel Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevHostLabel& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_CreateHostl
{
    typedef FRequest_CreateHostl Request;
    typedef FResponse_CreateHostl Response;
    typedef FDelegate_CreateHostl Delegate;
    typedef FArmadaHostAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.CreateHostl(InRequest, InDelegate, Priority); }
};

/* Delete Host
 *
 * Delete a host
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_DeleteHost : public FRequest
{
    FRequest_DeleteHost();
    virtual ~FRequest_DeleteHost() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* The host ID */
    FGuid HostId;
    TOptional<FDateTime> TransactionDate;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_DeleteHost : public FResponse
{
    FResponse_DeleteHost(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_DeleteHost() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevJsonValue Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevJsonValue& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_DeleteHost
{
    typedef FRequest_DeleteHost Request;
    typedef FResponse_DeleteHost Response;
    typedef FDelegate_DeleteHost Delegate;
    typedef FArmadaHostAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.DeleteHost(InRequest, InDelegate, Priority); }
};

/* Delete Hostl
 *
 * Delete a host label
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_DeleteHostl : public FRequest
{
    FRequest_DeleteHostl();
    virtual ~FRequest_DeleteHostl() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* The host label ID */
    int32 HostlId = 0;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_DeleteHostl : public FResponse
{
    FResponse_DeleteHostl(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_DeleteHostl() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevJsonValue Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevJsonValue& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_DeleteHostl
{
    typedef FRequest_DeleteHostl Request;
    typedef FResponse_DeleteHostl Response;
    typedef FDelegate_DeleteHostl Delegate;
    typedef FArmadaHostAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.DeleteHostl(InRequest, InDelegate, Priority); }
};

/* Get All Hosts
 *
 * Get all hosts
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_GetAllHosts : public FRequest
{
    FRequest_GetAllHosts();
    virtual ~FRequest_GetAllHosts() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    TOptional<FString> Label;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_GetAllHosts : public FResponse
{
    FResponse_GetAllHosts(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetAllHosts() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    TArray<FRHAPI_DevHost> Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(TArray<FRHAPI_DevHost>& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_GetAllHosts
{
    typedef FRequest_GetAllHosts Request;
    typedef FResponse_GetAllHosts Response;
    typedef FDelegate_GetAllHosts Delegate;
    typedef FArmadaHostAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.GetAllHosts(InRequest, InDelegate, Priority); }
};

/* Get Cost
 *
 * Get the cost of a host over a time range
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_GetCost : public FRequest
{
    FRequest_GetCost();
    virtual ~FRequest_GetCost() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* The host ID */
    FGuid HostId;
    FDateTime Begin;
    FDateTime End;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_GetCost : public FResponse
{
    FResponse_GetCost(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetCost() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevJsonValue Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevJsonValue& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_GetCost
{
    typedef FRequest_GetCost Request;
    typedef FResponse_GetCost Response;
    typedef FDelegate_GetCost Delegate;
    typedef FArmadaHostAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.GetCost(InRequest, InDelegate, Priority); }
};

/* Get Host
 *
 * Get a host
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_GetHost : public FRequest
{
    FRequest_GetHost();
    virtual ~FRequest_GetHost() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* The host ID */
    FGuid HostId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_GetHost : public FResponse
{
    FResponse_GetHost(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetHost() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevHost Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevHost& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_GetHost
{
    typedef FRequest_GetHost Request;
    typedef FResponse_GetHost Response;
    typedef FDelegate_GetHost Delegate;
    typedef FArmadaHostAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.GetHost(InRequest, InDelegate, Priority); }
};

/* Get Host Versions
 *
 * Get all version history for a host
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_GetHostVersions : public FRequest
{
    FRequest_GetHostVersions();
    virtual ~FRequest_GetHostVersions() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* The host ID */
    FGuid HostId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_GetHostVersions : public FResponse
{
    FResponse_GetHostVersions(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetHostVersions() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevHostVersionsAndTransactions Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevHostVersionsAndTransactions& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_GetHostVersions
{
    typedef FRequest_GetHostVersions Request;
    typedef FResponse_GetHostVersions Response;
    typedef FDelegate_GetHostVersions Delegate;
    typedef FArmadaHostAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.GetHostVersions(InRequest, InDelegate, Priority); }
};

/* Update Host
 *
 * Update a host
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_UpdateHost : public FRequest
{
    FRequest_UpdateHost();
    virtual ~FRequest_UpdateHost() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* The host ID */
    FGuid HostId;
    FRHAPI_DevHostUpdate HostUpdate;
    TOptional<FDateTime> TransactionDate;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_UpdateHost : public FResponse
{
    FResponse_UpdateHost(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_UpdateHost() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevHost Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevHost& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_UpdateHost
{
    typedef FRequest_UpdateHost Request;
    typedef FResponse_UpdateHost Response;
    typedef FDelegate_UpdateHost Delegate;
    typedef FArmadaHostAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.UpdateHost(InRequest, InDelegate, Priority); }
};


}
