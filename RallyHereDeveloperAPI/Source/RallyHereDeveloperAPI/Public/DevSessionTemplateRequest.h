// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereDeveloperAPIBaseModel.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevInstanceStartupParams.h"
#include "DevSessionTemplateRequest.generated.h"

/** @defgroup RHAPI_DevSessionTemplateRequest RallyHere API Model DevSessionTemplateRequest
 *  @{
 */

/**
 * @brief
 */
USTRUCT(BlueprintType)
struct RALLYHEREDEVELOPERAPI_API FRHAPI_DevSessionTemplateRequest : public FRHAPI_DevModel
{
    GENERATED_BODY()

    /**
    * @brief Fills this object with data from the passed in JSON
    *
    * @param [in] JsonValue Data from the API call.
    *
    * @return true if parsing of the JSON data was successful.
    */
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

    /**
    * @brief Writes the data from this object into the specified JSON Writer stream
    *
    * @param [in] Writer JSON Writer stream to push .
    */
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /** @brief Unique name for this type of session */
    FString SessionType{  };
    /** @brief Gets the value of SessionType */
    FString& GetSessionType() { return SessionType; }
    /** @brief Gets the value of SessionType */
    const FString& GetSessionType() const { return SessionType; }
    /** @brief Sets the value of SessionType */
    void SetSessionType(FString NewValue) { SessionType = NewValue;  }

    /** @brief The engine name for this session type */
    FString EngineSessionType{  };
    /** @brief Gets the value of EngineSessionType */
    FString& GetEngineSessionType() { return EngineSessionType; }
    /** @brief Gets the value of EngineSessionType */
    const FString& GetEngineSessionType() const { return EngineSessionType; }
    /** @brief Sets the value of EngineSessionType */
    void SetEngineSessionType(FString NewValue) { EngineSessionType = NewValue;  }

    /** @brief If sessions of this type can be entered into the matchmaking system */
    bool CanJoinMatchmaking_Optional{  };
    /** @brief true if CanJoinMatchmaking_Optional has been set to a value */
    bool CanJoinMatchmaking_IsSet{ false };
    /** @brief Gets the value of CanJoinMatchmaking_Optional, regardless of it having been set */
    bool& GetCanJoinMatchmaking() { return CanJoinMatchmaking_Optional; }
    /** @brief Gets the value of CanJoinMatchmaking_Optional, regardless of it having been set */
    const bool& GetCanJoinMatchmaking() const { return CanJoinMatchmaking_Optional; }
    /** @brief Gets the value of CanJoinMatchmaking_Optional, if it has been set, otherwise it returns DefaultValue */
    const bool& GetCanJoinMatchmaking(const bool& DefaultValue) const { if (CanJoinMatchmaking_IsSet) return CanJoinMatchmaking_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of CanJoinMatchmaking_Optional and returns true if it has been set, otherwise returns false */
    bool GetCanJoinMatchmaking(bool& OutValue) const { if (CanJoinMatchmaking_IsSet) OutValue = CanJoinMatchmaking_Optional; return CanJoinMatchmaking_IsSet; }
    /** @brief Returns a pointer to CanJoinMatchmaking_Optional, if it has been set, otherwise returns nullptr */
    bool* GetCanJoinMatchmakingOrNull() { if (CanJoinMatchmaking_IsSet) return &CanJoinMatchmaking_Optional; return nullptr; }
    /** @brief Returns a pointer to CanJoinMatchmaking_Optional, if it has been set, otherwise returns nullptr */
    const bool* GetCanJoinMatchmakingOrNull() const { if (CanJoinMatchmaking_IsSet) return &CanJoinMatchmaking_Optional; return nullptr; }
    /** @brief Sets the value of CanJoinMatchmaking_Optional and also sets CanJoinMatchmaking_IsSet to true */
    void SetCanJoinMatchmaking(bool NewValue) { CanJoinMatchmaking_Optional = NewValue; CanJoinMatchmaking_IsSet = true; }
     /** @brief Clears the value of CanJoinMatchmaking_Optional and sets CanJoinMatchmaking_IsSet to false */
    void ClearCanJoinMatchmaking() { CanJoinMatchmaking_Optional = true; CanJoinMatchmaking_IsSet = false; }
    /** @brief Returns true if CanJoinMatchmaking_Optional is set and matches the default value */
    bool IsCanJoinMatchmakingDefaultValue() const { return CanJoinMatchmaking_IsSet && CanJoinMatchmaking_Optional == true; }
    /** @brief Sets the value of CanJoinMatchmaking_Optional to its default and also sets CanJoinMatchmaking_IsSet to true */
    void SetCanJoinMatchmakingToDefault() { CanJoinMatchmaking_Optional = true; CanJoinMatchmaking_IsSet = true; }

    /** @brief If players can create this session directly */
    bool CanBeCreatedByPlayers_Optional{  };
    /** @brief true if CanBeCreatedByPlayers_Optional has been set to a value */
    bool CanBeCreatedByPlayers_IsSet{ false };
    /** @brief Gets the value of CanBeCreatedByPlayers_Optional, regardless of it having been set */
    bool& GetCanBeCreatedByPlayers() { return CanBeCreatedByPlayers_Optional; }
    /** @brief Gets the value of CanBeCreatedByPlayers_Optional, regardless of it having been set */
    const bool& GetCanBeCreatedByPlayers() const { return CanBeCreatedByPlayers_Optional; }
    /** @brief Gets the value of CanBeCreatedByPlayers_Optional, if it has been set, otherwise it returns DefaultValue */
    const bool& GetCanBeCreatedByPlayers(const bool& DefaultValue) const { if (CanBeCreatedByPlayers_IsSet) return CanBeCreatedByPlayers_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of CanBeCreatedByPlayers_Optional and returns true if it has been set, otherwise returns false */
    bool GetCanBeCreatedByPlayers(bool& OutValue) const { if (CanBeCreatedByPlayers_IsSet) OutValue = CanBeCreatedByPlayers_Optional; return CanBeCreatedByPlayers_IsSet; }
    /** @brief Returns a pointer to CanBeCreatedByPlayers_Optional, if it has been set, otherwise returns nullptr */
    bool* GetCanBeCreatedByPlayersOrNull() { if (CanBeCreatedByPlayers_IsSet) return &CanBeCreatedByPlayers_Optional; return nullptr; }
    /** @brief Returns a pointer to CanBeCreatedByPlayers_Optional, if it has been set, otherwise returns nullptr */
    const bool* GetCanBeCreatedByPlayersOrNull() const { if (CanBeCreatedByPlayers_IsSet) return &CanBeCreatedByPlayers_Optional; return nullptr; }
    /** @brief Sets the value of CanBeCreatedByPlayers_Optional and also sets CanBeCreatedByPlayers_IsSet to true */
    void SetCanBeCreatedByPlayers(bool NewValue) { CanBeCreatedByPlayers_Optional = NewValue; CanBeCreatedByPlayers_IsSet = true; }
     /** @brief Clears the value of CanBeCreatedByPlayers_Optional and sets CanBeCreatedByPlayers_IsSet to false */
    void ClearCanBeCreatedByPlayers() { CanBeCreatedByPlayers_Optional = true; CanBeCreatedByPlayers_IsSet = false; }
    /** @brief Returns true if CanBeCreatedByPlayers_Optional is set and matches the default value */
    bool IsCanBeCreatedByPlayersDefaultValue() const { return CanBeCreatedByPlayers_IsSet && CanBeCreatedByPlayers_Optional == true; }
    /** @brief Sets the value of CanBeCreatedByPlayers_Optional to its default and also sets CanBeCreatedByPlayers_IsSet to true */
    void SetCanBeCreatedByPlayersToDefault() { CanBeCreatedByPlayers_Optional = true; CanBeCreatedByPlayers_IsSet = true; }

    /** @brief If the session should be publicly joinable without invites */
    bool PubliclyJoinable_Optional{  };
    /** @brief true if PubliclyJoinable_Optional has been set to a value */
    bool PubliclyJoinable_IsSet{ false };
    /** @brief Gets the value of PubliclyJoinable_Optional, regardless of it having been set */
    bool& GetPubliclyJoinable() { return PubliclyJoinable_Optional; }
    /** @brief Gets the value of PubliclyJoinable_Optional, regardless of it having been set */
    const bool& GetPubliclyJoinable() const { return PubliclyJoinable_Optional; }
    /** @brief Gets the value of PubliclyJoinable_Optional, if it has been set, otherwise it returns DefaultValue */
    const bool& GetPubliclyJoinable(const bool& DefaultValue) const { if (PubliclyJoinable_IsSet) return PubliclyJoinable_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of PubliclyJoinable_Optional and returns true if it has been set, otherwise returns false */
    bool GetPubliclyJoinable(bool& OutValue) const { if (PubliclyJoinable_IsSet) OutValue = PubliclyJoinable_Optional; return PubliclyJoinable_IsSet; }
    /** @brief Returns a pointer to PubliclyJoinable_Optional, if it has been set, otherwise returns nullptr */
    bool* GetPubliclyJoinableOrNull() { if (PubliclyJoinable_IsSet) return &PubliclyJoinable_Optional; return nullptr; }
    /** @brief Returns a pointer to PubliclyJoinable_Optional, if it has been set, otherwise returns nullptr */
    const bool* GetPubliclyJoinableOrNull() const { if (PubliclyJoinable_IsSet) return &PubliclyJoinable_Optional; return nullptr; }
    /** @brief Sets the value of PubliclyJoinable_Optional and also sets PubliclyJoinable_IsSet to true */
    void SetPubliclyJoinable(bool NewValue) { PubliclyJoinable_Optional = NewValue; PubliclyJoinable_IsSet = true; }
     /** @brief Clears the value of PubliclyJoinable_Optional and sets PubliclyJoinable_IsSet to false */
    void ClearPubliclyJoinable() { PubliclyJoinable_Optional = false; PubliclyJoinable_IsSet = false; }
    /** @brief Returns true if PubliclyJoinable_Optional is set and matches the default value */
    bool IsPubliclyJoinableDefaultValue() const { return PubliclyJoinable_IsSet && PubliclyJoinable_Optional == false; }
    /** @brief Sets the value of PubliclyJoinable_Optional to its default and also sets PubliclyJoinable_IsSet to true */
    void SetPubliclyJoinableToDefault() { PubliclyJoinable_Optional = false; PubliclyJoinable_IsSet = true; }

    /** @brief If the session should be automatically added to the public session browser */
    bool AutoAddToBrowser_Optional{  };
    /** @brief true if AutoAddToBrowser_Optional has been set to a value */
    bool AutoAddToBrowser_IsSet{ false };
    /** @brief Gets the value of AutoAddToBrowser_Optional, regardless of it having been set */
    bool& GetAutoAddToBrowser() { return AutoAddToBrowser_Optional; }
    /** @brief Gets the value of AutoAddToBrowser_Optional, regardless of it having been set */
    const bool& GetAutoAddToBrowser() const { return AutoAddToBrowser_Optional; }
    /** @brief Gets the value of AutoAddToBrowser_Optional, if it has been set, otherwise it returns DefaultValue */
    const bool& GetAutoAddToBrowser(const bool& DefaultValue) const { if (AutoAddToBrowser_IsSet) return AutoAddToBrowser_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of AutoAddToBrowser_Optional and returns true if it has been set, otherwise returns false */
    bool GetAutoAddToBrowser(bool& OutValue) const { if (AutoAddToBrowser_IsSet) OutValue = AutoAddToBrowser_Optional; return AutoAddToBrowser_IsSet; }
    /** @brief Returns a pointer to AutoAddToBrowser_Optional, if it has been set, otherwise returns nullptr */
    bool* GetAutoAddToBrowserOrNull() { if (AutoAddToBrowser_IsSet) return &AutoAddToBrowser_Optional; return nullptr; }
    /** @brief Returns a pointer to AutoAddToBrowser_Optional, if it has been set, otherwise returns nullptr */
    const bool* GetAutoAddToBrowserOrNull() const { if (AutoAddToBrowser_IsSet) return &AutoAddToBrowser_Optional; return nullptr; }
    /** @brief Sets the value of AutoAddToBrowser_Optional and also sets AutoAddToBrowser_IsSet to true */
    void SetAutoAddToBrowser(bool NewValue) { AutoAddToBrowser_Optional = NewValue; AutoAddToBrowser_IsSet = true; }
     /** @brief Clears the value of AutoAddToBrowser_Optional and sets AutoAddToBrowser_IsSet to false */
    void ClearAutoAddToBrowser() { AutoAddToBrowser_Optional = false; AutoAddToBrowser_IsSet = false; }
    /** @brief Returns true if AutoAddToBrowser_Optional is set and matches the default value */
    bool IsAutoAddToBrowserDefaultValue() const { return AutoAddToBrowser_IsSet && AutoAddToBrowser_Optional == false; }
    /** @brief Sets the value of AutoAddToBrowser_Optional to its default and also sets AutoAddToBrowser_IsSet to true */
    void SetAutoAddToBrowserToDefault() { AutoAddToBrowser_Optional = false; AutoAddToBrowser_IsSet = true; }

    /** @brief Parameters added to the session when it is automatically added to the public session browser */
    TMap<FString, FString> AutoBrowserParams_Optional{  };
    /** @brief true if AutoBrowserParams_Optional has been set to a value */
    bool AutoBrowserParams_IsSet{ false };
    /** @brief Gets the value of AutoBrowserParams_Optional, regardless of it having been set */
    TMap<FString, FString>& GetAutoBrowserParams() { return AutoBrowserParams_Optional; }
    /** @brief Gets the value of AutoBrowserParams_Optional, regardless of it having been set */
    const TMap<FString, FString>& GetAutoBrowserParams() const { return AutoBrowserParams_Optional; }
    /** @brief Gets the value of AutoBrowserParams_Optional, if it has been set, otherwise it returns DefaultValue */
    const TMap<FString, FString>& GetAutoBrowserParams(const TMap<FString, FString>& DefaultValue) const { if (AutoBrowserParams_IsSet) return AutoBrowserParams_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of AutoBrowserParams_Optional and returns true if it has been set, otherwise returns false */
    bool GetAutoBrowserParams(TMap<FString, FString>& OutValue) const { if (AutoBrowserParams_IsSet) OutValue = AutoBrowserParams_Optional; return AutoBrowserParams_IsSet; }
    /** @brief Returns a pointer to AutoBrowserParams_Optional, if it has been set, otherwise returns nullptr */
    TMap<FString, FString>* GetAutoBrowserParamsOrNull() { if (AutoBrowserParams_IsSet) return &AutoBrowserParams_Optional; return nullptr; }
    /** @brief Returns a pointer to AutoBrowserParams_Optional, if it has been set, otherwise returns nullptr */
    const TMap<FString, FString>* GetAutoBrowserParamsOrNull() const { if (AutoBrowserParams_IsSet) return &AutoBrowserParams_Optional; return nullptr; }
    /** @brief Sets the value of AutoBrowserParams_Optional and also sets AutoBrowserParams_IsSet to true */
    void SetAutoBrowserParams(TMap<FString, FString> NewValue) { AutoBrowserParams_Optional = NewValue; AutoBrowserParams_IsSet = true; }
     /** @brief Clears the value of AutoBrowserParams_Optional and sets AutoBrowserParams_IsSet to false */
    void ClearAutoBrowserParams() { AutoBrowserParams_IsSet = false; }

    /** @brief Can this session type be added to the public session browser */
    bool CanBeAddedToBrowser_Optional{  };
    /** @brief true if CanBeAddedToBrowser_Optional has been set to a value */
    bool CanBeAddedToBrowser_IsSet{ false };
    /** @brief Gets the value of CanBeAddedToBrowser_Optional, regardless of it having been set */
    bool& GetCanBeAddedToBrowser() { return CanBeAddedToBrowser_Optional; }
    /** @brief Gets the value of CanBeAddedToBrowser_Optional, regardless of it having been set */
    const bool& GetCanBeAddedToBrowser() const { return CanBeAddedToBrowser_Optional; }
    /** @brief Gets the value of CanBeAddedToBrowser_Optional, if it has been set, otherwise it returns DefaultValue */
    const bool& GetCanBeAddedToBrowser(const bool& DefaultValue) const { if (CanBeAddedToBrowser_IsSet) return CanBeAddedToBrowser_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of CanBeAddedToBrowser_Optional and returns true if it has been set, otherwise returns false */
    bool GetCanBeAddedToBrowser(bool& OutValue) const { if (CanBeAddedToBrowser_IsSet) OutValue = CanBeAddedToBrowser_Optional; return CanBeAddedToBrowser_IsSet; }
    /** @brief Returns a pointer to CanBeAddedToBrowser_Optional, if it has been set, otherwise returns nullptr */
    bool* GetCanBeAddedToBrowserOrNull() { if (CanBeAddedToBrowser_IsSet) return &CanBeAddedToBrowser_Optional; return nullptr; }
    /** @brief Returns a pointer to CanBeAddedToBrowser_Optional, if it has been set, otherwise returns nullptr */
    const bool* GetCanBeAddedToBrowserOrNull() const { if (CanBeAddedToBrowser_IsSet) return &CanBeAddedToBrowser_Optional; return nullptr; }
    /** @brief Sets the value of CanBeAddedToBrowser_Optional and also sets CanBeAddedToBrowser_IsSet to true */
    void SetCanBeAddedToBrowser(bool NewValue) { CanBeAddedToBrowser_Optional = NewValue; CanBeAddedToBrowser_IsSet = true; }
     /** @brief Clears the value of CanBeAddedToBrowser_Optional and sets CanBeAddedToBrowser_IsSet to false */
    void ClearCanBeAddedToBrowser() { CanBeAddedToBrowser_Optional = true; CanBeAddedToBrowser_IsSet = false; }
    /** @brief Returns true if CanBeAddedToBrowser_Optional is set and matches the default value */
    bool IsCanBeAddedToBrowserDefaultValue() const { return CanBeAddedToBrowser_IsSet && CanBeAddedToBrowser_Optional == true; }
    /** @brief Sets the value of CanBeAddedToBrowser_Optional to its default and also sets CanBeAddedToBrowser_IsSet to true */
    void SetCanBeAddedToBrowserToDefault() { CanBeAddedToBrowser_Optional = true; CanBeAddedToBrowser_IsSet = true; }

    /** @brief If the session should be kept alive when there are no players actively in it */
    bool KeepAliveOnEmpty_Optional{  };
    /** @brief true if KeepAliveOnEmpty_Optional has been set to a value */
    bool KeepAliveOnEmpty_IsSet{ false };
    /** @brief Gets the value of KeepAliveOnEmpty_Optional, regardless of it having been set */
    bool& GetKeepAliveOnEmpty() { return KeepAliveOnEmpty_Optional; }
    /** @brief Gets the value of KeepAliveOnEmpty_Optional, regardless of it having been set */
    const bool& GetKeepAliveOnEmpty() const { return KeepAliveOnEmpty_Optional; }
    /** @brief Gets the value of KeepAliveOnEmpty_Optional, if it has been set, otherwise it returns DefaultValue */
    const bool& GetKeepAliveOnEmpty(const bool& DefaultValue) const { if (KeepAliveOnEmpty_IsSet) return KeepAliveOnEmpty_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of KeepAliveOnEmpty_Optional and returns true if it has been set, otherwise returns false */
    bool GetKeepAliveOnEmpty(bool& OutValue) const { if (KeepAliveOnEmpty_IsSet) OutValue = KeepAliveOnEmpty_Optional; return KeepAliveOnEmpty_IsSet; }
    /** @brief Returns a pointer to KeepAliveOnEmpty_Optional, if it has been set, otherwise returns nullptr */
    bool* GetKeepAliveOnEmptyOrNull() { if (KeepAliveOnEmpty_IsSet) return &KeepAliveOnEmpty_Optional; return nullptr; }
    /** @brief Returns a pointer to KeepAliveOnEmpty_Optional, if it has been set, otherwise returns nullptr */
    const bool* GetKeepAliveOnEmptyOrNull() const { if (KeepAliveOnEmpty_IsSet) return &KeepAliveOnEmpty_Optional; return nullptr; }
    /** @brief Sets the value of KeepAliveOnEmpty_Optional and also sets KeepAliveOnEmpty_IsSet to true */
    void SetKeepAliveOnEmpty(bool NewValue) { KeepAliveOnEmpty_Optional = NewValue; KeepAliveOnEmpty_IsSet = true; }
     /** @brief Clears the value of KeepAliveOnEmpty_Optional and sets KeepAliveOnEmpty_IsSet to false */
    void ClearKeepAliveOnEmpty() { KeepAliveOnEmpty_Optional = false; KeepAliveOnEmpty_IsSet = false; }
    /** @brief Returns true if KeepAliveOnEmpty_Optional is set and matches the default value */
    bool IsKeepAliveOnEmptyDefaultValue() const { return KeepAliveOnEmpty_IsSet && KeepAliveOnEmpty_Optional == false; }
    /** @brief Sets the value of KeepAliveOnEmpty_Optional to its default and also sets KeepAliveOnEmpty_IsSet to true */
    void SetKeepAliveOnEmptyToDefault() { KeepAliveOnEmpty_Optional = false; KeepAliveOnEmpty_IsSet = true; }

    FRHAPI_DevInstanceStartupParams AutoStartupParams_Optional{  };
    /** @brief true if AutoStartupParams_Optional has been set to a value */
    bool AutoStartupParams_IsSet{ false };
    /** @brief Gets the value of AutoStartupParams_Optional, regardless of it having been set */
    FRHAPI_DevInstanceStartupParams& GetAutoStartupParams() { return AutoStartupParams_Optional; }
    /** @brief Gets the value of AutoStartupParams_Optional, regardless of it having been set */
    const FRHAPI_DevInstanceStartupParams& GetAutoStartupParams() const { return AutoStartupParams_Optional; }
    /** @brief Gets the value of AutoStartupParams_Optional, if it has been set, otherwise it returns DefaultValue */
    const FRHAPI_DevInstanceStartupParams& GetAutoStartupParams(const FRHAPI_DevInstanceStartupParams& DefaultValue) const { if (AutoStartupParams_IsSet) return AutoStartupParams_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of AutoStartupParams_Optional and returns true if it has been set, otherwise returns false */
    bool GetAutoStartupParams(FRHAPI_DevInstanceStartupParams& OutValue) const { if (AutoStartupParams_IsSet) OutValue = AutoStartupParams_Optional; return AutoStartupParams_IsSet; }
    /** @brief Returns a pointer to AutoStartupParams_Optional, if it has been set, otherwise returns nullptr */
    FRHAPI_DevInstanceStartupParams* GetAutoStartupParamsOrNull() { if (AutoStartupParams_IsSet) return &AutoStartupParams_Optional; return nullptr; }
    /** @brief Returns a pointer to AutoStartupParams_Optional, if it has been set, otherwise returns nullptr */
    const FRHAPI_DevInstanceStartupParams* GetAutoStartupParamsOrNull() const { if (AutoStartupParams_IsSet) return &AutoStartupParams_Optional; return nullptr; }
    /** @brief Sets the value of AutoStartupParams_Optional and also sets AutoStartupParams_IsSet to true */
    void SetAutoStartupParams(FRHAPI_DevInstanceStartupParams NewValue) { AutoStartupParams_Optional = NewValue; AutoStartupParams_IsSet = true; }
     /** @brief Clears the value of AutoStartupParams_Optional and sets AutoStartupParams_IsSet to false */
    void ClearAutoStartupParams() { AutoStartupParams_IsSet = false; }

    /** @brief The minimum number of these sessions that should be kept alive at all times */
    int32 MinSessionCount_Optional{  };
    /** @brief true if MinSessionCount_Optional has been set to a value */
    bool MinSessionCount_IsSet{ false };
    /** @brief Gets the value of MinSessionCount_Optional, regardless of it having been set */
    int32& GetMinSessionCount() { return MinSessionCount_Optional; }
    /** @brief Gets the value of MinSessionCount_Optional, regardless of it having been set */
    const int32& GetMinSessionCount() const { return MinSessionCount_Optional; }
    /** @brief Gets the value of MinSessionCount_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetMinSessionCount(const int32& DefaultValue) const { if (MinSessionCount_IsSet) return MinSessionCount_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of MinSessionCount_Optional and returns true if it has been set, otherwise returns false */
    bool GetMinSessionCount(int32& OutValue) const { if (MinSessionCount_IsSet) OutValue = MinSessionCount_Optional; return MinSessionCount_IsSet; }
    /** @brief Returns a pointer to MinSessionCount_Optional, if it has been set, otherwise returns nullptr */
    int32* GetMinSessionCountOrNull() { if (MinSessionCount_IsSet) return &MinSessionCount_Optional; return nullptr; }
    /** @brief Returns a pointer to MinSessionCount_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetMinSessionCountOrNull() const { if (MinSessionCount_IsSet) return &MinSessionCount_Optional; return nullptr; }
    /** @brief Sets the value of MinSessionCount_Optional and also sets MinSessionCount_IsSet to true */
    void SetMinSessionCount(int32 NewValue) { MinSessionCount_Optional = NewValue; MinSessionCount_IsSet = true; }
     /** @brief Clears the value of MinSessionCount_Optional and sets MinSessionCount_IsSet to false */
    void ClearMinSessionCount() { MinSessionCount_Optional = 0; MinSessionCount_IsSet = false; }
    /** @brief Returns true if MinSessionCount_Optional is set and matches the default value */
    bool IsMinSessionCountDefaultValue() const { return MinSessionCount_IsSet && MinSessionCount_Optional == 0; }
    /** @brief Sets the value of MinSessionCount_Optional to its default and also sets MinSessionCount_IsSet to true */
    void SetMinSessionCountToDefault() { MinSessionCount_Optional = 0; MinSessionCount_IsSet = true; }

    /** @brief Default number of teams this session type will have */
    int32 DefaultNumTeams_Optional{  };
    /** @brief true if DefaultNumTeams_Optional has been set to a value */
    bool DefaultNumTeams_IsSet{ false };
    /** @brief Gets the value of DefaultNumTeams_Optional, regardless of it having been set */
    int32& GetDefaultNumTeams() { return DefaultNumTeams_Optional; }
    /** @brief Gets the value of DefaultNumTeams_Optional, regardless of it having been set */
    const int32& GetDefaultNumTeams() const { return DefaultNumTeams_Optional; }
    /** @brief Gets the value of DefaultNumTeams_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetDefaultNumTeams(const int32& DefaultValue) const { if (DefaultNumTeams_IsSet) return DefaultNumTeams_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of DefaultNumTeams_Optional and returns true if it has been set, otherwise returns false */
    bool GetDefaultNumTeams(int32& OutValue) const { if (DefaultNumTeams_IsSet) OutValue = DefaultNumTeams_Optional; return DefaultNumTeams_IsSet; }
    /** @brief Returns a pointer to DefaultNumTeams_Optional, if it has been set, otherwise returns nullptr */
    int32* GetDefaultNumTeamsOrNull() { if (DefaultNumTeams_IsSet) return &DefaultNumTeams_Optional; return nullptr; }
    /** @brief Returns a pointer to DefaultNumTeams_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetDefaultNumTeamsOrNull() const { if (DefaultNumTeams_IsSet) return &DefaultNumTeams_Optional; return nullptr; }
    /** @brief Sets the value of DefaultNumTeams_Optional and also sets DefaultNumTeams_IsSet to true */
    void SetDefaultNumTeams(int32 NewValue) { DefaultNumTeams_Optional = NewValue; DefaultNumTeams_IsSet = true; }
     /** @brief Clears the value of DefaultNumTeams_Optional and sets DefaultNumTeams_IsSet to false */
    void ClearDefaultNumTeams() { DefaultNumTeams_Optional = 2; DefaultNumTeams_IsSet = false; }
    /** @brief Returns true if DefaultNumTeams_Optional is set and matches the default value */
    bool IsDefaultNumTeamsDefaultValue() const { return DefaultNumTeams_IsSet && DefaultNumTeams_Optional == 2; }
    /** @brief Sets the value of DefaultNumTeams_Optional to its default and also sets DefaultNumTeams_IsSet to true */
    void SetDefaultNumTeamsToDefault() { DefaultNumTeams_Optional = 2; DefaultNumTeams_IsSet = true; }

    /** @brief Default number of players allowed per team */
    int32 DefaultPlayersPerTeam_Optional{  };
    /** @brief true if DefaultPlayersPerTeam_Optional has been set to a value */
    bool DefaultPlayersPerTeam_IsSet{ false };
    /** @brief Gets the value of DefaultPlayersPerTeam_Optional, regardless of it having been set */
    int32& GetDefaultPlayersPerTeam() { return DefaultPlayersPerTeam_Optional; }
    /** @brief Gets the value of DefaultPlayersPerTeam_Optional, regardless of it having been set */
    const int32& GetDefaultPlayersPerTeam() const { return DefaultPlayersPerTeam_Optional; }
    /** @brief Gets the value of DefaultPlayersPerTeam_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetDefaultPlayersPerTeam(const int32& DefaultValue) const { if (DefaultPlayersPerTeam_IsSet) return DefaultPlayersPerTeam_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of DefaultPlayersPerTeam_Optional and returns true if it has been set, otherwise returns false */
    bool GetDefaultPlayersPerTeam(int32& OutValue) const { if (DefaultPlayersPerTeam_IsSet) OutValue = DefaultPlayersPerTeam_Optional; return DefaultPlayersPerTeam_IsSet; }
    /** @brief Returns a pointer to DefaultPlayersPerTeam_Optional, if it has been set, otherwise returns nullptr */
    int32* GetDefaultPlayersPerTeamOrNull() { if (DefaultPlayersPerTeam_IsSet) return &DefaultPlayersPerTeam_Optional; return nullptr; }
    /** @brief Returns a pointer to DefaultPlayersPerTeam_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetDefaultPlayersPerTeamOrNull() const { if (DefaultPlayersPerTeam_IsSet) return &DefaultPlayersPerTeam_Optional; return nullptr; }
    /** @brief Sets the value of DefaultPlayersPerTeam_Optional and also sets DefaultPlayersPerTeam_IsSet to true */
    void SetDefaultPlayersPerTeam(int32 NewValue) { DefaultPlayersPerTeam_Optional = NewValue; DefaultPlayersPerTeam_IsSet = true; }
     /** @brief Clears the value of DefaultPlayersPerTeam_Optional and sets DefaultPlayersPerTeam_IsSet to false */
    void ClearDefaultPlayersPerTeam() { DefaultPlayersPerTeam_Optional = 4; DefaultPlayersPerTeam_IsSet = false; }
    /** @brief Returns true if DefaultPlayersPerTeam_Optional is set and matches the default value */
    bool IsDefaultPlayersPerTeamDefaultValue() const { return DefaultPlayersPerTeam_IsSet && DefaultPlayersPerTeam_Optional == 4; }
    /** @brief Sets the value of DefaultPlayersPerTeam_Optional to its default and also sets DefaultPlayersPerTeam_IsSet to true */
    void SetDefaultPlayersPerTeamToDefault() { DefaultPlayersPerTeam_Optional = 4; DefaultPlayersPerTeam_IsSet = true; }

    /** @brief Can a player change their own team without elevated permissions */
    bool CanPlayerChangeTeam_Optional{  };
    /** @brief true if CanPlayerChangeTeam_Optional has been set to a value */
    bool CanPlayerChangeTeam_IsSet{ false };
    /** @brief Gets the value of CanPlayerChangeTeam_Optional, regardless of it having been set */
    bool& GetCanPlayerChangeTeam() { return CanPlayerChangeTeam_Optional; }
    /** @brief Gets the value of CanPlayerChangeTeam_Optional, regardless of it having been set */
    const bool& GetCanPlayerChangeTeam() const { return CanPlayerChangeTeam_Optional; }
    /** @brief Gets the value of CanPlayerChangeTeam_Optional, if it has been set, otherwise it returns DefaultValue */
    const bool& GetCanPlayerChangeTeam(const bool& DefaultValue) const { if (CanPlayerChangeTeam_IsSet) return CanPlayerChangeTeam_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of CanPlayerChangeTeam_Optional and returns true if it has been set, otherwise returns false */
    bool GetCanPlayerChangeTeam(bool& OutValue) const { if (CanPlayerChangeTeam_IsSet) OutValue = CanPlayerChangeTeam_Optional; return CanPlayerChangeTeam_IsSet; }
    /** @brief Returns a pointer to CanPlayerChangeTeam_Optional, if it has been set, otherwise returns nullptr */
    bool* GetCanPlayerChangeTeamOrNull() { if (CanPlayerChangeTeam_IsSet) return &CanPlayerChangeTeam_Optional; return nullptr; }
    /** @brief Returns a pointer to CanPlayerChangeTeam_Optional, if it has been set, otherwise returns nullptr */
    const bool* GetCanPlayerChangeTeamOrNull() const { if (CanPlayerChangeTeam_IsSet) return &CanPlayerChangeTeam_Optional; return nullptr; }
    /** @brief Sets the value of CanPlayerChangeTeam_Optional and also sets CanPlayerChangeTeam_IsSet to true */
    void SetCanPlayerChangeTeam(bool NewValue) { CanPlayerChangeTeam_Optional = NewValue; CanPlayerChangeTeam_IsSet = true; }
     /** @brief Clears the value of CanPlayerChangeTeam_Optional and sets CanPlayerChangeTeam_IsSet to false */
    void ClearCanPlayerChangeTeam() { CanPlayerChangeTeam_Optional = true; CanPlayerChangeTeam_IsSet = false; }
    /** @brief Returns true if CanPlayerChangeTeam_Optional is set and matches the default value */
    bool IsCanPlayerChangeTeamDefaultValue() const { return CanPlayerChangeTeam_IsSet && CanPlayerChangeTeam_Optional == true; }
    /** @brief Sets the value of CanPlayerChangeTeam_Optional to its default and also sets CanPlayerChangeTeam_IsSet to true */
    void SetCanPlayerChangeTeamToDefault() { CanPlayerChangeTeam_Optional = true; CanPlayerChangeTeam_IsSet = true; }

    /** @brief Custom passthrough data that will be added to all sessions of this type */
    TMap<FString, FString> CustomData_Optional{  };
    /** @brief true if CustomData_Optional has been set to a value */
    bool CustomData_IsSet{ false };
    /** @brief Gets the value of CustomData_Optional, regardless of it having been set */
    TMap<FString, FString>& GetCustomData() { return CustomData_Optional; }
    /** @brief Gets the value of CustomData_Optional, regardless of it having been set */
    const TMap<FString, FString>& GetCustomData() const { return CustomData_Optional; }
    /** @brief Gets the value of CustomData_Optional, if it has been set, otherwise it returns DefaultValue */
    const TMap<FString, FString>& GetCustomData(const TMap<FString, FString>& DefaultValue) const { if (CustomData_IsSet) return CustomData_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of CustomData_Optional and returns true if it has been set, otherwise returns false */
    bool GetCustomData(TMap<FString, FString>& OutValue) const { if (CustomData_IsSet) OutValue = CustomData_Optional; return CustomData_IsSet; }
    /** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
    TMap<FString, FString>* GetCustomDataOrNull() { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
    /** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
    const TMap<FString, FString>* GetCustomDataOrNull() const { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
    /** @brief Sets the value of CustomData_Optional and also sets CustomData_IsSet to true */
    void SetCustomData(TMap<FString, FString> NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true; }
     /** @brief Clears the value of CustomData_Optional and sets CustomData_IsSet to false */
    void ClearCustomData() { CustomData_IsSet = false; }
};

/** @} */
