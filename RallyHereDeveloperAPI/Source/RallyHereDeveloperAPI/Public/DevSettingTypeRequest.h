// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereDeveloperAPIBaseModel.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevSettingTypeRequest.generated.h"

/** @defgroup RHAPI_DevSettingTypeRequest RallyHere API Model DevSettingTypeRequest
 *  @{
 */

/**
 * @brief This mixin is meant to give a set of common properties to root config models
 */
USTRUCT(BlueprintType)
struct RALLYHEREDEVELOPERAPI_API FRHAPI_DevSettingTypeRequest : public FRHAPI_DevModel
{
    GENERATED_BODY()

    /**
    * @brief Fills this object with data from the passed in JSON
    *
    * @param [in] JsonValue Data from the API call.
    *
    * @return true if parsing of the JSON data was successful.
    */
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

    /**
    * @brief Writes the data from this object into the specified JSON Writer stream
    *
    * @param [in] Writer JSON Writer stream to push .
    */
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /** @brief Name of the resource */
    FString Name_Optional{  };
    /** @brief true if Name_Optional has been set to a value */
    bool Name_IsSet{ false };
    /** @brief Gets the value of Name_Optional, regardless of it having been set */
    FString& GetName() { return Name_Optional; }
    /** @brief Gets the value of Name_Optional, regardless of it having been set */
    const FString& GetName() const { return Name_Optional; }
    /** @brief Gets the value of Name_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetName(const FString& DefaultValue) const { if (Name_IsSet) return Name_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Name_Optional and returns true if it has been set, otherwise returns false */
    bool GetName(FString& OutValue) const { if (Name_IsSet) OutValue = Name_Optional; return Name_IsSet; }
    /** @brief Returns a pointer to Name_Optional, if it has been set, otherwise returns nullptr */
    FString* GetNameOrNull() { if (Name_IsSet) return &Name_Optional; return nullptr; }
    /** @brief Returns a pointer to Name_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetNameOrNull() const { if (Name_IsSet) return &Name_Optional; return nullptr; }
    /** @brief Sets the value of Name_Optional and also sets Name_IsSet to true */
    void SetName(FString NewValue) { Name_Optional = NewValue; Name_IsSet = true; }
     /** @brief Clears the value of Name_Optional and sets Name_IsSet to false */
    void ClearName() { Name_IsSet = false; }

    /** @brief Description of the resource */
    FString Description_Optional{  };
    /** @brief true if Description_Optional has been set to a value */
    bool Description_IsSet{ false };
    /** @brief Gets the value of Description_Optional, regardless of it having been set */
    FString& GetDescription() { return Description_Optional; }
    /** @brief Gets the value of Description_Optional, regardless of it having been set */
    const FString& GetDescription() const { return Description_Optional; }
    /** @brief Gets the value of Description_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetDescription(const FString& DefaultValue) const { if (Description_IsSet) return Description_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Description_Optional and returns true if it has been set, otherwise returns false */
    bool GetDescription(FString& OutValue) const { if (Description_IsSet) OutValue = Description_Optional; return Description_IsSet; }
    /** @brief Returns a pointer to Description_Optional, if it has been set, otherwise returns nullptr */
    FString* GetDescriptionOrNull() { if (Description_IsSet) return &Description_Optional; return nullptr; }
    /** @brief Returns a pointer to Description_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetDescriptionOrNull() const { if (Description_IsSet) return &Description_Optional; return nullptr; }
    /** @brief Sets the value of Description_Optional and also sets Description_IsSet to true */
    void SetDescription(FString NewValue) { Description_Optional = NewValue; Description_IsSet = true; }
     /** @brief Clears the value of Description_Optional and sets Description_IsSet to false */
    void ClearDescription() { Description_IsSet = false; }

    /** @brief Custom data associated with the resource */
    TMap<FString, FString> CustomData_Optional{  };
    /** @brief true if CustomData_Optional has been set to a value */
    bool CustomData_IsSet{ false };
    /** @brief Gets the value of CustomData_Optional, regardless of it having been set */
    TMap<FString, FString>& GetCustomData() { return CustomData_Optional; }
    /** @brief Gets the value of CustomData_Optional, regardless of it having been set */
    const TMap<FString, FString>& GetCustomData() const { return CustomData_Optional; }
    /** @brief Gets the value of CustomData_Optional, if it has been set, otherwise it returns DefaultValue */
    const TMap<FString, FString>& GetCustomData(const TMap<FString, FString>& DefaultValue) const { if (CustomData_IsSet) return CustomData_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of CustomData_Optional and returns true if it has been set, otherwise returns false */
    bool GetCustomData(TMap<FString, FString>& OutValue) const { if (CustomData_IsSet) OutValue = CustomData_Optional; return CustomData_IsSet; }
    /** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
    TMap<FString, FString>* GetCustomDataOrNull() { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
    /** @brief Returns a pointer to CustomData_Optional, if it has been set, otherwise returns nullptr */
    const TMap<FString, FString>* GetCustomDataOrNull() const { if (CustomData_IsSet) return &CustomData_Optional; return nullptr; }
    /** @brief Sets the value of CustomData_Optional and also sets CustomData_IsSet to true */
    void SetCustomData(TMap<FString, FString> NewValue) { CustomData_Optional = NewValue; CustomData_IsSet = true; }
     /** @brief Clears the value of CustomData_Optional and sets CustomData_IsSet to false */
    void ClearCustomData() { CustomData_IsSet = false; }

    /** @brief Unique identifier for this setting type */
    FGuid SettingTypeUniqueId_Optional{  };
    /** @brief true if SettingTypeUniqueId_Optional has been set to a value */
    bool SettingTypeUniqueId_IsSet{ false };
    /** @brief Gets the value of SettingTypeUniqueId_Optional, regardless of it having been set */
    FGuid& GetSettingTypeUniqueId() { return SettingTypeUniqueId_Optional; }
    /** @brief Gets the value of SettingTypeUniqueId_Optional, regardless of it having been set */
    const FGuid& GetSettingTypeUniqueId() const { return SettingTypeUniqueId_Optional; }
    /** @brief Gets the value of SettingTypeUniqueId_Optional, if it has been set, otherwise it returns DefaultValue */
    const FGuid& GetSettingTypeUniqueId(const FGuid& DefaultValue) const { if (SettingTypeUniqueId_IsSet) return SettingTypeUniqueId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of SettingTypeUniqueId_Optional and returns true if it has been set, otherwise returns false */
    bool GetSettingTypeUniqueId(FGuid& OutValue) const { if (SettingTypeUniqueId_IsSet) OutValue = SettingTypeUniqueId_Optional; return SettingTypeUniqueId_IsSet; }
    /** @brief Returns a pointer to SettingTypeUniqueId_Optional, if it has been set, otherwise returns nullptr */
    FGuid* GetSettingTypeUniqueIdOrNull() { if (SettingTypeUniqueId_IsSet) return &SettingTypeUniqueId_Optional; return nullptr; }
    /** @brief Returns a pointer to SettingTypeUniqueId_Optional, if it has been set, otherwise returns nullptr */
    const FGuid* GetSettingTypeUniqueIdOrNull() const { if (SettingTypeUniqueId_IsSet) return &SettingTypeUniqueId_Optional; return nullptr; }
    /** @brief Sets the value of SettingTypeUniqueId_Optional and also sets SettingTypeUniqueId_IsSet to true */
    void SetSettingTypeUniqueId(FGuid NewValue) { SettingTypeUniqueId_Optional = NewValue; SettingTypeUniqueId_IsSet = true; }
     /** @brief Clears the value of SettingTypeUniqueId_Optional and sets SettingTypeUniqueId_IsSet to false */
    void ClearSettingTypeUniqueId() { SettingTypeUniqueId_Optional = FGuid(TEXT("d41780b3-e031-4792-84a4-1afaece9e5dd")); SettingTypeUniqueId_IsSet = false; }
    /** @brief Returns true if SettingTypeUniqueId_Optional is set and matches the default value */
    bool IsSettingTypeUniqueIdDefaultValue() const { return SettingTypeUniqueId_IsSet && SettingTypeUniqueId_Optional == FGuid(TEXT("d41780b3-e031-4792-84a4-1afaece9e5dd")); }
    /** @brief Sets the value of SettingTypeUniqueId_Optional to its default and also sets SettingTypeUniqueId_IsSet to true */
    void SetSettingTypeUniqueIdToDefault() { SettingTypeUniqueId_Optional = FGuid(TEXT("d41780b3-e031-4792-84a4-1afaece9e5dd")); SettingTypeUniqueId_IsSet = true; }

    /** @brief Version of setting type schema */
    int32 Version_Optional{  };
    /** @brief true if Version_Optional has been set to a value */
    bool Version_IsSet{ false };
    /** @brief Gets the value of Version_Optional, regardless of it having been set */
    int32& GetVersion() { return Version_Optional; }
    /** @brief Gets the value of Version_Optional, regardless of it having been set */
    const int32& GetVersion() const { return Version_Optional; }
    /** @brief Gets the value of Version_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetVersion(const int32& DefaultValue) const { if (Version_IsSet) return Version_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Version_Optional and returns true if it has been set, otherwise returns false */
    bool GetVersion(int32& OutValue) const { if (Version_IsSet) OutValue = Version_Optional; return Version_IsSet; }
    /** @brief Returns a pointer to Version_Optional, if it has been set, otherwise returns nullptr */
    int32* GetVersionOrNull() { if (Version_IsSet) return &Version_Optional; return nullptr; }
    /** @brief Returns a pointer to Version_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetVersionOrNull() const { if (Version_IsSet) return &Version_Optional; return nullptr; }
    /** @brief Sets the value of Version_Optional and also sets Version_IsSet to true */
    void SetVersion(int32 NewValue) { Version_Optional = NewValue; Version_IsSet = true; }
     /** @brief Clears the value of Version_Optional and sets Version_IsSet to false */
    void ClearVersion() { Version_Optional = 1; Version_IsSet = false; }
    /** @brief Returns true if Version_Optional is set and matches the default value */
    bool IsVersionDefaultValue() const { return Version_IsSet && Version_Optional == 1; }
    /** @brief Sets the value of Version_Optional to its default and also sets Version_IsSet to true */
    void SetVersionToDefault() { Version_Optional = 1; Version_IsSet = true; }

    /** @brief JSONSchema definition of the setting */
    FRHAPI_DevJsonObject ValueJsonschema_Optional{  };
    /** @brief true if ValueJsonschema_Optional has been set to a value */
    bool ValueJsonschema_IsSet{ false };
    /** @brief Gets the value of ValueJsonschema_Optional, regardless of it having been set */
    FRHAPI_DevJsonObject& GetValueJsonschema() { return ValueJsonschema_Optional; }
    /** @brief Gets the value of ValueJsonschema_Optional, regardless of it having been set */
    const FRHAPI_DevJsonObject& GetValueJsonschema() const { return ValueJsonschema_Optional; }
    /** @brief Gets the value of ValueJsonschema_Optional, if it has been set, otherwise it returns DefaultValue */
    const FRHAPI_DevJsonObject& GetValueJsonschema(const FRHAPI_DevJsonObject& DefaultValue) const { if (ValueJsonschema_IsSet) return ValueJsonschema_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of ValueJsonschema_Optional and returns true if it has been set, otherwise returns false */
    bool GetValueJsonschema(FRHAPI_DevJsonObject& OutValue) const { if (ValueJsonschema_IsSet) OutValue = ValueJsonschema_Optional; return ValueJsonschema_IsSet; }
    /** @brief Returns a pointer to ValueJsonschema_Optional, if it has been set, otherwise returns nullptr */
    FRHAPI_DevJsonObject* GetValueJsonschemaOrNull() { if (ValueJsonschema_IsSet) return &ValueJsonschema_Optional; return nullptr; }
    /** @brief Returns a pointer to ValueJsonschema_Optional, if it has been set, otherwise returns nullptr */
    const FRHAPI_DevJsonObject* GetValueJsonschemaOrNull() const { if (ValueJsonschema_IsSet) return &ValueJsonschema_Optional; return nullptr; }
    /** @brief Sets the value of ValueJsonschema_Optional and also sets ValueJsonschema_IsSet to true */
    void SetValueJsonschema(FRHAPI_DevJsonObject NewValue) { ValueJsonschema_Optional = NewValue; ValueJsonschema_IsSet = true; }
     /** @brief Clears the value of ValueJsonschema_Optional and sets ValueJsonschema_IsSet to false */
    void ClearValueJsonschema() { ValueJsonschema_IsSet = false; }

    /** @brief Whether setting type can be updated */
    bool AllowUpdate_Optional{  };
    /** @brief true if AllowUpdate_Optional has been set to a value */
    bool AllowUpdate_IsSet{ false };
    /** @brief Gets the value of AllowUpdate_Optional, regardless of it having been set */
    bool& GetAllowUpdate() { return AllowUpdate_Optional; }
    /** @brief Gets the value of AllowUpdate_Optional, regardless of it having been set */
    const bool& GetAllowUpdate() const { return AllowUpdate_Optional; }
    /** @brief Gets the value of AllowUpdate_Optional, if it has been set, otherwise it returns DefaultValue */
    const bool& GetAllowUpdate(const bool& DefaultValue) const { if (AllowUpdate_IsSet) return AllowUpdate_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of AllowUpdate_Optional and returns true if it has been set, otherwise returns false */
    bool GetAllowUpdate(bool& OutValue) const { if (AllowUpdate_IsSet) OutValue = AllowUpdate_Optional; return AllowUpdate_IsSet; }
    /** @brief Returns a pointer to AllowUpdate_Optional, if it has been set, otherwise returns nullptr */
    bool* GetAllowUpdateOrNull() { if (AllowUpdate_IsSet) return &AllowUpdate_Optional; return nullptr; }
    /** @brief Returns a pointer to AllowUpdate_Optional, if it has been set, otherwise returns nullptr */
    const bool* GetAllowUpdateOrNull() const { if (AllowUpdate_IsSet) return &AllowUpdate_Optional; return nullptr; }
    /** @brief Sets the value of AllowUpdate_Optional and also sets AllowUpdate_IsSet to true */
    void SetAllowUpdate(bool NewValue) { AllowUpdate_Optional = NewValue; AllowUpdate_IsSet = true; }
     /** @brief Clears the value of AllowUpdate_Optional and sets AllowUpdate_IsSet to false */
    void ClearAllowUpdate() { AllowUpdate_Optional = true; AllowUpdate_IsSet = false; }
    /** @brief Returns true if AllowUpdate_Optional is set and matches the default value */
    bool IsAllowUpdateDefaultValue() const { return AllowUpdate_IsSet && AllowUpdate_Optional == true; }
    /** @brief Sets the value of AllowUpdate_Optional to its default and also sets AllowUpdate_IsSet to true */
    void SetAllowUpdateToDefault() { AllowUpdate_Optional = true; AllowUpdate_IsSet = true; }

    /** @brief Regex that is used to verify keys at assignment time */
    FString KeyRegex_Optional{  };
    /** @brief true if KeyRegex_Optional has been set to a value */
    bool KeyRegex_IsSet{ false };
    /** @brief Gets the value of KeyRegex_Optional, regardless of it having been set */
    FString& GetKeyRegex() { return KeyRegex_Optional; }
    /** @brief Gets the value of KeyRegex_Optional, regardless of it having been set */
    const FString& GetKeyRegex() const { return KeyRegex_Optional; }
    /** @brief Gets the value of KeyRegex_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetKeyRegex(const FString& DefaultValue) const { if (KeyRegex_IsSet) return KeyRegex_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of KeyRegex_Optional and returns true if it has been set, otherwise returns false */
    bool GetKeyRegex(FString& OutValue) const { if (KeyRegex_IsSet) OutValue = KeyRegex_Optional; return KeyRegex_IsSet; }
    /** @brief Returns a pointer to KeyRegex_Optional, if it has been set, otherwise returns nullptr */
    FString* GetKeyRegexOrNull() { if (KeyRegex_IsSet) return &KeyRegex_Optional; return nullptr; }
    /** @brief Returns a pointer to KeyRegex_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetKeyRegexOrNull() const { if (KeyRegex_IsSet) return &KeyRegex_Optional; return nullptr; }
    /** @brief Sets the value of KeyRegex_Optional and also sets KeyRegex_IsSet to true */
    void SetKeyRegex(FString NewValue) { KeyRegex_Optional = NewValue; KeyRegex_IsSet = true; }
     /** @brief Clears the value of KeyRegex_Optional and sets KeyRegex_IsSet to false */
    void ClearKeyRegex() { KeyRegex_Optional = TEXT("^.+$"); KeyRegex_IsSet = false; }
    /** @brief Returns true if KeyRegex_Optional is set and matches the default value */
    bool IsKeyRegexDefaultValue() const { return KeyRegex_IsSet && KeyRegex_Optional == TEXT("^.+$"); }
    /** @brief Sets the value of KeyRegex_Optional to its default and also sets KeyRegex_IsSet to true */
    void SetKeyRegexToDefault() { KeyRegex_Optional = TEXT("^.+$"); KeyRegex_IsSet = true; }

    /** @brief User friendly identifier of setting type */
    FString Type{  };
    /** @brief Gets the value of Type */
    FString& GetType() { return Type; }
    /** @brief Gets the value of Type */
    const FString& GetType() const { return Type; }
    /** @brief Sets the value of Type */
    void SetType(FString NewValue) { Type = NewValue;  }
};

/** @} */
