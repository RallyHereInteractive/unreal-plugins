// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereDeveloperAPIBaseModel.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevPageMeta.generated.h"

/** @defgroup RHAPI_DevPageMeta RallyHere API Model DevPageMeta
 *  @{
 */

/**
 * @brief 
 */
USTRUCT(BlueprintType)
struct RALLYHEREDEVELOPERAPI_API FRHAPI_DevPageMeta : public FRHAPI_DevModel
{
    GENERATED_BODY()

    /**
    * @brief Fills this object with data from the passed in JSON
    *
    * @param [in] JsonValue Data from the API call.
    *
    * @return true if parsing of the JSON data was successful.
    */
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

    /**
    * @brief Writes the data from this object into the specified JSON Writer stream
    *
    * @param [in] Writer JSON Writer stream to push .
    */
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /** @brief Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration */
    FString Cursor{  };
    /** @brief Gets the value of Cursor */
    FString& GetCursor() { return Cursor; }
    /** @brief Gets the value of Cursor */
    const FString& GetCursor() const { return Cursor; }
    /** @brief Sets the value of Cursor */
    void SetCursor(FString NewValue) { Cursor = NewValue;  }

    /** @brief The maximum number of elements to be returned per call */
    int32 PageSize_Optional{  };
    /** @brief true if PageSize_Optional has been set to a value */
    bool PageSize_IsSet{ false };
    /** @brief Gets the value of PageSize_Optional, regardless of it having been set */
    int32& GetPageSize() { return PageSize_Optional; }
    /** @brief Gets the value of PageSize_Optional, regardless of it having been set */
    const int32& GetPageSize() const { return PageSize_Optional; }
    /** @brief Gets the value of PageSize_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetPageSize(const int32& DefaultValue) const { if (PageSize_IsSet) return PageSize_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of PageSize_Optional and returns true if it has been set, otherwise returns false */
    bool GetPageSize(int32& OutValue) const { if (PageSize_IsSet) OutValue = PageSize_Optional; return PageSize_IsSet; }
    /** @brief Returns a pointer to PageSize_Optional, if it has been set, otherwise returns nullptr */
    int32* GetPageSizeOrNull() { if (PageSize_IsSet) return &PageSize_Optional; return nullptr; }
    /** @brief Returns a pointer to PageSize_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetPageSizeOrNull() const { if (PageSize_IsSet) return &PageSize_Optional; return nullptr; }
    /** @brief Sets the value of PageSize_Optional and also sets PageSize_IsSet to true */
    void SetPageSize(int32 NewValue) { PageSize_Optional = NewValue; PageSize_IsSet = true; }
     /** @brief Clears the value of PageSize_Optional and sets PageSize_IsSet to false */
    void ClearPageSize() { PageSize_Optional = 50; PageSize_IsSet = false; }
    /** @brief Returns true if PageSize_Optional is set and matches the default value */
    bool IsPageSizeDefaultValue() const { return PageSize_IsSet && PageSize_Optional == 50; }
    /** @brief Sets the value of PageSize_Optional to its default and also sets PageSize_IsSet to true */
    void SetPageSizeToDefault() { PageSize_Optional = 50; PageSize_IsSet = true; }

    /** @brief The total number of entities. */
    int32 Total_Optional{  };
    /** @brief true if Total_Optional has been set to a value */
    bool Total_IsSet{ false };
    /** @brief Gets the value of Total_Optional, regardless of it having been set */
    int32& GetTotal() { return Total_Optional; }
    /** @brief Gets the value of Total_Optional, regardless of it having been set */
    const int32& GetTotal() const { return Total_Optional; }
    /** @brief Gets the value of Total_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetTotal(const int32& DefaultValue) const { if (Total_IsSet) return Total_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Total_Optional and returns true if it has been set, otherwise returns false */
    bool GetTotal(int32& OutValue) const { if (Total_IsSet) OutValue = Total_Optional; return Total_IsSet; }
    /** @brief Returns a pointer to Total_Optional, if it has been set, otherwise returns nullptr */
    int32* GetTotalOrNull() { if (Total_IsSet) return &Total_Optional; return nullptr; }
    /** @brief Returns a pointer to Total_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetTotalOrNull() const { if (Total_IsSet) return &Total_Optional; return nullptr; }
    /** @brief Sets the value of Total_Optional and also sets Total_IsSet to true */
    void SetTotal(int32 NewValue) { Total_Optional = NewValue; Total_IsSet = true; }
     /** @brief Clears the value of Total_Optional and sets Total_IsSet to false */
    void ClearTotal() { Total_Optional = 0; Total_IsSet = false; }
    /** @brief Returns true if Total_Optional is set and matches the default value */
    bool IsTotalDefaultValue() const { return Total_IsSet && Total_Optional == 0; }
    /** @brief Sets the value of Total_Optional to its default and also sets Total_IsSet to true */
    void SetTotalToDefault() { Total_Optional = 0; Total_IsSet = true; }
};

/** @} */
