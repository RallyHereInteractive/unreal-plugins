// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereDeveloperAPIBaseModel.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevMatchMakingFunctionConfig.h"
#include "DevProfileJoinMode.h"
#include "DevTaskforceSizeByTime.h"
#include "DevMatchMakingProfileUpdateRequest.generated.h"

/** @defgroup RHAPI_DevMatchMakingProfileUpdateRequest RallyHere API Model DevMatchMakingProfileUpdateRequest
 *  @{
 */

/**
 * @brief
 */
USTRUCT(BlueprintType)
struct RALLYHEREDEVELOPERAPI_API FRHAPI_DevMatchMakingProfileUpdateRequest : public FRHAPI_DevModel
{
    GENERATED_BODY()

    /**
    * @brief Fills this object with data from the passed in JSON
    *
    * @param [in] JsonValue Data from the API call.
    *
    * @return true if parsing of the JSON data was successful.
    */
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

    /**
    * @brief Writes the data from this object into the specified JSON Writer stream
    *
    * @param [in] Writer JSON Writer stream to push .
    */
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /** @brief What mode to set on the MatchMakingProfile (normal, backfill etc) */
    ERHAPI_DevProfileJoinMode JoinMode_Optional{  };
    /** @brief true if JoinMode_Optional has been set to a value */
    bool JoinMode_IsSet{ false };
    /** @brief Gets the value of JoinMode_Optional, regardless of it having been set */
    ERHAPI_DevProfileJoinMode& GetJoinMode() { return JoinMode_Optional; }
    /** @brief Gets the value of JoinMode_Optional, regardless of it having been set */
    const ERHAPI_DevProfileJoinMode& GetJoinMode() const { return JoinMode_Optional; }
    /** @brief Gets the value of JoinMode_Optional, if it has been set, otherwise it returns DefaultValue */
    const ERHAPI_DevProfileJoinMode& GetJoinMode(const ERHAPI_DevProfileJoinMode& DefaultValue) const { if (JoinMode_IsSet) return JoinMode_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of JoinMode_Optional and returns true if it has been set, otherwise returns false */
    bool GetJoinMode(ERHAPI_DevProfileJoinMode& OutValue) const { if (JoinMode_IsSet) OutValue = JoinMode_Optional; return JoinMode_IsSet; }
    /** @brief Returns a pointer to JoinMode_Optional, if it has been set, otherwise returns nullptr */
    ERHAPI_DevProfileJoinMode* GetJoinModeOrNull() { if (JoinMode_IsSet) return &JoinMode_Optional; return nullptr; }
    /** @brief Returns a pointer to JoinMode_Optional, if it has been set, otherwise returns nullptr */
    const ERHAPI_DevProfileJoinMode* GetJoinModeOrNull() const { if (JoinMode_IsSet) return &JoinMode_Optional; return nullptr; }
    /** @brief Sets the value of JoinMode_Optional and also sets JoinMode_IsSet to true */
    void SetJoinMode(ERHAPI_DevProfileJoinMode NewValue) { JoinMode_Optional = NewValue; JoinMode_IsSet = true; }
     /** @brief Clears the value of JoinMode_Optional and sets JoinMode_IsSet to false */
    void ClearJoinMode() { JoinMode_IsSet = false; }

    /** @brief Which rank this queue should use MMR from to make matches from, and update at the end of match (1v1 MMR or 2v2 MMR for example) */
    FGuid RankId_Optional{  };
    /** @brief true if RankId_Optional has been set to a value */
    bool RankId_IsSet{ false };
    /** @brief Gets the value of RankId_Optional, regardless of it having been set */
    FGuid& GetRankId() { return RankId_Optional; }
    /** @brief Gets the value of RankId_Optional, regardless of it having been set */
    const FGuid& GetRankId() const { return RankId_Optional; }
    /** @brief Gets the value of RankId_Optional, if it has been set, otherwise it returns DefaultValue */
    const FGuid& GetRankId(const FGuid& DefaultValue) const { if (RankId_IsSet) return RankId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of RankId_Optional and returns true if it has been set, otherwise returns false */
    bool GetRankId(FGuid& OutValue) const { if (RankId_IsSet) OutValue = RankId_Optional; return RankId_IsSet; }
    /** @brief Returns a pointer to RankId_Optional, if it has been set, otherwise returns nullptr */
    FGuid* GetRankIdOrNull() { if (RankId_IsSet) return &RankId_Optional; return nullptr; }
    /** @brief Returns a pointer to RankId_Optional, if it has been set, otherwise returns nullptr */
    const FGuid* GetRankIdOrNull() const { if (RankId_IsSet) return &RankId_Optional; return nullptr; }
    /** @brief Sets the value of RankId_Optional and also sets RankId_IsSet to true */
    void SetRankId(FGuid NewValue) { RankId_Optional = NewValue; RankId_IsSet = true; }
     /** @brief Clears the value of RankId_Optional and sets RankId_IsSet to false */
    void ClearRankId() { RankId_IsSet = false; }

    /** @brief The number of sides a game in this queue will have (2 in a 1v1 and 3 in a 1v1v1 for example */
    int32 NumSides_Optional{  };
    /** @brief true if NumSides_Optional has been set to a value */
    bool NumSides_IsSet{ false };
    /** @brief Gets the value of NumSides_Optional, regardless of it having been set */
    int32& GetNumSides() { return NumSides_Optional; }
    /** @brief Gets the value of NumSides_Optional, regardless of it having been set */
    const int32& GetNumSides() const { return NumSides_Optional; }
    /** @brief Gets the value of NumSides_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetNumSides(const int32& DefaultValue) const { if (NumSides_IsSet) return NumSides_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of NumSides_Optional and returns true if it has been set, otherwise returns false */
    bool GetNumSides(int32& OutValue) const { if (NumSides_IsSet) OutValue = NumSides_Optional; return NumSides_IsSet; }
    /** @brief Returns a pointer to NumSides_Optional, if it has been set, otherwise returns nullptr */
    int32* GetNumSidesOrNull() { if (NumSides_IsSet) return &NumSides_Optional; return nullptr; }
    /** @brief Returns a pointer to NumSides_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetNumSidesOrNull() const { if (NumSides_IsSet) return &NumSides_Optional; return nullptr; }
    /** @brief Sets the value of NumSides_Optional and also sets NumSides_IsSet to true */
    void SetNumSides(int32 NewValue) { NumSides_Optional = NewValue; NumSides_IsSet = true; }
     /** @brief Clears the value of NumSides_Optional and sets NumSides_IsSet to false */
    void ClearNumSides() { NumSides_Optional = 0; NumSides_IsSet = false; }
    /** @brief Returns true if NumSides_Optional is set and matches the default value */
    bool IsNumSidesDefaultValue() const { return NumSides_IsSet && NumSides_Optional == 0; }
    /** @brief Sets the value of NumSides_Optional to its default and also sets NumSides_IsSet to true */
    void SetNumSidesToDefault() { NumSides_Optional = 0; NumSides_IsSet = true; }

    /** @brief The maximum number of players that can be on each team */
    int32 MaxPlayersPerSide_Optional{  };
    /** @brief true if MaxPlayersPerSide_Optional has been set to a value */
    bool MaxPlayersPerSide_IsSet{ false };
    /** @brief Gets the value of MaxPlayersPerSide_Optional, regardless of it having been set */
    int32& GetMaxPlayersPerSide() { return MaxPlayersPerSide_Optional; }
    /** @brief Gets the value of MaxPlayersPerSide_Optional, regardless of it having been set */
    const int32& GetMaxPlayersPerSide() const { return MaxPlayersPerSide_Optional; }
    /** @brief Gets the value of MaxPlayersPerSide_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetMaxPlayersPerSide(const int32& DefaultValue) const { if (MaxPlayersPerSide_IsSet) return MaxPlayersPerSide_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of MaxPlayersPerSide_Optional and returns true if it has been set, otherwise returns false */
    bool GetMaxPlayersPerSide(int32& OutValue) const { if (MaxPlayersPerSide_IsSet) OutValue = MaxPlayersPerSide_Optional; return MaxPlayersPerSide_IsSet; }
    /** @brief Returns a pointer to MaxPlayersPerSide_Optional, if it has been set, otherwise returns nullptr */
    int32* GetMaxPlayersPerSideOrNull() { if (MaxPlayersPerSide_IsSet) return &MaxPlayersPerSide_Optional; return nullptr; }
    /** @brief Returns a pointer to MaxPlayersPerSide_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetMaxPlayersPerSideOrNull() const { if (MaxPlayersPerSide_IsSet) return &MaxPlayersPerSide_Optional; return nullptr; }
    /** @brief Sets the value of MaxPlayersPerSide_Optional and also sets MaxPlayersPerSide_IsSet to true */
    void SetMaxPlayersPerSide(int32 NewValue) { MaxPlayersPerSide_Optional = NewValue; MaxPlayersPerSide_IsSet = true; }
     /** @brief Clears the value of MaxPlayersPerSide_Optional and sets MaxPlayersPerSide_IsSet to false */
    void ClearMaxPlayersPerSide() { MaxPlayersPerSide_Optional = 0; MaxPlayersPerSide_IsSet = false; }
    /** @brief Returns true if MaxPlayersPerSide_Optional is set and matches the default value */
    bool IsMaxPlayersPerSideDefaultValue() const { return MaxPlayersPerSide_IsSet && MaxPlayersPerSide_Optional == 0; }
    /** @brief Sets the value of MaxPlayersPerSide_Optional to its default and also sets MaxPlayersPerSide_IsSet to true */
    void SetMaxPlayersPerSideToDefault() { MaxPlayersPerSide_Optional = 0; MaxPlayersPerSide_IsSet = true; }

    /** @brief The minimum number of players that can be on each team */
    int32 MinPlayersPerSide_Optional{  };
    /** @brief true if MinPlayersPerSide_Optional has been set to a value */
    bool MinPlayersPerSide_IsSet{ false };
    /** @brief Gets the value of MinPlayersPerSide_Optional, regardless of it having been set */
    int32& GetMinPlayersPerSide() { return MinPlayersPerSide_Optional; }
    /** @brief Gets the value of MinPlayersPerSide_Optional, regardless of it having been set */
    const int32& GetMinPlayersPerSide() const { return MinPlayersPerSide_Optional; }
    /** @brief Gets the value of MinPlayersPerSide_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetMinPlayersPerSide(const int32& DefaultValue) const { if (MinPlayersPerSide_IsSet) return MinPlayersPerSide_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of MinPlayersPerSide_Optional and returns true if it has been set, otherwise returns false */
    bool GetMinPlayersPerSide(int32& OutValue) const { if (MinPlayersPerSide_IsSet) OutValue = MinPlayersPerSide_Optional; return MinPlayersPerSide_IsSet; }
    /** @brief Returns a pointer to MinPlayersPerSide_Optional, if it has been set, otherwise returns nullptr */
    int32* GetMinPlayersPerSideOrNull() { if (MinPlayersPerSide_IsSet) return &MinPlayersPerSide_Optional; return nullptr; }
    /** @brief Returns a pointer to MinPlayersPerSide_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetMinPlayersPerSideOrNull() const { if (MinPlayersPerSide_IsSet) return &MinPlayersPerSide_Optional; return nullptr; }
    /** @brief Sets the value of MinPlayersPerSide_Optional and also sets MinPlayersPerSide_IsSet to true */
    void SetMinPlayersPerSide(int32 NewValue) { MinPlayersPerSide_Optional = NewValue; MinPlayersPerSide_IsSet = true; }
     /** @brief Clears the value of MinPlayersPerSide_Optional and sets MinPlayersPerSide_IsSet to false */
    void ClearMinPlayersPerSide() { MinPlayersPerSide_Optional = 0; MinPlayersPerSide_IsSet = false; }
    /** @brief Returns true if MinPlayersPerSide_Optional is set and matches the default value */
    bool IsMinPlayersPerSideDefaultValue() const { return MinPlayersPerSide_IsSet && MinPlayersPerSide_Optional == 0; }
    /** @brief Sets the value of MinPlayersPerSide_Optional to its default and also sets MinPlayersPerSide_IsSet to true */
    void SetMinPlayersPerSideToDefault() { MinPlayersPerSide_Optional = 0; MinPlayersPerSide_IsSet = true; }

    /** @brief The minimum number of players that can be on a single linking (a party) */
    int32 MinPlayersPerLinking_Optional{  };
    /** @brief true if MinPlayersPerLinking_Optional has been set to a value */
    bool MinPlayersPerLinking_IsSet{ false };
    /** @brief Gets the value of MinPlayersPerLinking_Optional, regardless of it having been set */
    int32& GetMinPlayersPerLinking() { return MinPlayersPerLinking_Optional; }
    /** @brief Gets the value of MinPlayersPerLinking_Optional, regardless of it having been set */
    const int32& GetMinPlayersPerLinking() const { return MinPlayersPerLinking_Optional; }
    /** @brief Gets the value of MinPlayersPerLinking_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetMinPlayersPerLinking(const int32& DefaultValue) const { if (MinPlayersPerLinking_IsSet) return MinPlayersPerLinking_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of MinPlayersPerLinking_Optional and returns true if it has been set, otherwise returns false */
    bool GetMinPlayersPerLinking(int32& OutValue) const { if (MinPlayersPerLinking_IsSet) OutValue = MinPlayersPerLinking_Optional; return MinPlayersPerLinking_IsSet; }
    /** @brief Returns a pointer to MinPlayersPerLinking_Optional, if it has been set, otherwise returns nullptr */
    int32* GetMinPlayersPerLinkingOrNull() { if (MinPlayersPerLinking_IsSet) return &MinPlayersPerLinking_Optional; return nullptr; }
    /** @brief Returns a pointer to MinPlayersPerLinking_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetMinPlayersPerLinkingOrNull() const { if (MinPlayersPerLinking_IsSet) return &MinPlayersPerLinking_Optional; return nullptr; }
    /** @brief Sets the value of MinPlayersPerLinking_Optional and also sets MinPlayersPerLinking_IsSet to true */
    void SetMinPlayersPerLinking(int32 NewValue) { MinPlayersPerLinking_Optional = NewValue; MinPlayersPerLinking_IsSet = true; }
     /** @brief Clears the value of MinPlayersPerLinking_Optional and sets MinPlayersPerLinking_IsSet to false */
    void ClearMinPlayersPerLinking() { MinPlayersPerLinking_Optional = 0; MinPlayersPerLinking_IsSet = false; }
    /** @brief Returns true if MinPlayersPerLinking_Optional is set and matches the default value */
    bool IsMinPlayersPerLinkingDefaultValue() const { return MinPlayersPerLinking_IsSet && MinPlayersPerLinking_Optional == 0; }
    /** @brief Sets the value of MinPlayersPerLinking_Optional to its default and also sets MinPlayersPerLinking_IsSet to true */
    void SetMinPlayersPerLinkingToDefault() { MinPlayersPerLinking_Optional = 0; MinPlayersPerLinking_IsSet = true; }

    /** @brief The maximum number of players that can be on a single linking (a party) */
    int32 MaxPlayersPerLinking_Optional{  };
    /** @brief true if MaxPlayersPerLinking_Optional has been set to a value */
    bool MaxPlayersPerLinking_IsSet{ false };
    /** @brief Gets the value of MaxPlayersPerLinking_Optional, regardless of it having been set */
    int32& GetMaxPlayersPerLinking() { return MaxPlayersPerLinking_Optional; }
    /** @brief Gets the value of MaxPlayersPerLinking_Optional, regardless of it having been set */
    const int32& GetMaxPlayersPerLinking() const { return MaxPlayersPerLinking_Optional; }
    /** @brief Gets the value of MaxPlayersPerLinking_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetMaxPlayersPerLinking(const int32& DefaultValue) const { if (MaxPlayersPerLinking_IsSet) return MaxPlayersPerLinking_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of MaxPlayersPerLinking_Optional and returns true if it has been set, otherwise returns false */
    bool GetMaxPlayersPerLinking(int32& OutValue) const { if (MaxPlayersPerLinking_IsSet) OutValue = MaxPlayersPerLinking_Optional; return MaxPlayersPerLinking_IsSet; }
    /** @brief Returns a pointer to MaxPlayersPerLinking_Optional, if it has been set, otherwise returns nullptr */
    int32* GetMaxPlayersPerLinkingOrNull() { if (MaxPlayersPerLinking_IsSet) return &MaxPlayersPerLinking_Optional; return nullptr; }
    /** @brief Returns a pointer to MaxPlayersPerLinking_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetMaxPlayersPerLinkingOrNull() const { if (MaxPlayersPerLinking_IsSet) return &MaxPlayersPerLinking_Optional; return nullptr; }
    /** @brief Sets the value of MaxPlayersPerLinking_Optional and also sets MaxPlayersPerLinking_IsSet to true */
    void SetMaxPlayersPerLinking(int32 NewValue) { MaxPlayersPerLinking_Optional = NewValue; MaxPlayersPerLinking_IsSet = true; }
     /** @brief Clears the value of MaxPlayersPerLinking_Optional and sets MaxPlayersPerLinking_IsSet to false */
    void ClearMaxPlayersPerLinking() { MaxPlayersPerLinking_Optional = 0; MaxPlayersPerLinking_IsSet = false; }
    /** @brief Returns true if MaxPlayersPerLinking_Optional is set and matches the default value */
    bool IsMaxPlayersPerLinkingDefaultValue() const { return MaxPlayersPerLinking_IsSet && MaxPlayersPerLinking_Optional == 0; }
    /** @brief Sets the value of MaxPlayersPerLinking_Optional to its default and also sets MaxPlayersPerLinking_IsSet to true */
    void SetMaxPlayersPerLinkingToDefault() { MaxPlayersPerLinking_Optional = 0; MaxPlayersPerLinking_IsSet = true; }

    /** @brief The maximum difference in players per side when generating a match from this profile */
    int32 MaxSideDelta_Optional{  };
    /** @brief true if MaxSideDelta_Optional has been set to a value */
    bool MaxSideDelta_IsSet{ false };
    /** @brief Gets the value of MaxSideDelta_Optional, regardless of it having been set */
    int32& GetMaxSideDelta() { return MaxSideDelta_Optional; }
    /** @brief Gets the value of MaxSideDelta_Optional, regardless of it having been set */
    const int32& GetMaxSideDelta() const { return MaxSideDelta_Optional; }
    /** @brief Gets the value of MaxSideDelta_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetMaxSideDelta(const int32& DefaultValue) const { if (MaxSideDelta_IsSet) return MaxSideDelta_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of MaxSideDelta_Optional and returns true if it has been set, otherwise returns false */
    bool GetMaxSideDelta(int32& OutValue) const { if (MaxSideDelta_IsSet) OutValue = MaxSideDelta_Optional; return MaxSideDelta_IsSet; }
    /** @brief Returns a pointer to MaxSideDelta_Optional, if it has been set, otherwise returns nullptr */
    int32* GetMaxSideDeltaOrNull() { if (MaxSideDelta_IsSet) return &MaxSideDelta_Optional; return nullptr; }
    /** @brief Returns a pointer to MaxSideDelta_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetMaxSideDeltaOrNull() const { if (MaxSideDelta_IsSet) return &MaxSideDelta_Optional; return nullptr; }
    /** @brief Sets the value of MaxSideDelta_Optional and also sets MaxSideDelta_IsSet to true */
    void SetMaxSideDelta(int32 NewValue) { MaxSideDelta_Optional = NewValue; MaxSideDelta_IsSet = true; }
     /** @brief Clears the value of MaxSideDelta_Optional and sets MaxSideDelta_IsSet to false */
    void ClearMaxSideDelta() { MaxSideDelta_Optional = 0; MaxSideDelta_IsSet = false; }
    /** @brief Returns true if MaxSideDelta_Optional is set and matches the default value */
    bool IsMaxSideDeltaDefaultValue() const { return MaxSideDelta_IsSet && MaxSideDelta_Optional == 0; }
    /** @brief Sets the value of MaxSideDelta_Optional to its default and also sets MaxSideDelta_IsSet to true */
    void SetMaxSideDeltaToDefault() { MaxSideDelta_Optional = 0; MaxSideDelta_IsSet = true; }

    /** @brief Which instance request template is used for matches generated from this profile */
    FGuid InstanceRequestTemplateId_Optional{  };
    /** @brief true if InstanceRequestTemplateId_Optional has been set to a value */
    bool InstanceRequestTemplateId_IsSet{ false };
    /** @brief Gets the value of InstanceRequestTemplateId_Optional, regardless of it having been set */
    FGuid& GetInstanceRequestTemplateId() { return InstanceRequestTemplateId_Optional; }
    /** @brief Gets the value of InstanceRequestTemplateId_Optional, regardless of it having been set */
    const FGuid& GetInstanceRequestTemplateId() const { return InstanceRequestTemplateId_Optional; }
    /** @brief Gets the value of InstanceRequestTemplateId_Optional, if it has been set, otherwise it returns DefaultValue */
    const FGuid& GetInstanceRequestTemplateId(const FGuid& DefaultValue) const { if (InstanceRequestTemplateId_IsSet) return InstanceRequestTemplateId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of InstanceRequestTemplateId_Optional and returns true if it has been set, otherwise returns false */
    bool GetInstanceRequestTemplateId(FGuid& OutValue) const { if (InstanceRequestTemplateId_IsSet) OutValue = InstanceRequestTemplateId_Optional; return InstanceRequestTemplateId_IsSet; }
    /** @brief Returns a pointer to InstanceRequestTemplateId_Optional, if it has been set, otherwise returns nullptr */
    FGuid* GetInstanceRequestTemplateIdOrNull() { if (InstanceRequestTemplateId_IsSet) return &InstanceRequestTemplateId_Optional; return nullptr; }
    /** @brief Returns a pointer to InstanceRequestTemplateId_Optional, if it has been set, otherwise returns nullptr */
    const FGuid* GetInstanceRequestTemplateIdOrNull() const { if (InstanceRequestTemplateId_IsSet) return &InstanceRequestTemplateId_Optional; return nullptr; }
    /** @brief Sets the value of InstanceRequestTemplateId_Optional and also sets InstanceRequestTemplateId_IsSet to true */
    void SetInstanceRequestTemplateId(FGuid NewValue) { InstanceRequestTemplateId_Optional = NewValue; InstanceRequestTemplateId_IsSet = true; }
     /** @brief Clears the value of InstanceRequestTemplateId_Optional and sets InstanceRequestTemplateId_IsSet to false */
    void ClearInstanceRequestTemplateId() { InstanceRequestTemplateId_IsSet = false; }

    FRHAPI_DevTaskforceSizeByTime TaskforceSizeByTime_Optional{  };
    /** @brief true if TaskforceSizeByTime_Optional has been set to a value */
    bool TaskforceSizeByTime_IsSet{ false };
    /** @brief Gets the value of TaskforceSizeByTime_Optional, regardless of it having been set */
    FRHAPI_DevTaskforceSizeByTime& GetTaskforceSizeByTime() { return TaskforceSizeByTime_Optional; }
    /** @brief Gets the value of TaskforceSizeByTime_Optional, regardless of it having been set */
    const FRHAPI_DevTaskforceSizeByTime& GetTaskforceSizeByTime() const { return TaskforceSizeByTime_Optional; }
    /** @brief Gets the value of TaskforceSizeByTime_Optional, if it has been set, otherwise it returns DefaultValue */
    const FRHAPI_DevTaskforceSizeByTime& GetTaskforceSizeByTime(const FRHAPI_DevTaskforceSizeByTime& DefaultValue) const { if (TaskforceSizeByTime_IsSet) return TaskforceSizeByTime_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of TaskforceSizeByTime_Optional and returns true if it has been set, otherwise returns false */
    bool GetTaskforceSizeByTime(FRHAPI_DevTaskforceSizeByTime& OutValue) const { if (TaskforceSizeByTime_IsSet) OutValue = TaskforceSizeByTime_Optional; return TaskforceSizeByTime_IsSet; }
    /** @brief Returns a pointer to TaskforceSizeByTime_Optional, if it has been set, otherwise returns nullptr */
    FRHAPI_DevTaskforceSizeByTime* GetTaskforceSizeByTimeOrNull() { if (TaskforceSizeByTime_IsSet) return &TaskforceSizeByTime_Optional; return nullptr; }
    /** @brief Returns a pointer to TaskforceSizeByTime_Optional, if it has been set, otherwise returns nullptr */
    const FRHAPI_DevTaskforceSizeByTime* GetTaskforceSizeByTimeOrNull() const { if (TaskforceSizeByTime_IsSet) return &TaskforceSizeByTime_Optional; return nullptr; }
    /** @brief Sets the value of TaskforceSizeByTime_Optional and also sets TaskforceSizeByTime_IsSet to true */
    void SetTaskforceSizeByTime(FRHAPI_DevTaskforceSizeByTime NewValue) { TaskforceSizeByTime_Optional = NewValue; TaskforceSizeByTime_IsSet = true; }
     /** @brief Clears the value of TaskforceSizeByTime_Optional and sets TaskforceSizeByTime_IsSet to false */
    void ClearTaskforceSizeByTime() { TaskforceSizeByTime_IsSet = false; }

    FRHAPI_DevMatchMakingFunctionConfig MatchMakingFunctionConfig_Optional{  };
    /** @brief true if MatchMakingFunctionConfig_Optional has been set to a value */
    bool MatchMakingFunctionConfig_IsSet{ false };
    /** @brief Gets the value of MatchMakingFunctionConfig_Optional, regardless of it having been set */
    FRHAPI_DevMatchMakingFunctionConfig& GetMatchMakingFunctionConfig() { return MatchMakingFunctionConfig_Optional; }
    /** @brief Gets the value of MatchMakingFunctionConfig_Optional, regardless of it having been set */
    const FRHAPI_DevMatchMakingFunctionConfig& GetMatchMakingFunctionConfig() const { return MatchMakingFunctionConfig_Optional; }
    /** @brief Gets the value of MatchMakingFunctionConfig_Optional, if it has been set, otherwise it returns DefaultValue */
    const FRHAPI_DevMatchMakingFunctionConfig& GetMatchMakingFunctionConfig(const FRHAPI_DevMatchMakingFunctionConfig& DefaultValue) const { if (MatchMakingFunctionConfig_IsSet) return MatchMakingFunctionConfig_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of MatchMakingFunctionConfig_Optional and returns true if it has been set, otherwise returns false */
    bool GetMatchMakingFunctionConfig(FRHAPI_DevMatchMakingFunctionConfig& OutValue) const { if (MatchMakingFunctionConfig_IsSet) OutValue = MatchMakingFunctionConfig_Optional; return MatchMakingFunctionConfig_IsSet; }
    /** @brief Returns a pointer to MatchMakingFunctionConfig_Optional, if it has been set, otherwise returns nullptr */
    FRHAPI_DevMatchMakingFunctionConfig* GetMatchMakingFunctionConfigOrNull() { if (MatchMakingFunctionConfig_IsSet) return &MatchMakingFunctionConfig_Optional; return nullptr; }
    /** @brief Returns a pointer to MatchMakingFunctionConfig_Optional, if it has been set, otherwise returns nullptr */
    const FRHAPI_DevMatchMakingFunctionConfig* GetMatchMakingFunctionConfigOrNull() const { if (MatchMakingFunctionConfig_IsSet) return &MatchMakingFunctionConfig_Optional; return nullptr; }
    /** @brief Sets the value of MatchMakingFunctionConfig_Optional and also sets MatchMakingFunctionConfig_IsSet to true */
    void SetMatchMakingFunctionConfig(FRHAPI_DevMatchMakingFunctionConfig NewValue) { MatchMakingFunctionConfig_Optional = NewValue; MatchMakingFunctionConfig_IsSet = true; }
     /** @brief Clears the value of MatchMakingFunctionConfig_Optional and sets MatchMakingFunctionConfig_IsSet to false */
    void ClearMatchMakingFunctionConfig() { MatchMakingFunctionConfig_IsSet = false; }

    /** @brief Which matchmaking strides should be used to divide the queue population */
    FGuid StrideId_Optional{  };
    /** @brief true if StrideId_Optional has been set to a value */
    bool StrideId_IsSet{ false };
    /** @brief Gets the value of StrideId_Optional, regardless of it having been set */
    FGuid& GetStrideId() { return StrideId_Optional; }
    /** @brief Gets the value of StrideId_Optional, regardless of it having been set */
    const FGuid& GetStrideId() const { return StrideId_Optional; }
    /** @brief Gets the value of StrideId_Optional, if it has been set, otherwise it returns DefaultValue */
    const FGuid& GetStrideId(const FGuid& DefaultValue) const { if (StrideId_IsSet) return StrideId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of StrideId_Optional and returns true if it has been set, otherwise returns false */
    bool GetStrideId(FGuid& OutValue) const { if (StrideId_IsSet) OutValue = StrideId_Optional; return StrideId_IsSet; }
    /** @brief Returns a pointer to StrideId_Optional, if it has been set, otherwise returns nullptr */
    FGuid* GetStrideIdOrNull() { if (StrideId_IsSet) return &StrideId_Optional; return nullptr; }
    /** @brief Returns a pointer to StrideId_Optional, if it has been set, otherwise returns nullptr */
    const FGuid* GetStrideIdOrNull() const { if (StrideId_IsSet) return &StrideId_Optional; return nullptr; }
    /** @brief Sets the value of StrideId_Optional and also sets StrideId_IsSet to true */
    void SetStrideId(FGuid NewValue) { StrideId_Optional = NewValue; StrideId_IsSet = true; }
     /** @brief Clears the value of StrideId_Optional and sets StrideId_IsSet to false */
    void ClearStrideId() { StrideId_IsSet = false; }

    /** @brief Dictionary of config required for legacy games */
    TMap<FString, FString> LegacyConfig_Optional{  };
    /** @brief true if LegacyConfig_Optional has been set to a value */
    bool LegacyConfig_IsSet{ false };
    /** @brief Gets the value of LegacyConfig_Optional, regardless of it having been set */
    TMap<FString, FString>& GetLegacyConfig() { return LegacyConfig_Optional; }
    /** @brief Gets the value of LegacyConfig_Optional, regardless of it having been set */
    const TMap<FString, FString>& GetLegacyConfig() const { return LegacyConfig_Optional; }
    /** @brief Gets the value of LegacyConfig_Optional, if it has been set, otherwise it returns DefaultValue */
    const TMap<FString, FString>& GetLegacyConfig(const TMap<FString, FString>& DefaultValue) const { if (LegacyConfig_IsSet) return LegacyConfig_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of LegacyConfig_Optional and returns true if it has been set, otherwise returns false */
    bool GetLegacyConfig(TMap<FString, FString>& OutValue) const { if (LegacyConfig_IsSet) OutValue = LegacyConfig_Optional; return LegacyConfig_IsSet; }
    /** @brief Returns a pointer to LegacyConfig_Optional, if it has been set, otherwise returns nullptr */
    TMap<FString, FString>* GetLegacyConfigOrNull() { if (LegacyConfig_IsSet) return &LegacyConfig_Optional; return nullptr; }
    /** @brief Returns a pointer to LegacyConfig_Optional, if it has been set, otherwise returns nullptr */
    const TMap<FString, FString>* GetLegacyConfigOrNull() const { if (LegacyConfig_IsSet) return &LegacyConfig_Optional; return nullptr; }
    /** @brief Sets the value of LegacyConfig_Optional and also sets LegacyConfig_IsSet to true */
    void SetLegacyConfig(TMap<FString, FString> NewValue) { LegacyConfig_Optional = NewValue; LegacyConfig_IsSet = true; }
     /** @brief Clears the value of LegacyConfig_Optional and sets LegacyConfig_IsSet to false */
    void ClearLegacyConfig() { LegacyConfig_IsSet = false; }

    /** @brief The trueskill quality threshold that this profile will start trying to match with */
    float TrueskillQualityByTimeMaxQuality_Optional{  };
    /** @brief true if TrueskillQualityByTimeMaxQuality_Optional has been set to a value */
    bool TrueskillQualityByTimeMaxQuality_IsSet{ false };
    /** @brief Gets the value of TrueskillQualityByTimeMaxQuality_Optional, regardless of it having been set */
    float& GetTrueskillQualityByTimeMaxQuality() { return TrueskillQualityByTimeMaxQuality_Optional; }
    /** @brief Gets the value of TrueskillQualityByTimeMaxQuality_Optional, regardless of it having been set */
    const float& GetTrueskillQualityByTimeMaxQuality() const { return TrueskillQualityByTimeMaxQuality_Optional; }
    /** @brief Gets the value of TrueskillQualityByTimeMaxQuality_Optional, if it has been set, otherwise it returns DefaultValue */
    const float& GetTrueskillQualityByTimeMaxQuality(const float& DefaultValue) const { if (TrueskillQualityByTimeMaxQuality_IsSet) return TrueskillQualityByTimeMaxQuality_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of TrueskillQualityByTimeMaxQuality_Optional and returns true if it has been set, otherwise returns false */
    bool GetTrueskillQualityByTimeMaxQuality(float& OutValue) const { if (TrueskillQualityByTimeMaxQuality_IsSet) OutValue = TrueskillQualityByTimeMaxQuality_Optional; return TrueskillQualityByTimeMaxQuality_IsSet; }
    /** @brief Returns a pointer to TrueskillQualityByTimeMaxQuality_Optional, if it has been set, otherwise returns nullptr */
    float* GetTrueskillQualityByTimeMaxQualityOrNull() { if (TrueskillQualityByTimeMaxQuality_IsSet) return &TrueskillQualityByTimeMaxQuality_Optional; return nullptr; }
    /** @brief Returns a pointer to TrueskillQualityByTimeMaxQuality_Optional, if it has been set, otherwise returns nullptr */
    const float* GetTrueskillQualityByTimeMaxQualityOrNull() const { if (TrueskillQualityByTimeMaxQuality_IsSet) return &TrueskillQualityByTimeMaxQuality_Optional; return nullptr; }
    /** @brief Sets the value of TrueskillQualityByTimeMaxQuality_Optional and also sets TrueskillQualityByTimeMaxQuality_IsSet to true */
    void SetTrueskillQualityByTimeMaxQuality(float NewValue) { TrueskillQualityByTimeMaxQuality_Optional = NewValue; TrueskillQualityByTimeMaxQuality_IsSet = true; }
     /** @brief Clears the value of TrueskillQualityByTimeMaxQuality_Optional and sets TrueskillQualityByTimeMaxQuality_IsSet to false */
    void ClearTrueskillQualityByTimeMaxQuality() { TrueskillQualityByTimeMaxQuality_IsSet = false; }

    /** @brief The max amount of time we will try to create matches before quality will be disregarded */
    float TrueskillQualityByTimeMaxMinutes_Optional{  };
    /** @brief true if TrueskillQualityByTimeMaxMinutes_Optional has been set to a value */
    bool TrueskillQualityByTimeMaxMinutes_IsSet{ false };
    /** @brief Gets the value of TrueskillQualityByTimeMaxMinutes_Optional, regardless of it having been set */
    float& GetTrueskillQualityByTimeMaxMinutes() { return TrueskillQualityByTimeMaxMinutes_Optional; }
    /** @brief Gets the value of TrueskillQualityByTimeMaxMinutes_Optional, regardless of it having been set */
    const float& GetTrueskillQualityByTimeMaxMinutes() const { return TrueskillQualityByTimeMaxMinutes_Optional; }
    /** @brief Gets the value of TrueskillQualityByTimeMaxMinutes_Optional, if it has been set, otherwise it returns DefaultValue */
    const float& GetTrueskillQualityByTimeMaxMinutes(const float& DefaultValue) const { if (TrueskillQualityByTimeMaxMinutes_IsSet) return TrueskillQualityByTimeMaxMinutes_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of TrueskillQualityByTimeMaxMinutes_Optional and returns true if it has been set, otherwise returns false */
    bool GetTrueskillQualityByTimeMaxMinutes(float& OutValue) const { if (TrueskillQualityByTimeMaxMinutes_IsSet) OutValue = TrueskillQualityByTimeMaxMinutes_Optional; return TrueskillQualityByTimeMaxMinutes_IsSet; }
    /** @brief Returns a pointer to TrueskillQualityByTimeMaxMinutes_Optional, if it has been set, otherwise returns nullptr */
    float* GetTrueskillQualityByTimeMaxMinutesOrNull() { if (TrueskillQualityByTimeMaxMinutes_IsSet) return &TrueskillQualityByTimeMaxMinutes_Optional; return nullptr; }
    /** @brief Returns a pointer to TrueskillQualityByTimeMaxMinutes_Optional, if it has been set, otherwise returns nullptr */
    const float* GetTrueskillQualityByTimeMaxMinutesOrNull() const { if (TrueskillQualityByTimeMaxMinutes_IsSet) return &TrueskillQualityByTimeMaxMinutes_Optional; return nullptr; }
    /** @brief Sets the value of TrueskillQualityByTimeMaxMinutes_Optional and also sets TrueskillQualityByTimeMaxMinutes_IsSet to true */
    void SetTrueskillQualityByTimeMaxMinutes(float NewValue) { TrueskillQualityByTimeMaxMinutes_Optional = NewValue; TrueskillQualityByTimeMaxMinutes_IsSet = true; }
     /** @brief Clears the value of TrueskillQualityByTimeMaxMinutes_Optional and sets TrueskillQualityByTimeMaxMinutes_IsSet to false */
    void ClearTrueskillQualityByTimeMaxMinutes() { TrueskillQualityByTimeMaxMinutes_IsSet = false; }

    /** @brief Method used to decay the required quality of matches over time. Currently only 'two_term_quadratic' is supported */
    FString TrueskillQualityByTimeMethod_Optional{  };
    /** @brief true if TrueskillQualityByTimeMethod_Optional has been set to a value */
    bool TrueskillQualityByTimeMethod_IsSet{ false };
    /** @brief Gets the value of TrueskillQualityByTimeMethod_Optional, regardless of it having been set */
    FString& GetTrueskillQualityByTimeMethod() { return TrueskillQualityByTimeMethod_Optional; }
    /** @brief Gets the value of TrueskillQualityByTimeMethod_Optional, regardless of it having been set */
    const FString& GetTrueskillQualityByTimeMethod() const { return TrueskillQualityByTimeMethod_Optional; }
    /** @brief Gets the value of TrueskillQualityByTimeMethod_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetTrueskillQualityByTimeMethod(const FString& DefaultValue) const { if (TrueskillQualityByTimeMethod_IsSet) return TrueskillQualityByTimeMethod_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of TrueskillQualityByTimeMethod_Optional and returns true if it has been set, otherwise returns false */
    bool GetTrueskillQualityByTimeMethod(FString& OutValue) const { if (TrueskillQualityByTimeMethod_IsSet) OutValue = TrueskillQualityByTimeMethod_Optional; return TrueskillQualityByTimeMethod_IsSet; }
    /** @brief Returns a pointer to TrueskillQualityByTimeMethod_Optional, if it has been set, otherwise returns nullptr */
    FString* GetTrueskillQualityByTimeMethodOrNull() { if (TrueskillQualityByTimeMethod_IsSet) return &TrueskillQualityByTimeMethod_Optional; return nullptr; }
    /** @brief Returns a pointer to TrueskillQualityByTimeMethod_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetTrueskillQualityByTimeMethodOrNull() const { if (TrueskillQualityByTimeMethod_IsSet) return &TrueskillQualityByTimeMethod_Optional; return nullptr; }
    /** @brief Sets the value of TrueskillQualityByTimeMethod_Optional and also sets TrueskillQualityByTimeMethod_IsSet to true */
    void SetTrueskillQualityByTimeMethod(FString NewValue) { TrueskillQualityByTimeMethod_Optional = NewValue; TrueskillQualityByTimeMethod_IsSet = true; }
     /** @brief Clears the value of TrueskillQualityByTimeMethod_Optional and sets TrueskillQualityByTimeMethod_IsSet to false */
    void ClearTrueskillQualityByTimeMethod() { TrueskillQualityByTimeMethod_IsSet = false; }

    /** @brief Flag determining whether or not this profile will actively be ticked */
    bool Active_Optional{  };
    /** @brief true if Active_Optional has been set to a value */
    bool Active_IsSet{ false };
    /** @brief Gets the value of Active_Optional, regardless of it having been set */
    bool& GetActive() { return Active_Optional; }
    /** @brief Gets the value of Active_Optional, regardless of it having been set */
    const bool& GetActive() const { return Active_Optional; }
    /** @brief Gets the value of Active_Optional, if it has been set, otherwise it returns DefaultValue */
    const bool& GetActive(const bool& DefaultValue) const { if (Active_IsSet) return Active_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Active_Optional and returns true if it has been set, otherwise returns false */
    bool GetActive(bool& OutValue) const { if (Active_IsSet) OutValue = Active_Optional; return Active_IsSet; }
    /** @brief Returns a pointer to Active_Optional, if it has been set, otherwise returns nullptr */
    bool* GetActiveOrNull() { if (Active_IsSet) return &Active_Optional; return nullptr; }
    /** @brief Returns a pointer to Active_Optional, if it has been set, otherwise returns nullptr */
    const bool* GetActiveOrNull() const { if (Active_IsSet) return &Active_Optional; return nullptr; }
    /** @brief Sets the value of Active_Optional and also sets Active_IsSet to true */
    void SetActive(bool NewValue) { Active_Optional = NewValue; Active_IsSet = true; }
     /** @brief Clears the value of Active_Optional and sets Active_IsSet to false */
    void ClearActive() { Active_Optional = false; Active_IsSet = false; }
    /** @brief Returns true if Active_Optional is set and matches the default value */
    bool IsActiveDefaultValue() const { return Active_IsSet && Active_Optional == false; }
    /** @brief Sets the value of Active_Optional to its default and also sets Active_IsSet to true */
    void SetActiveToDefault() { Active_Optional = false; Active_IsSet = true; }
};

/** @} */
