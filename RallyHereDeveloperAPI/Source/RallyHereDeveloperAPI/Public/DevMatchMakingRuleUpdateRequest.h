// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereDeveloperAPIBaseModel.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevComparisonOperation.h"
#include "DevRuleType.h"
#include "DevMatchMakingRuleUpdateRequest.generated.h"

/** @defgroup RHAPI_DevMatchMakingRuleUpdateRequest RallyHere API Model DevMatchMakingRuleUpdateRequest
 *  @{
 */

/**
 * @brief 
 */
USTRUCT(BlueprintType)
struct RALLYHEREDEVELOPERAPI_API FRHAPI_DevMatchMakingRuleUpdateRequest : public FRHAPI_DevModel
{
    GENERATED_BODY()

    /**
    * @brief Fills this object with data from the passed in JSON
    *
    * @param [in] JsonValue Data from the API call.
    *
    * @return true if parsing of the JSON data was successful.
    */
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

    /**
    * @brief Writes the data from this object into the specified JSON Writer stream
    *
    * @param [in] Writer JSON Writer stream to push .
    */
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /** @brief Which ruleset this MatchMakingRule belongs to */
    FGuid MatchMakingRulesetId_Optional{  };
    /** @brief true if MatchMakingRulesetId_Optional has been set to a value */
    bool MatchMakingRulesetId_IsSet{ false };
    /** @brief Gets the value of MatchMakingRulesetId_Optional, regardless of it having been set */
    FGuid& GetMatchMakingRulesetId() { return MatchMakingRulesetId_Optional; }
    /** @brief Gets the value of MatchMakingRulesetId_Optional, regardless of it having been set */
    const FGuid& GetMatchMakingRulesetId() const { return MatchMakingRulesetId_Optional; }
    /** @brief Gets the value of MatchMakingRulesetId_Optional, if it has been set, otherwise it returns DefaultValue */
    const FGuid& GetMatchMakingRulesetId(const FGuid& DefaultValue) const { if (MatchMakingRulesetId_IsSet) return MatchMakingRulesetId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of MatchMakingRulesetId_Optional and returns true if it has been set, otherwise returns false */
    bool GetMatchMakingRulesetId(FGuid& OutValue) const { if (MatchMakingRulesetId_IsSet) OutValue = MatchMakingRulesetId_Optional; return MatchMakingRulesetId_IsSet; }
    /** @brief Returns a pointer to MatchMakingRulesetId_Optional, if it has been set, otherwise returns nullptr */
    FGuid* GetMatchMakingRulesetIdOrNull() { if (MatchMakingRulesetId_IsSet) return &MatchMakingRulesetId_Optional; return nullptr; }
    /** @brief Returns a pointer to MatchMakingRulesetId_Optional, if it has been set, otherwise returns nullptr */
    const FGuid* GetMatchMakingRulesetIdOrNull() const { if (MatchMakingRulesetId_IsSet) return &MatchMakingRulesetId_Optional; return nullptr; }
    /** @brief Sets the value of MatchMakingRulesetId_Optional and also sets MatchMakingRulesetId_IsSet to true */
    void SetMatchMakingRulesetId(FGuid NewValue) { MatchMakingRulesetId_Optional = NewValue; MatchMakingRulesetId_IsSet = true; }
     /** @brief Clears the value of MatchMakingRulesetId_Optional and sets MatchMakingRulesetId_IsSet to false */
    void ClearMatchMakingRulesetId() { MatchMakingRulesetId_IsSet = false; }

    /** @brief Which comparison operator is used when evaluating the rule */
    ERHAPI_DevComparisonOperation ComparisonOperation_Optional{  };
    /** @brief true if ComparisonOperation_Optional has been set to a value */
    bool ComparisonOperation_IsSet{ false };
    /** @brief Gets the value of ComparisonOperation_Optional, regardless of it having been set */
    ERHAPI_DevComparisonOperation& GetComparisonOperation() { return ComparisonOperation_Optional; }
    /** @brief Gets the value of ComparisonOperation_Optional, regardless of it having been set */
    const ERHAPI_DevComparisonOperation& GetComparisonOperation() const { return ComparisonOperation_Optional; }
    /** @brief Gets the value of ComparisonOperation_Optional, if it has been set, otherwise it returns DefaultValue */
    const ERHAPI_DevComparisonOperation& GetComparisonOperation(const ERHAPI_DevComparisonOperation& DefaultValue) const { if (ComparisonOperation_IsSet) return ComparisonOperation_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of ComparisonOperation_Optional and returns true if it has been set, otherwise returns false */
    bool GetComparisonOperation(ERHAPI_DevComparisonOperation& OutValue) const { if (ComparisonOperation_IsSet) OutValue = ComparisonOperation_Optional; return ComparisonOperation_IsSet; }
    /** @brief Returns a pointer to ComparisonOperation_Optional, if it has been set, otherwise returns nullptr */
    ERHAPI_DevComparisonOperation* GetComparisonOperationOrNull() { if (ComparisonOperation_IsSet) return &ComparisonOperation_Optional; return nullptr; }
    /** @brief Returns a pointer to ComparisonOperation_Optional, if it has been set, otherwise returns nullptr */
    const ERHAPI_DevComparisonOperation* GetComparisonOperationOrNull() const { if (ComparisonOperation_IsSet) return &ComparisonOperation_Optional; return nullptr; }
    /** @brief Sets the value of ComparisonOperation_Optional and also sets ComparisonOperation_IsSet to true */
    void SetComparisonOperation(ERHAPI_DevComparisonOperation NewValue) { ComparisonOperation_Optional = NewValue; ComparisonOperation_IsSet = true; }
     /** @brief Clears the value of ComparisonOperation_Optional and sets ComparisonOperation_IsSet to false */
    void ClearComparisonOperation() { ComparisonOperation_IsSet = false; }

    /** @brief What item is being compared if this is an Inventory rule */
    FGuid ItemId_Optional{  };
    /** @brief true if ItemId_Optional has been set to a value */
    bool ItemId_IsSet{ false };
    /** @brief Gets the value of ItemId_Optional, regardless of it having been set */
    FGuid& GetItemId() { return ItemId_Optional; }
    /** @brief Gets the value of ItemId_Optional, regardless of it having been set */
    const FGuid& GetItemId() const { return ItemId_Optional; }
    /** @brief Gets the value of ItemId_Optional, if it has been set, otherwise it returns DefaultValue */
    const FGuid& GetItemId(const FGuid& DefaultValue) const { if (ItemId_IsSet) return ItemId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of ItemId_Optional and returns true if it has been set, otherwise returns false */
    bool GetItemId(FGuid& OutValue) const { if (ItemId_IsSet) OutValue = ItemId_Optional; return ItemId_IsSet; }
    /** @brief Returns a pointer to ItemId_Optional, if it has been set, otherwise returns nullptr */
    FGuid* GetItemIdOrNull() { if (ItemId_IsSet) return &ItemId_Optional; return nullptr; }
    /** @brief Returns a pointer to ItemId_Optional, if it has been set, otherwise returns nullptr */
    const FGuid* GetItemIdOrNull() const { if (ItemId_IsSet) return &ItemId_Optional; return nullptr; }
    /** @brief Sets the value of ItemId_Optional and also sets ItemId_IsSet to true */
    void SetItemId(FGuid NewValue) { ItemId_Optional = NewValue; ItemId_IsSet = true; }
     /** @brief Clears the value of ItemId_Optional and sets ItemId_IsSet to false */
    void ClearItemId() { ItemId_IsSet = false; }

    /** @brief What type of rule this is (determines what types of values are being compared */
    ERHAPI_DevRuleType RuleType_Optional{  };
    /** @brief true if RuleType_Optional has been set to a value */
    bool RuleType_IsSet{ false };
    /** @brief Gets the value of RuleType_Optional, regardless of it having been set */
    ERHAPI_DevRuleType& GetRuleType() { return RuleType_Optional; }
    /** @brief Gets the value of RuleType_Optional, regardless of it having been set */
    const ERHAPI_DevRuleType& GetRuleType() const { return RuleType_Optional; }
    /** @brief Gets the value of RuleType_Optional, if it has been set, otherwise it returns DefaultValue */
    const ERHAPI_DevRuleType& GetRuleType(const ERHAPI_DevRuleType& DefaultValue) const { if (RuleType_IsSet) return RuleType_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of RuleType_Optional and returns true if it has been set, otherwise returns false */
    bool GetRuleType(ERHAPI_DevRuleType& OutValue) const { if (RuleType_IsSet) OutValue = RuleType_Optional; return RuleType_IsSet; }
    /** @brief Returns a pointer to RuleType_Optional, if it has been set, otherwise returns nullptr */
    ERHAPI_DevRuleType* GetRuleTypeOrNull() { if (RuleType_IsSet) return &RuleType_Optional; return nullptr; }
    /** @brief Returns a pointer to RuleType_Optional, if it has been set, otherwise returns nullptr */
    const ERHAPI_DevRuleType* GetRuleTypeOrNull() const { if (RuleType_IsSet) return &RuleType_Optional; return nullptr; }
    /** @brief Sets the value of RuleType_Optional and also sets RuleType_IsSet to true */
    void SetRuleType(ERHAPI_DevRuleType NewValue) { RuleType_Optional = NewValue; RuleType_IsSet = true; }
     /** @brief Clears the value of RuleType_Optional and sets RuleType_IsSet to false */
    void ClearRuleType() { RuleType_IsSet = false; }

    /** @brief What value is to be compared to */
    int32 ComparisonValue_Optional{  };
    /** @brief true if ComparisonValue_Optional has been set to a value */
    bool ComparisonValue_IsSet{ false };
    /** @brief Gets the value of ComparisonValue_Optional, regardless of it having been set */
    int32& GetComparisonValue() { return ComparisonValue_Optional; }
    /** @brief Gets the value of ComparisonValue_Optional, regardless of it having been set */
    const int32& GetComparisonValue() const { return ComparisonValue_Optional; }
    /** @brief Gets the value of ComparisonValue_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetComparisonValue(const int32& DefaultValue) const { if (ComparisonValue_IsSet) return ComparisonValue_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of ComparisonValue_Optional and returns true if it has been set, otherwise returns false */
    bool GetComparisonValue(int32& OutValue) const { if (ComparisonValue_IsSet) OutValue = ComparisonValue_Optional; return ComparisonValue_IsSet; }
    /** @brief Returns a pointer to ComparisonValue_Optional, if it has been set, otherwise returns nullptr */
    int32* GetComparisonValueOrNull() { if (ComparisonValue_IsSet) return &ComparisonValue_Optional; return nullptr; }
    /** @brief Returns a pointer to ComparisonValue_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetComparisonValueOrNull() const { if (ComparisonValue_IsSet) return &ComparisonValue_Optional; return nullptr; }
    /** @brief Sets the value of ComparisonValue_Optional and also sets ComparisonValue_IsSet to true */
    void SetComparisonValue(int32 NewValue) { ComparisonValue_Optional = NewValue; ComparisonValue_IsSet = true; }
     /** @brief Clears the value of ComparisonValue_Optional and sets ComparisonValue_IsSet to false */
    void ClearComparisonValue() { ComparisonValue_Optional = 0; ComparisonValue_IsSet = false; }
    /** @brief Returns true if ComparisonValue_Optional is set and matches the default value */
    bool IsComparisonValueDefaultValue() const { return ComparisonValue_IsSet && ComparisonValue_Optional == 0; }
    /** @brief Sets the value of ComparisonValue_Optional to its default and also sets ComparisonValue_IsSet to true */
    void SetComparisonValueToDefault() { ComparisonValue_Optional = 0; ComparisonValue_IsSet = true; }
};

/** @} */
