// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereDeveloperAPIBaseModel.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevDependenciesSandboxConfigMatchmakingProfilesSchemasLegacyConfig.generated.h"

/** @defgroup RHAPI_DevDependenciesSandboxConfigMatchmakingProfilesSchemasLegacyConfig RallyHere API Model DevDependenciesSandboxConfigMatchmakingProfilesSchemasLegacyConfig
 *  @{
 */

/**
 * @brief Old config used by Legacy systems. These values are ignored by the current APIs
 */
USTRUCT(BlueprintType)
struct RALLYHEREDEVELOPERAPI_API FRHAPI_DevDependenciesSandboxConfigMatchmakingProfilesSchemasLegacyConfig : public FRHAPI_DevModel
{
    GENERATED_BODY()

    /**
    * @brief Fills this object with data from the passed in JSON
    *
    * @param [in] JsonValue Data from the API call.
    *
    * @return true if parsing of the JSON data was successful.
    */
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

    /**
    * @brief Writes the data from this object into the specified JSON Writer stream
    *
    * @param [in] Writer JSON Writer stream to push .
    */
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /** @brief Queue type */
    int32 QueueTypeValueId_Optional{  };
    /** @brief true if QueueTypeValueId_Optional has been set to a value */
    bool QueueTypeValueId_IsSet{ false };
    /** @brief Gets the value of QueueTypeValueId_Optional, regardless of it having been set */
    int32& GetQueueTypeValueId() { return QueueTypeValueId_Optional; }
    /** @brief Gets the value of QueueTypeValueId_Optional, regardless of it having been set */
    const int32& GetQueueTypeValueId() const { return QueueTypeValueId_Optional; }
    /** @brief Gets the value of QueueTypeValueId_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetQueueTypeValueId(const int32& DefaultValue) const { if (QueueTypeValueId_IsSet) return QueueTypeValueId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of QueueTypeValueId_Optional and returns true if it has been set, otherwise returns false */
    bool GetQueueTypeValueId(int32& OutValue) const { if (QueueTypeValueId_IsSet) OutValue = QueueTypeValueId_Optional; return QueueTypeValueId_IsSet; }
    /** @brief Returns a pointer to QueueTypeValueId_Optional, if it has been set, otherwise returns nullptr */
    int32* GetQueueTypeValueIdOrNull() { if (QueueTypeValueId_IsSet) return &QueueTypeValueId_Optional; return nullptr; }
    /** @brief Returns a pointer to QueueTypeValueId_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetQueueTypeValueIdOrNull() const { if (QueueTypeValueId_IsSet) return &QueueTypeValueId_Optional; return nullptr; }
    /** @brief Sets the value of QueueTypeValueId_Optional and also sets QueueTypeValueId_IsSet to true */
    void SetQueueTypeValueId(int32 NewValue) { QueueTypeValueId_Optional = NewValue; QueueTypeValueId_IsSet = true; }
     /** @brief Clears the value of QueueTypeValueId_Optional and sets QueueTypeValueId_IsSet to false */
    void ClearQueueTypeValueId() { QueueTypeValueId_Optional = 10006; QueueTypeValueId_IsSet = false; }
    /** @brief Returns true if QueueTypeValueId_Optional is set and matches the default value */
    bool IsQueueTypeValueIdDefaultValue() const { return QueueTypeValueId_IsSet && QueueTypeValueId_Optional == 10006; }
    /** @brief Sets the value of QueueTypeValueId_Optional to its default and also sets QueueTypeValueId_IsSet to true */
    void SetQueueTypeValueIdToDefault() { QueueTypeValueId_Optional = 10006; QueueTypeValueId_IsSet = true; }

    /** @brief How many taskforces are in a match */
    int32 TaskForceNumber_Optional{  };
    /** @brief true if TaskForceNumber_Optional has been set to a value */
    bool TaskForceNumber_IsSet{ false };
    /** @brief Gets the value of TaskForceNumber_Optional, regardless of it having been set */
    int32& GetTaskForceNumber() { return TaskForceNumber_Optional; }
    /** @brief Gets the value of TaskForceNumber_Optional, regardless of it having been set */
    const int32& GetTaskForceNumber() const { return TaskForceNumber_Optional; }
    /** @brief Gets the value of TaskForceNumber_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetTaskForceNumber(const int32& DefaultValue) const { if (TaskForceNumber_IsSet) return TaskForceNumber_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of TaskForceNumber_Optional and returns true if it has been set, otherwise returns false */
    bool GetTaskForceNumber(int32& OutValue) const { if (TaskForceNumber_IsSet) OutValue = TaskForceNumber_Optional; return TaskForceNumber_IsSet; }
    /** @brief Returns a pointer to TaskForceNumber_Optional, if it has been set, otherwise returns nullptr */
    int32* GetTaskForceNumberOrNull() { if (TaskForceNumber_IsSet) return &TaskForceNumber_Optional; return nullptr; }
    /** @brief Returns a pointer to TaskForceNumber_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetTaskForceNumberOrNull() const { if (TaskForceNumber_IsSet) return &TaskForceNumber_Optional; return nullptr; }
    /** @brief Sets the value of TaskForceNumber_Optional and also sets TaskForceNumber_IsSet to true */
    void SetTaskForceNumber(int32 NewValue) { TaskForceNumber_Optional = NewValue; TaskForceNumber_IsSet = true; }
     /** @brief Clears the value of TaskForceNumber_Optional and sets TaskForceNumber_IsSet to false */
    void ClearTaskForceNumber() { TaskForceNumber_Optional = 0; TaskForceNumber_IsSet = false; }
    /** @brief Returns true if TaskForceNumber_Optional is set and matches the default value */
    bool IsTaskForceNumberDefaultValue() const { return TaskForceNumber_IsSet && TaskForceNumber_Optional == 0; }
    /** @brief Sets the value of TaskForceNumber_Optional to its default and also sets TaskForceNumber_IsSet to true */
    void SetTaskForceNumberToDefault() { TaskForceNumber_Optional = 0; TaskForceNumber_IsSet = true; }

    /** @brief The message id of this Profile */
    int32 NameMsgId_Optional{  };
    /** @brief true if NameMsgId_Optional has been set to a value */
    bool NameMsgId_IsSet{ false };
    /** @brief Gets the value of NameMsgId_Optional, regardless of it having been set */
    int32& GetNameMsgId() { return NameMsgId_Optional; }
    /** @brief Gets the value of NameMsgId_Optional, regardless of it having been set */
    const int32& GetNameMsgId() const { return NameMsgId_Optional; }
    /** @brief Gets the value of NameMsgId_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetNameMsgId(const int32& DefaultValue) const { if (NameMsgId_IsSet) return NameMsgId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of NameMsgId_Optional and returns true if it has been set, otherwise returns false */
    bool GetNameMsgId(int32& OutValue) const { if (NameMsgId_IsSet) OutValue = NameMsgId_Optional; return NameMsgId_IsSet; }
    /** @brief Returns a pointer to NameMsgId_Optional, if it has been set, otherwise returns nullptr */
    int32* GetNameMsgIdOrNull() { if (NameMsgId_IsSet) return &NameMsgId_Optional; return nullptr; }
    /** @brief Returns a pointer to NameMsgId_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetNameMsgIdOrNull() const { if (NameMsgId_IsSet) return &NameMsgId_Optional; return nullptr; }
    /** @brief Sets the value of NameMsgId_Optional and also sets NameMsgId_IsSet to true */
    void SetNameMsgId(int32 NewValue) { NameMsgId_Optional = NewValue; NameMsgId_IsSet = true; }
     /** @brief Clears the value of NameMsgId_Optional and sets NameMsgId_IsSet to false */
    void ClearNameMsgId() { NameMsgId_Optional = 0; NameMsgId_IsSet = false; }
    /** @brief Returns true if NameMsgId_Optional is set and matches the default value */
    bool IsNameMsgIdDefaultValue() const { return NameMsgId_IsSet && NameMsgId_Optional == 0; }
    /** @brief Sets the value of NameMsgId_Optional to its default and also sets NameMsgId_IsSet to true */
    void SetNameMsgIdToDefault() { NameMsgId_Optional = 0; NameMsgId_IsSet = true; }

    /** @brief The description message id of this Profile */
    int32 DescMsgId_Optional{  };
    /** @brief true if DescMsgId_Optional has been set to a value */
    bool DescMsgId_IsSet{ false };
    /** @brief Gets the value of DescMsgId_Optional, regardless of it having been set */
    int32& GetDescMsgId() { return DescMsgId_Optional; }
    /** @brief Gets the value of DescMsgId_Optional, regardless of it having been set */
    const int32& GetDescMsgId() const { return DescMsgId_Optional; }
    /** @brief Gets the value of DescMsgId_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetDescMsgId(const int32& DefaultValue) const { if (DescMsgId_IsSet) return DescMsgId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of DescMsgId_Optional and returns true if it has been set, otherwise returns false */
    bool GetDescMsgId(int32& OutValue) const { if (DescMsgId_IsSet) OutValue = DescMsgId_Optional; return DescMsgId_IsSet; }
    /** @brief Returns a pointer to DescMsgId_Optional, if it has been set, otherwise returns nullptr */
    int32* GetDescMsgIdOrNull() { if (DescMsgId_IsSet) return &DescMsgId_Optional; return nullptr; }
    /** @brief Returns a pointer to DescMsgId_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetDescMsgIdOrNull() const { if (DescMsgId_IsSet) return &DescMsgId_Optional; return nullptr; }
    /** @brief Sets the value of DescMsgId_Optional and also sets DescMsgId_IsSet to true */
    void SetDescMsgId(int32 NewValue) { DescMsgId_Optional = NewValue; DescMsgId_IsSet = true; }
     /** @brief Clears the value of DescMsgId_Optional and sets DescMsgId_IsSet to false */
    void ClearDescMsgId() { DescMsgId_Optional = 0; DescMsgId_IsSet = false; }
    /** @brief Returns true if DescMsgId_Optional is set and matches the default value */
    bool IsDescMsgIdDefaultValue() const { return DescMsgId_IsSet && DescMsgId_Optional == 0; }
    /** @brief Sets the value of DescMsgId_Optional to its default and also sets DescMsgId_IsSet to true */
    void SetDescMsgIdToDefault() { DescMsgId_Optional = 0; DescMsgId_IsSet = true; }

    /** @brief Whether matches should award xp */
    bool GiveXpFlag_Optional{  };
    /** @brief true if GiveXpFlag_Optional has been set to a value */
    bool GiveXpFlag_IsSet{ false };
    /** @brief Gets the value of GiveXpFlag_Optional, regardless of it having been set */
    bool& GetGiveXpFlag() { return GiveXpFlag_Optional; }
    /** @brief Gets the value of GiveXpFlag_Optional, regardless of it having been set */
    const bool& GetGiveXpFlag() const { return GiveXpFlag_Optional; }
    /** @brief Gets the value of GiveXpFlag_Optional, if it has been set, otherwise it returns DefaultValue */
    const bool& GetGiveXpFlag(const bool& DefaultValue) const { if (GiveXpFlag_IsSet) return GiveXpFlag_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of GiveXpFlag_Optional and returns true if it has been set, otherwise returns false */
    bool GetGiveXpFlag(bool& OutValue) const { if (GiveXpFlag_IsSet) OutValue = GiveXpFlag_Optional; return GiveXpFlag_IsSet; }
    /** @brief Returns a pointer to GiveXpFlag_Optional, if it has been set, otherwise returns nullptr */
    bool* GetGiveXpFlagOrNull() { if (GiveXpFlag_IsSet) return &GiveXpFlag_Optional; return nullptr; }
    /** @brief Returns a pointer to GiveXpFlag_Optional, if it has been set, otherwise returns nullptr */
    const bool* GetGiveXpFlagOrNull() const { if (GiveXpFlag_IsSet) return &GiveXpFlag_Optional; return nullptr; }
    /** @brief Sets the value of GiveXpFlag_Optional and also sets GiveXpFlag_IsSet to true */
    void SetGiveXpFlag(bool NewValue) { GiveXpFlag_Optional = NewValue; GiveXpFlag_IsSet = true; }
     /** @brief Clears the value of GiveXpFlag_Optional and sets GiveXpFlag_IsSet to false */
    void ClearGiveXpFlag() { GiveXpFlag_Optional = false; GiveXpFlag_IsSet = false; }
    /** @brief Returns true if GiveXpFlag_Optional is set and matches the default value */
    bool IsGiveXpFlagDefaultValue() const { return GiveXpFlag_IsSet && GiveXpFlag_Optional == false; }
    /** @brief Sets the value of GiveXpFlag_Optional to its default and also sets GiveXpFlag_IsSet to true */
    void SetGiveXpFlagToDefault() { GiveXpFlag_Optional = false; GiveXpFlag_IsSet = true; }

    /** @brief Whether matches should award achievements */
    bool Giveachievement_Optional{  };
    /** @brief true if Giveachievement_Optional has been set to a value */
    bool Giveachievement_IsSet{ false };
    /** @brief Gets the value of Giveachievement_Optional, regardless of it having been set */
    bool& GetGiveachievement() { return Giveachievement_Optional; }
    /** @brief Gets the value of Giveachievement_Optional, regardless of it having been set */
    const bool& GetGiveachievement() const { return Giveachievement_Optional; }
    /** @brief Gets the value of Giveachievement_Optional, if it has been set, otherwise it returns DefaultValue */
    const bool& GetGiveachievement(const bool& DefaultValue) const { if (Giveachievement_IsSet) return Giveachievement_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Giveachievement_Optional and returns true if it has been set, otherwise returns false */
    bool GetGiveachievement(bool& OutValue) const { if (Giveachievement_IsSet) OutValue = Giveachievement_Optional; return Giveachievement_IsSet; }
    /** @brief Returns a pointer to Giveachievement_Optional, if it has been set, otherwise returns nullptr */
    bool* GetGiveachievementOrNull() { if (Giveachievement_IsSet) return &Giveachievement_Optional; return nullptr; }
    /** @brief Returns a pointer to Giveachievement_Optional, if it has been set, otherwise returns nullptr */
    const bool* GetGiveachievementOrNull() const { if (Giveachievement_IsSet) return &Giveachievement_Optional; return nullptr; }
    /** @brief Sets the value of Giveachievement_Optional and also sets Giveachievement_IsSet to true */
    void SetGiveachievement(bool NewValue) { Giveachievement_Optional = NewValue; Giveachievement_IsSet = true; }
     /** @brief Clears the value of Giveachievement_Optional and sets Giveachievement_IsSet to false */
    void ClearGiveachievement() { Giveachievement_Optional = false; Giveachievement_IsSet = false; }
    /** @brief Returns true if Giveachievement_Optional is set and matches the default value */
    bool IsGiveachievementDefaultValue() const { return Giveachievement_IsSet && Giveachievement_Optional == false; }
    /** @brief Sets the value of Giveachievement_Optional to its default and also sets Giveachievement_IsSet to true */
    void SetGiveachievementToDefault() { Giveachievement_Optional = false; Giveachievement_IsSet = true; }

    /** @brief Whether or not rewards have a level limit */
    bool BlockRewardAfterLevel_Optional{  };
    /** @brief true if BlockRewardAfterLevel_Optional has been set to a value */
    bool BlockRewardAfterLevel_IsSet{ false };
    /** @brief Gets the value of BlockRewardAfterLevel_Optional, regardless of it having been set */
    bool& GetBlockRewardAfterLevel() { return BlockRewardAfterLevel_Optional; }
    /** @brief Gets the value of BlockRewardAfterLevel_Optional, regardless of it having been set */
    const bool& GetBlockRewardAfterLevel() const { return BlockRewardAfterLevel_Optional; }
    /** @brief Gets the value of BlockRewardAfterLevel_Optional, if it has been set, otherwise it returns DefaultValue */
    const bool& GetBlockRewardAfterLevel(const bool& DefaultValue) const { if (BlockRewardAfterLevel_IsSet) return BlockRewardAfterLevel_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of BlockRewardAfterLevel_Optional and returns true if it has been set, otherwise returns false */
    bool GetBlockRewardAfterLevel(bool& OutValue) const { if (BlockRewardAfterLevel_IsSet) OutValue = BlockRewardAfterLevel_Optional; return BlockRewardAfterLevel_IsSet; }
    /** @brief Returns a pointer to BlockRewardAfterLevel_Optional, if it has been set, otherwise returns nullptr */
    bool* GetBlockRewardAfterLevelOrNull() { if (BlockRewardAfterLevel_IsSet) return &BlockRewardAfterLevel_Optional; return nullptr; }
    /** @brief Returns a pointer to BlockRewardAfterLevel_Optional, if it has been set, otherwise returns nullptr */
    const bool* GetBlockRewardAfterLevelOrNull() const { if (BlockRewardAfterLevel_IsSet) return &BlockRewardAfterLevel_Optional; return nullptr; }
    /** @brief Sets the value of BlockRewardAfterLevel_Optional and also sets BlockRewardAfterLevel_IsSet to true */
    void SetBlockRewardAfterLevel(bool NewValue) { BlockRewardAfterLevel_Optional = NewValue; BlockRewardAfterLevel_IsSet = true; }
     /** @brief Clears the value of BlockRewardAfterLevel_Optional and sets BlockRewardAfterLevel_IsSet to false */
    void ClearBlockRewardAfterLevel() { BlockRewardAfterLevel_Optional = false; BlockRewardAfterLevel_IsSet = false; }
    /** @brief Returns true if BlockRewardAfterLevel_Optional is set and matches the default value */
    bool IsBlockRewardAfterLevelDefaultValue() const { return BlockRewardAfterLevel_IsSet && BlockRewardAfterLevel_Optional == false; }
    /** @brief Sets the value of BlockRewardAfterLevel_Optional to its default and also sets BlockRewardAfterLevel_IsSet to true */
    void SetBlockRewardAfterLevelToDefault() { BlockRewardAfterLevel_Optional = false; BlockRewardAfterLevel_IsSet = true; }

    /** @brief The server tick rate */
    int32 Servertickrate_Optional{  };
    /** @brief true if Servertickrate_Optional has been set to a value */
    bool Servertickrate_IsSet{ false };
    /** @brief Gets the value of Servertickrate_Optional, regardless of it having been set */
    int32& GetServertickrate() { return Servertickrate_Optional; }
    /** @brief Gets the value of Servertickrate_Optional, regardless of it having been set */
    const int32& GetServertickrate() const { return Servertickrate_Optional; }
    /** @brief Gets the value of Servertickrate_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetServertickrate(const int32& DefaultValue) const { if (Servertickrate_IsSet) return Servertickrate_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Servertickrate_Optional and returns true if it has been set, otherwise returns false */
    bool GetServertickrate(int32& OutValue) const { if (Servertickrate_IsSet) OutValue = Servertickrate_Optional; return Servertickrate_IsSet; }
    /** @brief Returns a pointer to Servertickrate_Optional, if it has been set, otherwise returns nullptr */
    int32* GetServertickrateOrNull() { if (Servertickrate_IsSet) return &Servertickrate_Optional; return nullptr; }
    /** @brief Returns a pointer to Servertickrate_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetServertickrateOrNull() const { if (Servertickrate_IsSet) return &Servertickrate_Optional; return nullptr; }
    /** @brief Sets the value of Servertickrate_Optional and also sets Servertickrate_IsSet to true */
    void SetServertickrate(int32 NewValue) { Servertickrate_Optional = NewValue; Servertickrate_IsSet = true; }
     /** @brief Clears the value of Servertickrate_Optional and sets Servertickrate_IsSet to false */
    void ClearServertickrate() { Servertickrate_Optional = 30; Servertickrate_IsSet = false; }
    /** @brief Returns true if Servertickrate_Optional is set and matches the default value */
    bool IsServertickrateDefaultValue() const { return Servertickrate_IsSet && Servertickrate_Optional == 30; }
    /** @brief Sets the value of Servertickrate_Optional to its default and also sets Servertickrate_IsSet to true */
    void SetServertickrateToDefault() { Servertickrate_Optional = 30; Servertickrate_IsSet = true; }

    /** @brief Tick rate threshold before the instance is considered fubar */
    int32 Serverfubartickrate_Optional{  };
    /** @brief true if Serverfubartickrate_Optional has been set to a value */
    bool Serverfubartickrate_IsSet{ false };
    /** @brief Gets the value of Serverfubartickrate_Optional, regardless of it having been set */
    int32& GetServerfubartickrate() { return Serverfubartickrate_Optional; }
    /** @brief Gets the value of Serverfubartickrate_Optional, regardless of it having been set */
    const int32& GetServerfubartickrate() const { return Serverfubartickrate_Optional; }
    /** @brief Gets the value of Serverfubartickrate_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetServerfubartickrate(const int32& DefaultValue) const { if (Serverfubartickrate_IsSet) return Serverfubartickrate_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Serverfubartickrate_Optional and returns true if it has been set, otherwise returns false */
    bool GetServerfubartickrate(int32& OutValue) const { if (Serverfubartickrate_IsSet) OutValue = Serverfubartickrate_Optional; return Serverfubartickrate_IsSet; }
    /** @brief Returns a pointer to Serverfubartickrate_Optional, if it has been set, otherwise returns nullptr */
    int32* GetServerfubartickrateOrNull() { if (Serverfubartickrate_IsSet) return &Serverfubartickrate_Optional; return nullptr; }
    /** @brief Returns a pointer to Serverfubartickrate_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetServerfubartickrateOrNull() const { if (Serverfubartickrate_IsSet) return &Serverfubartickrate_Optional; return nullptr; }
    /** @brief Sets the value of Serverfubartickrate_Optional and also sets Serverfubartickrate_IsSet to true */
    void SetServerfubartickrate(int32 NewValue) { Serverfubartickrate_Optional = NewValue; Serverfubartickrate_IsSet = true; }
     /** @brief Clears the value of Serverfubartickrate_Optional and sets Serverfubartickrate_IsSet to false */
    void ClearServerfubartickrate() { Serverfubartickrate_Optional = 20; Serverfubartickrate_IsSet = false; }
    /** @brief Returns true if Serverfubartickrate_Optional is set and matches the default value */
    bool IsServerfubartickrateDefaultValue() const { return Serverfubartickrate_IsSet && Serverfubartickrate_Optional == 20; }
    /** @brief Sets the value of Serverfubartickrate_Optional to its default and also sets Serverfubartickrate_IsSet to true */
    void SetServerfubartickrateToDefault() { Serverfubartickrate_Optional = 20; Serverfubartickrate_IsSet = true; }

    /** @brief How long to wait to allow players to connect */
    int32 Playerconnectwait_Optional{  };
    /** @brief true if Playerconnectwait_Optional has been set to a value */
    bool Playerconnectwait_IsSet{ false };
    /** @brief Gets the value of Playerconnectwait_Optional, regardless of it having been set */
    int32& GetPlayerconnectwait() { return Playerconnectwait_Optional; }
    /** @brief Gets the value of Playerconnectwait_Optional, regardless of it having been set */
    const int32& GetPlayerconnectwait() const { return Playerconnectwait_Optional; }
    /** @brief Gets the value of Playerconnectwait_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetPlayerconnectwait(const int32& DefaultValue) const { if (Playerconnectwait_IsSet) return Playerconnectwait_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Playerconnectwait_Optional and returns true if it has been set, otherwise returns false */
    bool GetPlayerconnectwait(int32& OutValue) const { if (Playerconnectwait_IsSet) OutValue = Playerconnectwait_Optional; return Playerconnectwait_IsSet; }
    /** @brief Returns a pointer to Playerconnectwait_Optional, if it has been set, otherwise returns nullptr */
    int32* GetPlayerconnectwaitOrNull() { if (Playerconnectwait_IsSet) return &Playerconnectwait_Optional; return nullptr; }
    /** @brief Returns a pointer to Playerconnectwait_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetPlayerconnectwaitOrNull() const { if (Playerconnectwait_IsSet) return &Playerconnectwait_Optional; return nullptr; }
    /** @brief Sets the value of Playerconnectwait_Optional and also sets Playerconnectwait_IsSet to true */
    void SetPlayerconnectwait(int32 NewValue) { Playerconnectwait_Optional = NewValue; Playerconnectwait_IsSet = true; }
     /** @brief Clears the value of Playerconnectwait_Optional and sets Playerconnectwait_IsSet to false */
    void ClearPlayerconnectwait() { Playerconnectwait_Optional = 90; Playerconnectwait_IsSet = false; }
    /** @brief Returns true if Playerconnectwait_Optional is set and matches the default value */
    bool IsPlayerconnectwaitDefaultValue() const { return Playerconnectwait_IsSet && Playerconnectwait_Optional == 90; }
    /** @brief Sets the value of Playerconnectwait_Optional to its default and also sets Playerconnectwait_IsSet to true */
    void SetPlayerconnectwaitToDefault() { Playerconnectwait_Optional = 90; Playerconnectwait_IsSet = true; }

    /** @brief The threshold of acceptable physics */
    float Physicsthreshold_Optional{  };
    /** @brief true if Physicsthreshold_Optional has been set to a value */
    bool Physicsthreshold_IsSet{ false };
    /** @brief Gets the value of Physicsthreshold_Optional, regardless of it having been set */
    float& GetPhysicsthreshold() { return Physicsthreshold_Optional; }
    /** @brief Gets the value of Physicsthreshold_Optional, regardless of it having been set */
    const float& GetPhysicsthreshold() const { return Physicsthreshold_Optional; }
    /** @brief Gets the value of Physicsthreshold_Optional, if it has been set, otherwise it returns DefaultValue */
    const float& GetPhysicsthreshold(const float& DefaultValue) const { if (Physicsthreshold_IsSet) return Physicsthreshold_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Physicsthreshold_Optional and returns true if it has been set, otherwise returns false */
    bool GetPhysicsthreshold(float& OutValue) const { if (Physicsthreshold_IsSet) OutValue = Physicsthreshold_Optional; return Physicsthreshold_IsSet; }
    /** @brief Returns a pointer to Physicsthreshold_Optional, if it has been set, otherwise returns nullptr */
    float* GetPhysicsthresholdOrNull() { if (Physicsthreshold_IsSet) return &Physicsthreshold_Optional; return nullptr; }
    /** @brief Returns a pointer to Physicsthreshold_Optional, if it has been set, otherwise returns nullptr */
    const float* GetPhysicsthresholdOrNull() const { if (Physicsthreshold_IsSet) return &Physicsthreshold_Optional; return nullptr; }
    /** @brief Sets the value of Physicsthreshold_Optional and also sets Physicsthreshold_IsSet to true */
    void SetPhysicsthreshold(float NewValue) { Physicsthreshold_Optional = NewValue; Physicsthreshold_IsSet = true; }
     /** @brief Clears the value of Physicsthreshold_Optional and sets Physicsthreshold_IsSet to false */
    void ClearPhysicsthreshold() { Physicsthreshold_IsSet = false; }

    /** @brief Which performance group instances for this match belong to */
    int32 PerformanceGroup_Optional{  };
    /** @brief true if PerformanceGroup_Optional has been set to a value */
    bool PerformanceGroup_IsSet{ false };
    /** @brief Gets the value of PerformanceGroup_Optional, regardless of it having been set */
    int32& GetPerformanceGroup() { return PerformanceGroup_Optional; }
    /** @brief Gets the value of PerformanceGroup_Optional, regardless of it having been set */
    const int32& GetPerformanceGroup() const { return PerformanceGroup_Optional; }
    /** @brief Gets the value of PerformanceGroup_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetPerformanceGroup(const int32& DefaultValue) const { if (PerformanceGroup_IsSet) return PerformanceGroup_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of PerformanceGroup_Optional and returns true if it has been set, otherwise returns false */
    bool GetPerformanceGroup(int32& OutValue) const { if (PerformanceGroup_IsSet) OutValue = PerformanceGroup_Optional; return PerformanceGroup_IsSet; }
    /** @brief Returns a pointer to PerformanceGroup_Optional, if it has been set, otherwise returns nullptr */
    int32* GetPerformanceGroupOrNull() { if (PerformanceGroup_IsSet) return &PerformanceGroup_Optional; return nullptr; }
    /** @brief Returns a pointer to PerformanceGroup_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetPerformanceGroupOrNull() const { if (PerformanceGroup_IsSet) return &PerformanceGroup_Optional; return nullptr; }
    /** @brief Sets the value of PerformanceGroup_Optional and also sets PerformanceGroup_IsSet to true */
    void SetPerformanceGroup(int32 NewValue) { PerformanceGroup_Optional = NewValue; PerformanceGroup_IsSet = true; }
     /** @brief Clears the value of PerformanceGroup_Optional and sets PerformanceGroup_IsSet to false */
    void ClearPerformanceGroup() { PerformanceGroup_Optional = 0; PerformanceGroup_IsSet = false; }
    /** @brief Returns true if PerformanceGroup_Optional is set and matches the default value */
    bool IsPerformanceGroupDefaultValue() const { return PerformanceGroup_IsSet && PerformanceGroup_Optional == 0; }
    /** @brief Sets the value of PerformanceGroup_Optional to its default and also sets PerformanceGroup_IsSet to true */
    void SetPerformanceGroupToDefault() { PerformanceGroup_Optional = 0; PerformanceGroup_IsSet = true; }

    /** @brief The game mode ValidValue */
    int32 GameModeValueId_Optional{  };
    /** @brief true if GameModeValueId_Optional has been set to a value */
    bool GameModeValueId_IsSet{ false };
    /** @brief Gets the value of GameModeValueId_Optional, regardless of it having been set */
    int32& GetGameModeValueId() { return GameModeValueId_Optional; }
    /** @brief Gets the value of GameModeValueId_Optional, regardless of it having been set */
    const int32& GetGameModeValueId() const { return GameModeValueId_Optional; }
    /** @brief Gets the value of GameModeValueId_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetGameModeValueId(const int32& DefaultValue) const { if (GameModeValueId_IsSet) return GameModeValueId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of GameModeValueId_Optional and returns true if it has been set, otherwise returns false */
    bool GetGameModeValueId(int32& OutValue) const { if (GameModeValueId_IsSet) OutValue = GameModeValueId_Optional; return GameModeValueId_IsSet; }
    /** @brief Returns a pointer to GameModeValueId_Optional, if it has been set, otherwise returns nullptr */
    int32* GetGameModeValueIdOrNull() { if (GameModeValueId_IsSet) return &GameModeValueId_Optional; return nullptr; }
    /** @brief Returns a pointer to GameModeValueId_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetGameModeValueIdOrNull() const { if (GameModeValueId_IsSet) return &GameModeValueId_Optional; return nullptr; }
    /** @brief Sets the value of GameModeValueId_Optional and also sets GameModeValueId_IsSet to true */
    void SetGameModeValueId(int32 NewValue) { GameModeValueId_Optional = NewValue; GameModeValueId_IsSet = true; }
     /** @brief Clears the value of GameModeValueId_Optional and sets GameModeValueId_IsSet to false */
    void ClearGameModeValueId() { GameModeValueId_Optional = 0; GameModeValueId_IsSet = false; }
    /** @brief Returns true if GameModeValueId_Optional is set and matches the default value */
    bool IsGameModeValueIdDefaultValue() const { return GameModeValueId_IsSet && GameModeValueId_Optional == 0; }
    /** @brief Sets the value of GameModeValueId_Optional to its default and also sets GameModeValueId_IsSet to true */
    void SetGameModeValueIdToDefault() { GameModeValueId_Optional = 0; GameModeValueId_IsSet = true; }

    /** @brief How frequently a match should be surveyed */
    int32 SurveyFreq_Optional{  };
    /** @brief true if SurveyFreq_Optional has been set to a value */
    bool SurveyFreq_IsSet{ false };
    /** @brief Gets the value of SurveyFreq_Optional, regardless of it having been set */
    int32& GetSurveyFreq() { return SurveyFreq_Optional; }
    /** @brief Gets the value of SurveyFreq_Optional, regardless of it having been set */
    const int32& GetSurveyFreq() const { return SurveyFreq_Optional; }
    /** @brief Gets the value of SurveyFreq_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetSurveyFreq(const int32& DefaultValue) const { if (SurveyFreq_IsSet) return SurveyFreq_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of SurveyFreq_Optional and returns true if it has been set, otherwise returns false */
    bool GetSurveyFreq(int32& OutValue) const { if (SurveyFreq_IsSet) OutValue = SurveyFreq_Optional; return SurveyFreq_IsSet; }
    /** @brief Returns a pointer to SurveyFreq_Optional, if it has been set, otherwise returns nullptr */
    int32* GetSurveyFreqOrNull() { if (SurveyFreq_IsSet) return &SurveyFreq_Optional; return nullptr; }
    /** @brief Returns a pointer to SurveyFreq_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetSurveyFreqOrNull() const { if (SurveyFreq_IsSet) return &SurveyFreq_Optional; return nullptr; }
    /** @brief Sets the value of SurveyFreq_Optional and also sets SurveyFreq_IsSet to true */
    void SetSurveyFreq(int32 NewValue) { SurveyFreq_Optional = NewValue; SurveyFreq_IsSet = true; }
     /** @brief Clears the value of SurveyFreq_Optional and sets SurveyFreq_IsSet to false */
    void ClearSurveyFreq() { SurveyFreq_Optional = 0; SurveyFreq_IsSet = false; }
    /** @brief Returns true if SurveyFreq_Optional is set and matches the default value */
    bool IsSurveyFreqDefaultValue() const { return SurveyFreq_IsSet && SurveyFreq_Optional == 0; }
    /** @brief Sets the value of SurveyFreq_Optional to its default and also sets SurveyFreq_IsSet to true */
    void SetSurveyFreqToDefault() { SurveyFreq_Optional = 0; SurveyFreq_IsSet = true; }

    /** @brief Whether or not players should be allowed to choose their own taskforce */
    bool NoTaskforceSelection_Optional{  };
    /** @brief true if NoTaskforceSelection_Optional has been set to a value */
    bool NoTaskforceSelection_IsSet{ false };
    /** @brief Gets the value of NoTaskforceSelection_Optional, regardless of it having been set */
    bool& GetNoTaskforceSelection() { return NoTaskforceSelection_Optional; }
    /** @brief Gets the value of NoTaskforceSelection_Optional, regardless of it having been set */
    const bool& GetNoTaskforceSelection() const { return NoTaskforceSelection_Optional; }
    /** @brief Gets the value of NoTaskforceSelection_Optional, if it has been set, otherwise it returns DefaultValue */
    const bool& GetNoTaskforceSelection(const bool& DefaultValue) const { if (NoTaskforceSelection_IsSet) return NoTaskforceSelection_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of NoTaskforceSelection_Optional and returns true if it has been set, otherwise returns false */
    bool GetNoTaskforceSelection(bool& OutValue) const { if (NoTaskforceSelection_IsSet) OutValue = NoTaskforceSelection_Optional; return NoTaskforceSelection_IsSet; }
    /** @brief Returns a pointer to NoTaskforceSelection_Optional, if it has been set, otherwise returns nullptr */
    bool* GetNoTaskforceSelectionOrNull() { if (NoTaskforceSelection_IsSet) return &NoTaskforceSelection_Optional; return nullptr; }
    /** @brief Returns a pointer to NoTaskforceSelection_Optional, if it has been set, otherwise returns nullptr */
    const bool* GetNoTaskforceSelectionOrNull() const { if (NoTaskforceSelection_IsSet) return &NoTaskforceSelection_Optional; return nullptr; }
    /** @brief Sets the value of NoTaskforceSelection_Optional and also sets NoTaskforceSelection_IsSet to true */
    void SetNoTaskforceSelection(bool NewValue) { NoTaskforceSelection_Optional = NewValue; NoTaskforceSelection_IsSet = true; }
     /** @brief Clears the value of NoTaskforceSelection_Optional and sets NoTaskforceSelection_IsSet to false */
    void ClearNoTaskforceSelection() { NoTaskforceSelection_Optional = false; NoTaskforceSelection_IsSet = false; }
    /** @brief Returns true if NoTaskforceSelection_Optional is set and matches the default value */
    bool IsNoTaskforceSelectionDefaultValue() const { return NoTaskforceSelection_IsSet && NoTaskforceSelection_Optional == false; }
    /** @brief Sets the value of NoTaskforceSelection_Optional to its default and also sets NoTaskforceSelection_IsSet to true */
    void SetNoTaskforceSelectionToDefault() { NoTaskforceSelection_Optional = false; NoTaskforceSelection_IsSet = true; }

    /** @brief Whether or not client stats should be recorded */
    bool RecordClientStats_Optional{  };
    /** @brief true if RecordClientStats_Optional has been set to a value */
    bool RecordClientStats_IsSet{ false };
    /** @brief Gets the value of RecordClientStats_Optional, regardless of it having been set */
    bool& GetRecordClientStats() { return RecordClientStats_Optional; }
    /** @brief Gets the value of RecordClientStats_Optional, regardless of it having been set */
    const bool& GetRecordClientStats() const { return RecordClientStats_Optional; }
    /** @brief Gets the value of RecordClientStats_Optional, if it has been set, otherwise it returns DefaultValue */
    const bool& GetRecordClientStats(const bool& DefaultValue) const { if (RecordClientStats_IsSet) return RecordClientStats_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of RecordClientStats_Optional and returns true if it has been set, otherwise returns false */
    bool GetRecordClientStats(bool& OutValue) const { if (RecordClientStats_IsSet) OutValue = RecordClientStats_Optional; return RecordClientStats_IsSet; }
    /** @brief Returns a pointer to RecordClientStats_Optional, if it has been set, otherwise returns nullptr */
    bool* GetRecordClientStatsOrNull() { if (RecordClientStats_IsSet) return &RecordClientStats_Optional; return nullptr; }
    /** @brief Returns a pointer to RecordClientStats_Optional, if it has been set, otherwise returns nullptr */
    const bool* GetRecordClientStatsOrNull() const { if (RecordClientStats_IsSet) return &RecordClientStats_Optional; return nullptr; }
    /** @brief Sets the value of RecordClientStats_Optional and also sets RecordClientStats_IsSet to true */
    void SetRecordClientStats(bool NewValue) { RecordClientStats_Optional = NewValue; RecordClientStats_IsSet = true; }
     /** @brief Clears the value of RecordClientStats_Optional and sets RecordClientStats_IsSet to false */
    void ClearRecordClientStats() { RecordClientStats_Optional = false; RecordClientStats_IsSet = false; }
    /** @brief Returns true if RecordClientStats_Optional is set and matches the default value */
    bool IsRecordClientStatsDefaultValue() const { return RecordClientStats_IsSet && RecordClientStats_Optional == false; }
    /** @brief Sets the value of RecordClientStats_Optional to its default and also sets RecordClientStats_IsSet to true */
    void SetRecordClientStatsToDefault() { RecordClientStats_Optional = false; RecordClientStats_IsSet = true; }

    /** @brief How frequently stats should be written to the DB */
    int32 ServerDBStatWriteSeconds_Optional{  };
    /** @brief true if ServerDBStatWriteSeconds_Optional has been set to a value */
    bool ServerDBStatWriteSeconds_IsSet{ false };
    /** @brief Gets the value of ServerDBStatWriteSeconds_Optional, regardless of it having been set */
    int32& GetServerDBStatWriteSeconds() { return ServerDBStatWriteSeconds_Optional; }
    /** @brief Gets the value of ServerDBStatWriteSeconds_Optional, regardless of it having been set */
    const int32& GetServerDBStatWriteSeconds() const { return ServerDBStatWriteSeconds_Optional; }
    /** @brief Gets the value of ServerDBStatWriteSeconds_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetServerDBStatWriteSeconds(const int32& DefaultValue) const { if (ServerDBStatWriteSeconds_IsSet) return ServerDBStatWriteSeconds_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of ServerDBStatWriteSeconds_Optional and returns true if it has been set, otherwise returns false */
    bool GetServerDBStatWriteSeconds(int32& OutValue) const { if (ServerDBStatWriteSeconds_IsSet) OutValue = ServerDBStatWriteSeconds_Optional; return ServerDBStatWriteSeconds_IsSet; }
    /** @brief Returns a pointer to ServerDBStatWriteSeconds_Optional, if it has been set, otherwise returns nullptr */
    int32* GetServerDBStatWriteSecondsOrNull() { if (ServerDBStatWriteSeconds_IsSet) return &ServerDBStatWriteSeconds_Optional; return nullptr; }
    /** @brief Returns a pointer to ServerDBStatWriteSeconds_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetServerDBStatWriteSecondsOrNull() const { if (ServerDBStatWriteSeconds_IsSet) return &ServerDBStatWriteSeconds_Optional; return nullptr; }
    /** @brief Sets the value of ServerDBStatWriteSeconds_Optional and also sets ServerDBStatWriteSeconds_IsSet to true */
    void SetServerDBStatWriteSeconds(int32 NewValue) { ServerDBStatWriteSeconds_Optional = NewValue; ServerDBStatWriteSeconds_IsSet = true; }
     /** @brief Clears the value of ServerDBStatWriteSeconds_Optional and sets ServerDBStatWriteSeconds_IsSet to false */
    void ClearServerDBStatWriteSeconds() { ServerDBStatWriteSeconds_Optional = 10; ServerDBStatWriteSeconds_IsSet = false; }
    /** @brief Returns true if ServerDBStatWriteSeconds_Optional is set and matches the default value */
    bool IsServerDBStatWriteSecondsDefaultValue() const { return ServerDBStatWriteSeconds_IsSet && ServerDBStatWriteSeconds_Optional == 10; }
    /** @brief Sets the value of ServerDBStatWriteSeconds_Optional to its default and also sets ServerDBStatWriteSeconds_IsSet to true */
    void SetServerDBStatWriteSecondsToDefault() { ServerDBStatWriteSeconds_Optional = 10; ServerDBStatWriteSeconds_IsSet = true; }

    /** @brief Minimum number of players required on each team */
    int32 MinPlayersPerTeam_Optional{  };
    /** @brief true if MinPlayersPerTeam_Optional has been set to a value */
    bool MinPlayersPerTeam_IsSet{ false };
    /** @brief Gets the value of MinPlayersPerTeam_Optional, regardless of it having been set */
    int32& GetMinPlayersPerTeam() { return MinPlayersPerTeam_Optional; }
    /** @brief Gets the value of MinPlayersPerTeam_Optional, regardless of it having been set */
    const int32& GetMinPlayersPerTeam() const { return MinPlayersPerTeam_Optional; }
    /** @brief Gets the value of MinPlayersPerTeam_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetMinPlayersPerTeam(const int32& DefaultValue) const { if (MinPlayersPerTeam_IsSet) return MinPlayersPerTeam_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of MinPlayersPerTeam_Optional and returns true if it has been set, otherwise returns false */
    bool GetMinPlayersPerTeam(int32& OutValue) const { if (MinPlayersPerTeam_IsSet) OutValue = MinPlayersPerTeam_Optional; return MinPlayersPerTeam_IsSet; }
    /** @brief Returns a pointer to MinPlayersPerTeam_Optional, if it has been set, otherwise returns nullptr */
    int32* GetMinPlayersPerTeamOrNull() { if (MinPlayersPerTeam_IsSet) return &MinPlayersPerTeam_Optional; return nullptr; }
    /** @brief Returns a pointer to MinPlayersPerTeam_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetMinPlayersPerTeamOrNull() const { if (MinPlayersPerTeam_IsSet) return &MinPlayersPerTeam_Optional; return nullptr; }
    /** @brief Sets the value of MinPlayersPerTeam_Optional and also sets MinPlayersPerTeam_IsSet to true */
    void SetMinPlayersPerTeam(int32 NewValue) { MinPlayersPerTeam_Optional = NewValue; MinPlayersPerTeam_IsSet = true; }
     /** @brief Clears the value of MinPlayersPerTeam_Optional and sets MinPlayersPerTeam_IsSet to false */
    void ClearMinPlayersPerTeam() { MinPlayersPerTeam_Optional = 4; MinPlayersPerTeam_IsSet = false; }
    /** @brief Returns true if MinPlayersPerTeam_Optional is set and matches the default value */
    bool IsMinPlayersPerTeamDefaultValue() const { return MinPlayersPerTeam_IsSet && MinPlayersPerTeam_Optional == 4; }
    /** @brief Sets the value of MinPlayersPerTeam_Optional to its default and also sets MinPlayersPerTeam_IsSet to true */
    void SetMinPlayersPerTeamToDefault() { MinPlayersPerTeam_Optional = 4; MinPlayersPerTeam_IsSet = true; }

    /** @brief Maximum number of players allowed on each team */
    int32 MaxPlayersPerTeam_Optional{  };
    /** @brief true if MaxPlayersPerTeam_Optional has been set to a value */
    bool MaxPlayersPerTeam_IsSet{ false };
    /** @brief Gets the value of MaxPlayersPerTeam_Optional, regardless of it having been set */
    int32& GetMaxPlayersPerTeam() { return MaxPlayersPerTeam_Optional; }
    /** @brief Gets the value of MaxPlayersPerTeam_Optional, regardless of it having been set */
    const int32& GetMaxPlayersPerTeam() const { return MaxPlayersPerTeam_Optional; }
    /** @brief Gets the value of MaxPlayersPerTeam_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetMaxPlayersPerTeam(const int32& DefaultValue) const { if (MaxPlayersPerTeam_IsSet) return MaxPlayersPerTeam_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of MaxPlayersPerTeam_Optional and returns true if it has been set, otherwise returns false */
    bool GetMaxPlayersPerTeam(int32& OutValue) const { if (MaxPlayersPerTeam_IsSet) OutValue = MaxPlayersPerTeam_Optional; return MaxPlayersPerTeam_IsSet; }
    /** @brief Returns a pointer to MaxPlayersPerTeam_Optional, if it has been set, otherwise returns nullptr */
    int32* GetMaxPlayersPerTeamOrNull() { if (MaxPlayersPerTeam_IsSet) return &MaxPlayersPerTeam_Optional; return nullptr; }
    /** @brief Returns a pointer to MaxPlayersPerTeam_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetMaxPlayersPerTeamOrNull() const { if (MaxPlayersPerTeam_IsSet) return &MaxPlayersPerTeam_Optional; return nullptr; }
    /** @brief Sets the value of MaxPlayersPerTeam_Optional and also sets MaxPlayersPerTeam_IsSet to true */
    void SetMaxPlayersPerTeam(int32 NewValue) { MaxPlayersPerTeam_Optional = NewValue; MaxPlayersPerTeam_IsSet = true; }
     /** @brief Clears the value of MaxPlayersPerTeam_Optional and sets MaxPlayersPerTeam_IsSet to false */
    void ClearMaxPlayersPerTeam() { MaxPlayersPerTeam_Optional = 4; MaxPlayersPerTeam_IsSet = false; }
    /** @brief Returns true if MaxPlayersPerTeam_Optional is set and matches the default value */
    bool IsMaxPlayersPerTeamDefaultValue() const { return MaxPlayersPerTeam_IsSet && MaxPlayersPerTeam_Optional == 4; }
    /** @brief Sets the value of MaxPlayersPerTeam_Optional to its default and also sets MaxPlayersPerTeam_IsSet to true */
    void SetMaxPlayersPerTeamToDefault() { MaxPlayersPerTeam_Optional = 4; MaxPlayersPerTeam_IsSet = true; }

    /** @brief Whether or not these matches can be spectated without a delay */
    bool Allowlivespectate_Optional{  };
    /** @brief true if Allowlivespectate_Optional has been set to a value */
    bool Allowlivespectate_IsSet{ false };
    /** @brief Gets the value of Allowlivespectate_Optional, regardless of it having been set */
    bool& GetAllowlivespectate() { return Allowlivespectate_Optional; }
    /** @brief Gets the value of Allowlivespectate_Optional, regardless of it having been set */
    const bool& GetAllowlivespectate() const { return Allowlivespectate_Optional; }
    /** @brief Gets the value of Allowlivespectate_Optional, if it has been set, otherwise it returns DefaultValue */
    const bool& GetAllowlivespectate(const bool& DefaultValue) const { if (Allowlivespectate_IsSet) return Allowlivespectate_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Allowlivespectate_Optional and returns true if it has been set, otherwise returns false */
    bool GetAllowlivespectate(bool& OutValue) const { if (Allowlivespectate_IsSet) OutValue = Allowlivespectate_Optional; return Allowlivespectate_IsSet; }
    /** @brief Returns a pointer to Allowlivespectate_Optional, if it has been set, otherwise returns nullptr */
    bool* GetAllowlivespectateOrNull() { if (Allowlivespectate_IsSet) return &Allowlivespectate_Optional; return nullptr; }
    /** @brief Returns a pointer to Allowlivespectate_Optional, if it has been set, otherwise returns nullptr */
    const bool* GetAllowlivespectateOrNull() const { if (Allowlivespectate_IsSet) return &Allowlivespectate_Optional; return nullptr; }
    /** @brief Sets the value of Allowlivespectate_Optional and also sets Allowlivespectate_IsSet to true */
    void SetAllowlivespectate(bool NewValue) { Allowlivespectate_Optional = NewValue; Allowlivespectate_IsSet = true; }
     /** @brief Clears the value of Allowlivespectate_Optional and sets Allowlivespectate_IsSet to false */
    void ClearAllowlivespectate() { Allowlivespectate_Optional = false; Allowlivespectate_IsSet = false; }
    /** @brief Returns true if Allowlivespectate_Optional is set and matches the default value */
    bool IsAllowlivespectateDefaultValue() const { return Allowlivespectate_IsSet && Allowlivespectate_Optional == false; }
    /** @brief Sets the value of Allowlivespectate_Optional to its default and also sets Allowlivespectate_IsSet to true */
    void SetAllowlivespectateToDefault() { Allowlivespectate_Optional = false; Allowlivespectate_IsSet = true; }

    /** @brief Queue id */
    int32 MatchQueueId_Optional{  };
    /** @brief true if MatchQueueId_Optional has been set to a value */
    bool MatchQueueId_IsSet{ false };
    /** @brief Gets the value of MatchQueueId_Optional, regardless of it having been set */
    int32& GetMatchQueueId() { return MatchQueueId_Optional; }
    /** @brief Gets the value of MatchQueueId_Optional, regardless of it having been set */
    const int32& GetMatchQueueId() const { return MatchQueueId_Optional; }
    /** @brief Gets the value of MatchQueueId_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetMatchQueueId(const int32& DefaultValue) const { if (MatchQueueId_IsSet) return MatchQueueId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of MatchQueueId_Optional and returns true if it has been set, otherwise returns false */
    bool GetMatchQueueId(int32& OutValue) const { if (MatchQueueId_IsSet) OutValue = MatchQueueId_Optional; return MatchQueueId_IsSet; }
    /** @brief Returns a pointer to MatchQueueId_Optional, if it has been set, otherwise returns nullptr */
    int32* GetMatchQueueIdOrNull() { if (MatchQueueId_IsSet) return &MatchQueueId_Optional; return nullptr; }
    /** @brief Returns a pointer to MatchQueueId_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetMatchQueueIdOrNull() const { if (MatchQueueId_IsSet) return &MatchQueueId_Optional; return nullptr; }
    /** @brief Sets the value of MatchQueueId_Optional and also sets MatchQueueId_IsSet to true */
    void SetMatchQueueId(int32 NewValue) { MatchQueueId_Optional = NewValue; MatchQueueId_IsSet = true; }
     /** @brief Clears the value of MatchQueueId_Optional and sets MatchQueueId_IsSet to false */
    void ClearMatchQueueId() { MatchQueueId_Optional = 0; MatchQueueId_IsSet = false; }
    /** @brief Returns true if MatchQueueId_Optional is set and matches the default value */
    bool IsMatchQueueIdDefaultValue() const { return MatchQueueId_IsSet && MatchQueueId_Optional == 0; }
    /** @brief Sets the value of MatchQueueId_Optional to its default and also sets MatchQueueId_IsSet to true */
    void SetMatchQueueIdToDefault() { MatchQueueId_Optional = 0; MatchQueueId_IsSet = true; }

    /** @brief Whether or not leaving these matches should give deserter */
    bool DeserterFlag_Optional{  };
    /** @brief true if DeserterFlag_Optional has been set to a value */
    bool DeserterFlag_IsSet{ false };
    /** @brief Gets the value of DeserterFlag_Optional, regardless of it having been set */
    bool& GetDeserterFlag() { return DeserterFlag_Optional; }
    /** @brief Gets the value of DeserterFlag_Optional, regardless of it having been set */
    const bool& GetDeserterFlag() const { return DeserterFlag_Optional; }
    /** @brief Gets the value of DeserterFlag_Optional, if it has been set, otherwise it returns DefaultValue */
    const bool& GetDeserterFlag(const bool& DefaultValue) const { if (DeserterFlag_IsSet) return DeserterFlag_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of DeserterFlag_Optional and returns true if it has been set, otherwise returns false */
    bool GetDeserterFlag(bool& OutValue) const { if (DeserterFlag_IsSet) OutValue = DeserterFlag_Optional; return DeserterFlag_IsSet; }
    /** @brief Returns a pointer to DeserterFlag_Optional, if it has been set, otherwise returns nullptr */
    bool* GetDeserterFlagOrNull() { if (DeserterFlag_IsSet) return &DeserterFlag_Optional; return nullptr; }
    /** @brief Returns a pointer to DeserterFlag_Optional, if it has been set, otherwise returns nullptr */
    const bool* GetDeserterFlagOrNull() const { if (DeserterFlag_IsSet) return &DeserterFlag_Optional; return nullptr; }
    /** @brief Sets the value of DeserterFlag_Optional and also sets DeserterFlag_IsSet to true */
    void SetDeserterFlag(bool NewValue) { DeserterFlag_Optional = NewValue; DeserterFlag_IsSet = true; }
     /** @brief Clears the value of DeserterFlag_Optional and sets DeserterFlag_IsSet to false */
    void ClearDeserterFlag() { DeserterFlag_Optional = false; DeserterFlag_IsSet = false; }
    /** @brief Returns true if DeserterFlag_Optional is set and matches the default value */
    bool IsDeserterFlagDefaultValue() const { return DeserterFlag_IsSet && DeserterFlag_Optional == false; }
    /** @brief Sets the value of DeserterFlag_Optional to its default and also sets DeserterFlag_IsSet to true */
    void SetDeserterFlagToDefault() { DeserterFlag_Optional = false; DeserterFlag_IsSet = true; }

    /** @brief Rank id */
    int32 RankingTypeId_Optional{  };
    /** @brief true if RankingTypeId_Optional has been set to a value */
    bool RankingTypeId_IsSet{ false };
    /** @brief Gets the value of RankingTypeId_Optional, regardless of it having been set */
    int32& GetRankingTypeId() { return RankingTypeId_Optional; }
    /** @brief Gets the value of RankingTypeId_Optional, regardless of it having been set */
    const int32& GetRankingTypeId() const { return RankingTypeId_Optional; }
    /** @brief Gets the value of RankingTypeId_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetRankingTypeId(const int32& DefaultValue) const { if (RankingTypeId_IsSet) return RankingTypeId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of RankingTypeId_Optional and returns true if it has been set, otherwise returns false */
    bool GetRankingTypeId(int32& OutValue) const { if (RankingTypeId_IsSet) OutValue = RankingTypeId_Optional; return RankingTypeId_IsSet; }
    /** @brief Returns a pointer to RankingTypeId_Optional, if it has been set, otherwise returns nullptr */
    int32* GetRankingTypeIdOrNull() { if (RankingTypeId_IsSet) return &RankingTypeId_Optional; return nullptr; }
    /** @brief Returns a pointer to RankingTypeId_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetRankingTypeIdOrNull() const { if (RankingTypeId_IsSet) return &RankingTypeId_Optional; return nullptr; }
    /** @brief Sets the value of RankingTypeId_Optional and also sets RankingTypeId_IsSet to true */
    void SetRankingTypeId(int32 NewValue) { RankingTypeId_Optional = NewValue; RankingTypeId_IsSet = true; }
     /** @brief Clears the value of RankingTypeId_Optional and sets RankingTypeId_IsSet to false */
    void ClearRankingTypeId() { RankingTypeId_Optional = 0; RankingTypeId_IsSet = false; }
    /** @brief Returns true if RankingTypeId_Optional is set and matches the default value */
    bool IsRankingTypeIdDefaultValue() const { return RankingTypeId_IsSet && RankingTypeId_Optional == 0; }
    /** @brief Sets the value of RankingTypeId_Optional to its default and also sets RankingTypeId_IsSet to true */
    void SetRankingTypeIdToDefault() { RankingTypeId_Optional = 0; RankingTypeId_IsSet = true; }

    /** @brief Game type ValidValue */
    int32 GameTypeValueId_Optional{  };
    /** @brief true if GameTypeValueId_Optional has been set to a value */
    bool GameTypeValueId_IsSet{ false };
    /** @brief Gets the value of GameTypeValueId_Optional, regardless of it having been set */
    int32& GetGameTypeValueId() { return GameTypeValueId_Optional; }
    /** @brief Gets the value of GameTypeValueId_Optional, regardless of it having been set */
    const int32& GetGameTypeValueId() const { return GameTypeValueId_Optional; }
    /** @brief Gets the value of GameTypeValueId_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetGameTypeValueId(const int32& DefaultValue) const { if (GameTypeValueId_IsSet) return GameTypeValueId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of GameTypeValueId_Optional and returns true if it has been set, otherwise returns false */
    bool GetGameTypeValueId(int32& OutValue) const { if (GameTypeValueId_IsSet) OutValue = GameTypeValueId_Optional; return GameTypeValueId_IsSet; }
    /** @brief Returns a pointer to GameTypeValueId_Optional, if it has been set, otherwise returns nullptr */
    int32* GetGameTypeValueIdOrNull() { if (GameTypeValueId_IsSet) return &GameTypeValueId_Optional; return nullptr; }
    /** @brief Returns a pointer to GameTypeValueId_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetGameTypeValueIdOrNull() const { if (GameTypeValueId_IsSet) return &GameTypeValueId_Optional; return nullptr; }
    /** @brief Sets the value of GameTypeValueId_Optional and also sets GameTypeValueId_IsSet to true */
    void SetGameTypeValueId(int32 NewValue) { GameTypeValueId_Optional = NewValue; GameTypeValueId_IsSet = true; }
     /** @brief Clears the value of GameTypeValueId_Optional and sets GameTypeValueId_IsSet to false */
    void ClearGameTypeValueId() { GameTypeValueId_Optional = 0; GameTypeValueId_IsSet = false; }
    /** @brief Returns true if GameTypeValueId_Optional is set and matches the default value */
    bool IsGameTypeValueIdDefaultValue() const { return GameTypeValueId_IsSet && GameTypeValueId_Optional == 0; }
    /** @brief Sets the value of GameTypeValueId_Optional to its default and also sets GameTypeValueId_IsSet to true */
    void SetGameTypeValueIdToDefault() { GameTypeValueId_Optional = 0; GameTypeValueId_IsSet = true; }

    /** @brief Whether or not game should be hosted as P2P */
    bool PeerToPeer_Optional{  };
    /** @brief true if PeerToPeer_Optional has been set to a value */
    bool PeerToPeer_IsSet{ false };
    /** @brief Gets the value of PeerToPeer_Optional, regardless of it having been set */
    bool& GetPeerToPeer() { return PeerToPeer_Optional; }
    /** @brief Gets the value of PeerToPeer_Optional, regardless of it having been set */
    const bool& GetPeerToPeer() const { return PeerToPeer_Optional; }
    /** @brief Gets the value of PeerToPeer_Optional, if it has been set, otherwise it returns DefaultValue */
    const bool& GetPeerToPeer(const bool& DefaultValue) const { if (PeerToPeer_IsSet) return PeerToPeer_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of PeerToPeer_Optional and returns true if it has been set, otherwise returns false */
    bool GetPeerToPeer(bool& OutValue) const { if (PeerToPeer_IsSet) OutValue = PeerToPeer_Optional; return PeerToPeer_IsSet; }
    /** @brief Returns a pointer to PeerToPeer_Optional, if it has been set, otherwise returns nullptr */
    bool* GetPeerToPeerOrNull() { if (PeerToPeer_IsSet) return &PeerToPeer_Optional; return nullptr; }
    /** @brief Returns a pointer to PeerToPeer_Optional, if it has been set, otherwise returns nullptr */
    const bool* GetPeerToPeerOrNull() const { if (PeerToPeer_IsSet) return &PeerToPeer_Optional; return nullptr; }
    /** @brief Sets the value of PeerToPeer_Optional and also sets PeerToPeer_IsSet to true */
    void SetPeerToPeer(bool NewValue) { PeerToPeer_Optional = NewValue; PeerToPeer_IsSet = true; }
     /** @brief Clears the value of PeerToPeer_Optional and sets PeerToPeer_IsSet to false */
    void ClearPeerToPeer() { PeerToPeer_Optional = false; PeerToPeer_IsSet = false; }
    /** @brief Returns true if PeerToPeer_Optional is set and matches the default value */
    bool IsPeerToPeerDefaultValue() const { return PeerToPeer_IsSet && PeerToPeer_Optional == false; }
    /** @brief Sets the value of PeerToPeer_Optional to its default and also sets PeerToPeer_IsSet to true */
    void SetPeerToPeerToDefault() { PeerToPeer_Optional = false; PeerToPeer_IsSet = true; }
};

/** @} */
