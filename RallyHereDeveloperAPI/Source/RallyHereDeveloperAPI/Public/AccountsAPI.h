// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereDeveloperAPIAuthContext.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevAccount.h"
#include "DevAccountAuth0.h"
#include "DevAccountCreationRequest.h"
#include "DevAccountExpand.h"
#include "DevHTTPValidationError.h"
#include "Misc/TVariant.h"

namespace RallyHereDeveloperAPI
{
using RallyHereDeveloperAPI::ToStringFormatArg;
using RallyHereDeveloperAPI::WriteJsonValue;
using RallyHereDeveloperAPI::TryGetJsonValue;

struct FRequest_CreateAccount;
struct FResponse_CreateAccount;
struct FRequest_DeleteAccount;
struct FResponse_DeleteAccount;
struct FRequest_GetAccount;
struct FResponse_GetAccount;
struct FRequest_GetAccountByEmail;
struct FResponse_GetAccountByEmail;
struct FRequest_GetAccountExpand;
struct FResponse_GetAccountExpand;
struct FRequest_GetAllAccounts;
struct FResponse_GetAllAccounts;
struct FRequest_SendPasswordReset;
struct FResponse_SendPasswordReset;
struct FRequest_UpdateAccount;
struct FResponse_UpdateAccount;

DECLARE_DELEGATE_OneParam(FDelegate_CreateAccount, const FResponse_CreateAccount&);
DECLARE_DELEGATE_OneParam(FDelegate_DeleteAccount, const FResponse_DeleteAccount&);
DECLARE_DELEGATE_OneParam(FDelegate_GetAccount, const FResponse_GetAccount&);
DECLARE_DELEGATE_OneParam(FDelegate_GetAccountByEmail, const FResponse_GetAccountByEmail&);
DECLARE_DELEGATE_OneParam(FDelegate_GetAccountExpand, const FResponse_GetAccountExpand&);
DECLARE_DELEGATE_OneParam(FDelegate_GetAllAccounts, const FResponse_GetAllAccounts&);
DECLARE_DELEGATE_OneParam(FDelegate_SendPasswordReset, const FResponse_SendPasswordReset&);
DECLARE_DELEGATE_OneParam(FDelegate_UpdateAccount, const FResponse_UpdateAccount&);

class RALLYHEREDEVELOPERAPI_API FAccountsAPI : public FAPI
{
public:
    FAccountsAPI();
    virtual ~FAccountsAPI();

    FHttpRequestPtr CreateAccount(const FRequest_CreateAccount& Request, const FDelegate_CreateAccount& Delegate = FDelegate_CreateAccount(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr DeleteAccount(const FRequest_DeleteAccount& Request, const FDelegate_DeleteAccount& Delegate = FDelegate_DeleteAccount(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr GetAccount(const FRequest_GetAccount& Request, const FDelegate_GetAccount& Delegate = FDelegate_GetAccount(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr GetAccountByEmail(const FRequest_GetAccountByEmail& Request, const FDelegate_GetAccountByEmail& Delegate = FDelegate_GetAccountByEmail(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr GetAccountExpand(const FRequest_GetAccountExpand& Request, const FDelegate_GetAccountExpand& Delegate = FDelegate_GetAccountExpand(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr GetAllAccounts(const FRequest_GetAllAccounts& Request, const FDelegate_GetAllAccounts& Delegate = FDelegate_GetAllAccounts(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SendPasswordReset(const FRequest_SendPasswordReset& Request, const FDelegate_SendPasswordReset& Delegate = FDelegate_SendPasswordReset(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr UpdateAccount(const FRequest_UpdateAccount& Request, const FDelegate_UpdateAccount& Delegate = FDelegate_UpdateAccount(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);

private:
    void OnCreateAccountResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_CreateAccount Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnDeleteAccountResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_DeleteAccount Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetAccountResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAccount Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetAccountByEmailResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAccountByEmail Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetAccountExpandResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAccountExpand Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetAllAccountsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAllAccounts Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSendPasswordResetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SendPasswordReset Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnUpdateAccountResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdateAccount Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};

/* Create Account
 *
 * Create a new account, requires globalAdmin:*:* permissions
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_CreateAccount : public FRequest
{
    FRequest_CreateAccount();
    virtual ~FRequest_CreateAccount() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FRHAPI_DevAccountCreationRequest AccountCreationRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_CreateAccount : public FResponse
{
    FResponse_CreateAccount(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_CreateAccount() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevAccount Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevAccount& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_CreateAccount
{
    typedef FRequest_CreateAccount Request;
    typedef FResponse_CreateAccount Response;
    typedef FDelegate_CreateAccount Delegate;
    typedef FAccountsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.CreateAccount(InRequest, InDelegate, Priority); }
};

/* Delete Account
 *
 * Delete an account by account ID, requires globalAdmin:*:* permissions
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_DeleteAccount : public FRequest
{
    FRequest_DeleteAccount();
    virtual ~FRequest_DeleteAccount() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Account ID */
    TVariant<FGuid, FString> AccountIdentifier;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_DeleteAccount : public FResponse
{
    FResponse_DeleteAccount(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_DeleteAccount() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevJsonValue Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevJsonValue& OutContent) const;

    /* Response 404
    Not Found
    */

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_DeleteAccount
{
    typedef FRequest_DeleteAccount Request;
    typedef FResponse_DeleteAccount Response;
    typedef FDelegate_DeleteAccount Delegate;
    typedef FAccountsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.DeleteAccount(InRequest, InDelegate, Priority); }
};

/* Get Account
 *
 * Get account details by account ID, requires globalAdmin:*:* permissions
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_GetAccount : public FRequest
{
    FRequest_GetAccount();
    virtual ~FRequest_GetAccount() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Account ID */
    TVariant<FGuid, FString> AccountIdentifier;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_GetAccount : public FResponse
{
    FResponse_GetAccount(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetAccount() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevAccount Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevAccount& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_GetAccount
{
    typedef FRequest_GetAccount Request;
    typedef FResponse_GetAccount Response;
    typedef FDelegate_GetAccount Delegate;
    typedef FAccountsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.GetAccount(InRequest, InDelegate, Priority); }
};

/* Get Account By Email
 *
 * Get account details by account email, requires globalAdmin:*:* permissions
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_GetAccountByEmail : public FRequest
{
    FRequest_GetAccountByEmail();
    virtual ~FRequest_GetAccountByEmail() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Account Email */
    FString AccountEmail;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_GetAccountByEmail : public FResponse
{
    FResponse_GetAccountByEmail(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetAccountByEmail() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevAccount Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevAccount& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_GetAccountByEmail
{
    typedef FRequest_GetAccountByEmail Request;
    typedef FResponse_GetAccountByEmail Response;
    typedef FDelegate_GetAccountByEmail Delegate;
    typedef FAccountsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.GetAccountByEmail(InRequest, InDelegate, Priority); }
};

/* Get Account Expand
 *
 * Get expanded account details by account ID, requires globalAdmin:*:* permissions
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_GetAccountExpand : public FRequest
{
    FRequest_GetAccountExpand();
    virtual ~FRequest_GetAccountExpand() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Account ID */
    TVariant<FGuid, FString> AccountIdentifier;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_GetAccountExpand : public FResponse
{
    FResponse_GetAccountExpand(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetAccountExpand() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevAccountExpand Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevAccountExpand& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_GetAccountExpand
{
    typedef FRequest_GetAccountExpand Request;
    typedef FResponse_GetAccountExpand Response;
    typedef FDelegate_GetAccountExpand Delegate;
    typedef FAccountsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.GetAccountExpand(InRequest, InDelegate, Priority); }
};

/* Get All Accounts
 *
 * Get all accounts, requires globalAdmin:*:* permissions
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_GetAllAccounts : public FRequest
{
    FRequest_GetAllAccounts();
    virtual ~FRequest_GetAllAccounts() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    TOptional<int32> Page;
    TOptional<int32> PerPage;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_GetAllAccounts : public FResponse
{
    FResponse_GetAllAccounts(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetAllAccounts() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevJsonValue Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevJsonValue& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_GetAllAccounts
{
    typedef FRequest_GetAllAccounts Request;
    typedef FResponse_GetAllAccounts Response;
    typedef FDelegate_GetAllAccounts Delegate;
    typedef FAccountsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.GetAllAccounts(InRequest, InDelegate, Priority); }
};

/* Send Password Reset
 *
 * Get expanded account details by account ID, requires globalAdmin:*:* permissions
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SendPasswordReset : public FRequest
{
    FRequest_SendPasswordReset();
    virtual ~FRequest_SendPasswordReset() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Account ID */
    TVariant<FGuid, FString> AccountIdentifier;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SendPasswordReset : public FResponse
{
    FResponse_SendPasswordReset(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SendPasswordReset() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevJsonValue Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevJsonValue& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SendPasswordReset
{
    typedef FRequest_SendPasswordReset Request;
    typedef FResponse_SendPasswordReset Response;
    typedef FDelegate_SendPasswordReset Delegate;
    typedef FAccountsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SendPasswordReset(InRequest, InDelegate, Priority); }
};

/* Update Account
 *
 * Update an account by account ID, requires globalAdmin:*:* permissions
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_UpdateAccount : public FRequest
{
    FRequest_UpdateAccount();
    virtual ~FRequest_UpdateAccount() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Account ID */
    TVariant<FGuid, FString> AccountIdentifier;
    FRHAPI_DevAccountAuth0 AccountAuth0;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_UpdateAccount : public FResponse
{
    FResponse_UpdateAccount(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_UpdateAccount() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevAccountAuth0 Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevAccountAuth0& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_UpdateAccount
{
    typedef FRequest_UpdateAccount Request;
    typedef FResponse_UpdateAccount Response;
    typedef FDelegate_UpdateAccount Delegate;
    typedef FAccountsAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.UpdateAccount(InRequest, InDelegate, Priority); }
};


}
