// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereDeveloperAPIBaseModel.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevDependenciesSandboxConfigMatchmakingMapsSchemasLegacyConfig.generated.h"

/** @defgroup RHAPI_DevDependenciesSandboxConfigMatchmakingMapsSchemasLegacyConfig RallyHere API Model DevDependenciesSandboxConfigMatchmakingMapsSchemasLegacyConfig
 *  @{
 */

/**
 * @brief Old config used by Legacy systems. These values are ignored by the current APIs
 */
USTRUCT(BlueprintType)
struct RALLYHEREDEVELOPERAPI_API FRHAPI_DevDependenciesSandboxConfigMatchmakingMapsSchemasLegacyConfig : public FRHAPI_DevModel
{
    GENERATED_BODY()

    /**
    * @brief Fills this object with data from the passed in JSON
    *
    * @param [in] JsonValue Data from the API call.
    *
    * @return true if parsing of the JSON data was successful.
    */
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

    /**
    * @brief Writes the data from this object into the specified JSON Writer stream
    *
    * @param [in] Writer JSON Writer stream to push .
    */
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /** @brief Old map id */
    int32 MapId_Optional{  };
    /** @brief true if MapId_Optional has been set to a value */
    bool MapId_IsSet{ false };
    /** @brief Gets the value of MapId_Optional, regardless of it having been set */
    int32& GetMapId() { return MapId_Optional; }
    /** @brief Gets the value of MapId_Optional, regardless of it having been set */
    const int32& GetMapId() const { return MapId_Optional; }
    /** @brief Gets the value of MapId_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetMapId(const int32& DefaultValue) const { if (MapId_IsSet) return MapId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of MapId_Optional and returns true if it has been set, otherwise returns false */
    bool GetMapId(int32& OutValue) const { if (MapId_IsSet) OutValue = MapId_Optional; return MapId_IsSet; }
    /** @brief Returns a pointer to MapId_Optional, if it has been set, otherwise returns nullptr */
    int32* GetMapIdOrNull() { if (MapId_IsSet) return &MapId_Optional; return nullptr; }
    /** @brief Returns a pointer to MapId_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetMapIdOrNull() const { if (MapId_IsSet) return &MapId_Optional; return nullptr; }
    /** @brief Sets the value of MapId_Optional and also sets MapId_IsSet to true */
    void SetMapId(int32 NewValue) { MapId_Optional = NewValue; MapId_IsSet = true; }
     /** @brief Clears the value of MapId_Optional and sets MapId_IsSet to false */
    void ClearMapId() { MapId_Optional = 0; MapId_IsSet = false; }
    /** @brief Returns true if MapId_Optional is set and matches the default value */
    bool IsMapIdDefaultValue() const { return MapId_IsSet && MapId_Optional == 0; }
    /** @brief Sets the value of MapId_Optional to its default and also sets MapId_IsSet to true */
    void SetMapIdToDefault() { MapId_Optional = 0; MapId_IsSet = true; }
};

/** @} */
