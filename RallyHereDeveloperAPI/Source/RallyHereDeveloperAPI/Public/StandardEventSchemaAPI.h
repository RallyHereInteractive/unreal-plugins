// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereDeveloperAPIAuthContext.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevAllRHEventSchemas.h"
#include "DevHTTPValidationError.h"
#include "DevRHEventSchema.h"
#include "DevRHEventSchemaUpdateRequest.h"

namespace RallyHereDeveloperAPI
{
using RallyHereDeveloperAPI::ToStringFormatArg;
using RallyHereDeveloperAPI::WriteJsonValue;
using RallyHereDeveloperAPI::TryGetJsonValue;

struct FRequest_CreateRhEventSchema;
struct FResponse_CreateRhEventSchema;
struct FRequest_DeleteRhEventSchema;
struct FResponse_DeleteRhEventSchema;
struct FRequest_GetAllRhEventSchemas;
struct FResponse_GetAllRhEventSchemas;
struct FRequest_GetRhEventSchema;
struct FResponse_GetRhEventSchema;
struct FRequest_UpdateRhEventSchema;
struct FResponse_UpdateRhEventSchema;

DECLARE_DELEGATE_OneParam(FDelegate_CreateRhEventSchema, const FResponse_CreateRhEventSchema&);
DECLARE_DELEGATE_OneParam(FDelegate_DeleteRhEventSchema, const FResponse_DeleteRhEventSchema&);
DECLARE_DELEGATE_OneParam(FDelegate_GetAllRhEventSchemas, const FResponse_GetAllRhEventSchemas&);
DECLARE_DELEGATE_OneParam(FDelegate_GetRhEventSchema, const FResponse_GetRhEventSchema&);
DECLARE_DELEGATE_OneParam(FDelegate_UpdateRhEventSchema, const FResponse_UpdateRhEventSchema&);

class RALLYHEREDEVELOPERAPI_API FStandardEventSchemaAPI : public FAPI
{
public:
    FStandardEventSchemaAPI();
    virtual ~FStandardEventSchemaAPI();

    FHttpRequestPtr CreateRhEventSchema(const FRequest_CreateRhEventSchema& Request, const FDelegate_CreateRhEventSchema& Delegate = FDelegate_CreateRhEventSchema(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr DeleteRhEventSchema(const FRequest_DeleteRhEventSchema& Request, const FDelegate_DeleteRhEventSchema& Delegate = FDelegate_DeleteRhEventSchema(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr GetAllRhEventSchemas(const FRequest_GetAllRhEventSchemas& Request, const FDelegate_GetAllRhEventSchemas& Delegate = FDelegate_GetAllRhEventSchemas(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr GetRhEventSchema(const FRequest_GetRhEventSchema& Request, const FDelegate_GetRhEventSchema& Delegate = FDelegate_GetRhEventSchema(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr UpdateRhEventSchema(const FRequest_UpdateRhEventSchema& Request, const FDelegate_UpdateRhEventSchema& Delegate = FDelegate_UpdateRhEventSchema(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);

private:
    void OnCreateRhEventSchemaResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_CreateRhEventSchema Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnDeleteRhEventSchemaResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_DeleteRhEventSchema Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetAllRhEventSchemasResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetAllRhEventSchemas Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnGetRhEventSchemaResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_GetRhEventSchema Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnUpdateRhEventSchemaResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_UpdateRhEventSchema Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};

/* Create Rh Event Schema
 *
 * Create a standard event schema, requires globalAdmin:*:* permissions
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_CreateRhEventSchema : public FRequest
{
    FRequest_CreateRhEventSchema();
    virtual ~FRequest_CreateRhEventSchema() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FRHAPI_DevRHEventSchemaUpdateRequest RHEventSchemaUpdateRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_CreateRhEventSchema : public FResponse
{
    FResponse_CreateRhEventSchema(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_CreateRhEventSchema() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevRHEventSchema Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevRHEventSchema& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_CreateRhEventSchema
{
    typedef FRequest_CreateRhEventSchema Request;
    typedef FResponse_CreateRhEventSchema Response;
    typedef FDelegate_CreateRhEventSchema Delegate;
    typedef FStandardEventSchemaAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.CreateRhEventSchema(InRequest, InDelegate, Priority); }
};

/* Delete Rh Event Schema
 *
 * Delete a standard event schema, requires globalAdmin:*:* permissions
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_DeleteRhEventSchema : public FRequest
{
    FRequest_DeleteRhEventSchema();
    virtual ~FRequest_DeleteRhEventSchema() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* standard event name */
    FString EventName;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_DeleteRhEventSchema : public FResponse
{
    FResponse_DeleteRhEventSchema(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_DeleteRhEventSchema() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevJsonValue Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevJsonValue& OutContent) const;

    /* Response 404
    Not Found
    */

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_DeleteRhEventSchema
{
    typedef FRequest_DeleteRhEventSchema Request;
    typedef FResponse_DeleteRhEventSchema Response;
    typedef FDelegate_DeleteRhEventSchema Delegate;
    typedef FStandardEventSchemaAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.DeleteRhEventSchema(InRequest, InDelegate, Priority); }
};

/* Get All Rh Event Schemas
 *
 * Get all standard events schema, requires org:config:view permissions
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_GetAllRhEventSchemas : public FRequest
{
    FRequest_GetAllRhEventSchemas();
    virtual ~FRequest_GetAllRhEventSchemas() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;

    /* The maximum number of elements to be returned per call */
    TOptional<int32> PageSize;
    /* Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration */
    TOptional<FString> Cursor;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_GetAllRhEventSchemas : public FResponse
{
    FResponse_GetAllRhEventSchemas(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetAllRhEventSchemas() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevAllRHEventSchemas Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevAllRHEventSchemas& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_GetAllRhEventSchemas
{
    typedef FRequest_GetAllRhEventSchemas Request;
    typedef FResponse_GetAllRhEventSchemas Response;
    typedef FDelegate_GetAllRhEventSchemas Delegate;
    typedef FStandardEventSchemaAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.GetAllRhEventSchemas(InRequest, InDelegate, Priority); }
};

/* Get Rh Event Schema
 *
 * Get the standard event schema by event name, requires org:config:view permissions
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_GetRhEventSchema : public FRequest
{
    FRequest_GetRhEventSchema();
    virtual ~FRequest_GetRhEventSchema() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;

    /* name of the rh event */
    FString EventName;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_GetRhEventSchema : public FResponse
{
    FResponse_GetRhEventSchema(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_GetRhEventSchema() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevRHEventSchema Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevRHEventSchema& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_GetRhEventSchema
{
    typedef FRequest_GetRhEventSchema Request;
    typedef FResponse_GetRhEventSchema Response;
    typedef FDelegate_GetRhEventSchema Delegate;
    typedef FStandardEventSchemaAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.GetRhEventSchema(InRequest, InDelegate, Priority); }
};

/* Update Rh Event Schema
 *
 * Update an standard event schema, requires global admin permission
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_UpdateRhEventSchema : public FRequest
{
    FRequest_UpdateRhEventSchema();
    virtual ~FRequest_UpdateRhEventSchema() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* standard event name */
    FString EventName;
    FRHAPI_DevRHEventSchemaUpdateRequest RHEventSchemaUpdateRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_UpdateRhEventSchema : public FResponse
{
    FResponse_UpdateRhEventSchema(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_UpdateRhEventSchema() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevRHEventSchema Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevRHEventSchema& OutContent) const;

    /* Response 404
    Not Found
    */

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_UpdateRhEventSchema
{
    typedef FRequest_UpdateRhEventSchema Request;
    typedef FResponse_UpdateRhEventSchema Response;
    typedef FDelegate_UpdateRhEventSchema Delegate;
    typedef FStandardEventSchemaAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.UpdateRhEventSchema(InRequest, InDelegate, Priority); }
};


}
