// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereDeveloperAPIBaseModel.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevDatacenterContract.h"
#include "DevDatacenterLocation.h"
#include "DevDatacenterProvider.h"
#include "DevGeographicLocation.h"
#include "DevMachineClass.h"
#include "DevMachineImage.h"
#include "DevHostCreate.generated.h"

/** @defgroup RHAPI_DevHostCreate RallyHere API Model DevHostCreate
 *  @{
 */

/**
 * @brief A representation of a host that can be used to deploy a product to. Can be physical, virtual, or a container.
 */
USTRUCT(BlueprintType)
struct RALLYHEREDEVELOPERAPI_API FRHAPI_DevHostCreate : public FRHAPI_DevModel
{
    GENERATED_BODY()

    /**
    * @brief Fills this object with data from the passed in JSON
    *
    * @param [in] JsonValue Data from the API call.
    *
    * @return true if parsing of the JSON data was successful.
    */
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

    /**
    * @brief Writes the data from this object into the specified JSON Writer stream
    *
    * @param [in] Writer JSON Writer stream to push .
    */
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /** @brief The internal hostname of the host. Should only be addressable internally. */
    FString InternalHostname_Optional{  };
    /** @brief true if InternalHostname_Optional has been set to a value */
    bool InternalHostname_IsSet{ false };
    /** @brief Gets the value of InternalHostname_Optional, regardless of it having been set */
    FString& GetInternalHostname() { return InternalHostname_Optional; }
    /** @brief Gets the value of InternalHostname_Optional, regardless of it having been set */
    const FString& GetInternalHostname() const { return InternalHostname_Optional; }
    /** @brief Gets the value of InternalHostname_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetInternalHostname(const FString& DefaultValue) const { if (InternalHostname_IsSet) return InternalHostname_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of InternalHostname_Optional and returns true if it has been set, otherwise returns false */
    bool GetInternalHostname(FString& OutValue) const { if (InternalHostname_IsSet) OutValue = InternalHostname_Optional; return InternalHostname_IsSet; }
    /** @brief Returns a pointer to InternalHostname_Optional, if it has been set, otherwise returns nullptr */
    FString* GetInternalHostnameOrNull() { if (InternalHostname_IsSet) return &InternalHostname_Optional; return nullptr; }
    /** @brief Returns a pointer to InternalHostname_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetInternalHostnameOrNull() const { if (InternalHostname_IsSet) return &InternalHostname_Optional; return nullptr; }
    /** @brief Sets the value of InternalHostname_Optional and also sets InternalHostname_IsSet to true */
    void SetInternalHostname(FString NewValue) { InternalHostname_Optional = NewValue; InternalHostname_IsSet = true; }
     /** @brief Clears the value of InternalHostname_Optional and sets InternalHostname_IsSet to false */
    void ClearInternalHostname() { InternalHostname_IsSet = false; }

    /** @brief The public hostname of the host. Should be addressable from the internet. */
    FString PublicHostname_Optional{  };
    /** @brief true if PublicHostname_Optional has been set to a value */
    bool PublicHostname_IsSet{ false };
    /** @brief Gets the value of PublicHostname_Optional, regardless of it having been set */
    FString& GetPublicHostname() { return PublicHostname_Optional; }
    /** @brief Gets the value of PublicHostname_Optional, regardless of it having been set */
    const FString& GetPublicHostname() const { return PublicHostname_Optional; }
    /** @brief Gets the value of PublicHostname_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetPublicHostname(const FString& DefaultValue) const { if (PublicHostname_IsSet) return PublicHostname_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of PublicHostname_Optional and returns true if it has been set, otherwise returns false */
    bool GetPublicHostname(FString& OutValue) const { if (PublicHostname_IsSet) OutValue = PublicHostname_Optional; return PublicHostname_IsSet; }
    /** @brief Returns a pointer to PublicHostname_Optional, if it has been set, otherwise returns nullptr */
    FString* GetPublicHostnameOrNull() { if (PublicHostname_IsSet) return &PublicHostname_Optional; return nullptr; }
    /** @brief Returns a pointer to PublicHostname_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetPublicHostnameOrNull() const { if (PublicHostname_IsSet) return &PublicHostname_Optional; return nullptr; }
    /** @brief Sets the value of PublicHostname_Optional and also sets PublicHostname_IsSet to true */
    void SetPublicHostname(FString NewValue) { PublicHostname_Optional = NewValue; PublicHostname_IsSet = true; }
     /** @brief Clears the value of PublicHostname_Optional and sets PublicHostname_IsSet to false */
    void ClearPublicHostname() { PublicHostname_IsSet = false; }

    /** @brief The internal IPv4 address of the host. Should only be addressable internally. */
    FString InternalIpv4_Optional{  };
    /** @brief true if InternalIpv4_Optional has been set to a value */
    bool InternalIpv4_IsSet{ false };
    /** @brief Gets the value of InternalIpv4_Optional, regardless of it having been set */
    FString& GetInternalIpv4() { return InternalIpv4_Optional; }
    /** @brief Gets the value of InternalIpv4_Optional, regardless of it having been set */
    const FString& GetInternalIpv4() const { return InternalIpv4_Optional; }
    /** @brief Gets the value of InternalIpv4_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetInternalIpv4(const FString& DefaultValue) const { if (InternalIpv4_IsSet) return InternalIpv4_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of InternalIpv4_Optional and returns true if it has been set, otherwise returns false */
    bool GetInternalIpv4(FString& OutValue) const { if (InternalIpv4_IsSet) OutValue = InternalIpv4_Optional; return InternalIpv4_IsSet; }
    /** @brief Returns a pointer to InternalIpv4_Optional, if it has been set, otherwise returns nullptr */
    FString* GetInternalIpv4OrNull() { if (InternalIpv4_IsSet) return &InternalIpv4_Optional; return nullptr; }
    /** @brief Returns a pointer to InternalIpv4_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetInternalIpv4OrNull() const { if (InternalIpv4_IsSet) return &InternalIpv4_Optional; return nullptr; }
    /** @brief Sets the value of InternalIpv4_Optional and also sets InternalIpv4_IsSet to true */
    void SetInternalIpv4(FString NewValue) { InternalIpv4_Optional = NewValue; InternalIpv4_IsSet = true; }
     /** @brief Clears the value of InternalIpv4_Optional and sets InternalIpv4_IsSet to false */
    void ClearInternalIpv4() { InternalIpv4_IsSet = false; }

    /** @brief The public IPv4 address of the host. Should be addressable from the internet. */
    FString PublicIpv4_Optional{  };
    /** @brief true if PublicIpv4_Optional has been set to a value */
    bool PublicIpv4_IsSet{ false };
    /** @brief Gets the value of PublicIpv4_Optional, regardless of it having been set */
    FString& GetPublicIpv4() { return PublicIpv4_Optional; }
    /** @brief Gets the value of PublicIpv4_Optional, regardless of it having been set */
    const FString& GetPublicIpv4() const { return PublicIpv4_Optional; }
    /** @brief Gets the value of PublicIpv4_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetPublicIpv4(const FString& DefaultValue) const { if (PublicIpv4_IsSet) return PublicIpv4_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of PublicIpv4_Optional and returns true if it has been set, otherwise returns false */
    bool GetPublicIpv4(FString& OutValue) const { if (PublicIpv4_IsSet) OutValue = PublicIpv4_Optional; return PublicIpv4_IsSet; }
    /** @brief Returns a pointer to PublicIpv4_Optional, if it has been set, otherwise returns nullptr */
    FString* GetPublicIpv4OrNull() { if (PublicIpv4_IsSet) return &PublicIpv4_Optional; return nullptr; }
    /** @brief Returns a pointer to PublicIpv4_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetPublicIpv4OrNull() const { if (PublicIpv4_IsSet) return &PublicIpv4_Optional; return nullptr; }
    /** @brief Sets the value of PublicIpv4_Optional and also sets PublicIpv4_IsSet to true */
    void SetPublicIpv4(FString NewValue) { PublicIpv4_Optional = NewValue; PublicIpv4_IsSet = true; }
     /** @brief Clears the value of PublicIpv4_Optional and sets PublicIpv4_IsSet to false */
    void ClearPublicIpv4() { PublicIpv4_IsSet = false; }

    /** @brief The internal IPv6 address of the host. Should only be addressable internally. */
    FString InternalIpv6_Optional{  };
    /** @brief true if InternalIpv6_Optional has been set to a value */
    bool InternalIpv6_IsSet{ false };
    /** @brief Gets the value of InternalIpv6_Optional, regardless of it having been set */
    FString& GetInternalIpv6() { return InternalIpv6_Optional; }
    /** @brief Gets the value of InternalIpv6_Optional, regardless of it having been set */
    const FString& GetInternalIpv6() const { return InternalIpv6_Optional; }
    /** @brief Gets the value of InternalIpv6_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetInternalIpv6(const FString& DefaultValue) const { if (InternalIpv6_IsSet) return InternalIpv6_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of InternalIpv6_Optional and returns true if it has been set, otherwise returns false */
    bool GetInternalIpv6(FString& OutValue) const { if (InternalIpv6_IsSet) OutValue = InternalIpv6_Optional; return InternalIpv6_IsSet; }
    /** @brief Returns a pointer to InternalIpv6_Optional, if it has been set, otherwise returns nullptr */
    FString* GetInternalIpv6OrNull() { if (InternalIpv6_IsSet) return &InternalIpv6_Optional; return nullptr; }
    /** @brief Returns a pointer to InternalIpv6_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetInternalIpv6OrNull() const { if (InternalIpv6_IsSet) return &InternalIpv6_Optional; return nullptr; }
    /** @brief Sets the value of InternalIpv6_Optional and also sets InternalIpv6_IsSet to true */
    void SetInternalIpv6(FString NewValue) { InternalIpv6_Optional = NewValue; InternalIpv6_IsSet = true; }
     /** @brief Clears the value of InternalIpv6_Optional and sets InternalIpv6_IsSet to false */
    void ClearInternalIpv6() { InternalIpv6_IsSet = false; }

    /** @brief The public IPv6 address of the host. Should be addressable from the internet. */
    FString PublicIpv6_Optional{  };
    /** @brief true if PublicIpv6_Optional has been set to a value */
    bool PublicIpv6_IsSet{ false };
    /** @brief Gets the value of PublicIpv6_Optional, regardless of it having been set */
    FString& GetPublicIpv6() { return PublicIpv6_Optional; }
    /** @brief Gets the value of PublicIpv6_Optional, regardless of it having been set */
    const FString& GetPublicIpv6() const { return PublicIpv6_Optional; }
    /** @brief Gets the value of PublicIpv6_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetPublicIpv6(const FString& DefaultValue) const { if (PublicIpv6_IsSet) return PublicIpv6_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of PublicIpv6_Optional and returns true if it has been set, otherwise returns false */
    bool GetPublicIpv6(FString& OutValue) const { if (PublicIpv6_IsSet) OutValue = PublicIpv6_Optional; return PublicIpv6_IsSet; }
    /** @brief Returns a pointer to PublicIpv6_Optional, if it has been set, otherwise returns nullptr */
    FString* GetPublicIpv6OrNull() { if (PublicIpv6_IsSet) return &PublicIpv6_Optional; return nullptr; }
    /** @brief Returns a pointer to PublicIpv6_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetPublicIpv6OrNull() const { if (PublicIpv6_IsSet) return &PublicIpv6_Optional; return nullptr; }
    /** @brief Sets the value of PublicIpv6_Optional and also sets PublicIpv6_IsSet to true */
    void SetPublicIpv6(FString NewValue) { PublicIpv6_Optional = NewValue; PublicIpv6_IsSet = true; }
     /** @brief Clears the value of PublicIpv6_Optional and sets PublicIpv6_IsSet to false */
    void ClearPublicIpv6() { PublicIpv6_IsSet = false; }

    FRHAPI_DevGeographicLocation GeographicLocation_Optional{  };
    /** @brief true if GeographicLocation_Optional has been set to a value */
    bool GeographicLocation_IsSet{ false };
    /** @brief Gets the value of GeographicLocation_Optional, regardless of it having been set */
    FRHAPI_DevGeographicLocation& GetGeographicLocation() { return GeographicLocation_Optional; }
    /** @brief Gets the value of GeographicLocation_Optional, regardless of it having been set */
    const FRHAPI_DevGeographicLocation& GetGeographicLocation() const { return GeographicLocation_Optional; }
    /** @brief Gets the value of GeographicLocation_Optional, if it has been set, otherwise it returns DefaultValue */
    const FRHAPI_DevGeographicLocation& GetGeographicLocation(const FRHAPI_DevGeographicLocation& DefaultValue) const { if (GeographicLocation_IsSet) return GeographicLocation_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of GeographicLocation_Optional and returns true if it has been set, otherwise returns false */
    bool GetGeographicLocation(FRHAPI_DevGeographicLocation& OutValue) const { if (GeographicLocation_IsSet) OutValue = GeographicLocation_Optional; return GeographicLocation_IsSet; }
    /** @brief Returns a pointer to GeographicLocation_Optional, if it has been set, otherwise returns nullptr */
    FRHAPI_DevGeographicLocation* GetGeographicLocationOrNull() { if (GeographicLocation_IsSet) return &GeographicLocation_Optional; return nullptr; }
    /** @brief Returns a pointer to GeographicLocation_Optional, if it has been set, otherwise returns nullptr */
    const FRHAPI_DevGeographicLocation* GetGeographicLocationOrNull() const { if (GeographicLocation_IsSet) return &GeographicLocation_Optional; return nullptr; }
    /** @brief Sets the value of GeographicLocation_Optional and also sets GeographicLocation_IsSet to true */
    void SetGeographicLocation(FRHAPI_DevGeographicLocation NewValue) { GeographicLocation_Optional = NewValue; GeographicLocation_IsSet = true; }
     /** @brief Clears the value of GeographicLocation_Optional and sets GeographicLocation_IsSet to false */
    void ClearGeographicLocation() { GeographicLocation_IsSet = false; }

    FRHAPI_DevDatacenterProvider DatacenterProvider_Optional{  };
    /** @brief true if DatacenterProvider_Optional has been set to a value */
    bool DatacenterProvider_IsSet{ false };
    /** @brief Gets the value of DatacenterProvider_Optional, regardless of it having been set */
    FRHAPI_DevDatacenterProvider& GetDatacenterProvider() { return DatacenterProvider_Optional; }
    /** @brief Gets the value of DatacenterProvider_Optional, regardless of it having been set */
    const FRHAPI_DevDatacenterProvider& GetDatacenterProvider() const { return DatacenterProvider_Optional; }
    /** @brief Gets the value of DatacenterProvider_Optional, if it has been set, otherwise it returns DefaultValue */
    const FRHAPI_DevDatacenterProvider& GetDatacenterProvider(const FRHAPI_DevDatacenterProvider& DefaultValue) const { if (DatacenterProvider_IsSet) return DatacenterProvider_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of DatacenterProvider_Optional and returns true if it has been set, otherwise returns false */
    bool GetDatacenterProvider(FRHAPI_DevDatacenterProvider& OutValue) const { if (DatacenterProvider_IsSet) OutValue = DatacenterProvider_Optional; return DatacenterProvider_IsSet; }
    /** @brief Returns a pointer to DatacenterProvider_Optional, if it has been set, otherwise returns nullptr */
    FRHAPI_DevDatacenterProvider* GetDatacenterProviderOrNull() { if (DatacenterProvider_IsSet) return &DatacenterProvider_Optional; return nullptr; }
    /** @brief Returns a pointer to DatacenterProvider_Optional, if it has been set, otherwise returns nullptr */
    const FRHAPI_DevDatacenterProvider* GetDatacenterProviderOrNull() const { if (DatacenterProvider_IsSet) return &DatacenterProvider_Optional; return nullptr; }
    /** @brief Sets the value of DatacenterProvider_Optional and also sets DatacenterProvider_IsSet to true */
    void SetDatacenterProvider(FRHAPI_DevDatacenterProvider NewValue) { DatacenterProvider_Optional = NewValue; DatacenterProvider_IsSet = true; }
     /** @brief Clears the value of DatacenterProvider_Optional and sets DatacenterProvider_IsSet to false */
    void ClearDatacenterProvider() { DatacenterProvider_IsSet = false; }

    FRHAPI_DevDatacenterLocation DatacenterLocation_Optional{  };
    /** @brief true if DatacenterLocation_Optional has been set to a value */
    bool DatacenterLocation_IsSet{ false };
    /** @brief Gets the value of DatacenterLocation_Optional, regardless of it having been set */
    FRHAPI_DevDatacenterLocation& GetDatacenterLocation() { return DatacenterLocation_Optional; }
    /** @brief Gets the value of DatacenterLocation_Optional, regardless of it having been set */
    const FRHAPI_DevDatacenterLocation& GetDatacenterLocation() const { return DatacenterLocation_Optional; }
    /** @brief Gets the value of DatacenterLocation_Optional, if it has been set, otherwise it returns DefaultValue */
    const FRHAPI_DevDatacenterLocation& GetDatacenterLocation(const FRHAPI_DevDatacenterLocation& DefaultValue) const { if (DatacenterLocation_IsSet) return DatacenterLocation_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of DatacenterLocation_Optional and returns true if it has been set, otherwise returns false */
    bool GetDatacenterLocation(FRHAPI_DevDatacenterLocation& OutValue) const { if (DatacenterLocation_IsSet) OutValue = DatacenterLocation_Optional; return DatacenterLocation_IsSet; }
    /** @brief Returns a pointer to DatacenterLocation_Optional, if it has been set, otherwise returns nullptr */
    FRHAPI_DevDatacenterLocation* GetDatacenterLocationOrNull() { if (DatacenterLocation_IsSet) return &DatacenterLocation_Optional; return nullptr; }
    /** @brief Returns a pointer to DatacenterLocation_Optional, if it has been set, otherwise returns nullptr */
    const FRHAPI_DevDatacenterLocation* GetDatacenterLocationOrNull() const { if (DatacenterLocation_IsSet) return &DatacenterLocation_Optional; return nullptr; }
    /** @brief Sets the value of DatacenterLocation_Optional and also sets DatacenterLocation_IsSet to true */
    void SetDatacenterLocation(FRHAPI_DevDatacenterLocation NewValue) { DatacenterLocation_Optional = NewValue; DatacenterLocation_IsSet = true; }
     /** @brief Clears the value of DatacenterLocation_Optional and sets DatacenterLocation_IsSet to false */
    void ClearDatacenterLocation() { DatacenterLocation_IsSet = false; }

    FRHAPI_DevMachineClass MachineClass_Optional{  };
    /** @brief true if MachineClass_Optional has been set to a value */
    bool MachineClass_IsSet{ false };
    /** @brief Gets the value of MachineClass_Optional, regardless of it having been set */
    FRHAPI_DevMachineClass& GetMachineClass() { return MachineClass_Optional; }
    /** @brief Gets the value of MachineClass_Optional, regardless of it having been set */
    const FRHAPI_DevMachineClass& GetMachineClass() const { return MachineClass_Optional; }
    /** @brief Gets the value of MachineClass_Optional, if it has been set, otherwise it returns DefaultValue */
    const FRHAPI_DevMachineClass& GetMachineClass(const FRHAPI_DevMachineClass& DefaultValue) const { if (MachineClass_IsSet) return MachineClass_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of MachineClass_Optional and returns true if it has been set, otherwise returns false */
    bool GetMachineClass(FRHAPI_DevMachineClass& OutValue) const { if (MachineClass_IsSet) OutValue = MachineClass_Optional; return MachineClass_IsSet; }
    /** @brief Returns a pointer to MachineClass_Optional, if it has been set, otherwise returns nullptr */
    FRHAPI_DevMachineClass* GetMachineClassOrNull() { if (MachineClass_IsSet) return &MachineClass_Optional; return nullptr; }
    /** @brief Returns a pointer to MachineClass_Optional, if it has been set, otherwise returns nullptr */
    const FRHAPI_DevMachineClass* GetMachineClassOrNull() const { if (MachineClass_IsSet) return &MachineClass_Optional; return nullptr; }
    /** @brief Sets the value of MachineClass_Optional and also sets MachineClass_IsSet to true */
    void SetMachineClass(FRHAPI_DevMachineClass NewValue) { MachineClass_Optional = NewValue; MachineClass_IsSet = true; }
     /** @brief Clears the value of MachineClass_Optional and sets MachineClass_IsSet to false */
    void ClearMachineClass() { MachineClass_IsSet = false; }

    FRHAPI_DevMachineClass MachineClassOverrides_Optional{  };
    /** @brief true if MachineClassOverrides_Optional has been set to a value */
    bool MachineClassOverrides_IsSet{ false };
    /** @brief Gets the value of MachineClassOverrides_Optional, regardless of it having been set */
    FRHAPI_DevMachineClass& GetMachineClassOverrides() { return MachineClassOverrides_Optional; }
    /** @brief Gets the value of MachineClassOverrides_Optional, regardless of it having been set */
    const FRHAPI_DevMachineClass& GetMachineClassOverrides() const { return MachineClassOverrides_Optional; }
    /** @brief Gets the value of MachineClassOverrides_Optional, if it has been set, otherwise it returns DefaultValue */
    const FRHAPI_DevMachineClass& GetMachineClassOverrides(const FRHAPI_DevMachineClass& DefaultValue) const { if (MachineClassOverrides_IsSet) return MachineClassOverrides_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of MachineClassOverrides_Optional and returns true if it has been set, otherwise returns false */
    bool GetMachineClassOverrides(FRHAPI_DevMachineClass& OutValue) const { if (MachineClassOverrides_IsSet) OutValue = MachineClassOverrides_Optional; return MachineClassOverrides_IsSet; }
    /** @brief Returns a pointer to MachineClassOverrides_Optional, if it has been set, otherwise returns nullptr */
    FRHAPI_DevMachineClass* GetMachineClassOverridesOrNull() { if (MachineClassOverrides_IsSet) return &MachineClassOverrides_Optional; return nullptr; }
    /** @brief Returns a pointer to MachineClassOverrides_Optional, if it has been set, otherwise returns nullptr */
    const FRHAPI_DevMachineClass* GetMachineClassOverridesOrNull() const { if (MachineClassOverrides_IsSet) return &MachineClassOverrides_Optional; return nullptr; }
    /** @brief Sets the value of MachineClassOverrides_Optional and also sets MachineClassOverrides_IsSet to true */
    void SetMachineClassOverrides(FRHAPI_DevMachineClass NewValue) { MachineClassOverrides_Optional = NewValue; MachineClassOverrides_IsSet = true; }
     /** @brief Clears the value of MachineClassOverrides_Optional and sets MachineClassOverrides_IsSet to false */
    void ClearMachineClassOverrides() { MachineClassOverrides_IsSet = false; }

    FRHAPI_DevMachineImage MachineImage_Optional{  };
    /** @brief true if MachineImage_Optional has been set to a value */
    bool MachineImage_IsSet{ false };
    /** @brief Gets the value of MachineImage_Optional, regardless of it having been set */
    FRHAPI_DevMachineImage& GetMachineImage() { return MachineImage_Optional; }
    /** @brief Gets the value of MachineImage_Optional, regardless of it having been set */
    const FRHAPI_DevMachineImage& GetMachineImage() const { return MachineImage_Optional; }
    /** @brief Gets the value of MachineImage_Optional, if it has been set, otherwise it returns DefaultValue */
    const FRHAPI_DevMachineImage& GetMachineImage(const FRHAPI_DevMachineImage& DefaultValue) const { if (MachineImage_IsSet) return MachineImage_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of MachineImage_Optional and returns true if it has been set, otherwise returns false */
    bool GetMachineImage(FRHAPI_DevMachineImage& OutValue) const { if (MachineImage_IsSet) OutValue = MachineImage_Optional; return MachineImage_IsSet; }
    /** @brief Returns a pointer to MachineImage_Optional, if it has been set, otherwise returns nullptr */
    FRHAPI_DevMachineImage* GetMachineImageOrNull() { if (MachineImage_IsSet) return &MachineImage_Optional; return nullptr; }
    /** @brief Returns a pointer to MachineImage_Optional, if it has been set, otherwise returns nullptr */
    const FRHAPI_DevMachineImage* GetMachineImageOrNull() const { if (MachineImage_IsSet) return &MachineImage_Optional; return nullptr; }
    /** @brief Sets the value of MachineImage_Optional and also sets MachineImage_IsSet to true */
    void SetMachineImage(FRHAPI_DevMachineImage NewValue) { MachineImage_Optional = NewValue; MachineImage_IsSet = true; }
     /** @brief Clears the value of MachineImage_Optional and sets MachineImage_IsSet to false */
    void ClearMachineImage() { MachineImage_IsSet = false; }

    /** @brief The monthly price of this host. If set, this value will supersede any monthly_price value set by the machine_class or contract */
    float MonthlyPrice_Optional{  };
    /** @brief true if MonthlyPrice_Optional has been set to a value */
    bool MonthlyPrice_IsSet{ false };
    /** @brief Gets the value of MonthlyPrice_Optional, regardless of it having been set */
    float& GetMonthlyPrice() { return MonthlyPrice_Optional; }
    /** @brief Gets the value of MonthlyPrice_Optional, regardless of it having been set */
    const float& GetMonthlyPrice() const { return MonthlyPrice_Optional; }
    /** @brief Gets the value of MonthlyPrice_Optional, if it has been set, otherwise it returns DefaultValue */
    const float& GetMonthlyPrice(const float& DefaultValue) const { if (MonthlyPrice_IsSet) return MonthlyPrice_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of MonthlyPrice_Optional and returns true if it has been set, otherwise returns false */
    bool GetMonthlyPrice(float& OutValue) const { if (MonthlyPrice_IsSet) OutValue = MonthlyPrice_Optional; return MonthlyPrice_IsSet; }
    /** @brief Returns a pointer to MonthlyPrice_Optional, if it has been set, otherwise returns nullptr */
    float* GetMonthlyPriceOrNull() { if (MonthlyPrice_IsSet) return &MonthlyPrice_Optional; return nullptr; }
    /** @brief Returns a pointer to MonthlyPrice_Optional, if it has been set, otherwise returns nullptr */
    const float* GetMonthlyPriceOrNull() const { if (MonthlyPrice_IsSet) return &MonthlyPrice_Optional; return nullptr; }
    /** @brief Sets the value of MonthlyPrice_Optional and also sets MonthlyPrice_IsSet to true */
    void SetMonthlyPrice(float NewValue) { MonthlyPrice_Optional = NewValue; MonthlyPrice_IsSet = true; }
     /** @brief Clears the value of MonthlyPrice_Optional and sets MonthlyPrice_IsSet to false */
    void ClearMonthlyPrice() { MonthlyPrice_IsSet = false; }

    /** @brief The hourly price of this host. If set, this value will supersede any hourly_price value set by the machine_class or contract */
    float HourlyPrice_Optional{  };
    /** @brief true if HourlyPrice_Optional has been set to a value */
    bool HourlyPrice_IsSet{ false };
    /** @brief Gets the value of HourlyPrice_Optional, regardless of it having been set */
    float& GetHourlyPrice() { return HourlyPrice_Optional; }
    /** @brief Gets the value of HourlyPrice_Optional, regardless of it having been set */
    const float& GetHourlyPrice() const { return HourlyPrice_Optional; }
    /** @brief Gets the value of HourlyPrice_Optional, if it has been set, otherwise it returns DefaultValue */
    const float& GetHourlyPrice(const float& DefaultValue) const { if (HourlyPrice_IsSet) return HourlyPrice_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of HourlyPrice_Optional and returns true if it has been set, otherwise returns false */
    bool GetHourlyPrice(float& OutValue) const { if (HourlyPrice_IsSet) OutValue = HourlyPrice_Optional; return HourlyPrice_IsSet; }
    /** @brief Returns a pointer to HourlyPrice_Optional, if it has been set, otherwise returns nullptr */
    float* GetHourlyPriceOrNull() { if (HourlyPrice_IsSet) return &HourlyPrice_Optional; return nullptr; }
    /** @brief Returns a pointer to HourlyPrice_Optional, if it has been set, otherwise returns nullptr */
    const float* GetHourlyPriceOrNull() const { if (HourlyPrice_IsSet) return &HourlyPrice_Optional; return nullptr; }
    /** @brief Sets the value of HourlyPrice_Optional and also sets HourlyPrice_IsSet to true */
    void SetHourlyPrice(float NewValue) { HourlyPrice_Optional = NewValue; HourlyPrice_IsSet = true; }
     /** @brief Clears the value of HourlyPrice_Optional and sets HourlyPrice_IsSet to false */
    void ClearHourlyPrice() { HourlyPrice_IsSet = false; }

    /** @brief Notes about the host. Used for extra information that doesn't fit in other fields. */
    FString Notes_Optional{  };
    /** @brief true if Notes_Optional has been set to a value */
    bool Notes_IsSet{ false };
    /** @brief Gets the value of Notes_Optional, regardless of it having been set */
    FString& GetNotes() { return Notes_Optional; }
    /** @brief Gets the value of Notes_Optional, regardless of it having been set */
    const FString& GetNotes() const { return Notes_Optional; }
    /** @brief Gets the value of Notes_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetNotes(const FString& DefaultValue) const { if (Notes_IsSet) return Notes_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Notes_Optional and returns true if it has been set, otherwise returns false */
    bool GetNotes(FString& OutValue) const { if (Notes_IsSet) OutValue = Notes_Optional; return Notes_IsSet; }
    /** @brief Returns a pointer to Notes_Optional, if it has been set, otherwise returns nullptr */
    FString* GetNotesOrNull() { if (Notes_IsSet) return &Notes_Optional; return nullptr; }
    /** @brief Returns a pointer to Notes_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetNotesOrNull() const { if (Notes_IsSet) return &Notes_Optional; return nullptr; }
    /** @brief Sets the value of Notes_Optional and also sets Notes_IsSet to true */
    void SetNotes(FString NewValue) { Notes_Optional = NewValue; Notes_IsSet = true; }
     /** @brief Clears the value of Notes_Optional and sets Notes_IsSet to false */
    void ClearNotes() { Notes_IsSet = false; }

    /** @brief Labels that can be applied to the host for organizational purposes */
    TArray<FString> Labels_Optional{  };
    /** @brief true if Labels_Optional has been set to a value */
    bool Labels_IsSet{ false };
    /** @brief Gets the value of Labels_Optional, regardless of it having been set */
    TArray<FString>& GetLabels() { return Labels_Optional; }
    /** @brief Gets the value of Labels_Optional, regardless of it having been set */
    const TArray<FString>& GetLabels() const { return Labels_Optional; }
    /** @brief Gets the value of Labels_Optional, if it has been set, otherwise it returns DefaultValue */
    const TArray<FString>& GetLabels(const TArray<FString>& DefaultValue) const { if (Labels_IsSet) return Labels_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Labels_Optional and returns true if it has been set, otherwise returns false */
    bool GetLabels(TArray<FString>& OutValue) const { if (Labels_IsSet) OutValue = Labels_Optional; return Labels_IsSet; }
    /** @brief Returns a pointer to Labels_Optional, if it has been set, otherwise returns nullptr */
    TArray<FString>* GetLabelsOrNull() { if (Labels_IsSet) return &Labels_Optional; return nullptr; }
    /** @brief Returns a pointer to Labels_Optional, if it has been set, otherwise returns nullptr */
    const TArray<FString>* GetLabelsOrNull() const { if (Labels_IsSet) return &Labels_Optional; return nullptr; }
    /** @brief Sets the value of Labels_Optional and also sets Labels_IsSet to true */
    void SetLabels(TArray<FString> NewValue) { Labels_Optional = NewValue; Labels_IsSet = true; }
     /** @brief Clears the value of Labels_Optional and sets Labels_IsSet to false */
    void ClearLabels() { Labels_IsSet = false; }

    FRHAPI_DevDatacenterContract DatacenterContract_Optional{  };
    /** @brief true if DatacenterContract_Optional has been set to a value */
    bool DatacenterContract_IsSet{ false };
    /** @brief Gets the value of DatacenterContract_Optional, regardless of it having been set */
    FRHAPI_DevDatacenterContract& GetDatacenterContract() { return DatacenterContract_Optional; }
    /** @brief Gets the value of DatacenterContract_Optional, regardless of it having been set */
    const FRHAPI_DevDatacenterContract& GetDatacenterContract() const { return DatacenterContract_Optional; }
    /** @brief Gets the value of DatacenterContract_Optional, if it has been set, otherwise it returns DefaultValue */
    const FRHAPI_DevDatacenterContract& GetDatacenterContract(const FRHAPI_DevDatacenterContract& DefaultValue) const { if (DatacenterContract_IsSet) return DatacenterContract_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of DatacenterContract_Optional and returns true if it has been set, otherwise returns false */
    bool GetDatacenterContract(FRHAPI_DevDatacenterContract& OutValue) const { if (DatacenterContract_IsSet) OutValue = DatacenterContract_Optional; return DatacenterContract_IsSet; }
    /** @brief Returns a pointer to DatacenterContract_Optional, if it has been set, otherwise returns nullptr */
    FRHAPI_DevDatacenterContract* GetDatacenterContractOrNull() { if (DatacenterContract_IsSet) return &DatacenterContract_Optional; return nullptr; }
    /** @brief Returns a pointer to DatacenterContract_Optional, if it has been set, otherwise returns nullptr */
    const FRHAPI_DevDatacenterContract* GetDatacenterContractOrNull() const { if (DatacenterContract_IsSet) return &DatacenterContract_Optional; return nullptr; }
    /** @brief Sets the value of DatacenterContract_Optional and also sets DatacenterContract_IsSet to true */
    void SetDatacenterContract(FRHAPI_DevDatacenterContract NewValue) { DatacenterContract_Optional = NewValue; DatacenterContract_IsSet = true; }
     /** @brief Clears the value of DatacenterContract_Optional and sets DatacenterContract_IsSet to false */
    void ClearDatacenterContract() { DatacenterContract_IsSet = false; }

    /** @brief The ID of the host this host replaced */
    FGuid PriorHostId_Optional{  };
    /** @brief true if PriorHostId_Optional has been set to a value */
    bool PriorHostId_IsSet{ false };
    /** @brief Gets the value of PriorHostId_Optional, regardless of it having been set */
    FGuid& GetPriorHostId() { return PriorHostId_Optional; }
    /** @brief Gets the value of PriorHostId_Optional, regardless of it having been set */
    const FGuid& GetPriorHostId() const { return PriorHostId_Optional; }
    /** @brief Gets the value of PriorHostId_Optional, if it has been set, otherwise it returns DefaultValue */
    const FGuid& GetPriorHostId(const FGuid& DefaultValue) const { if (PriorHostId_IsSet) return PriorHostId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of PriorHostId_Optional and returns true if it has been set, otherwise returns false */
    bool GetPriorHostId(FGuid& OutValue) const { if (PriorHostId_IsSet) OutValue = PriorHostId_Optional; return PriorHostId_IsSet; }
    /** @brief Returns a pointer to PriorHostId_Optional, if it has been set, otherwise returns nullptr */
    FGuid* GetPriorHostIdOrNull() { if (PriorHostId_IsSet) return &PriorHostId_Optional; return nullptr; }
    /** @brief Returns a pointer to PriorHostId_Optional, if it has been set, otherwise returns nullptr */
    const FGuid* GetPriorHostIdOrNull() const { if (PriorHostId_IsSet) return &PriorHostId_Optional; return nullptr; }
    /** @brief Sets the value of PriorHostId_Optional and also sets PriorHostId_IsSet to true */
    void SetPriorHostId(FGuid NewValue) { PriorHostId_Optional = NewValue; PriorHostId_IsSet = true; }
     /** @brief Clears the value of PriorHostId_Optional and sets PriorHostId_IsSet to false */
    void ClearPriorHostId() { PriorHostId_IsSet = false; }

    /** @brief The id of datacenter provider of the host */
    FGuid DatacenterProviderId_Optional{  };
    /** @brief true if DatacenterProviderId_Optional has been set to a value */
    bool DatacenterProviderId_IsSet{ false };
    /** @brief Gets the value of DatacenterProviderId_Optional, regardless of it having been set */
    FGuid& GetDatacenterProviderId() { return DatacenterProviderId_Optional; }
    /** @brief Gets the value of DatacenterProviderId_Optional, regardless of it having been set */
    const FGuid& GetDatacenterProviderId() const { return DatacenterProviderId_Optional; }
    /** @brief Gets the value of DatacenterProviderId_Optional, if it has been set, otherwise it returns DefaultValue */
    const FGuid& GetDatacenterProviderId(const FGuid& DefaultValue) const { if (DatacenterProviderId_IsSet) return DatacenterProviderId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of DatacenterProviderId_Optional and returns true if it has been set, otherwise returns false */
    bool GetDatacenterProviderId(FGuid& OutValue) const { if (DatacenterProviderId_IsSet) OutValue = DatacenterProviderId_Optional; return DatacenterProviderId_IsSet; }
    /** @brief Returns a pointer to DatacenterProviderId_Optional, if it has been set, otherwise returns nullptr */
    FGuid* GetDatacenterProviderIdOrNull() { if (DatacenterProviderId_IsSet) return &DatacenterProviderId_Optional; return nullptr; }
    /** @brief Returns a pointer to DatacenterProviderId_Optional, if it has been set, otherwise returns nullptr */
    const FGuid* GetDatacenterProviderIdOrNull() const { if (DatacenterProviderId_IsSet) return &DatacenterProviderId_Optional; return nullptr; }
    /** @brief Sets the value of DatacenterProviderId_Optional and also sets DatacenterProviderId_IsSet to true */
    void SetDatacenterProviderId(FGuid NewValue) { DatacenterProviderId_Optional = NewValue; DatacenterProviderId_IsSet = true; }
     /** @brief Clears the value of DatacenterProviderId_Optional and sets DatacenterProviderId_IsSet to false */
    void ClearDatacenterProviderId() { DatacenterProviderId_IsSet = false; }

    /** @brief The id of the geographic location of the host */
    FGuid GeographicLocationId_Optional{  };
    /** @brief true if GeographicLocationId_Optional has been set to a value */
    bool GeographicLocationId_IsSet{ false };
    /** @brief Gets the value of GeographicLocationId_Optional, regardless of it having been set */
    FGuid& GetGeographicLocationId() { return GeographicLocationId_Optional; }
    /** @brief Gets the value of GeographicLocationId_Optional, regardless of it having been set */
    const FGuid& GetGeographicLocationId() const { return GeographicLocationId_Optional; }
    /** @brief Gets the value of GeographicLocationId_Optional, if it has been set, otherwise it returns DefaultValue */
    const FGuid& GetGeographicLocationId(const FGuid& DefaultValue) const { if (GeographicLocationId_IsSet) return GeographicLocationId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of GeographicLocationId_Optional and returns true if it has been set, otherwise returns false */
    bool GetGeographicLocationId(FGuid& OutValue) const { if (GeographicLocationId_IsSet) OutValue = GeographicLocationId_Optional; return GeographicLocationId_IsSet; }
    /** @brief Returns a pointer to GeographicLocationId_Optional, if it has been set, otherwise returns nullptr */
    FGuid* GetGeographicLocationIdOrNull() { if (GeographicLocationId_IsSet) return &GeographicLocationId_Optional; return nullptr; }
    /** @brief Returns a pointer to GeographicLocationId_Optional, if it has been set, otherwise returns nullptr */
    const FGuid* GetGeographicLocationIdOrNull() const { if (GeographicLocationId_IsSet) return &GeographicLocationId_Optional; return nullptr; }
    /** @brief Sets the value of GeographicLocationId_Optional and also sets GeographicLocationId_IsSet to true */
    void SetGeographicLocationId(FGuid NewValue) { GeographicLocationId_Optional = NewValue; GeographicLocationId_IsSet = true; }
     /** @brief Clears the value of GeographicLocationId_Optional and sets GeographicLocationId_IsSet to false */
    void ClearGeographicLocationId() { GeographicLocationId_IsSet = false; }

    /** @brief The id of the datacenter location of the host */
    FGuid DatacenterLocationId_Optional{  };
    /** @brief true if DatacenterLocationId_Optional has been set to a value */
    bool DatacenterLocationId_IsSet{ false };
    /** @brief Gets the value of DatacenterLocationId_Optional, regardless of it having been set */
    FGuid& GetDatacenterLocationId() { return DatacenterLocationId_Optional; }
    /** @brief Gets the value of DatacenterLocationId_Optional, regardless of it having been set */
    const FGuid& GetDatacenterLocationId() const { return DatacenterLocationId_Optional; }
    /** @brief Gets the value of DatacenterLocationId_Optional, if it has been set, otherwise it returns DefaultValue */
    const FGuid& GetDatacenterLocationId(const FGuid& DefaultValue) const { if (DatacenterLocationId_IsSet) return DatacenterLocationId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of DatacenterLocationId_Optional and returns true if it has been set, otherwise returns false */
    bool GetDatacenterLocationId(FGuid& OutValue) const { if (DatacenterLocationId_IsSet) OutValue = DatacenterLocationId_Optional; return DatacenterLocationId_IsSet; }
    /** @brief Returns a pointer to DatacenterLocationId_Optional, if it has been set, otherwise returns nullptr */
    FGuid* GetDatacenterLocationIdOrNull() { if (DatacenterLocationId_IsSet) return &DatacenterLocationId_Optional; return nullptr; }
    /** @brief Returns a pointer to DatacenterLocationId_Optional, if it has been set, otherwise returns nullptr */
    const FGuid* GetDatacenterLocationIdOrNull() const { if (DatacenterLocationId_IsSet) return &DatacenterLocationId_Optional; return nullptr; }
    /** @brief Sets the value of DatacenterLocationId_Optional and also sets DatacenterLocationId_IsSet to true */
    void SetDatacenterLocationId(FGuid NewValue) { DatacenterLocationId_Optional = NewValue; DatacenterLocationId_IsSet = true; }
     /** @brief Clears the value of DatacenterLocationId_Optional and sets DatacenterLocationId_IsSet to false */
    void ClearDatacenterLocationId() { DatacenterLocationId_IsSet = false; }

    /** @brief The id of the machine class of the host */
    FGuid MachineClassId_Optional{  };
    /** @brief true if MachineClassId_Optional has been set to a value */
    bool MachineClassId_IsSet{ false };
    /** @brief Gets the value of MachineClassId_Optional, regardless of it having been set */
    FGuid& GetMachineClassId() { return MachineClassId_Optional; }
    /** @brief Gets the value of MachineClassId_Optional, regardless of it having been set */
    const FGuid& GetMachineClassId() const { return MachineClassId_Optional; }
    /** @brief Gets the value of MachineClassId_Optional, if it has been set, otherwise it returns DefaultValue */
    const FGuid& GetMachineClassId(const FGuid& DefaultValue) const { if (MachineClassId_IsSet) return MachineClassId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of MachineClassId_Optional and returns true if it has been set, otherwise returns false */
    bool GetMachineClassId(FGuid& OutValue) const { if (MachineClassId_IsSet) OutValue = MachineClassId_Optional; return MachineClassId_IsSet; }
    /** @brief Returns a pointer to MachineClassId_Optional, if it has been set, otherwise returns nullptr */
    FGuid* GetMachineClassIdOrNull() { if (MachineClassId_IsSet) return &MachineClassId_Optional; return nullptr; }
    /** @brief Returns a pointer to MachineClassId_Optional, if it has been set, otherwise returns nullptr */
    const FGuid* GetMachineClassIdOrNull() const { if (MachineClassId_IsSet) return &MachineClassId_Optional; return nullptr; }
    /** @brief Sets the value of MachineClassId_Optional and also sets MachineClassId_IsSet to true */
    void SetMachineClassId(FGuid NewValue) { MachineClassId_Optional = NewValue; MachineClassId_IsSet = true; }
     /** @brief Clears the value of MachineClassId_Optional and sets MachineClassId_IsSet to false */
    void ClearMachineClassId() { MachineClassId_IsSet = false; }

    /** @brief The id of the machine class overrides of the host */
    FGuid MachineClassOverridesId_Optional{  };
    /** @brief true if MachineClassOverridesId_Optional has been set to a value */
    bool MachineClassOverridesId_IsSet{ false };
    /** @brief Gets the value of MachineClassOverridesId_Optional, regardless of it having been set */
    FGuid& GetMachineClassOverridesId() { return MachineClassOverridesId_Optional; }
    /** @brief Gets the value of MachineClassOverridesId_Optional, regardless of it having been set */
    const FGuid& GetMachineClassOverridesId() const { return MachineClassOverridesId_Optional; }
    /** @brief Gets the value of MachineClassOverridesId_Optional, if it has been set, otherwise it returns DefaultValue */
    const FGuid& GetMachineClassOverridesId(const FGuid& DefaultValue) const { if (MachineClassOverridesId_IsSet) return MachineClassOverridesId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of MachineClassOverridesId_Optional and returns true if it has been set, otherwise returns false */
    bool GetMachineClassOverridesId(FGuid& OutValue) const { if (MachineClassOverridesId_IsSet) OutValue = MachineClassOverridesId_Optional; return MachineClassOverridesId_IsSet; }
    /** @brief Returns a pointer to MachineClassOverridesId_Optional, if it has been set, otherwise returns nullptr */
    FGuid* GetMachineClassOverridesIdOrNull() { if (MachineClassOverridesId_IsSet) return &MachineClassOverridesId_Optional; return nullptr; }
    /** @brief Returns a pointer to MachineClassOverridesId_Optional, if it has been set, otherwise returns nullptr */
    const FGuid* GetMachineClassOverridesIdOrNull() const { if (MachineClassOverridesId_IsSet) return &MachineClassOverridesId_Optional; return nullptr; }
    /** @brief Sets the value of MachineClassOverridesId_Optional and also sets MachineClassOverridesId_IsSet to true */
    void SetMachineClassOverridesId(FGuid NewValue) { MachineClassOverridesId_Optional = NewValue; MachineClassOverridesId_IsSet = true; }
     /** @brief Clears the value of MachineClassOverridesId_Optional and sets MachineClassOverridesId_IsSet to false */
    void ClearMachineClassOverridesId() { MachineClassOverridesId_IsSet = false; }

    /** @brief The id of the machine image of the host */
    FGuid MachineImageId_Optional{  };
    /** @brief true if MachineImageId_Optional has been set to a value */
    bool MachineImageId_IsSet{ false };
    /** @brief Gets the value of MachineImageId_Optional, regardless of it having been set */
    FGuid& GetMachineImageId() { return MachineImageId_Optional; }
    /** @brief Gets the value of MachineImageId_Optional, regardless of it having been set */
    const FGuid& GetMachineImageId() const { return MachineImageId_Optional; }
    /** @brief Gets the value of MachineImageId_Optional, if it has been set, otherwise it returns DefaultValue */
    const FGuid& GetMachineImageId(const FGuid& DefaultValue) const { if (MachineImageId_IsSet) return MachineImageId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of MachineImageId_Optional and returns true if it has been set, otherwise returns false */
    bool GetMachineImageId(FGuid& OutValue) const { if (MachineImageId_IsSet) OutValue = MachineImageId_Optional; return MachineImageId_IsSet; }
    /** @brief Returns a pointer to MachineImageId_Optional, if it has been set, otherwise returns nullptr */
    FGuid* GetMachineImageIdOrNull() { if (MachineImageId_IsSet) return &MachineImageId_Optional; return nullptr; }
    /** @brief Returns a pointer to MachineImageId_Optional, if it has been set, otherwise returns nullptr */
    const FGuid* GetMachineImageIdOrNull() const { if (MachineImageId_IsSet) return &MachineImageId_Optional; return nullptr; }
    /** @brief Sets the value of MachineImageId_Optional and also sets MachineImageId_IsSet to true */
    void SetMachineImageId(FGuid NewValue) { MachineImageId_Optional = NewValue; MachineImageId_IsSet = true; }
     /** @brief Clears the value of MachineImageId_Optional and sets MachineImageId_IsSet to false */
    void ClearMachineImageId() { MachineImageId_IsSet = false; }

    /** @brief The id of the datacenter contract of the host */
    FGuid DatacenterContractId_Optional{  };
    /** @brief true if DatacenterContractId_Optional has been set to a value */
    bool DatacenterContractId_IsSet{ false };
    /** @brief Gets the value of DatacenterContractId_Optional, regardless of it having been set */
    FGuid& GetDatacenterContractId() { return DatacenterContractId_Optional; }
    /** @brief Gets the value of DatacenterContractId_Optional, regardless of it having been set */
    const FGuid& GetDatacenterContractId() const { return DatacenterContractId_Optional; }
    /** @brief Gets the value of DatacenterContractId_Optional, if it has been set, otherwise it returns DefaultValue */
    const FGuid& GetDatacenterContractId(const FGuid& DefaultValue) const { if (DatacenterContractId_IsSet) return DatacenterContractId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of DatacenterContractId_Optional and returns true if it has been set, otherwise returns false */
    bool GetDatacenterContractId(FGuid& OutValue) const { if (DatacenterContractId_IsSet) OutValue = DatacenterContractId_Optional; return DatacenterContractId_IsSet; }
    /** @brief Returns a pointer to DatacenterContractId_Optional, if it has been set, otherwise returns nullptr */
    FGuid* GetDatacenterContractIdOrNull() { if (DatacenterContractId_IsSet) return &DatacenterContractId_Optional; return nullptr; }
    /** @brief Returns a pointer to DatacenterContractId_Optional, if it has been set, otherwise returns nullptr */
    const FGuid* GetDatacenterContractIdOrNull() const { if (DatacenterContractId_IsSet) return &DatacenterContractId_Optional; return nullptr; }
    /** @brief Sets the value of DatacenterContractId_Optional and also sets DatacenterContractId_IsSet to true */
    void SetDatacenterContractId(FGuid NewValue) { DatacenterContractId_Optional = NewValue; DatacenterContractId_IsSet = true; }
     /** @brief Clears the value of DatacenterContractId_Optional and sets DatacenterContractId_IsSet to false */
    void ClearDatacenterContractId() { DatacenterContractId_IsSet = false; }
};

/** @} */
