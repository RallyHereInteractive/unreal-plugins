// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereDeveloperAPIBaseModel.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevSettingType.generated.h"

/** @defgroup RHAPI_DevSettingType RallyHere API Model DevSettingType
 *  @{
 */

/**
 * @brief
 */
USTRUCT(BlueprintType)
struct RALLYHEREDEVELOPERAPI_API FRHAPI_DevSettingType : public FRHAPI_DevModel
{
    GENERATED_BODY()

    /**
    * @brief Fills this object with data from the passed in JSON
    *
    * @param [in] JsonValue Data from the API call.
    *
    * @return true if parsing of the JSON data was successful.
    */
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

    /**
    * @brief Writes the data from this object into the specified JSON Writer stream
    *
    * @param [in] Writer JSON Writer stream to push .
    */
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /** @brief Account ID of the user who last modified the resource */
    FGuid LastModifiedAccountId_Optional{  };
    /** @brief true if LastModifiedAccountId_Optional has been set to a value */
    bool LastModifiedAccountId_IsSet{ false };
    /** @brief Gets the value of LastModifiedAccountId_Optional, regardless of it having been set */
    FGuid& GetLastModifiedAccountId() { return LastModifiedAccountId_Optional; }
    /** @brief Gets the value of LastModifiedAccountId_Optional, regardless of it having been set */
    const FGuid& GetLastModifiedAccountId() const { return LastModifiedAccountId_Optional; }
    /** @brief Gets the value of LastModifiedAccountId_Optional, if it has been set, otherwise it returns DefaultValue */
    const FGuid& GetLastModifiedAccountId(const FGuid& DefaultValue) const { if (LastModifiedAccountId_IsSet) return LastModifiedAccountId_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of LastModifiedAccountId_Optional and returns true if it has been set, otherwise returns false */
    bool GetLastModifiedAccountId(FGuid& OutValue) const { if (LastModifiedAccountId_IsSet) OutValue = LastModifiedAccountId_Optional; return LastModifiedAccountId_IsSet; }
    /** @brief Returns a pointer to LastModifiedAccountId_Optional, if it has been set, otherwise returns nullptr */
    FGuid* GetLastModifiedAccountIdOrNull() { if (LastModifiedAccountId_IsSet) return &LastModifiedAccountId_Optional; return nullptr; }
    /** @brief Returns a pointer to LastModifiedAccountId_Optional, if it has been set, otherwise returns nullptr */
    const FGuid* GetLastModifiedAccountIdOrNull() const { if (LastModifiedAccountId_IsSet) return &LastModifiedAccountId_Optional; return nullptr; }
    /** @brief Sets the value of LastModifiedAccountId_Optional and also sets LastModifiedAccountId_IsSet to true */
    void SetLastModifiedAccountId(FGuid NewValue) { LastModifiedAccountId_Optional = NewValue; LastModifiedAccountId_IsSet = true; }
     /** @brief Clears the value of LastModifiedAccountId_Optional and sets LastModifiedAccountId_IsSet to false */
    void ClearLastModifiedAccountId() { LastModifiedAccountId_IsSet = false; }

    /** @brief Timestamp of when the resource was last modified */
    FDateTime LastModifiedTimestamp_Optional{  };
    /** @brief true if LastModifiedTimestamp_Optional has been set to a value */
    bool LastModifiedTimestamp_IsSet{ false };
    /** @brief Gets the value of LastModifiedTimestamp_Optional, regardless of it having been set */
    FDateTime& GetLastModifiedTimestamp() { return LastModifiedTimestamp_Optional; }
    /** @brief Gets the value of LastModifiedTimestamp_Optional, regardless of it having been set */
    const FDateTime& GetLastModifiedTimestamp() const { return LastModifiedTimestamp_Optional; }
    /** @brief Gets the value of LastModifiedTimestamp_Optional, if it has been set, otherwise it returns DefaultValue */
    const FDateTime& GetLastModifiedTimestamp(const FDateTime& DefaultValue) const { if (LastModifiedTimestamp_IsSet) return LastModifiedTimestamp_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of LastModifiedTimestamp_Optional and returns true if it has been set, otherwise returns false */
    bool GetLastModifiedTimestamp(FDateTime& OutValue) const { if (LastModifiedTimestamp_IsSet) OutValue = LastModifiedTimestamp_Optional; return LastModifiedTimestamp_IsSet; }
    /** @brief Returns a pointer to LastModifiedTimestamp_Optional, if it has been set, otherwise returns nullptr */
    FDateTime* GetLastModifiedTimestampOrNull() { if (LastModifiedTimestamp_IsSet) return &LastModifiedTimestamp_Optional; return nullptr; }
    /** @brief Returns a pointer to LastModifiedTimestamp_Optional, if it has been set, otherwise returns nullptr */
    const FDateTime* GetLastModifiedTimestampOrNull() const { if (LastModifiedTimestamp_IsSet) return &LastModifiedTimestamp_Optional; return nullptr; }
    /** @brief Sets the value of LastModifiedTimestamp_Optional and also sets LastModifiedTimestamp_IsSet to true */
    void SetLastModifiedTimestamp(FDateTime NewValue) { LastModifiedTimestamp_Optional = NewValue; LastModifiedTimestamp_IsSet = true; }
     /** @brief Clears the value of LastModifiedTimestamp_Optional and sets LastModifiedTimestamp_IsSet to false */
    void ClearLastModifiedTimestamp() { LastModifiedTimestamp_IsSet = false; }

    /** @brief Timestamp of when the resource was created */
    FDateTime CreatedTimestamp_Optional{  };
    /** @brief true if CreatedTimestamp_Optional has been set to a value */
    bool CreatedTimestamp_IsSet{ false };
    /** @brief Gets the value of CreatedTimestamp_Optional, regardless of it having been set */
    FDateTime& GetCreatedTimestamp() { return CreatedTimestamp_Optional; }
    /** @brief Gets the value of CreatedTimestamp_Optional, regardless of it having been set */
    const FDateTime& GetCreatedTimestamp() const { return CreatedTimestamp_Optional; }
    /** @brief Gets the value of CreatedTimestamp_Optional, if it has been set, otherwise it returns DefaultValue */
    const FDateTime& GetCreatedTimestamp(const FDateTime& DefaultValue) const { if (CreatedTimestamp_IsSet) return CreatedTimestamp_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of CreatedTimestamp_Optional and returns true if it has been set, otherwise returns false */
    bool GetCreatedTimestamp(FDateTime& OutValue) const { if (CreatedTimestamp_IsSet) OutValue = CreatedTimestamp_Optional; return CreatedTimestamp_IsSet; }
    /** @brief Returns a pointer to CreatedTimestamp_Optional, if it has been set, otherwise returns nullptr */
    FDateTime* GetCreatedTimestampOrNull() { if (CreatedTimestamp_IsSet) return &CreatedTimestamp_Optional; return nullptr; }
    /** @brief Returns a pointer to CreatedTimestamp_Optional, if it has been set, otherwise returns nullptr */
    const FDateTime* GetCreatedTimestampOrNull() const { if (CreatedTimestamp_IsSet) return &CreatedTimestamp_Optional; return nullptr; }
    /** @brief Sets the value of CreatedTimestamp_Optional and also sets CreatedTimestamp_IsSet to true */
    void SetCreatedTimestamp(FDateTime NewValue) { CreatedTimestamp_Optional = NewValue; CreatedTimestamp_IsSet = true; }
     /** @brief Clears the value of CreatedTimestamp_Optional and sets CreatedTimestamp_IsSet to false */
    void ClearCreatedTimestamp() { CreatedTimestamp_IsSet = false; }

    FGuid SettingTypeId{  };
    /** @brief Gets the value of SettingTypeId */
    FGuid& GetSettingTypeId() { return SettingTypeId; }
    /** @brief Gets the value of SettingTypeId */
    const FGuid& GetSettingTypeId() const { return SettingTypeId; }
    /** @brief Sets the value of SettingTypeId */
    void SetSettingTypeId(FGuid NewValue) { SettingTypeId = NewValue;  }

    /** @brief User friendly identifier of setting type */
    FString Type{  };
    /** @brief Gets the value of Type */
    FString& GetType() { return Type; }
    /** @brief Gets the value of Type */
    const FString& GetType() const { return Type; }
    /** @brief Sets the value of Type */
    void SetType(FString NewValue) { Type = NewValue;  }

    /** @brief Version of setting type schema */
    int32 Version_Optional{  };
    /** @brief true if Version_Optional has been set to a value */
    bool Version_IsSet{ false };
    /** @brief Gets the value of Version_Optional, regardless of it having been set */
    int32& GetVersion() { return Version_Optional; }
    /** @brief Gets the value of Version_Optional, regardless of it having been set */
    const int32& GetVersion() const { return Version_Optional; }
    /** @brief Gets the value of Version_Optional, if it has been set, otherwise it returns DefaultValue */
    const int32& GetVersion(const int32& DefaultValue) const { if (Version_IsSet) return Version_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Version_Optional and returns true if it has been set, otherwise returns false */
    bool GetVersion(int32& OutValue) const { if (Version_IsSet) OutValue = Version_Optional; return Version_IsSet; }
    /** @brief Returns a pointer to Version_Optional, if it has been set, otherwise returns nullptr */
    int32* GetVersionOrNull() { if (Version_IsSet) return &Version_Optional; return nullptr; }
    /** @brief Returns a pointer to Version_Optional, if it has been set, otherwise returns nullptr */
    const int32* GetVersionOrNull() const { if (Version_IsSet) return &Version_Optional; return nullptr; }
    /** @brief Sets the value of Version_Optional and also sets Version_IsSet to true */
    void SetVersion(int32 NewValue) { Version_Optional = NewValue; Version_IsSet = true; }
     /** @brief Clears the value of Version_Optional and sets Version_IsSet to false */
    void ClearVersion() { Version_Optional = 1; Version_IsSet = false; }
    /** @brief Returns true if Version_Optional is set and matches the default value */
    bool IsVersionDefaultValue() const { return Version_IsSet && Version_Optional == 1; }
    /** @brief Sets the value of Version_Optional to its default and also sets Version_IsSet to true */
    void SetVersionToDefault() { Version_Optional = 1; Version_IsSet = true; }

    /** @brief JSONSchema defintion of the setting */
    FRHAPI_DevJsonObject ValueJsonschema_Optional{  };
    /** @brief true if ValueJsonschema_Optional has been set to a value */
    bool ValueJsonschema_IsSet{ false };
    /** @brief Gets the value of ValueJsonschema_Optional, regardless of it having been set */
    FRHAPI_DevJsonObject& GetValueJsonschema() { return ValueJsonschema_Optional; }
    /** @brief Gets the value of ValueJsonschema_Optional, regardless of it having been set */
    const FRHAPI_DevJsonObject& GetValueJsonschema() const { return ValueJsonschema_Optional; }
    /** @brief Gets the value of ValueJsonschema_Optional, if it has been set, otherwise it returns DefaultValue */
    const FRHAPI_DevJsonObject& GetValueJsonschema(const FRHAPI_DevJsonObject& DefaultValue) const { if (ValueJsonschema_IsSet) return ValueJsonschema_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of ValueJsonschema_Optional and returns true if it has been set, otherwise returns false */
    bool GetValueJsonschema(FRHAPI_DevJsonObject& OutValue) const { if (ValueJsonschema_IsSet) OutValue = ValueJsonschema_Optional; return ValueJsonschema_IsSet; }
    /** @brief Returns a pointer to ValueJsonschema_Optional, if it has been set, otherwise returns nullptr */
    FRHAPI_DevJsonObject* GetValueJsonschemaOrNull() { if (ValueJsonschema_IsSet) return &ValueJsonschema_Optional; return nullptr; }
    /** @brief Returns a pointer to ValueJsonschema_Optional, if it has been set, otherwise returns nullptr */
    const FRHAPI_DevJsonObject* GetValueJsonschemaOrNull() const { if (ValueJsonschema_IsSet) return &ValueJsonschema_Optional; return nullptr; }
    /** @brief Sets the value of ValueJsonschema_Optional and also sets ValueJsonschema_IsSet to true */
    void SetValueJsonschema(FRHAPI_DevJsonObject NewValue) { ValueJsonschema_Optional = NewValue; ValueJsonschema_IsSet = true; }
     /** @brief Clears the value of ValueJsonschema_Optional and sets ValueJsonschema_IsSet to false */
    void ClearValueJsonschema() { ValueJsonschema_IsSet = false; }

    /** @brief Whether setting type can be updated */
    bool AllowUpdate_Optional{  };
    /** @brief true if AllowUpdate_Optional has been set to a value */
    bool AllowUpdate_IsSet{ false };
    /** @brief Gets the value of AllowUpdate_Optional, regardless of it having been set */
    bool& GetAllowUpdate() { return AllowUpdate_Optional; }
    /** @brief Gets the value of AllowUpdate_Optional, regardless of it having been set */
    const bool& GetAllowUpdate() const { return AllowUpdate_Optional; }
    /** @brief Gets the value of AllowUpdate_Optional, if it has been set, otherwise it returns DefaultValue */
    const bool& GetAllowUpdate(const bool& DefaultValue) const { if (AllowUpdate_IsSet) return AllowUpdate_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of AllowUpdate_Optional and returns true if it has been set, otherwise returns false */
    bool GetAllowUpdate(bool& OutValue) const { if (AllowUpdate_IsSet) OutValue = AllowUpdate_Optional; return AllowUpdate_IsSet; }
    /** @brief Returns a pointer to AllowUpdate_Optional, if it has been set, otherwise returns nullptr */
    bool* GetAllowUpdateOrNull() { if (AllowUpdate_IsSet) return &AllowUpdate_Optional; return nullptr; }
    /** @brief Returns a pointer to AllowUpdate_Optional, if it has been set, otherwise returns nullptr */
    const bool* GetAllowUpdateOrNull() const { if (AllowUpdate_IsSet) return &AllowUpdate_Optional; return nullptr; }
    /** @brief Sets the value of AllowUpdate_Optional and also sets AllowUpdate_IsSet to true */
    void SetAllowUpdate(bool NewValue) { AllowUpdate_Optional = NewValue; AllowUpdate_IsSet = true; }
     /** @brief Clears the value of AllowUpdate_Optional and sets AllowUpdate_IsSet to false */
    void ClearAllowUpdate() { AllowUpdate_Optional = true; AllowUpdate_IsSet = false; }
    /** @brief Returns true if AllowUpdate_Optional is set and matches the default value */
    bool IsAllowUpdateDefaultValue() const { return AllowUpdate_IsSet && AllowUpdate_Optional == true; }
    /** @brief Sets the value of AllowUpdate_Optional to its default and also sets AllowUpdate_IsSet to true */
    void SetAllowUpdateToDefault() { AllowUpdate_Optional = true; AllowUpdate_IsSet = true; }
};

/** @} */
