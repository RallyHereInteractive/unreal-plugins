// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereDeveloperAPIAuthContext.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevExternalKeyCampaignSortOptions.h"
#include "DevSortOrder.h"
#include "DevCreateExternalKeyCampaignCollection.h"
#include "DevExternalKeyCampaign.h"
#include "DevExternalKeyCampaignCollection.h"
#include "DevHTTPValidationError.h"
#include "DevPatchExternalKeyCampaign.h"
#include "DevUpdateExternalKeyCampaign.h"

namespace RallyHereDeveloperAPI
{
using RallyHereDeveloperAPI::ToStringFormatArg;
using RallyHereDeveloperAPI::WriteJsonValue;
using RallyHereDeveloperAPI::TryGetJsonValue;

struct FRequest_SandboxCreateExternalKeyCampaigns;
struct FResponse_SandboxCreateExternalKeyCampaigns;
struct FRequest_SandboxDeleteManyExternalKeyCampaigns;
struct FResponse_SandboxDeleteManyExternalKeyCampaigns;
struct FRequest_SandboxDeleteSingleExternalKeyCampaign;
struct FResponse_SandboxDeleteSingleExternalKeyCampaign;
struct FRequest_SandboxGetExternalKeyCampaignById;
struct FResponse_SandboxGetExternalKeyCampaignById;
struct FRequest_SandboxGetExternalKeyCampaigns;
struct FResponse_SandboxGetExternalKeyCampaigns;
struct FRequest_SandboxPatchExternalKeyCampaign;
struct FResponse_SandboxPatchExternalKeyCampaign;
struct FRequest_SandboxUpdateExternalKeyCampaign;
struct FResponse_SandboxUpdateExternalKeyCampaign;

DECLARE_DELEGATE_OneParam(FDelegate_SandboxCreateExternalKeyCampaigns, const FResponse_SandboxCreateExternalKeyCampaigns&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxDeleteManyExternalKeyCampaigns, const FResponse_SandboxDeleteManyExternalKeyCampaigns&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxDeleteSingleExternalKeyCampaign, const FResponse_SandboxDeleteSingleExternalKeyCampaign&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetExternalKeyCampaignById, const FResponse_SandboxGetExternalKeyCampaignById&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetExternalKeyCampaigns, const FResponse_SandboxGetExternalKeyCampaigns&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxPatchExternalKeyCampaign, const FResponse_SandboxPatchExternalKeyCampaign&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxUpdateExternalKeyCampaign, const FResponse_SandboxUpdateExternalKeyCampaign&);

class RALLYHEREDEVELOPERAPI_API FSandboxConfigExternalKeyCampaignAPI : public FAPI
{
public:
    FSandboxConfigExternalKeyCampaignAPI();
    virtual ~FSandboxConfigExternalKeyCampaignAPI();

    FHttpRequestPtr SandboxCreateExternalKeyCampaigns(const FRequest_SandboxCreateExternalKeyCampaigns& Request, const FDelegate_SandboxCreateExternalKeyCampaigns& Delegate = FDelegate_SandboxCreateExternalKeyCampaigns(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxDeleteManyExternalKeyCampaigns(const FRequest_SandboxDeleteManyExternalKeyCampaigns& Request, const FDelegate_SandboxDeleteManyExternalKeyCampaigns& Delegate = FDelegate_SandboxDeleteManyExternalKeyCampaigns(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxDeleteSingleExternalKeyCampaign(const FRequest_SandboxDeleteSingleExternalKeyCampaign& Request, const FDelegate_SandboxDeleteSingleExternalKeyCampaign& Delegate = FDelegate_SandboxDeleteSingleExternalKeyCampaign(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetExternalKeyCampaignById(const FRequest_SandboxGetExternalKeyCampaignById& Request, const FDelegate_SandboxGetExternalKeyCampaignById& Delegate = FDelegate_SandboxGetExternalKeyCampaignById(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetExternalKeyCampaigns(const FRequest_SandboxGetExternalKeyCampaigns& Request, const FDelegate_SandboxGetExternalKeyCampaigns& Delegate = FDelegate_SandboxGetExternalKeyCampaigns(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxPatchExternalKeyCampaign(const FRequest_SandboxPatchExternalKeyCampaign& Request, const FDelegate_SandboxPatchExternalKeyCampaign& Delegate = FDelegate_SandboxPatchExternalKeyCampaign(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxUpdateExternalKeyCampaign(const FRequest_SandboxUpdateExternalKeyCampaign& Request, const FDelegate_SandboxUpdateExternalKeyCampaign& Delegate = FDelegate_SandboxUpdateExternalKeyCampaign(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);

private:
    void OnSandboxCreateExternalKeyCampaignsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxCreateExternalKeyCampaigns Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxDeleteManyExternalKeyCampaignsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxDeleteManyExternalKeyCampaigns Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxDeleteSingleExternalKeyCampaignResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxDeleteSingleExternalKeyCampaign Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetExternalKeyCampaignByIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetExternalKeyCampaignById Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetExternalKeyCampaignsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetExternalKeyCampaigns Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxPatchExternalKeyCampaignResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxPatchExternalKeyCampaign Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxUpdateExternalKeyCampaignResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxUpdateExternalKeyCampaign Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};

/* Create External Key Campaigns
 *
 * Create External Key Campaigns. Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxCreateExternalKeyCampaigns : public FRequest
{
    FRequest_SandboxCreateExternalKeyCampaigns();
    virtual ~FRequest_SandboxCreateExternalKeyCampaigns() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevCreateExternalKeyCampaignCollection CreateExternalKeyCampaignCollection;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxCreateExternalKeyCampaigns : public FResponse
{
    FResponse_SandboxCreateExternalKeyCampaigns(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxCreateExternalKeyCampaigns() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    TArray<FRHAPI_DevExternalKeyCampaign> Content;


    // Manual Response Helpers
    /* Response 201
    Successful Response
    */
    bool TryGetContentFor201(TArray<FRHAPI_DevExternalKeyCampaign>& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxCreateExternalKeyCampaigns
{
    typedef FRequest_SandboxCreateExternalKeyCampaigns Request;
    typedef FResponse_SandboxCreateExternalKeyCampaigns Response;
    typedef FDelegate_SandboxCreateExternalKeyCampaigns Delegate;
    typedef FSandboxConfigExternalKeyCampaignAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxCreateExternalKeyCampaigns(InRequest, InDelegate, Priority); }
};

/* Delete Many External Key Campaigns
 *
 * Delete many External Key Campaigns. Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxDeleteManyExternalKeyCampaigns : public FRequest
{
    FRequest_SandboxDeleteManyExternalKeyCampaigns();
    virtual ~FRequest_SandboxDeleteManyExternalKeyCampaigns() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    /* External Key Campaigns IDs to delete */
    TArray<FGuid> ExternalKeyCampaignIds;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxDeleteManyExternalKeyCampaigns : public FResponse
{
    FResponse_SandboxDeleteManyExternalKeyCampaigns(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxDeleteManyExternalKeyCampaigns() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    


    // Manual Response Helpers
    /* Response 204
    Successful Response
    */

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxDeleteManyExternalKeyCampaigns
{
    typedef FRequest_SandboxDeleteManyExternalKeyCampaigns Request;
    typedef FResponse_SandboxDeleteManyExternalKeyCampaigns Response;
    typedef FDelegate_SandboxDeleteManyExternalKeyCampaigns Delegate;
    typedef FSandboxConfigExternalKeyCampaignAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxDeleteManyExternalKeyCampaigns(InRequest, InDelegate, Priority); }
};

/* Delete Single External Key Campaign
 *
 * Delete single External Key Campaign. Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxDeleteSingleExternalKeyCampaign : public FRequest
{
    FRequest_SandboxDeleteSingleExternalKeyCampaign();
    virtual ~FRequest_SandboxDeleteSingleExternalKeyCampaign() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid ExternalKeyCampaignId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxDeleteSingleExternalKeyCampaign : public FResponse
{
    FResponse_SandboxDeleteSingleExternalKeyCampaign(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxDeleteSingleExternalKeyCampaign() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    


    // Manual Response Helpers
    /* Response 204
    Successful Response
    */

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxDeleteSingleExternalKeyCampaign
{
    typedef FRequest_SandboxDeleteSingleExternalKeyCampaign Request;
    typedef FResponse_SandboxDeleteSingleExternalKeyCampaign Response;
    typedef FDelegate_SandboxDeleteSingleExternalKeyCampaign Delegate;
    typedef FSandboxConfigExternalKeyCampaignAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxDeleteSingleExternalKeyCampaign(InRequest, InDelegate, Priority); }
};

/* Get External Key Campaign By Id
 *
 * Get External Key Campaign by ID. Requires any of permissions: 
 * 	 sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetExternalKeyCampaignById : public FRequest
{
    FRequest_SandboxGetExternalKeyCampaignById();
    virtual ~FRequest_SandboxGetExternalKeyCampaignById() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* External Key Campaign ID */
    FGuid ExternalKeyCampaignId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetExternalKeyCampaignById : public FResponse
{
    FResponse_SandboxGetExternalKeyCampaignById(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetExternalKeyCampaignById() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevExternalKeyCampaign Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevExternalKeyCampaign& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetExternalKeyCampaignById
{
    typedef FRequest_SandboxGetExternalKeyCampaignById Request;
    typedef FResponse_SandboxGetExternalKeyCampaignById Response;
    typedef FDelegate_SandboxGetExternalKeyCampaignById Delegate;
    typedef FSandboxConfigExternalKeyCampaignAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetExternalKeyCampaignById(InRequest, InDelegate, Priority); }
};

/* Get External Key Campaigns
 *
 * Get External Key Campaigns by filters. All filters must be true for an External Key Campaign to be returned. Requires any of permissions: 
 * 	 sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetExternalKeyCampaigns : public FRequest
{
    FRequest_SandboxGetExternalKeyCampaigns();
    virtual ~FRequest_SandboxGetExternalKeyCampaigns() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    /* External Key Campaign IDs to filter by */
    TOptional<TArray<FGuid>> ExternalKeyCampaignIds;
    /* Filter by External Key Campaign with matching key types */
    TOptional<TArray<FString>> KeyTypes;
    /* Filter by case insensitive name */
    TOptional<FString> Name;
    /* Filter by last modified account ID */
    TOptional<TArray<FGuid>> LastModifiedAccountIds;
    /* Sort results by */
    TOptional<ERHAPI_DevExternalKeyCampaignSortOptions> SortBy;
    /* Sort order */
    TOptional<ERHAPI_DevSortOrder> SortOrder;
    /* Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration */
    TOptional<FString> Cursor;
    /* The maximum number of elements to be returned per call */
    TOptional<int32> PageSize;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetExternalKeyCampaigns : public FResponse
{
    FResponse_SandboxGetExternalKeyCampaigns(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetExternalKeyCampaigns() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevExternalKeyCampaignCollection Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevExternalKeyCampaignCollection& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetExternalKeyCampaigns
{
    typedef FRequest_SandboxGetExternalKeyCampaigns Request;
    typedef FResponse_SandboxGetExternalKeyCampaigns Response;
    typedef FDelegate_SandboxGetExternalKeyCampaigns Delegate;
    typedef FSandboxConfigExternalKeyCampaignAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetExternalKeyCampaigns(InRequest, InDelegate, Priority); }
};

/* Patch External Key Campaign
 *
 * Patch External Key Campaign. Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxPatchExternalKeyCampaign : public FRequest
{
    FRequest_SandboxPatchExternalKeyCampaign();
    virtual ~FRequest_SandboxPatchExternalKeyCampaign() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid ExternalKeyCampaignId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevPatchExternalKeyCampaign PatchExternalKeyCampaign;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxPatchExternalKeyCampaign : public FResponse
{
    FResponse_SandboxPatchExternalKeyCampaign(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxPatchExternalKeyCampaign() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevExternalKeyCampaign Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevExternalKeyCampaign& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxPatchExternalKeyCampaign
{
    typedef FRequest_SandboxPatchExternalKeyCampaign Request;
    typedef FResponse_SandboxPatchExternalKeyCampaign Response;
    typedef FDelegate_SandboxPatchExternalKeyCampaign Delegate;
    typedef FSandboxConfigExternalKeyCampaignAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxPatchExternalKeyCampaign(InRequest, InDelegate, Priority); }
};

/* Update External Key Campaign
 *
 * Update External Key Campaign. Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxUpdateExternalKeyCampaign : public FRequest
{
    FRequest_SandboxUpdateExternalKeyCampaign();
    virtual ~FRequest_SandboxUpdateExternalKeyCampaign() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid ExternalKeyCampaignId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevUpdateExternalKeyCampaign UpdateExternalKeyCampaign;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxUpdateExternalKeyCampaign : public FResponse
{
    FResponse_SandboxUpdateExternalKeyCampaign(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxUpdateExternalKeyCampaign() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevExternalKeyCampaign Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevExternalKeyCampaign& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxUpdateExternalKeyCampaign
{
    typedef FRequest_SandboxUpdateExternalKeyCampaign Request;
    typedef FResponse_SandboxUpdateExternalKeyCampaign Response;
    typedef FDelegate_SandboxUpdateExternalKeyCampaign Delegate;
    typedef FSandboxConfigExternalKeyCampaignAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxUpdateExternalKeyCampaign(InRequest, InDelegate, Priority); }
};


}
