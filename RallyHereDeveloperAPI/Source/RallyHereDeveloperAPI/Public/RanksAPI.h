// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereDeveloperAPIAuthContext.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevAllRanksResponse.h"
#include "DevHTTPValidationError.h"
#include "DevRank.h"
#include "DevRankRequest.h"
#include "DevRankUpdateRequest.h"

namespace RallyHereDeveloperAPI
{
using RallyHereDeveloperAPI::ToStringFormatArg;
using RallyHereDeveloperAPI::WriteJsonValue;
using RallyHereDeveloperAPI::TryGetJsonValue;

struct FRequest_SandboxCreateRank;
struct FResponse_SandboxCreateRank;
struct FRequest_SandboxDeleteRank;
struct FResponse_SandboxDeleteRank;
struct FRequest_SandboxGetAllRanks;
struct FResponse_SandboxGetAllRanks;
struct FRequest_SandboxGetRank;
struct FResponse_SandboxGetRank;
struct FRequest_SandboxPatchRank;
struct FResponse_SandboxPatchRank;
struct FRequest_SandboxPutRank;
struct FResponse_SandboxPutRank;

DECLARE_DELEGATE_OneParam(FDelegate_SandboxCreateRank, const FResponse_SandboxCreateRank&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxDeleteRank, const FResponse_SandboxDeleteRank&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetAllRanks, const FResponse_SandboxGetAllRanks&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetRank, const FResponse_SandboxGetRank&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxPatchRank, const FResponse_SandboxPatchRank&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxPutRank, const FResponse_SandboxPutRank&);

class RALLYHEREDEVELOPERAPI_API FRanksAPI : public FAPI
{
public:
    FRanksAPI();
    virtual ~FRanksAPI();

    FHttpRequestPtr SandboxCreateRank(const FRequest_SandboxCreateRank& Request, const FDelegate_SandboxCreateRank& Delegate = FDelegate_SandboxCreateRank(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxDeleteRank(const FRequest_SandboxDeleteRank& Request, const FDelegate_SandboxDeleteRank& Delegate = FDelegate_SandboxDeleteRank(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetAllRanks(const FRequest_SandboxGetAllRanks& Request, const FDelegate_SandboxGetAllRanks& Delegate = FDelegate_SandboxGetAllRanks(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetRank(const FRequest_SandboxGetRank& Request, const FDelegate_SandboxGetRank& Delegate = FDelegate_SandboxGetRank(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxPatchRank(const FRequest_SandboxPatchRank& Request, const FDelegate_SandboxPatchRank& Delegate = FDelegate_SandboxPatchRank(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxPutRank(const FRequest_SandboxPutRank& Request, const FDelegate_SandboxPutRank& Delegate = FDelegate_SandboxPutRank(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);

private:
    void OnSandboxCreateRankResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxCreateRank Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxDeleteRankResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxDeleteRank Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetAllRanksResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetAllRanks Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetRankResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetRank Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxPatchRankResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxPatchRank Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxPutRankResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxPutRank Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};

/* Create Rank
 *
 * Create a new Rank in a sandbox
 * 
 * Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxCreateRank : public FRequest
{
    FRequest_SandboxCreateRank();
    virtual ~FRequest_SandboxCreateRank() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevRankRequest RankRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxCreateRank : public FResponse
{
    FResponse_SandboxCreateRank(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxCreateRank() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevRank Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevRank& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxCreateRank
{
    typedef FRequest_SandboxCreateRank Request;
    typedef FResponse_SandboxCreateRank Response;
    typedef FDelegate_SandboxCreateRank Delegate;
    typedef FRanksAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxCreateRank(InRequest, InDelegate, Priority); }
};

/* Delete Rank
 *
 * Delete an existing Rank in a sandbox
 * 
 * Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxDeleteRank : public FRequest
{
    FRequest_SandboxDeleteRank();
    virtual ~FRequest_SandboxDeleteRank() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid RankId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxDeleteRank : public FResponse
{
    FResponse_SandboxDeleteRank(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxDeleteRank() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    


    // Manual Response Helpers
    /* Response 204
    Successful Response
    */

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxDeleteRank
{
    typedef FRequest_SandboxDeleteRank Request;
    typedef FResponse_SandboxDeleteRank Response;
    typedef FDelegate_SandboxDeleteRank Delegate;
    typedef FRanksAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxDeleteRank(InRequest, InDelegate, Priority); }
};

/* Get All Ranks
 *
 * Get all Ranks in a sandbox
 * 
 * Requires any of permissions: 
 * 	 sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetAllRanks : public FRequest
{
    FRequest_SandboxGetAllRanks();
    virtual ~FRequest_SandboxGetAllRanks() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    /* The maximum number of elements to be returned per call */
    TOptional<int32> PageSize;
    /* Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration */
    TOptional<FString> Cursor;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetAllRanks : public FResponse
{
    FResponse_SandboxGetAllRanks(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetAllRanks() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevAllRanksResponse Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevAllRanksResponse& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetAllRanks
{
    typedef FRequest_SandboxGetAllRanks Request;
    typedef FResponse_SandboxGetAllRanks Response;
    typedef FDelegate_SandboxGetAllRanks Delegate;
    typedef FRanksAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetAllRanks(InRequest, InDelegate, Priority); }
};

/* Get Rank
 *
 * Get specific Rank in a sandbox
 * 
 * Requires any of permissions: 
 * 	 sandbox:config:view, sandbox:config:edit
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetRank : public FRequest
{
    FRequest_SandboxGetRank();
    virtual ~FRequest_SandboxGetRank() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid RankId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetRank : public FResponse
{
    FResponse_SandboxGetRank(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetRank() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevRank Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevRank& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetRank
{
    typedef FRequest_SandboxGetRank Request;
    typedef FResponse_SandboxGetRank Response;
    typedef FDelegate_SandboxGetRank Delegate;
    typedef FRanksAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetRank(InRequest, InDelegate, Priority); }
};

/* Patch Rank
 *
 * Update an existing Rank in a sandbox
 * 
 * Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxPatchRank : public FRequest
{
    FRequest_SandboxPatchRank();
    virtual ~FRequest_SandboxPatchRank() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid RankId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevRankUpdateRequest RankUpdateRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxPatchRank : public FResponse
{
    FResponse_SandboxPatchRank(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxPatchRank() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevRank Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevRank& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxPatchRank
{
    typedef FRequest_SandboxPatchRank Request;
    typedef FResponse_SandboxPatchRank Response;
    typedef FDelegate_SandboxPatchRank Delegate;
    typedef FRanksAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxPatchRank(InRequest, InDelegate, Priority); }
};

/* Put Rank
 *
 * Update an existing Rank in a sandbox
 * 
 * Requires permission sandbox:config:edit.
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxPutRank : public FRequest
{
    FRequest_SandboxPutRank();
    virtual ~FRequest_SandboxPutRank() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid RankId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevRankUpdateRequest RankUpdateRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxPutRank : public FResponse
{
    FResponse_SandboxPutRank(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxPutRank() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevRank Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevRank& OutContent) const;

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxPutRank
{
    typedef FRequest_SandboxPutRank Request;
    typedef FResponse_SandboxPutRank Response;
    typedef FDelegate_SandboxPutRank Delegate;
    typedef FRanksAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxPutRank(InRequest, InDelegate, Priority); }
};


}
