// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereDeveloperAPIAuthContext.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevAllRolesResponse.h"
#include "DevHTTPValidationError.h"
#include "DevRole.h"
#include "DevRoleCreate.h"
#include "DevRoleUpdate.h"
#include "Misc/TVariant.h"

namespace RallyHereDeveloperAPI
{
using RallyHereDeveloperAPI::ToStringFormatArg;
using RallyHereDeveloperAPI::WriteJsonValue;
using RallyHereDeveloperAPI::TryGetJsonValue;

struct FRequest_SandboxCreateRole;
struct FResponse_SandboxCreateRole;
struct FRequest_SandboxDeleteRole;
struct FResponse_SandboxDeleteRole;
struct FRequest_SandboxFullCreateRole;
struct FResponse_SandboxFullCreateRole;
struct FRequest_SandboxFullDeleteRole;
struct FResponse_SandboxFullDeleteRole;
struct FRequest_SandboxFullGetAllRolesForSandbox;
struct FResponse_SandboxFullGetAllRolesForSandbox;
struct FRequest_SandboxFullGetRoleForSandboxAndRoleId;
struct FResponse_SandboxFullGetRoleForSandboxAndRoleId;
struct FRequest_SandboxFullUpdateRole;
struct FResponse_SandboxFullUpdateRole;
struct FRequest_SandboxGetAllRolesForSandbox;
struct FResponse_SandboxGetAllRolesForSandbox;
struct FRequest_SandboxGetRoleForSandboxAndRoleId;
struct FResponse_SandboxGetRoleForSandboxAndRoleId;
struct FRequest_SandboxUpdateRole;
struct FResponse_SandboxUpdateRole;

DECLARE_DELEGATE_OneParam(FDelegate_SandboxCreateRole, const FResponse_SandboxCreateRole&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxDeleteRole, const FResponse_SandboxDeleteRole&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxFullCreateRole, const FResponse_SandboxFullCreateRole&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxFullDeleteRole, const FResponse_SandboxFullDeleteRole&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxFullGetAllRolesForSandbox, const FResponse_SandboxFullGetAllRolesForSandbox&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxFullGetRoleForSandboxAndRoleId, const FResponse_SandboxFullGetRoleForSandboxAndRoleId&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxFullUpdateRole, const FResponse_SandboxFullUpdateRole&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetAllRolesForSandbox, const FResponse_SandboxGetAllRolesForSandbox&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxGetRoleForSandboxAndRoleId, const FResponse_SandboxGetRoleForSandboxAndRoleId&);
DECLARE_DELEGATE_OneParam(FDelegate_SandboxUpdateRole, const FResponse_SandboxUpdateRole&);

class RALLYHEREDEVELOPERAPI_API FSandboxConfigRoleAPI : public FAPI
{
public:
    FSandboxConfigRoleAPI();
    virtual ~FSandboxConfigRoleAPI();

    FHttpRequestPtr SandboxCreateRole(const FRequest_SandboxCreateRole& Request, const FDelegate_SandboxCreateRole& Delegate = FDelegate_SandboxCreateRole(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxDeleteRole(const FRequest_SandboxDeleteRole& Request, const FDelegate_SandboxDeleteRole& Delegate = FDelegate_SandboxDeleteRole(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxFullCreateRole(const FRequest_SandboxFullCreateRole& Request, const FDelegate_SandboxFullCreateRole& Delegate = FDelegate_SandboxFullCreateRole(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxFullDeleteRole(const FRequest_SandboxFullDeleteRole& Request, const FDelegate_SandboxFullDeleteRole& Delegate = FDelegate_SandboxFullDeleteRole(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxFullGetAllRolesForSandbox(const FRequest_SandboxFullGetAllRolesForSandbox& Request, const FDelegate_SandboxFullGetAllRolesForSandbox& Delegate = FDelegate_SandboxFullGetAllRolesForSandbox(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxFullGetRoleForSandboxAndRoleId(const FRequest_SandboxFullGetRoleForSandboxAndRoleId& Request, const FDelegate_SandboxFullGetRoleForSandboxAndRoleId& Delegate = FDelegate_SandboxFullGetRoleForSandboxAndRoleId(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxFullUpdateRole(const FRequest_SandboxFullUpdateRole& Request, const FDelegate_SandboxFullUpdateRole& Delegate = FDelegate_SandboxFullUpdateRole(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetAllRolesForSandbox(const FRequest_SandboxGetAllRolesForSandbox& Request, const FDelegate_SandboxGetAllRolesForSandbox& Delegate = FDelegate_SandboxGetAllRolesForSandbox(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxGetRoleForSandboxAndRoleId(const FRequest_SandboxGetRoleForSandboxAndRoleId& Request, const FDelegate_SandboxGetRoleForSandboxAndRoleId& Delegate = FDelegate_SandboxGetRoleForSandboxAndRoleId(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr SandboxUpdateRole(const FRequest_SandboxUpdateRole& Request, const FDelegate_SandboxUpdateRole& Delegate = FDelegate_SandboxUpdateRole(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);

private:
    void OnSandboxCreateRoleResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxCreateRole Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxDeleteRoleResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxDeleteRole Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxFullCreateRoleResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxFullCreateRole Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxFullDeleteRoleResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxFullDeleteRole Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxFullGetAllRolesForSandboxResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxFullGetAllRolesForSandbox Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxFullGetRoleForSandboxAndRoleIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxFullGetRoleForSandboxAndRoleId Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxFullUpdateRoleResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxFullUpdateRole Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetAllRolesForSandboxResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetAllRolesForSandbox Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxGetRoleForSandboxAndRoleIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxGetRoleForSandboxAndRoleId Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnSandboxUpdateRoleResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_SandboxUpdateRole Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};

/* Create Role
 *
 * Create Role, requires sandbox:config:edit permission
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxCreateRole : public FRequest
{
    FRequest_SandboxCreateRole();
    virtual ~FRequest_SandboxCreateRole() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevRoleCreate RoleCreate;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxCreateRole : public FResponse
{
    FResponse_SandboxCreateRole(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxCreateRole() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevRole Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxCreateRole
{
    typedef FRequest_SandboxCreateRole Request;
    typedef FResponse_SandboxCreateRole Response;
    typedef FDelegate_SandboxCreateRole Delegate;
    typedef FSandboxConfigRoleAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxCreateRole(InRequest, InDelegate, Priority); }
};

/* Delete Role
 *
 * Delete Role, requires sandbox:config:edit permission
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxDeleteRole : public FRequest
{
    FRequest_SandboxDeleteRole();
    virtual ~FRequest_SandboxDeleteRole() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid RoleId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxDeleteRole : public FResponse
{
    FResponse_SandboxDeleteRole(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxDeleteRole() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    bool Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxDeleteRole
{
    typedef FRequest_SandboxDeleteRole Request;
    typedef FResponse_SandboxDeleteRole Response;
    typedef FDelegate_SandboxDeleteRole Delegate;
    typedef FSandboxConfigRoleAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxDeleteRole(InRequest, InDelegate, Priority); }
};

/* Create Role
 *
 * Create Role, requires sandbox:config:edit permission
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxFullCreateRole : public FRequest
{
    FRequest_SandboxFullCreateRole();
    virtual ~FRequest_SandboxFullCreateRole() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    /* Product ID or short name */
    TVariant<FGuid, FString> ProductIdentifier;
    /* Sandbox ID or short name */
    TVariant<FGuid, FString> SandboxIdentifier;
    FRHAPI_DevRoleCreate RoleCreate;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxFullCreateRole : public FResponse
{
    FResponse_SandboxFullCreateRole(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxFullCreateRole() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevRole Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxFullCreateRole
{
    typedef FRequest_SandboxFullCreateRole Request;
    typedef FResponse_SandboxFullCreateRole Response;
    typedef FDelegate_SandboxFullCreateRole Delegate;
    typedef FSandboxConfigRoleAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxFullCreateRole(InRequest, InDelegate, Priority); }
};

/* Delete Role
 *
 * Delete Role, requires sandbox:config:edit permission
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxFullDeleteRole : public FRequest
{
    FRequest_SandboxFullDeleteRole();
    virtual ~FRequest_SandboxFullDeleteRole() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid RoleId;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    /* Product ID or short name */
    TVariant<FGuid, FString> ProductIdentifier;
    /* Sandbox ID or short name */
    TVariant<FGuid, FString> SandboxIdentifier;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxFullDeleteRole : public FResponse
{
    FResponse_SandboxFullDeleteRole(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxFullDeleteRole() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    bool Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxFullDeleteRole
{
    typedef FRequest_SandboxFullDeleteRole Request;
    typedef FResponse_SandboxFullDeleteRole Response;
    typedef FDelegate_SandboxFullDeleteRole Delegate;
    typedef FSandboxConfigRoleAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxFullDeleteRole(InRequest, InDelegate, Priority); }
};

/* Get All Roles For Sandbox
 *
 * Get all Roles for Sandbox, requires sandbox:config:view | sandbox:config:edit permission
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxFullGetAllRolesForSandbox : public FRequest
{
    FRequest_SandboxFullGetAllRolesForSandbox();
    virtual ~FRequest_SandboxFullGetAllRolesForSandbox() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    /* Product ID or short name */
    TVariant<FGuid, FString> ProductIdentifier;
    /* Sandbox ID or short name */
    TVariant<FGuid, FString> SandboxIdentifier;
    /* The maximum number of elements to be returned per call */
    TOptional<int32> PageSize;
    /* Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration */
    TOptional<FString> Cursor;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxFullGetAllRolesForSandbox : public FResponse
{
    FResponse_SandboxFullGetAllRolesForSandbox(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxFullGetAllRolesForSandbox() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevAllRolesResponse Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxFullGetAllRolesForSandbox
{
    typedef FRequest_SandboxFullGetAllRolesForSandbox Request;
    typedef FResponse_SandboxFullGetAllRolesForSandbox Response;
    typedef FDelegate_SandboxFullGetAllRolesForSandbox Delegate;
    typedef FSandboxConfigRoleAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxFullGetAllRolesForSandbox(InRequest, InDelegate, Priority); }
};

/* Get Role For Sandbox And Role Id
 *
 * Get Role for Sandbox, requires sandbox:config:view | sandbox:config:edit permission
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxFullGetRoleForSandboxAndRoleId : public FRequest
{
    FRequest_SandboxFullGetRoleForSandboxAndRoleId();
    virtual ~FRequest_SandboxFullGetRoleForSandboxAndRoleId() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid RoleId;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    /* Product ID or short name */
    TVariant<FGuid, FString> ProductIdentifier;
    /* Sandbox ID or short name */
    TVariant<FGuid, FString> SandboxIdentifier;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxFullGetRoleForSandboxAndRoleId : public FResponse
{
    FResponse_SandboxFullGetRoleForSandboxAndRoleId(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxFullGetRoleForSandboxAndRoleId() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevRole Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxFullGetRoleForSandboxAndRoleId
{
    typedef FRequest_SandboxFullGetRoleForSandboxAndRoleId Request;
    typedef FResponse_SandboxFullGetRoleForSandboxAndRoleId Response;
    typedef FDelegate_SandboxFullGetRoleForSandboxAndRoleId Delegate;
    typedef FSandboxConfigRoleAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxFullGetRoleForSandboxAndRoleId(InRequest, InDelegate, Priority); }
};

/* Update Role
 *
 * Update Role, requires sandbox:config:edit permission
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxFullUpdateRole : public FRequest
{
    FRequest_SandboxFullUpdateRole();
    virtual ~FRequest_SandboxFullUpdateRole() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid RoleId;
    /* Organization ID or short name */
    TVariant<FGuid, FString> OrgIdentifier;
    /* Product ID or short name */
    TVariant<FGuid, FString> ProductIdentifier;
    /* Sandbox ID or short name */
    TVariant<FGuid, FString> SandboxIdentifier;
    FRHAPI_DevRoleUpdate RoleUpdate;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxFullUpdateRole : public FResponse
{
    FResponse_SandboxFullUpdateRole(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxFullUpdateRole() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevRole Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxFullUpdateRole
{
    typedef FRequest_SandboxFullUpdateRole Request;
    typedef FResponse_SandboxFullUpdateRole Response;
    typedef FDelegate_SandboxFullUpdateRole Delegate;
    typedef FSandboxConfigRoleAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxFullUpdateRole(InRequest, InDelegate, Priority); }
};

/* Get All Roles For Sandbox
 *
 * Get all Roles for Sandbox, requires sandbox:config:view | sandbox:config:edit permission
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetAllRolesForSandbox : public FRequest
{
    FRequest_SandboxGetAllRolesForSandbox();
    virtual ~FRequest_SandboxGetAllRolesForSandbox() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Sandbox ID */
    FGuid SandboxId;
    /* The maximum number of elements to be returned per call */
    TOptional<int32> PageSize;
    /* Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration */
    TOptional<FString> Cursor;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetAllRolesForSandbox : public FResponse
{
    FResponse_SandboxGetAllRolesForSandbox(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetAllRolesForSandbox() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevAllRolesResponse Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetAllRolesForSandbox
{
    typedef FRequest_SandboxGetAllRolesForSandbox Request;
    typedef FResponse_SandboxGetAllRolesForSandbox Response;
    typedef FDelegate_SandboxGetAllRolesForSandbox Delegate;
    typedef FSandboxConfigRoleAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetAllRolesForSandbox(InRequest, InDelegate, Priority); }
};

/* Get Role For Sandbox And Role Id
 *
 * Get Role for Sandbox, requires sandbox:config:view | sandbox:config:edit permission
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxGetRoleForSandboxAndRoleId : public FRequest
{
    FRequest_SandboxGetRoleForSandboxAndRoleId();
    virtual ~FRequest_SandboxGetRoleForSandboxAndRoleId() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid RoleId;
    /* Sandbox ID */
    FGuid SandboxId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxGetRoleForSandboxAndRoleId : public FResponse
{
    FResponse_SandboxGetRoleForSandboxAndRoleId(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxGetRoleForSandboxAndRoleId() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevRole Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxGetRoleForSandboxAndRoleId
{
    typedef FRequest_SandboxGetRoleForSandboxAndRoleId Request;
    typedef FResponse_SandboxGetRoleForSandboxAndRoleId Response;
    typedef FDelegate_SandboxGetRoleForSandboxAndRoleId Delegate;
    typedef FSandboxConfigRoleAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxGetRoleForSandboxAndRoleId(InRequest, InDelegate, Priority); }
};

/* Update Role
 *
 * Update Role, requires sandbox:config:edit permission
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_SandboxUpdateRole : public FRequest
{
    FRequest_SandboxUpdateRole();
    virtual ~FRequest_SandboxUpdateRole() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    FGuid RoleId;
    /* Sandbox ID */
    FGuid SandboxId;
    FRHAPI_DevRoleUpdate RoleUpdate;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_SandboxUpdateRole : public FResponse
{
    FResponse_SandboxUpdateRole(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_SandboxUpdateRole() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevRole Content;

};

struct RALLYHEREDEVELOPERAPI_API Traits_SandboxUpdateRole
{
    typedef FRequest_SandboxUpdateRole Request;
    typedef FResponse_SandboxUpdateRole Response;
    typedef FDelegate_SandboxUpdateRole Delegate;
    typedef FSandboxConfigRoleAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.SandboxUpdateRole(InRequest, InDelegate, Priority); }
};


}
