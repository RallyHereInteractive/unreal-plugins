// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "RallyHereDeveloperAPIBaseModel.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevAccountOrganizationAccount.generated.h"

/** @defgroup RHAPI_DevAccountOrganizationAccount RallyHere API Model DevAccountOrganizationAccount
 *  @{
 */

/**
 * @brief 
 */
USTRUCT(BlueprintType)
struct RALLYHEREDEVELOPERAPI_API FRHAPI_DevAccountOrganizationAccount : public FRHAPI_DevModel
{
    GENERATED_BODY()

    /**
    * @brief Fills this object with data from the passed in JSON
    *
    * @param [in] JsonValue Data from the API call.
    *
    * @return true if parsing of the JSON data was successful.
    */
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override final;

    /**
    * @brief Writes the data from this object into the specified JSON Writer stream
    *
    * @param [in] Writer JSON Writer stream to push .
    */
    void WriteJson(TSharedRef<TJsonWriter<>>& Writer) const override final;

    /** @brief Organization that this user belongs to */
    FGuid OrgId{  };
    /** @brief Gets the value of OrgId */
    FGuid& GetOrgId() { return OrgId; }
    /** @brief Gets the value of OrgId */
    const FGuid& GetOrgId() const { return OrgId; }
    /** @brief Sets the value of OrgId */
    void SetOrgId(FGuid NewValue) { OrgId = NewValue;  }

    /** @brief Account id */
    FGuid AccountId{  };
    /** @brief Gets the value of AccountId */
    FGuid& GetAccountId() { return AccountId; }
    /** @brief Gets the value of AccountId */
    const FGuid& GetAccountId() const { return AccountId; }
    /** @brief Sets the value of AccountId */
    void SetAccountId(FGuid NewValue) { AccountId = NewValue;  }

    /** @brief Email address for this account */
    FString AccountEmail{  };
    /** @brief Gets the value of AccountEmail */
    FString& GetAccountEmail() { return AccountEmail; }
    /** @brief Gets the value of AccountEmail */
    const FString& GetAccountEmail() const { return AccountEmail; }
    /** @brief Sets the value of AccountEmail */
    void SetAccountEmail(FString NewValue) { AccountEmail = NewValue;  }

    /** @brief Last IP address for this account login */
    FString LastIp_Optional{  };
    /** @brief true if LastIp_Optional has been set to a value */
    bool LastIp_IsSet{ false };
    /** @brief Gets the value of LastIp_Optional, regardless of it having been set */
    FString& GetLastIp() { return LastIp_Optional; }
    /** @brief Gets the value of LastIp_Optional, regardless of it having been set */
    const FString& GetLastIp() const { return LastIp_Optional; }
    /** @brief Gets the value of LastIp_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetLastIp(const FString& DefaultValue) const { if (LastIp_IsSet) return LastIp_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of LastIp_Optional and returns true if it has been set, otherwise returns false */
    bool GetLastIp(FString& OutValue) const { if (LastIp_IsSet) OutValue = LastIp_Optional; return LastIp_IsSet; }
    /** @brief Returns a pointer to LastIp_Optional, if it has been set, otherwise returns nullptr */
    FString* GetLastIpOrNull() { if (LastIp_IsSet) return &LastIp_Optional; return nullptr; }
    /** @brief Returns a pointer to LastIp_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetLastIpOrNull() const { if (LastIp_IsSet) return &LastIp_Optional; return nullptr; }
    /** @brief Sets the value of LastIp_Optional and also sets LastIp_IsSet to true */
    void SetLastIp(FString NewValue) { LastIp_Optional = NewValue; LastIp_IsSet = true; }
     /** @brief Clears the value of LastIp_Optional and sets LastIp_IsSet to false */
    void ClearLastIp() { LastIp_IsSet = false; }

    /** @brief Last login time for this account */
    FString LastLogin_Optional{  };
    /** @brief true if LastLogin_Optional has been set to a value */
    bool LastLogin_IsSet{ false };
    /** @brief Gets the value of LastLogin_Optional, regardless of it having been set */
    FString& GetLastLogin() { return LastLogin_Optional; }
    /** @brief Gets the value of LastLogin_Optional, regardless of it having been set */
    const FString& GetLastLogin() const { return LastLogin_Optional; }
    /** @brief Gets the value of LastLogin_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetLastLogin(const FString& DefaultValue) const { if (LastLogin_IsSet) return LastLogin_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of LastLogin_Optional and returns true if it has been set, otherwise returns false */
    bool GetLastLogin(FString& OutValue) const { if (LastLogin_IsSet) OutValue = LastLogin_Optional; return LastLogin_IsSet; }
    /** @brief Returns a pointer to LastLogin_Optional, if it has been set, otherwise returns nullptr */
    FString* GetLastLoginOrNull() { if (LastLogin_IsSet) return &LastLogin_Optional; return nullptr; }
    /** @brief Returns a pointer to LastLogin_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetLastLoginOrNull() const { if (LastLogin_IsSet) return &LastLogin_Optional; return nullptr; }
    /** @brief Sets the value of LastLogin_Optional and also sets LastLogin_IsSet to true */
    void SetLastLogin(FString NewValue) { LastLogin_Optional = NewValue; LastLogin_IsSet = true; }
     /** @brief Clears the value of LastLogin_Optional and sets LastLogin_IsSet to false */
    void ClearLastLogin() { LastLogin_IsSet = false; }

    /** @brief Name for this account */
    FString Name_Optional{  };
    /** @brief true if Name_Optional has been set to a value */
    bool Name_IsSet{ false };
    /** @brief Gets the value of Name_Optional, regardless of it having been set */
    FString& GetName() { return Name_Optional; }
    /** @brief Gets the value of Name_Optional, regardless of it having been set */
    const FString& GetName() const { return Name_Optional; }
    /** @brief Gets the value of Name_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetName(const FString& DefaultValue) const { if (Name_IsSet) return Name_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Name_Optional and returns true if it has been set, otherwise returns false */
    bool GetName(FString& OutValue) const { if (Name_IsSet) OutValue = Name_Optional; return Name_IsSet; }
    /** @brief Returns a pointer to Name_Optional, if it has been set, otherwise returns nullptr */
    FString* GetNameOrNull() { if (Name_IsSet) return &Name_Optional; return nullptr; }
    /** @brief Returns a pointer to Name_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetNameOrNull() const { if (Name_IsSet) return &Name_Optional; return nullptr; }
    /** @brief Sets the value of Name_Optional and also sets Name_IsSet to true */
    void SetName(FString NewValue) { Name_Optional = NewValue; Name_IsSet = true; }
     /** @brief Clears the value of Name_Optional and sets Name_IsSet to false */
    void ClearName() { Name_IsSet = false; }

    /** @brief Nickname for this account */
    FString Nickname_Optional{  };
    /** @brief true if Nickname_Optional has been set to a value */
    bool Nickname_IsSet{ false };
    /** @brief Gets the value of Nickname_Optional, regardless of it having been set */
    FString& GetNickname() { return Nickname_Optional; }
    /** @brief Gets the value of Nickname_Optional, regardless of it having been set */
    const FString& GetNickname() const { return Nickname_Optional; }
    /** @brief Gets the value of Nickname_Optional, if it has been set, otherwise it returns DefaultValue */
    const FString& GetNickname(const FString& DefaultValue) const { if (Nickname_IsSet) return Nickname_Optional; return DefaultValue; }
    /** @brief Fills OutValue with the value of Nickname_Optional and returns true if it has been set, otherwise returns false */
    bool GetNickname(FString& OutValue) const { if (Nickname_IsSet) OutValue = Nickname_Optional; return Nickname_IsSet; }
    /** @brief Returns a pointer to Nickname_Optional, if it has been set, otherwise returns nullptr */
    FString* GetNicknameOrNull() { if (Nickname_IsSet) return &Nickname_Optional; return nullptr; }
    /** @brief Returns a pointer to Nickname_Optional, if it has been set, otherwise returns nullptr */
    const FString* GetNicknameOrNull() const { if (Nickname_IsSet) return &Nickname_Optional; return nullptr; }
    /** @brief Sets the value of Nickname_Optional and also sets Nickname_IsSet to true */
    void SetNickname(FString NewValue) { Nickname_Optional = NewValue; Nickname_IsSet = true; }
     /** @brief Clears the value of Nickname_Optional and sets Nickname_IsSet to false */
    void ClearNickname() { Nickname_IsSet = false; }
};

/** @} */
