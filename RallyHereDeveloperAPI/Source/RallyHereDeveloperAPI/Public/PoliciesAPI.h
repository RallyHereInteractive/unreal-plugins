// NOTE: This file is auto generated by https://github.com/hirezstudios/rally-here-api-generator
// Do not edit the file manually.
//
// Copyright 2018 OpenAPI-Generator Contributors (https://openapi-generator.tech)
// Copyright 2022-2023 RallyHere Interactive
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "CoreMinimal.h"
#include "RallyHereDeveloperAPIAuthContext.h"
#include "RallyHereDeveloperAPIHelpers.h"
#include "DevHTTPValidationError.h"
#include "DevPolicyListResponse.h"
#include "DevPolicyRequest.h"
#include "DevPolicyResponse.h"

namespace RallyHereDeveloperAPI
{
using RallyHereDeveloperAPI::ToStringFormatArg;
using RallyHereDeveloperAPI::WriteJsonValue;
using RallyHereDeveloperAPI::TryGetJsonValue;

struct FRequest_ProductCreatePolicy;
struct FResponse_ProductCreatePolicy;
struct FRequest_ProductDeletePolicyById;
struct FResponse_ProductDeletePolicyById;
struct FRequest_ProductGetAllPolicies;
struct FResponse_ProductGetAllPolicies;
struct FRequest_ProductGetAllPolicies1;
struct FResponse_ProductGetAllPolicies1;
struct FRequest_ProductGetPolicyById;
struct FResponse_ProductGetPolicyById;
struct FRequest_ProductUpdatePolicyById;
struct FResponse_ProductUpdatePolicyById;

DECLARE_DELEGATE_OneParam(FDelegate_ProductCreatePolicy, const FResponse_ProductCreatePolicy&);
DECLARE_DELEGATE_OneParam(FDelegate_ProductDeletePolicyById, const FResponse_ProductDeletePolicyById&);
DECLARE_DELEGATE_OneParam(FDelegate_ProductGetAllPolicies, const FResponse_ProductGetAllPolicies&);
DECLARE_DELEGATE_OneParam(FDelegate_ProductGetAllPolicies1, const FResponse_ProductGetAllPolicies1&);
DECLARE_DELEGATE_OneParam(FDelegate_ProductGetPolicyById, const FResponse_ProductGetPolicyById&);
DECLARE_DELEGATE_OneParam(FDelegate_ProductUpdatePolicyById, const FResponse_ProductUpdatePolicyById&);

class RALLYHEREDEVELOPERAPI_API FPoliciesAPI : public FAPI
{
public:
    FPoliciesAPI();
    virtual ~FPoliciesAPI();

    FHttpRequestPtr ProductCreatePolicy(const FRequest_ProductCreatePolicy& Request, const FDelegate_ProductCreatePolicy& Delegate = FDelegate_ProductCreatePolicy(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr ProductDeletePolicyById(const FRequest_ProductDeletePolicyById& Request, const FDelegate_ProductDeletePolicyById& Delegate = FDelegate_ProductDeletePolicyById(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr ProductGetAllPolicies(const FRequest_ProductGetAllPolicies& Request, const FDelegate_ProductGetAllPolicies& Delegate = FDelegate_ProductGetAllPolicies(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr ProductGetAllPolicies1(const FRequest_ProductGetAllPolicies1& Request, const FDelegate_ProductGetAllPolicies1& Delegate = FDelegate_ProductGetAllPolicies1(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr ProductGetPolicyById(const FRequest_ProductGetPolicyById& Request, const FDelegate_ProductGetPolicyById& Delegate = FDelegate_ProductGetPolicyById(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);
    FHttpRequestPtr ProductUpdatePolicyById(const FRequest_ProductUpdatePolicyById& Request, const FDelegate_ProductUpdatePolicyById& Delegate = FDelegate_ProductUpdatePolicyById(), int32 Priority = DefaultRallyHereDeveloperAPIPriority);

private:
    void OnProductCreatePolicyResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_ProductCreatePolicy Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnProductDeletePolicyByIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_ProductDeletePolicyById Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnProductGetAllPoliciesResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_ProductGetAllPolicies Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnProductGetAllPolicies1Response(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_ProductGetAllPolicies1 Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnProductGetPolicyByIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_ProductGetPolicyById Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);
    void OnProductUpdatePolicyByIdResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDelegate_ProductUpdatePolicyById Delegate, FRequestMetadata RequestMetadata, TSharedPtr<FAuthContext> AuthContextForRetry, int32 Priority);

};

/* Create Policy
 *
 * Create a new policy, requires policies:config:edit permission
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_ProductCreatePolicy : public FRequest
{
    FRequest_ProductCreatePolicy();
    virtual ~FRequest_ProductCreatePolicy() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Product ID */
    FGuid ProductId;
    FRHAPI_DevPolicyRequest PolicyRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_ProductCreatePolicy : public FResponse
{
    FResponse_ProductCreatePolicy(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_ProductCreatePolicy() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevPolicyResponse Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevPolicyResponse& OutContent) const;

    /* Response 400
    Bad Request
    */

    /* Response 404
    Not Found
    */

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_ProductCreatePolicy
{
    typedef FRequest_ProductCreatePolicy Request;
    typedef FResponse_ProductCreatePolicy Response;
    typedef FDelegate_ProductCreatePolicy Delegate;
    typedef FPoliciesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.ProductCreatePolicy(InRequest, InDelegate, Priority); }
};

/* Delete Policy By Id
 *
 * Delete a policy by ID, requires policies:config:edit permission
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_ProductDeletePolicyById : public FRequest
{
    FRequest_ProductDeletePolicyById();
    virtual ~FRequest_ProductDeletePolicyById() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Policy ID */
    FGuid PolicyId;
    /* Product ID */
    FGuid ProductId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_ProductDeletePolicyById : public FResponse
{
    FResponse_ProductDeletePolicyById(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_ProductDeletePolicyById() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevJsonValue Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevJsonValue& OutContent) const;

    /* Response 400
    Bad Request
    */

    /* Response 404
    Not Found
    */

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_ProductDeletePolicyById
{
    typedef FRequest_ProductDeletePolicyById Request;
    typedef FResponse_ProductDeletePolicyById Response;
    typedef FDelegate_ProductDeletePolicyById Delegate;
    typedef FPoliciesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.ProductDeletePolicyById(InRequest, InDelegate, Priority); }
};

/* Get All Policies
 *
 * Get all policies for a product, requires policies:config:view permission
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_ProductGetAllPolicies : public FRequest
{
    FRequest_ProductGetAllPolicies();
    virtual ~FRequest_ProductGetAllPolicies() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Product ID */
    FGuid ProductId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_ProductGetAllPolicies : public FResponse
{
    FResponse_ProductGetAllPolicies(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_ProductGetAllPolicies() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevPolicyListResponse Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevPolicyListResponse& OutContent) const;

    /* Response 400
    Bad Request
    */

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_ProductGetAllPolicies
{
    typedef FRequest_ProductGetAllPolicies Request;
    typedef FResponse_ProductGetAllPolicies Response;
    typedef FDelegate_ProductGetAllPolicies Delegate;
    typedef FPoliciesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.ProductGetAllPolicies(InRequest, InDelegate, Priority); }
};

/* Get All Policies
 *
 * Get all policies default policies, requires policies:config:view permission
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_ProductGetAllPolicies1 : public FRequest
{
    FRequest_ProductGetAllPolicies1();
    virtual ~FRequest_ProductGetAllPolicies1() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_ProductGetAllPolicies1 : public FResponse
{
    FResponse_ProductGetAllPolicies1(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_ProductGetAllPolicies1() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevPolicyListResponse Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevPolicyListResponse& OutContent) const;

    /* Response 400
    Bad Request
    */

};

struct RALLYHEREDEVELOPERAPI_API Traits_ProductGetAllPolicies1
{
    typedef FRequest_ProductGetAllPolicies1 Request;
    typedef FResponse_ProductGetAllPolicies1 Response;
    typedef FDelegate_ProductGetAllPolicies1 Delegate;
    typedef FPoliciesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.ProductGetAllPolicies1(InRequest, InDelegate, Priority); }
};

/* Get Policy By Id
 *
 * Get a policy by ID, requires policies:config:view permission
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_ProductGetPolicyById : public FRequest
{
    FRequest_ProductGetPolicyById();
    virtual ~FRequest_ProductGetPolicyById() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Policy ID */
    FGuid PolicyId;
    /* Product ID */
    FGuid ProductId;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_ProductGetPolicyById : public FResponse
{
    FResponse_ProductGetPolicyById(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_ProductGetPolicyById() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevPolicyResponse Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevPolicyResponse& OutContent) const;

    /* Response 400
    Bad Request
    */

    /* Response 404
    Not Found
    */

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_ProductGetPolicyById
{
    typedef FRequest_ProductGetPolicyById Request;
    typedef FResponse_ProductGetPolicyById Response;
    typedef FDelegate_ProductGetPolicyById Delegate;
    typedef FPoliciesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.ProductGetPolicyById(InRequest, InDelegate, Priority); }
};

/* Update Policy By Id
 *
 * Update a policy by ID, requires policies:config:edit permission
*/
struct RALLYHEREDEVELOPERAPI_API FRequest_ProductUpdatePolicyById : public FRequest
{
    FRequest_ProductUpdatePolicyById();
    virtual ~FRequest_ProductUpdatePolicyById() = default;
    bool SetupHttpRequest(const FHttpRequestRef& HttpRequest) const override;
    FString ComputePath() const override;
    FName GetSimplifiedPath() const override;
    TSharedPtr<FAuthContext> GetAuthContext() const override { return AuthContext; }

    TSharedPtr<FAuthContext> AuthContext;
    /* Policy ID */
    FGuid PolicyId;
    /* Product ID */
    FGuid ProductId;
    FRHAPI_DevPolicyRequest PolicyRequest;
};

struct RALLYHEREDEVELOPERAPI_API FResponse_ProductUpdatePolicyById : public FResponse
{
    FResponse_ProductUpdatePolicyById(FRequestMetadata InRequestMetadata);
    virtual ~FResponse_ProductUpdatePolicyById() = default;
    bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) override;
    void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) override;

    FRHAPI_DevPolicyResponse Content;


    // Manual Response Helpers
    /* Response 200
    Successful Response
    */
    bool TryGetContentFor200(FRHAPI_DevPolicyResponse& OutContent) const;

    /* Response 400
    Bad Request
    */

    /* Response 404
    Not Found
    */

    /* Response 422
    Validation Error
    */
    bool TryGetContentFor422(FRHAPI_DevHTTPValidationError& OutContent) const;

};

struct RALLYHEREDEVELOPERAPI_API Traits_ProductUpdatePolicyById
{
    typedef FRequest_ProductUpdatePolicyById Request;
    typedef FResponse_ProductUpdatePolicyById Response;
    typedef FDelegate_ProductUpdatePolicyById Delegate;
    typedef FPoliciesAPI API;
    static FString Name;

    static FHttpRequestPtr DoCall(API& InAPI, const Request& InRequest, Delegate InDelegate = Delegate(), int32 Priority = DefaultRallyHereDeveloperAPIPriority) { return InAPI.ProductUpdatePolicyById(InRequest, InDelegate, Priority); }
};


}
