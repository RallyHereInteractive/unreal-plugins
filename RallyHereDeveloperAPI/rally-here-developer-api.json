{
  "openapi": "3.0.3",
  "info": {
    "title": "rally-here-developer-api",
    "description": "API for the Rally Here Developer Portal.\n",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "/api"
    }
  ],
  "tags": [
    {
      "name": "Catalog",
      "description": "Operation to manage the catalog used in the inventory system."
    }
  ],
  "paths": {
    "/v1/org": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get All Orgs",
        "description": "Get all organizations available to you, requires org:config:view or org:config:edit permissions",
        "operationId": "get_all_orgs",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  },
                  "type": "array",
                  "title": "Response Get All Orgs"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Organization"
        ],
        "summary": "Create Org",
        "description": "Delete an organization, requires globalAdmin:*:* permissions",
        "operationId": "create_org",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/org/{org_identifier}": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get Org",
        "description": "Get an organization by ID or short name, requires org:config:view or org:config:edit permissions on the organization",
        "operationId": "get_org",
        "parameters": [
          {
            "description": "Organization ID or short name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Org Identifier",
              "description": "Organization ID or short name"
            },
            "name": "org_identifier",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Organization"
        ],
        "summary": "Update Org",
        "description": "Update an organization, requires org:config:edit permissions on the organization",
        "operationId": "update_org",
        "parameters": [
          {
            "description": "Organization ID or short name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Org Identifier",
              "description": "Organization ID or short name"
            },
            "name": "org_identifier",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUpdateRequest"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Organization"
        ],
        "summary": "Delete Org",
        "description": "Delete an organization, requires globalAdmin:*:* permissions",
        "operationId": "delete_org",
        "parameters": [
          {
            "description": "Organization ID or short name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Org Identifier",
              "description": "Organization ID or short name"
            },
            "name": "org_identifier",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/org-structure/{org_identifier}": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Get Org Structure",
        "description": "Get an organization structure by ID or short name, requires org:config:view or org:config:edit permissions on the organization",
        "operationId": "get_org_structure",
        "parameters": [
          {
            "description": "Organization ID or short name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Org Identifier",
              "description": "Organization ID or short name"
            },
            "name": "org_identifier",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/OrganizationStructure"
                  },
                  "type": "array",
                  "title": "Response Get Org Structure"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/org/{org_identifier}/product/{product_identifier}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get Org Product",
        "description": "Get a product by ID or short name, requires product:config:view | product:config:edit permission",
        "operationId": "get_org_product",
        "parameters": [
          {
            "description": "Organization ID or short name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Org Identifier",
              "description": "Organization ID or short name"
            },
            "name": "org_identifier",
            "in": "path"
          },
          {
            "description": "Product ID or short name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Product Identifier",
              "description": "Product ID or short name"
            },
            "name": "product_identifier",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Product"
        ],
        "summary": "Update Product",
        "description": "Update a product by ID or short name, requires product:config:edit permission",
        "operationId": "update_product",
        "parameters": [
          {
            "description": "Organization ID or short name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Org Identifier",
              "description": "Organization ID or short name"
            },
            "name": "org_identifier",
            "in": "path"
          },
          {
            "description": "Product ID or short name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Product Identifier",
              "description": "Product ID or short name"
            },
            "name": "product_identifier",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Product"
        ],
        "summary": "Delete Product",
        "description": "Delete a product by ID or short name, requires product:config:edit permission",
        "operationId": "delete_product",
        "parameters": [
          {
            "description": "Organization ID or short name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Org Identifier",
              "description": "Organization ID or short name"
            },
            "name": "org_identifier",
            "in": "path"
          },
          {
            "description": "Product ID or short name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Product Identifier",
              "description": "Product ID or short name"
            },
            "name": "product_identifier",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/org/{org_identifier}/product": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "Get Org Products",
        "description": "Get all products for an organization, requires org:config:view permission",
        "operationId": "get_org_products",
        "parameters": [
          {
            "description": "Organization ID or short name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Org Identifier",
              "description": "Organization ID or short name"
            },
            "name": "org_identifier",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  },
                  "type": "array",
                  "title": "Response Get Org Products"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "Create Product",
        "description": "Create a product for an organization, requires org:config:edit permission",
        "operationId": "create_product",
        "parameters": [
          {
            "description": "Organization ID or short name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Org Identifier",
              "description": "Organization ID or short name"
            },
            "name": "org_identifier",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/org/{org_identifier}/product/{product_identifier}/sandbox/{sandbox_identifier}": {
      "get": {
        "tags": [
          "Sandbox"
        ],
        "summary": "Get Org Product Sandbox",
        "description": "Get sandbox details, requires sandbox:config:view | sandbox:config:edit permission",
        "operationId": "get_org_product_sandbox",
        "parameters": [
          {
            "description": "Organization ID or short name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Org Identifier",
              "description": "Organization ID or short name"
            },
            "name": "org_identifier",
            "in": "path"
          },
          {
            "description": "Product ID or short name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Product Identifier",
              "description": "Product ID or short name"
            },
            "name": "product_identifier",
            "in": "path"
          },
          {
            "description": "Sandbox ID or short name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Sandbox Identifier",
              "description": "Sandbox ID or short name"
            },
            "name": "sandbox_identifier",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sandbox"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Sandbox"
        ],
        "summary": "Update Sandbox",
        "description": "Update sandbox details, requires sandbox:config:edit permission",
        "operationId": "update_sandbox",
        "parameters": [
          {
            "description": "Organization ID or short name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Org Identifier",
              "description": "Organization ID or short name"
            },
            "name": "org_identifier",
            "in": "path"
          },
          {
            "description": "Product ID or short name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Product Identifier",
              "description": "Product ID or short name"
            },
            "name": "product_identifier",
            "in": "path"
          },
          {
            "description": "Sandbox ID or short name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Sandbox Identifier",
              "description": "Sandbox ID or short name"
            },
            "name": "sandbox_identifier",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SandboxUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sandbox"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Sandbox"
        ],
        "summary": "Delete Sandbox",
        "description": "Delete sandbox, requires sandbox:config:edit permission",
        "operationId": "delete_sandbox",
        "parameters": [
          {
            "description": "Organization ID or short name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Org Identifier",
              "description": "Organization ID or short name"
            },
            "name": "org_identifier",
            "in": "path"
          },
          {
            "description": "Product ID or short name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Product Identifier",
              "description": "Product ID or short name"
            },
            "name": "product_identifier",
            "in": "path"
          },
          {
            "description": "Sandbox ID or short name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Sandbox Identifier",
              "description": "Sandbox ID or short name"
            },
            "name": "sandbox_identifier",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/org/{org_identifier}/product/{product_identifier}/sandboxes": {
      "get": {
        "tags": [
          "Sandbox"
        ],
        "summary": "Get Org Product Sandboxes",
        "description": "Get all sandboxes for a product, requires product:config:view | product:config:edit permission",
        "operationId": "get_org_product_sandboxes",
        "parameters": [
          {
            "description": "Organization ID or short name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Org Identifier",
              "description": "Organization ID or short name"
            },
            "name": "org_identifier",
            "in": "path"
          },
          {
            "description": "Product ID or short name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Product Identifier",
              "description": "Product ID or short name"
            },
            "name": "product_identifier",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Sandbox"
                  },
                  "type": "array",
                  "title": "Response Get Org Product Sandboxes"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/org/{org_identifier}/product/{product_identifier}/sandbox": {
      "post": {
        "tags": [
          "Sandbox"
        ],
        "summary": "Create Sandbox",
        "description": "Create sandbox, requires product:config:edit permission",
        "operationId": "create_sandbox",
        "parameters": [
          {
            "description": "Organization ID or short name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Org Identifier",
              "description": "Organization ID or short name"
            },
            "name": "org_identifier",
            "in": "path"
          },
          {
            "description": "Product ID or short name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Product Identifier",
              "description": "Product ID or short name"
            },
            "name": "product_identifier",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SandboxRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sandbox"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/org/{org_identifier}/product/{product_identifier}/sandbox/{sandbox_identifier}/copy": {
      "post": {
        "tags": [
          "Sandbox"
        ],
        "summary": "Copy From Existing Sandbox To Existing Sandbox",
        "description": "Create a copy of sandbox, requires product:config:edit permission",
        "operationId": "copy_from_existing_sandbox_to_existing_sandbox",
        "parameters": [
          {
            "description": "Organization ID or short name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Org Identifier",
              "description": "Organization ID or short name"
            },
            "name": "org_identifier",
            "in": "path"
          },
          {
            "description": "Product ID or short name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Product Identifier",
              "description": "Product ID or short name"
            },
            "name": "product_identifier",
            "in": "path"
          },
          {
            "description": "Sandbox ID or short name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Sandbox Identifier",
              "description": "Sandbox ID or short name"
            },
            "name": "sandbox_identifier",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SandboxCopyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/account/{account_identifier}": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Get Account",
        "description": "Get account details by account ID, requires globalAdmin:*:* permissions",
        "operationId": "get_account",
        "parameters": [
          {
            "description": "Account ID",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Account Identifier",
              "description": "Account ID"
            },
            "name": "account_identifier",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Accounts"
        ],
        "summary": "Update Account",
        "description": "Update an account by account ID, requires globalAdmin:*:* permissions",
        "operationId": "update_account",
        "parameters": [
          {
            "description": "Account ID",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Account Identifier",
              "description": "Account ID"
            },
            "name": "account_identifier",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountAuth0"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountAuth0"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Accounts"
        ],
        "summary": "Delete Account",
        "description": "Delete an account by account ID, requires globalAdmin:*:* permissions",
        "operationId": "delete_account",
        "parameters": [
          {
            "description": "Account ID",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Account Identifier",
              "description": "Account ID"
            },
            "name": "account_identifier",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/account_expand/{account_identifier}": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Get Account Expand",
        "description": "Get expanded account details by account ID, requires globalAdmin:*:* permissions",
        "operationId": "get_account_expand",
        "parameters": [
          {
            "description": "Account ID",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Account Identifier",
              "description": "Account ID"
            },
            "name": "account_identifier",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountExpand"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/account_pwd_reset/{account_identifier}": {
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Send Password Reset",
        "description": "Get expanded account details by account ID, requires globalAdmin:*:* permissions",
        "operationId": "send_password_reset",
        "parameters": [
          {
            "description": "Account ID",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Account Identifier",
              "description": "Account ID"
            },
            "name": "account_identifier",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/account": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Get All Accounts",
        "description": "Get all accounts, requires globalAdmin:*:* permissions",
        "operationId": "get_all_accounts",
        "parameters": [
          {
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Page",
              "default": 0
            },
            "name": "page",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Per Page",
              "default": 100
            },
            "name": "per_page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "User Account (User request, no m2m)"
        ],
        "summary": "Update Account By User",
        "description": "Update account details, no permissions required as request should be made using user account token",
        "operationId": "update_account_by_user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountAuth0"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Accounts"
        ],
        "summary": "Create Account",
        "description": "Create a new account, requires globalAdmin:*:* permissions",
        "operationId": "create_account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountCreationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/account/email/{account_email}": {
      "get": {
        "tags": [
          "Accounts"
        ],
        "summary": "Get Account By Email",
        "description": "Get account details by account email, requires globalAdmin:*:* permissions",
        "operationId": "get_account_by_email",
        "parameters": [
          {
            "description": "Account Email",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "title": "Account Email",
              "description": "Account Email"
            },
            "name": "account_email",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/account-org/{org_identifier}": {
      "get": {
        "tags": [
          "Organization Account"
        ],
        "summary": "Get All Accounts In Org",
        "description": "Get all Accounts in an Organization, requires accountOrg:config:view | accountOrg:config:edit permissions",
        "operationId": "get_all_accounts_in_org",
        "parameters": [
          {
            "description": "Organization ID or short name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Org Identifier",
              "description": "Organization ID or short name"
            },
            "name": "org_identifier",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AccountOrganizationAccountInfo"
                  },
                  "type": "array",
                  "title": "Response Get All Accounts In Org"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/account-org/{account_identifier}": {
      "get": {
        "tags": [
          "Organization Account"
        ],
        "summary": "Get Orgs For Accounts",
        "description": "Get all Organizations for an Account, requires globalAdmin:*:* permissions",
        "operationId": "get_orgs_for_accounts",
        "parameters": [
          {
            "description": "Account Identifier",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Account Identifier",
              "description": "Account Identifier"
            },
            "name": "account_identifier",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AccountOrganization"
                  },
                  "type": "array",
                  "title": "Response Get Orgs For Accounts"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/org/{org_identifier}/account/{account_identifier}": {
      "get": {
        "tags": [
          "Organization Account"
        ],
        "summary": "Get Account For Org",
        "description": "Get account details by account ID for Organization,requires accountOrg:config:view | accountOrg:config:edit permissions",
        "operationId": "get_account_for_org",
        "parameters": [
          {
            "description": "Organization ID or short name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Org Identifier",
              "description": "Organization ID or short name"
            },
            "name": "org_identifier",
            "in": "path"
          },
          {
            "description": "Account ID",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Account Identifier",
              "description": "Account ID"
            },
            "name": "account_identifier",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountOrganizationAccount"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/org/{org_identifier}/account-org": {
      "post": {
        "tags": [
          "Organization Account"
        ],
        "summary": "Create Account For Org",
        "description": "Create an Account if it does not exists and assign Account to Organization. If an existing account is found (matched by email) then the existing first, last, and nicknames will be used and values provided will be ignored. To update first, last, and nickname fields use the Account update API.This API requires accountOrg:config:edit permissions for the Organization.",
        "operationId": "create_account_for_org",
        "parameters": [
          {
            "description": "Organization ID or short name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Org Identifier",
              "description": "Organization ID or short name"
            },
            "name": "org_identifier",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountOrganizationCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountOrganization"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "409": {
            "description": "Conflict"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/org/{org_identifier}/account-org/{account_identifier}": {
      "delete": {
        "tags": [
          "Organization Account"
        ],
        "summary": "Delete Account From Org Api",
        "description": "Delete an Account Organization assignment, requires accountOrg:config:edit permissions",
        "operationId": "delete_account_from_org_api",
        "parameters": [
          {
            "description": "Organization ID or short name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Org Identifier",
              "description": "Organization ID or short name"
            },
            "name": "org_identifier",
            "in": "path"
          },
          {
            "description": "Account ID",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Account Identifier",
              "description": "Account ID"
            },
            "name": "account_identifier",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/account/resendVerificationEmail": {
      "post": {
        "tags": [
          "User Account (User request, no m2m)"
        ],
        "summary": "Resend Verification Email",
        "description": "Resend verification email, requires no permissions as request should be made using account token",
        "operationId": "resend_verification_email",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/permission": {
      "get": {
        "tags": [
          "Permissions"
        ],
        "summary": "Get All Permissions",
        "description": "Get all permissions, requires global admin permissions",
        "operationId": "get_all_permissions",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionsListResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/permission/{permission_id}": {
      "get": {
        "tags": [
          "Permissions"
        ],
        "summary": "Get Permission By Id",
        "description": "Get a permission by ID, requires global admin permissions",
        "operationId": "get_permission_by_id",
        "parameters": [
          {
            "description": "Permission ID",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Permission Id",
              "description": "Permission ID"
            },
            "name": "permission_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/portal-permissions-and-entities": {
      "get": {
        "tags": [
          "Auth0 Account Permissions"
        ],
        "summary": "Get Portal Permissions",
        "operationId": "get_portal_permissions",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPermissionsAndEntities"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/account-permissions-auth0": {
      "get": {
        "tags": [
          "Auth0 Account Permissions"
        ],
        "summary": "Get Account Permissions",
        "operationId": "get_account_permissions",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalPermissions"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/account-permissions-auth0/{auth0_user_id}": {
      "get": {
        "tags": [
          "Auth0 Account Permissions"
        ],
        "summary": "Get Account Permissions For Auth0",
        "operationId": "get_account_permissions_for_auth0",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 50,
              "minLength": 1,
              "title": "Auth0 User Id"
            },
            "name": "auth0_user_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalPermissions"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/org/{org_identifier}/product/{product_identifier}/verify": {
      "get": {
        "tags": [
          "Verify"
        ],
        "summary": "Verify",
        "operationId": "verify",
        "parameters": [
          {
            "description": "Organization ID or short name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Org Identifier",
              "description": "Organization ID or short name"
            },
            "name": "org_identifier",
            "in": "path"
          },
          {
            "description": "Product ID or short name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Product Identifier",
              "description": "Product ID or short name"
            },
            "name": "product_identifier",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionsListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBasic": []
          }
        ]
      }
    },
    "/v1/portal-permissions": {
      "get": {
        "tags": [
          "Portal Permissions"
        ],
        "summary": "Get All Portal Permissions",
        "description": "Get all portal permissions, requires portalPermissions:config:view or edit",
        "operationId": "get_all_portal_permissions",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PortalPermission"
                  },
                  "type": "array",
                  "title": "Response Get All Portal Permissions"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/portal-permissions/{permission_id}": {
      "get": {
        "tags": [
          "Portal Permissions"
        ],
        "summary": "Get Portal Permission By Id",
        "description": "Get portal permission by ID, requires portalPermissions:config:view permission",
        "operationId": "get_portal_permission_by_id",
        "parameters": [
          {
            "description": "Permission ID in the format <type>:<scope>:<access>",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Permission Id",
              "description": "Permission ID in the format <type>:<scope>:<access>"
            },
            "name": "permission_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalPermission"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/account-permissions/{account_id}": {
      "get": {
        "tags": [
          "Portal Permissions"
        ],
        "summary": "Get All Account Permissions For Account",
        "description": "Get all permissions assigned to an account, requires globalAdmin permission",
        "operationId": "get_all_account_permissions_for_account",
        "parameters": [
          {
            "description": "Account ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Account Id",
              "description": "Account ID"
            },
            "name": "account_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PortalAccountPermission"
                  },
                  "type": "array",
                  "title": "Response Get All Account Permissions For Account"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/account-permissions/{account_id}/{assigned_org_id}": {
      "get": {
        "tags": [
          "Portal Permissions"
        ],
        "summary": "Get All Account Permissions For Assigned Org",
        "description": "Get all permissions assigned to an account for a specific org, requires accountPermissions:config:view permission",
        "operationId": "get_all_account_permissions_for_assigned_org",
        "parameters": [
          {
            "description": "Org ID or Short Name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Assigned Org Id",
              "description": "Org ID or Short Name"
            },
            "name": "assigned_org_id",
            "in": "path"
          },
          {
            "description": "Account ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Account Id",
              "description": "Account ID"
            },
            "name": "account_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PortalAccountPermission"
                  },
                  "type": "array",
                  "title": "Response Get All Account Permissions For Assigned Org"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/org-account-permissions/{assigned_org_id}": {
      "get": {
        "tags": [
          "Portal Permissions"
        ],
        "summary": "Get Account Permission For Org",
        "description": "Get an account permission for all accounts in an org, requires accountPermissions:config:view or accountPermissions:config:edit permission",
        "operationId": "get_account_permission_for_org",
        "parameters": [
          {
            "description": "Org ID or Short Name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Assigned Org Id",
              "description": "Org ID or Short Name"
            },
            "name": "assigned_org_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/OrgPortalAccountsPermissions"
                  },
                  "type": "array",
                  "title": "Response Get Account Permission For Org"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/account-permissions/{assigned_org_id}": {
      "post": {
        "tags": [
          "Portal Permissions"
        ],
        "summary": "Create Account Permissions",
        "description": "Create a new account permission, requires accountPermissions:config:edit permission",
        "operationId": "create_account_permissions",
        "parameters": [
          {
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Assigned Org Id",
              "description": "Organization ID"
            },
            "name": "assigned_org_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PortalAccountPermissionRequest"
                  }
                ],
                "title": "Account Permission Request",
                "description": "Account Permission to create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalAccountPermission"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/account-permissions/{assigned_org_id}/{account_id}/{permission_id}": {
      "delete": {
        "tags": [
          "Portal Permissions"
        ],
        "summary": "Delete Account Permissions",
        "description": "Delete an Account Permission, requires accountPermissions:config:edit permission",
        "operationId": "delete_account_permissions",
        "parameters": [
          {
            "description": "Organization ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Assigned Org Id",
              "description": "Organization ID"
            },
            "name": "assigned_org_id",
            "in": "path"
          },
          {
            "description": "Account ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Account Id",
              "description": "Account ID"
            },
            "name": "account_id",
            "in": "path"
          },
          {
            "description": "Permission ID",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "title": "Permission Id",
              "description": "Permission ID"
            },
            "name": "permission_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/permissions-org-group/{org_identifier}": {
      "get": {
        "tags": [
          "Portal Permissions"
        ],
        "summary": "Get Org Groups For Org",
        "description": "Get all Org Groups for an Organization, requires permissionsOrgGroup:config:view | portalPermissions:config:view | permissionsOrgGroup:config:edit | portalPermissions:config:edit permission",
        "operationId": "get_org_groups_for_org",
        "parameters": [
          {
            "description": "Organization ID or short name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Org Identifier",
              "description": "Organization ID or short name"
            },
            "name": "org_identifier",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PortalPermissionOrgGroup"
                  },
                  "type": "array",
                  "title": "Response Get Org Groups For Org"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Portal Permissions"
        ],
        "summary": "Update Org Group",
        "description": "Update an Org Group, requires permissionsOrgGroup:config:edit | portalPermissions:config:edit permission",
        "operationId": "update_org_group",
        "parameters": [
          {
            "description": "Organization ID or short name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Org Identifier",
              "description": "Organization ID or short name"
            },
            "name": "org_identifier",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PortalPermissionOrgGroup"
                  }
                ],
                "title": "Org Group",
                "description": "Organization Group to update"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalPermissionOrgGroup"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Portal Permissions"
        ],
        "summary": "Create Org Group",
        "description": "Create an Org Group, requires permissionsOrgGroup:config:edit | portalPermissions:config:edit permission",
        "operationId": "create_org_group",
        "parameters": [
          {
            "description": "Organization ID or short name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Org Identifier",
              "description": "Organization ID or short name"
            },
            "name": "org_identifier",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PortalPermissionOrgGroup"
                  }
                ],
                "title": "Org Group",
                "description": "Organization Group to create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalPermissionOrgGroup"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/permissions-org-group/{org_identifier}/{group_id}": {
      "delete": {
        "tags": [
          "Portal Permissions"
        ],
        "summary": "Delete Org Group",
        "description": "Delete an Org Group, requires permissionsOrgGroup:config:edit | portalPermissions:config:edit permission",
        "operationId": "delete_org_group",
        "parameters": [
          {
            "description": "Organization ID or short name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Org Identifier",
              "description": "Organization ID or short name"
            },
            "name": "org_identifier",
            "in": "path"
          },
          {
            "description": "Org Group ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Group Id",
              "description": "Org Group ID"
            },
            "name": "group_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/{org_identifier}/permissions-org-group-permission/{group_id}": {
      "get": {
        "tags": [
          "Portal Permissions"
        ],
        "summary": "Get All Permissions For Permissions Org Group",
        "description": "Get all permissions for an Org Group, requires permissionsOrgGroup:config:view | portalPermissions:config:view | permissionsOrgGroup:config:edit | portalPermissions:config:edit permission",
        "operationId": "get_all_permissions_for_permissions_org_group",
        "parameters": [
          {
            "description": "Organization ID or short name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Org Identifier",
              "description": "Organization ID or short name"
            },
            "name": "org_identifier",
            "in": "path"
          },
          {
            "description": "Group ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Group Id",
              "description": "Group ID"
            },
            "name": "group_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PortalPermissionsOrgGroupPermission"
                  },
                  "type": "array",
                  "title": "Response Get All Permissions For Permissions Org Group"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/{org_identifier}/permissions-org-group-permission/{group_id}/{group_permission_id}": {
      "get": {
        "tags": [
          "Portal Permissions"
        ],
        "summary": "Get Permissions For Permissions Org Group",
        "description": "Get a permission for an Org Group, requires permissionsOrgGroup:config:view | portalPermissions:config:view | permissionsOrgGroup:config:edit | portalPermissions:config:edit permission",
        "operationId": "get_permissions_for_permissions_org_group",
        "parameters": [
          {
            "description": "Organization ID or short name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Org Identifier",
              "description": "Organization ID or short name"
            },
            "name": "org_identifier",
            "in": "path"
          },
          {
            "description": "Org Group ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Group Id",
              "description": "Org Group ID"
            },
            "name": "group_id",
            "in": "path"
          },
          {
            "description": "Permissions Group Permission ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Group Permission Id",
              "description": "Permissions Group Permission ID"
            },
            "name": "group_permission_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalPermissionsOrgGroupPermission"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Portal Permissions"
        ],
        "summary": "Delete Portal Permissions Org Group Permission",
        "description": "Delete a permission for an Org Group, requires permissionsOrgGroup:config:edit | portalPermissions:config:edit permission",
        "operationId": "delete_portal_permissions_org_group_permission",
        "parameters": [
          {
            "description": "Organization ID or short name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Org Identifier",
              "description": "Organization ID or short name"
            },
            "name": "org_identifier",
            "in": "path"
          },
          {
            "description": "Org Group ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Group Id",
              "description": "Org Group ID"
            },
            "name": "group_id",
            "in": "path"
          },
          {
            "description": "Permissions Group Permission ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Group Permission Id",
              "description": "Permissions Group Permission ID"
            },
            "name": "group_permission_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/{org_identifier}/permissions-org-group-permission": {
      "post": {
        "tags": [
          "Portal Permissions"
        ],
        "summary": "Create Portal Permissions Org Group Permission",
        "description": "Create a permission for an Org Group, requires permissionsOrgGroup:config:edit | portalPermissions:config:edit permission",
        "operationId": "create_portal_permissions_org_group_permission",
        "parameters": [
          {
            "description": "Organization ID or short name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Org Identifier",
              "description": "Organization ID or short name"
            },
            "name": "org_identifier",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PortalPermissionsOrgGroupPermissionRequest"
                  }
                ],
                "title": "Org Group Permission Request",
                "description": "Permission to add to Permissions Org Group"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalPermissionsOrgGroupPermission"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/{org_identifier}/permissions-org-group-account/account/{account_id}": {
      "get": {
        "tags": [
          "Portal Permissions"
        ],
        "summary": "Get Portal Permissions Org Groups Assigned To Account For Org",
        "description": "Get all permissions for an Account, requires permissionsOrgGroupAccount:config:view | portalPermissions:config:view permission | permissionsOrgGroupAccount:config:edit | portalPermissions:config:edit permission",
        "operationId": "get_portal_permissions_org_groups_assigned_to_account_for_org",
        "parameters": [
          {
            "description": "Organization ID or short name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Org Identifier",
              "description": "Organization ID or short name"
            },
            "name": "org_identifier",
            "in": "path"
          },
          {
            "description": "Account ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Account Id",
              "description": "Account ID"
            },
            "name": "account_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PortalPermissionOrgGroup"
                  },
                  "type": "array",
                  "title": "Response Get Portal Permissions Org Groups Assigned To Account For Org"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/{org_identifier}/permissions-org-group-account/group/{group_id}": {
      "get": {
        "tags": [
          "Portal Permissions"
        ],
        "summary": "Get Portal Permissions Org Group Accounts",
        "description": "Get all permissions for an Org Group, requires permissionsOrgGroupAccount:config:view | portalPermissions:config:view permission | permissionsOrgGroupAccount:config:edit | portalPermissions:config:edit permission",
        "operationId": "get_portal_permissions_org_group_accounts",
        "parameters": [
          {
            "description": "Organization ID or short name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Org Identifier",
              "description": "Organization ID or short name"
            },
            "name": "org_identifier",
            "in": "path"
          },
          {
            "description": "Org Group ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Group Id",
              "description": "Org Group ID"
            },
            "name": "group_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PortalPermissionsOrgGroupAccount"
                  },
                  "type": "array",
                  "title": "Response Get Portal Permissions Org Group Accounts"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/{org_identifier}/permissions-org-group-account": {
      "post": {
        "tags": [
          "Portal Permissions"
        ],
        "summary": "Create Portal Permissions Org Group Account",
        "description": "Assign a Permission Group to an Account, requires permissionsOrgGroupAccount:config:edit | portalPermissions:config:edit permission",
        "operationId": "create_portal_permissions_org_group_account",
        "parameters": [
          {
            "description": "Organization ID or short name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Org Identifier",
              "description": "Organization ID or short name"
            },
            "name": "org_identifier",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/PortalPermissionsOrgGroupAccount"
                  }
                ],
                "title": "Org Group Account Request",
                "description": "Permission Org Group to be added to Account"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortalPermissionsOrgGroupAccount"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/{org_identifier}/permissions-org-group-account/{group_id}/{account_id}": {
      "delete": {
        "tags": [
          "Portal Permissions"
        ],
        "summary": "Delete Portal Permissions Org Group Account",
        "description": "Delete a Permission Group from an Account, requires permissionsOrgGroupAccount:config:edit | portalPermissions:config:edit permission",
        "operationId": "delete_portal_permissions_org_group_account",
        "parameters": [
          {
            "description": "Organization ID or short name",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string",
                  "minLength": 1
                }
              ],
              "title": "Org Identifier",
              "description": "Organization ID or short name"
            },
            "name": "org_identifier",
            "in": "path"
          },
          {
            "description": "Org Group ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Group Id",
              "description": "Org Group ID"
            },
            "name": "group_id",
            "in": "path"
          },
          {
            "description": "Account ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Account Id",
              "description": "Account ID"
            },
            "name": "account_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/menu-data/{account_id}": {
      "get": {
        "tags": [
          "Portal Menu Data"
        ],
        "summary": "Get Menu Data",
        "operationId": "get_menu_data",
        "parameters": [
          {
            "description": "Account ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Account Id",
              "description": "Account ID"
            },
            "name": "account_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuData"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/menu-data": {
      "get": {
        "tags": [
          "Portal Menu Data"
        ],
        "summary": "Get Menu Data User From Token",
        "operationId": "get_menu_data_user_from_token",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MenuData"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/rh-event-schema": {
      "get": {
        "tags": [
          "Standard Event Schema"
        ],
        "summary": "Get All Rh Event Schemas",
        "description": "Get all standard events schema, requires org:config:view permissions",
        "operationId": "get_all_rh_event_schemas",
        "parameters": [
          {
            "description": "The maximum number of elements to be returned per call",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "title": "Page Size",
              "description": "The maximum number of elements to be returned per call",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Cursor",
              "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
              "default": "0"
            },
            "name": "cursor",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllRHEventSchemas"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Standard Event Schema"
        ],
        "summary": "Create Rh Event Schema",
        "description": "Create a standard event schema, requires globalAdmin:*:* permissions",
        "operationId": "create_rh_event_schema",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RHEventSchemaUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RHEventSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/rh-event-schema/{event_name}": {
      "get": {
        "tags": [
          "Standard Event Schema"
        ],
        "summary": "Get Rh Event Schema",
        "description": "Get the standard event schema by event name, requires org:config:view permissions",
        "operationId": "get_rh_event_schema",
        "parameters": [
          {
            "description": "name of the rh event",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Event Name",
              "description": "name of the rh event"
            },
            "name": "event_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RHEventSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Standard Event Schema"
        ],
        "summary": "Update Rh Event Schema",
        "description": "Update an standard event schema, requires global admin permission",
        "operationId": "update_rh_event_schema",
        "parameters": [
          {
            "description": "standard event name",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Event Name",
              "description": "standard event name"
            },
            "name": "event_name",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RHEventSchemaUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RHEventSchema"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Standard Event Schema"
        ],
        "summary": "Delete Rh Event Schema",
        "description": "Delete a standard event schema, requires globalAdmin:*:* permissions",
        "operationId": "delete_rh_event_schema",
        "parameters": [
          {
            "description": "standard event name",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Event Name",
              "description": "standard event name"
            },
            "name": "event_name",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_identifier}/game-config": {
      "get": {
        "tags": [
          "Sandbox Config - Game Config"
        ],
        "summary": "Get Sandbox Game Config",
        "description": "Get sandbox game config, requires sandbox:config:view or sandbox:config:edit permissions",
        "operationId": "get_sandbox_game_config",
        "parameters": [
          {
            "description": "Sandbox identifier",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string"
                }
              ],
              "title": "Sandbox Identifier",
              "description": "Sandbox identifier"
            },
            "name": "sandbox_identifier",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralConfig"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Sandbox Config - Game Config"
        ],
        "summary": "Update Sandbox Game Config",
        "description": "Upsert sandbox game config, requires sandbox:config:edit permissions",
        "operationId": "update_sandbox_game_config",
        "parameters": [
          {
            "description": "Sandbox identifier",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string"
                }
              ],
              "title": "Sandbox Identifier",
              "description": "Sandbox identifier"
            },
            "name": "sandbox_identifier",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GeneralConfigCreateUpdate"
                  }
                ],
                "title": "Game Config Request",
                "description": "Game config"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralConfig"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/armada/geographic_location": {
      "get": {
        "tags": [
          "Armada - Geographic Location"
        ],
        "summary": "Get All Geo Locs",
        "description": "Get all geographic locations",
        "operationId": "get_all_geo_locs",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/GeographicLocation"
                  },
                  "type": "array",
                  "title": "Response Get All Geo Locs"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Armada - Geographic Location"
        ],
        "summary": "Create Geo Loc",
        "description": "Create a geographic location",
        "operationId": "create_geo_loc",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GeographicLocationCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeographicLocation"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/armada/geographic_location/{geo_loc_id}": {
      "get": {
        "tags": [
          "Armada - Geographic Location"
        ],
        "summary": "Get Geo Loc",
        "description": "Get a geographic location",
        "operationId": "get_geo_loc",
        "parameters": [
          {
            "description": "The geographic location ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Geo Loc Id",
              "description": "The geographic location ID"
            },
            "name": "geo_loc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeographicLocation"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Armada - Geographic Location"
        ],
        "summary": "Update Geo Loc",
        "description": "Update a geographic location",
        "operationId": "update_geo_loc",
        "parameters": [
          {
            "description": "The geographic location ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Geo Loc Id",
              "description": "The geographic location ID"
            },
            "name": "geo_loc_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GeographicLocationUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeographicLocation"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/armada/geographic_location/{geo_loc_id}/versions": {
      "get": {
        "tags": [
          "Armada - Geographic Location"
        ],
        "summary": "Get Geo Loc Versions",
        "description": "Get versions for the geographic location",
        "operationId": "get_geo_loc_versions",
        "parameters": [
          {
            "description": "The geographic location ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Geo Loc Id",
              "description": "The geographic location ID"
            },
            "name": "geo_loc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeographicLocationVersionsAndTransactions"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/armada/datacenter_provider": {
      "get": {
        "tags": [
          "Armada - Datacenter Provider"
        ],
        "summary": "Get All Dps",
        "description": "Get all datacenter providers",
        "operationId": "get_all_dps",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DatacenterProvider"
                  },
                  "type": "array",
                  "title": "Response Get All Dps"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Armada - Datacenter Provider"
        ],
        "summary": "Create Dp",
        "description": "Create a datacenter provider",
        "operationId": "create_dp",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatacenterProviderCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatacenterProvider"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/armada/datacenter_provider/{dp_id}": {
      "get": {
        "tags": [
          "Armada - Datacenter Provider"
        ],
        "summary": "Get Dp",
        "description": "Get a datacenter provider",
        "operationId": "get_dp",
        "parameters": [
          {
            "description": "The datacenter provider ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Dp Id",
              "description": "The datacenter provider ID"
            },
            "name": "dp_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatacenterProvider"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Armada - Datacenter Provider"
        ],
        "summary": "Update Dp",
        "description": "Update a datacenter provider",
        "operationId": "update_dp",
        "parameters": [
          {
            "description": "The datacenter provider ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Dp Id",
              "description": "The datacenter provider ID"
            },
            "name": "dp_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatacenterProviderUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatacenterProvider"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/armada/datacenter_provider/{dp_id}/versions": {
      "get": {
        "tags": [
          "Armada - Datacenter Provider"
        ],
        "summary": "Get Dp Versions",
        "description": "Get all version history for a datacenter provider",
        "operationId": "get_dp_versions",
        "parameters": [
          {
            "description": "The datacenter provider ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Dp Id",
              "description": "The datacenter provider ID"
            },
            "name": "dp_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatacenterProviderVersionsAndTransactions"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/armada/datacenter_location": {
      "get": {
        "tags": [
          "Armada - Datacenter Location"
        ],
        "summary": "Get All Dls",
        "description": "Get all datacenter locations",
        "operationId": "get_all_dls",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DatacenterLocation"
                  },
                  "type": "array",
                  "title": "Response Get All Dls"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Armada - Datacenter Location"
        ],
        "summary": "Create Dl",
        "description": "Create a datacenter location",
        "operationId": "create_dl",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatacenterLocationCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatacenterLocation"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/armada/datacenter_location/{dl_id}": {
      "get": {
        "tags": [
          "Armada - Datacenter Location"
        ],
        "summary": "Get Dl",
        "description": "Get a datacenter location",
        "operationId": "get_dl",
        "parameters": [
          {
            "description": "The datacenter location ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Dl Id",
              "description": "The datacenter location ID"
            },
            "name": "dl_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatacenterLocation"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Armada - Datacenter Location"
        ],
        "summary": "Update Dl",
        "description": "Update a datacenter location",
        "operationId": "update_dl",
        "parameters": [
          {
            "description": "The datacenter location ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Dl Id",
              "description": "The datacenter location ID"
            },
            "name": "dl_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatacenterLocationUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatacenterLocation"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/armada/datacenter_location/{dl_id}/versions": {
      "get": {
        "tags": [
          "Armada - Datacenter Location"
        ],
        "summary": "Get Dl Versions",
        "description": "Get all version history for a datacenter location",
        "operationId": "get_dl_versions",
        "parameters": [
          {
            "description": "The datacenter location ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Dl Id",
              "description": "The datacenter location ID"
            },
            "name": "dl_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatacenterLocationVersionsAndTransactions"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/armada/machine_image": {
      "get": {
        "tags": [
          "Armada - Machine Image"
        ],
        "summary": "Get All Mis",
        "description": "Get all machine images",
        "operationId": "get_all_mis",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/MachineImage"
                  },
                  "type": "array",
                  "title": "Response Get All Mis"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Armada - Machine Image"
        ],
        "summary": "Create Mi",
        "description": "Create a machine image",
        "operationId": "create_mi",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MachineImageCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MachineImage"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/armada/machine_image/{mi_id}": {
      "get": {
        "tags": [
          "Armada - Machine Image"
        ],
        "summary": "Get Mi",
        "description": "Get a machine image",
        "operationId": "get_mi",
        "parameters": [
          {
            "description": "The machine image ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Mi Id",
              "description": "The machine image ID"
            },
            "name": "mi_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MachineImage"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Armada - Machine Image"
        ],
        "summary": "Update Mi",
        "description": "Update a machine image",
        "operationId": "update_mi",
        "parameters": [
          {
            "description": "The machine image ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Mi Id",
              "description": "The machine image ID"
            },
            "name": "mi_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MachineImageUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MachineImage"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/armada/machine_image/{mi_id}/versions": {
      "get": {
        "tags": [
          "Armada - Machine Image"
        ],
        "summary": "Get Mi Versions",
        "description": "Get versions for a machine image",
        "operationId": "get_mi_versions",
        "parameters": [
          {
            "description": "The machine image ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Mi Id",
              "description": "The machine image ID"
            },
            "name": "mi_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MachineImageVersionsAndTransactions"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/armada/datacenter_contract": {
      "get": {
        "tags": [
          "Armada - Contract"
        ],
        "summary": "Get All Cs",
        "description": "Get all contracts",
        "operationId": "get_all_cs",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DatacenterContract"
                  },
                  "type": "array",
                  "title": "Response Get All Cs"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Armada - Contract"
        ],
        "summary": "Create C",
        "description": "Create a contract",
        "operationId": "create_c",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatacenterContractCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatacenterContract"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/armada/datacenter_contract/{c_id}": {
      "get": {
        "tags": [
          "Armada - Contract"
        ],
        "summary": "Get C",
        "description": "Get a contract",
        "operationId": "get_c",
        "parameters": [
          {
            "description": "The contract ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "C Id",
              "description": "The contract ID"
            },
            "name": "c_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatacenterContract"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Armada - Contract"
        ],
        "summary": "Update C",
        "description": "Update a contract",
        "operationId": "update_c",
        "parameters": [
          {
            "description": "The contract ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "C Id",
              "description": "The contract ID"
            },
            "name": "c_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatacenterContractUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatacenterContract"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/armada/datacenter_contract/{c_id}/versions": {
      "get": {
        "tags": [
          "Armada - Contract"
        ],
        "summary": "Get Contract Versions",
        "description": "Get all version history for a contract",
        "operationId": "get_contract_versions",
        "parameters": [
          {
            "description": "The contract ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "C Id",
              "description": "The contract ID"
            },
            "name": "c_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatacenterContractVersionsAndTransactions"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/armada/datacenter_contract/{c_id}/priorhosts": {
      "get": {
        "tags": [
          "Armada - Contract"
        ],
        "summary": "Get C Prior Hosts",
        "description": "Get all prior hosts for this contract",
        "operationId": "get_c_prior_hosts",
        "parameters": [
          {
            "description": "The contract ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "C Id",
              "description": "The contract ID"
            },
            "name": "c_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HostVersionsAndTransactions"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/armada/machine_class": {
      "get": {
        "tags": [
          "Armada - Machine Class"
        ],
        "summary": "Get All Mcs",
        "description": "Get all machine classes",
        "operationId": "get_all_mcs",
        "parameters": [
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Label"
            },
            "name": "label",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/MachineClass"
                  },
                  "type": "array",
                  "title": "Response Get All Mcs"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Armada - Machine Class"
        ],
        "summary": "Create Mc",
        "description": "Create a machine class",
        "operationId": "create_mc",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MachineClassCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MachineClass"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/armada/machine_class/{mc_id}": {
      "get": {
        "tags": [
          "Armada - Machine Class"
        ],
        "summary": "Get Mc",
        "description": "Get a machine class",
        "operationId": "get_mc",
        "parameters": [
          {
            "description": "The machine class ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Mc Id",
              "description": "The machine class ID"
            },
            "name": "mc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MachineClass"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Armada - Machine Class"
        ],
        "summary": "Update Mc",
        "description": "Update a machine class",
        "operationId": "update_mc",
        "parameters": [
          {
            "description": "The machine class ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Mc Id",
              "description": "The machine class ID"
            },
            "name": "mc_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MachineClassUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MachineClass"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/armada/machine_class/{mc_id}/versions": {
      "get": {
        "tags": [
          "Armada - Machine Class"
        ],
        "summary": "Get Mc Versions",
        "description": "Get a machine class",
        "operationId": "get_mc_versions",
        "parameters": [
          {
            "description": "The machine class ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Mc Id",
              "description": "The machine class ID"
            },
            "name": "mc_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MachineClassVersionsAndTransactions"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/armada/machine_class_label": {
      "post": {
        "tags": [
          "Armada - Machine Class"
        ],
        "summary": "Create Mcl",
        "description": "Create a machine class label",
        "operationId": "create_mcl",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MachineClassLabelCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MachineClassLabel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/armada/machine_class_label/{mcl_id}": {
      "delete": {
        "tags": [
          "Armada - Machine Class"
        ],
        "summary": "Delete Mcl",
        "description": "Delete a machine class label",
        "operationId": "delete_mcl",
        "parameters": [
          {
            "description": "The machine class label ID",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Mcl Id",
              "description": "The machine class label ID"
            },
            "name": "mcl_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/armada/simple_product_assignment": {
      "get": {
        "tags": [
          "Armada - Simple Product Assignment"
        ],
        "summary": "Get All Spas",
        "description": "Get all simple product assignments",
        "operationId": "get_all_spas",
        "parameters": [
          {
            "description": "Host IDs to filter by",
            "required": false,
            "schema": {
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "type": "array",
              "title": "Host Ids",
              "description": "Host IDs to filter by"
            },
            "name": "host_ids",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SimpleProductAssignment"
                  },
                  "type": "array",
                  "title": "Response Get All Spas"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Armada - Simple Product Assignment"
        ],
        "summary": "Create Spa",
        "description": "Create a simple product assignment",
        "operationId": "create_spa",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimpleProductAssignmentCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleProductAssignment"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/armada/simple_product_assignment/{spa_id}": {
      "get": {
        "tags": [
          "Armada - Simple Product Assignment"
        ],
        "summary": "Get Spa",
        "description": "Get a simple product assignment",
        "operationId": "get_spa",
        "parameters": [
          {
            "description": "The simple product assignment ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Spa Id",
              "description": "The simple product assignment ID"
            },
            "name": "spa_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleProductAssignment"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Armada - Simple Product Assignment"
        ],
        "summary": "Update Spa",
        "description": "Update a simple product assignment",
        "operationId": "update_spa",
        "parameters": [
          {
            "description": "The simple product assignment ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Spa Id",
              "description": "The simple product assignment ID"
            },
            "name": "spa_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimpleProductAssignmentUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleProductAssignment"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/armada/simple_product_assignment/{spa_id}/versions": {
      "get": {
        "tags": [
          "Armada - Simple Product Assignment"
        ],
        "summary": "Get Spa Versions",
        "description": "Get versions for a simple product assignment",
        "operationId": "get_spa_versions",
        "parameters": [
          {
            "description": "The simple product assignment ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Spa Id",
              "description": "The simple product assignment ID"
            },
            "name": "spa_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimpleProductAssignmentVersionsAndTransactions"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/armada/host": {
      "get": {
        "tags": [
          "Armada - Host"
        ],
        "summary": "Get All Hosts",
        "description": "Get all hosts",
        "operationId": "get_all_hosts",
        "parameters": [
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Label"
            },
            "name": "label",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Host"
                  },
                  "type": "array",
                  "title": "Response Get All Hosts"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Armada - Host"
        ],
        "summary": "Create Host",
        "description": "Create a host",
        "operationId": "create_host",
        "parameters": [
          {
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "title": "Time Zone Aware Datetime",
              "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
            },
            "name": "transaction_date",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HostCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Host"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/armada/host/{host_id}": {
      "get": {
        "tags": [
          "Armada - Host"
        ],
        "summary": "Get Host",
        "description": "Get a host",
        "operationId": "get_host",
        "parameters": [
          {
            "description": "The host ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Host Id",
              "description": "The host ID"
            },
            "name": "host_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Host"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Armada - Host"
        ],
        "summary": "Delete Host",
        "description": "Delete a host",
        "operationId": "delete_host",
        "parameters": [
          {
            "description": "The host ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Host Id",
              "description": "The host ID"
            },
            "name": "host_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "title": "Time Zone Aware Datetime",
              "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
            },
            "name": "transaction_date",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Armada - Host"
        ],
        "summary": "Update Host",
        "description": "Update a host",
        "operationId": "update_host",
        "parameters": [
          {
            "description": "The host ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Host Id",
              "description": "The host ID"
            },
            "name": "host_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "title": "Time Zone Aware Datetime",
              "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
            },
            "name": "transaction_date",
            "in": "query"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HostUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Host"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/armada/host/{host_id}/versions": {
      "get": {
        "tags": [
          "Armada - Host"
        ],
        "summary": "Get Host Versions",
        "description": "Get all version history for a host",
        "operationId": "get_host_versions",
        "parameters": [
          {
            "description": "The host ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Host Id",
              "description": "The host ID"
            },
            "name": "host_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HostVersionsAndTransactions"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/armada/host/{host_id}/cost": {
      "get": {
        "tags": [
          "Armada - Host"
        ],
        "summary": "Get Cost",
        "description": "Get the cost of a host over a time range",
        "operationId": "get_cost",
        "parameters": [
          {
            "description": "The host ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Host Id",
              "description": "The host ID"
            },
            "name": "host_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "title": "Time Zone Aware Datetime",
              "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
            },
            "name": "begin",
            "in": "query"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time",
              "title": "Time Zone Aware Datetime",
              "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
            },
            "name": "end",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/armada/host_label": {
      "post": {
        "tags": [
          "Armada - Host"
        ],
        "summary": "Create Hostl",
        "description": "Create a host label",
        "operationId": "create_hostl",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HostLabelCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HostLabel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/armada/host_label/{hostl_id}": {
      "delete": {
        "tags": [
          "Armada - Host"
        ],
        "summary": "Delete Hostl",
        "description": "Delete a host label",
        "operationId": "delete_hostl",
        "parameters": [
          {
            "description": "The host label ID",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Hostl Id",
              "description": "The host label ID"
            },
            "name": "hostl_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/secret/wrap": {
      "post": {
        "tags": [
          "Secrets"
        ],
        "summary": "Wrap Secret",
        "description": "Wraps any JSON object or string in a vault token and returns the token to be handed to someone to unwrap securely.",
        "operationId": "wrap_secret",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Body Json"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/secret/unwrap/{token}": {
      "get": {
        "tags": [
          "Secrets"
        ],
        "summary": "Unwrap Secret",
        "description": "This endpoint will contact vault to unwrap the provided token.",
        "operationId": "unwrap_secret",
        "parameters": [
          {
            "description": "Token to unwrap",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Token",
              "description": "Token to unwrap"
            },
            "name": "token",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/product/{product_id}/policy": {
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "Get All Policies",
        "description": "Get all policies for a product, requires policies:config:view permission",
        "operationId": "product_get_all_policies",
        "parameters": [
          {
            "description": "Product ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Product Id",
              "description": "Product ID"
            },
            "name": "product_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Policies"
        ],
        "summary": "Create Policy",
        "description": "Create a new policy, requires policies:config:edit permission",
        "operationId": "product_create_policy",
        "parameters": [
          {
            "description": "Product ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Product Id",
              "description": "Product ID"
            },
            "name": "product_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/policy": {
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "Get All Policies",
        "description": "Get all policies default policies, requires policies:config:view permission",
        "operationId": "product_get_all_policies1",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/product/{product_id}/policy/{policy_id}": {
      "get": {
        "tags": [
          "Policies"
        ],
        "summary": "Get Policy By Id",
        "description": "Get a policy by ID, requires policies:config:view permission",
        "operationId": "product_get_policy_by_id",
        "parameters": [
          {
            "description": "Policy ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Policy Id",
              "description": "Policy ID"
            },
            "name": "policy_id",
            "in": "path"
          },
          {
            "description": "Product ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Product Id",
              "description": "Product ID"
            },
            "name": "product_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Policies"
        ],
        "summary": "Update Policy By Id",
        "description": "Update a policy by ID, requires policies:config:edit permission",
        "operationId": "product_update_policy_by_id",
        "parameters": [
          {
            "description": "Policy ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Policy Id",
              "description": "Policy ID"
            },
            "name": "policy_id",
            "in": "path"
          },
          {
            "description": "Product ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Product Id",
              "description": "Product ID"
            },
            "name": "product_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PolicyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Policies"
        ],
        "summary": "Delete Policy By Id",
        "description": "Delete a policy by ID, requires policies:config:edit permission",
        "operationId": "product_delete_policy_by_id",
        "parameters": [
          {
            "description": "Policy ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Policy Id",
              "description": "Policy ID"
            },
            "name": "policy_id",
            "in": "path"
          },
          {
            "description": "Product ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Product Id",
              "description": "Product ID"
            },
            "name": "product_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/product/{product_id}/client": {
      "get": {
        "tags": [
          "Clients"
        ],
        "summary": "Get All Clients",
        "description": "Get all clients for a product, requires clients:config:view permission",
        "operationId": "product_get_all_clients",
        "parameters": [
          {
            "description": "Product ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Product Id",
              "description": "Product ID"
            },
            "name": "product_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientsListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Clients"
        ],
        "summary": "Create Client",
        "description": "Create a client, requires clients:config:edit permission",
        "operationId": "product_create_client",
        "parameters": [
          {
            "description": "Product ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Product Id",
              "description": "Product ID"
            },
            "name": "product_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClientRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/product/{product_id}/client/{client_id}": {
      "get": {
        "tags": [
          "Clients"
        ],
        "summary": "Get Client By Id",
        "description": "Get a client by ID, requires clients:config:view permission",
        "operationId": "product_get_client_by_id",
        "parameters": [
          {
            "description": "Client ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Client Id",
              "description": "Client ID"
            },
            "name": "client_id",
            "in": "path"
          },
          {
            "description": "Product ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Product Id",
              "description": "Product ID"
            },
            "name": "product_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Clients"
        ],
        "summary": "Update Client By Id",
        "description": "Update a client by ID, requires clients:config:edit permission",
        "operationId": "product_update_client_by_id",
        "parameters": [
          {
            "description": "Client ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Client Id",
              "description": "Client ID"
            },
            "name": "client_id",
            "in": "path"
          },
          {
            "description": "Product ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Product Id",
              "description": "Product ID"
            },
            "name": "product_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateClientRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Clients"
        ],
        "summary": "Delete Client By Id",
        "description": "Delete a client by ID, requires clients:config:edit permission",
        "operationId": "product_delete_client_by_id",
        "parameters": [
          {
            "description": "Client ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Client Id",
              "description": "Client ID"
            },
            "name": "client_id",
            "in": "path"
          },
          {
            "description": "Product ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Product Id",
              "description": "Product ID"
            },
            "name": "product_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/vendor": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Vendors",
        "description": "Get Vendors by filters. All filters must be true for a Vendor to be returned. Requires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_vendors",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "Vendor IDs to filter by",
            "required": false,
            "schema": {
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "type": "array",
              "title": "Vendor Ids",
              "description": "Vendor IDs to filter by"
            },
            "name": "vendor_ids",
            "in": "query"
          },
          {
            "description": "Legacy Vendor IDs to filter by",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              },
              "type": "array",
              "title": "Legacy Vendor Ids",
              "description": "Legacy Vendor IDs to filter by"
            },
            "name": "legacy_vendor_ids",
            "in": "query"
          },
          {
            "description": "Vendor types to filter by",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/VendorType"
              },
              "type": "array",
              "description": "Vendor types to filter by"
            },
            "name": "types",
            "in": "query"
          },
          {
            "description": "Filter by case insensitive name",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 50,
              "minLength": 1,
              "title": "Name",
              "description": "Filter by case insensitive name"
            },
            "name": "name",
            "in": "query"
          },
          {
            "description": "Filter by last modified account ID",
            "required": false,
            "schema": {
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "type": "array",
              "title": "Last Modified Account Ids",
              "description": "Filter by last modified account ID"
            },
            "name": "last_modified_account_ids",
            "in": "query"
          },
          {
            "description": "Sort results by",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/VendorSortOptions"
                }
              ],
              "description": "Sort results by"
            },
            "name": "sort_by",
            "in": "query"
          },
          {
            "description": "Sort order",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SortOrder"
                }
              ],
              "description": "Sort order",
              "default": "asc"
            },
            "name": "sort_order",
            "in": "query"
          },
          {
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Cursor",
              "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
              "default": "0"
            },
            "name": "cursor",
            "in": "query"
          },
          {
            "description": "The maximum number of elements to be returned per call",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "title": "Page Size",
              "description": "The maximum number of elements to be returned per call",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VendorCollection"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Catalog"
        ],
        "summary": "Create Vendors",
        "description": "Create Vendors. Requires permission sandbox:config:edit.",
        "operationId": "sandbox_create_vendors",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVendorCollection"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Vendor"
                  },
                  "type": "array",
                  "title": "Response Sandbox Create Vendors"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Catalog"
        ],
        "summary": "Delete Vendors",
        "description": "Delete Vendors. Requires permission sandbox:config:edit.",
        "operationId": "sandbox_delete_vendors",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "Vendor IDs to delete",
            "required": true,
            "schema": {
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "type": "array",
              "maxItems": 25,
              "minItems": 1,
              "title": "Vendor Ids",
              "description": "Vendor IDs to delete"
            },
            "name": "vendor_ids",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/vendor/{vendor_id}": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Vendor By Id",
        "description": "Get Vendor by ID. Requires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_vendor_by_id",
        "parameters": [
          {
            "description": "Vendor ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Vendor Id",
              "description": "Vendor ID"
            },
            "name": "vendor_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vendor"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Catalog"
        ],
        "summary": "Update Vendor",
        "description": "Update Vendor. If Loot is provided, it will do a full replace of all Loot on the Vendor. Requires permission sandbox:config:edit.",
        "operationId": "sandbox_update_vendor",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Vendor Id"
            },
            "name": "vendor_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVendorRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vendor"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Catalog"
        ],
        "summary": "Delete Vendor",
        "description": "Delete Vendor. Requires permission sandbox:config:edit.",
        "operationId": "sandbox_delete_vendor",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Vendor Id"
            },
            "name": "vendor_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/item": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Items",
        "description": "Get Items by filters. All filters must be true for an Item to be returned. Requires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_items",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "Item IDs to filter by",
            "required": false,
            "schema": {
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "type": "array",
              "title": "Item Ids",
              "description": "Item IDs to filter by"
            },
            "name": "item_ids",
            "in": "query"
          },
          {
            "description": "Legacy Item IDs to filter by",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              },
              "type": "array",
              "title": "Legacy Item Ids",
              "description": "Legacy Item IDs to filter by"
            },
            "name": "legacy_item_ids",
            "in": "query"
          },
          {
            "description": "Item types to filter by",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/ItemType"
              },
              "type": "array",
              "description": "Item types to filter by"
            },
            "name": "types",
            "in": "query"
          },
          {
            "description": "Coupon Currency Item IDs to filter by",
            "required": false,
            "schema": {
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "type": "array",
              "title": "Coupon Currency Item Ids",
              "description": "Coupon Currency Item IDs to filter by"
            },
            "name": "coupon_currency_item_ids",
            "in": "query"
          },
          {
            "description": "Inventory Bucket Use Rule Set IDs to filter by",
            "required": false,
            "schema": {
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "type": "array",
              "title": "Inventory Bucket Use Rule Set Ids",
              "description": "Inventory Bucket Use Rule Set IDs to filter by"
            },
            "name": "inventory_bucket_use_rule_set_ids",
            "in": "query"
          },
          {
            "description": "Level Xp IDs to filter by",
            "required": false,
            "schema": {
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "type": "array",
              "title": "Level Xp Ids",
              "description": "Level Xp IDs to filter by"
            },
            "name": "level_xp_ids",
            "in": "query"
          },
          {
            "description": "Filter by case insensitive name",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 50,
              "minLength": 1,
              "title": "Name",
              "description": "Filter by case insensitive name"
            },
            "name": "name",
            "in": "query"
          },
          {
            "description": "Resources to expand and fill in additional detail",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/ExpandProperty"
              },
              "type": "array",
              "description": "Resources to expand and fill in additional detail"
            },
            "name": "expand",
            "in": "query"
          },
          {
            "description": "Filter by last modified account ID",
            "required": false,
            "schema": {
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "type": "array",
              "title": "Last Modified Account Ids",
              "description": "Filter by last modified account ID"
            },
            "name": "last_modified_account_ids",
            "in": "query"
          },
          {
            "description": "Sort results by",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ItemSortOptions"
                }
              ],
              "description": "Sort results by",
              "default": "item_id"
            },
            "name": "sort_by",
            "in": "query"
          },
          {
            "description": "Sort order",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SortOrder"
                }
              ],
              "description": "Sort order",
              "default": "asc"
            },
            "name": "sort_order",
            "in": "query"
          },
          {
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Cursor",
              "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
              "default": "0"
            },
            "name": "cursor",
            "in": "query"
          },
          {
            "description": "The maximum number of elements to be returned per call",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "title": "Page Size",
              "description": "The maximum number of elements to be returned per call",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemCollection"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Catalog"
        ],
        "summary": "Create Items",
        "description": "Create Items. Requires permission sandbox:config:edit.",
        "operationId": "sandbox_create_items",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateItemCollection"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  },
                  "type": "array",
                  "title": "Response Sandbox Create Items"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Catalog"
        ],
        "summary": "Delete Many Items",
        "description": "Delete many Items. Requires permission sandbox:config:edit.",
        "operationId": "sandbox_delete_many_items",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "Item IDs to delete",
            "required": true,
            "schema": {
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "type": "array",
              "maxItems": 25,
              "minItems": 1,
              "title": "Item Ids",
              "description": "Item IDs to delete"
            },
            "name": "item_ids",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/item/{item_id}": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Item By Id",
        "description": "Get Item by ID. Requires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_item_by_id",
        "parameters": [
          {
            "description": "Item ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Item Id",
              "description": "Item ID"
            },
            "name": "item_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "Resources to expand and fill in additional detail",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/ExpandProperty"
              },
              "type": "array",
              "description": "Resources to expand and fill in additional detail"
            },
            "name": "expand",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Catalog"
        ],
        "summary": "Update Item",
        "description": "Update Item. Requires permission sandbox:config:edit.",
        "operationId": "sandbox_update_item",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Item Id"
            },
            "name": "item_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateItemRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Catalog"
        ],
        "summary": "Delete Single Item",
        "description": "Delete single Item. Requires permission sandbox:config:edit.",
        "operationId": "sandbox_delete_single_item",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Item Id"
            },
            "name": "item_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/loot": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Loot",
        "description": "Get Loot by filters. All filters must be true for a Loot to be returned. Requires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_loot",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "Loot IDs to filter by",
            "required": false,
            "schema": {
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "type": "array",
              "title": "Loot Ids",
              "description": "Loot IDs to filter by"
            },
            "name": "loot_ids",
            "in": "query"
          },
          {
            "description": "Legacy Loot IDs to filter by",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              },
              "type": "array",
              "title": "Legacy Loot Ids",
              "description": "Legacy Loot IDs to filter by"
            },
            "name": "legacy_loot_ids",
            "in": "query"
          },
          {
            "description": "Vendor IDs to filter by",
            "required": false,
            "schema": {
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "type": "array",
              "title": "Vendor Ids",
              "description": "Vendor IDs to filter by"
            },
            "name": "vendor_ids",
            "in": "query"
          },
          {
            "description": "Inventory Selector types to filter by",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/InventorySelector"
              },
              "type": "array",
              "description": "Inventory Selector types to filter by"
            },
            "name": "inventory_selector_types",
            "in": "query"
          },
          {
            "description": "Inventory Selector types to filter by",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/InventoryOperation"
              },
              "type": "array",
              "description": "Inventory Selector types to filter by"
            },
            "name": "inventory_operations",
            "in": "query"
          },
          {
            "description": "Filter by case insensitive name",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 50,
              "minLength": 1,
              "title": "Name",
              "description": "Filter by case insensitive name"
            },
            "name": "name",
            "in": "query"
          },
          {
            "description": "Item IDs to filter by",
            "required": false,
            "schema": {
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "type": "array",
              "title": "Item Ids",
              "description": "Item IDs to filter by"
            },
            "name": "item_ids",
            "in": "query"
          },
          {
            "description": "Sub Vendor IDs to filter by",
            "required": false,
            "schema": {
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "type": "array",
              "title": "Sub Vendor Ids",
              "description": "Sub Vendor IDs to filter by"
            },
            "name": "sub_vendor_ids",
            "in": "query"
          },
          {
            "description": "Price Point IDs to filter by",
            "required": false,
            "schema": {
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "type": "array",
              "title": "Current Price Point Ids",
              "description": "Price Point IDs to filter by"
            },
            "name": "current_price_point_ids",
            "in": "query"
          },
          {
            "description": "Price Point IDs to filter by",
            "required": false,
            "schema": {
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "type": "array",
              "title": "Pre Sale Price Point Ids",
              "description": "Price Point IDs to filter by"
            },
            "name": "pre_sale_price_point_ids",
            "in": "query"
          },
          {
            "description": "Filter by active status",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Active",
              "description": "Filter by active status"
            },
            "name": "active",
            "in": "query"
          },
          {
            "description": "Resources to expand and fill in additional detail",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/ExpandProperty"
              },
              "type": "array",
              "description": "Resources to expand and fill in additional detail"
            },
            "name": "expand",
            "in": "query"
          },
          {
            "description": "Filter by last modified account ID",
            "required": false,
            "schema": {
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "type": "array",
              "title": "Last Modified Account Ids",
              "description": "Filter by last modified account ID"
            },
            "name": "last_modified_account_ids",
            "in": "query"
          },
          {
            "description": "Sort results by",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/LootSortOptions"
                }
              ],
              "description": "Sort results by",
              "default": "loot_id"
            },
            "name": "sort_by",
            "in": "query"
          },
          {
            "description": "Sort order",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SortOrder"
                }
              ],
              "description": "Sort order",
              "default": "asc"
            },
            "name": "sort_order",
            "in": "query"
          },
          {
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Cursor",
              "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
              "default": "0"
            },
            "name": "cursor",
            "in": "query"
          },
          {
            "description": "The maximum number of elements to be returned per call",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "title": "Page Size",
              "description": "The maximum number of elements to be returned per call",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LootCollection"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Catalog"
        ],
        "summary": "Create Loot",
        "description": "Create Loot. Requires permission sandbox:config:edit.",
        "operationId": "sandbox_create_loot",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLootCollection"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Loot"
                  },
                  "type": "array",
                  "title": "Response Sandbox Create Loot"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Catalog"
        ],
        "summary": "Delete Many Loot",
        "description": "Delete many Loot. Requires permission sandbox:config:edit.",
        "operationId": "sandbox_delete_many_loot",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "Loot IDs to delete",
            "required": true,
            "schema": {
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "type": "array",
              "maxItems": 25,
              "minItems": 1,
              "title": "Loot Ids",
              "description": "Loot IDs to delete"
            },
            "name": "loot_ids",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/loot/{loot_id}": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Loot By Id",
        "description": "Get Loot by ID. Requires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_loot_by_id",
        "parameters": [
          {
            "description": "Loot ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Loot Id",
              "description": "Loot ID"
            },
            "name": "loot_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "Resources to expand and fill in additional detail",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/ExpandProperty"
              },
              "type": "array",
              "description": "Resources to expand and fill in additional detail"
            },
            "name": "expand",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Loot"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Catalog"
        ],
        "summary": "Update Loot",
        "description": "Update Loot. Requires permission sandbox:config:edit.",
        "operationId": "sandbox_update_loot",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Loot Id"
            },
            "name": "loot_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLootRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Loot"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Catalog"
        ],
        "summary": "Delete Single Loot",
        "description": "Delete single Loot. Requires permission sandbox:config:edit.",
        "operationId": "sandbox_delete_single_loot",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Loot Id"
            },
            "name": "loot_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/inventory-bucket-use-rule-set": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Rule Sets",
        "description": "Get Inventory Bucket Use Rule Sets by filters. All filters must be true for an Inventory Bucket Use Rule Sets to be returned. Requires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_rule_sets",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "Inventory Bucket Use Rule Set IDs to filter by",
            "required": false,
            "schema": {
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "type": "array",
              "title": "Inventory Bucket Use Rule Set Ids",
              "description": "Inventory Bucket Use Rule Set IDs to filter by"
            },
            "name": "inventory_bucket_use_rule_set_ids",
            "in": "query"
          },
          {
            "description": "Legacy Inventory Bucket Use Rule Set IDs to filter by",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              },
              "type": "array",
              "title": "Legacy Inventory Bucket Use Rule Set Ids",
              "description": "Legacy Inventory Bucket Use Rule Set IDs to filter by"
            },
            "name": "legacy_inventory_bucket_use_rule_set_ids",
            "in": "query"
          },
          {
            "description": "Filter by case insensitive name",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 50,
              "minLength": 1,
              "title": "Name",
              "description": "Filter by case insensitive name"
            },
            "name": "name",
            "in": "query"
          },
          {
            "description": "Filter by last modified account ID",
            "required": false,
            "schema": {
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "type": "array",
              "title": "Last Modified Account Ids",
              "description": "Filter by last modified account ID"
            },
            "name": "last_modified_account_ids",
            "in": "query"
          },
          {
            "description": "Sort results by",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/InventoryBucketUseRuleSetSortOptions"
                }
              ],
              "description": "Sort results by",
              "default": "rule_set_id"
            },
            "name": "sort_by",
            "in": "query"
          },
          {
            "description": "Sort order",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SortOrder"
                }
              ],
              "description": "Sort order",
              "default": "asc"
            },
            "name": "sort_order",
            "in": "query"
          },
          {
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Cursor",
              "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
              "default": "0"
            },
            "name": "cursor",
            "in": "query"
          },
          {
            "description": "The maximum number of elements to be returned per call",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "title": "Page Size",
              "description": "The maximum number of elements to be returned per call",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryBucketUseRuleSetCollection"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Catalog"
        ],
        "summary": "Create Inventory Bucket Use Rule Sets",
        "description": "Create Inventory Bucket Use Rule Sets. Requires permission sandbox:config:edit.",
        "operationId": "sandbox_create_inventory_bucket_use_rule_sets",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInventoryBucketUseRuleSetCollection"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/InventoryBucketUseRuleSet"
                  },
                  "type": "array",
                  "title": "Response Sandbox Create Inventory Bucket Use Rule Sets"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Catalog"
        ],
        "summary": "Delete Many Rule Sets",
        "description": "Delete many Inventory Bucket Use Rule Sets. Requires permission sandbox:config:edit.",
        "operationId": "sandbox_delete_many_rule_sets",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "Inventory Bucket Use Rule Set IDs to delete",
            "required": true,
            "schema": {
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "type": "array",
              "maxItems": 25,
              "minItems": 1,
              "title": "Rule Set Ids",
              "description": "Inventory Bucket Use Rule Set IDs to delete"
            },
            "name": "rule_set_ids",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/inventory-bucket-use-rule-set/{inventory_bucket_use_rule_set_id}": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Rule Set By Id",
        "description": "Get Inventory Bucket Use Rule Set by ID. Requires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_rule_set_by_id",
        "parameters": [
          {
            "description": "Inventory Bucket Use Rule Set ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Inventory Bucket Use Rule Set Id",
              "description": "Inventory Bucket Use Rule Set ID"
            },
            "name": "inventory_bucket_use_rule_set_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryBucketUseRuleSet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Catalog"
        ],
        "summary": "Update Rule Set",
        "description": "Update Inventory Bucket Rule Set. Requires permission sandbox:config:edit.",
        "operationId": "sandbox_update_rule_set",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Inventory Bucket Use Rule Set Id"
            },
            "name": "inventory_bucket_use_rule_set_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInventoryBucketUseRuleSet"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryBucketUseRuleSet"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Catalog"
        ],
        "summary": "Delete Single Rule Set",
        "description": "Delete single Inventory Bucket Use Rule Set. Requires permission sandbox:config:edit.",
        "operationId": "sandbox_delete_single_rule_set",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Inventory Bucket Use Rule Set Id"
            },
            "name": "inventory_bucket_use_rule_set_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/price-point": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Price Points",
        "description": "Get Price Points by filters. All filters must be true for a Price Point to be returned. Requires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_price_points",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "Price Point IDs to filter by",
            "required": false,
            "schema": {
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "type": "array",
              "title": "Price Point Ids",
              "description": "Price Point IDs to filter by"
            },
            "name": "price_point_ids",
            "in": "query"
          },
          {
            "description": "Filter by Price Points with matching strict flag",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Strict Flag",
              "description": "Filter by Price Points with matching strict flag"
            },
            "name": "strict_flag",
            "in": "query"
          },
          {
            "description": "Filter by Price Points with matching cap flag",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Cap Flag",
              "description": "Filter by Price Points with matching cap flag"
            },
            "name": "cap_flag",
            "in": "query"
          },
          {
            "description": "Filter by case insensitive name",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 50,
              "minLength": 1,
              "title": "Name",
              "description": "Filter by case insensitive name"
            },
            "name": "name",
            "in": "query"
          },
          {
            "description": "Resources to expand and fill in additional detail",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/ExpandProperty"
              },
              "type": "array",
              "description": "Resources to expand and fill in additional detail"
            },
            "name": "expand",
            "in": "query"
          },
          {
            "description": "Filter by last modified account ID",
            "required": false,
            "schema": {
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "type": "array",
              "title": "Last Modified Account Ids",
              "description": "Filter by last modified account ID"
            },
            "name": "last_modified_account_ids",
            "in": "query"
          },
          {
            "description": "Sort results by",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PricePointSortOptions"
                }
              ],
              "description": "Sort results by",
              "default": "price_point_id"
            },
            "name": "sort_by",
            "in": "query"
          },
          {
            "description": "Sort order",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SortOrder"
                }
              ],
              "description": "Sort order",
              "default": "asc"
            },
            "name": "sort_order",
            "in": "query"
          },
          {
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Cursor",
              "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
              "default": "0"
            },
            "name": "cursor",
            "in": "query"
          },
          {
            "description": "The maximum number of elements to be returned per call",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "title": "Page Size",
              "description": "The maximum number of elements to be returned per call",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PricePointCollection"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Catalog"
        ],
        "summary": "Create Price Points",
        "description": "Create Price Points. Requires permission sandbox:config:edit.",
        "operationId": "sandbox_create_price_points",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePricePointCollection"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PricePoint"
                  },
                  "type": "array",
                  "title": "Response Sandbox Create Price Points"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Catalog"
        ],
        "summary": "Delete Many Price Points",
        "description": "Delete many Price Points. Requires permission sandbox:config:edit.",
        "operationId": "sandbox_delete_many_price_points",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "Price Point IDs to delete",
            "required": true,
            "schema": {
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "type": "array",
              "maxItems": 25,
              "minItems": 1,
              "title": "Price Point Ids",
              "description": "Price Point IDs to delete"
            },
            "name": "price_point_ids",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/price-point/{price_point_id}": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Price Point By Id",
        "description": "Get Price Point by ID. Requires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_price_point_by_id",
        "parameters": [
          {
            "description": "Price Point ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Price Point Id",
              "description": "Price Point ID"
            },
            "name": "price_point_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PricePoint"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Catalog"
        ],
        "summary": "Update Price Point",
        "description": "Update Price Point. Requires permission sandbox:config:edit.",
        "operationId": "sandbox_update_price_point",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Price Point Id"
            },
            "name": "price_point_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePricePoint"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PricePoint"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Catalog"
        ],
        "summary": "Delete Single Price Point",
        "description": "Delete single Price Point. Requires permission sandbox:config:edit.",
        "operationId": "sandbox_delete_single_price_point",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Price Point Id"
            },
            "name": "price_point_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/xp": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Many Xp",
        "description": "Get Xp by filters. All filters must be true for a Xp to be returned. Requires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_many_xp",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "Xp IDs to filter by",
            "required": false,
            "schema": {
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "type": "array",
              "title": "Xp Ids",
              "description": "Xp IDs to filter by"
            },
            "name": "xp_ids",
            "in": "query"
          },
          {
            "description": "Legacy Xp IDs to filter by",
            "required": false,
            "schema": {
              "items": {
                "type": "integer"
              },
              "type": "array",
              "title": "Legacy Xp Ids",
              "description": "Legacy Xp IDs to filter by"
            },
            "name": "legacy_xp_ids",
            "in": "query"
          },
          {
            "description": "Filter by case insensitive name",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 50,
              "minLength": 1,
              "title": "Name",
              "description": "Filter by case insensitive name"
            },
            "name": "name",
            "in": "query"
          },
          {
            "description": "Filter by last modified account ID",
            "required": false,
            "schema": {
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "type": "array",
              "title": "Last Modified Account Ids",
              "description": "Filter by last modified account ID"
            },
            "name": "last_modified_account_ids",
            "in": "query"
          },
          {
            "description": "Sort results by",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/XpSortOptions"
                }
              ],
              "description": "Sort results by",
              "default": "xp_id"
            },
            "name": "sort_by",
            "in": "query"
          },
          {
            "description": "Sort order",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SortOrder"
                }
              ],
              "description": "Sort order",
              "default": "asc"
            },
            "name": "sort_order",
            "in": "query"
          },
          {
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Cursor",
              "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
              "default": "0"
            },
            "name": "cursor",
            "in": "query"
          },
          {
            "description": "The maximum number of elements to be returned per call",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "title": "Page Size",
              "description": "The maximum number of elements to be returned per call",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XpCollection"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Catalog"
        ],
        "summary": "Create Many Xp",
        "description": "Create many XP. Requires permission sandbox:config:edit.",
        "operationId": "sandbox_create_many_xp",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateXpCollection"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Xp"
                  },
                  "type": "array",
                  "title": "Response Sandbox Create Many Xp"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Catalog"
        ],
        "summary": "Delete Many Xp",
        "description": "Delete many Xp. Requires permission sandbox:config:edit.",
        "operationId": "sandbox_delete_many_xp",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "Xp IDs to delete",
            "required": true,
            "schema": {
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "type": "array",
              "maxItems": 25,
              "minItems": 1,
              "title": "Xp Ids",
              "description": "Xp IDs to delete"
            },
            "name": "xp_ids",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/xp/{xp_id}": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Xp By Id",
        "description": "Get Xp by ID. Requires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_xp_by_id",
        "parameters": [
          {
            "description": "Xp ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Xp Id",
              "description": "Xp ID"
            },
            "name": "xp_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Xp"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Catalog"
        ],
        "summary": "Update Xp",
        "description": "Update Xp. Requires permission sandbox:config:edit.",
        "operationId": "sandbox_update_xp",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Xp Id"
            },
            "name": "xp_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateXpRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Xp"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Catalog"
        ],
        "summary": "Delete Single Xp",
        "description": "Delete single Xp. Requires permission sandbox:config:edit.",
        "operationId": "sandbox_delete_single_xp",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Xp Id"
            },
            "name": "xp_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/xp/{xp_id}/xp-threshold": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Many Xp Thresholds",
        "description": "Get Xp Thresholds for Xp table. Requires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_many_xp_thresholds",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Xp Id"
            },
            "name": "xp_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XpThresholdCollection"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Catalog"
        ],
        "summary": "Create Xp Threshold",
        "description": "Create Xp Threshold. Requires permission sandbox:config:edit.",
        "operationId": "sandbox_create_xp_threshold",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Xp Id"
            },
            "name": "xp_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/XpLevelThresholdRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XpLevelThreshold"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/xp/{xp_id}/xp-threshold/{xp_threshold_id}": {
      "get": {
        "tags": [
          "Catalog"
        ],
        "summary": "Get Xp Threshold By Id And Xp Id",
        "description": "Get Xp Threshold by ID. Requires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_xp_threshold_by_id_and_xp_id",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Xp Id"
            },
            "name": "xp_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Xp Threshold Id"
            },
            "name": "xp_threshold_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XpLevelThreshold"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Catalog"
        ],
        "summary": "Update Xp Threshold",
        "description": "Update Xp Threshold. Requires permission sandbox:config:edit.",
        "operationId": "sandbox_update_xp_threshold",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Xp Id"
            },
            "name": "xp_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Xp Threshold Id"
            },
            "name": "xp_threshold_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/XpLevelThresholdRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/XpLevelThreshold"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Catalog"
        ],
        "summary": "Delete Single Xp Threshold",
        "description": "Delete Xp Threshold. Requires permission sandbox:config:edit.",
        "operationId": "sandbox_delete_single_xp_threshold",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Xp Id"
            },
            "name": "xp_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Xp Threshold Id"
            },
            "name": "xp_threshold_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/kv": {
      "get": {
        "tags": [
          "Sandbox Config - KV"
        ],
        "summary": "Get Kvs For Sandbox",
        "description": "Get all Key Value pairs for a sandbox    \n\n    Requires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_kvs_for_sandbox",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Kv"
                  },
                  "type": "array",
                  "title": "Response Sandbox Get Kvs For Sandbox"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Sandbox Config - KV"
        ],
        "summary": "Create Kv",
        "description": "Create Key Value pair for a sandbox    \n\n    Requires permission sandbox:config:edit.",
        "operationId": "sandbox_create_kv",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Kv"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KvRequest"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/kv/{kv_key}": {
      "get": {
        "tags": [
          "Sandbox Config - KV"
        ],
        "summary": "Get Kv For Sandbox",
        "description": "Get Key Value pair for a sandbox    \n\n    Requires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_kv_for_sandbox",
        "parameters": [
          {
            "description": "KV Key",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Kv Key",
              "description": "KV Key"
            },
            "name": "kv_key",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Kv"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Sandbox Config - KV"
        ],
        "summary": "Update Kv",
        "description": "Update Key Value pair for a sandbox    \n\n    Requires permission sandbox:config:edit.",
        "operationId": "sandbox_update_kv",
        "parameters": [
          {
            "description": "KV Key",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Kv Key",
              "description": "KV Key"
            },
            "name": "kv_key",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KvUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Kv"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Sandbox Config - KV"
        ],
        "summary": "Delete Kv",
        "description": "Delet Key Value pair for a sandbox    \n\n    Requires permission sandbox:config:edit.",
        "operationId": "sandbox_delete_kv",
        "parameters": [
          {
            "description": "KV Key",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Kv Key",
              "description": "KV Key"
            },
            "name": "kv_key",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "title": "Response Sandbox Delete Kv"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/setting-type": {
      "get": {
        "tags": [
          "Sandbox Config - Setting Types"
        ],
        "summary": "Get Setting Types For Sandbox",
        "description": "Get all custom Setting Types for a sandbox\n    Requires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_setting_types_for_sandbox",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "The maximum number of elements to be returned per call",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "title": "Page Size",
              "description": "The maximum number of elements to be returned per call",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Cursor",
              "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
              "default": "0"
            },
            "name": "cursor",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllSettingTypeResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Sandbox Config - Setting Types"
        ],
        "summary": "Create Setting Type",
        "description": "Create custom Setting Type for a sandbox\n    Requires permission sandbox:config:edit.",
        "operationId": "sandbox_create_setting_type",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SettingTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingType"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/setting-type/{setting_type_unique_id}": {
      "get": {
        "tags": [
          "Sandbox Config - Setting Types"
        ],
        "summary": "Get Setting Type For Sandbox",
        "description": "Get custom Setting Type for a sandbox\n    Requires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_setting_type_for_sandbox",
        "parameters": [
          {
            "description": "Setting Type Unique ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Setting Type Unique Id",
              "description": "Setting Type Unique ID"
            },
            "name": "setting_type_unique_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingType"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Sandbox Config - Setting Types"
        ],
        "summary": "Update Setting Type",
        "description": "Update custom Setting Type for a sandbox\n    Requires permission sandbox:config:edit.",
        "operationId": "sandbox_update_setting_type",
        "parameters": [
          {
            "description": "Setting Type Unique ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Setting Type Unique Id",
              "description": "Setting Type Unique ID"
            },
            "name": "setting_type_unique_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SettingTypeUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettingType"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Sandbox Config - Setting Types"
        ],
        "summary": "Delete Setting Type",
        "description": "Delete custom Setting Type for a sandbox\n    Requires permission sandbox:config:edit.",
        "operationId": "sandbox_delete_setting_type",
        "parameters": [
          {
            "description": "Setting Type Unique ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Setting Type Unique Id",
              "description": "Setting Type Unique ID"
            },
            "name": "setting_type_unique_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/custom-endpoint": {
      "get": {
        "tags": [
          "Sandbox Config - Custom Endpoints"
        ],
        "summary": "Get All Custom Endpoints For Sandbox",
        "description": "Get all Custom Endpoints for Sandbox, requires sandbox:config:view | sandbox:config:edit permission",
        "operationId": "sandbox_get_all_custom_endpoints_for_sandbox",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "The maximum number of elements to be returned per call",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "title": "Page Size",
              "description": "The maximum number of elements to be returned per call",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Cursor",
              "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
              "default": "0"
            },
            "name": "cursor",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllCustomEndpointsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Sandbox Config - Custom Endpoints"
        ],
        "summary": "Create Custom Endpoint",
        "description": "Create Custom Endpoint, requires sandbox:config:edit permission",
        "operationId": "sandbox_create_custom_endpoint",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomEndpointCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomEndpoint"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/custom-endpoint/{custom_endpoint_unique_id}": {
      "get": {
        "tags": [
          "Sandbox Config - Custom Endpoints"
        ],
        "summary": "Get Custom Endpoint For Sandbox And Custom Endpoint Unique Id",
        "description": "Get a Custom Endpoint for Sandbox, requires sandbox:config:view | sandbox:config:edit permission",
        "operationId": "sandbox_get_custom_endpoint_for_sandbox_and_custom_endpoint_unique_id",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Custom Endpoint Unique Id"
            },
            "name": "custom_endpoint_unique_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomEndpoint"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Sandbox Config - Custom Endpoints"
        ],
        "summary": "Update Custom Endpoint",
        "description": "Update Custom Endpoint, requires sandbox:config:edit permission",
        "operationId": "sandbox_update_custom_endpoint",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Custom Endpoint Unique Id"
            },
            "name": "custom_endpoint_unique_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomEndpointUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomEndpoint"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Sandbox Config - Custom Endpoints"
        ],
        "summary": "Delete Custom Endpoint",
        "description": "Delete Custom Endpoint, requires sandbox:config:edit permission",
        "operationId": "sandbox_delete_custom_endpoint",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Custom Endpoint Unique Id"
            },
            "name": "custom_endpoint_unique_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "title": "Response Sandbox Delete Custom Endpoint"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/audit": {
      "get": {
        "tags": [
          "Sandbox Config - Audit"
        ],
        "summary": "Get Audit For Sandbox",
        "operationId": "sandbox_get_audit_for_sandbox",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Type"
            },
            "name": "type",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Start"
            },
            "name": "start",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "End"
            },
            "name": "end",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AuditPatchResponse"
                  },
                  "type": "array",
                  "title": "Response Sandbox Get Audit For Sandbox"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/audit/compare": {
      "get": {
        "tags": [
          "Sandbox Config - Audit"
        ],
        "summary": "Get Audit Comparisons For Sandbox",
        "operationId": "sandbox_get_audit_comparisons_for_sandbox",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Type"
            },
            "name": "type",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "Start"
            },
            "name": "start",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "title": "End"
            },
            "name": "end",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AuditComparisonResponse"
                  },
                  "type": "array",
                  "title": "Response Sandbox Get Audit Comparisons For Sandbox"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/role": {
      "get": {
        "tags": [
          "Sandbox Config - Role"
        ],
        "summary": "Get All Roles For Sandbox",
        "description": "Get all Roles for Sandbox, requires sandbox:config:view | sandbox:config:edit permission",
        "operationId": "sandbox_get_all_roles_for_sandbox",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "The maximum number of elements to be returned per call",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "title": "Page Size",
              "description": "The maximum number of elements to be returned per call",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Cursor",
              "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
              "default": "0"
            },
            "name": "cursor",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllRolesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Sandbox Config - Role"
        ],
        "summary": "Create Role",
        "description": "Create Role, requires sandbox:config:edit permission",
        "operationId": "sandbox_create_role",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/role/{role_id}": {
      "get": {
        "tags": [
          "Sandbox Config - Role"
        ],
        "summary": "Get Role For Sandbox And Role Id",
        "description": "Get Role for Sandbox, requires sandbox:config:view | sandbox:config:edit permission",
        "operationId": "sandbox_get_role_for_sandbox_and_role_id",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Role Id"
            },
            "name": "role_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Sandbox Config - Role"
        ],
        "summary": "Update Role",
        "description": "Update Role, requires sandbox:config:edit permission",
        "operationId": "sandbox_update_role",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Role Id"
            },
            "name": "role_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Sandbox Config - Role"
        ],
        "summary": "Delete Role",
        "description": "Delete Role, requires sandbox:config:edit permission",
        "operationId": "sandbox_delete_role",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Role Id"
            },
            "name": "role_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "title": "Response Sandbox Delete Role"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/entitlement-sku": {
      "get": {
        "tags": [
          "Sandbox Config - Entitlement SKU"
        ],
        "summary": "Get Entitlement Skus",
        "description": "Get Entitlement Skus by filters. All filters must be true for an Entitlement Sku to be returned. Requires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_entitlement_skus",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "Entitlement Sku IDs to filter by",
            "required": false,
            "schema": {
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "type": "array",
              "title": "Entitlement Sku Ids",
              "description": "Entitlement Sku IDs to filter by",
              "default": []
            },
            "name": "entitlement_sku_ids",
            "in": "query"
          },
          {
            "description": "Filter by Entitlement Sku with matching Loot IDs",
            "required": false,
            "schema": {
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "type": "array",
              "title": "Loot Ids",
              "description": "Filter by Entitlement Sku with matching Loot IDs",
              "default": []
            },
            "name": "loot_ids",
            "in": "query"
          },
          {
            "description": "Filter by Entitlement Sku with matching Loot Entitlement types",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/EntitlementType"
              },
              "type": "array",
              "description": "Filter by Entitlement Sku with matching Loot Entitlement types",
              "default": []
            },
            "name": "types",
            "in": "query"
          },
          {
            "description": "Filter by Entitlement Sku with matching External Key Campaign IDs",
            "required": false,
            "schema": {
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "type": "array",
              "title": "External Key Campaign Ids",
              "description": "Filter by Entitlement Sku with matching External Key Campaign IDs",
              "default": []
            },
            "name": "external_key_campaign_ids",
            "in": "query"
          },
          {
            "description": "Filter by Entitlement Sku with matching platforms",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/Platform"
              },
              "type": "array",
              "description": "Filter by Entitlement Sku with matching platforms",
              "default": []
            },
            "name": "platforms",
            "in": "query"
          },
          {
            "description": "Filter by Entitlement Sku with matching SKUs",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "title": "Skus",
              "description": "Filter by Entitlement Sku with matching SKUs",
              "default": []
            },
            "name": "skus",
            "in": "query"
          },
          {
            "description": "Filter by case insensitive name",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 50,
              "minLength": 1,
              "title": "Name",
              "description": "Filter by case insensitive name"
            },
            "name": "name",
            "in": "query"
          },
          {
            "description": "Filter by last modified account ID",
            "required": false,
            "schema": {
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "type": "array",
              "title": "Last Modified Account Ids",
              "description": "Filter by last modified account ID",
              "default": []
            },
            "name": "last_modified_account_ids",
            "in": "query"
          },
          {
            "description": "Sort results by",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/EntitlementSkuSortOptions"
                }
              ],
              "description": "Sort results by",
              "default": "entitlement_sku_id"
            },
            "name": "sort_by",
            "in": "query"
          },
          {
            "description": "Sort order",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SortOrder"
                }
              ],
              "description": "Sort order",
              "default": "asc"
            },
            "name": "sort_order",
            "in": "query"
          },
          {
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Cursor",
              "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
              "default": "0"
            },
            "name": "cursor",
            "in": "query"
          },
          {
            "description": "The maximum number of elements to be returned per call",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "title": "Page Size",
              "description": "The maximum number of elements to be returned per call",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Resources to expand and fill in additional detail",
            "required": false,
            "schema": {
              "items": {
                "$ref": "#/components/schemas/ExpandProperty"
              },
              "type": "array",
              "description": "Resources to expand and fill in additional detail"
            },
            "name": "expand",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementSkuCollection"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Sandbox Config - Entitlement SKU"
        ],
        "summary": "Create Entitlement Skus",
        "description": "Create Entitlement Skus. Requires permission sandbox:config:edit.",
        "operationId": "sandbox_create_entitlement_skus",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEntitlementSkuCollection"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EntitlementSku"
                  },
                  "type": "array",
                  "title": "Response Sandbox Create Entitlement Skus"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Sandbox Config - Entitlement SKU"
        ],
        "summary": "Delete Many Entitlement Skus",
        "description": "Delete many Entitlement Skus. Requires permission sandbox:config:edit.",
        "operationId": "sandbox_delete_many_entitlement_skus",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "Entitlement Sku IDs to delete",
            "required": true,
            "schema": {
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "type": "array",
              "maxItems": 25,
              "minItems": 1,
              "title": "Entitlement Sku Ids",
              "description": "Entitlement Sku IDs to delete"
            },
            "name": "entitlement_sku_ids",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/entitlement-sku/{entitlement_sku_id}": {
      "get": {
        "tags": [
          "Sandbox Config - Entitlement SKU"
        ],
        "summary": "Get Entitlement Sku By Id",
        "description": "Get Entitlement Sku by ID. Requires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_entitlement_sku_by_id",
        "parameters": [
          {
            "description": "Entitlement Sku ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Entitlement Sku Id",
              "description": "Entitlement Sku ID"
            },
            "name": "entitlement_sku_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementSku"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Sandbox Config - Entitlement SKU"
        ],
        "summary": "Update Entitlement Sku",
        "description": "Update Entitlement Sku. Requires permission sandbox:config:edit.",
        "operationId": "sandbox_update_entitlement_sku",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Entitlement Sku Id"
            },
            "name": "entitlement_sku_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEntitlementSku"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementSku"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Sandbox Config - Entitlement SKU"
        ],
        "summary": "Delete Single Entitlement Sku",
        "description": "Delete single Entitlement Sku. Requires permission sandbox:config:edit.",
        "operationId": "sandbox_delete_single_entitlement_sku",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Entitlement Sku Id"
            },
            "name": "entitlement_sku_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Sandbox Config - Entitlement SKU"
        ],
        "summary": "Patch Entitlement Sku",
        "description": "Patch Entitlement Sku. Requires permission sandbox:config:edit.",
        "operationId": "sandbox_patch_entitlement_sku",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Entitlement Sku Id"
            },
            "name": "entitlement_sku_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchEntitlementSku"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementSku"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/external-key-campaign": {
      "get": {
        "tags": [
          "Sandbox Config - External Key Campaign"
        ],
        "summary": "Get External Key Campaigns",
        "description": "Get External Key Campaigns by filters. All filters must be true for an External Key Campaign to be returned. Requires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_external_key_campaigns",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "External Key Campaign IDs to filter by",
            "required": false,
            "schema": {
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "type": "array",
              "title": "External Key Campaign Ids",
              "description": "External Key Campaign IDs to filter by",
              "default": []
            },
            "name": "external_key_campaign_ids",
            "in": "query"
          },
          {
            "description": "Filter by External Key Campaign with matching key types",
            "required": false,
            "schema": {
              "items": {
                "type": "string",
                "maxLength": 256,
                "minLength": 1
              },
              "type": "array",
              "title": "Key Types",
              "description": "Filter by External Key Campaign with matching key types",
              "default": []
            },
            "name": "key_types",
            "in": "query"
          },
          {
            "description": "Filter by case insensitive name",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 50,
              "minLength": 1,
              "title": "Name",
              "description": "Filter by case insensitive name"
            },
            "name": "name",
            "in": "query"
          },
          {
            "description": "Filter by last modified account ID",
            "required": false,
            "schema": {
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "type": "array",
              "title": "Last Modified Account Ids",
              "description": "Filter by last modified account ID",
              "default": []
            },
            "name": "last_modified_account_ids",
            "in": "query"
          },
          {
            "description": "Sort results by",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ExternalKeyCampaignSortOptions"
                }
              ],
              "description": "Sort results by",
              "default": "external_key_campaign_id"
            },
            "name": "sort_by",
            "in": "query"
          },
          {
            "description": "Sort order",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SortOrder"
                }
              ],
              "description": "Sort order",
              "default": "asc"
            },
            "name": "sort_order",
            "in": "query"
          },
          {
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Cursor",
              "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
              "default": "0"
            },
            "name": "cursor",
            "in": "query"
          },
          {
            "description": "The maximum number of elements to be returned per call",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "title": "Page Size",
              "description": "The maximum number of elements to be returned per call",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalKeyCampaignCollection"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Sandbox Config - External Key Campaign"
        ],
        "summary": "Create External Key Campaigns",
        "description": "Create External Key Campaigns. Requires permission sandbox:config:edit.",
        "operationId": "sandbox_create_external_key_campaigns",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateExternalKeyCampaignCollection"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ExternalKeyCampaign"
                  },
                  "type": "array",
                  "title": "Response Sandbox Create External Key Campaigns"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Sandbox Config - External Key Campaign"
        ],
        "summary": "Delete Many External Key Campaigns",
        "description": "Delete many External Key Campaigns. Requires permission sandbox:config:edit.",
        "operationId": "sandbox_delete_many_external_key_campaigns",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "External Key Campaigns IDs to delete",
            "required": true,
            "schema": {
              "items": {
                "type": "string",
                "format": "uuid"
              },
              "type": "array",
              "maxItems": 25,
              "minItems": 1,
              "title": "External Key Campaign Ids",
              "description": "External Key Campaigns IDs to delete"
            },
            "name": "external_key_campaign_ids",
            "in": "query"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/external-key-campaign/{external_key_campaign_id}": {
      "get": {
        "tags": [
          "Sandbox Config - External Key Campaign"
        ],
        "summary": "Get External Key Campaign By Id",
        "description": "Get External Key Campaign by ID. Requires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_external_key_campaign_by_id",
        "parameters": [
          {
            "description": "External Key Campaign ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "External Key Campaign Id",
              "description": "External Key Campaign ID"
            },
            "name": "external_key_campaign_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalKeyCampaign"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Sandbox Config - External Key Campaign"
        ],
        "summary": "Update External Key Campaign",
        "description": "Update External Key Campaign. Requires permission sandbox:config:edit.",
        "operationId": "sandbox_update_external_key_campaign",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "External Key Campaign Id"
            },
            "name": "external_key_campaign_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateExternalKeyCampaign"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalKeyCampaign"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Sandbox Config - External Key Campaign"
        ],
        "summary": "Delete Single External Key Campaign",
        "description": "Delete single External Key Campaign. Requires permission sandbox:config:edit.",
        "operationId": "sandbox_delete_single_external_key_campaign",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "External Key Campaign Id"
            },
            "name": "external_key_campaign_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Sandbox Config - External Key Campaign"
        ],
        "summary": "Patch External Key Campaign",
        "description": "Patch External Key Campaign. Requires permission sandbox:config:edit.",
        "operationId": "sandbox_patch_external_key_campaign",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "External Key Campaign Id"
            },
            "name": "external_key_campaign_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchExternalKeyCampaign"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalKeyCampaign"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/event-params-schema": {
      "get": {
        "tags": [
          "Sandbox Config - Custom Event Schema"
        ],
        "summary": "Get Event Params Schema For Sandbox",
        "description": "Get All Event Params Schemas, requires sandbox:config:view permission",
        "operationId": "sandbox_get_event_params_schema_for_sandbox",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "The maximum number of elements to be returned per call",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "title": "Page Size",
              "description": "The maximum number of elements to be returned per call",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Cursor",
              "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
              "default": "0"
            },
            "name": "cursor",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllEventParamsSchemas"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Sandbox Config - Custom Event Schema"
        ],
        "summary": "Create Event Params Schema",
        "description": "Create Custom Event Schema requires sandbox:config:edit permission",
        "operationId": "sandbox_create_event_params_schema",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventParamsSchemaUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventParamsSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/event-params-schema/{event_name}": {
      "get": {
        "tags": [
          "Sandbox Config - Custom Event Schema"
        ],
        "summary": "Get Event Params Schema For Sandbox",
        "description": "Get Custom Event Params Schema definition by event_name, requires sandbox:config:view permission",
        "operationId": "sandbox_get_event_params_schema_for_sandbox1",
        "parameters": [
          {
            "description": "Event Params Schema event name",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Event Name",
              "description": "Event Params Schema event name"
            },
            "name": "event_name",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventParamsSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Sandbox Config - Custom Event Schema"
        ],
        "summary": "Update Event Params Schema",
        "description": "Update Custom Event Params Schema, requires sandbox:config:edit permission",
        "operationId": "sandbox_update_event_params_schema",
        "parameters": [
          {
            "description": "Event params schema event_name",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Event Name",
              "description": "Event params schema event_name"
            },
            "name": "event_name",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventParamsSchemaUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventParamsSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Sandbox Config - Custom Event Schema"
        ],
        "summary": "Delete Event Params Schema",
        "description": "Delete Event Params Schema, requires sandbox:config:edit permission",
        "operationId": "sandbox_delete_event_params_schema",
        "parameters": [
          {
            "description": "Event Params Schema event_name",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Event Name",
              "description": "Event Params Schema event_name"
            },
            "name": "event_name",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "title": "Response Sandbox Delete Event Params Schema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox-common/session-templates": {
      "get": {
        "tags": [
          "Session Templates"
        ],
        "summary": "Get Common Session Template Configuration",
        "description": "Get the set of common Session Template configuration.\nRequires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_common_session_template_configuration",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommonConfigSessionTemplates"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/session-template": {
      "get": {
        "tags": [
          "Session Templates"
        ],
        "summary": "Get All Session Templates For Sandbox",
        "description": "Get all Session Templates for a sandbox\n    \n    Requires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_all_session_templates_for_sandbox",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "The maximum number of elements to be returned per call",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "title": "Page Size",
              "description": "The maximum number of elements to be returned per call",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Cursor",
              "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
              "default": "0"
            },
            "name": "cursor",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllSessionTemplatesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Session Templates"
        ],
        "summary": "Create Session Template For Sandbox",
        "description": "Add a new Session Template for a sandbox\n    \n    Requires permission sandbox:config:edit.",
        "operationId": "sandbox_create_session_template_for_sandbox",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionTemplateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionTemplate"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/session-template/{session_template_id}": {
      "get": {
        "tags": [
          "Session Templates"
        ],
        "summary": "Get Session Template For Sandbox",
        "description": "Get a specific session template and it's associated platform session templates for a sandbox\n    \n    Requires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_session_template_for_sandbox",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Session Template Id"
            },
            "name": "session_template_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionTemplate"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Session Templates"
        ],
        "summary": "Put Session Template For Sandbox",
        "description": "Update a specific Session Template in a sandbox\n\n    Requires permission sandbox:config:edit.",
        "operationId": "sandbox_put_session_template_for_sandbox",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Session Template Id"
            },
            "name": "session_template_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionTemplateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionTemplate"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Session Templates"
        ],
        "summary": "Delete Session Template For Sandbox",
        "description": "Delete a specific Session Template in a sandbox\n    \n    Requires permission sandbox:config:edit.",
        "operationId": "sandbox_delete_session_template_for_sandbox",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Session Template Id"
            },
            "name": "session_template_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Session Templates"
        ],
        "summary": "Patch Session Template For Sandbox",
        "description": "Update a specific Session Template in a sandbox\n    \n    Requires permission sandbox:config:edit.",
        "operationId": "sandbox_patch_session_template_for_sandbox",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Session Template Id"
            },
            "name": "session_template_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionTemplateUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionTemplate"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/session-template/{session_template_id}/platform-session-template": {
      "get": {
        "tags": [
          "Platform Session Templates"
        ],
        "summary": "Get All Platform Session Templates",
        "description": "Get all Platform Session Templates in a specific sandbox\n    \n    Requires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_all_platform_session_templates",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Session Template Id"
            },
            "name": "session_template_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "The maximum number of elements to be returned per call",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "title": "Page Size",
              "description": "The maximum number of elements to be returned per call",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Cursor",
              "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
              "default": "0"
            },
            "name": "cursor",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllPlatformSessionTemplatesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/session-template/{session_template_id}/platform-session-template/{platform}": {
      "get": {
        "tags": [
          "Platform Session Templates"
        ],
        "summary": "Get Specific Platform Session Template",
        "description": "Get a specific Platform Session Template for a specific Session Template in a specific sandbox\n    \n    Requires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_specific_platform_session_template",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Platform"
            },
            "name": "platform",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Session Template Id"
            },
            "name": "session_template_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformSessionTemplate"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Platform Session Templates"
        ],
        "summary": "Put Platform Session Template",
        "description": "Update a Platform Session Template for a specific Session Template\n\n    Requires permission sandbox:config:edit.",
        "operationId": "sandbox_put_platform_session_template",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Platform"
            },
            "name": "platform",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Session Template Id"
            },
            "name": "session_template_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatformSessionTemplateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformSessionTemplate"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Platform Session Templates"
        ],
        "summary": "Create Platform Session Template",
        "description": "Add a new Platform Session Template for a specific Session Template\n    \n    Requires permission sandbox:config:edit.",
        "operationId": "sandbox_create_platform_session_template",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Session Template Id"
            },
            "name": "session_template_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Platform"
            },
            "name": "platform",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatformSessionTemplateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformSessionTemplate"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Platform Session Templates"
        ],
        "summary": "Delete Platform Session Template",
        "description": "Delete a specific Platform Session Template for a specific Session Template\n    \n    Requires permission sandbox:config:edit.",
        "operationId": "sandbox_delete_platform_session_template",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Session Template Id"
            },
            "name": "session_template_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Platform"
            },
            "name": "platform",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Platform Session Templates"
        ],
        "summary": "Patch Platform Session Template",
        "description": "Update a Platform Session Template for a specific Session Template\n    \n    Requires permission sandbox:config:edit.",
        "operationId": "sandbox_patch_platform_session_template",
        "parameters": [
          {
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Platform"
            },
            "name": "platform",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Session Template Id"
            },
            "name": "session_template_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatformSessionTemplateUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformSessionTemplate"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/queue": {
      "get": {
        "tags": [
          "Queues"
        ],
        "summary": "Get All Queues",
        "description": "Get all Queues for a sandbox\n\nRequires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_all_queues",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "The maximum number of elements to be returned per call",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "title": "Page Size",
              "description": "The maximum number of elements to be returned per call",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Cursor",
              "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
              "default": "0"
            },
            "name": "cursor",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllQueuesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Queues"
        ],
        "summary": "Create Queue",
        "description": "Create a new Queue for a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_create_queue",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueueRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Queue"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/queue/{queue_id}": {
      "get": {
        "tags": [
          "Queues"
        ],
        "summary": "Get Queue",
        "description": "Get a specific Queue for a sandbox\n\nRequires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_queue",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Queue Id"
            },
            "name": "queue_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Queue"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Queues"
        ],
        "summary": "Put Queue",
        "description": "Update an existing Queue for a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_put_queue",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Queue Id"
            },
            "name": "queue_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueueRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Queue"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Queues"
        ],
        "summary": "Delete Queue",
        "description": "Delete a Queue for a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_delete_queue",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Queue Id"
            },
            "name": "queue_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Queues"
        ],
        "summary": "Patch Queue",
        "description": "Update an existing Queue for a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_patch_queue",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Queue Id"
            },
            "name": "queue_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueueUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Queue"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/map": {
      "get": {
        "tags": [
          "Maps"
        ],
        "summary": "Get All Maps",
        "description": "Get all Maps for a sandbox\n\nRequires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_all_maps",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "The maximum number of elements to be returned per call",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "title": "Page Size",
              "description": "The maximum number of elements to be returned per call",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Cursor",
              "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
              "default": "0"
            },
            "name": "cursor",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllMapsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Maps"
        ],
        "summary": "Create Map",
        "description": "Add a new Map for a sandbox\n                 \nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_create_map",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MapRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Map"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/map/{map_id}": {
      "get": {
        "tags": [
          "Maps"
        ],
        "summary": "Get Map",
        "description": "Get a specific Map for a sandbox\n        \nRequires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_map",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Map Id"
            },
            "name": "map_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Map"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Maps"
        ],
        "summary": "Put Map",
        "description": "Update a specific Map in a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_put_map",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Map Id"
            },
            "name": "map_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MapRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Map"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Maps"
        ],
        "summary": "Delete Map",
        "description": "Delete a specific Map in a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_delete_map",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Map Id"
            },
            "name": "map_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Maps"
        ],
        "summary": "Patch Map",
        "description": "Update a specific Map in a sandbox\n                  \nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_patch_map",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Map Id"
            },
            "name": "map_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MapUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Map"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/map-selection-list": {
      "get": {
        "tags": [
          "Maps"
        ],
        "summary": "Get All Map Selection Lists",
        "description": "Get all MapSelectionLists for a sandbox\n\nRequires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_all_map_selection_lists",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "The maximum number of elements to be returned per call",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "title": "Page Size",
              "description": "The maximum number of elements to be returned per call",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Cursor",
              "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
              "default": "0"
            },
            "name": "cursor",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllMapSelectionListsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Maps"
        ],
        "summary": "Create Selection List",
        "description": "Add a new Map Selection List for a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_create_selection_list",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MapSelectionListRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MapSelectionList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/map-selection-list/{map_selection_list_id}": {
      "get": {
        "tags": [
          "Maps"
        ],
        "summary": "Get Map Selection List",
        "description": "Get a specific Map Selection List for a sandbox\n\nRequires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_map_selection_list",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Map Selection List Id"
            },
            "name": "map_selection_list_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MapSelectionListFlattened"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Maps"
        ],
        "summary": "Put Selection List",
        "description": "Update an existing Map Selection List for a sandbox\n                \nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_put_selection_list",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Map Selection List Id"
            },
            "name": "map_selection_list_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MapSelectionListBase"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MapSelectionList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Maps"
        ],
        "summary": "Delete Map Selection List",
        "description": "Delete a specific Map Selection List in a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_delete_map_selection_list",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Map Selection List Id"
            },
            "name": "map_selection_list_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Maps"
        ],
        "summary": "Patch Selection List",
        "description": "Update an existing Map Selection List for a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_patch_selection_list",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Map Selection List Id"
            },
            "name": "map_selection_list_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MapSelectionListUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MapSelectionList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/map-selection-list/{map_selection_list_id}/map-selection-list-entry/{map_selection_list_entry_id}": {
      "get": {
        "tags": [
          "Maps"
        ],
        "summary": "Get Map Selection List Entry",
        "description": "Get a specific Map Selection List Entry for a Map Selection List\n\nRequires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_map_selection_list_entry",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Map Selection List Id"
            },
            "name": "map_selection_list_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Map Selection List Entry Id"
            },
            "name": "map_selection_list_entry_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MapSelectionListEntryFlattened"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Maps"
        ],
        "summary": "Put Selection List Entry",
        "description": "Update an existing Map Selection List Entry for a Map Selection List\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_put_selection_list_entry",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Map Selection List Id"
            },
            "name": "map_selection_list_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Map Selection List Entry Id"
            },
            "name": "map_selection_list_entry_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MapSelectionListEntryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MapSelectionListEntry"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Maps"
        ],
        "summary": "Delete Map Selection List Entry",
        "description": "Delete a specific Map Selection List Entry for a Map Selection List\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_delete_map_selection_list_entry",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Map Selection List Id"
            },
            "name": "map_selection_list_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Map Selection List Entry Id"
            },
            "name": "map_selection_list_entry_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Maps"
        ],
        "summary": "Patch Selection List Entry",
        "description": "Update an existing Map Selection List Entry for a Map Selection List\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_patch_selection_list_entry",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Map Selection List Id"
            },
            "name": "map_selection_list_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Map Selection List Entry Id"
            },
            "name": "map_selection_list_entry_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MapSelectionListEntryUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MapSelectionListEntry"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/map-selection-list/{map_selection_list_id}/map-selection-list-entry": {
      "get": {
        "tags": [
          "Maps"
        ],
        "summary": "Get All Map Selection List Entries For Map Selection List",
        "description": "Get all Map Selection List entries for a specific Map Selection List\n\nRequires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_all_map_selection_list_entries_for_map_selection_list",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Map Selection List Id"
            },
            "name": "map_selection_list_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "The maximum number of elements to be returned per call",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "title": "Page Size",
              "description": "The maximum number of elements to be returned per call",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Cursor",
              "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
              "default": "0"
            },
            "name": "cursor",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllMapSelectionListEntriesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Maps"
        ],
        "summary": "Create Map Selection List Entry",
        "description": "Add a new Map Selection List Entry for a Map Selection List\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_create_map_selection_list_entry",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Map Selection List Id"
            },
            "name": "map_selection_list_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MapSelectionListEntryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MapSelectionListEntry"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/instance-request-template": {
      "get": {
        "tags": [
          "Instance Request Templates"
        ],
        "summary": "Get All Instance Request Templates",
        "description": "Get all Instance Request Templates in a sandbox\n\nRequires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_all_instance_request_templates",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "The maximum number of elements to be returned per call",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "title": "Page Size",
              "description": "The maximum number of elements to be returned per call",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Cursor",
              "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
              "default": "0"
            },
            "name": "cursor",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllInstanceRequestTemplatesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Instance Request Templates"
        ],
        "summary": "Create Instance Request Template",
        "description": "Create a new Instance Request Template in a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_create_instance_request_template",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstanceRequestTemplateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceRequestTemplate"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/instance-request-template/{instance_request_template_id}": {
      "get": {
        "tags": [
          "Instance Request Templates"
        ],
        "summary": "Get Instance Request Template",
        "description": "Get a specific Instance Request Template in a sandbox\n\nRequires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_instance_request_template",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Instance Request Template Id"
            },
            "name": "instance_request_template_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceRequestTemplate"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Instance Request Templates"
        ],
        "summary": "Put Instance Request Template",
        "description": "Update an existing Instance Request Template in a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_put_instance_request_template",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Instance Request Template Id"
            },
            "name": "instance_request_template_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstanceRequestTemplateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceRequestTemplate"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Instance Request Templates"
        ],
        "summary": "Delete Instance Request Template",
        "description": "Delete an Instance Request Template in a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_delete_instance_request_template",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Instance Request Template Id"
            },
            "name": "instance_request_template_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Instance Request Templates"
        ],
        "summary": "Patch Instance Request Template",
        "description": "Update an existing Instance Request Template in a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_patch_instance_request_template",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Instance Request Template Id"
            },
            "name": "instance_request_template_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstanceRequestTemplateUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceRequestTemplate"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/match-making-profile": {
      "get": {
        "tags": [
          "Match Making Profiles"
        ],
        "summary": "Get All Profiles",
        "description": "Get all MatchMakingProfiles in a sandbox\n\nRequires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_all_profiles",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "The maximum number of elements to be returned per call",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "title": "Page Size",
              "description": "The maximum number of elements to be returned per call",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Cursor",
              "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
              "default": "0"
            },
            "name": "cursor",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllMatchMakingProfilesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Match Making Profiles"
        ],
        "summary": "Create Profile",
        "description": "Create a new MatchMakingProfile in a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_create_profile",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchMakingProfileRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchMakingProfile"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/match-making-profile/{match_making_profile_id}": {
      "get": {
        "tags": [
          "Match Making Profiles"
        ],
        "summary": "Get Profile",
        "description": "Get a specific MatchMakingProfile in a sandbox\n\nRequires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_profile",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Profile Id"
            },
            "name": "match_making_profile_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchMakingProfile"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Match Making Profiles"
        ],
        "summary": "Put Profile",
        "description": "Update an existing MatchMakingProfile in a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_put_profile",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Profile Id"
            },
            "name": "match_making_profile_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchMakingProfileRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchMakingProfile"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Match Making Profiles"
        ],
        "summary": "Delete Profile",
        "description": "Delete a MatchMakingProfile in a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_delete_profile",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Profile Id"
            },
            "name": "match_making_profile_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Match Making Profiles"
        ],
        "summary": "Patch Profile",
        "description": "Update an existing MatchMakingProfile in a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_patch_profile",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Profile Id"
            },
            "name": "match_making_profile_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchMakingProfileUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchMakingProfile"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/match-making-profile-list": {
      "get": {
        "tags": [
          "Match Making Profiles"
        ],
        "summary": "Get All Profile Lists",
        "description": "Get all MatchMakingProfileLists in a sandbox\n\nRequires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_all_profile_lists",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "The maximum number of elements to be returned per call",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "title": "Page Size",
              "description": "The maximum number of elements to be returned per call",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Cursor",
              "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
              "default": "0"
            },
            "name": "cursor",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllMatchMakingProfileListsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Match Making Profiles"
        ],
        "summary": "Create Profile List",
        "description": "Create a new MatchMakingProfileList in a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_create_profile_list",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchMakingProfileListRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchMakingProfileList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/match-making-profile-list/{match_making_profile_list_id}": {
      "get": {
        "tags": [
          "Match Making Profiles"
        ],
        "summary": "Get Profile List",
        "description": "Get a specific MatchMakingProfileList in a sandbox\n\nRequires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_profile_list",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Profile List Id"
            },
            "name": "match_making_profile_list_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchMakingProfileListFlattened"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Match Making Profiles"
        ],
        "summary": "Put Profile List",
        "description": "Update an existing MatchMakingProfileList in a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_put_profile_list",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Profile List Id"
            },
            "name": "match_making_profile_list_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchMakingProfileListRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchMakingProfileList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Match Making Profiles"
        ],
        "summary": "Delete Profile List",
        "description": "Delete a MatchMakingProfileList in a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_delete_profile_list",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Profile List Id"
            },
            "name": "match_making_profile_list_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Match Making Profiles"
        ],
        "summary": "Patch Profile List",
        "description": "Update an existing MatchMakingProfileList in a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_patch_profile_list",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Profile List Id"
            },
            "name": "match_making_profile_list_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchMakingProfileListUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchMakingProfileList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/match-making-profile-list/{match_making_profile_list_id}/match-making-profile-list-entry": {
      "get": {
        "tags": [
          "Match Making Profiles"
        ],
        "summary": "Get All Entries",
        "description": "Get all MatchMakingProfileListEntries in a MatchMakingProfileList\n\nRequires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_all_entries",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Profile List Id"
            },
            "name": "match_making_profile_list_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "The maximum number of elements to be returned per call",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "title": "Page Size",
              "description": "The maximum number of elements to be returned per call",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Cursor",
              "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
              "default": "0"
            },
            "name": "cursor",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllMatchMakingProfileListEntriesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Match Making Profiles"
        ],
        "summary": "Create Entry",
        "description": "Create a new MatchMakingProfileListEntry in a MatchMakingProfileList\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_create_entry",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Profile List Id"
            },
            "name": "match_making_profile_list_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchMakingProfileListEntryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchMakingProfileListEntry"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/match-making-profile-list/{match_making_profile_list_id}/match-making-profile-list-entry/{match_making_profile_list_entry_id}": {
      "get": {
        "tags": [
          "Match Making Profiles"
        ],
        "summary": "Get Entry",
        "description": "Get a specific MatchMakingProfileListEntry in a MatchMakingProfileList\n\nRequires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_entry",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Profile List Id"
            },
            "name": "match_making_profile_list_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Profile List Entry Id"
            },
            "name": "match_making_profile_list_entry_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchMakingProfileListEntry"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Match Making Profiles"
        ],
        "summary": "Put Entry",
        "description": "Update an existing MatchMakingProfileListEntry in a MatchMakingProfileList\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_put_entry",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Profile List Id"
            },
            "name": "match_making_profile_list_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Profile List Entry Id"
            },
            "name": "match_making_profile_list_entry_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchMakingProfileListEntryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchMakingProfileListEntry"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Match Making Profiles"
        ],
        "summary": "Delete Entry",
        "description": "Delete an existing MatchMakingProfileListEntry in a MatchMakingProfileList\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_delete_entry",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Profile List Id"
            },
            "name": "match_making_profile_list_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Profile List Entry Id"
            },
            "name": "match_making_profile_list_entry_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Match Making Profiles"
        ],
        "summary": "Patch Entry",
        "description": "Update an existing MatchMakingProfileListEntry in a MatchMakingProfileList\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_patch_entry",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Profile List Id"
            },
            "name": "match_making_profile_list_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Profile List Entry Id"
            },
            "name": "match_making_profile_list_entry_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchMakingProfileListEntryUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchMakingProfileListEntry"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/rank": {
      "get": {
        "tags": [
          "Ranks"
        ],
        "summary": "Get All Ranks",
        "description": "Get all Ranks in a sandbox\n\nRequires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_all_ranks",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "The maximum number of elements to be returned per call",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "title": "Page Size",
              "description": "The maximum number of elements to be returned per call",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Cursor",
              "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
              "default": "0"
            },
            "name": "cursor",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllRanksResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Ranks"
        ],
        "summary": "Create Rank",
        "description": "Create a new Rank in a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_create_rank",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RankRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rank"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/rank/{rank_id}": {
      "get": {
        "tags": [
          "Ranks"
        ],
        "summary": "Get Rank",
        "description": "Get specific Rank in a sandbox\n\nRequires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_rank",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Rank Id"
            },
            "name": "rank_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rank"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Ranks"
        ],
        "summary": "Put Rank",
        "description": "Update an existing Rank in a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_put_rank",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Rank Id"
            },
            "name": "rank_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RankUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rank"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Ranks"
        ],
        "summary": "Delete Rank",
        "description": "Delete an existing Rank in a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_delete_rank",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Rank Id"
            },
            "name": "rank_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Ranks"
        ],
        "summary": "Patch Rank",
        "description": "Update an existing Rank in a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_patch_rank",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Rank Id"
            },
            "name": "rank_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RankUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rank"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/match-making-rule": {
      "get": {
        "tags": [
          "Match Making Rules"
        ],
        "summary": "Get All Rules",
        "description": "Get all MatchMakingRules in a sandbox\n\nRequires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_all_rules",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "The maximum number of elements to be returned per call",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "title": "Page Size",
              "description": "The maximum number of elements to be returned per call",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Cursor",
              "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
              "default": "0"
            },
            "name": "cursor",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllMatchMakingRulesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Match Making Rules"
        ],
        "summary": "Create Rule",
        "description": "Create a new MatchMakingRule in a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_create_rule",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchMakingRuleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchMakingRule"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/match-making-rule/{match_making_rule_id}": {
      "get": {
        "tags": [
          "Match Making Rules"
        ],
        "summary": "Get Rule",
        "description": "Get specific MatchMakingRule in a sandbox\n\nRequires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_rule",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Rule Id"
            },
            "name": "match_making_rule_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchMakingRule"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Match Making Rules"
        ],
        "summary": "Put Rule",
        "description": "Update an existing MatchMakingRule in a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_put_rule",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Rule Id"
            },
            "name": "match_making_rule_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchMakingRuleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchMakingRule"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Match Making Rules"
        ],
        "summary": "Delete Rule",
        "description": "Update an existing MatchMakingRule in a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_delete_rule",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Rule Id"
            },
            "name": "match_making_rule_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Match Making Rules"
        ],
        "summary": "Patch Rule",
        "description": "Update an existing MatchMakingRule in a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_patch_rule",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Rule Id"
            },
            "name": "match_making_rule_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchMakingRuleUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchMakingRule"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/match-making-ruleset": {
      "get": {
        "tags": [
          "Match Making Rules"
        ],
        "summary": "Get All Rulesets",
        "description": "Get all MatchMakingRulesets in a sandbox\n\nRequires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_all_rulesets",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "The maximum number of elements to be returned per call",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "title": "Page Size",
              "description": "The maximum number of elements to be returned per call",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Cursor",
              "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
              "default": "0"
            },
            "name": "cursor",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllMatchMakingRulesetsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Match Making Rules"
        ],
        "summary": "Create Ruleset",
        "description": "Create a new MatchMakingRuleset in a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_create_ruleset",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchMakingRulesetRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchMakingRuleset"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/match-making-ruleset/{match_making_ruleset_id}": {
      "get": {
        "tags": [
          "Match Making Rules"
        ],
        "summary": "Get Ruleset",
        "description": "Get specific MatchMakingRuleset in a sandbox\n\nRequires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_ruleset",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Ruleset Id"
            },
            "name": "match_making_ruleset_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchMakingRuleset"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Match Making Rules"
        ],
        "summary": "Put Ruleset",
        "description": "Update an existing MatchMakingRuleset in a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_put_ruleset",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Ruleset Id"
            },
            "name": "match_making_ruleset_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchMakingRulesetRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchMakingRuleset"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Match Making Rules"
        ],
        "summary": "Delete Ruleset",
        "description": "Update an existing MatchMakingRuleset in a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_delete_ruleset",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Ruleset Id"
            },
            "name": "match_making_ruleset_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Match Making Rules"
        ],
        "summary": "Patch Ruleset",
        "description": "Update an existing MatchMakingRuleset in a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_patch_ruleset",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Ruleset Id"
            },
            "name": "match_making_ruleset_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchMakingRulesetUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchMakingRuleset"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/match-making-ruleset/{match_making_ruleset_id}/rules": {
      "get": {
        "tags": [
          "Match Making Rules"
        ],
        "summary": "Get Rules In Ruleset",
        "description": "Get specific MatchMakingRuleset rules in a sandbox\n\nRequires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_rules_in_ruleset",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Ruleset Id"
            },
            "name": "match_making_ruleset_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "The maximum number of elements to be returned per call",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "title": "Page Size",
              "description": "The maximum number of elements to be returned per call",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Cursor",
              "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
              "default": "0"
            },
            "name": "cursor",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllMatchMakingRulesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/match-making-stride": {
      "get": {
        "tags": [
          "Match Making Strides"
        ],
        "summary": "Get All Strides",
        "description": "Get all MatchMakingStrides in a sandbox\n\nRequires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_all_strides",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "The maximum number of elements to be returned per call",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "title": "Page Size",
              "description": "The maximum number of elements to be returned per call",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Cursor",
              "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
              "default": "0"
            },
            "name": "cursor",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllMatchMakingStridesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Match Making Strides"
        ],
        "summary": "Create Stride",
        "description": "Create a new MatchMakingStrides in a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_create_stride",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchMakingStrideRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchMakingStride"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/match-making-stride/{match_making_stride_id}": {
      "get": {
        "tags": [
          "Match Making Strides"
        ],
        "summary": "Get Stride",
        "description": "Get specific MatchMakingStride in a sandbox\n\nRequires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_stride",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Stride Id"
            },
            "name": "match_making_stride_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchMakingStrideResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Match Making Strides"
        ],
        "summary": "Put Stride",
        "description": "Update an existing MatchMakingStrides in a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_put_stride",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Stride Id"
            },
            "name": "match_making_stride_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchMakingStrideRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchMakingStride"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Match Making Strides"
        ],
        "summary": "Delete Stride",
        "description": "Delete an existing MatchMakingStrides in a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_delete_stride",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Stride Id"
            },
            "name": "match_making_stride_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Match Making Strides"
        ],
        "summary": "Patch Stride",
        "description": "Update an existing MatchMakingStrides in a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_patch_stride",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Stride Id"
            },
            "name": "match_making_stride_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchMakingStrideUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchMakingStride"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/match-making-stride/{match_making_stride_id}/match-making-stride-entry": {
      "get": {
        "tags": [
          "Match Making Strides"
        ],
        "summary": "Get All Stride Entries",
        "description": "Get all MatchMakingStrideEntries in a MatchMakingStride\n\nRequires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_all_stride_entries",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Stride Id"
            },
            "name": "match_making_stride_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "The maximum number of elements to be returned per call",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "title": "Page Size",
              "description": "The maximum number of elements to be returned per call",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Cursor",
              "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
              "default": "0"
            },
            "name": "cursor",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllMatchMakingStrideEntriesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Match Making Strides"
        ],
        "summary": "Create Stride Entry",
        "description": "Create a new MatchMakingStrideEntries in a MatchMakingStride\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_create_stride_entry",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Stride Id"
            },
            "name": "match_making_stride_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchMakingStrideEntryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchMakingStrideEntry"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/match-making-stride/{match_making_stride_id}/match-making-stride-entry/{match_making_stride_entry_id}": {
      "get": {
        "tags": [
          "Match Making Strides"
        ],
        "summary": "Get Stride Entry",
        "description": "Get a specific MatchMakingStrideEntries in a MatchMakingStride\n\nRequires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_stride_entry",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Stride Id"
            },
            "name": "match_making_stride_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Stride Entry Id"
            },
            "name": "match_making_stride_entry_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchMakingStrideEntry"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Match Making Strides"
        ],
        "summary": "Put Stride Entry",
        "description": "Update an existing MatchMakingStrideEntries in a MatchMakingStride\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_put_stride_entry",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Stride Id"
            },
            "name": "match_making_stride_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Stride Entry Id"
            },
            "name": "match_making_stride_entry_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchMakingStrideEntryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchMakingStrideEntry"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Match Making Strides"
        ],
        "summary": "Delete Stride Entry",
        "description": "Delete an existing MatchMakingStrideEntry in a MatchMakingStride\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_delete_stride_entry",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Stride Id"
            },
            "name": "match_making_stride_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Stride Entry Id"
            },
            "name": "match_making_stride_entry_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Match Making Strides"
        ],
        "summary": "Patch Stride Entry",
        "description": "Update an existing MatchMakingStrideEntries in a MatchMakingStride\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_patch_stride_entry",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Stride Id"
            },
            "name": "match_making_stride_id",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Stride Entry Id"
            },
            "name": "match_making_stride_entry_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchMakingStrideEntryUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchMakingStrideEntry"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/match-making-template": {
      "get": {
        "tags": [
          "Match Making Templates"
        ],
        "summary": "Get All Mm Templates",
        "description": "Get all MatchMakingTemplates in a sandbox\n\nRequires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_all_mm_templates",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "The maximum number of elements to be returned per call",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "title": "Page Size",
              "description": "The maximum number of elements to be returned per call",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Cursor",
              "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
              "default": "0"
            },
            "name": "cursor",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllMatchMakingTemplatesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Match Making Templates"
        ],
        "summary": "Create Mm Template",
        "description": "Create a new MatchMakingTemplates in a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_create_mm_template",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchMakingTemplateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchMakingTemplate"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/match-making-template/{match_making_template_id}": {
      "get": {
        "tags": [
          "Match Making Templates"
        ],
        "summary": "Get Mm Template",
        "description": "Get a specific MatchMakingTemplates in a sandbox\n\nRequires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_mm_template",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Template Id"
            },
            "name": "match_making_template_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchMakingTemplateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Match Making Templates"
        ],
        "summary": "Put Mm Template",
        "description": "Update an existing MatchMakingTemplates in a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_put_mm_template",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Template Id"
            },
            "name": "match_making_template_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchMakingTemplateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchMakingTemplate"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Match Making Templates"
        ],
        "summary": "Delete Mm Template",
        "description": "Delete an existing MatchMakingTemplates in a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_delete_mm_template",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Template Id"
            },
            "name": "match_making_template_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Match Making Templates"
        ],
        "summary": "Patch Mm Template",
        "description": "Update an existing MatchMakingTemplates in a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_patch_mm_template",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Template Id"
            },
            "name": "match_making_template_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchMakingTemplateUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchMakingTemplate"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/match-making-template-group": {
      "get": {
        "tags": [
          "Match Making Templates"
        ],
        "summary": "Get All Groups",
        "description": "Get all MatchMakingTemplateGroups in a sandbox\n\nRequires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_all_groups",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "The maximum number of elements to be returned per call",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "title": "Page Size",
              "description": "The maximum number of elements to be returned per call",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Cursor",
              "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
              "default": "0"
            },
            "name": "cursor",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllMatchMakingTemplateGroupsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Match Making Templates"
        ],
        "summary": "Create Group",
        "description": "Create a new MatchMakingTemplateGroup in a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_create_group",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchMakingTemplateGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchMakingTemplateGroup"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/match-making-template-group/{match_making_template_group_id}": {
      "get": {
        "tags": [
          "Match Making Templates"
        ],
        "summary": "Get Group",
        "description": "Get specific MatchMakingTemplateGroup in a sandbox\n\nRequires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_group",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Template Group Id"
            },
            "name": "match_making_template_group_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchMakingTemplateGroup"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Match Making Templates"
        ],
        "summary": "Put Group",
        "description": "Update an existing MatchMakingTemplateGroup in a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_put_group",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Template Group Id"
            },
            "name": "match_making_template_group_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchMakingTemplateGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchMakingTemplateGroup"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Match Making Templates"
        ],
        "summary": "Delete Group",
        "description": "Update an existing MatchMakingTemplateGroup in a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_delete_group",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Template Group Id"
            },
            "name": "match_making_template_group_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Match Making Templates"
        ],
        "summary": "Patch Group",
        "description": "Update an existing MatchMakingTemplateGroup in a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_patch_group",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Template Group Id"
            },
            "name": "match_making_template_group_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchMakingTemplateGroupUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchMakingTemplateGroup"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/match-making-template-group/{match_making_template_group_id}/match-making-template": {
      "get": {
        "tags": [
          "Match Making Templates"
        ],
        "summary": "Get All Mm Templates In Group",
        "description": "Get all MatchMakingTemplates in a MatchMakingTemplateGroup\n\nRequires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_all_mm_templates_in_group",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Match Making Template Group Id"
            },
            "name": "match_making_template_group_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "The maximum number of elements to be returned per call",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "title": "Page Size",
              "description": "The maximum number of elements to be returned per call",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Cursor",
              "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
              "default": "0"
            },
            "name": "cursor",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllMatchMakingTemplatesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox-common/crossplay": {
      "get": {
        "tags": [
          "Crossplay"
        ],
        "summary": "Get Common Crossplay Configuration",
        "description": "Get the set of common Crossplay configuration. These are useful as a starting point for setting up custom Crossplay rules, or if customized rules aren't necessary\nRequires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_common_crossplay_configuration",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommonConfigPartitions"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/crossplay-partition": {
      "get": {
        "tags": [
          "Crossplay"
        ],
        "summary": "Get All Partitions",
        "description": "Get all CrossplayPartitions for a sandbox\n\nRequires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_all_partitions",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "The maximum number of elements to be returned per call",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "title": "Page Size",
              "description": "The maximum number of elements to be returned per call",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Cursor",
              "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
              "default": "0"
            },
            "name": "cursor",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllCrossplayPartitionsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Crossplay"
        ],
        "summary": "Create Partition",
        "description": "Add a new CrossplayPartition for a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_create_partition",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CrossplayPartitionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrossplayPartition"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/crossplay-partition/{crossplay_partition_id}": {
      "get": {
        "tags": [
          "Crossplay"
        ],
        "summary": "Get Partition",
        "description": "Get a specific CrossplayPartition for a sandbox\n\nRequires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_partition",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Crossplay Partition Id"
            },
            "name": "crossplay_partition_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrossplayPartition"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Crossplay"
        ],
        "summary": "Put Partition",
        "description": "Replace a CrossplayPartition for a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_put_partition",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Crossplay Partition Id"
            },
            "name": "crossplay_partition_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CrossplayPartitionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrossplayPartition"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Crossplay"
        ],
        "summary": "Delete Partition",
        "description": "Delete a CrossplayPartition for a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_delete_partition",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Crossplay Partition Id"
            },
            "name": "crossplay_partition_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Crossplay"
        ],
        "summary": "Patch Partition",
        "description": "Update a CrossplayPartition for a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_patch_partition",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Crossplay Partition Id"
            },
            "name": "crossplay_partition_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CrossplayPartitionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrossplayPartition"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/crossplay-profile": {
      "get": {
        "tags": [
          "Crossplay"
        ],
        "summary": "Get All Crossplay Profiles",
        "description": "Get all CrossplayProfiles for a sandbox\n\nRequires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_all_crossplay_profiles",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "The maximum number of elements to be returned per call",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "title": "Page Size",
              "description": "The maximum number of elements to be returned per call",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Cursor",
              "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
              "default": "0"
            },
            "name": "cursor",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllCrossplayProfilesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Crossplay"
        ],
        "summary": "Create Crossplay Profile",
        "description": "Add a new CrossplayProfile for a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_create_crossplay_profile",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CrossplayProfileRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrossplayProfile"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/crossplay-profile/{crossplay_profile_id}": {
      "get": {
        "tags": [
          "Crossplay"
        ],
        "summary": "Get Crossplay Profile",
        "description": "Get a specific CrossplayProfile for a sandbox\n\nRequires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_crossplay_profile",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Crossplay Profile Id"
            },
            "name": "crossplay_profile_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrossplayProfile"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Crossplay"
        ],
        "summary": "Put Crossplay Profile",
        "description": "Replace a CrossplayProfile for a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_put_crossplay_profile",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Crossplay Profile Id"
            },
            "name": "crossplay_profile_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CrossplayProfileRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrossplayProfile"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Crossplay"
        ],
        "summary": "Delete Crossplay Profile",
        "description": "Delete a CrossplayProfile for a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_delete_crossplay_profile",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Crossplay Profile Id"
            },
            "name": "crossplay_profile_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Crossplay"
        ],
        "summary": "Patch Crossplay Profile",
        "description": "Update a CrossplayProfile for a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_patch_crossplay_profile",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Crossplay Profile Id"
            },
            "name": "crossplay_profile_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CrossplayProfileUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrossplayProfile"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/crossplay-partition/{crossplay_partition_id}/crossplay-profile": {
      "get": {
        "tags": [
          "Crossplay"
        ],
        "summary": "Get All Crossplay Profiles In Partition",
        "description": "Get all CrossplayProfiles in a CrossplayPartition for a sandbox\n\nRequires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_all_crossplay_profiles_in_partition",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Crossplay Partition Id"
            },
            "name": "crossplay_partition_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "The maximum number of elements to be returned per call",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "title": "Page Size",
              "description": "The maximum number of elements to be returned per call",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Cursor",
              "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
              "default": "0"
            },
            "name": "cursor",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllCrossplayProfilesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/crossplay-pool": {
      "get": {
        "tags": [
          "Crossplay"
        ],
        "summary": "Get All Crossplay Pools",
        "description": "Get all CrossplayPools for a sandbox\n\nRequires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_all_crossplay_pools",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "The maximum number of elements to be returned per call",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "title": "Page Size",
              "description": "The maximum number of elements to be returned per call",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Cursor",
              "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
              "default": "0"
            },
            "name": "cursor",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllCrossplayPoolsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Crossplay"
        ],
        "summary": "Create Crossplay Pool",
        "description": "Add a new CrossplayPool for a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_create_crossplay_pool",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CrossplayPoolRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrossplayPool"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/crossplay-pool/{crossplay_pool_id}": {
      "get": {
        "tags": [
          "Crossplay"
        ],
        "summary": "Get Crossplay Pool",
        "description": "Get a specific CrossplayPool for a sandbox\n\nRequires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_crossplay_pool",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Crossplay Pool Id"
            },
            "name": "crossplay_pool_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrossplayPool"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Crossplay"
        ],
        "summary": "Put Crossplay Pool",
        "description": "Replace a CrossplayPool for a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_put_crossplay_pool",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Crossplay Pool Id"
            },
            "name": "crossplay_pool_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CrossplayPoolRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrossplayPool"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Crossplay"
        ],
        "summary": "Delete Crossplay Pool",
        "description": "Delete a CrossplayPool for a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_delete_crossplay_pool",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Crossplay Pool Id"
            },
            "name": "crossplay_pool_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Crossplay"
        ],
        "summary": "Patch Crossplay Pool",
        "description": "Update a CrossplayPool for a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_patch_crossplay_pool",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Crossplay Pool Id"
            },
            "name": "crossplay_pool_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CrossplayPoolUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrossplayPool"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/crossplay-profile/{crossplay_profile_id}/crossplay-pool": {
      "get": {
        "tags": [
          "Crossplay"
        ],
        "summary": "Get All Crossplay Pools For Profile",
        "description": "Get all CrossplayPools in a CrossplayProfile for a sandbox\n\n    Requires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_all_crossplay_pools_for_profile",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Crossplay Profile Id"
            },
            "name": "crossplay_profile_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "The maximum number of elements to be returned per call",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "title": "Page Size",
              "description": "The maximum number of elements to be returned per call",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Cursor",
              "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
              "default": "0"
            },
            "name": "cursor",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllCrossplayPoolsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/crossplay-pool-tag": {
      "get": {
        "tags": [
          "Crossplay"
        ],
        "summary": "Get All Crossplay Pool Tags",
        "description": "Get all CrossplayPools for a sandbox\n\nRequires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_all_crossplay_pool_tags",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "The maximum number of elements to be returned per call",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "title": "Page Size",
              "description": "The maximum number of elements to be returned per call",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Cursor",
              "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
              "default": "0"
            },
            "name": "cursor",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllCrossplayPoolTagsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Crossplay"
        ],
        "summary": "Create Crossplay Pool Tag",
        "description": "Add a new CrossplayPoolTag for a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_create_crossplay_pool_tag",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CrossplayPoolTagRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrossplayPoolTag"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/crossplay-pool-tag/{crossplay_pool_tag_id}": {
      "get": {
        "tags": [
          "Crossplay"
        ],
        "summary": "Get Crossplay Pool Tag",
        "description": "Get a specific CrossplayPoolTag for a sandbox\n\nRequires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_crossplay_pool_tag",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Crossplay Pool Tag Id"
            },
            "name": "crossplay_pool_tag_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrossplayPoolTag"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Crossplay"
        ],
        "summary": "Put Crossplay Pool Tag",
        "description": "Replace a CrossplayPoolTag for a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_put_crossplay_pool_tag",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Crossplay Pool Tag Id"
            },
            "name": "crossplay_pool_tag_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CrossplayPoolTagRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrossplayPoolTag"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Crossplay"
        ],
        "summary": "Delete Crossplay Pool Tag",
        "description": "Delete a CrossplayPoolTag for a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_delete_crossplay_pool_tag",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Crossplay Pool Tag Id"
            },
            "name": "crossplay_pool_tag_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Crossplay"
        ],
        "summary": "Patch Crossplay Pool Tag",
        "description": "Update a CrossplayPoolTag for a sandbox\n\nRequires permission sandbox:config:edit.",
        "operationId": "sandbox_patch_crossplay_pool_tag",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Crossplay Pool Tag Id"
            },
            "name": "crossplay_pool_tag_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CrossplayPoolTagUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrossplayPoolTag"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/crossplay-pool/{crossplay_pool_id}/crossplay-pool-tag": {
      "get": {
        "tags": [
          "Crossplay"
        ],
        "summary": "Get Crossplay Pool Tags For Pool",
        "description": "Get all CrossplayPoolTags in a specific CrossplayPool for a sandbox\nRequires any of permissions: \n\t sandbox:config:view, sandbox:config:edit",
        "operationId": "sandbox_get_crossplay_pool_tags_for_pool",
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Crossplay Pool Id"
            },
            "name": "crossplay_pool_id",
            "in": "path"
          },
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "description": "The maximum number of elements to be returned per call",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 10000,
              "minimum": 1,
              "title": "Page Size",
              "description": "The maximum number of elements to be returned per call",
              "default": 50
            },
            "name": "page_size",
            "in": "query"
          },
          {
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
            "required": false,
            "schema": {
              "type": "string",
              "maxLength": 128,
              "minLength": 1,
              "title": "Cursor",
              "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration",
              "default": "0"
            },
            "name": "cursor",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllCrossplayPoolTagsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/analytics/players/ccu": {
      "get": {
        "tags": [
          "environment"
        ],
        "summary": "Get Environment Metric Players Ccu",
        "description": "Get latest CCU from time window, requires `<routers.common.permissions.PortalPermission object at 0x7f23fd71a790>` permission",
        "operationId": "environment_get_environment_metric_players_ccu",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "title": "From Date"
            },
            "name": "from_date",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "title": "To Date"
            },
            "name": "to_date",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "title": "Previous Seconds",
              "default": 600
            },
            "name": "previous_seconds",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformData"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/analytics/players/active": {
      "get": {
        "tags": [
          "environment"
        ],
        "summary": "Get Environment Metric Players Active",
        "description": "Get active player count during time window, requires `<routers.common.permissions.PortalPermission object at 0x7f23fd71a790>` permission",
        "operationId": "environment_get_environment_metric_players_active",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "title": "From Date"
            },
            "name": "from_date",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "title": "To Date"
            },
            "name": "to_date",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "title": "Previous Seconds",
              "default": 600
            },
            "name": "previous_seconds",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformData"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/analytics/players/new": {
      "get": {
        "tags": [
          "environment"
        ],
        "summary": "Get Environment Metric Players New",
        "description": "Get new player count during time window, requires `<routers.common.permissions.PortalPermission object at 0x7f23fd71a790>` permission",
        "operationId": "environment_get_environment_metric_players_new",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "title": "From Date"
            },
            "name": "from_date",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "title": "To Date"
            },
            "name": "to_date",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "title": "Previous Seconds",
              "default": 600
            },
            "name": "previous_seconds",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformData"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/sandbox/{sandbox_id}/analytics/purchases": {
      "get": {
        "tags": [
          "environment"
        ],
        "summary": "Get Environment Metric Purchases",
        "description": "Get purchase count during time window, requires `<routers.common.permissions.PortalPermission object at 0x7f23fd71a790>` permission",
        "operationId": "environment_get_environment_metric_purchases",
        "parameters": [
          {
            "description": "Sandbox ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Sandbox Id",
              "description": "Sandbox ID"
            },
            "name": "sandbox_id",
            "in": "path"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "title": "From Date"
            },
            "name": "from_date",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time",
              "title": "To Date"
            },
            "name": "to_date",
            "in": "query"
          },
          {
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "title": "Previous Seconds",
              "default": 600
            },
            "name": "previous_seconds",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformData"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/product/{product_id}/environment": {
      "get": {
        "tags": [
          "Environments"
        ],
        "summary": "Get All Environments",
        "description": "Get all environments",
        "operationId": "environment_get_all_environments",
        "parameters": [
          {
            "description": "Product ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Product Id",
              "description": "Product ID"
            },
            "name": "product_id",
            "in": "path"
          },
          {
            "description": "Include archive environments",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Include Archive",
              "description": "Include archive environments"
            },
            "name": "include_archive",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EnvironmentResponse"
                  },
                  "type": "array",
                  "title": "Response Environment Get All Environments"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "Environments"
        ],
        "summary": "Create Environment",
        "description": "Create an environment",
        "operationId": "environment_create_environment",
        "parameters": [
          {
            "description": "Product ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Product Id",
              "description": "Product ID"
            },
            "name": "product_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnvironmentCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Environment"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v1/product/{product_id}/environment/{environment_id}": {
      "get": {
        "tags": [
          "Environments"
        ],
        "summary": "Get Environment",
        "description": "Get an environment",
        "operationId": "environment_get_environment",
        "parameters": [
          {
            "description": "The environment ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Environment Id",
              "description": "The environment ID"
            },
            "name": "environment_id",
            "in": "path"
          },
          {
            "description": "Product ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Product Id",
              "description": "Product ID"
            },
            "name": "product_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "put": {
        "tags": [
          "Environments"
        ],
        "summary": "Update Environment",
        "description": "Create an environment",
        "operationId": "environment_update_environment",
        "parameters": [
          {
            "description": "The environment ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Environment Id",
              "description": "The environment ID"
            },
            "name": "environment_id",
            "in": "path"
          },
          {
            "description": "Product ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Product Id",
              "description": "Product ID"
            },
            "name": "product_id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnvironmentUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Environment"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Environments"
        ],
        "summary": "Delete Environment",
        "description": "Delete an environment",
        "operationId": "environment_delete_environment",
        "parameters": [
          {
            "description": "The environment ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Environment Id",
              "description": "The environment ID"
            },
            "name": "environment_id",
            "in": "path"
          },
          {
            "description": "Product ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Product Id",
              "description": "Product ID"
            },
            "name": "product_id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Account": {
        "properties": {
          "account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Account Id",
            "description": "Account id"
          },
          "Auth0_account_Id": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Auth0 Account Id",
            "description": "Auth0 user id which this account links to"
          },
          "account_email": {
            "type": "string",
            "title": "Account Email",
            "description": "Email address for this account"
          },
          "global_admin": {
            "type": "boolean",
            "title": "Global Admin",
            "description": "Is this account a global admin",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "account_id",
          "Auth0_account_Id",
          "account_email"
        ],
        "title": "Account"
      },
      "AccountAuth0": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name for this account"
          },
          "nickname": {
            "type": "string",
            "title": "Nickname",
            "description": "Nickname for this account"
          }
        },
        "type": "object",
        "title": "AccountAuth0"
      },
      "AccountCreationRequest": {
        "properties": {
          "account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Account Id",
            "description": "Account id"
          },
          "first_name": {
            "type": "string",
            "title": "First Name",
            "description": "Name for this account"
          },
          "last_name": {
            "type": "string",
            "title": "Last Name",
            "description": "Last name for this account"
          },
          "nickname": {
            "type": "string",
            "title": "Nickname",
            "description": "Nickname for this account"
          },
          "account_email": {
            "type": "string",
            "title": "Account Email",
            "description": "Email address for this account"
          },
          "password": {
            "type": "string",
            "title": "Password",
            "description": "Password for this account"
          }
        },
        "type": "object",
        "required": [
          "account_id",
          "first_name",
          "last_name",
          "nickname",
          "account_email",
          "password"
        ],
        "title": "AccountCreationRequest"
      },
      "AccountExpand": {
        "properties": {
          "avatar": {
            "type": "string",
            "title": "Avatar",
            "description": "Avatar for this account"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name for this account"
          },
          "nickname": {
            "type": "string",
            "title": "Nickname",
            "description": "Nickname for this account"
          },
          "account_email": {
            "type": "string",
            "title": "Account Email",
            "description": "Email address for this account"
          },
          "account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Account Id",
            "description": "Account id"
          },
          "last_ip": {
            "type": "string",
            "title": "Last Ip",
            "description": "Last IP address for this account login"
          },
          "last_login": {
            "type": "string",
            "title": "Last Login",
            "description": "Last login time for this account"
          }
        },
        "type": "object",
        "required": [
          "name",
          "nickname",
          "account_email",
          "account_id"
        ],
        "title": "AccountExpand"
      },
      "AccountOrganization": {
        "properties": {
          "account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Account Id",
            "description": "Account id"
          },
          "org_id": {
            "type": "string",
            "format": "uuid",
            "title": "Org Id",
            "description": "Organization that this user belongs to"
          }
        },
        "type": "object",
        "required": [
          "account_id",
          "org_id"
        ],
        "title": "AccountOrganization"
      },
      "AccountOrganizationAccount": {
        "properties": {
          "org_id": {
            "type": "string",
            "format": "uuid",
            "title": "Org Id",
            "description": "Organization that this user belongs to"
          },
          "account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Account Id",
            "description": "Account id"
          },
          "account_email": {
            "type": "string",
            "title": "Account Email",
            "description": "Email address for this account"
          },
          "last_ip": {
            "type": "string",
            "title": "Last Ip",
            "description": "Last IP address for this account login"
          },
          "last_login": {
            "type": "string",
            "title": "Last Login",
            "description": "Last login time for this account"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name for this account"
          },
          "nickname": {
            "type": "string",
            "title": "Nickname",
            "description": "Nickname for this account"
          }
        },
        "type": "object",
        "required": [
          "org_id",
          "account_id",
          "account_email"
        ],
        "title": "AccountOrganizationAccount"
      },
      "AccountOrganizationAccountInfo": {
        "properties": {
          "account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Account Id",
            "description": "Account id"
          },
          "org_id": {
            "type": "string",
            "format": "uuid",
            "title": "Org Id",
            "description": "Organization that this user belongs to"
          },
          "account_email": {
            "type": "string",
            "title": "Account Email",
            "description": "Email address for this account"
          }
        },
        "type": "object",
        "required": [
          "account_id",
          "org_id",
          "account_email"
        ],
        "title": "AccountOrganizationAccountInfo"
      },
      "AccountOrganizationCreateRequest": {
        "properties": {
          "org_id": {
            "type": "string",
            "format": "uuid",
            "title": "Org Id",
            "description": "Organization that this user belongs to"
          },
          "account_email": {
            "type": "string",
            "title": "Account Email",
            "description": "Email address for this account"
          },
          "first_name": {
            "type": "string",
            "title": "First Name",
            "description": "Name for this account"
          },
          "last_name": {
            "type": "string",
            "title": "Last Name",
            "description": "Last name for this account"
          },
          "nickname": {
            "type": "string",
            "title": "Nickname",
            "description": "Nickname for this account"
          },
          "password": {
            "type": "string",
            "title": "Password",
            "description": "Password for this account"
          }
        },
        "type": "object",
        "required": [
          "org_id",
          "account_email"
        ],
        "title": "AccountOrganizationCreateRequest"
      },
      "AllCrossplayPartitionsResponse": {
        "properties": {
          "cursor": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Cursor",
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration"
          },
          "partitions": {
            "items": {
              "$ref": "#/components/schemas/CrossplayPartition"
            },
            "type": "array",
            "title": "Partitions",
            "description": "List of CrossplayPartitions"
          }
        },
        "type": "object",
        "required": [
          "cursor",
          "partitions"
        ],
        "title": "AllCrossplayPartitionsResponse"
      },
      "AllCrossplayPoolTagsResponse": {
        "properties": {
          "cursor": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Cursor",
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration"
          },
          "tags": {
            "items": {
              "$ref": "#/components/schemas/CrossplayPoolTag"
            },
            "type": "array",
            "title": "Tags",
            "description": "List of CrossplayPoolTagss"
          }
        },
        "type": "object",
        "required": [
          "cursor",
          "tags"
        ],
        "title": "AllCrossplayPoolTagsResponse"
      },
      "AllCrossplayPoolsResponse": {
        "properties": {
          "cursor": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Cursor",
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration"
          },
          "pools": {
            "items": {
              "$ref": "#/components/schemas/CrossplayPool"
            },
            "type": "array",
            "title": "Pools",
            "description": "List of CrossplayPools"
          }
        },
        "type": "object",
        "required": [
          "cursor",
          "pools"
        ],
        "title": "AllCrossplayPoolsResponse"
      },
      "AllCrossplayProfilesResponse": {
        "properties": {
          "cursor": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Cursor",
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration"
          },
          "profiles": {
            "items": {
              "$ref": "#/components/schemas/CrossplayProfile"
            },
            "type": "array",
            "title": "Profiles",
            "description": "List of CrossplayProfiles"
          }
        },
        "type": "object",
        "required": [
          "cursor",
          "profiles"
        ],
        "title": "AllCrossplayProfilesResponse"
      },
      "AllCustomEndpointsResponse": {
        "properties": {
          "custom_endpoints": {
            "items": {
              "$ref": "#/components/schemas/CustomEndpoint"
            },
            "type": "array",
            "title": "Custom Endpoints",
            "description": "A list of custom endpoints",
            "default": []
          },
          "cursor": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Cursor",
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration"
          }
        },
        "type": "object",
        "required": [
          "cursor"
        ],
        "title": "AllCustomEndpointsResponse"
      },
      "AllEventParamsSchemas": {
        "properties": {
          "event_params_schemas": {
            "items": {
              "$ref": "#/components/schemas/EventParamsSchema"
            },
            "type": "array",
            "title": "Event Params Schemas",
            "description": "A list of EventParamsSchema"
          },
          "cursor": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Cursor",
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration"
          }
        },
        "type": "object",
        "required": [
          "event_params_schemas",
          "cursor"
        ],
        "title": "AllEventParamsSchemas"
      },
      "AllInstanceRequestTemplatesResponse": {
        "properties": {
          "cursor": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Cursor",
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration"
          },
          "instance_request_templates": {
            "items": {
              "$ref": "#/components/schemas/InstanceRequestTemplate"
            },
            "type": "array",
            "title": "Instance Request Templates",
            "description": "List of InstanceRequestTemplates",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "cursor"
        ],
        "title": "AllInstanceRequestTemplatesResponse"
      },
      "AllMapSelectionListEntriesResponse": {
        "properties": {
          "cursor": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Cursor",
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration"
          },
          "map_selection_list_entries": {
            "items": {
              "$ref": "#/components/schemas/MapSelectionListEntryFlattened"
            },
            "type": "array",
            "title": "Map Selection List Entries",
            "description": "A list of MapSelectionListEntries",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "cursor"
        ],
        "title": "AllMapSelectionListEntriesResponse"
      },
      "AllMapSelectionListsResponse": {
        "properties": {
          "cursor": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Cursor",
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration"
          },
          "map_selection_lists": {
            "items": {
              "$ref": "#/components/schemas/MapSelectionListFlattened"
            },
            "type": "array",
            "title": "Map Selection Lists",
            "description": "List of MapSelectionLists"
          }
        },
        "type": "object",
        "required": [
          "cursor",
          "map_selection_lists"
        ],
        "title": "AllMapSelectionListsResponse"
      },
      "AllMapsResponse": {
        "properties": {
          "cursor": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Cursor",
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration"
          },
          "maps": {
            "items": {
              "$ref": "#/components/schemas/Map"
            },
            "type": "array",
            "title": "Maps",
            "description": "List of Maps",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "cursor"
        ],
        "title": "AllMapsResponse"
      },
      "AllMatchMakingProfileListEntriesResponse": {
        "properties": {
          "cursor": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Cursor",
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration"
          },
          "entries": {
            "items": {
              "$ref": "#/components/schemas/MatchMakingProfileListEntry"
            },
            "type": "array",
            "title": "Entries",
            "description": "List of MatchMakingProfileListEntries",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "cursor"
        ],
        "title": "AllMatchMakingProfileListEntriesResponse"
      },
      "AllMatchMakingProfileListsResponse": {
        "properties": {
          "cursor": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Cursor",
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration"
          },
          "profile_lists": {
            "items": {
              "$ref": "#/components/schemas/MatchMakingProfileListFlattened"
            },
            "type": "array",
            "title": "Profile Lists",
            "description": "List of MatchMakingProfileLists",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "cursor"
        ],
        "title": "AllMatchMakingProfileListsResponse"
      },
      "AllMatchMakingProfilesResponse": {
        "properties": {
          "cursor": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Cursor",
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration"
          },
          "profiles": {
            "items": {
              "$ref": "#/components/schemas/MatchMakingProfile"
            },
            "type": "array",
            "title": "Profiles",
            "description": "List of MatchMakingProfiles"
          }
        },
        "type": "object",
        "required": [
          "cursor"
        ],
        "title": "AllMatchMakingProfilesResponse"
      },
      "AllMatchMakingRulesResponse": {
        "properties": {
          "cursor": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Cursor",
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration"
          },
          "rules": {
            "items": {
              "$ref": "#/components/schemas/MatchMakingRule"
            },
            "type": "array",
            "title": "Rules",
            "description": "List of MatchMakingRules",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "cursor"
        ],
        "title": "AllMatchMakingRulesResponse"
      },
      "AllMatchMakingRulesetsResponse": {
        "properties": {
          "cursor": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Cursor",
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration"
          },
          "rulesets": {
            "items": {
              "$ref": "#/components/schemas/MatchMakingRuleset"
            },
            "type": "array",
            "title": "Rulesets",
            "description": "List of MatchMakingRulesets",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "cursor"
        ],
        "title": "AllMatchMakingRulesetsResponse"
      },
      "AllMatchMakingStrideEntriesResponse": {
        "properties": {
          "cursor": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Cursor",
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration"
          },
          "entries": {
            "items": {
              "$ref": "#/components/schemas/MatchMakingStrideEntry"
            },
            "type": "array",
            "title": "Entries",
            "description": "List of MatchMakingStrideEntries"
          }
        },
        "type": "object",
        "required": [
          "cursor",
          "entries"
        ],
        "title": "AllMatchMakingStrideEntriesResponse"
      },
      "AllMatchMakingStridesResponse": {
        "properties": {
          "cursor": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Cursor",
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration"
          },
          "strides": {
            "items": {
              "$ref": "#/components/schemas/MatchMakingStrideResponse"
            },
            "type": "array",
            "title": "Strides",
            "description": "List of MatchMakingStrides"
          }
        },
        "type": "object",
        "required": [
          "cursor",
          "strides"
        ],
        "title": "AllMatchMakingStridesResponse"
      },
      "AllMatchMakingTemplateGroupsResponse": {
        "properties": {
          "cursor": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Cursor",
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration"
          },
          "groups": {
            "items": {
              "$ref": "#/components/schemas/MatchMakingTemplateGroup"
            },
            "type": "array",
            "title": "Groups",
            "description": "List of MatchMakingTemplateGroups",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "cursor"
        ],
        "title": "AllMatchMakingTemplateGroupsResponse"
      },
      "AllMatchMakingTemplatesResponse": {
        "properties": {
          "cursor": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Cursor",
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration"
          },
          "match_making_templates": {
            "items": {
              "$ref": "#/components/schemas/MatchMakingTemplateResponse"
            },
            "type": "array",
            "title": "Match Making Templates",
            "description": "List of MatchMakingTemplates"
          }
        },
        "type": "object",
        "required": [
          "cursor"
        ],
        "title": "AllMatchMakingTemplatesResponse"
      },
      "AllPlatformSessionTemplatesResponse": {
        "properties": {
          "platform_session_templates": {
            "items": {
              "$ref": "#/components/schemas/PlatformSessionTemplate"
            },
            "type": "array",
            "title": "Platform Session Templates",
            "description": "A list of platform session templates"
          },
          "cursor": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Cursor",
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration"
          }
        },
        "type": "object",
        "required": [
          "platform_session_templates",
          "cursor"
        ],
        "title": "AllPlatformSessionTemplatesResponse"
      },
      "AllQueuesResponse": {
        "properties": {
          "cursor": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Cursor",
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration"
          },
          "queues": {
            "items": {
              "$ref": "#/components/schemas/Queue"
            },
            "type": "array",
            "title": "Queues",
            "description": "A list of queues"
          }
        },
        "type": "object",
        "required": [
          "cursor",
          "queues"
        ],
        "title": "AllQueuesResponse"
      },
      "AllRHEventSchemas": {
        "properties": {
          "rh_event_schemas": {
            "items": {
              "$ref": "#/components/schemas/RHEventSchema"
            },
            "type": "array",
            "title": "Rh Event Schemas",
            "description": "A list of standard event schemas"
          },
          "cursor": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Cursor",
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration"
          }
        },
        "type": "object",
        "required": [
          "rh_event_schemas",
          "cursor"
        ],
        "title": "AllRHEventSchemas"
      },
      "AllRanksResponse": {
        "properties": {
          "cursor": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Cursor",
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration"
          },
          "ranks": {
            "items": {
              "$ref": "#/components/schemas/Rank"
            },
            "type": "array",
            "title": "Ranks",
            "description": "A list of Ranks",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "cursor"
        ],
        "title": "AllRanksResponse"
      },
      "AllRolesResponse": {
        "properties": {
          "roles": {
            "items": {
              "$ref": "#/components/schemas/Role"
            },
            "type": "array",
            "title": "Roles",
            "description": "A list of all Roles"
          },
          "cursor": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Cursor",
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration"
          }
        },
        "type": "object",
        "required": [
          "roles",
          "cursor"
        ],
        "title": "AllRolesResponse"
      },
      "AllSessionTemplatesResponse": {
        "properties": {
          "session_templates": {
            "items": {
              "$ref": "#/components/schemas/SessionTemplate"
            },
            "type": "array",
            "title": "Session Templates",
            "description": "A list of Session Templates"
          },
          "cursor": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Cursor",
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration"
          }
        },
        "type": "object",
        "required": [
          "session_templates",
          "cursor"
        ],
        "title": "AllSessionTemplatesResponse"
      },
      "AllSettingTypeResponse": {
        "properties": {
          "setting_types": {
            "items": {
              "$ref": "#/components/schemas/SettingType"
            },
            "type": "array",
            "title": "Setting Types",
            "description": "A list of Setting Types"
          },
          "cursor": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Cursor",
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration"
          }
        },
        "type": "object",
        "required": [
          "setting_types",
          "cursor"
        ],
        "title": "AllSettingTypeResponse"
      },
      "AmazonConfig": {
        "properties": {
          "enable_login": {
            "type": "boolean",
            "title": "Enable Login",
            "description": "Whether or not to enable Amazon logins",
            "default": true
          },
          "client_id": {
            "type": "string",
            "title": "Client Id",
            "description": "Epic Online Services client ID. Client tokens are validated against this ID"
          },
          "scopes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true,
            "title": "Scopes",
            "description": "Amazon OAuth scopes to request",
            "default": [
              "profile:user_id",
              "games::prime"
            ]
          }
        },
        "type": "object",
        "required": [
          "client_id"
        ],
        "title": "AmazonConfig"
      },
      "AnonConfig": {
        "properties": {
          "enable_login": {
            "type": "boolean",
            "title": "Enable Login",
            "description": "Whether or not to enable anonymous login",
            "default": true
          }
        },
        "type": "object",
        "title": "AnonConfig"
      },
      "AppleConfig": {
        "properties": {
          "enable_login": {
            "type": "boolean",
            "title": "Enable Login",
            "description": "Whether or not to enable Apple logins",
            "default": true
          },
          "web_client_id": {
            "type": "string",
            "title": "Web Client Id",
            "description": "Apple web client ID. Client tokens are validated against this ID"
          },
          "web_auth_key_id": {
            "type": "string",
            "title": "Web Auth Key Id",
            "description": "Apple web auth key ID. Client tokens are validated against this ID"
          }
        },
        "type": "object",
        "required": [
          "web_client_id",
          "web_auth_key_id"
        ],
        "title": "AppleConfig"
      },
      "AuditComparisonResponse": {
        "properties": {
          "audit_id": {
            "type": "string",
            "format": "uuid",
            "title": "Audit Id"
          },
          "audit_ref_type": {
            "type": "string",
            "title": "Audit Ref Type"
          },
          "audit_ref_id": {
            "type": "string",
            "format": "uuid",
            "title": "Audit Ref Id"
          },
          "audit_path": {
            "type": "string",
            "title": "Audit Path"
          },
          "before": {
            "type": "string",
            "title": "Before"
          },
          "after": {
            "type": "string",
            "title": "After"
          },
          "account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Account Id"
          },
          "modified_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Modified Timestamp"
          }
        },
        "type": "object",
        "required": [
          "audit_id",
          "audit_ref_type",
          "audit_ref_id",
          "audit_path",
          "before",
          "after",
          "account_id",
          "modified_timestamp"
        ],
        "title": "AuditComparisonResponse"
      },
      "AuditPatchResponse": {
        "properties": {
          "audit_id": {
            "type": "string",
            "format": "uuid",
            "title": "Audit Id"
          },
          "audit_ref_type": {
            "type": "string",
            "title": "Audit Ref Type"
          },
          "audit_ref_id": {
            "type": "string",
            "format": "uuid",
            "title": "Audit Ref Id"
          },
          "audit_path": {
            "type": "string",
            "title": "Audit Path"
          },
          "patch": {
            "type": "string",
            "format": "json-string",
            "title": "Patch"
          },
          "account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Account Id"
          },
          "modified_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Modified Timestamp"
          }
        },
        "type": "object",
        "required": [
          "audit_id",
          "audit_ref_type",
          "audit_ref_id",
          "audit_path",
          "account_id",
          "modified_timestamp"
        ],
        "title": "AuditPatchResponse"
      },
      "BasicConfig": {
        "properties": {
          "enable_login": {
            "type": "boolean",
            "title": "Enable Login",
            "description": "Whether or not to enable basic logins",
            "default": true
          }
        },
        "type": "object",
        "title": "BasicConfig"
      },
      "ClientResponse": {
        "properties": {
          "client_id": {
            "type": "string",
            "format": "uuid",
            "title": "Client Id"
          },
          "client_secret": {
            "type": "string",
            "title": "Client Secret",
            "description": "Client secret. Note the value of the secret is returned only when the secret is first generated or the secret is rotated. "
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "policy": {
            "$ref": "#/components/schemas/PolicyResponse"
          },
          "description": {
            "type": "string",
            "title": "Description"
          }
        },
        "type": "object",
        "required": [
          "client_id",
          "name",
          "policy",
          "description"
        ],
        "title": "ClientResponse"
      },
      "ClientsListResponse": {
        "properties": {
          "clients": {
            "items": {
              "$ref": "#/components/schemas/ClientResponse"
            },
            "type": "array",
            "title": "Clients"
          }
        },
        "type": "object",
        "required": [
          "clients"
        ],
        "title": "ClientsListResponse"
      },
      "CommonConfigPartition": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "profiles": {
            "items": {
              "$ref": "#/components/schemas/CommonConfigProfile"
            },
            "type": "array",
            "title": "Profiles"
          }
        },
        "type": "object",
        "required": [
          "name",
          "profiles"
        ],
        "title": "CommonConfigPartition"
      },
      "CommonConfigPartitions": {
        "properties": {
          "partitions": {
            "items": {
              "$ref": "#/components/schemas/CommonConfigPartition"
            },
            "type": "array",
            "title": "Partitions"
          }
        },
        "type": "object",
        "required": [
          "partitions"
        ],
        "title": "CommonConfigPartitions"
      },
      "CommonConfigPool": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "tags": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Tags"
          }
        },
        "type": "object",
        "required": [
          "name",
          "tags"
        ],
        "title": "CommonConfigPool"
      },
      "CommonConfigProfile": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "pools": {
            "items": {
              "$ref": "#/components/schemas/CommonConfigPool"
            },
            "type": "array",
            "title": "Pools"
          }
        },
        "type": "object",
        "required": [
          "name",
          "pools"
        ],
        "title": "CommonConfigProfile"
      },
      "CommonConfigSessionTemplates": {
        "properties": {
          "templates": {
            "items": {
              "$ref": "#/components/schemas/SessionTemplateRequest"
            },
            "type": "array",
            "title": "Templates"
          }
        },
        "type": "object",
        "required": [
          "templates"
        ],
        "title": "CommonConfigSessionTemplates"
      },
      "ComparisonOperation": {
        "type": "string",
        "enum": [
          "eq",
          "ne",
          "lt",
          "le",
          "gt",
          "ge"
        ],
        "title": "ComparisonOperation",
        "description": "What comparison operation should be used when evaluating a rule",
        "x-enum-descriptions": [
          "What comparison operation should be used when evaluating a rule",
          "What comparison operation should be used when evaluating a rule",
          "What comparison operation should be used when evaluating a rule",
          "What comparison operation should be used when evaluating a rule",
          "What comparison operation should be used when evaluating a rule",
          "What comparison operation should be used when evaluating a rule"
        ],
        "x-enum-varnames": [
          "EQUAL",
          "NOT_EQUAL",
          "LESS_THAN",
          "LESS_THAN_EQUAL",
          "GREATER_THAN",
          "GREATER_THAN_EQUAL"
        ]
      },
      "CreateClientRequest": {
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "title": "Name",
            "description": "Client name"
          },
          "policy_id": {
            "type": "string",
            "format": "uuid",
            "title": "Policy Id",
            "description": "Policy ID to use for the client"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Client description"
          }
        },
        "type": "object",
        "required": [
          "name",
          "policy_id",
          "description"
        ],
        "title": "CreateClientRequest"
      },
      "CreateEntitlementSku": {
        "properties": {
          "custom_data": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data associated with the resource"
          },
          "name": {
            "type": "string",
            "maxLength": 125,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the resource"
          },
          "description": {
            "type": "string",
            "maxLength": 250,
            "minLength": 1,
            "title": "Description",
            "description": "Description of the resource"
          },
          "platform": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Platform"
              }
            ],
            "description": "The platform the Entitlement Sku is for."
          },
          "loot_entitlement": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LootEntitlement"
              }
            ],
            "title": "Loot Entitlement",
            "description": "The Loot Entitlement."
          },
          "external_key_entitlement": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalKeyEntitlement"
              }
            ],
            "title": "External Key Entitlement",
            "description": "The External Key Entitlement."
          },
          "sku": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "title": "Sku",
            "description": "The External SKU."
          }
        },
        "type": "object",
        "required": [
          "platform",
          "sku"
        ],
        "title": "CreateEntitlementSku",
        "description": "Entitlement Sku to create."
      },
      "CreateEntitlementSkuCollection": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/CreateEntitlementSku"
            },
            "type": "array",
            "minItems": 1,
            "title": "Data",
            "description": "The Entitlement Skus to create."
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "CreateEntitlementSkuCollection",
        "description": "A collection of Entitlement Skus to create."
      },
      "CreateExternalKeyCampaign": {
        "properties": {
          "custom_data": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data associated with the resource"
          },
          "name": {
            "type": "string",
            "maxLength": 125,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the resource"
          },
          "description": {
            "type": "string",
            "maxLength": 250,
            "minLength": 1,
            "title": "Description",
            "description": "Description of the resource"
          },
          "key_types": {
            "items": {
              "type": "string",
              "maxLength": 256,
              "minLength": 1
            },
            "type": "array",
            "title": "Key Types",
            "description": "The types of keys that can be distributed by this campaign.",
            "default": []
          }
        },
        "type": "object",
        "title": "CreateExternalKeyCampaign",
        "description": "External Key Campaign to create."
      },
      "CreateExternalKeyCampaignCollection": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/CreateExternalKeyCampaign"
            },
            "type": "array",
            "minItems": 1,
            "title": "Data",
            "description": "The External Key Campaigns to create."
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "CreateExternalKeyCampaignCollection",
        "description": "A collection of External Key Campaigns to create."
      },
      "CreateInventoryBucketUseRuleSet": {
        "properties": {
          "custom_data": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data associated with the resource"
          },
          "name": {
            "type": "string",
            "maxLength": 125,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the resource"
          },
          "description": {
            "type": "string",
            "maxLength": 250,
            "minLength": 1,
            "title": "Description",
            "description": "Description of the resource"
          },
          "rules": {
            "additionalProperties": {
              "items": {
                "$ref": "#/components/schemas/InventoryBucket"
              },
              "type": "array"
            },
            "type": "object",
            "title": "Rules",
            "description": "The Inventory Bucket Use Rules by Inventory Bucket.",
            "default": {}
          },
          "legacy_rule_set_id": {
            "type": "integer",
            "minimum": 0,
            "title": "Legacy Rule Set Id",
            "description": "The Legacy Inventory Bucket Use Rule Set ID.",
            "default": 0
          }
        },
        "type": "object",
        "title": "CreateInventoryBucketUseRuleSet",
        "description": "A collection of Inventory Bucket Use Rules to create."
      },
      "CreateInventoryBucketUseRuleSetCollection": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/CreateInventoryBucketUseRuleSet"
            },
            "type": "array",
            "minItems": 1,
            "title": "Data",
            "description": "The Inventory Bucket Use Rule Sets."
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "CreateInventoryBucketUseRuleSetCollection",
        "description": "A collection of Inventory Bucket Use Rule Sets to create."
      },
      "CreateItemCollection": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/CreateItemRequest"
            },
            "type": "array",
            "minItems": 1,
            "title": "Data",
            "description": "The Items."
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "CreateItemCollection",
        "description": "A collection of Create Item Requests."
      },
      "CreateItemRequest": {
        "properties": {
          "custom_data": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data associated with the resource"
          },
          "name": {
            "type": "string",
            "maxLength": 125,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the resource"
          },
          "description": {
            "type": "string",
            "maxLength": 250,
            "minLength": 1,
            "title": "Description",
            "description": "Description of the resource"
          },
          "item_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ItemType"
              }
            ],
            "description": "The type of item.",
            "default": "unit"
          },
          "entitled_loot_id": {
            "type": "string",
            "format": "uuid",
            "title": "Entitled Loot Id",
            "description": "This is only valid for an entitlement Item. When this item is granted and Inventory Session creation, this is the Loot ID that will be fulfilled."
          },
          "level_xp_table_id": {
            "type": "string",
            "format": "uuid",
            "title": "Level Xp Table Id",
            "description": "The XP Table that is used to determine the Player's level for this XP. The level increase occurs when the quantity of this Item increases above the minimum XP of an XP Level. This is only valid for an unit Item."
          },
          "level_vendor_id": {
            "type": "string",
            "format": "uuid",
            "title": "Level Vendor Id",
            "description": "The vendor containing the rewards to grant to the player as they level up.  If a `level_xp_table_id` is configured, when this item is granted to a player their quantity is converted to a level using that table and rewards are granted based on the `sort_order` of loot inside this reward vendor.  If there is no `level_xp_table_id` configured, the quantity is used to select loot to grant from this reward vendor.  This is only valid for an unit Item."
          },
          "inventory_bucket_use_rule_set_id": {
            "type": "string",
            "format": "uuid",
            "title": "Inventory Bucket Use Rule Set Id",
            "description": "The Inventory Bucket Use Rule Set ID that determines how this item can be used across buckets."
          },
          "coupon_discount_percentage": {
            "type": "number",
            "maximum": 1,
            "exclusiveMinimum": 0,
            "title": "Coupon Discount Percentage",
            "description": "The amount the price is discounted. This is a percentage between 0 and 1. For example, 0.25 would be a 25% discount."
          },
          "coupon_consume_on_use": {
            "type": "boolean",
            "title": "Coupon Consume On Use",
            "description": "If true, the coupon will be consumed when used by decreasing the quantity in the Player's Inventory by 1. If false, the coupon will remain in the Player's inventory after use."
          },
          "coupon_discount_loot": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array",
            "minItems": 0,
            "title": "Coupon Discount Loot",
            "description": "List of Loot IDs this item can discount",
            "default": []
          },
          "coupon_discount_currency_item_name": {
            "type": "string",
            "title": "Coupon Discount Currency Item Name",
            "description": "Name of corresponding currency Item ID "
          },
          "coupon_discount_currency_item_id": {
            "type": "string",
            "format": "uuid",
            "title": "Coupon Discount Currency Item Id",
            "description": "The Item ID of the currency to be used for the coupon."
          },
          "legacy_item_id": {
            "type": "integer",
            "minimum": 0,
            "title": "Legacy Item Id",
            "description": "The Legacy Item ID.",
            "default": 0
          }
        },
        "type": "object",
        "title": "CreateItemRequest",
        "description": "Create a new Item entity."
      },
      "CreateLootCollection": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/CreateLootRequest"
            },
            "type": "array",
            "minItems": 1,
            "title": "Data",
            "description": "The Loot."
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "CreateLootCollection",
        "description": "A collection of Create Loot Requests."
      },
      "CreateLootRequest": {
        "properties": {
          "custom_data": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data associated with the resource"
          },
          "name": {
            "type": "string",
            "maxLength": 125,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the resource"
          },
          "description": {
            "type": "string",
            "maxLength": 250,
            "minLength": 1,
            "title": "Description",
            "description": "Description of the resource"
          },
          "item_id": {
            "type": "string",
            "format": "uuid",
            "title": "Item Id",
            "description": "The Item ID. Optional Item that will be granted to the player if Sub Vendor ID is not specified."
          },
          "sub_vendor_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sub Vendor Id",
            "description": "The Sub Vendor ID. Optional Vendor ID that will be used to fulfill the Loot instead of granting the Item."
          },
          "quantity": {
            "type": "integer",
            "title": "Quantity",
            "description": "The quantity of the Item or Sub Vendor to fulfill. This will be multiplied by the quantity of fulfilled Loot and the parent Loot if quantity_type is relative.",
            "default": 1
          },
          "inventory_selector_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InventorySelector"
              }
            ],
            "description": "The Inventory Selector Type. Determine how the Inventory is selected and quantity is modified."
          },
          "inventory_operation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InventoryOperation"
              }
            ],
            "description": "The Inventory Operation. Determine how the Loot quantity is modified based on the context it is fulfilled in. This also determines the order Loot will be fulfilled in when sort_order is the same."
          },
          "active": {
            "type": "boolean",
            "title": "Active",
            "description": "Determines if the Loot is active. Inactive Loot will not be fulfilled.",
            "default": false
          },
          "sort_order": {
            "type": "integer",
            "minimum": 0,
            "title": "Sort Order",
            "description": "The sort order of the Loot. Lower sort order will be fulfilled first. Inventory Operation is used as a tie breaker when sort_order is the same.",
            "default": 0
          },
          "drop_weight": {
            "type": "integer",
            "minimum": 0,
            "title": "Drop Weight",
            "description": "The drop weight of the Loot. Higher drop weight will be more likely to be fulfilled.",
            "default": 0
          },
          "fill_in_new_order": {
            "type": "boolean",
            "title": "Fill In New Order",
            "description": "When dropped in a randomly sampled vendor, will this create a new order or fill inline?. The primary use case for this is when you want the same loot to be dropped multiple times in a randomly sampled vendor.",
            "default": false
          },
          "allow_partial_bundles": {
            "type": "boolean",
            "title": "Allow Partial Bundles",
            "description": "When dropped in a randomly sampled vendor, will the sub vendor allow dropping part of the the bundle?  False means it will only drop if the entire sub vendor can be given to the player",
            "default": true
          },
          "required_item_id": {
            "type": "string",
            "format": "uuid",
            "title": "Required Item Id",
            "description": "Item required to be owned/rented to drop this Loot in a randomly sampled vendor"
          },
          "required_item_count": {
            "type": "integer",
            "minimum": 0,
            "title": "Required Item Count",
            "description": "Amount of the required_item_id to be owned/rented to drop this Loot in a randomly sampled vendor",
            "default": 0
          },
          "stack_limit": {
            "type": "integer",
            "minimum": 0,
            "title": "Stack Limit",
            "description": "Amount of owned/rented of this Loot's item that will prevent this Loot from dropping in a randomly sampled vendor",
            "default": 0
          },
          "quantity_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/QuantityType"
              }
            ],
            "description": "Determines how the quantity is modified in the context it is fulfilled in.",
            "default": "relative"
          },
          "quantity_multi_inventory_item_id": {
            "type": "string",
            "format": "uuid",
            "title": "Quantity Multi Inventory Item Id",
            "description": "When fulfilling Loot if this is set the quantity will be multiplied by the quantity of this Item in the Player's Inventory."
          },
          "is_claimable_by_client": {
            "type": "boolean",
            "title": "Is Claimable By Client",
            "description": "Determines if the Loot can be claimed by the client. This is dangerous without the correct loot confiuration as a client could claim Loot multiple times.",
            "default": false
          },
          "time_frame_id": {
            "type": "string",
            "format": "uuid",
            "title": "Time Frame Id",
            "description": "The Time Frame ID. Optional Time Frame ID that will be used the expiration of Loot when it is fulfilled."
          },
          "use_inventory_bucket": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InventoryBucket"
              }
            ],
            "description": "Inventory Bucket to use for this Loot."
          },
          "xp_quantity_transform_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/XpQuantityTransform"
              }
            ],
            "description": "Allows treating quantity as additional levels to grant to the Player.",
            "default": "none"
          },
          "current_price_point_id": {
            "type": "string",
            "format": "uuid",
            "title": "Current Price Point Id",
            "description": "The current price point id. Optional Price Point ID that will be used to determine the price of the Loot when it is fulfilled."
          },
          "pre_sale_price_point_id": {
            "type": "string",
            "format": "uuid",
            "title": "Pre Sale Price Point Id",
            "description": "The pre sale price point id. Optional Price Point ID that will be used to show the previous price of the Loot."
          },
          "hard_quantity_maximum": {
            "type": "integer",
            "minimum": 0,
            "title": "Hard Quantity Maximum",
            "description": "Hard cap on quantity of an item this Loot can give. Disabled with 0",
            "default": 0
          },
          "vendor_id": {
            "type": "string",
            "format": "uuid",
            "title": "Vendor Id",
            "description": "The Vendor ID"
          },
          "legacy_loot_id": {
            "type": "integer",
            "minimum": 0,
            "title": "Legacy Loot Id",
            "description": "The legacy ID of the Loot.",
            "default": 0
          }
        },
        "type": "object",
        "required": [
          "inventory_selector_type",
          "inventory_operation",
          "vendor_id"
        ],
        "title": "CreateLootRequest",
        "description": "Create a new Loot entity."
      },
      "CreateLootWithVendorRequest": {
        "properties": {
          "custom_data": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data associated with the resource"
          },
          "name": {
            "type": "string",
            "maxLength": 125,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the resource"
          },
          "description": {
            "type": "string",
            "maxLength": 250,
            "minLength": 1,
            "title": "Description",
            "description": "Description of the resource"
          },
          "item_id": {
            "type": "string",
            "format": "uuid",
            "title": "Item Id",
            "description": "The Item ID. Optional Item that will be granted to the player if Sub Vendor ID is not specified."
          },
          "sub_vendor_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sub Vendor Id",
            "description": "The Sub Vendor ID. Optional Vendor ID that will be used to fulfill the Loot instead of granting the Item."
          },
          "quantity": {
            "type": "integer",
            "title": "Quantity",
            "description": "The quantity of the Item or Sub Vendor to fulfill. This will be multiplied by the quantity of fulfilled Loot and the parent Loot if quantity_type is relative.",
            "default": 1
          },
          "inventory_selector_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InventorySelector"
              }
            ],
            "description": "The Inventory Selector Type. Determine how the Inventory is selected and quantity is modified."
          },
          "inventory_operation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InventoryOperation"
              }
            ],
            "description": "The Inventory Operation. Determine how the Loot quantity is modified based on the context it is fulfilled in. This also determines the order Loot will be fulfilled in when sort_order is the same."
          },
          "active": {
            "type": "boolean",
            "title": "Active",
            "description": "Determines if the Loot is active. Inactive Loot will not be fulfilled.",
            "default": false
          },
          "sort_order": {
            "type": "integer",
            "minimum": 0,
            "title": "Sort Order",
            "description": "The sort order of the Loot. Lower sort order will be fulfilled first. Inventory Operation is used as a tie breaker when sort_order is the same.",
            "default": 0
          },
          "drop_weight": {
            "type": "integer",
            "minimum": 0,
            "title": "Drop Weight",
            "description": "The drop weight of the Loot. Higher drop weight will be more likely to be fulfilled.",
            "default": 0
          },
          "fill_in_new_order": {
            "type": "boolean",
            "title": "Fill In New Order",
            "description": "When dropped in a randomly sampled vendor, will this create a new order or fill inline?. The primary use case for this is when you want the same loot to be dropped multiple times in a randomly sampled vendor.",
            "default": false
          },
          "allow_partial_bundles": {
            "type": "boolean",
            "title": "Allow Partial Bundles",
            "description": "When dropped in a randomly sampled vendor, will the sub vendor allow dropping part of the the bundle?  False means it will only drop if the entire sub vendor can be given to the player",
            "default": true
          },
          "required_item_id": {
            "type": "string",
            "format": "uuid",
            "title": "Required Item Id",
            "description": "Item required to be owned/rented to drop this Loot in a randomly sampled vendor"
          },
          "required_item_count": {
            "type": "integer",
            "minimum": 0,
            "title": "Required Item Count",
            "description": "Amount of the required_item_id to be owned/rented to drop this Loot in a randomly sampled vendor",
            "default": 0
          },
          "stack_limit": {
            "type": "integer",
            "minimum": 0,
            "title": "Stack Limit",
            "description": "Amount of owned/rented of this Loot's item that will prevent this Loot from dropping in a randomly sampled vendor",
            "default": 0
          },
          "quantity_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/QuantityType"
              }
            ],
            "description": "Determines how the quantity is modified in the context it is fulfilled in.",
            "default": "relative"
          },
          "quantity_multi_inventory_item_id": {
            "type": "string",
            "format": "uuid",
            "title": "Quantity Multi Inventory Item Id",
            "description": "When fulfilling Loot if this is set the quantity will be multiplied by the quantity of this Item in the Player's Inventory."
          },
          "is_claimable_by_client": {
            "type": "boolean",
            "title": "Is Claimable By Client",
            "description": "Determines if the Loot can be claimed by the client. This is dangerous without the correct loot confiuration as a client could claim Loot multiple times.",
            "default": false
          },
          "time_frame_id": {
            "type": "string",
            "format": "uuid",
            "title": "Time Frame Id",
            "description": "The Time Frame ID. Optional Time Frame ID that will be used the expiration of Loot when it is fulfilled."
          },
          "use_inventory_bucket": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InventoryBucket"
              }
            ],
            "description": "Inventory Bucket to use for this Loot."
          },
          "xp_quantity_transform_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/XpQuantityTransform"
              }
            ],
            "description": "Allows treating quantity as additional levels to grant to the Player.",
            "default": "none"
          },
          "current_price_point_id": {
            "type": "string",
            "format": "uuid",
            "title": "Current Price Point Id",
            "description": "The current price point id. Optional Price Point ID that will be used to determine the price of the Loot when it is fulfilled."
          },
          "pre_sale_price_point_id": {
            "type": "string",
            "format": "uuid",
            "title": "Pre Sale Price Point Id",
            "description": "The pre sale price point id. Optional Price Point ID that will be used to show the previous price of the Loot."
          },
          "hard_quantity_maximum": {
            "type": "integer",
            "minimum": 0,
            "title": "Hard Quantity Maximum",
            "description": "Hard cap on quantity of an item this Loot can give. Disabled with 0",
            "default": 0
          },
          "legacy_loot_id": {
            "type": "integer",
            "minimum": 0,
            "title": "Legacy Loot Id",
            "description": "The legacy ID of the Loot.",
            "default": 0
          }
        },
        "type": "object",
        "required": [
          "inventory_selector_type",
          "inventory_operation"
        ],
        "title": "CreateLootWithVendorRequest",
        "description": "Create an existing Loot entity while creating a Vendor"
      },
      "CreatePricePoint": {
        "properties": {
          "custom_data": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data associated with the resource"
          },
          "name": {
            "type": "string",
            "maxLength": 125,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the resource"
          },
          "description": {
            "type": "string",
            "maxLength": 250,
            "minLength": 1,
            "title": "Description",
            "description": "Description of the resource"
          },
          "strict_flag": {
            "type": "boolean",
            "title": "Strict Flag",
            "description": "Forces the quantity to be equal to a quantity on a Price Breakpoint.",
            "default": false
          },
          "cap_flag": {
            "type": "boolean",
            "title": "Cap Flag",
            "description": "Only allows quantity to be fulfilled up the highest quantity on the Price Breakpoints",
            "default": false
          },
          "current_breakpoints": {
            "items": {
              "$ref": "#/components/schemas/PriceBreakpoint"
            },
            "type": "array",
            "title": "Current Breakpoints",
            "description": "Current Price Breakpoints.",
            "default": []
          },
          "pre_sale_breakpoints": {
            "items": {
              "$ref": "#/components/schemas/PriceBreakpoint"
            },
            "type": "array",
            "title": "Pre Sale Breakpoints",
            "description": "Previous Price Breakpoints.",
            "default": []
          }
        },
        "type": "object",
        "title": "CreatePricePoint",
        "description": "Price Point to create."
      },
      "CreatePricePointCollection": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/CreatePricePoint"
            },
            "type": "array",
            "minItems": 1,
            "title": "Data",
            "description": "The Price Points to create."
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "CreatePricePointCollection",
        "description": "A collection of Price Points to create."
      },
      "CreateVendorCollection": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/CreateVendorRequest"
            },
            "type": "array",
            "minItems": 1,
            "title": "Data",
            "description": "The Vendors."
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "CreateVendorCollection",
        "description": "A collection of Loot."
      },
      "CreateVendorRequest": {
        "properties": {
          "custom_data": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data associated with the resource"
          },
          "name": {
            "type": "string",
            "maxLength": 125,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the resource"
          },
          "description": {
            "type": "string",
            "maxLength": 250,
            "minLength": 1,
            "title": "Description",
            "description": "Description of the resource"
          },
          "vendor_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VendorType"
              }
            ],
            "description": "Determines how the Vendor fulfills the loot.",
            "default": "recipe"
          },
          "loot": {
            "items": {
              "$ref": "#/components/schemas/CreateLootWithVendorRequest"
            },
            "type": "array",
            "title": "Loot",
            "description": "The Loot the Vendor will fulfill.",
            "default": []
          },
          "legacy_vendor_id": {
            "type": "integer",
            "minimum": 0,
            "title": "Legacy Vendor Id",
            "description": "The legacy ID of the Vendor.",
            "default": 0
          }
        },
        "type": "object",
        "title": "CreateVendorRequest",
        "description": "If loot is provided, it will do a full replace of all loot entries on the Vendor."
      },
      "CreateXpCollection": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/CreateXpRequest"
            },
            "type": "array",
            "minItems": 1,
            "title": "Data",
            "description": "The Xp to create."
          }
        },
        "type": "object",
        "required": [
          "data"
        ],
        "title": "CreateXpCollection",
        "description": "A collection of Xp to create."
      },
      "CreateXpRequest": {
        "properties": {
          "custom_data": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data associated with the resource"
          },
          "name": {
            "type": "string",
            "maxLength": 125,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the resource"
          },
          "description": {
            "type": "string",
            "maxLength": 250,
            "minLength": 1,
            "title": "Description",
            "description": "Description of the resource"
          },
          "xp_thresholds": {
            "items": {
              "$ref": "#/components/schemas/XpLevelThresholdRequest"
            },
            "type": "array",
            "title": "Xp Thresholds",
            "description": "The XP Thresholds.",
            "default": []
          },
          "legacy_xp_id": {
            "type": "integer",
            "minimum": 0,
            "title": "Legacy Xp Id",
            "description": "The legacy ID of the XP.",
            "default": 0
          }
        },
        "type": "object",
        "title": "CreateXpRequest",
        "description": "A request to create XP."
      },
      "CrossplayPartition": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Name",
            "description": "Readable name for this CrossplayPartition"
          },
          "enabled": {
            "type": "boolean",
            "title": "Enabled",
            "description": "Whether or not this partition is enabled and can be used",
            "default": true
          },
          "sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sandbox Id",
            "description": "ID of the Sandbox"
          },
          "last_modified_account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Last Modified Account Id",
            "description": "Account ID of the user who last modified the resource"
          },
          "last_modified_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified Timestamp",
            "description": "Timestamp of when the resource was last modified"
          },
          "created_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Created Timestamp",
            "description": "Timestamp of when this resource was created"
          },
          "crossplay_partition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Crossplay Partition Id",
            "description": "ID to uniquely identify this CrossplayPartition"
          }
        },
        "type": "object",
        "required": [
          "crossplay_partition_id"
        ],
        "title": "CrossplayPartition"
      },
      "CrossplayPartitionRequest": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Name",
            "description": "Readable name for this CrossplayPartition"
          },
          "enabled": {
            "type": "boolean",
            "title": "Enabled",
            "description": "Whether or not this partition is enabled and can be used",
            "default": true
          }
        },
        "type": "object",
        "title": "CrossplayPartitionRequest"
      },
      "CrossplayPool": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Name",
            "description": "Readable name for this CrossplayPool"
          },
          "crossplay_profile_id": {
            "type": "string",
            "format": "uuid",
            "title": "Crossplay Profile Id",
            "description": "Which CrossplayProfile this CrossplayPool belongs to"
          },
          "sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sandbox Id",
            "description": "ID of the Sandbox"
          },
          "last_modified_account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Last Modified Account Id",
            "description": "Account ID of the user who last modified the resource"
          },
          "last_modified_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified Timestamp",
            "description": "Timestamp of when the resource was last modified"
          },
          "created_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Created Timestamp",
            "description": "Timestamp of when this resource was created"
          },
          "crossplay_pool_id": {
            "type": "string",
            "format": "uuid",
            "title": "Crossplay Pool Id",
            "description": "ID to uniquely identify this CrossplayPool"
          }
        },
        "type": "object",
        "required": [
          "crossplay_profile_id",
          "crossplay_pool_id"
        ],
        "title": "CrossplayPool"
      },
      "CrossplayPoolRequest": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Name",
            "description": "Readable name for this CrossplayPool"
          },
          "crossplay_profile_id": {
            "type": "string",
            "format": "uuid",
            "title": "Crossplay Profile Id",
            "description": "Which CrossplayProfile this CrossplayPool belongs to"
          }
        },
        "type": "object",
        "required": [
          "crossplay_profile_id"
        ],
        "title": "CrossplayPoolRequest"
      },
      "CrossplayPoolTag": {
        "properties": {
          "tag": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Tag",
            "description": "The open-match tag to be added to the specific pool"
          },
          "crossplay_pool_id": {
            "type": "string",
            "format": "uuid",
            "title": "Crossplay Pool Id",
            "description": "Which CrossplayPool this CrossplayPoolTag belongs to"
          },
          "sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sandbox Id",
            "description": "ID of the Sandbox"
          },
          "last_modified_account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Last Modified Account Id",
            "description": "Account ID of the user who last modified the resource"
          },
          "last_modified_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified Timestamp",
            "description": "Timestamp of when the resource was last modified"
          },
          "created_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Created Timestamp",
            "description": "Timestamp of when this resource was created"
          },
          "crossplay_pool_tag_id": {
            "type": "string",
            "format": "uuid",
            "title": "Crossplay Pool Tag Id",
            "description": "ID to uniquely identify this CrossplayPoolTag"
          }
        },
        "type": "object",
        "required": [
          "tag",
          "crossplay_pool_id",
          "crossplay_pool_tag_id"
        ],
        "title": "CrossplayPoolTag"
      },
      "CrossplayPoolTagRequest": {
        "properties": {
          "tag": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Tag",
            "description": "The open-match tag to be added to the specific pool"
          },
          "crossplay_pool_id": {
            "type": "string",
            "format": "uuid",
            "title": "Crossplay Pool Id",
            "description": "Which CrossplayPool this CrossplayPoolTag belongs to"
          }
        },
        "type": "object",
        "required": [
          "tag",
          "crossplay_pool_id"
        ],
        "title": "CrossplayPoolTagRequest"
      },
      "CrossplayPoolTagUpdateRequest": {
        "properties": {
          "tag": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Tag",
            "description": "The open-match tag to be added to the specific pool"
          },
          "crossplay_pool_id": {
            "type": "string",
            "format": "uuid",
            "title": "Crossplay Pool Id",
            "description": "Which CrossplayPool this CrossplayPoolTag belongs to"
          }
        },
        "type": "object",
        "title": "CrossplayPoolTagUpdateRequest"
      },
      "CrossplayPoolUpdateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Name",
            "description": "Readable name for this CrossplayPool"
          },
          "crossplay_profile_id": {
            "type": "string",
            "format": "uuid",
            "title": "Crossplay Profile Id",
            "description": "Which CrossplayProfile this CrossplayPool belongs to"
          }
        },
        "type": "object",
        "title": "CrossplayPoolUpdateRequest"
      },
      "CrossplayProfile": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Name",
            "description": "Readable name for this CrossplayProfile"
          },
          "crossplay_partition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Crossplay Partition Id",
            "description": "Which CrossplayPartition this CrossplayProfile belongs to"
          },
          "sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sandbox Id",
            "description": "ID of the Sandbox"
          },
          "last_modified_account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Last Modified Account Id",
            "description": "Account ID of the user who last modified the resource"
          },
          "last_modified_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified Timestamp",
            "description": "Timestamp of when the resource was last modified"
          },
          "created_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Created Timestamp",
            "description": "Timestamp of when this resource was created"
          },
          "crossplay_profile_id": {
            "type": "string",
            "format": "uuid",
            "title": "Crossplay Profile Id",
            "description": "ID to uniquely identify this CrossplayProfile"
          }
        },
        "type": "object",
        "required": [
          "crossplay_partition_id",
          "crossplay_profile_id"
        ],
        "title": "CrossplayProfile"
      },
      "CrossplayProfileRequest": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Name",
            "description": "Readable name for this CrossplayProfile"
          },
          "crossplay_partition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Crossplay Partition Id",
            "description": "Which CrossplayPartition this CrossplayProfile belongs to"
          }
        },
        "type": "object",
        "required": [
          "crossplay_partition_id"
        ],
        "title": "CrossplayProfileRequest"
      },
      "CrossplayProfileUpdateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Name",
            "description": "Readable name for this CrossplayProfile"
          },
          "crossplay_partition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Crossplay Partition Id",
            "description": "Which CrossplayPartition this CrossplayProfile belongs to"
          }
        },
        "type": "object",
        "title": "CrossplayProfileUpdateRequest"
      },
      "CustomEndpoint": {
        "properties": {
          "last_modified_account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Last Modified Account Id",
            "description": "Account ID of the user who last modified the resource"
          },
          "last_modified_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified Timestamp",
            "description": "Timestamp of when the resource was last modified"
          },
          "created_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Created Timestamp",
            "description": "Timestamp of when the resource was created"
          },
          "sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sandbox Id",
            "description": "ID of the Sandbox"
          },
          "name": {
            "type": "string",
            "maxLength": 125,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the resource"
          },
          "description": {
            "type": "string",
            "maxLength": 250,
            "minLength": 1,
            "title": "Description",
            "description": "Description of the resource"
          },
          "custom_endpoint_unique_id": {
            "type": "string",
            "format": "uuid",
            "title": "Custom Endpoint Unique Id",
            "description": "Unique identifier for this custom endpoint",
            "default": "5eaa7239-b5cc-4347-8a63-9e0adf706db5"
          },
          "endpoint_id": {
            "type": "string",
            "minLength": 1,
            "title": "Endpoint Id",
            "description": "The customer defined identifier for this endpoint"
          },
          "url": {
            "type": "string",
            "minLength": 1,
            "title": "Url",
            "description": "User friendly identifier of setting type"
          },
          "http_verb": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HttpVerb"
              }
            ],
            "description": "HTTP verb to use when calling the custom endpoint",
            "default": "GET"
          },
          "custom_headers": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Custom Headers",
            "description": "Custom headers to be passed to the endpoint"
          }
        },
        "type": "object",
        "required": [
          "endpoint_id",
          "url"
        ],
        "title": "CustomEndpoint",
        "description": "This mixin is meant to give a set of common properties to root config models"
      },
      "CustomEndpointCreate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 125,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the resource"
          },
          "description": {
            "type": "string",
            "maxLength": 250,
            "minLength": 1,
            "title": "Description",
            "description": "Description of the resource"
          },
          "custom_endpoint_unique_id": {
            "type": "string",
            "format": "uuid",
            "title": "Custom Endpoint Unique Id",
            "description": "Unique identifier for this custom endpoint",
            "default": "5eaa7239-b5cc-4347-8a63-9e0adf706db5"
          },
          "endpoint_id": {
            "type": "string",
            "minLength": 1,
            "title": "Endpoint Id",
            "description": "The customer defined identifier for this endpoint"
          },
          "url": {
            "type": "string",
            "minLength": 1,
            "title": "Url",
            "description": "User friendly identifier of setting type"
          },
          "http_verb": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HttpVerb"
              }
            ],
            "description": "HTTP verb to use when calling the custom endpoint",
            "default": "GET"
          },
          "custom_headers": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Custom Headers",
            "description": "Custom headers to be passed to the endpoint"
          }
        },
        "type": "object",
        "required": [
          "endpoint_id",
          "url"
        ],
        "title": "CustomEndpointCreate",
        "description": "This mixin is meant to give a set of common properties to root config models"
      },
      "CustomEndpointUpdate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 125,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the resource"
          },
          "description": {
            "type": "string",
            "maxLength": 250,
            "minLength": 1,
            "title": "Description",
            "description": "Description of the resource"
          },
          "url": {
            "type": "string",
            "minLength": 1,
            "title": "Url",
            "description": "User friendly identifier of setting type"
          },
          "http_verb": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HttpVerb"
              }
            ],
            "description": "HTTP verb to use when calling the custom endpoint",
            "default": "GET"
          },
          "custom_headers": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Custom Headers",
            "description": "Custom headers to be passed to the endpoint"
          }
        },
        "type": "object",
        "required": [
          "url"
        ],
        "title": "CustomEndpointUpdate",
        "description": "This mixin is meant to give a set of common properties to root config models"
      },
      "DatacenterContract": {
        "properties": {
          "start_date": {
            "type": "string",
            "format": "date-time",
            "title": "Time Zone Aware Datetime",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
          },
          "end_date": {
            "type": "string",
            "format": "date-time",
            "title": "Time Zone Aware Datetime",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
          },
          "cancel_date": {
            "type": "string",
            "format": "date-time",
            "title": "Time Zone Aware Datetime",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
          },
          "period_days": {
            "type": "integer",
            "title": "Period Days",
            "description": "The number of days in the contract period"
          },
          "extend_period_days": {
            "type": "integer",
            "title": "Extend Period Days",
            "description": "The service extend period in days"
          },
          "notice_days": {
            "type": "integer",
            "title": "Notice Days",
            "description": "The number of days notice required to cancel the contract"
          },
          "purchase_order": {
            "type": "string",
            "minLength": 1,
            "title": "Purchase Order",
            "description": "The purchase order number or description for the contract"
          },
          "payment_term_days": {
            "type": "integer",
            "title": "Payment Term Days",
            "description": "The number of days after the invoice is sent that payment is due"
          },
          "hosts": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array",
            "title": "Hosts",
            "description": "The IDs of the hosts this contract is associated with"
          },
          "datacenter_contract_id": {
            "type": "string",
            "format": "uuid",
            "title": "Datacenter Contract Id"
          }
        },
        "type": "object",
        "required": [
          "datacenter_contract_id"
        ],
        "title": "DatacenterContract"
      },
      "DatacenterContractCreate": {
        "properties": {
          "start_date": {
            "type": "string",
            "format": "date-time",
            "title": "Time Zone Aware Datetime",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
          },
          "end_date": {
            "type": "string",
            "format": "date-time",
            "title": "Time Zone Aware Datetime",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
          },
          "cancel_date": {
            "type": "string",
            "format": "date-time",
            "title": "Time Zone Aware Datetime",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
          },
          "period_days": {
            "type": "integer",
            "title": "Period Days",
            "description": "The number of days in the contract period"
          },
          "extend_period_days": {
            "type": "integer",
            "title": "Extend Period Days",
            "description": "The service extend period in days"
          },
          "notice_days": {
            "type": "integer",
            "title": "Notice Days",
            "description": "The number of days notice required to cancel the contract"
          },
          "purchase_order": {
            "type": "string",
            "minLength": 1,
            "title": "Purchase Order",
            "description": "The purchase order number or description for the contract"
          },
          "payment_term_days": {
            "type": "integer",
            "title": "Payment Term Days",
            "description": "The number of days after the invoice is sent that payment is due"
          },
          "hosts": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array",
            "title": "Hosts",
            "description": "The IDs of the hosts this contract is associated with"
          }
        },
        "type": "object",
        "title": "DatacenterContractCreate"
      },
      "DatacenterContractUpdate": {
        "properties": {
          "start_date": {
            "type": "string",
            "format": "date-time",
            "title": "Time Zone Aware Datetime",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
          },
          "end_date": {
            "type": "string",
            "format": "date-time",
            "title": "Time Zone Aware Datetime",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
          },
          "cancel_date": {
            "type": "string",
            "format": "date-time",
            "title": "Time Zone Aware Datetime",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
          },
          "period_days": {
            "type": "integer",
            "title": "Period Days",
            "description": "The number of days in the contract period"
          },
          "extend_period_days": {
            "type": "integer",
            "title": "Extend Period Days",
            "description": "The service extend period in days"
          },
          "notice_days": {
            "type": "integer",
            "title": "Notice Days",
            "description": "The number of days notice required to cancel the contract"
          },
          "purchase_order": {
            "type": "string",
            "minLength": 1,
            "title": "Purchase Order",
            "description": "The purchase order number or description for the contract"
          },
          "payment_term_days": {
            "type": "integer",
            "title": "Payment Term Days",
            "description": "The number of days after the invoice is sent that payment is due"
          },
          "hosts": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array",
            "title": "Hosts",
            "description": "The IDs of the hosts this contract is associated with"
          }
        },
        "type": "object",
        "title": "DatacenterContractUpdate"
      },
      "DatacenterContractVersionsAndTransactions": {
        "properties": {
          "versions": {
            "items": {
              "$ref": "#/components/schemas/DatacenterContract"
            },
            "type": "array",
            "title": "Versions"
          },
          "transactions": {
            "items": {
              "$ref": "#/components/schemas/Transaction"
            },
            "type": "array",
            "title": "Transactions"
          }
        },
        "type": "object",
        "required": [
          "versions",
          "transactions"
        ],
        "title": "DatacenterContractVersionsAndTransactions"
      },
      "DatacenterLocation": {
        "properties": {
          "description": {
            "type": "string",
            "minLength": 1,
            "title": "Description",
            "description": "Which datacenter region this is in using the language of the provider. Could be things like us-east-1, us-west-2, etc."
          },
          "datacenter_location_id": {
            "type": "string",
            "format": "uuid",
            "title": "Datacenter Location Id"
          }
        },
        "type": "object",
        "required": [
          "description",
          "datacenter_location_id"
        ],
        "title": "DatacenterLocation"
      },
      "DatacenterLocationCreate": {
        "properties": {
          "description": {
            "type": "string",
            "minLength": 1,
            "title": "Description",
            "description": "Which datacenter region this is in using the language of the provider. Could be things like us-east-1, us-west-2, etc."
          }
        },
        "type": "object",
        "required": [
          "description"
        ],
        "title": "DatacenterLocationCreate"
      },
      "DatacenterLocationUpdate": {
        "properties": {
          "description": {
            "type": "string",
            "minLength": 1,
            "title": "Description",
            "description": "Which datacenter region this is in using the language of the provider. Could be things like us-east-1, us-west-2, etc."
          }
        },
        "type": "object",
        "required": [
          "description"
        ],
        "title": "DatacenterLocationUpdate"
      },
      "DatacenterLocationVersionsAndTransactions": {
        "properties": {
          "versions": {
            "items": {
              "$ref": "#/components/schemas/DatacenterLocation"
            },
            "type": "array",
            "title": "Versions"
          },
          "transactions": {
            "items": {
              "$ref": "#/components/schemas/Transaction"
            },
            "type": "array",
            "title": "Transactions"
          }
        },
        "type": "object",
        "required": [
          "versions",
          "transactions"
        ],
        "title": "DatacenterLocationVersionsAndTransactions"
      },
      "DatacenterProvider": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the provider of this sort. Could be things like Amazon, AWS EC2, Internap."
          },
          "datacenter_provider_id": {
            "type": "string",
            "format": "uuid",
            "title": "Datacenter Provider Id"
          }
        },
        "type": "object",
        "required": [
          "name",
          "datacenter_provider_id"
        ],
        "title": "DatacenterProvider"
      },
      "DatacenterProviderCreate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the provider of this sort. Could be things like Amazon, AWS EC2, Internap."
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "DatacenterProviderCreate"
      },
      "DatacenterProviderUpdate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the provider of this sort. Could be things like Amazon, AWS EC2, Internap."
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "DatacenterProviderUpdate"
      },
      "DatacenterProviderVersionsAndTransactions": {
        "properties": {
          "versions": {
            "items": {
              "$ref": "#/components/schemas/DatacenterProvider"
            },
            "type": "array",
            "title": "Versions"
          },
          "transactions": {
            "items": {
              "$ref": "#/components/schemas/Transaction"
            },
            "type": "array",
            "title": "Transactions"
          }
        },
        "type": "object",
        "required": [
          "versions",
          "transactions"
        ],
        "title": "DatacenterProviderVersionsAndTransactions"
      },
      "DateRange": {
        "properties": {
          "from_date": {
            "type": "string",
            "format": "date-time",
            "title": "From Date",
            "description": "The start date."
          },
          "to_date": {
            "type": "string",
            "format": "date-time",
            "title": "To Date",
            "description": "The end date."
          }
        },
        "type": "object",
        "required": [
          "from_date",
          "to_date"
        ],
        "title": "DateRange"
      },
      "EntitlementSku": {
        "properties": {
          "last_modified_account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Last Modified Account Id",
            "description": "Account ID of the user who last modified the resource"
          },
          "last_modified_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified Timestamp",
            "description": "Timestamp of when the resource was last modified"
          },
          "created_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Created Timestamp",
            "description": "Timestamp of when the resource was created"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data associated with the resource"
          },
          "name": {
            "type": "string",
            "maxLength": 125,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the resource"
          },
          "description": {
            "type": "string",
            "maxLength": 250,
            "minLength": 1,
            "title": "Description",
            "description": "Description of the resource"
          },
          "platform": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Platform"
              }
            ],
            "description": "The platform the Entitlement Sku is for."
          },
          "loot_entitlement": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExpandedLootEntitlement"
              }
            ],
            "title": "Loot Entitlement",
            "description": "The Loot Entitlement."
          },
          "external_key_entitlement": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExpandedExternalKeyEntitlement"
              }
            ],
            "title": "External Key Entitlement",
            "description": "The External Key Entitlement."
          },
          "sku": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "title": "Sku",
            "description": "The External SKU."
          },
          "sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sandbox Id",
            "description": "ID of the Sandbox"
          },
          "entitlement_sku_id": {
            "type": "string",
            "format": "uuid",
            "title": "Entitlement Sku Id",
            "description": "The Entitlement Sku ID."
          }
        },
        "type": "object",
        "required": [
          "platform",
          "sku",
          "entitlement_sku_id"
        ],
        "title": "EntitlementSku",
        "description": "Represents the mapping of an External SKU to a Loot or Key Campaign. Type is only used for"
      },
      "EntitlementSkuCollection": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/EntitlementSku"
            },
            "type": "array",
            "title": "Data",
            "description": "The Entitlement Skus.",
            "default": []
          },
          "page_meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PageMeta"
              }
            ],
            "title": "Page Meta",
            "description": "The paging metadata."
          }
        },
        "type": "object",
        "required": [
          "page_meta"
        ],
        "title": "EntitlementSkuCollection",
        "description": "A collection of Entitlement Skus."
      },
      "EntitlementSkuSortOptions": {
        "type": "string",
        "enum": [
          "entitlement_sku_id",
          "sku",
          "loot_id",
          "entitlement_type",
          "campaign_id",
          "name",
          "last_modified_timestamp",
          "last_modified_account_id"
        ],
        "title": "EntitlementSkuSortOptions",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "entitlement_sku_id",
          "sku",
          "loot_id",
          "entitlement_type",
          "external_key_campaign_id",
          "name",
          "last_modified_timestamp",
          "last_modified_account_id"
        ]
      },
      "EntitlementType": {
        "type": "string",
        "enum": [
          "consumable",
          "durable",
          "durable_single_use"
        ],
        "title": "EntitlementType",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "Consumable entitlements are removed from the platform's record keeping system when used.",
          "Durable entitlements stay in the platform's recorded keeping system and is granted to the Player each time entitlements are granted.",
          "Durable single use entitlements stay in the platform's recorded keeping system and is granted to the Player only once."
        ],
        "x-enum-varnames": [
          "consumable",
          "durable",
          "durable_single_use"
        ]
      },
      "Environment": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Name",
            "description": "The name of the environment"
          },
          "short_name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Short Name",
            "description": "The short name of the environment"
          },
          "base_url": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Base Url",
            "description": "The base url for this environment"
          },
          "primary_contact_email": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Primary Contact Email",
            "description": "The primary contact email for the environment"
          },
          "sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sandbox Id",
            "description": "The id of the sandbox this environment uses"
          },
          "archive": {
            "type": "boolean",
            "title": "Archive",
            "description": "Determines if the Loot is active. Inactive Loot will not be fulfilled.",
            "default": false
          },
          "environment_id": {
            "type": "string",
            "format": "uuid",
            "title": "Environment Id"
          }
        },
        "type": "object",
        "required": [
          "name",
          "short_name",
          "environment_id"
        ],
        "title": "Environment"
      },
      "EnvironmentCreate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Name",
            "description": "The name of the environment"
          },
          "short_name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Short Name",
            "description": "The short name of the environment"
          },
          "base_url": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Base Url",
            "description": "The base url for this environment"
          },
          "primary_contact_email": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Primary Contact Email",
            "description": "The primary contact email for the environment"
          },
          "sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sandbox Id",
            "description": "The id of the sandbox this environment uses"
          },
          "archive": {
            "type": "boolean",
            "title": "Archive",
            "description": "Determines if the Loot is active. Inactive Loot will not be fulfilled.",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "name",
          "short_name"
        ],
        "title": "EnvironmentCreate"
      },
      "EnvironmentResponse": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Name",
            "description": "The name of the environment"
          },
          "short_name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Short Name",
            "description": "The short name of the environment"
          },
          "base_url": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Base Url",
            "description": "The base url for this environment"
          },
          "primary_contact_email": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Primary Contact Email",
            "description": "The primary contact email for the environment"
          },
          "sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sandbox Id",
            "description": "The id of the sandbox this environment uses"
          },
          "archive": {
            "type": "boolean",
            "title": "Archive",
            "description": "Determines if the Loot is active. Inactive Loot will not be fulfilled.",
            "default": false
          },
          "environment_id": {
            "type": "string",
            "format": "uuid",
            "title": "Environment Id"
          },
          "last_modified_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified Timestamp",
            "description": "Timestamp of when the resource was last modified"
          }
        },
        "type": "object",
        "required": [
          "name",
          "short_name",
          "environment_id"
        ],
        "title": "EnvironmentResponse"
      },
      "EnvironmentUpdate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Name",
            "description": "The name of the environment"
          },
          "short_name": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Short Name",
            "description": "The short name of the environment"
          },
          "base_url": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Base Url",
            "description": "The base url for this environment"
          },
          "primary_contact_email": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Primary Contact Email",
            "description": "The primary contact email for the environment"
          },
          "sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sandbox Id",
            "description": "The id of the sandbox this environment uses"
          },
          "archive": {
            "type": "boolean",
            "title": "Archive",
            "description": "Determines if the Loot is active. Inactive Loot will not be fulfilled.",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "name",
          "short_name"
        ],
        "title": "EnvironmentUpdate"
      },
      "EpicOnlineServicesConfig": {
        "properties": {
          "enable_login": {
            "type": "boolean",
            "title": "Enable Login",
            "description": "Whether or not to enable Epic logins",
            "default": true
          },
          "client_id": {
            "type": "string",
            "title": "Client Id",
            "description": "Epic Online Services client ID.  Client tokens are validated against this ID"
          },
          "product_id": {
            "type": "string",
            "title": "Product Id",
            "description": "Epic Online Services product ID.  Client tokens are validated against this ID"
          },
          "sandbox_id": {
            "type": "string",
            "title": "Sandbox Id",
            "description": "Epic Online Services sandbox ID.  Client tokens are validated against this ID"
          },
          "scopes": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "uniqueItems": true,
            "title": "Scopes",
            "description": "Epic Online Services scopes to request",
            "default": [
              "basic_profile",
              "friends_list",
              "presence"
            ]
          }
        },
        "type": "object",
        "required": [
          "client_id",
          "product_id",
          "sandbox_id"
        ],
        "title": "EpicOnlineServicesConfig",
        "description": "Epic Online Services options"
      },
      "EventParamsSchema": {
        "properties": {
          "custom_data": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data associated with the resource"
          },
          "name": {
            "type": "string",
            "maxLength": 125,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the resource"
          },
          "description": {
            "type": "string",
            "maxLength": 250,
            "minLength": 1,
            "title": "Description",
            "description": "Description of the resource"
          },
          "last_modified_account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Last Modified Account Id",
            "description": "Account ID of the user who last modified the resource"
          },
          "last_modified_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified Timestamp",
            "description": "Timestamp of when the resource was last modified"
          },
          "created_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Created Timestamp",
            "description": "Timestamp of when the resource was created"
          },
          "event_name": {
            "type": "string",
            "title": "Event Name",
            "description": "Name of the event, unique for sandbox_id"
          },
          "value_jsonschema": {
            "type": "object",
            "title": "Value Jsonschema",
            "description": "JSONSchema definition of the setting",
            "default": {}
          },
          "state": {
            "type": "string",
            "title": "State",
            "description": "Indicate the state of the schema, enabled, disabled or deny",
            "default": "enabled"
          }
        },
        "type": "object",
        "required": [
          "event_name"
        ],
        "title": "EventParamsSchema",
        "description": "This mixin is meant to give a set of common properties to root config models"
      },
      "EventParamsSchemaUpdateRequest": {
        "properties": {
          "custom_data": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data associated with the resource"
          },
          "name": {
            "type": "string",
            "maxLength": 125,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the resource"
          },
          "description": {
            "type": "string",
            "maxLength": 250,
            "minLength": 1,
            "title": "Description",
            "description": "Description of the resource"
          },
          "event_name": {
            "type": "string",
            "title": "Event Name",
            "description": "Name of the event, unique for sandbox_id"
          },
          "value_jsonschema": {
            "type": "object",
            "title": "Value Jsonschema",
            "description": "JSONSchema definition of the setting",
            "default": {}
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EventSchemaState"
              }
            ],
            "description": "Whether this custom event is enabled",
            "default": "enabled"
          }
        },
        "type": "object",
        "required": [
          "event_name"
        ],
        "title": "EventParamsSchemaUpdateRequest",
        "description": "This mixin is meant to give a set of common properties to root config models"
      },
      "EventSchemaState": {
        "type": "string",
        "enum": [
          "enabled",
          "disabled",
          "deny"
        ],
        "title": "EventSchemaState",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "Schema validation for the specific event name is enabled",
          "Schema validation for the specific event name is disabled",
          "The event with specific event name will be denied for further processing"
        ],
        "x-enum-varnames": [
          "ENABLED",
          "DISABLED",
          "DENY"
        ]
      },
      "ExpandProperty": {
        "type": "string",
        "enum": [
          "*",
          "legacy_id"
        ],
        "title": "ExpandProperty",
        "description": "List of properties Id's to expand the corresponding name.",
        "x-enum-descriptions": [
          "List of properties Id's to expand the corresponding name.",
          "List of properties Id's to expand the corresponding name."
        ],
        "x-enum-varnames": [
          "all",
          "legacy_id"
        ]
      },
      "ExpandedExternalKeyEntitlement": {
        "properties": {
          "external_key_campaign_id": {
            "type": "string",
            "format": "uuid",
            "title": "External Key Campaign Id",
            "description": "The External Key Campaign ID."
          },
          "quantity": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "Quantity",
            "description": "The quantity of keys to grant to the player."
          },
          "external_key_campaign_name": {
            "type": "string",
            "title": "External Key Campaign Name",
            "description": "The External Key Campaign Name. Only included when External Key Campaign is expanded."
          }
        },
        "type": "object",
        "required": [
          "external_key_campaign_id",
          "quantity"
        ],
        "title": "ExpandedExternalKeyEntitlement",
        "description": "Represents the mapping of an External SKU to a External Key that will be granted to the player when the player has a matching sku."
      },
      "ExpandedLootEntitlement": {
        "properties": {
          "loot_id": {
            "type": "string",
            "format": "uuid",
            "title": "Loot Id",
            "description": "The Loot ID."
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EntitlementType"
              }
            ],
            "description": "Determine how the entitlement is handled on the Platform's side. "
          },
          "loot_name": {
            "type": "string",
            "title": "Loot Name",
            "description": "The Loot Name. Only included when Loot is expanded."
          },
          "legacy_loot_id": {
            "type": "integer",
            "minimum": 0,
            "title": "Legacy Loot Id",
            "description": "The Legacy Loot ID."
          }
        },
        "type": "object",
        "required": [
          "loot_id",
          "type"
        ],
        "title": "ExpandedLootEntitlement",
        "description": "Represents the mapping of an External SKU to a Loot that will be granted to the player when the player has a matching sku"
      },
      "ExperimentalFeature": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the feature"
          },
          "enabled": {
            "type": "boolean",
            "title": "Enabled",
            "description": "Whether or not the feature is enabled"
          }
        },
        "type": "object",
        "required": [
          "name",
          "enabled"
        ],
        "title": "ExperimentalFeature"
      },
      "ExternalKeyCampaign": {
        "properties": {
          "custom_data": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data associated with the resource"
          },
          "name": {
            "type": "string",
            "maxLength": 125,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the resource"
          },
          "description": {
            "type": "string",
            "maxLength": 250,
            "minLength": 1,
            "title": "Description",
            "description": "Description of the resource"
          },
          "key_types": {
            "items": {
              "type": "string",
              "maxLength": 256,
              "minLength": 1
            },
            "type": "array",
            "title": "Key Types",
            "description": "The types of keys that can be distributed by this campaign.",
            "default": []
          },
          "sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sandbox Id",
            "description": "ID of the Sandbox"
          },
          "last_modified_account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Last Modified Account Id",
            "description": "Account ID of the user who last modified the resource"
          },
          "last_modified_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified Timestamp",
            "description": "Timestamp of when the resource was last modified"
          },
          "created_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Created Timestamp",
            "description": "Timestamp of when the resource was created"
          },
          "external_key_campaign_id": {
            "type": "string",
            "format": "uuid",
            "title": "External Key Campaign Id",
            "description": "The External Key Campaign ID."
          }
        },
        "type": "object",
        "required": [
          "external_key_campaign_id"
        ],
        "title": "ExternalKeyCampaign",
        "description": "A campaign to distribute external keys to players."
      },
      "ExternalKeyCampaignCollection": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/ExternalKeyCampaign"
            },
            "type": "array",
            "title": "Data",
            "description": "The External Key Campaigns.",
            "default": []
          },
          "page_meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PageMeta"
              }
            ],
            "title": "Page Meta",
            "description": "The paging metadata."
          }
        },
        "type": "object",
        "required": [
          "page_meta"
        ],
        "title": "ExternalKeyCampaignCollection",
        "description": "A collection of External Key Campaigns."
      },
      "ExternalKeyCampaignSortOptions": {
        "type": "string",
        "enum": [
          "external_key_campaign_id",
          "name"
        ],
        "title": "ExternalKeyCampaignSortOptions",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "external_key_campaign_id",
          "name"
        ]
      },
      "ExternalKeyEntitlement": {
        "properties": {
          "external_key_campaign_id": {
            "type": "string",
            "format": "uuid",
            "title": "External Key Campaign Id",
            "description": "The External Key Campaign ID."
          },
          "quantity": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "Quantity",
            "description": "The quantity of keys to grant to the player."
          }
        },
        "type": "object",
        "required": [
          "external_key_campaign_id",
          "quantity"
        ],
        "title": "ExternalKeyEntitlement",
        "description": "Represents the mapping of an External SKU to a External Key that will be granted to the player when the player has a matching sku."
      },
      "GeneralConfig": {
        "properties": {
          "last_modified_account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Last Modified Account Id",
            "description": "Account ID of the user who last modified the resource"
          },
          "last_modified_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified Timestamp",
            "description": "Timestamp of when the resource was last modified"
          },
          "created_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Created Timestamp",
            "description": "Timestamp of when the resource was created"
          },
          "social": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SocialConfig"
              }
            ],
            "title": "Social",
            "description": "\n    Social options\n    "
          },
          "basic": {
            "$ref": "#/components/schemas/BasicConfig"
          },
          "anon": {
            "$ref": "#/components/schemas/AnonConfig"
          },
          "epic": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EpicOnlineServicesConfig"
              }
            ],
            "title": "Epic",
            "description": "\n    Epic Online Services options\n    "
          },
          "steam": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SteamConfig"
              }
            ],
            "title": "Steam",
            "description": "\n    Steam options\n    "
          },
          "playstation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlaystationConfig"
              }
            ],
            "title": "Playstation",
            "description": "\n    Playstation options\n    "
          },
          "nintendo": {
            "$ref": "#/components/schemas/NintendoConfig"
          },
          "twitch": {
            "$ref": "#/components/schemas/TwitchConfig"
          },
          "amazon": {
            "$ref": "#/components/schemas/AmazonConfig"
          },
          "google": {
            "$ref": "#/components/schemas/GoogleConfig"
          },
          "apple": {
            "$ref": "#/components/schemas/AppleConfig"
          },
          "xbox": {
            "$ref": "#/components/schemas/XboxConfig"
          },
          "vivox": {
            "$ref": "#/components/schemas/VivoxConfig"
          },
          "legacy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dependencies__sandbox_config__game_config__schemas__LegacyConfig"
              }
            ],
            "title": "Legacy",
            "description": "\n    Options used by legacy systems.  These are not used by the new APIs.\n    "
          },
          "default_role_id": {
            "type": "string",
            "minLength": 1,
            "title": "Default Role Id",
            "description": "Default role ID for players without a role"
          },
          "inventory_session_loot": {
            "items": {
              "type": "string",
              "minLength": 1
            },
            "type": "array",
            "title": "Inventory Session Loot",
            "description": "List of loot IDs to grant to players when they start a new inventory session",
            "default": []
          },
          "allow_client_to_update_inventory": {
            "type": "boolean",
            "title": "Allow Client To Update Inventory",
            "description": "Whether or not to allow the client source to update inventory",
            "default": false
          },
          "email_reward_loot": {
            "items": {
              "type": "string",
              "minLength": 1
            },
            "type": "array",
            "title": "Email Reward Loot",
            "description": "List of loot IDs to grant to players when they have an email",
            "default": []
          },
          "coupon_enable": {
            "type": "boolean",
            "title": "Coupon Enable",
            "description": "Are coupons allowed to be used for purchasing Loot?",
            "default": true
          },
          "coupon_vendor_id": {
            "type": "string",
            "title": "Coupon Vendor Id",
            "description": "Vendor ID that lists all enabled coupons"
          },
          "legacy_id_generation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LegacyIdGenerationConfig"
              }
            ],
            "title": "Legacy Id Generation",
            "description": "\n    Options used to effect how IDs are generated to help bridge the gap between the legacy int based IDs and the new UUID based IDs.\n    These options will not be supported in the future and it is recommended to stop using anything but UUID4 as soon as possible.\n    ",
            "default": {
              "vendor": "sequential",
              "loot": "sequential",
              "item": "sequential",
              "inventory_bucket_use_rule_set": "sequential",
              "xp": "sequential",
              "role": "sequential"
            }
          },
          "enable_legacy_setting_types": {
            "type": "boolean",
            "title": "Enable Legacy Setting Types",
            "description": "Whether or not to enable legacy setting types",
            "default": false
          }
        },
        "type": "object",
        "title": "GeneralConfig",
        "description": "General config about a sandbox that doesn't have a more appropriate breakdown"
      },
      "GeneralConfigCreateUpdate": {
        "properties": {
          "social": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SocialConfig"
              }
            ],
            "title": "Social",
            "description": "\n    Social options\n    "
          },
          "basic": {
            "$ref": "#/components/schemas/BasicConfig"
          },
          "anon": {
            "$ref": "#/components/schemas/AnonConfig"
          },
          "epic": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EpicOnlineServicesConfig"
              }
            ],
            "title": "Epic",
            "description": "\n    Epic Online Services options\n    "
          },
          "steam": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SteamConfig"
              }
            ],
            "title": "Steam",
            "description": "\n    Steam options\n    "
          },
          "playstation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlaystationConfig"
              }
            ],
            "title": "Playstation",
            "description": "\n    Playstation options\n    "
          },
          "nintendo": {
            "$ref": "#/components/schemas/NintendoConfig"
          },
          "twitch": {
            "$ref": "#/components/schemas/TwitchConfig"
          },
          "amazon": {
            "$ref": "#/components/schemas/AmazonConfig"
          },
          "google": {
            "$ref": "#/components/schemas/GoogleConfig"
          },
          "apple": {
            "$ref": "#/components/schemas/AppleConfig"
          },
          "xbox": {
            "$ref": "#/components/schemas/XboxConfig"
          },
          "vivox": {
            "$ref": "#/components/schemas/VivoxConfig"
          },
          "legacy": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dependencies__sandbox_config__game_config__schemas__LegacyConfig"
              }
            ],
            "title": "Legacy",
            "description": "\n    Options used by legacy systems.  These are not used by the new APIs.\n    "
          },
          "default_role_id": {
            "type": "string",
            "minLength": 1,
            "title": "Default Role Id",
            "description": "Default role ID for players without a role"
          },
          "inventory_session_loot": {
            "items": {
              "type": "string",
              "minLength": 1
            },
            "type": "array",
            "title": "Inventory Session Loot",
            "description": "List of loot IDs to grant to players when they start a new inventory session",
            "default": []
          },
          "allow_client_to_update_inventory": {
            "type": "boolean",
            "title": "Allow Client To Update Inventory",
            "description": "Whether or not to allow the client source to update inventory",
            "default": false
          },
          "email_reward_loot": {
            "items": {
              "type": "string",
              "minLength": 1
            },
            "type": "array",
            "title": "Email Reward Loot",
            "description": "List of loot IDs to grant to players when they have an email",
            "default": []
          },
          "coupon_enable": {
            "type": "boolean",
            "title": "Coupon Enable",
            "description": "Are coupons allowed to be used for purchasing Loot?",
            "default": true
          },
          "coupon_vendor_id": {
            "type": "string",
            "title": "Coupon Vendor Id",
            "description": "Vendor ID that lists all enabled coupons"
          },
          "legacy_id_generation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LegacyIdGenerationConfig"
              }
            ],
            "title": "Legacy Id Generation",
            "description": "\n    Options used to effect how IDs are generated to help bridge the gap between the legacy int based IDs and the new UUID based IDs.\n    These options will not be supported in the future and it is recommended to stop using anything but UUID4 as soon as possible.\n    ",
            "default": {
              "vendor": "sequential",
              "loot": "sequential",
              "item": "sequential",
              "inventory_bucket_use_rule_set": "sequential",
              "xp": "sequential",
              "role": "sequential"
            }
          },
          "enable_legacy_setting_types": {
            "type": "boolean",
            "title": "Enable Legacy Setting Types",
            "description": "Whether or not to enable legacy setting types",
            "default": false
          }
        },
        "type": "object",
        "title": "GeneralConfigCreateUpdate",
        "description": "General config about a sandbox that doesn't have a more appropriate breakdown"
      },
      "GeographicLocation": {
        "properties": {
          "description": {
            "type": "string",
            "minLength": 1,
            "title": "Description",
            "description": "Where exactly is this in the physical world."
          },
          "geographic_location_id": {
            "type": "string",
            "format": "uuid",
            "title": "Geographic Location Id"
          }
        },
        "type": "object",
        "required": [
          "description",
          "geographic_location_id"
        ],
        "title": "GeographicLocation"
      },
      "GeographicLocationCreate": {
        "properties": {
          "description": {
            "type": "string",
            "minLength": 1,
            "title": "Description",
            "description": "Where exactly is this in the physical world."
          }
        },
        "type": "object",
        "required": [
          "description"
        ],
        "title": "GeographicLocationCreate"
      },
      "GeographicLocationUpdate": {
        "properties": {
          "description": {
            "type": "string",
            "minLength": 1,
            "title": "Description",
            "description": "Where exactly is this in the physical world."
          }
        },
        "type": "object",
        "required": [
          "description"
        ],
        "title": "GeographicLocationUpdate"
      },
      "GeographicLocationVersionsAndTransactions": {
        "properties": {
          "versions": {
            "items": {
              "$ref": "#/components/schemas/GeographicLocation"
            },
            "type": "array",
            "title": "Versions"
          },
          "transactions": {
            "items": {
              "$ref": "#/components/schemas/Transaction"
            },
            "type": "array",
            "title": "Transactions"
          }
        },
        "type": "object",
        "required": [
          "versions",
          "transactions"
        ],
        "title": "GeographicLocationVersionsAndTransactions"
      },
      "GoogleConfig": {
        "properties": {
          "enable_login": {
            "type": "boolean",
            "title": "Enable Login",
            "description": "Whether or not to enable Google logins",
            "default": true
          },
          "client_id": {
            "type": "string",
            "title": "Client Id",
            "description": "Google client ID. Client tokens are validated against this ID"
          }
        },
        "type": "object",
        "required": [
          "client_id"
        ],
        "title": "GoogleConfig"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "Host": {
        "properties": {
          "internal_hostname": {
            "type": "string",
            "maxLength": 253,
            "minLength": 1,
            "title": "Internal Hostname",
            "description": "The internal hostname of the host. Should only be addressable internally."
          },
          "public_hostname": {
            "type": "string",
            "maxLength": 253,
            "minLength": 1,
            "title": "Public Hostname",
            "description": "The public hostname of the host. Should be addressable from the internet."
          },
          "internal_ipv4": {
            "type": "string",
            "format": "ipv4",
            "title": "Internal Ipv4",
            "description": "The internal IPv4 address of the host. Should only be addressable internally."
          },
          "public_ipv4": {
            "type": "string",
            "format": "ipv4",
            "title": "Public Ipv4",
            "description": "The public IPv4 address of the host. Should be addressable from the internet."
          },
          "internal_ipv6": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Internal Ipv6",
            "description": "The internal IPv6 address of the host. Should only be addressable internally."
          },
          "public_ipv6": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Public Ipv6",
            "description": "The public IPv6 address of the host. Should be addressable from the internet."
          },
          "geographic_location": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GeographicLocation"
              }
            ],
            "title": "Geographic Location",
            "description": "The geographic location of the host"
          },
          "datacenter_provider": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DatacenterProvider"
              }
            ],
            "title": "Datacenter Provider",
            "description": "The datacenter provider of the host"
          },
          "datacenter_location": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DatacenterLocation"
              }
            ],
            "title": "Datacenter Location",
            "description": "The datacenter location of the host"
          },
          "machine_class": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MachineClass"
              }
            ],
            "title": "Machine Class",
            "description": "The machine class of the host"
          },
          "machine_class_overrides": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MachineClass"
              }
            ],
            "title": "Machine Class Overrides",
            "description": "A machine class bespoke to this host used for overriding any values of the machine class that are not true for this host. There may be a different pricing model, or the machine is simply known to be a crappier version of the CPU offered by the machineclass."
          },
          "machine_image": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MachineImage"
              }
            ],
            "title": "Machine Image",
            "description": "The machine image of the host"
          },
          "monthly_price": {
            "type": "number",
            "title": "Monthly Price",
            "description": "The monthly price of this host. If set, this value will supersede any monthly_price value set by the machine_class or contract"
          },
          "hourly_price": {
            "type": "number",
            "title": "Hourly Price",
            "description": "The hourly price of this host. If set, this value will supersede any hourly_price value set by the machine_class or contract"
          },
          "notes": {
            "type": "string",
            "title": "Notes",
            "description": "Notes about the host. Used for extra information that doesn't fit in other fields."
          },
          "labels": {
            "items": {
              "type": "string",
              "maxLength": 64,
              "minLength": 1
            },
            "type": "array",
            "title": "Labels",
            "description": "Labels that can be applied to the host for organizational purposes"
          },
          "datacenter_contract": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DatacenterContract"
              }
            ],
            "title": "Datacenter Contract",
            "description": "The contract this host is associated with"
          },
          "prior_host_id": {
            "type": "string",
            "format": "uuid",
            "title": "Prior Host Id",
            "description": "The ID of the host this host replaced"
          },
          "host_id": {
            "type": "string",
            "format": "uuid",
            "title": "Host Id"
          },
          "simple_product_assignments": {
            "items": {
              "$ref": "#/components/schemas/SimpleProductAssignment"
            },
            "type": "array",
            "title": "Simple Product Assignments",
            "description": "Assignments for this host"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "host_id"
        ],
        "title": "Host",
        "description": "A representation of a host that can be used to deploy a product to. Can be physical, virtual, or a container."
      },
      "HostCreate": {
        "properties": {
          "internal_hostname": {
            "type": "string",
            "maxLength": 253,
            "minLength": 1,
            "title": "Internal Hostname",
            "description": "The internal hostname of the host. Should only be addressable internally."
          },
          "public_hostname": {
            "type": "string",
            "maxLength": 253,
            "minLength": 1,
            "title": "Public Hostname",
            "description": "The public hostname of the host. Should be addressable from the internet."
          },
          "internal_ipv4": {
            "type": "string",
            "format": "ipv4",
            "title": "Internal Ipv4",
            "description": "The internal IPv4 address of the host. Should only be addressable internally."
          },
          "public_ipv4": {
            "type": "string",
            "format": "ipv4",
            "title": "Public Ipv4",
            "description": "The public IPv4 address of the host. Should be addressable from the internet."
          },
          "internal_ipv6": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Internal Ipv6",
            "description": "The internal IPv6 address of the host. Should only be addressable internally."
          },
          "public_ipv6": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Public Ipv6",
            "description": "The public IPv6 address of the host. Should be addressable from the internet."
          },
          "geographic_location": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GeographicLocation"
              }
            ],
            "title": "Geographic Location",
            "description": "The geographic location of the host"
          },
          "datacenter_provider": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DatacenterProvider"
              }
            ],
            "title": "Datacenter Provider",
            "description": "The datacenter provider of the host"
          },
          "datacenter_location": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DatacenterLocation"
              }
            ],
            "title": "Datacenter Location",
            "description": "The datacenter location of the host"
          },
          "machine_class": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MachineClass"
              }
            ],
            "title": "Machine Class",
            "description": "The machine class of the host"
          },
          "machine_class_overrides": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MachineClass"
              }
            ],
            "title": "Machine Class Overrides",
            "description": "A machine class bespoke to this host used for overriding any values of the machine class that are not true for this host. There may be a different pricing model, or the machine is simply known to be a crappier version of the CPU offered by the machineclass."
          },
          "machine_image": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MachineImage"
              }
            ],
            "title": "Machine Image",
            "description": "The machine image of the host"
          },
          "monthly_price": {
            "type": "number",
            "title": "Monthly Price",
            "description": "The monthly price of this host. If set, this value will supersede any monthly_price value set by the machine_class or contract"
          },
          "hourly_price": {
            "type": "number",
            "title": "Hourly Price",
            "description": "The hourly price of this host. If set, this value will supersede any hourly_price value set by the machine_class or contract"
          },
          "notes": {
            "type": "string",
            "title": "Notes",
            "description": "Notes about the host. Used for extra information that doesn't fit in other fields."
          },
          "labels": {
            "items": {
              "type": "string",
              "maxLength": 64,
              "minLength": 1
            },
            "type": "array",
            "title": "Labels",
            "description": "Labels that can be applied to the host for organizational purposes"
          },
          "datacenter_contract": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DatacenterContract"
              }
            ],
            "title": "Datacenter Contract",
            "description": "The contract this host is associated with"
          },
          "prior_host_id": {
            "type": "string",
            "format": "uuid",
            "title": "Prior Host Id",
            "description": "The ID of the host this host replaced"
          },
          "datacenter_provider_id": {
            "type": "string",
            "format": "uuid",
            "title": "Datacenter Provider Id",
            "description": "The id of datacenter provider of the host"
          },
          "geographic_location_id": {
            "type": "string",
            "format": "uuid",
            "title": "Geographic Location Id",
            "description": "The id of the geographic location of the host"
          },
          "datacenter_location_id": {
            "type": "string",
            "format": "uuid",
            "title": "Datacenter Location Id",
            "description": "The id of the datacenter location of the host"
          },
          "machine_class_id": {
            "type": "string",
            "format": "uuid",
            "title": "Machine Class Id",
            "description": "The id of the machine class of the host"
          },
          "machine_class_overrides_id": {
            "type": "string",
            "format": "uuid",
            "title": "Machine Class Overrides Id",
            "description": "The id of the machine class overrides of the host"
          },
          "machine_image_id": {
            "type": "string",
            "format": "uuid",
            "title": "Machine Image Id",
            "description": "The id of the machine image of the host"
          },
          "datacenter_contract_id": {
            "type": "string",
            "format": "uuid",
            "title": "Datacenter Contract Id",
            "description": "The id of the datacenter contract of the host"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "HostCreate",
        "description": "A representation of a host that can be used to deploy a product to. Can be physical, virtual, or a container."
      },
      "HostLabel": {
        "properties": {
          "label": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Label",
            "description": "The text of the label"
          },
          "host_id": {
            "type": "string",
            "format": "uuid",
            "title": "Host Id",
            "description": "The ID of the host this label is associated with"
          },
          "host_label_id": {
            "type": "integer",
            "title": "Host Label Id"
          }
        },
        "type": "object",
        "required": [
          "label",
          "host_id",
          "host_label_id"
        ],
        "title": "HostLabel",
        "description": "A label that can be applied to a host for organizational purposes"
      },
      "HostLabelCreate": {
        "properties": {
          "label": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Label",
            "description": "The text of the label"
          },
          "host_id": {
            "type": "string",
            "format": "uuid",
            "title": "Host Id",
            "description": "The ID of the host this label is associated with"
          }
        },
        "type": "object",
        "required": [
          "label",
          "host_id"
        ],
        "title": "HostLabelCreate",
        "description": "A label that can be applied to a host for organizational purposes"
      },
      "HostType": {
        "type": "string",
        "enum": [
          "dedicated",
          "player"
        ],
        "title": "HostType",
        "description": "Whether the host is another player, or a dedicated instance",
        "x-enum-descriptions": [
          "Whether the host is another player, or a dedicated instance",
          "Whether the host is another player, or a dedicated instance"
        ],
        "x-enum-varnames": [
          "dedicated",
          "player"
        ]
      },
      "HostUpdate": {
        "properties": {
          "internal_hostname": {
            "type": "string",
            "maxLength": 253,
            "minLength": 1,
            "title": "Internal Hostname",
            "description": "The internal hostname of the host. Should only be addressable internally."
          },
          "public_hostname": {
            "type": "string",
            "maxLength": 253,
            "minLength": 1,
            "title": "Public Hostname",
            "description": "The public hostname of the host. Should be addressable from the internet."
          },
          "internal_ipv4": {
            "type": "string",
            "format": "ipv4",
            "title": "Internal Ipv4",
            "description": "The internal IPv4 address of the host. Should only be addressable internally."
          },
          "public_ipv4": {
            "type": "string",
            "format": "ipv4",
            "title": "Public Ipv4",
            "description": "The public IPv4 address of the host. Should be addressable from the internet."
          },
          "internal_ipv6": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Internal Ipv6",
            "description": "The internal IPv6 address of the host. Should only be addressable internally."
          },
          "public_ipv6": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Public Ipv6",
            "description": "The public IPv6 address of the host. Should be addressable from the internet."
          },
          "geographic_location": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GeographicLocation"
              }
            ],
            "title": "Geographic Location",
            "description": "The geographic location of the host"
          },
          "datacenter_provider": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DatacenterProvider"
              }
            ],
            "title": "Datacenter Provider",
            "description": "The datacenter provider of the host"
          },
          "datacenter_location": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DatacenterLocation"
              }
            ],
            "title": "Datacenter Location",
            "description": "The datacenter location of the host"
          },
          "machine_class": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MachineClass"
              }
            ],
            "title": "Machine Class",
            "description": "The machine class of the host"
          },
          "machine_class_overrides": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MachineClass"
              }
            ],
            "title": "Machine Class Overrides",
            "description": "A machine class bespoke to this host used for overriding any values of the machine class that are not true for this host. There may be a different pricing model, or the machine is simply known to be a crappier version of the CPU offered by the machineclass."
          },
          "machine_image": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MachineImage"
              }
            ],
            "title": "Machine Image",
            "description": "The machine image of the host"
          },
          "monthly_price": {
            "type": "number",
            "title": "Monthly Price",
            "description": "The monthly price of this host. If set, this value will supersede any monthly_price value set by the machine_class or contract"
          },
          "hourly_price": {
            "type": "number",
            "title": "Hourly Price",
            "description": "The hourly price of this host. If set, this value will supersede any hourly_price value set by the machine_class or contract"
          },
          "notes": {
            "type": "string",
            "title": "Notes",
            "description": "Notes about the host. Used for extra information that doesn't fit in other fields."
          },
          "labels": {
            "items": {
              "type": "string",
              "maxLength": 64,
              "minLength": 1
            },
            "type": "array",
            "title": "Labels",
            "description": "Labels that can be applied to the host for organizational purposes"
          },
          "datacenter_contract": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DatacenterContract"
              }
            ],
            "title": "Datacenter Contract",
            "description": "The contract this host is associated with"
          },
          "prior_host_id": {
            "type": "string",
            "format": "uuid",
            "title": "Prior Host Id",
            "description": "The ID of the host this host replaced"
          },
          "datacenter_provider_id": {
            "type": "string",
            "format": "uuid",
            "title": "Datacenter Provider Id",
            "description": "The id of datacenter provider of the host"
          },
          "geographic_location_id": {
            "type": "string",
            "format": "uuid",
            "title": "Geographic Location Id",
            "description": "The id of the geographic location of the host"
          },
          "datacenter_location_id": {
            "type": "string",
            "format": "uuid",
            "title": "Datacenter Location Id",
            "description": "The id of the datacenter location of the host"
          },
          "machine_class_id": {
            "type": "string",
            "format": "uuid",
            "title": "Machine Class Id",
            "description": "The id of the machine class of the host"
          },
          "machine_class_overrides_id": {
            "type": "string",
            "format": "uuid",
            "title": "Machine Class Overrides Id",
            "description": "The id of the machine class overrides of the host"
          },
          "machine_image_id": {
            "type": "string",
            "format": "uuid",
            "title": "Machine Image Id",
            "description": "The id of the machine image of the host"
          },
          "datacenter_contract_id": {
            "type": "string",
            "format": "uuid",
            "title": "Datacenter Contract Id",
            "description": "The id of the datacenter contract of the host"
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "HostUpdate",
        "description": "A representation of a host that can be used to deploy a product to. Can be physical, virtual, or a container."
      },
      "HostVersionsAndTransactions": {
        "properties": {
          "versions": {
            "items": {
              "$ref": "#/components/schemas/Host"
            },
            "type": "array",
            "title": "Versions"
          },
          "transactions": {
            "items": {
              "$ref": "#/components/schemas/Transaction"
            },
            "type": "array",
            "title": "Transactions"
          }
        },
        "type": "object",
        "required": [
          "versions",
          "transactions"
        ],
        "title": "HostVersionsAndTransactions"
      },
      "HttpVerb": {
        "type": "string",
        "enum": [
          "GET",
          "POST",
          "PUT",
          "DELETE",
          "HEAD",
          "PATCH"
        ],
        "title": "HttpVerb",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "GET",
          "POST",
          "PUT",
          "DELETE",
          "HEAD",
          "PATCH"
        ]
      },
      "InstanceRequestTemplate": {
        "properties": {
          "map_selection_list_id": {
            "type": "string",
            "format": "uuid",
            "title": "Map Selection List Id",
            "description": "Which MapSelectionList is used to choose a map when using this template"
          },
          "instance_request_template_id": {
            "type": "string",
            "format": "uuid",
            "title": "Instance Request Template Id",
            "description": "ID to uniquely identify this InstanceRequestTemplate"
          },
          "default_host_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HostType"
              }
            ],
            "description": "Which host type is used by default (player hosted, or dedicated instance"
          },
          "legacy_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dependencies__sandbox_config__matchmaking__instance_request_schemas__LegacyConfig"
              }
            ],
            "title": "Legacy Config",
            "description": "Old config used by Legacy systems. These values are ignored by the current APIs"
          },
          "sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sandbox Id",
            "description": "ID of the Sandbox"
          },
          "last_modified_account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Last Modified Account Id",
            "description": "Account ID of the user who last modified the resource"
          },
          "last_modified_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified Timestamp",
            "description": "Timestamp of when the resource was last modified"
          },
          "created_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Created Timestamp",
            "description": "Timestamp of when this resource was created"
          }
        },
        "type": "object",
        "required": [
          "map_selection_list_id",
          "instance_request_template_id",
          "default_host_type"
        ],
        "title": "InstanceRequestTemplate"
      },
      "InstanceRequestTemplateRequest": {
        "properties": {
          "map_selection_list_id": {
            "type": "string",
            "format": "uuid",
            "title": "Map Selection List Id",
            "description": "Which MapSelectionList is used to choose a map when using this template"
          },
          "instance_request_template_id": {
            "type": "string",
            "format": "uuid",
            "title": "Instance Request Template Id",
            "description": "ID to uniquely identify this InstanceRequestTemplate"
          },
          "default_host_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HostType"
              }
            ],
            "description": "Which host type is used by default (player hosted, or dedicated instance"
          },
          "legacy_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dependencies__sandbox_config__matchmaking__instance_request_schemas__LegacyConfig"
              }
            ],
            "title": "Legacy Config",
            "description": "Old config used by Legacy systems. These values are ignored by the current APIs"
          }
        },
        "type": "object",
        "required": [
          "map_selection_list_id",
          "default_host_type"
        ],
        "title": "InstanceRequestTemplateRequest"
      },
      "InstanceRequestTemplateUpdateRequest": {
        "properties": {
          "map_selection_list_id": {
            "type": "string",
            "format": "uuid",
            "title": "Map Selection List Id",
            "description": "Which MapSelectionList is used to choose a map when using this template"
          },
          "instance_request_template_id": {
            "type": "string",
            "format": "uuid",
            "title": "Instance Request Template Id",
            "description": "ID to uniquely identify this InstanceRequestTemplate"
          },
          "default_host_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/HostType"
              }
            ],
            "description": "Which host type is used by default (player hosted, or dedicated instance"
          },
          "legacy_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dependencies__sandbox_config__matchmaking__instance_request_schemas__LegacyConfig"
              }
            ],
            "title": "Legacy Config",
            "description": "Old config used by Legacy systems. These values are ignored by the current APIs"
          }
        },
        "type": "object",
        "title": "InstanceRequestTemplateUpdateRequest"
      },
      "InstanceStartupParams": {
        "properties": {
          "map": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Map",
            "description": "Name of the map for the instance to spawn with"
          },
          "mode": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Mode",
            "description": "Game mode for the instance to spawn in"
          },
          "misc_params": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Misc Params",
            "description": "Additional commandline parameters for the instance"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data to pass through to the instance",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "map"
        ],
        "title": "InstanceStartupParams",
        "description": "Parameters given to an instance to change what map and mode it loads, and other gameplay behavior"
      },
      "InventoryBucket": {
        "type": "string",
        "enum": [
          "free",
          "sweat",
          "none",
          "anon",
          "amazon",
          "steam",
          "psn",
          "xbox_live",
          "google",
          "twitch",
          "nintendo_switch",
          "apple",
          "nintendo",
          "epic",
          "google_play",
          "nintendo_ppid"
        ],
        "title": "InventoryBucket",
        "description": "Grouping of Inventory Items. Inventory items are grouped into different buckets as each Platform that is supported has different requirements on how Inventory can be used on their Platform and other Platforms.",
        "x-enum-descriptions": [
          "Inventory given away for free.",
          "Inventory earned by players through in game activities.",
          "Inventory that doesn't belong to any known platform.",
          "Inventory assigned to the anonymous platform.",
          "Inventory assigned to the amazon platform.",
          "Inventory assigned to the steam platform.",
          "Inventory assigned to the playstation platform.",
          "Inventory assigned to the Xbox platform.",
          "Inventory assigned to the Google platform.",
          "Inventory assigned to the Twitch platform.",
          "Inventory assigned to the Nintendo Switch platform.",
          "Inventory assigned to the Apple platform.",
          "Inventory assigned to the Nintendo platform.",
          "Inventory assigned to the Epic platform.",
          "Inventory assigned to the Google Play platform.",
          "Inventory assigned to the Nintendo PPID platform."
        ],
        "x-enum-varnames": [
          "FREE",
          "SWEAT",
          "NONE",
          "ANON",
          "AMAZON",
          "STEAM",
          "PSN",
          "XBOX_LIVE",
          "GOOGLE",
          "TWITCH",
          "NINTENDO_SWITCH",
          "APPLE",
          "NINTENDO",
          "EPIC",
          "GOOGLE_PLAY",
          "NINTENDO_PPID"
        ]
      },
      "InventoryBucketUseRuleSet": {
        "properties": {
          "custom_data": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data associated with the resource"
          },
          "name": {
            "type": "string",
            "maxLength": 125,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the resource"
          },
          "description": {
            "type": "string",
            "maxLength": 250,
            "minLength": 1,
            "title": "Description",
            "description": "Description of the resource"
          },
          "rules": {
            "additionalProperties": {
              "items": {
                "$ref": "#/components/schemas/InventoryBucket"
              },
              "type": "array"
            },
            "type": "object",
            "title": "Rules",
            "description": "The Inventory Bucket Use Rules by Inventory Bucket.",
            "default": {}
          },
          "sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sandbox Id",
            "description": "ID of the Sandbox"
          },
          "last_modified_account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Last Modified Account Id",
            "description": "Account ID of the user who last modified the resource"
          },
          "last_modified_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified Timestamp",
            "description": "Timestamp of when the resource was last modified"
          },
          "created_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Created Timestamp",
            "description": "Timestamp of when the resource was created"
          },
          "rule_set_id": {
            "type": "string",
            "format": "uuid",
            "title": "Rule Set Id",
            "description": "The Inventory Bucket Use Rule Set ID."
          },
          "legacy_rule_set_id": {
            "type": "integer",
            "minimum": 0,
            "title": "Legacy Rule Set Id",
            "description": "The Legacy Inventory Bucket Use Rule Set ID."
          }
        },
        "type": "object",
        "required": [
          "rule_set_id",
          "legacy_rule_set_id"
        ],
        "title": "InventoryBucketUseRuleSet",
        "description": "A collection of Inventory Bucket Use Rules."
      },
      "InventoryBucketUseRuleSetCollection": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/InventoryBucketUseRuleSet"
            },
            "type": "array",
            "title": "Data",
            "description": "The Inventory Bucket Use Rule Sets.",
            "default": []
          },
          "page_meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PageMeta"
              }
            ],
            "title": "Page Meta",
            "description": "The paging metadata."
          }
        },
        "type": "object",
        "required": [
          "page_meta"
        ],
        "title": "InventoryBucketUseRuleSetCollection",
        "description": "A collection of Inventory Bucket Use Rule Sets. A rule set determine how item can be used across buckets."
      },
      "InventoryBucketUseRuleSetSortOptions": {
        "type": "string",
        "enum": [
          "rule_set_id",
          "legacy_inventory_bucket_use_rule_set_id",
          "name",
          "last_modified_timestamp",
          "last_modified_account_id"
        ],
        "title": "InventoryBucketUseRuleSetSortOptions",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "inventory_bucket_use_rule_set_id",
          "legacy_inventory_bucket_use_rule_set_id",
          "name",
          "last_modified_timestamp",
          "last_modified_account_id"
        ]
      },
      "InventoryOperation": {
        "type": "string",
        "enum": [
          "add",
          "subtract",
          "set",
          "check_greater_than_or_equal",
          "check_less_than",
          "check_greater_than_or_equal_and_subtract"
        ],
        "title": "InventoryOperation",
        "description": "Determines how the Inventory Quantity will be acted upon and the sort order of Loot in a Vendor if the Loot has the same sort order.\n\nSort Order:\n1. check_greater_then_or_equal/check_less_than\n2. check_greater_than_or_equal_and_subtract/subtract\n3. add/set",
        "x-enum-descriptions": [
          "Add the quantity or expiration of the Inventory.",
          "Subtract the quantity or expiration of the Inventory.",
          "Set the quantity or expiration of the Inventory.",
          "Check if the quantity or expiration of the Inventory is greater than or equal to the value.",
          "Check if the quantity or expiration of the Inventory is less than the value.",
          "Check if the quantity or expiration of the Inventory is greater than or equal to the value and subtract the value from the quantity or expiration."
        ],
        "x-enum-varnames": [
          "add",
          "subtract",
          "set",
          "check_greater_than_or_equal",
          "check_less_than",
          "check_greater_than_or_equal_and_subtract"
        ]
      },
      "InventorySelector": {
        "type": "string",
        "enum": [
          "own",
          "rent",
          "rent_timeframe_locked",
          "own_transient",
          "inherit_entitlement_inventory"
        ],
        "title": "InventorySelector",
        "description": "Determines way Inventory is selected and how it is to be modified.",
        "x-enum-descriptions": [
          "The Inventory will be stored across Inventory Sessions.",
          "The Inventory will be stored across Inventory Sessions but will expire after a period of time. Quantity modification will modify the Inventory's expiration time.",
          "The Inventory will be stored across Inventory Sessions by will expire after a period of time. Quantity modification will not modify the Inventory's expiration time but instead the quantity of the Inventory.",
          "The Inventory will by fulfilled as transient Inventory and will not persist across Inventory Sessions.",
          "Loot fulfilled will look for a parent Entitlement and then grant the Loot as transient Inventory with the rental expiration matching the parent;s expiration."
        ],
        "x-enum-varnames": [
          "own",
          "rent",
          "rent_timeframe_locked",
          "own_transient",
          "inherit_entitlement_inventory"
        ]
      },
      "Item": {
        "properties": {
          "custom_data": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data associated with the resource"
          },
          "name": {
            "type": "string",
            "maxLength": 125,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the resource"
          },
          "description": {
            "type": "string",
            "maxLength": 250,
            "minLength": 1,
            "title": "Description",
            "description": "Description of the resource"
          },
          "item_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ItemType"
              }
            ],
            "description": "The type of item.",
            "default": "unit"
          },
          "entitled_loot_id": {
            "type": "string",
            "format": "uuid",
            "title": "Entitled Loot Id",
            "description": "This is only valid for an entitlement Item. When this item is granted and Inventory Session creation, this is the Loot ID that will be fulfilled."
          },
          "level_xp_table_id": {
            "type": "string",
            "format": "uuid",
            "title": "Level Xp Table Id",
            "description": "The XP Table that is used to determine the Player's level for this XP. The level increase occurs when the quantity of this Item increases above the minimum XP of an XP Level. This is only valid for an unit Item."
          },
          "level_vendor_id": {
            "type": "string",
            "format": "uuid",
            "title": "Level Vendor Id",
            "description": "The vendor containing the rewards to grant to the player as they level up.  If a `level_xp_table_id` is configured, when this item is granted to a player their quantity is converted to a level using that table and rewards are granted based on the `sort_order` of loot inside this reward vendor.  If there is no `level_xp_table_id` configured, the quantity is used to select loot to grant from this reward vendor.  This is only valid for an unit Item."
          },
          "inventory_bucket_use_rule_set_id": {
            "type": "string",
            "format": "uuid",
            "title": "Inventory Bucket Use Rule Set Id",
            "description": "The Inventory Bucket Use Rule Set ID that determines how this item can be used across buckets."
          },
          "coupon_discount_percentage": {
            "type": "number",
            "maximum": 1,
            "exclusiveMinimum": 0,
            "title": "Coupon Discount Percentage",
            "description": "The amount the price is discounted. This is a percentage between 0 and 1. For example, 0.25 would be a 25% discount."
          },
          "coupon_consume_on_use": {
            "type": "boolean",
            "title": "Coupon Consume On Use",
            "description": "If true, the coupon will be consumed when used by decreasing the quantity in the Player's Inventory by 1. If false, the coupon will remain in the Player's inventory after use."
          },
          "coupon_discount_loot": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array",
            "minItems": 0,
            "title": "Coupon Discount Loot",
            "description": "List of Loot IDs this item can discount",
            "default": []
          },
          "coupon_discount_currency_item_name": {
            "type": "string",
            "title": "Coupon Discount Currency Item Name",
            "description": "Name of corresponding currency Item ID "
          },
          "coupon_discount_currency_item_id": {
            "type": "string",
            "format": "uuid",
            "title": "Coupon Discount Currency Item Id",
            "description": "The Item ID of the currency to be used for the coupon."
          },
          "sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sandbox Id",
            "description": "ID of the Sandbox"
          },
          "last_modified_account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Last Modified Account Id",
            "description": "Account ID of the user who last modified the resource"
          },
          "last_modified_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified Timestamp",
            "description": "Timestamp of when the resource was last modified"
          },
          "created_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Created Timestamp",
            "description": "Timestamp of when the resource was created"
          },
          "item_id": {
            "type": "string",
            "format": "uuid",
            "title": "Item Id",
            "description": "The Item ID."
          },
          "legacy_item_id": {
            "type": "integer",
            "minimum": 0,
            "title": "Legacy Item Id",
            "description": "The Legacy Item ID."
          },
          "entitled_loot_name": {
            "type": "string",
            "title": "Entitled Loot Name",
            "description": "Name corresponding entitled Loot ID "
          },
          "level_vendor_name": {
            "type": "string",
            "title": "Level Vendor Name",
            "description": "Name of corresponding level Vendor ID "
          },
          "level_xp_table_name": {
            "type": "string",
            "title": "Level Xp Table Name",
            "description": "Name of corresponding level XP Table ID "
          },
          "inventory_bucket_use_rule_set_name": {
            "type": "string",
            "title": "Inventory Bucket Use Rule Set Name",
            "description": "Name of corresponding Inventory Bucket Use Rule Set ID "
          }
        },
        "type": "object",
        "required": [
          "item_id"
        ],
        "title": "Item",
        "description": "An Item. Item come in a couple of different flavors; determined by the `type` field.\n`Unit` items are stored in a player's catalog.\n`Recipe` items are not stored in a player's catalog and are used to fulfill SubVendor Loot.\n`RecipeWithPriceReduction` items are not stored in a player's catalog and are used to fulfill SubVendor Loot but at a reduced cost if the Player owns some of the Loot.\n`Entitlement` items are stored in a player's catalog and are fulfilled to the player each time an Inventory Session is created and when the Entitlement is fulfilled to the Player."
      },
      "ItemCollection": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Item"
            },
            "type": "array",
            "title": "Data",
            "description": "The Items.",
            "default": []
          },
          "page_meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PageMeta"
              }
            ],
            "title": "Page Meta",
            "description": "The paging metadata."
          }
        },
        "type": "object",
        "required": [
          "page_meta"
        ],
        "title": "ItemCollection",
        "description": "A collection of Items."
      },
      "ItemSortOptions": {
        "type": "string",
        "enum": [
          "item_id",
          "legacy_item_id",
          "type",
          "coupon_currency_item_id",
          "coupon_discount_percentage",
          "inventory_bucket_use_rule_set_id",
          "level_xp_table_id",
          "level_vendor_id",
          "name",
          "description",
          "last_modified_timestamp",
          "last_modified_account_id"
        ],
        "title": "ItemSortOptions",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "item_id",
          "legacy_item_id",
          "type",
          "coupon_discount_currency_item_id",
          "coupon_discount_percentage",
          "inventory_bucket_use_rule_set_id",
          "level_xp_table_id",
          "level_vendor_id",
          "name",
          "description",
          "last_modified_timestamp",
          "last_modified_account_id"
        ]
      },
      "ItemType": {
        "type": "string",
        "enum": [
          "unit",
          "recipe",
          "recipe_with_price_reduction",
          "entitlement"
        ],
        "title": "ItemType",
        "description": "The type of item.",
        "x-enum-descriptions": [
          "An item that is stored in a player's catalog.",
          "A Loot with the ItemType receipt will fulfill SubVendor Loot and will not stored in a player's catalog.",
          "The same as `ItemType.recipe` but will reduce the price based on whether or not the player owns items in the SubVendor's Loot table.",
          "An entitlement is a special item that is stored in a player's catalog and is fulfilled to the player each time an Inventory Session is created and when the Entitlement is fulfilled to the Player."
        ],
        "x-enum-varnames": [
          "unit",
          "recipe",
          "recipe_with_price_reduction",
          "entitlement"
        ]
      },
      "Kv": {
        "properties": {
          "sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sandbox Id",
            "description": "ID of the Sandbox"
          },
          "key": {
            "type": "string",
            "title": "Key",
            "description": "Key (identifier) for this KV pair"
          },
          "value": {
            "type": "string",
            "title": "Value",
            "description": "Value for KV pair"
          },
          "notes": {
            "type": "string",
            "title": "Notes",
            "description": "Notes to store additonal information for reference"
          },
          "created_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Time Zone Aware Datetime",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
          },
          "last_modified_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Time Zone Aware Datetime",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
          }
        },
        "type": "object",
        "required": [
          "key"
        ],
        "title": "Kv"
      },
      "KvRequest": {
        "properties": {
          "value": {
            "type": "string",
            "title": "Value",
            "description": "Value for KV pair"
          },
          "notes": {
            "type": "string",
            "title": "Notes",
            "description": "Notes to store additonal information for reference"
          },
          "key": {
            "type": "string",
            "title": "Key",
            "description": "Key (identifier) for this KV pair"
          }
        },
        "type": "object",
        "required": [
          "key"
        ],
        "title": "KvRequest"
      },
      "KvUpdateRequest": {
        "properties": {
          "value": {
            "type": "string",
            "title": "Value",
            "description": "Value for KV pair"
          },
          "notes": {
            "type": "string",
            "title": "Notes",
            "description": "Notes to store additonal information for reference"
          }
        },
        "type": "object",
        "title": "KvUpdateRequest"
      },
      "LegacyGameBit": {
        "type": "string",
        "enum": [
          "DISABLE_FTP",
          "SERVICE_MODE",
          "DISABLE_PRIVATE_PROFILE",
          "NO_STORE",
          "NO_DYNAMIC_STAT_FLAGS",
          "USE_LOCAL_HOME_MAP",
          "DEMO_MODE",
          "ALWAYS_DELAY_LOGOFF",
          "PING_CHECK",
          "USE_MAP_CACHING",
          "NO_STANDALONE_PLAY",
          "CHAT_NOTIFY_CHANGES",
          "GAME_DOES_LOCAL_TEAMS",
          "MATCH_DOES_LOCAL_TEAMS",
          "CLAN_CAN_CHANGE_SITEID",
          "USE_NO_AI_DISCONNECT",
          "USE_ALT_UI",
          "USE_VA_DEBUG",
          "USE_SIMULATOR",
          "DENY_ALL_CLIENT_AUTHS",
          "USE_ALT_QUEUE_UI",
          "NO_LANDING_PANEL",
          "NO_FORCED_BASIC_TUTORIAL",
          "RECOMMEND_TRAINING_ONLY",
          "ENABLE_UPCOMING_FEATURES",
          "GUARD_PORTAL_PURCHASES",
          "USE_SPECTATOR",
          "GB_ALLOW_LIVE_SPECTATE",
          "GB_ENABLE_PALADINS_NEW_ML",
          "GB_USE_REAL_MONEY_BREAKPOINT",
          "FRIEND_REFERRAL_UI",
          "NO_WISDOM_TAB",
          "NO_PLAYER_QUESTS",
          "NO_DAILY_REWARDS",
          "DISABLE_ACTIVITY_FEED",
          "USE_NEW_ITEM_VENDOR",
          "GLOBAL_SERVER_DB"
        ],
        "title": "LegacyGameBit",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "DISABLE_FTP",
          "SERVICE_MODE",
          "DISABLE_PRIVATE_PROFILE",
          "NO_STORE",
          "NO_DYNAMIC_STAT_FLAGS",
          "USE_LOCAL_HOME_MAP",
          "DEMO_MODE",
          "ALWAYS_DELAY_LOGOFF",
          "PING_CHECK",
          "USE_MAP_CACHING",
          "NO_STANDALONE_PLAY",
          "CHAT_NOTIFY_CHANGES",
          "GAME_DOES_LOCAL_TEAMS",
          "MATCH_DOES_LOCAL_TEAMS",
          "CLAN_CAN_CHANGE_SITEID",
          "USE_NO_AI_DISCONNECT",
          "USE_ALT_UI",
          "USE_VA_DEBUG",
          "USE_SIMULATOR",
          "DENY_ALL_CLIENT_AUTHS",
          "USE_ALT_QUEUE_UI",
          "NO_LANDING_PANEL",
          "NO_FORCED_BASIC_TUTORIAL",
          "RECOMMEND_TRAINING_ONLY",
          "ENABLE_UPCOMING_FEATURES",
          "GUARD_PORTAL_PURCHASES",
          "USE_SPECTATOR",
          "GB_ALLOW_LIVE_SPECTATE",
          "GB_ENABLE_PALADINS_NEW_ML",
          "GB_USE_REAL_MONEY_BREAKPOINT",
          "FRIEND_REFERRAL_UI",
          "NO_WISDOM_TAB",
          "NO_PLAYER_QUESTS",
          "NO_DAILY_REWARDS",
          "DISABLE_ACTIVITY_FEED",
          "USE_NEW_ITEM_VENDOR",
          "GLOBAL_SERVER_DB"
        ]
      },
      "LegacyIdGenerationConfig": {
        "properties": {
          "vendor": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UuidGenerationType"
              }
            ],
            "description": "How to generate Vendor IDs",
            "default": "sequential"
          },
          "loot": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UuidGenerationType"
              }
            ],
            "description": "How to generate Loot IDs",
            "default": "sequential"
          },
          "item": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UuidGenerationType"
              }
            ],
            "description": "How to generate Item IDs",
            "default": "sequential"
          },
          "inventory_bucket_use_rule_set": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UuidGenerationType"
              }
            ],
            "description": "How to generate Inventory Bucket Use Rule Set IDs",
            "default": "sequential"
          },
          "xp": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UuidGenerationType"
              }
            ],
            "description": "How to generate Xp IDs",
            "default": "sequential"
          },
          "role": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UuidGenerationType"
              }
            ],
            "description": "How to generate Role IDs",
            "default": "sequential"
          }
        },
        "type": "object",
        "title": "LegacyIdGenerationConfig",
        "description": "Options used to effect how IDs are generated to help bridge the gap between the legacy int based IDs and the new UUID based IDs.\nThese options will not be supported in the future and it is recommended to stop using anything but UUID4 as soon as possible."
      },
      "LegacyMapSelectionListConfig": {
        "properties": {
          "map_selection_list_id": {
            "type": "integer",
            "title": "Map Selection List Id",
            "description": "Old map selection list id",
            "default": 0
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "LegacyMapSelectionListConfig",
        "description": "Old config used by Legacy systems. These values are ignored by the current APIs"
      },
      "Loot": {
        "properties": {
          "custom_data": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data associated with the resource"
          },
          "name": {
            "type": "string",
            "maxLength": 125,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the resource"
          },
          "description": {
            "type": "string",
            "maxLength": 250,
            "minLength": 1,
            "title": "Description",
            "description": "Description of the resource"
          },
          "item_id": {
            "type": "string",
            "format": "uuid",
            "title": "Item Id",
            "description": "The Item ID. Optional Item that will be granted to the player if Sub Vendor ID is not specified."
          },
          "sub_vendor_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sub Vendor Id",
            "description": "The Sub Vendor ID. Optional Vendor ID that will be used to fulfill the Loot instead of granting the Item."
          },
          "quantity": {
            "type": "integer",
            "title": "Quantity",
            "description": "The quantity of the Item or Sub Vendor to fulfill. This will be multiplied by the quantity of fulfilled Loot and the parent Loot if quantity_type is relative.",
            "default": 1
          },
          "inventory_selector_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InventorySelector"
              }
            ],
            "description": "The Inventory Selector Type. Determine how the Inventory is selected and quantity is modified."
          },
          "inventory_operation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InventoryOperation"
              }
            ],
            "description": "The Inventory Operation. Determine how the Loot quantity is modified based on the context it is fulfilled in. This also determines the order Loot will be fulfilled in when sort_order is the same."
          },
          "active": {
            "type": "boolean",
            "title": "Active",
            "description": "Determines if the Loot is active. Inactive Loot will not be fulfilled.",
            "default": false
          },
          "sort_order": {
            "type": "integer",
            "minimum": 0,
            "title": "Sort Order",
            "description": "The sort order of the Loot. Lower sort order will be fulfilled first. Inventory Operation is used as a tie breaker when sort_order is the same.",
            "default": 0
          },
          "drop_weight": {
            "type": "integer",
            "minimum": 0,
            "title": "Drop Weight",
            "description": "The drop weight of the Loot. Higher drop weight will be more likely to be fulfilled.",
            "default": 0
          },
          "fill_in_new_order": {
            "type": "boolean",
            "title": "Fill In New Order",
            "description": "When dropped in a randomly sampled vendor, will this create a new order or fill inline?. The primary use case for this is when you want the same loot to be dropped multiple times in a randomly sampled vendor.",
            "default": false
          },
          "allow_partial_bundles": {
            "type": "boolean",
            "title": "Allow Partial Bundles",
            "description": "When dropped in a randomly sampled vendor, will the sub vendor allow dropping part of the the bundle?  False means it will only drop if the entire sub vendor can be given to the player",
            "default": true
          },
          "required_item_id": {
            "type": "string",
            "format": "uuid",
            "title": "Required Item Id",
            "description": "Item required to be owned/rented to drop this Loot in a randomly sampled vendor"
          },
          "required_item_count": {
            "type": "integer",
            "minimum": 0,
            "title": "Required Item Count",
            "description": "Amount of the required_item_id to be owned/rented to drop this Loot in a randomly sampled vendor",
            "default": 0
          },
          "stack_limit": {
            "type": "integer",
            "minimum": 0,
            "title": "Stack Limit",
            "description": "Amount of owned/rented of this Loot's item that will prevent this Loot from dropping in a randomly sampled vendor",
            "default": 0
          },
          "quantity_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/QuantityType"
              }
            ],
            "description": "Determines how the quantity is modified in the context it is fulfilled in.",
            "default": "relative"
          },
          "quantity_multi_inventory_item_id": {
            "type": "string",
            "format": "uuid",
            "title": "Quantity Multi Inventory Item Id",
            "description": "When fulfilling Loot if this is set the quantity will be multiplied by the quantity of this Item in the Player's Inventory."
          },
          "is_claimable_by_client": {
            "type": "boolean",
            "title": "Is Claimable By Client",
            "description": "Determines if the Loot can be claimed by the client. This is dangerous without the correct loot confiuration as a client could claim Loot multiple times.",
            "default": false
          },
          "time_frame_id": {
            "type": "string",
            "format": "uuid",
            "title": "Time Frame Id",
            "description": "The Time Frame ID. Optional Time Frame ID that will be used the expiration of Loot when it is fulfilled."
          },
          "use_inventory_bucket": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InventoryBucket"
              }
            ],
            "description": "Inventory Bucket to use for this Loot."
          },
          "xp_quantity_transform_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/XpQuantityTransform"
              }
            ],
            "description": "Allows treating quantity as additional levels to grant to the Player.",
            "default": "none"
          },
          "current_price_point_id": {
            "type": "string",
            "format": "uuid",
            "title": "Current Price Point Id",
            "description": "The current price point id. Optional Price Point ID that will be used to determine the price of the Loot when it is fulfilled."
          },
          "pre_sale_price_point_id": {
            "type": "string",
            "format": "uuid",
            "title": "Pre Sale Price Point Id",
            "description": "The pre sale price point id. Optional Price Point ID that will be used to show the previous price of the Loot."
          },
          "hard_quantity_maximum": {
            "type": "integer",
            "minimum": 0,
            "title": "Hard Quantity Maximum",
            "description": "Hard cap on quantity of an item this Loot can give. Disabled with 0",
            "default": 0
          },
          "sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sandbox Id",
            "description": "ID of the Sandbox"
          },
          "last_modified_account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Last Modified Account Id",
            "description": "Account ID of the user who last modified the resource"
          },
          "last_modified_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified Timestamp",
            "description": "Timestamp of when the resource was last modified"
          },
          "created_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Created Timestamp",
            "description": "Timestamp of when the resource was created"
          },
          "loot_id": {
            "type": "string",
            "format": "uuid",
            "title": "Loot Id",
            "description": "The Loot ID"
          },
          "vendor_id": {
            "type": "string",
            "format": "uuid",
            "title": "Vendor Id",
            "description": "The Vendor ID"
          },
          "legacy_loot_id": {
            "type": "integer",
            "minimum": 0,
            "title": "Legacy Loot Id",
            "description": "The legacy ID of the Loot.",
            "default": 0
          },
          "vendor_name": {
            "type": "string",
            "title": "Vendor Name",
            "description": "Name corresponding Vendor ID "
          },
          "sub_vendor_name": {
            "type": "string",
            "title": "Sub Vendor Name",
            "description": "Name corresponding Sub-Vendor ID "
          },
          "item_name": {
            "type": "string",
            "title": "Item Name",
            "description": "Name corresponding Item ID "
          },
          "required_item_name": {
            "type": "string",
            "title": "Required Item Name",
            "description": "Name corresponding Required Item ID "
          },
          "quantity_multi_inventory_item_name": {
            "type": "string",
            "title": "Quantity Multi Inventory Item Name",
            "description": "Name corresponding Quantity Multi Inventory Item ID "
          },
          "current_price_point_name": {
            "type": "string",
            "title": "Current Price Point Name",
            "description": "Name corresponding Current Price Point ID "
          },
          "pre_sale_price_point_name": {
            "type": "string",
            "title": "Pre Sale Price Point Name",
            "description": "Name corresponding Pre-sale Price Point ID "
          }
        },
        "type": "object",
        "required": [
          "inventory_selector_type",
          "inventory_operation",
          "loot_id",
          "vendor_id"
        ],
        "title": "Loot",
        "description": "Loot determines how an Item fulfilled. When Loot is fulfilled, the Item is granted to the player or the Sub Vendor is fulfilled but not both."
      },
      "LootCollection": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Loot"
            },
            "type": "array",
            "title": "Data",
            "description": "The Loot.",
            "default": []
          },
          "page_meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PageMeta"
              }
            ],
            "title": "Page Meta",
            "description": "The paging metadata."
          }
        },
        "type": "object",
        "required": [
          "page_meta"
        ],
        "title": "LootCollection",
        "description": "A collection of Loot."
      },
      "LootEntitlement": {
        "properties": {
          "loot_id": {
            "type": "string",
            "format": "uuid",
            "title": "Loot Id",
            "description": "The Loot ID."
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EntitlementType"
              }
            ],
            "description": "Determine how the entitlement is handled on the Platform's side. "
          }
        },
        "type": "object",
        "required": [
          "loot_id",
          "type"
        ],
        "title": "LootEntitlement",
        "description": "Represents the mapping of an External SKU to a Loot that will be granted to the player when the player has a matching sku"
      },
      "LootSortOptions": {
        "type": "string",
        "enum": [
          "loot_id",
          "legacy_loot_id",
          "vendor_id",
          "sub_vendor_id",
          "item_id",
          "name",
          "description",
          "inventory_selector",
          "inventory_operation",
          "quantity",
          "active",
          "sort_order",
          "drop_weight",
          "fill_in_new_order",
          "allow_partial_bundles",
          "required_item_count",
          "stack_limit",
          "quantity_type",
          "is_claimable_by_client",
          "xp_quantity_transform_type",
          "use_inventory_bucket",
          "hard_quantity_maximum",
          "last_modified_timestamp"
        ],
        "title": "LootSortOptions",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "loot_id",
          "legacy_loot_id",
          "vendor_id",
          "sub_vendor_id",
          "item_id",
          "name",
          "description",
          "inventory_selector",
          "inventory_operation",
          "quantity",
          "active",
          "sort_order",
          "drop_weight",
          "fill_in_new_order",
          "allow_partial_bundles",
          "required_item_count",
          "stack_limit",
          "quantity_type",
          "is_claimable_by_client",
          "xp_quantity_transform_type",
          "use_inventory_bucket",
          "hard_quantity_maximum",
          "last_modified_timestamp"
        ]
      },
      "MMRGroupingMethod": {
        "type": "string",
        "enum": [
          "worst",
          "best",
          "avg_weighted_by_sigma",
          "avg"
        ],
        "title": "MMRGroupingMethod",
        "description": "What method should be used to determine a linking's group MMR based on the individuals",
        "x-enum-descriptions": [
          "What method should be used to determine a linking's group MMR based on the individuals",
          "What method should be used to determine a linking's group MMR based on the individuals",
          "What method should be used to determine a linking's group MMR based on the individuals",
          "What method should be used to determine a linking's group MMR based on the individuals"
        ],
        "x-enum-varnames": [
          "WORST",
          "BEST",
          "AVERAGE_BY_VARIANCE",
          "AVERAGE"
        ]
      },
      "MachineClass": {
        "properties": {
          "datacenter_provider": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DatacenterProvider"
              }
            ],
            "title": "Datacenter Provider",
            "description": "The provider this machine class is associated with"
          },
          "name": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Name",
            "description": "The name of the machine class used by the provider"
          },
          "type": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Type",
            "description": "The type of machine class used by the provider. General Purpose, CPU Optimized, etc."
          },
          "labels": {
            "items": {
              "type": "string",
              "maxLength": 64,
              "minLength": 1
            },
            "type": "array",
            "title": "Labels",
            "description": "Labels that can be applied to the machine class for organizational purposes"
          },
          "monthly_price": {
            "type": "number",
            "title": "Monthly Price",
            "description": "The monthly price of this machine class"
          },
          "hourly_price": {
            "type": "number",
            "title": "Hourly Price",
            "description": "The hourly price of this machine class"
          },
          "cpu_count": {
            "type": "integer",
            "title": "Cpu Count",
            "description": "The number of CPUs"
          },
          "cpu_info": {
            "type": "string",
            "minLength": 1,
            "title": "Cpu Info",
            "description": "A description of the CPU including type, family, model, and stepping"
          },
          "cpu_type": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Cpu Type",
            "description": "The short description of the CPU type. e.g. Intel Xeon E5-2673 v4 @ 2.30GHz"
          },
          "cpu_sockets": {
            "type": "integer",
            "title": "Cpu Sockets",
            "description": "The number of populated CPU sockets"
          },
          "cpu_cores": {
            "type": "integer",
            "title": "Cpu Cores",
            "description": "The number of CPU cores"
          },
          "cpu_threads": {
            "type": "integer",
            "title": "Cpu Threads",
            "description": "The number of CPU threads. Will be more than cores if hyperthreading is enabled."
          },
          "memory_size_gigabytes": {
            "type": "integer",
            "title": "Memory Size Gigabytes",
            "description": "The amount of memory in gigabytes"
          },
          "memory_type": {
            "type": "string",
            "maxLength": 32,
            "minLength": 1,
            "title": "Memory Type",
            "description": "The type of memory. e.g. DDR4"
          },
          "memory_speed_rating": {
            "type": "integer",
            "title": "Memory Speed Rating",
            "description": "The speed rating of the memory in MHz"
          },
          "memory_timings": {
            "type": "string",
            "maxLength": 32,
            "minLength": 1,
            "title": "Memory Timings",
            "description": "The memory timings. e.g. 15-15-15-36"
          },
          "disk_type": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Disk Type",
            "description": "The type of disk. e.g. SSD"
          },
          "disk_size_gigabytes": {
            "type": "integer",
            "title": "Disk Size Gigabytes",
            "description": "The size of the disk in gigabytes"
          },
          "disk_sequential_read": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Disk Sequential Read",
            "description": "The sequential read speed of the disk"
          },
          "disk_sequential_write": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Disk Sequential Write",
            "description": "The sequential write speed of the disk"
          },
          "disk_random_read": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Disk Random Read",
            "description": "The random read speed of the disk"
          },
          "disk_random_write": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Disk Random Write",
            "description": "The random write speed of the disk"
          },
          "disk_iops": {
            "type": "integer",
            "title": "Disk Iops",
            "description": "The number of IOPS the disk can handle"
          },
          "disk_latency_ms": {
            "type": "integer",
            "title": "Disk Latency Ms",
            "description": "The latency of the disk in milliseconds"
          },
          "network_gbps": {
            "type": "integer",
            "title": "Network Gbps",
            "description": "The network speed in gigabits per second"
          },
          "gpu_type": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Gpu Type",
            "description": "The type of GPU. e.g. NVIDIA Tesla V100"
          },
          "gpu_count": {
            "type": "integer",
            "title": "Gpu Count",
            "description": "The number of GPUs"
          },
          "gpu_memory_gigabytes": {
            "type": "integer",
            "title": "Gpu Memory Gigabytes",
            "description": "The amount of GPU memory in gigabytes. Should be the lowest available memory if there are multiple GPUs."
          },
          "machine_class_id": {
            "type": "string",
            "format": "uuid",
            "title": "Machine Class Id"
          }
        },
        "type": "object",
        "required": [
          "datacenter_provider",
          "name",
          "type",
          "machine_class_id"
        ],
        "title": "MachineClass",
        "description": "A description of a type of performance characteristics either real or virtual. At DigitalOcean and Azure this is called VM Size. At AWS this is\ncalled Instance type. At Google this is called machine type or machine configuration."
      },
      "MachineClassCreate": {
        "properties": {
          "datacenter_provider": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DatacenterProvider"
              }
            ],
            "title": "Datacenter Provider",
            "description": "The provider this machine class is associated with"
          },
          "name": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Name",
            "description": "The name of the machine class used by the provider"
          },
          "type": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Type",
            "description": "The type of machine class used by the provider. General Purpose, CPU Optimized, etc."
          },
          "labels": {
            "items": {
              "type": "string",
              "maxLength": 64,
              "minLength": 1
            },
            "type": "array",
            "title": "Labels",
            "description": "Labels that can be applied to the machine class for organizational purposes"
          },
          "monthly_price": {
            "type": "number",
            "title": "Monthly Price",
            "description": "The monthly price of this machine class"
          },
          "hourly_price": {
            "type": "number",
            "title": "Hourly Price",
            "description": "The hourly price of this machine class"
          },
          "cpu_count": {
            "type": "integer",
            "title": "Cpu Count",
            "description": "The number of CPUs"
          },
          "cpu_info": {
            "type": "string",
            "minLength": 1,
            "title": "Cpu Info",
            "description": "A description of the CPU including type, family, model, and stepping"
          },
          "cpu_type": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Cpu Type",
            "description": "The short description of the CPU type. e.g. Intel Xeon E5-2673 v4 @ 2.30GHz"
          },
          "cpu_sockets": {
            "type": "integer",
            "title": "Cpu Sockets",
            "description": "The number of populated CPU sockets"
          },
          "cpu_cores": {
            "type": "integer",
            "title": "Cpu Cores",
            "description": "The number of CPU cores"
          },
          "cpu_threads": {
            "type": "integer",
            "title": "Cpu Threads",
            "description": "The number of CPU threads. Will be more than cores if hyperthreading is enabled."
          },
          "memory_size_gigabytes": {
            "type": "integer",
            "title": "Memory Size Gigabytes",
            "description": "The amount of memory in gigabytes"
          },
          "memory_type": {
            "type": "string",
            "maxLength": 32,
            "minLength": 1,
            "title": "Memory Type",
            "description": "The type of memory. e.g. DDR4"
          },
          "memory_speed_rating": {
            "type": "integer",
            "title": "Memory Speed Rating",
            "description": "The speed rating of the memory in MHz"
          },
          "memory_timings": {
            "type": "string",
            "maxLength": 32,
            "minLength": 1,
            "title": "Memory Timings",
            "description": "The memory timings. e.g. 15-15-15-36"
          },
          "disk_type": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Disk Type",
            "description": "The type of disk. e.g. SSD"
          },
          "disk_size_gigabytes": {
            "type": "integer",
            "title": "Disk Size Gigabytes",
            "description": "The size of the disk in gigabytes"
          },
          "disk_sequential_read": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Disk Sequential Read",
            "description": "The sequential read speed of the disk"
          },
          "disk_sequential_write": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Disk Sequential Write",
            "description": "The sequential write speed of the disk"
          },
          "disk_random_read": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Disk Random Read",
            "description": "The random read speed of the disk"
          },
          "disk_random_write": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Disk Random Write",
            "description": "The random write speed of the disk"
          },
          "disk_iops": {
            "type": "integer",
            "title": "Disk Iops",
            "description": "The number of IOPS the disk can handle"
          },
          "disk_latency_ms": {
            "type": "integer",
            "title": "Disk Latency Ms",
            "description": "The latency of the disk in milliseconds"
          },
          "network_gbps": {
            "type": "integer",
            "title": "Network Gbps",
            "description": "The network speed in gigabits per second"
          },
          "gpu_type": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Gpu Type",
            "description": "The type of GPU. e.g. NVIDIA Tesla V100"
          },
          "gpu_count": {
            "type": "integer",
            "title": "Gpu Count",
            "description": "The number of GPUs"
          },
          "gpu_memory_gigabytes": {
            "type": "integer",
            "title": "Gpu Memory Gigabytes",
            "description": "The amount of GPU memory in gigabytes. Should be the lowest available memory if there are multiple GPUs."
          },
          "datacenter_provider_id": {
            "type": "string",
            "format": "uuid",
            "title": "Datacenter Provider Id"
          }
        },
        "type": "object",
        "required": [
          "name",
          "type"
        ],
        "title": "MachineClassCreate",
        "description": "A description of a type of performance characteristics either real or virtual. At DigitalOcean and Azure this is called VM Size. At AWS this is\ncalled Instance type. At Google this is called machine type or machine configuration."
      },
      "MachineClassLabel": {
        "properties": {
          "label": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Label",
            "description": "The text of the label"
          },
          "machine_class_id": {
            "type": "string",
            "format": "uuid",
            "title": "Machine Class Id",
            "description": "The ID of the MachineClass this label is associated with"
          },
          "machine_class_label_id": {
            "type": "integer",
            "title": "Machine Class Label Id"
          }
        },
        "type": "object",
        "required": [
          "label",
          "machine_class_id",
          "machine_class_label_id"
        ],
        "title": "MachineClassLabel",
        "description": "Labels that can be applied to MachineClasses. Useful for creating groups of machine classes. Some examples might be:\n\nOPS may want a higher-level name that represents what they consider the \"same\" sort of machine across multiple provider types. This way they could\nsee all of them grouped together.\n\nThis can be used to help implement the classic \"performance groups\". So you may have labels like \"can_support_realm_royale_100_man\" or\n\"can_support_dko_1v1\" ."
      },
      "MachineClassLabelCreate": {
        "properties": {
          "label": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Label",
            "description": "The text of the label"
          },
          "machine_class_id": {
            "type": "string",
            "format": "uuid",
            "title": "Machine Class Id",
            "description": "The ID of the MachineClass this label is associated with"
          }
        },
        "type": "object",
        "required": [
          "label",
          "machine_class_id"
        ],
        "title": "MachineClassLabelCreate",
        "description": "Labels that can be applied to MachineClasses. Useful for creating groups of machine classes. Some examples might be:\n\nOPS may want a higher-level name that represents what they consider the \"same\" sort of machine across multiple provider types. This way they could\nsee all of them grouped together.\n\nThis can be used to help implement the classic \"performance groups\". So you may have labels like \"can_support_realm_royale_100_man\" or\n\"can_support_dko_1v1\" ."
      },
      "MachineClassUpdate": {
        "properties": {
          "datacenter_provider": {
            "$ref": "#/components/schemas/DatacenterProvider"
          },
          "name": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Name"
          },
          "type": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Type"
          },
          "labels": {
            "items": {
              "type": "string",
              "maxLength": 64,
              "minLength": 1
            },
            "type": "array",
            "title": "Labels",
            "description": "Labels that can be applied to the machine class for organizational purposes"
          },
          "monthly_price": {
            "type": "number",
            "title": "Monthly Price",
            "description": "The monthly price of this machine class"
          },
          "hourly_price": {
            "type": "number",
            "title": "Hourly Price",
            "description": "The hourly price of this machine class"
          },
          "cpu_count": {
            "type": "integer",
            "title": "Cpu Count",
            "description": "The number of CPUs"
          },
          "cpu_info": {
            "type": "string",
            "minLength": 1,
            "title": "Cpu Info",
            "description": "A description of the CPU including type, family, model, and stepping"
          },
          "cpu_type": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Cpu Type",
            "description": "The short description of the CPU type. e.g. Intel Xeon E5-2673 v4 @ 2.30GHz"
          },
          "cpu_sockets": {
            "type": "integer",
            "title": "Cpu Sockets",
            "description": "The number of populated CPU sockets"
          },
          "cpu_cores": {
            "type": "integer",
            "title": "Cpu Cores",
            "description": "The number of CPU cores"
          },
          "cpu_threads": {
            "type": "integer",
            "title": "Cpu Threads",
            "description": "The number of CPU threads. Will be more than cores if hyperthreading is enabled."
          },
          "memory_size_gigabytes": {
            "type": "integer",
            "title": "Memory Size Gigabytes",
            "description": "The amount of memory in gigabytes"
          },
          "memory_type": {
            "type": "string",
            "maxLength": 32,
            "minLength": 1,
            "title": "Memory Type",
            "description": "The type of memory. e.g. DDR4"
          },
          "memory_speed_rating": {
            "type": "integer",
            "title": "Memory Speed Rating",
            "description": "The speed rating of the memory in MHz"
          },
          "memory_timings": {
            "type": "string",
            "maxLength": 32,
            "minLength": 1,
            "title": "Memory Timings",
            "description": "The memory timings. e.g. 15-15-15-36"
          },
          "disk_type": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Disk Type",
            "description": "The type of disk. e.g. SSD"
          },
          "disk_size_gigabytes": {
            "type": "integer",
            "title": "Disk Size Gigabytes",
            "description": "The size of the disk in gigabytes"
          },
          "disk_sequential_read": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Disk Sequential Read",
            "description": "The sequential read speed of the disk"
          },
          "disk_sequential_write": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Disk Sequential Write",
            "description": "The sequential write speed of the disk"
          },
          "disk_random_read": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Disk Random Read",
            "description": "The random read speed of the disk"
          },
          "disk_random_write": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Disk Random Write",
            "description": "The random write speed of the disk"
          },
          "disk_iops": {
            "type": "integer",
            "title": "Disk Iops",
            "description": "The number of IOPS the disk can handle"
          },
          "disk_latency_ms": {
            "type": "integer",
            "title": "Disk Latency Ms",
            "description": "The latency of the disk in milliseconds"
          },
          "network_gbps": {
            "type": "integer",
            "title": "Network Gbps",
            "description": "The network speed in gigabits per second"
          },
          "gpu_type": {
            "type": "string",
            "maxLength": 64,
            "minLength": 1,
            "title": "Gpu Type",
            "description": "The type of GPU. e.g. NVIDIA Tesla V100"
          },
          "gpu_count": {
            "type": "integer",
            "title": "Gpu Count",
            "description": "The number of GPUs"
          },
          "gpu_memory_gigabytes": {
            "type": "integer",
            "title": "Gpu Memory Gigabytes",
            "description": "The amount of GPU memory in gigabytes. Should be the lowest available memory if there are multiple GPUs."
          },
          "datacenter_provider_id": {
            "type": "string",
            "format": "uuid",
            "title": "Datacenter Provider Id"
          }
        },
        "type": "object",
        "title": "MachineClassUpdate",
        "description": "A description of a type of performance characteristics either real or virtual. At DigitalOcean and Azure this is called VM Size. At AWS this is\ncalled Instance type. At Google this is called machine type or machine configuration."
      },
      "MachineClassVersionsAndTransactions": {
        "properties": {
          "versions": {
            "items": {
              "$ref": "#/components/schemas/MachineClass"
            },
            "type": "array",
            "title": "Versions"
          },
          "transactions": {
            "items": {
              "$ref": "#/components/schemas/Transaction"
            },
            "type": "array",
            "title": "Transactions"
          }
        },
        "type": "object",
        "required": [
          "versions",
          "transactions"
        ],
        "title": "MachineClassVersionsAndTransactions"
      },
      "MachineImage": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "title": "Name",
            "description": "The name within the context of the provider. This could be a registry path or an AWS image name."
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "A long form description of the image that will only be used for documentation purposes"
          },
          "machine_image_id": {
            "type": "string",
            "format": "uuid",
            "title": "Machine Image Id"
          }
        },
        "type": "object",
        "required": [
          "name",
          "machine_image_id"
        ],
        "title": "MachineImage"
      },
      "MachineImageCreate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "title": "Name",
            "description": "The name within the context of the provider. This could be a registry path or an AWS image name."
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "A long form description of the image that will only be used for documentation purposes"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "MachineImageCreate"
      },
      "MachineImageUpdate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "title": "Name",
            "description": "The name within the context of the provider. This could be a registry path or an AWS image name."
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "A long form description of the image that will only be used for documentation purposes"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "MachineImageUpdate"
      },
      "MachineImageVersionsAndTransactions": {
        "properties": {
          "versions": {
            "items": {
              "$ref": "#/components/schemas/MachineImage"
            },
            "type": "array",
            "title": "Versions"
          },
          "transactions": {
            "items": {
              "$ref": "#/components/schemas/Transaction"
            },
            "type": "array",
            "title": "Transactions"
          }
        },
        "type": "object",
        "required": [
          "versions",
          "transactions"
        ],
        "title": "MachineImageVersionsAndTransactions"
      },
      "Map": {
        "properties": {
          "map_name": {
            "type": "string",
            "maxLength": 4096,
            "minLength": 1,
            "title": "Map Name",
            "description": "The name of the map that will be loaded into"
          },
          "mode": {
            "type": "string",
            "maxLength": 4096,
            "minLength": 1,
            "title": "Mode",
            "description": "An optional mode that will be loaded into"
          },
          "legacy_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dependencies__sandbox_config__matchmaking__maps_schemas__LegacyConfig"
              }
            ],
            "title": "Legacy Config",
            "description": "Old config used by Legacy systems. These values are ignored by the current APIs"
          },
          "sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sandbox Id",
            "description": "ID of the Sandbox"
          },
          "last_modified_account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Last Modified Account Id",
            "description": "Account ID of the user who last modified the resource"
          },
          "last_modified_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified Timestamp",
            "description": "Timestamp of when the resource was last modified"
          },
          "created_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Created Timestamp",
            "description": "Timestamp of when this resource was created"
          },
          "map_id": {
            "type": "string",
            "format": "uuid",
            "title": "Map Id",
            "description": "ID to uniquely identify this Map"
          }
        },
        "type": "object",
        "required": [
          "map_name",
          "mode",
          "map_id"
        ],
        "title": "Map"
      },
      "MapRequest": {
        "properties": {
          "map_name": {
            "type": "string",
            "maxLength": 4096,
            "minLength": 1,
            "title": "Map Name",
            "description": "The name of the map that will be loaded into"
          },
          "mode": {
            "type": "string",
            "maxLength": 4096,
            "minLength": 1,
            "title": "Mode",
            "description": "An optional mode that will be loaded into"
          },
          "legacy_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dependencies__sandbox_config__matchmaking__maps_schemas__LegacyConfig"
              }
            ],
            "title": "Legacy Config",
            "description": "Old config used by Legacy systems. These values are ignored by the current APIs"
          }
        },
        "type": "object",
        "required": [
          "map_name",
          "mode"
        ],
        "title": "MapRequest"
      },
      "MapSelectionList": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Name",
            "description": "Readable name for this MapSelectionList"
          },
          "sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sandbox Id",
            "description": "ID of the Sandbox"
          },
          "last_modified_account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Last Modified Account Id",
            "description": "Account ID of the user who last modified the resource"
          },
          "last_modified_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified Timestamp",
            "description": "Timestamp of when the resource was last modified"
          },
          "created_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Created Timestamp",
            "description": "Timestamp of when this resource was created"
          },
          "map_selection_list_id": {
            "type": "string",
            "format": "uuid",
            "title": "Map Selection List Id",
            "description": "ID to uniquely identify this MapSelectionList"
          }
        },
        "type": "object",
        "required": [
          "name",
          "map_selection_list_id"
        ],
        "title": "MapSelectionList"
      },
      "MapSelectionListBase": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Name",
            "description": "Readable name for this MapSelectionList"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "MapSelectionListBase"
      },
      "MapSelectionListEntry": {
        "properties": {
          "map_weight": {
            "type": "integer",
            "minimum": 0,
            "title": "Map Weight",
            "description": "The weight given to this entry when choosing from the MapSelectionList"
          },
          "map_id": {
            "type": "string",
            "format": "uuid",
            "title": "Map Id",
            "description": "Which Map this entry refers to"
          },
          "sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sandbox Id",
            "description": "ID of the Sandbox"
          },
          "last_modified_account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Last Modified Account Id",
            "description": "Account ID of the user who last modified the resource"
          },
          "last_modified_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified Timestamp",
            "description": "Timestamp of when the resource was last modified"
          },
          "created_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Created Timestamp",
            "description": "Timestamp of when this resource was created"
          },
          "map_selection_list_id": {
            "type": "string",
            "format": "uuid",
            "title": "Map Selection List Id",
            "description": "Which MapSelectionList this entry belongs to"
          },
          "map_selection_list_entry_id": {
            "type": "string",
            "format": "uuid",
            "title": "Map Selection List Entry Id",
            "description": "ID to uniquely identify this MapSelectionListEntry"
          }
        },
        "type": "object",
        "required": [
          "map_weight",
          "map_id",
          "map_selection_list_id",
          "map_selection_list_entry_id"
        ],
        "title": "MapSelectionListEntry"
      },
      "MapSelectionListEntryFlattened": {
        "properties": {
          "map_weight": {
            "type": "integer",
            "minimum": 0,
            "title": "Map Weight",
            "description": "The weight given to this entry when choosing from the MapSelectionList"
          },
          "map_id": {
            "type": "string",
            "format": "uuid",
            "title": "Map Id",
            "description": "Which Map this entry refers to"
          },
          "sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sandbox Id",
            "description": "ID of the Sandbox"
          },
          "last_modified_account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Last Modified Account Id",
            "description": "Account ID of the user who last modified the resource"
          },
          "last_modified_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified Timestamp",
            "description": "Timestamp of when the resource was last modified"
          },
          "created_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Created Timestamp",
            "description": "Timestamp of when this resource was created"
          },
          "map_selection_list_id": {
            "type": "string",
            "format": "uuid",
            "title": "Map Selection List Id",
            "description": "Which MapSelectionList this entry belongs to"
          },
          "map_selection_list_entry_id": {
            "type": "string",
            "format": "uuid",
            "title": "Map Selection List Entry Id",
            "description": "ID to uniquely identify this MapSelectionListEntry"
          },
          "map": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Map"
              }
            ],
            "title": "Map",
            "description": "The Map that this is an entry for"
          }
        },
        "type": "object",
        "required": [
          "map_weight",
          "map_id",
          "map_selection_list_id",
          "map_selection_list_entry_id"
        ],
        "title": "MapSelectionListEntryFlattened"
      },
      "MapSelectionListEntryRequest": {
        "properties": {
          "map_weight": {
            "type": "integer",
            "minimum": 0,
            "title": "Map Weight",
            "description": "The weight given to this entry when choosing from the MapSelectionList"
          },
          "map_id": {
            "type": "string",
            "format": "uuid",
            "title": "Map Id",
            "description": "Which Map this entry refers to"
          }
        },
        "type": "object",
        "required": [
          "map_weight",
          "map_id"
        ],
        "title": "MapSelectionListEntryRequest"
      },
      "MapSelectionListEntryUpdateRequest": {
        "properties": {
          "map_weight": {
            "type": "integer",
            "minimum": 0,
            "title": "Map Weight",
            "description": "The weight given to this entry when choosing from the MapSelectionList"
          },
          "map_id": {
            "type": "string",
            "format": "uuid",
            "title": "Map Id",
            "description": "Which Map this entry refers to"
          }
        },
        "type": "object",
        "title": "MapSelectionListEntryUpdateRequest"
      },
      "MapSelectionListFlattened": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Name",
            "description": "Readable name for this MapSelectionList"
          },
          "sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sandbox Id",
            "description": "ID of the Sandbox"
          },
          "last_modified_account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Last Modified Account Id",
            "description": "Account ID of the user who last modified the resource"
          },
          "last_modified_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified Timestamp",
            "description": "Timestamp of when the resource was last modified"
          },
          "created_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Created Timestamp",
            "description": "Timestamp of when this resource was created"
          },
          "map_selection_list_id": {
            "type": "string",
            "format": "uuid",
            "title": "Map Selection List Id",
            "description": "ID to uniquely identify this MapSelectionList"
          },
          "maps": {
            "items": {
              "$ref": "#/components/schemas/MapSelectionListEntryFlattened"
            },
            "type": "array",
            "title": "Maps",
            "description": "List of Maps that belong to this selection list",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "name",
          "map_selection_list_id"
        ],
        "title": "MapSelectionListFlattened"
      },
      "MapSelectionListRequest": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Name",
            "description": "Readable name for this MapSelectionList"
          },
          "legacy_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LegacyMapSelectionListConfig"
              }
            ],
            "title": "Legacy Config",
            "description": "Old config used by Legacy systems. These values are ignored by the current APIs"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "MapSelectionListRequest"
      },
      "MapSelectionListUpdateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Name",
            "description": "Readable name for this MapSelectionList"
          }
        },
        "type": "object",
        "title": "MapSelectionListUpdateRequest"
      },
      "MapUpdateRequest": {
        "properties": {
          "map_name": {
            "type": "string",
            "maxLength": 4096,
            "minLength": 1,
            "title": "Map Name",
            "description": "The name of the map that will be loaded into"
          },
          "mode": {
            "type": "string",
            "maxLength": 4096,
            "minLength": 1,
            "title": "Mode",
            "description": "An optional mode that will be loaded into"
          },
          "legacy_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dependencies__sandbox_config__matchmaking__maps_schemas__LegacyConfig"
              }
            ],
            "title": "Legacy Config",
            "description": "Old config used by Legacy systems. These values are ignored by the current APIs"
          }
        },
        "type": "object",
        "title": "MapUpdateRequest"
      },
      "MatchMakingFunctionClientType": {
        "type": "string",
        "enum": [
          "GRPC",
          "REST"
        ],
        "title": "MatchMakingFunctionClientType",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "GRPC",
          "REST"
        ]
      },
      "MatchMakingFunctionConfig": {
        "properties": {
          "host": {
            "type": "string",
            "minLength": 1,
            "title": "Host",
            "description": "The name of the matchmaking function that will be used to propose matches",
            "default": "hirez-matchmakingfunction"
          },
          "port": {
            "type": "integer",
            "minimum": 0,
            "title": "Port",
            "description": "Which port the specified matchmaking function listens on",
            "default": 50502
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MatchMakingFunctionClientType"
              }
            ],
            "description": "Which client type the specified matchmaking function uses",
            "default": "GRPC"
          }
        },
        "type": "object",
        "title": "MatchMakingFunctionConfig"
      },
      "MatchMakingProfile": {
        "properties": {
          "join_mode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProfileJoinMode"
              }
            ],
            "description": "What mode to set on the MatchMakingProfile (normal, backfill etc)",
            "default": "normal"
          },
          "rank_id": {
            "type": "string",
            "format": "uuid",
            "title": "Rank Id",
            "description": "Which rank this queue should use MMR from to make matches from, and update at the end of match (1v1 MMR or 2v2 MMR for example)"
          },
          "num_sides": {
            "type": "integer",
            "minimum": 1,
            "title": "Num Sides",
            "description": "The number of sides a game in this queue will have (2 in a 1v1 and 3 in a 1v1v1 for example"
          },
          "min_players_per_side": {
            "type": "integer",
            "minimum": 0,
            "title": "Min Players Per Side",
            "description": "The minimum number of players that can be on each team"
          },
          "max_players_per_side": {
            "type": "integer",
            "minimum": 1,
            "title": "Max Players Per Side",
            "description": "The maximum number of players that can be on each team"
          },
          "min_players_per_linking": {
            "type": "integer",
            "minimum": 1,
            "title": "Min Players Per Linking",
            "description": "The minimum number of players that can be on a single linking (a party)"
          },
          "max_players_per_linking": {
            "type": "integer",
            "minimum": 1,
            "title": "Max Players Per Linking",
            "description": "The maximum number of players that can be on a single linking (a party)"
          },
          "max_side_delta": {
            "type": "integer",
            "minimum": 0,
            "title": "Max Side Delta",
            "description": "The maximum difference in players per side when generating a match from this profile"
          },
          "instance_request_template_id": {
            "type": "string",
            "format": "uuid",
            "title": "Instance Request Template Id",
            "description": "Which instance request template is used for matches generated from this profile"
          },
          "taskforce_size_by_time": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaskforceSizeByTime"
              }
            ],
            "title": "Taskforce Size By Time",
            "description": "JSon config for decaying minimum team sizes over time"
          },
          "match_making_function_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MatchMakingFunctionConfig"
              }
            ],
            "title": "Match Making Function Config",
            "description": "JSon config about which matchmaking function should be used to try and propose matches for this profile"
          },
          "match_making_stride_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Stride Id",
            "description": "Which matchmaking strides should be used to divide the queue population"
          },
          "crossplay_partition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Crossplay Partition Id",
            "description": "Which set of CrossplayPartitions rules should be used when generating matches in this profile"
          },
          "legacy_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dependencies__sandbox_config__matchmaking__profiles_schemas__LegacyConfig"
              }
            ],
            "title": "Legacy Config",
            "description": "Old config used by Legacy systems. These values are ignored by the current APIs"
          },
          "trueskill_quality_by_time_max_quality": {
            "type": "number",
            "title": "Trueskill Quality By Time Max Quality",
            "description": "The trueskill quality threshold that this profile will start trying to match with"
          },
          "trueskill_quality_by_time_max_minutes": {
            "type": "number",
            "title": "Trueskill Quality By Time Max Minutes",
            "description": "The max amount of time we will try to create matches before quality will be disregarded"
          },
          "trueskill_quality_by_time_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TrueSkillQualityByTimeMethod"
              }
            ],
            "description": "Method used to decay the required quality of matches over time. Currently only 'two_term_quadratic' is supported",
            "default": "two_term_quadratic"
          },
          "active": {
            "type": "boolean",
            "title": "Active",
            "description": "Flag determining whether or not this profile will actively be ticked"
          },
          "supports_backfill": {
            "type": "boolean",
            "title": "Supports Backfill",
            "description": "Flag determining whether or not backfill objects should be created when generating matches in this profile"
          },
          "sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sandbox Id",
            "description": "ID of the Sandbox"
          },
          "last_modified_account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Last Modified Account Id",
            "description": "Account ID of the user who last modified the resource"
          },
          "last_modified_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified Timestamp",
            "description": "Timestamp of when the resource was last modified"
          },
          "created_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Created Timestamp",
            "description": "Timestamp of when this resource was created"
          },
          "match_making_profile_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Profile Id",
            "description": "ID to uniquely identify this MatchMakingProfile"
          }
        },
        "type": "object",
        "required": [
          "rank_id",
          "num_sides",
          "min_players_per_side",
          "max_players_per_side",
          "min_players_per_linking",
          "max_players_per_linking",
          "max_side_delta",
          "instance_request_template_id",
          "match_making_function_config",
          "match_making_stride_id",
          "crossplay_partition_id",
          "active",
          "supports_backfill",
          "match_making_profile_id"
        ],
        "title": "MatchMakingProfile"
      },
      "MatchMakingProfileList": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Name",
            "description": "Readable name for this list of MatchMakingProfiles"
          },
          "sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sandbox Id",
            "description": "ID of the Sandbox"
          },
          "last_modified_account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Last Modified Account Id",
            "description": "Account ID of the user who last modified the resource"
          },
          "last_modified_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified Timestamp",
            "description": "Timestamp of when the resource was last modified"
          },
          "created_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Created Timestamp",
            "description": "Timestamp of when this resource was created"
          },
          "match_making_profile_list_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Profile List Id",
            "description": "ID to uniquely identify this list of MatchMakingProfiles"
          }
        },
        "type": "object",
        "required": [
          "name",
          "match_making_profile_list_id"
        ],
        "title": "MatchMakingProfileList"
      },
      "MatchMakingProfileListEntry": {
        "properties": {
          "match_making_profile_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Profile Id",
            "description": "Which MatchMakingProfile this entry refers to"
          },
          "sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sandbox Id",
            "description": "ID of the Sandbox"
          },
          "last_modified_account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Last Modified Account Id",
            "description": "Account ID of the user who last modified the resource"
          },
          "last_modified_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified Timestamp",
            "description": "Timestamp of when the resource was last modified"
          },
          "created_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Created Timestamp",
            "description": "Timestamp of when this resource was created"
          },
          "match_making_profile_list_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Profile List Id",
            "description": "Which MatchMakingProfileList this entry belongs to"
          },
          "match_making_profile_list_entry_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Profile List Entry Id",
            "description": "ID to uniquely identify this MatchMakingProfileListEntry"
          }
        },
        "type": "object",
        "required": [
          "match_making_profile_id",
          "match_making_profile_list_id",
          "match_making_profile_list_entry_id"
        ],
        "title": "MatchMakingProfileListEntry"
      },
      "MatchMakingProfileListEntryRequest": {
        "properties": {
          "match_making_profile_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Profile Id",
            "description": "Which MatchMakingProfile this entry refers to"
          }
        },
        "type": "object",
        "required": [
          "match_making_profile_id"
        ],
        "title": "MatchMakingProfileListEntryRequest"
      },
      "MatchMakingProfileListEntryUpdateRequest": {
        "properties": {
          "match_making_profile_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Profile Id",
            "description": "Which MatchMakingProfile this entry refers to"
          }
        },
        "type": "object",
        "title": "MatchMakingProfileListEntryUpdateRequest"
      },
      "MatchMakingProfileListFlattened": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Name",
            "description": "Readable name for this list of MatchMakingProfiles"
          },
          "sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sandbox Id",
            "description": "ID of the Sandbox"
          },
          "last_modified_account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Last Modified Account Id",
            "description": "Account ID of the user who last modified the resource"
          },
          "last_modified_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified Timestamp",
            "description": "Timestamp of when the resource was last modified"
          },
          "created_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Created Timestamp",
            "description": "Timestamp of when this resource was created"
          },
          "match_making_profile_list_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Profile List Id",
            "description": "ID to uniquely identify this list of MatchMakingProfiles"
          },
          "profiles": {
            "items": {
              "$ref": "#/components/schemas/MatchMakingProfile"
            },
            "type": "array",
            "title": "Profiles",
            "description": "List of MatchMakingProfiles in this list",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "name",
          "match_making_profile_list_id"
        ],
        "title": "MatchMakingProfileListFlattened"
      },
      "MatchMakingProfileListRequest": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Name",
            "description": "Readable name for this list of MatchMakingProfiles"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "MatchMakingProfileListRequest"
      },
      "MatchMakingProfileListUpdateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Name",
            "description": "Readable name for this list of MatchMakingProfiles"
          }
        },
        "type": "object",
        "title": "MatchMakingProfileListUpdateRequest"
      },
      "MatchMakingProfileRequest": {
        "properties": {
          "join_mode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProfileJoinMode"
              }
            ],
            "description": "What mode to set on the MatchMakingProfile (normal, backfill etc)",
            "default": "normal"
          },
          "rank_id": {
            "type": "string",
            "format": "uuid",
            "title": "Rank Id",
            "description": "Which rank this queue should use MMR from to make matches from, and update at the end of match (1v1 MMR or 2v2 MMR for example)"
          },
          "num_sides": {
            "type": "integer",
            "minimum": 1,
            "title": "Num Sides",
            "description": "The number of sides a game in this queue will have (2 in a 1v1 and 3 in a 1v1v1 for example"
          },
          "min_players_per_side": {
            "type": "integer",
            "minimum": 0,
            "title": "Min Players Per Side",
            "description": "The minimum number of players that can be on each team"
          },
          "max_players_per_side": {
            "type": "integer",
            "minimum": 1,
            "title": "Max Players Per Side",
            "description": "The maximum number of players that can be on each team"
          },
          "min_players_per_linking": {
            "type": "integer",
            "minimum": 1,
            "title": "Min Players Per Linking",
            "description": "The minimum number of players that can be on a single linking (a party)"
          },
          "max_players_per_linking": {
            "type": "integer",
            "minimum": 1,
            "title": "Max Players Per Linking",
            "description": "The maximum number of players that can be on a single linking (a party)"
          },
          "max_side_delta": {
            "type": "integer",
            "minimum": 0,
            "title": "Max Side Delta",
            "description": "The maximum difference in players per side when generating a match from this profile"
          },
          "instance_request_template_id": {
            "type": "string",
            "format": "uuid",
            "title": "Instance Request Template Id",
            "description": "Which instance request template is used for matches generated from this profile"
          },
          "taskforce_size_by_time": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaskforceSizeByTime"
              }
            ],
            "title": "Taskforce Size By Time",
            "description": "JSon config for decaying minimum team sizes over time"
          },
          "match_making_function_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MatchMakingFunctionConfig"
              }
            ],
            "title": "Match Making Function Config",
            "description": "JSon config about which matchmaking function should be used to try and propose matches for this profile"
          },
          "match_making_stride_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Stride Id",
            "description": "Which matchmaking strides should be used to divide the queue population"
          },
          "crossplay_partition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Crossplay Partition Id",
            "description": "Which set of CrossplayPartitions rules should be used when generating matches in this profile"
          },
          "legacy_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dependencies__sandbox_config__matchmaking__profiles_schemas__LegacyConfig"
              }
            ],
            "title": "Legacy Config",
            "description": "Old config used by Legacy systems. These values are ignored by the current APIs"
          },
          "trueskill_quality_by_time_max_quality": {
            "type": "number",
            "title": "Trueskill Quality By Time Max Quality",
            "description": "The trueskill quality threshold that this profile will start trying to match with"
          },
          "trueskill_quality_by_time_max_minutes": {
            "type": "number",
            "title": "Trueskill Quality By Time Max Minutes",
            "description": "The max amount of time we will try to create matches before quality will be disregarded"
          },
          "trueskill_quality_by_time_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TrueSkillQualityByTimeMethod"
              }
            ],
            "description": "Method used to decay the required quality of matches over time. Currently only 'two_term_quadratic' is supported",
            "default": "two_term_quadratic"
          },
          "active": {
            "type": "boolean",
            "title": "Active",
            "description": "Flag determining whether or not this profile will actively be ticked"
          },
          "supports_backfill": {
            "type": "boolean",
            "title": "Supports Backfill",
            "description": "Flag determining whether or not backfill objects should be created when generating matches in this profile"
          }
        },
        "type": "object",
        "required": [
          "rank_id",
          "num_sides",
          "min_players_per_side",
          "max_players_per_side",
          "min_players_per_linking",
          "max_players_per_linking",
          "max_side_delta",
          "instance_request_template_id",
          "match_making_function_config",
          "match_making_stride_id",
          "crossplay_partition_id",
          "active",
          "supports_backfill"
        ],
        "title": "MatchMakingProfileRequest"
      },
      "MatchMakingProfileUpdateRequest": {
        "properties": {
          "join_mode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProfileJoinMode"
              }
            ],
            "description": "What mode to set on the MatchMakingProfile (normal, backfill etc)",
            "default": "normal"
          },
          "rank_id": {
            "type": "string",
            "format": "uuid",
            "title": "Rank Id",
            "description": "Which rank this queue should use MMR from to make matches from, and update at the end of match (1v1 MMR or 2v2 MMR for example)"
          },
          "num_sides": {
            "type": "integer",
            "minimum": 1,
            "title": "Num Sides",
            "description": "The number of sides a game in this queue will have (2 in a 1v1 and 3 in a 1v1v1 for example"
          },
          "min_players_per_side": {
            "type": "integer",
            "minimum": 0,
            "title": "Min Players Per Side",
            "description": "The minimum number of players that can be on each team"
          },
          "max_players_per_side": {
            "type": "integer",
            "minimum": 1,
            "title": "Max Players Per Side",
            "description": "The maximum number of players that can be on each team"
          },
          "min_players_per_linking": {
            "type": "integer",
            "minimum": 1,
            "title": "Min Players Per Linking",
            "description": "The minimum number of players that can be on a single linking (a party)"
          },
          "max_players_per_linking": {
            "type": "integer",
            "minimum": 1,
            "title": "Max Players Per Linking",
            "description": "The maximum number of players that can be on a single linking (a party)"
          },
          "max_side_delta": {
            "type": "integer",
            "minimum": 0,
            "title": "Max Side Delta",
            "description": "The maximum difference in players per side when generating a match from this profile"
          },
          "instance_request_template_id": {
            "type": "string",
            "format": "uuid",
            "title": "Instance Request Template Id",
            "description": "Which instance request template is used for matches generated from this profile"
          },
          "taskforce_size_by_time": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TaskforceSizeByTime"
              }
            ],
            "title": "Taskforce Size By Time",
            "description": "JSon config for decaying minimum team sizes over time"
          },
          "match_making_function_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MatchMakingFunctionConfig"
              }
            ],
            "title": "Match Making Function Config",
            "description": "JSon config about which matchmaking function should be used to try and propose matches for this profile"
          },
          "match_making_stride_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Stride Id",
            "description": "Which matchmaking strides should be used to divide the queue population"
          },
          "crossplay_partition_id": {
            "type": "string",
            "format": "uuid",
            "title": "Crossplay Partition Id",
            "description": "Which set of CrossplayPartitions rules should be used when generating matches in this profile"
          },
          "legacy_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dependencies__sandbox_config__matchmaking__profiles_schemas__LegacyConfig"
              }
            ],
            "title": "Legacy Config",
            "description": "Old config used by Legacy systems. These values are ignored by the current APIs"
          },
          "trueskill_quality_by_time_max_quality": {
            "type": "number",
            "title": "Trueskill Quality By Time Max Quality",
            "description": "The trueskill quality threshold that this profile will start trying to match with"
          },
          "trueskill_quality_by_time_max_minutes": {
            "type": "number",
            "title": "Trueskill Quality By Time Max Minutes",
            "description": "The max amount of time we will try to create matches before quality will be disregarded"
          },
          "trueskill_quality_by_time_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TrueSkillQualityByTimeMethod"
              }
            ],
            "description": "Method used to decay the required quality of matches over time. Currently only 'two_term_quadratic' is supported",
            "default": "two_term_quadratic"
          },
          "active": {
            "type": "boolean",
            "title": "Active",
            "description": "Flag determining whether or not this profile will actively be ticked"
          },
          "supports_backfill": {
            "type": "boolean",
            "title": "Supports Backfill",
            "description": "Flag determining whether or not backfill objects should be created when generating matches in this profile"
          }
        },
        "type": "object",
        "title": "MatchMakingProfileUpdateRequest"
      },
      "MatchMakingRule": {
        "properties": {
          "match_making_ruleset_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Ruleset Id",
            "description": "Which ruleset this MatchMakingRule belongs to"
          },
          "comparison_operation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ComparisonOperation"
              }
            ],
            "description": "Which comparison operator is used when evaluating the rule"
          },
          "item_id": {
            "type": "string",
            "format": "uuid",
            "title": "Item Id",
            "description": "What item is being compared if this is an Inventory rule"
          },
          "rule_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RuleType"
              }
            ],
            "description": "What type of rule this is (determines what types of values are being compared"
          },
          "comparison_value": {
            "type": "integer",
            "title": "Comparison Value",
            "description": "What value is to be compared to"
          },
          "sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sandbox Id",
            "description": "ID of the Sandbox"
          },
          "last_modified_account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Last Modified Account Id",
            "description": "Account ID of the user who last modified the resource"
          },
          "last_modified_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified Timestamp",
            "description": "Timestamp of when the resource was last modified"
          },
          "created_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Created Timestamp",
            "description": "Timestamp of when this resource was created"
          },
          "match_making_rule_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Rule Id",
            "description": "ID to uniquely identify this MatchMakingRule"
          }
        },
        "type": "object",
        "required": [
          "match_making_ruleset_id",
          "comparison_operation",
          "rule_type",
          "comparison_value",
          "match_making_rule_id"
        ],
        "title": "MatchMakingRule"
      },
      "MatchMakingRuleRequest": {
        "properties": {
          "match_making_ruleset_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Ruleset Id",
            "description": "Which ruleset this MatchMakingRule belongs to"
          },
          "comparison_operation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ComparisonOperation"
              }
            ],
            "description": "Which comparison operator is used when evaluating the rule"
          },
          "item_id": {
            "type": "string",
            "format": "uuid",
            "title": "Item Id",
            "description": "What item is being compared if this is an Inventory rule"
          },
          "rule_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RuleType"
              }
            ],
            "description": "What type of rule this is (determines what types of values are being compared"
          },
          "comparison_value": {
            "type": "integer",
            "title": "Comparison Value",
            "description": "What value is to be compared to"
          }
        },
        "type": "object",
        "required": [
          "match_making_ruleset_id",
          "comparison_operation",
          "rule_type",
          "comparison_value"
        ],
        "title": "MatchMakingRuleRequest"
      },
      "MatchMakingRuleSetFlattened": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Name",
            "description": "Readable name to describe this ruleset"
          },
          "sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sandbox Id",
            "description": "ID of the Sandbox"
          },
          "last_modified_account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Last Modified Account Id",
            "description": "Account ID of the user who last modified the resource"
          },
          "last_modified_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified Timestamp",
            "description": "Timestamp of when the resource was last modified"
          },
          "created_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Created Timestamp",
            "description": "Timestamp of when this resource was created"
          },
          "match_making_ruleset_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Ruleset Id",
            "description": "ID to uniquely identify this MatchMakingRuleset"
          },
          "rules": {
            "items": {
              "$ref": "#/components/schemas/MatchMakingRule"
            },
            "type": "array",
            "title": "Rules",
            "description": "A list of the rules to be checked for this ruleset",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "name",
          "match_making_ruleset_id"
        ],
        "title": "MatchMakingRuleSetFlattened"
      },
      "MatchMakingRuleUpdateRequest": {
        "properties": {
          "match_making_ruleset_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Ruleset Id",
            "description": "Which ruleset this MatchMakingRule belongs to"
          },
          "comparison_operation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ComparisonOperation"
              }
            ],
            "description": "Which comparison operator is used when evaluating the rule"
          },
          "item_id": {
            "type": "string",
            "format": "uuid",
            "title": "Item Id",
            "description": "What item is being compared if this is an Inventory rule"
          },
          "rule_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RuleType"
              }
            ],
            "description": "What type of rule this is (determines what types of values are being compared"
          },
          "comparison_value": {
            "type": "integer",
            "title": "Comparison Value",
            "description": "What value is to be compared to"
          }
        },
        "type": "object",
        "title": "MatchMakingRuleUpdateRequest"
      },
      "MatchMakingRuleset": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Name",
            "description": "Readable name to describe this ruleset"
          },
          "sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sandbox Id",
            "description": "ID of the Sandbox"
          },
          "last_modified_account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Last Modified Account Id",
            "description": "Account ID of the user who last modified the resource"
          },
          "last_modified_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified Timestamp",
            "description": "Timestamp of when the resource was last modified"
          },
          "created_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Created Timestamp",
            "description": "Timestamp of when this resource was created"
          },
          "match_making_ruleset_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Ruleset Id",
            "description": "ID to uniquely identify this MatchMakingRuleset"
          }
        },
        "type": "object",
        "required": [
          "name",
          "match_making_ruleset_id"
        ],
        "title": "MatchMakingRuleset"
      },
      "MatchMakingRulesetRequest": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Name",
            "description": "Readable name to describe this ruleset"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "MatchMakingRulesetRequest"
      },
      "MatchMakingRulesetUpdateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Name",
            "description": "Readable name to describe this ruleset"
          }
        },
        "type": "object",
        "title": "MatchMakingRulesetUpdateRequest"
      },
      "MatchMakingStride": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Name",
            "description": "Readable name to identify this MatchMakingStride"
          },
          "factory": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StrideFactory"
              }
            ],
            "description": "Which factory is used when creating the player partitions for this stride"
          },
          "sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sandbox Id",
            "description": "ID of the Sandbox"
          },
          "last_modified_account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Last Modified Account Id",
            "description": "Account ID of the user who last modified the resource"
          },
          "last_modified_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified Timestamp",
            "description": "Timestamp of when the resource was last modified"
          },
          "created_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Created Timestamp",
            "description": "Timestamp of when this resource was created"
          },
          "match_making_stride_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Stride Id",
            "description": "ID to uniquely identify this MatchMakingStride"
          }
        },
        "type": "object",
        "required": [
          "match_making_stride_id"
        ],
        "title": "MatchMakingStride"
      },
      "MatchMakingStrideEntry": {
        "properties": {
          "step": {
            "type": "integer",
            "minimum": 0,
            "title": "Step",
            "description": "How many partitions are created at this point in the stride"
          },
          "overlap": {
            "type": "integer",
            "minimum": 0,
            "title": "Overlap",
            "description": "How far into adjacent skill partitions overlap when trying to match players together"
          },
          "min_population": {
            "type": "integer",
            "minimum": 0,
            "title": "Min Population",
            "description": "The minimum popluation required to use this step of the stride"
          },
          "sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sandbox Id",
            "description": "ID of the Sandbox"
          },
          "last_modified_account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Last Modified Account Id",
            "description": "Account ID of the user who last modified the resource"
          },
          "last_modified_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified Timestamp",
            "description": "Timestamp of when the resource was last modified"
          },
          "created_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Created Timestamp",
            "description": "Timestamp of when this resource was created"
          },
          "match_making_stride_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Stride Id",
            "description": "Which MatchMakingStride this entry belongs to"
          },
          "match_making_stride_entry_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Stride Entry Id",
            "description": "ID to uniquely identify this MatchMakingStrideEntry"
          }
        },
        "type": "object",
        "required": [
          "step",
          "overlap",
          "min_population",
          "match_making_stride_id",
          "match_making_stride_entry_id"
        ],
        "title": "MatchMakingStrideEntry"
      },
      "MatchMakingStrideEntryRequest": {
        "properties": {
          "step": {
            "type": "integer",
            "minimum": 0,
            "title": "Step",
            "description": "How many partitions are created at this point in the stride"
          },
          "overlap": {
            "type": "integer",
            "minimum": 0,
            "title": "Overlap",
            "description": "How far into adjacent skill partitions overlap when trying to match players together"
          },
          "min_population": {
            "type": "integer",
            "minimum": 0,
            "title": "Min Population",
            "description": "The minimum popluation required to use this step of the stride"
          }
        },
        "type": "object",
        "required": [
          "step",
          "overlap",
          "min_population"
        ],
        "title": "MatchMakingStrideEntryRequest"
      },
      "MatchMakingStrideEntryUpdateRequest": {
        "properties": {
          "step": {
            "type": "integer",
            "minimum": 0,
            "title": "Step",
            "description": "How many partitions are created at this point in the stride"
          },
          "overlap": {
            "type": "integer",
            "minimum": 0,
            "title": "Overlap",
            "description": "How far into adjacent skill partitions overlap when trying to match players together"
          },
          "min_population": {
            "type": "integer",
            "minimum": 0,
            "title": "Min Population",
            "description": "The minimum popluation required to use this step of the stride"
          }
        },
        "type": "object",
        "title": "MatchMakingStrideEntryUpdateRequest"
      },
      "MatchMakingStrideRequest": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Name",
            "description": "Readable name to identify this MatchMakingStride"
          },
          "factory": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StrideFactory"
              }
            ],
            "description": "Which factory is used when creating the player partitions for this stride"
          }
        },
        "type": "object",
        "required": [
          "name",
          "factory"
        ],
        "title": "MatchMakingStrideRequest"
      },
      "MatchMakingStrideResponse": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Name",
            "description": "Readable name to identify this MatchMakingStride"
          },
          "factory": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StrideFactory"
              }
            ],
            "description": "Which factory is used when creating the player partitions for this stride"
          },
          "sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sandbox Id",
            "description": "ID of the Sandbox"
          },
          "last_modified_account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Last Modified Account Id",
            "description": "Account ID of the user who last modified the resource"
          },
          "last_modified_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified Timestamp",
            "description": "Timestamp of when the resource was last modified"
          },
          "created_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Created Timestamp",
            "description": "Timestamp of when this resource was created"
          },
          "match_making_stride_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Stride Id",
            "description": "ID to uniquely identify this MatchMakingStride"
          },
          "entries": {
            "items": {
              "$ref": "#/components/schemas/MatchMakingStrideEntry"
            },
            "type": "array",
            "title": "Entries",
            "description": "List of MatchMakingStrideEntries in this stride",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "match_making_stride_id"
        ],
        "title": "MatchMakingStrideResponse"
      },
      "MatchMakingStrideUpdateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Name",
            "description": "Readable name to identify this MatchMakingStride"
          },
          "factory": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StrideFactory"
              }
            ],
            "description": "Which factory is used when creating the player partitions for this stride"
          }
        },
        "type": "object",
        "title": "MatchMakingStrideUpdateRequest"
      },
      "MatchMakingTemplate": {
        "properties": {
          "match_making_template_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Template Id",
            "description": "ID to uniquely identify this MatchMakingTemplate"
          },
          "match_making_template_group_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Template Group Id",
            "description": "Which group of MatchMakingTemplates this template belongs to"
          },
          "mmr_grouping_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MMRGroupingMethod"
              }
            ],
            "description": "What method should be used to calculate a group's MMR based on the individual player's ranks"
          },
          "match_making_ruleset_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Ruleset Id",
            "description": "Which ruleset needs to be satisfied to use this template"
          },
          "match_making_profile_list_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Profile List Id",
            "description": "Which list of MatchMakingProfiles should be used with this template"
          },
          "legacy_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dependencies__sandbox_config__matchmaking__mm_templates_schemas__LegacyConfig"
              }
            ],
            "title": "Legacy Config",
            "description": "Old config used by Legacy systems. These values are ignored by the current APIs"
          },
          "sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sandbox Id",
            "description": "ID of the Sandbox"
          },
          "last_modified_account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Last Modified Account Id",
            "description": "Account ID of the user who last modified the resource"
          },
          "last_modified_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified Timestamp",
            "description": "Timestamp of when the resource was last modified"
          },
          "created_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Created Timestamp",
            "description": "Timestamp of when this resource was created"
          }
        },
        "type": "object",
        "required": [
          "match_making_template_id",
          "match_making_template_group_id",
          "mmr_grouping_method",
          "match_making_profile_list_id"
        ],
        "title": "MatchMakingTemplate"
      },
      "MatchMakingTemplateGroup": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Name",
            "description": "Readable name to describe this ruleset"
          },
          "match_making_template_group_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Template Group Id",
            "description": "ID to uniquely identify this MatchMakingTemplateGroup"
          },
          "sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sandbox Id",
            "description": "ID of the Sandbox"
          },
          "last_modified_account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Last Modified Account Id",
            "description": "Account ID of the user who last modified the resource"
          },
          "last_modified_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified Timestamp",
            "description": "Timestamp of when the resource was last modified"
          },
          "created_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Created Timestamp",
            "description": "Timestamp of when this resource was created"
          }
        },
        "type": "object",
        "required": [
          "name",
          "match_making_template_group_id"
        ],
        "title": "MatchMakingTemplateGroup"
      },
      "MatchMakingTemplateGroupRequest": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Name",
            "description": "Readable name to describe this ruleset"
          },
          "match_making_template_group_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Template Group Id",
            "description": "ID to uniquely identify this MatchMakingTemplateGroup"
          }
        },
        "type": "object",
        "required": [
          "name"
        ],
        "title": "MatchMakingTemplateGroupRequest"
      },
      "MatchMakingTemplateGroupUpdateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Name",
            "description": "Readable name to describe this ruleset"
          },
          "match_making_template_group_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Template Group Id",
            "description": "ID to uniquely identify this MatchMakingTemplateGroup"
          }
        },
        "type": "object",
        "title": "MatchMakingTemplateGroupUpdateRequest"
      },
      "MatchMakingTemplateRequest": {
        "properties": {
          "match_making_template_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Template Id",
            "description": "ID to uniquely identify this MatchMakingTemplate"
          },
          "match_making_template_group_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Template Group Id",
            "description": "Which group of MatchMakingTemplates this template belongs to"
          },
          "mmr_grouping_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MMRGroupingMethod"
              }
            ],
            "description": "What method should be used to calculate a group's MMR based on the individual player's ranks"
          },
          "match_making_ruleset_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Ruleset Id",
            "description": "Which ruleset needs to be satisfied to use this template"
          },
          "match_making_profile_list_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Profile List Id",
            "description": "Which list of MatchMakingProfiles should be used with this template"
          },
          "legacy_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dependencies__sandbox_config__matchmaking__mm_templates_schemas__LegacyConfig"
              }
            ],
            "title": "Legacy Config",
            "description": "Old config used by Legacy systems. These values are ignored by the current APIs"
          }
        },
        "type": "object",
        "required": [
          "match_making_template_group_id",
          "mmr_grouping_method",
          "match_making_profile_list_id"
        ],
        "title": "MatchMakingTemplateRequest"
      },
      "MatchMakingTemplateResponse": {
        "properties": {
          "match_making_template_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Template Id",
            "description": "ID to uniquely identify this MatchMakingTemplate"
          },
          "match_making_template_group_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Template Group Id",
            "description": "Which group of MatchMakingTemplates this template belongs to"
          },
          "mmr_grouping_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MMRGroupingMethod"
              }
            ],
            "description": "What method should be used to calculate a group's MMR based on the individual player's ranks"
          },
          "match_making_ruleset_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Ruleset Id",
            "description": "Which ruleset needs to be satisfied to use this template"
          },
          "match_making_profile_list_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Profile List Id",
            "description": "Which list of MatchMakingProfiles should be used with this template"
          },
          "legacy_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dependencies__sandbox_config__matchmaking__mm_templates_schemas__LegacyConfig"
              }
            ],
            "title": "Legacy Config",
            "description": "Old config used by Legacy systems. These values are ignored by the current APIs"
          },
          "sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sandbox Id",
            "description": "ID of the Sandbox"
          },
          "last_modified_account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Last Modified Account Id",
            "description": "Account ID of the user who last modified the resource"
          },
          "last_modified_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified Timestamp",
            "description": "Timestamp of when the resource was last modified"
          },
          "ruleset": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MatchMakingRuleSetFlattened"
              }
            ],
            "title": "Ruleset",
            "description": "Ruleset to determine whether this template should be used"
          }
        },
        "type": "object",
        "required": [
          "match_making_template_id",
          "match_making_template_group_id",
          "mmr_grouping_method",
          "match_making_profile_list_id"
        ],
        "title": "MatchMakingTemplateResponse"
      },
      "MatchMakingTemplateUpdateRequest": {
        "properties": {
          "match_making_template_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Template Id",
            "description": "ID to uniquely identify this MatchMakingTemplate"
          },
          "match_making_template_group_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Template Group Id",
            "description": "Which group of MatchMakingTemplates this template belongs to"
          },
          "mmr_grouping_method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MMRGroupingMethod"
              }
            ],
            "description": "What method should be used to calculate a group's MMR based on the individual player's ranks"
          },
          "match_making_ruleset_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Ruleset Id",
            "description": "Which ruleset needs to be satisfied to use this template"
          },
          "match_making_profile_list_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Profile List Id",
            "description": "Which list of MatchMakingProfiles should be used with this template"
          },
          "legacy_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dependencies__sandbox_config__matchmaking__mm_templates_schemas__LegacyConfig"
              }
            ],
            "title": "Legacy Config",
            "description": "Old config used by Legacy systems. These values are ignored by the current APIs"
          }
        },
        "type": "object",
        "title": "MatchMakingTemplateUpdateRequest"
      },
      "MenuData": {
        "properties": {
          "selectedEntities": {
            "$ref": "#/components/schemas/MenuDataSelectedEntities"
          },
          "assignedEntities": {
            "$ref": "#/components/schemas/MenuDataAssignedEntities"
          }
        },
        "type": "object",
        "required": [
          "selectedEntities",
          "assignedEntities"
        ],
        "title": "MenuData"
      },
      "MenuDataAssignedEntities": {
        "properties": {
          "orgs": {
            "items": {
              "$ref": "#/components/schemas/MenuDataOrg"
            },
            "type": "array",
            "title": "Orgs"
          }
        },
        "type": "object",
        "required": [
          "orgs"
        ],
        "title": "MenuDataAssignedEntities"
      },
      "MenuDataEnvironment": {
        "properties": {
          "environmentId": {
            "type": "string",
            "format": "uuid",
            "title": "Environmentid"
          },
          "shortName": {
            "type": "string",
            "title": "Shortname"
          },
          "environmentName": {
            "type": "string",
            "title": "Environmentname"
          },
          "archive": {
            "type": "boolean",
            "title": "Archive",
            "default": false
          },
          "baseUrl": {
            "type": "string",
            "title": "Baseurl"
          }
        },
        "type": "object",
        "required": [
          "environmentId",
          "shortName",
          "environmentName",
          "baseUrl"
        ],
        "title": "MenuDataEnvironment"
      },
      "MenuDataOrg": {
        "properties": {
          "orgId": {
            "type": "string",
            "format": "uuid",
            "title": "Orgid"
          },
          "orgName": {
            "type": "string",
            "title": "Orgname"
          },
          "shortName": {
            "type": "string",
            "title": "Shortname"
          },
          "products": {
            "items": {
              "$ref": "#/components/schemas/MenuDataProduct"
            },
            "type": "array",
            "title": "Products"
          },
          "archive": {
            "type": "boolean",
            "title": "Archive"
          }
        },
        "type": "object",
        "required": [
          "orgId",
          "orgName",
          "shortName",
          "products",
          "archive"
        ],
        "title": "MenuDataOrg"
      },
      "MenuDataProduct": {
        "properties": {
          "productId": {
            "type": "string",
            "format": "uuid",
            "title": "Productid"
          },
          "productName": {
            "type": "string",
            "title": "Productname"
          },
          "shortName": {
            "type": "string",
            "title": "Shortname"
          },
          "sandboxes": {
            "items": {
              "$ref": "#/components/schemas/MenuDataSandbox"
            },
            "type": "array",
            "title": "Sandboxes"
          },
          "environments": {
            "items": {
              "$ref": "#/components/schemas/MenuDataEnvironment"
            },
            "type": "array",
            "title": "Environments"
          },
          "archive": {
            "type": "boolean",
            "title": "Archive"
          }
        },
        "type": "object",
        "required": [
          "productId",
          "productName",
          "shortName",
          "sandboxes",
          "environments",
          "archive"
        ],
        "title": "MenuDataProduct"
      },
      "MenuDataSandbox": {
        "properties": {
          "sandboxId": {
            "type": "string",
            "format": "uuid",
            "title": "Sandboxid"
          },
          "shortName": {
            "type": "string",
            "title": "Shortname"
          },
          "sandboxName": {
            "type": "string",
            "title": "Sandboxname"
          },
          "sandboxClassicSupportToolUrl": {
            "type": "string",
            "title": "Sandboxclassicsupporttoolurl"
          },
          "archive": {
            "type": "boolean",
            "title": "Archive",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "sandboxId",
          "shortName",
          "sandboxName"
        ],
        "title": "MenuDataSandbox"
      },
      "MenuDataSelectedEntities": {
        "properties": {
          "level": {
            "type": "string",
            "title": "Level"
          },
          "org": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Org"
          },
          "environment": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Environment"
          },
          "sandbox": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Sandbox"
          },
          "product": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Product"
          }
        },
        "type": "object",
        "required": [
          "level",
          "org",
          "environment",
          "sandbox",
          "product"
        ],
        "title": "MenuDataSelectedEntities"
      },
      "NintendoConfig": {
        "properties": {
          "environments": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NintendoEnv"
              }
            ],
            "title": "Environments",
            "description": "Nintendo environments"
          },
          "active_envs": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Active Envs",
            "description": "List of active/enabled nintendo environments for this sandbox",
            "default": []
          },
          "app_id": {
            "type": "string",
            "title": "App Id",
            "description": "Nintendo app ID. Client tokens are validated against this ID"
          }
        },
        "type": "object",
        "required": [
          "environments",
          "app_id"
        ],
        "title": "NintendoConfig"
      },
      "NintendoEnv": {
        "properties": {
          "dd1": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NintendoSingleEnv"
              }
            ],
            "title": "Dd1",
            "description": "Config Values for DD1"
          },
          "dp1": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NintendoSingleEnv"
              }
            ],
            "title": "Dp1",
            "description": "Config Values for DP1"
          },
          "sd1": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NintendoSingleEnv"
              }
            ],
            "title": "Sd1",
            "description": "Config Values for SD1"
          },
          "sp1": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NintendoSingleEnv"
              }
            ],
            "title": "Sp1",
            "description": "Config Values for SP1"
          },
          "jd1": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NintendoSingleEnv"
              }
            ],
            "title": "Jd1",
            "description": "Config Values for JD1"
          },
          "lp1": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NintendoSingleEnv"
              }
            ],
            "title": "Lp1",
            "description": "Config Values for LP1"
          }
        },
        "type": "object",
        "required": [
          "dd1",
          "dp1",
          "sd1",
          "sp1",
          "jd1",
          "lp1"
        ],
        "title": "NintendoEnv"
      },
      "NintendoSingleEnv": {
        "properties": {
          "enable_login": {
            "type": "boolean",
            "title": "Enable Login",
            "description": "Whether or not to enable Nintendo logins",
            "default": true
          },
          "client_id": {
            "type": "string",
            "title": "Client Id",
            "description": "Nintendo client ID. Client tokens are validated against this ID"
          },
          "auth_key": {
            "type": "string",
            "title": "Auth Key",
            "description": "Nintendo auth key"
          }
        },
        "type": "object",
        "required": [
          "client_id",
          "auth_key"
        ],
        "title": "NintendoSingleEnv"
      },
      "OrgPortalAccountsPermissions": {
        "properties": {
          "account_permission_id": {
            "type": "string",
            "format": "uuid",
            "title": "Account Permission Id"
          },
          "account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Account Id"
          },
          "account_email": {
            "type": "string",
            "title": "Account Email"
          },
          "org_id": {
            "type": "string",
            "format": "uuid",
            "title": "Org Id"
          },
          "product_id": {
            "type": "string",
            "format": "uuid",
            "title": "Product Id"
          },
          "sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sandbox Id"
          },
          "permission_id": {
            "type": "string",
            "title": "Permission Id"
          },
          "assigned_org_id": {
            "type": "string",
            "format": "uuid",
            "title": "Assigned Org Id"
          }
        },
        "type": "object",
        "required": [
          "account_permission_id",
          "account_id",
          "account_email",
          "permission_id",
          "assigned_org_id"
        ],
        "title": "OrgPortalAccountsPermissions"
      },
      "Organization": {
        "properties": {
          "org_id": {
            "type": "string",
            "format": "uuid",
            "title": "Org Id"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Official Full Name",
            "default": ""
          },
          "primary_contact_email": {
            "type": "string",
            "title": "Primary Contact Email",
            "description": "Email Address for the primary point of contact",
            "default": ""
          },
          "short_name": {
            "type": "string",
            "minLength": 1,
            "title": "Short Name",
            "description": "Name used in URLs"
          },
          "last_modified_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified Timestamp"
          },
          "created_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Created Timestamp"
          },
          "archive": {
            "type": "boolean",
            "title": "Archive"
          }
        },
        "type": "object",
        "required": [
          "org_id",
          "short_name",
          "last_modified_timestamp",
          "created_timestamp",
          "archive"
        ],
        "title": "Organization"
      },
      "OrganizationRequest": {
        "properties": {
          "org_id": {
            "type": "string",
            "format": "uuid",
            "title": "Org Id",
            "description": "Organization ID"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Official Full Name",
            "default": ""
          },
          "primary_contact_email": {
            "type": "string",
            "title": "Primary Contact Email",
            "description": "Email Address for the primary point of contact",
            "default": ""
          },
          "short_name": {
            "type": "string",
            "minLength": 1,
            "title": "Short Name",
            "description": "Name used in URLs"
          },
          "archive": {
            "type": "boolean",
            "title": "Archive",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "org_id",
          "short_name"
        ],
        "title": "OrganizationRequest"
      },
      "OrganizationStructure": {
        "properties": {
          "level": {
            "type": "string",
            "format": "uuid",
            "title": "Level",
            "description": "Level ID"
          },
          "level_type": {
            "type": "string",
            "title": "Level Type",
            "description": "Level Type",
            "default": ""
          },
          "level_name": {
            "type": "string",
            "title": "Level Name",
            "description": "Level Name",
            "default": ""
          }
        },
        "type": "object",
        "required": [
          "level"
        ],
        "title": "OrganizationStructure"
      },
      "OrganizationUpdateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Official Full Name",
            "default": ""
          },
          "primary_contact_email": {
            "type": "string",
            "title": "Primary Contact Email",
            "description": "Email Address for the primary point of contact",
            "default": ""
          },
          "short_name": {
            "type": "string",
            "minLength": 1,
            "title": "Short Name",
            "description": "Name used in URLs"
          },
          "archive": {
            "type": "boolean",
            "title": "Archive",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "short_name"
        ],
        "title": "OrganizationUpdateRequest"
      },
      "PageMeta": {
        "properties": {
          "cursor": {
            "type": "string",
            "maxLength": 128,
            "minLength": 1,
            "title": "Cursor",
            "description": "Cursor to designate where you are in iterating through values. Start with '0', and pass this on subsequent calls to continue iteration"
          },
          "page_size": {
            "type": "integer",
            "maximum": 10000,
            "minimum": 1,
            "title": "Page Size",
            "description": "The maximum number of elements to be returned per call",
            "default": 50
          },
          "total": {
            "type": "integer",
            "title": "Total",
            "description": "The total number of entities.",
            "default": 0
          }
        },
        "type": "object",
        "required": [
          "cursor"
        ],
        "title": "PageMeta"
      },
      "PatchEntitlementSku": {
        "properties": {
          "custom_data": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data associated with the resource"
          },
          "name": {
            "type": "string",
            "maxLength": 125,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the resource"
          },
          "description": {
            "type": "string",
            "maxLength": 250,
            "minLength": 1,
            "title": "Description",
            "description": "Description of the resource"
          },
          "platform": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Platform"
              }
            ],
            "description": "The platform the Entitlement Sku is for."
          },
          "loot_entitlement": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchLootEntitlement"
              }
            ],
            "title": "Loot Entitlement",
            "description": "The Loot Entitlement."
          },
          "external_key_entitlement": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchExternalKeyEntitlement"
              }
            ],
            "title": "External Key Entitlement",
            "description": "The External Key Entitlement."
          },
          "sku": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "title": "Sku",
            "description": "The External SKU."
          }
        },
        "type": "object",
        "title": "PatchEntitlementSku",
        "description": "Entitlement Sku to patch. Any fields not included in the request will not be updated."
      },
      "PatchExternalKeyCampaign": {
        "properties": {
          "custom_data": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data associated with the resource"
          },
          "name": {
            "type": "string",
            "maxLength": 125,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the resource"
          },
          "description": {
            "type": "string",
            "maxLength": 250,
            "minLength": 1,
            "title": "Description",
            "description": "Description of the resource"
          },
          "key_types": {
            "items": {
              "type": "string",
              "maxLength": 256,
              "minLength": 1
            },
            "type": "array",
            "title": "Key Types",
            "description": "The types of keys that can be distributed by this campaign.",
            "default": []
          }
        },
        "type": "object",
        "title": "PatchExternalKeyCampaign",
        "description": "External Key Campaign to patch. Any fields not included in the request or set to null will not be updated."
      },
      "PatchExternalKeyEntitlement": {
        "properties": {
          "external_key_campaign_id": {
            "type": "string",
            "format": "uuid",
            "title": "External Key Campaign Id",
            "description": "The External Key Campaign ID."
          },
          "quantity": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "Quantity",
            "description": "The quantity of keys to grant to the player."
          }
        },
        "type": "object",
        "title": "PatchExternalKeyEntitlement",
        "description": "Represents the mapping of an External SKU to a External Key that will be granted to the player when the player has a matching sku."
      },
      "PatchLootEntitlement": {
        "properties": {
          "loot_id": {
            "type": "string",
            "format": "uuid",
            "title": "Loot Id",
            "description": "The Loot ID."
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EntitlementType"
              }
            ],
            "description": "Determine how the entitlement is handled on the Platform's side. "
          }
        },
        "type": "object",
        "title": "PatchLootEntitlement",
        "description": "Represents the mapping of an External SKU to a Loot that will be granted to the player when the player has a matching sku"
      },
      "PermissionAssignmentLevel": {
        "type": "string",
        "enum": [
          "glb",
          "org",
          "product",
          "sandbox",
          "environment",
          "product_up",
          "sandbox_up",
          "environment_up"
        ],
        "title": "PermissionAssignmentLevel",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "glb",
          "org",
          "product",
          "sandbox",
          "environment",
          "product_up",
          "sandbox_up",
          "environment_up"
        ]
      },
      "PermissionResponse": {
        "properties": {
          "permission_id": {
            "type": "string",
            "title": "Permission Id"
          },
          "description": {
            "type": "string",
            "title": "Description"
          }
        },
        "type": "object",
        "required": [
          "permission_id"
        ],
        "title": "PermissionResponse"
      },
      "PermissionsListResponse": {
        "properties": {
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/PermissionResponse"
            },
            "type": "array",
            "title": "Permissions"
          }
        },
        "type": "object",
        "required": [
          "permissions"
        ],
        "title": "PermissionsListResponse"
      },
      "Platform": {
        "type": "string",
        "enum": [
          "Anon",
          "Basic",
          "XboxLive",
          "PSN",
          "NintendoNAID",
          "NintendoSwitch",
          "NintendoPPID",
          "Google",
          "GooglePlay",
          "Apple",
          "Epic",
          "Steam",
          "Amazon",
          "Twitch"
        ],
        "title": "Platform",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "ANON",
          "BASIC",
          "XBOX_LIVE",
          "PSN",
          "NINTENDO_NAID",
          "NINTENDO_SWITCH",
          "NINTENDO_PPID",
          "GOOGLE",
          "GOOGLE_PLAY",
          "APPLE",
          "EPIC",
          "STEAM",
          "AMAZON",
          "TWITCH"
        ]
      },
      "PlatformData": {
        "properties": {
          "counts": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Counts",
            "description": "Data broken down by platform."
          },
          "date_range": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateRange"
              }
            ],
            "title": "Date Range",
            "description": "The date range for the data."
          }
        },
        "type": "object",
        "required": [
          "counts",
          "date_range"
        ],
        "title": "PlatformData"
      },
      "PlatformSessionTemplate": {
        "properties": {
          "platform_session_type": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Platform Session Type",
            "description": "The platform's name for this type of platform session"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom passthrough data that will be added to all sessions of this type",
            "default": {}
          },
          "sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sandbox Id",
            "description": "ID of the Sandbox"
          },
          "session_template_id": {
            "type": "string",
            "format": "uuid",
            "title": "Session Template Id",
            "description": "Unique id for this type of session that this template is associated with"
          },
          "platform": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Platform"
              }
            ],
            "description": "Which platform this template is associated with"
          },
          "last_modified_account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Last Modified Account Id",
            "description": "Account ID of the user who last modified the resource"
          },
          "last_modified_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified Timestamp",
            "description": "Timestamp of when the resource was last modified"
          }
        },
        "type": "object",
        "required": [
          "platform_session_type",
          "session_template_id",
          "platform"
        ],
        "title": "PlatformSessionTemplate"
      },
      "PlatformSessionTemplateRequest": {
        "properties": {
          "platform_session_type": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Platform Session Type",
            "description": "The platform's name for this type of platform session"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom passthrough data that will be added to all sessions of this type",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "platform_session_type"
        ],
        "title": "PlatformSessionTemplateRequest"
      },
      "PlatformSessionTemplateUpdateRequest": {
        "properties": {
          "platform_session_type": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Platform Session Type",
            "description": "The platform's name for this type of platform session"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom passthrough data that will be added to all sessions of this type"
          }
        },
        "type": "object",
        "title": "PlatformSessionTemplateUpdateRequest"
      },
      "PlaystationConfig": {
        "properties": {
          "enable_login": {
            "type": "boolean",
            "title": "Enable Login",
            "description": "Whether or not to enable Playstation logins",
            "default": true
          },
          "environment": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PlaystationEnvironment"
              }
            ],
            "description": "Currently active Playstation environment to use",
            "default": "sp-int"
          },
          "ps4_use_entitlements_v1_api": {
            "type": "boolean",
            "title": "Ps4 Use Entitlements V1 Api",
            "description": "Whether or not to use the old entitlements API for PS4",
            "default": false
          },
          "ps5_use_entitlements_v1_api": {
            "type": "boolean",
            "title": "Ps5 Use Entitlements V1 Api",
            "description": "Whether or not to use the old entitlements API for PS5",
            "default": false
          },
          "ps4_use_auth_v1_api": {
            "type": "boolean",
            "title": "Ps4 Use Auth V1 Api",
            "description": "Whether or not to use the old auth API for PS4",
            "default": false
          },
          "ps5_use_auth_v1_api": {
            "type": "boolean",
            "title": "Ps5 Use Auth V1 Api",
            "description": "Whether or not to use the old auth API for PS5",
            "default": false
          },
          "psn_web_client_id": {
            "type": "string",
            "title": "Psn Web Client Id",
            "description": "Playstation web client ID. Client tokens are validated against this ID"
          },
          "ps4_client_id": {
            "type": "string",
            "title": "Ps4 Client Id",
            "description": "Playstation PS4 client ID. Client tokens are validated against this ID"
          },
          "ps5_client_id": {
            "type": "string",
            "title": "Ps5 Client Id",
            "description": "Playstation PS5 client ID. Client tokens are validated against this ID"
          },
          "ps4_v1_portal_token_details_enable": {
            "type": "boolean",
            "title": "Ps4 V1 Portal Token Details Enable",
            "description": "Whether or not to enable the PS4 V1 portal token details",
            "default": false
          },
          "ps4_v3_portal_token_details_enable": {
            "type": "boolean",
            "title": "Ps4 V3 Portal Token Details Enable",
            "description": "Whether or not to enable the PS4 V3 portal token details",
            "default": false
          },
          "ps5_v3_portal_token_details_enable": {
            "type": "boolean",
            "title": "Ps5 V3 Portal Token Details Enable",
            "description": "Whether or not to enable the PS5 V3 portal token details",
            "default": false
          },
          "eu_service_labels": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "uniqueItems": true,
            "title": "Eu Service Labels",
            "description": "EU Service Labels",
            "default": []
          },
          "na_service_labels": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "uniqueItems": true,
            "title": "Na Service Labels",
            "description": "NA Service Labels",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "psn_web_client_id",
          "ps4_client_id",
          "ps5_client_id"
        ],
        "title": "PlaystationConfig",
        "description": "Playstation options"
      },
      "PlaystationEnvironment": {
        "type": "string",
        "enum": [
          "sp-int",
          "prod-qa",
          "np"
        ],
        "title": "PlaystationEnvironment",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "Sony Development environment.  This is the common environment for development",
          "Sony Internal Test environment.  This is used when a game is handed to Sony Certification for testing",
          "Sony Production environment.  This is the environment that is used when a game goes live"
        ],
        "x-enum-varnames": [
          "sp_int",
          "prod_qa",
          "np"
        ]
      },
      "PolicyListResponse": {
        "properties": {
          "policies": {
            "items": {
              "$ref": "#/components/schemas/PolicyResponse"
            },
            "type": "array",
            "title": "Policies"
          }
        },
        "type": "object",
        "required": [
          "policies"
        ],
        "title": "PolicyListResponse"
      },
      "PolicyRequest": {
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "title": "Name",
            "description": "Policy name"
          },
          "permissions": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Permissions",
            "description": "List of permissions applied to the policy"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Policy description"
          }
        },
        "type": "object",
        "required": [
          "name",
          "permissions",
          "description"
        ],
        "title": "PolicyRequest"
      },
      "PolicyResponse": {
        "properties": {
          "policy_id": {
            "type": "string",
            "format": "uuid",
            "title": "Policy Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "permissions": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Permissions"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "default_policy": {
            "type": "boolean",
            "title": "Default Policy"
          }
        },
        "type": "object",
        "required": [
          "policy_id",
          "name",
          "permissions",
          "description",
          "default_policy"
        ],
        "title": "PolicyResponse"
      },
      "PortalAccountPermission": {
        "properties": {
          "account_permission_id": {
            "type": "string",
            "format": "uuid",
            "title": "Account Permission Id",
            "description": "Account permission id uniquely identifies this permission assignment"
          },
          "account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Account Id",
            "description": "Account id this permission is assigned to"
          },
          "assigned_org_id": {
            "type": "string",
            "format": "uuid",
            "title": "Assigned Org Id",
            "description": "Organization that this permission belongs to"
          },
          "org_id": {
            "type": "string",
            "format": "uuid",
            "title": "Org Id"
          },
          "product_id": {
            "type": "string",
            "format": "uuid",
            "title": "Product Id"
          },
          "sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sandbox Id"
          },
          "permission_id": {
            "type": "string",
            "title": "Permission Id"
          }
        },
        "type": "object",
        "required": [
          "account_permission_id",
          "account_id",
          "assigned_org_id",
          "permission_id"
        ],
        "title": "PortalAccountPermission"
      },
      "PortalAccountPermissionRequest": {
        "properties": {
          "account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Account Id"
          },
          "assigned_org_id": {
            "type": "string",
            "format": "uuid",
            "title": "Assigned Org Id"
          },
          "level": {
            "$ref": "#/components/schemas/PortalPermissionLevel"
          },
          "level_id": {
            "type": "string",
            "format": "uuid",
            "title": "Level Id"
          },
          "account_permission_id": {
            "type": "string",
            "format": "uuid",
            "title": "Account Permission Id"
          },
          "permission_id": {
            "type": "string",
            "title": "Permission Id"
          }
        },
        "type": "object",
        "required": [
          "account_id",
          "assigned_org_id",
          "level_id",
          "account_permission_id",
          "permission_id"
        ],
        "title": "PortalAccountPermissionRequest"
      },
      "PortalPermission": {
        "properties": {
          "permission_id": {
            "type": "string",
            "title": "Permission Id"
          },
          "type": {
            "type": "string",
            "title": "Type"
          },
          "scope": {
            "type": "string",
            "title": "Scope"
          },
          "access": {
            "type": "string",
            "title": "Access"
          },
          "description": {
            "type": "string",
            "title": "Description"
          },
          "display_name": {
            "type": "string",
            "title": "Display Name"
          },
          "level": {
            "$ref": "#/components/schemas/PermissionAssignmentLevel"
          }
        },
        "type": "object",
        "required": [
          "permission_id"
        ],
        "title": "PortalPermission"
      },
      "PortalPermissionLevel": {
        "type": "string",
        "enum": [
          "org",
          "product",
          "sandbox",
          "environment"
        ],
        "title": "PortalPermissionLevel",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "org",
          "product",
          "sandbox",
          "environment"
        ]
      },
      "PortalPermissionOrgGroup": {
        "properties": {
          "group_id": {
            "type": "string",
            "format": "uuid",
            "title": "Group Id"
          },
          "org_group_name": {
            "type": "string",
            "title": "Org Group Name"
          },
          "org_id": {
            "type": "string",
            "format": "uuid",
            "title": "Org Id"
          },
          "display_name": {
            "type": "string",
            "title": "Display Name"
          },
          "description": {
            "type": "string",
            "title": "Description"
          }
        },
        "type": "object",
        "required": [
          "group_id",
          "org_group_name",
          "org_id"
        ],
        "title": "PortalPermissionOrgGroup"
      },
      "PortalPermissions": {
        "properties": {
          "account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Account Id",
            "description": "Account id"
          },
          "is_global_admin": {
            "type": "boolean",
            "title": "Is Global Admin",
            "description": "Is this account a global admin"
          },
          "accountPermissions": {
            "items": {
              "$ref": "#/components/schemas/PortalAccountPermission"
            },
            "type": "array",
            "title": "Accountpermissions",
            "default": []
          },
          "groupPermissions": {
            "items": {
              "$ref": "#/components/schemas/PortalPermissionsOrgGroupAuth0"
            },
            "type": "array",
            "title": "Grouppermissions",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "account_id",
          "is_global_admin"
        ],
        "title": "PortalPermissions"
      },
      "PortalPermissionsOrgGroupAccount": {
        "properties": {
          "account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Account Id"
          },
          "group_id": {
            "type": "string",
            "format": "uuid",
            "title": "Group Id"
          }
        },
        "type": "object",
        "required": [
          "account_id",
          "group_id"
        ],
        "title": "PortalPermissionsOrgGroupAccount"
      },
      "PortalPermissionsOrgGroupAuth0": {
        "properties": {
          "group_id": {
            "type": "string",
            "format": "uuid",
            "title": "Group Id"
          },
          "permissions": {
            "items": {
              "$ref": "#/components/schemas/PortalPermissionsOrgGroupPermission"
            },
            "type": "array",
            "title": "Permissions",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "group_id"
        ],
        "title": "PortalPermissionsOrgGroupAuth0"
      },
      "PortalPermissionsOrgGroupPermission": {
        "properties": {
          "group_permission_id": {
            "type": "string",
            "format": "uuid",
            "title": "Group Permission Id"
          },
          "group_id": {
            "type": "string",
            "format": "uuid",
            "title": "Group Id"
          },
          "org_id": {
            "type": "string",
            "format": "uuid",
            "title": "Org Id"
          },
          "product_id": {
            "type": "string",
            "format": "uuid",
            "title": "Product Id"
          },
          "sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sandbox Id"
          },
          "permission_id": {
            "type": "string",
            "title": "Permission Id"
          }
        },
        "type": "object",
        "required": [
          "group_permission_id",
          "group_id",
          "permission_id"
        ],
        "title": "PortalPermissionsOrgGroupPermission"
      },
      "PortalPermissionsOrgGroupPermissionRequest": {
        "properties": {
          "group_permission_id": {
            "type": "string",
            "format": "uuid",
            "title": "Group Permission Id"
          },
          "group_id": {
            "type": "string",
            "format": "uuid",
            "title": "Group Id"
          },
          "level": {
            "$ref": "#/components/schemas/PortalPermissionLevel"
          },
          "level_id": {
            "type": "string",
            "format": "uuid",
            "title": "Level Id"
          },
          "permission_id": {
            "type": "string",
            "title": "Permission Id"
          }
        },
        "type": "object",
        "required": [
          "group_permission_id",
          "group_id",
          "level_id",
          "permission_id"
        ],
        "title": "PortalPermissionsOrgGroupPermissionRequest"
      },
      "PriceBreakpoint": {
        "properties": {
          "custom_data": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data associated with the resource"
          },
          "price_item_id": {
            "type": "string",
            "format": "uuid",
            "title": "Price Item Id",
            "description": "Item ID of the currency used to price."
          },
          "quantity": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "Quantity",
            "description": "Quantity for the price break point."
          },
          "price": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "Price",
            "description": "Price for the quantity."
          },
          "price_item_name": {
            "type": "string",
            "title": "Price Item Name",
            "description": "Name corresponding Item ID "
          }
        },
        "type": "object",
        "required": [
          "price_item_id",
          "quantity",
          "price"
        ],
        "title": "PriceBreakpoint",
        "description": "Price based on quantity and the Item ID of the currency used."
      },
      "PricePoint": {
        "properties": {
          "custom_data": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data associated with the resource"
          },
          "name": {
            "type": "string",
            "maxLength": 125,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the resource"
          },
          "description": {
            "type": "string",
            "maxLength": 250,
            "minLength": 1,
            "title": "Description",
            "description": "Description of the resource"
          },
          "strict_flag": {
            "type": "boolean",
            "title": "Strict Flag",
            "description": "Forces the quantity to be equal to a quantity on a Price Breakpoint.",
            "default": false
          },
          "cap_flag": {
            "type": "boolean",
            "title": "Cap Flag",
            "description": "Only allows quantity to be fulfilled up the highest quantity on the Price Breakpoints",
            "default": false
          },
          "current_breakpoints": {
            "items": {
              "$ref": "#/components/schemas/PriceBreakpoint"
            },
            "type": "array",
            "title": "Current Breakpoints",
            "description": "Current Price Breakpoints.",
            "default": []
          },
          "pre_sale_breakpoints": {
            "items": {
              "$ref": "#/components/schemas/PriceBreakpoint"
            },
            "type": "array",
            "title": "Pre Sale Breakpoints",
            "description": "Previous Price Breakpoints.",
            "default": []
          },
          "sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sandbox Id",
            "description": "ID of the Sandbox"
          },
          "last_modified_account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Last Modified Account Id",
            "description": "Account ID of the user who last modified the resource"
          },
          "last_modified_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified Timestamp",
            "description": "Timestamp of when the resource was last modified"
          },
          "created_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Created Timestamp",
            "description": "Timestamp of when the resource was created"
          },
          "price_point_id": {
            "type": "string",
            "format": "uuid",
            "title": "Price Point Id",
            "description": "The Price Point ID."
          }
        },
        "type": "object",
        "title": "PricePoint",
        "description": "A collection of Price Breakpoints (volume pricing)."
      },
      "PricePointCollection": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/PricePoint"
            },
            "type": "array",
            "title": "Data",
            "description": "The Price Points.",
            "default": []
          },
          "page_meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PageMeta"
              }
            ],
            "title": "Page Meta",
            "description": "The paging metadata."
          }
        },
        "type": "object",
        "required": [
          "page_meta"
        ],
        "title": "PricePointCollection",
        "description": "A collection of Price points."
      },
      "PricePointSortOptions": {
        "type": "string",
        "enum": [
          "price_point_id",
          "strict_flag",
          "cap_flag",
          "name",
          "last_modified_timestamp",
          "last_modified_account_id"
        ],
        "title": "PricePointSortOptions",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "price_point_id",
          "strict_flag",
          "cap_flag",
          "name",
          "last_modified_timestamp",
          "last_modified_account_id"
        ]
      },
      "Product": {
        "properties": {
          "product_id": {
            "type": "string",
            "format": "uuid",
            "title": "Product Id"
          },
          "org_id": {
            "type": "string",
            "format": "uuid",
            "title": "Org Id",
            "description": "Organization that owns this product"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Official Full Name",
            "default": ""
          },
          "primary_contact_email": {
            "type": "string",
            "title": "Primary Contact Email",
            "description": "Email Address for the primary point of contact"
          },
          "short_name": {
            "type": "string",
            "minLength": 1,
            "title": "Short Name",
            "description": "Name used in URLs"
          },
          "last_modified_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified Timestamp"
          },
          "created_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Created Timestamp"
          },
          "archive": {
            "type": "boolean",
            "title": "Archive"
          }
        },
        "type": "object",
        "required": [
          "product_id",
          "org_id",
          "short_name",
          "last_modified_timestamp",
          "created_timestamp",
          "archive"
        ],
        "title": "Product"
      },
      "ProductRequest": {
        "properties": {
          "product_id": {
            "type": "string",
            "format": "uuid",
            "title": "Product Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "primary_contact_email": {
            "type": "string",
            "title": "Primary Contact Email"
          },
          "short_name": {
            "type": "string",
            "title": "Short Name"
          },
          "archive": {
            "type": "boolean",
            "title": "Archive",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "product_id",
          "name",
          "primary_contact_email",
          "short_name"
        ],
        "title": "ProductRequest"
      },
      "ProductUpdateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "primary_contact_email": {
            "type": "string",
            "title": "Primary Contact Email"
          },
          "short_name": {
            "type": "string",
            "title": "Short Name"
          },
          "archive": {
            "type": "boolean",
            "title": "Archive",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "name",
          "primary_contact_email",
          "short_name"
        ],
        "title": "ProductUpdateRequest"
      },
      "ProfileJoinMode": {
        "type": "string",
        "enum": [
          "normal",
          "backfill",
          "created_before"
        ],
        "title": "ProfileJoinMode",
        "description": "Mode that determines what types of match requests the ticket will appear in",
        "x-enum-descriptions": [
          "Mode that determines what types of match requests the ticket will appear in",
          "Mode that determines what types of match requests the ticket will appear in",
          "Mode that determines what types of match requests the ticket will appear in"
        ],
        "x-enum-varnames": [
          "NORMAL",
          "BACKFILL",
          "CREATED_BEFORE"
        ]
      },
      "QuantityType": {
        "type": "string",
        "enum": [
          "relative",
          "absolute"
        ],
        "title": "QuantityType",
        "description": "Determines how the quantity is to be modified.\n\nRelative looks at the context in which is fulfilled; e.g. If Loot A has a quantity of 2 and 5 is being fulfill, the resulting quantity modification will be 10.\n\nAbsolute ignores the context in which it is fulfilled; e.g. If Loot B has a quantity of 3 and 5 is being fulfill 5, the resulting quantity modification will be 3.",
        "x-enum-descriptions": [
          "The quantity will be modified relative to the context in which it is fulfilled.",
          "The quantity will be modified regardless of the context in which it is fulfilled."
        ],
        "x-enum-varnames": [
          "relative",
          "absolute"
        ]
      },
      "Queue": {
        "properties": {
          "active": {
            "type": "boolean",
            "title": "Active",
            "description": "Flag for whether or not the queue is active, and can be joined or sessions created from it"
          },
          "max_queue_group_size": {
            "type": "integer",
            "minimum": 1,
            "title": "Max Queue Group Size",
            "description": "The maximum size of a group that can join this queue"
          },
          "match_making_template_group_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Template Group Id",
            "description": "ID for which group of matchmaking templates/rules will be used when joining this queue"
          },
          "legacy_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dependencies__sandbox_config__matchmaking__queues_schemas__LegacyConfig"
              }
            ],
            "title": "Legacy Config",
            "description": "Old config used by Legacy systems. These values are ignored by the current APIs"
          },
          "sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sandbox Id",
            "description": "ID of the Sandbox"
          },
          "last_modified_account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Last Modified Account Id",
            "description": "Account ID of the user who last modified the resource"
          },
          "last_modified_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified Timestamp",
            "description": "Timestamp of when the resource was last modified"
          },
          "created_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Created Timestamp",
            "description": "Timestamp of when this resource was created"
          },
          "queue_id": {
            "type": "string",
            "format": "uuid",
            "title": "Queue Id",
            "description": "ID to uniquely identify this queue"
          }
        },
        "type": "object",
        "required": [
          "active",
          "max_queue_group_size",
          "match_making_template_group_id",
          "queue_id"
        ],
        "title": "Queue"
      },
      "QueueRequest": {
        "properties": {
          "active": {
            "type": "boolean",
            "title": "Active",
            "description": "Flag for whether or not the queue is active, and can be joined or sessions created from it"
          },
          "max_queue_group_size": {
            "type": "integer",
            "minimum": 1,
            "title": "Max Queue Group Size",
            "description": "The maximum size of a group that can join this queue"
          },
          "match_making_template_group_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Template Group Id",
            "description": "ID for which group of matchmaking templates/rules will be used when joining this queue"
          },
          "legacy_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dependencies__sandbox_config__matchmaking__queues_schemas__LegacyConfig"
              }
            ],
            "title": "Legacy Config",
            "description": "Old config used by Legacy systems. These values are ignored by the current APIs"
          }
        },
        "type": "object",
        "required": [
          "active",
          "max_queue_group_size",
          "match_making_template_group_id"
        ],
        "title": "QueueRequest"
      },
      "QueueUpdateRequest": {
        "properties": {
          "active": {
            "type": "boolean",
            "title": "Active",
            "description": "Flag for whether or not the queue is active, and can be joined or sessions created from it"
          },
          "max_queue_group_size": {
            "type": "integer",
            "minimum": 1,
            "title": "Max Queue Group Size",
            "description": "The maximum size of a group that can join this queue"
          },
          "match_making_template_group_id": {
            "type": "string",
            "format": "uuid",
            "title": "Match Making Template Group Id",
            "description": "ID for which group of matchmaking templates/rules will be used when joining this queue"
          },
          "legacy_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dependencies__sandbox_config__matchmaking__queues_schemas__LegacyConfig"
              }
            ],
            "title": "Legacy Config",
            "description": "Old config used by Legacy systems. These values are ignored by the current APIs"
          }
        },
        "type": "object",
        "title": "QueueUpdateRequest"
      },
      "RHEventSchema": {
        "properties": {
          "event_name": {
            "type": "string",
            "title": "Event Name",
            "description": "Name of the event, unique for sandbox_id"
          },
          "value_jsonschema": {
            "type": "object",
            "title": "Value Jsonschema",
            "description": "JSONSchema definition of the setting",
            "default": {}
          },
          "state": {
            "type": "string",
            "title": "State",
            "description": "Indicate the state of the schema, enabled, disabled or deny",
            "default": "enabled"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the event"
          }
        },
        "type": "object",
        "required": [
          "event_name",
          "description"
        ],
        "title": "RHEventSchema"
      },
      "RHEventSchemaUpdateRequest": {
        "properties": {
          "event_name": {
            "type": "string",
            "title": "Event Name",
            "description": "Name of the event, should be unique"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the event"
          },
          "value_jsonschema": {
            "type": "object",
            "title": "Value Jsonschema",
            "description": "JSONSchema definition of the setting",
            "default": {}
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EventSchemaState"
              }
            ],
            "description": "Whether this standard event is enabled",
            "default": "enabled"
          }
        },
        "type": "object",
        "required": [
          "event_name",
          "description"
        ],
        "title": "RHEventSchemaUpdateRequest"
      },
      "Rank": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Name",
            "description": "Readable name to identify this Rank"
          },
          "rank_max": {
            "type": "number",
            "title": "Rank Max",
            "description": "The maximum skill value that can be achieved in this Rank"
          },
          "rank_min": {
            "type": "number",
            "title": "Rank Min",
            "description": "The minimum skill value that can be achieved in this Rank"
          },
          "trueskill_sigma_min": {
            "type": "number",
            "title": "Trueskill Sigma Min",
            "description": "The minimum sigma value achievable in this Rank when calculating with Trueskill"
          },
          "trueskill_beta": {
            "type": "number",
            "title": "Trueskill Beta",
            "description": "Trueskill's default beta value, which represents the distance in rating to have ~76% chance of winning for the higher rated player. Trueskill's default is 4.167"
          },
          "trueskill_default_mu": {
            "type": "number",
            "title": "Trueskill Default Mu",
            "description": "Trueskill's default mu value, which represents player skill. Trueskill's default is 25"
          },
          "trueskill_default_sigma": {
            "type": "number",
            "title": "Trueskill Default Sigma",
            "description": "Trueskill's default sigma, which represents the systems uncertainty on the player's mu (higher values mean more uncertainty). Trueskill's default is 8.333"
          },
          "trueskill_draw_probability": {
            "type": "number",
            "title": "Trueskill Draw Probability",
            "description": "Trueskill's draw probability. Trueskill's default is 0.1"
          },
          "trueskill_tau": {
            "type": "number",
            "title": "Trueskill Tau",
            "description": "Trueskill's tau, which represents the additive dynamic factor. The higher the value, the more dynamic ratings will be (wins grant more, and losses lose more). Trueskill's default value is 0.083"
          },
          "sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sandbox Id",
            "description": "ID of the Sandbox"
          },
          "last_modified_account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Last Modified Account Id",
            "description": "Account ID of the user who last modified the resource"
          },
          "last_modified_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified Timestamp",
            "description": "Timestamp of when the resource was last modified"
          },
          "created_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Created Timestamp",
            "description": "Timestamp of when this resource was created"
          },
          "rank_id": {
            "type": "string",
            "format": "uuid",
            "title": "Rank Id"
          }
        },
        "type": "object",
        "required": [
          "name",
          "rank_max",
          "rank_min",
          "rank_id"
        ],
        "title": "Rank"
      },
      "RankRequest": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Name",
            "description": "Readable name to identify this Rank"
          },
          "rank_max": {
            "type": "number",
            "title": "Rank Max",
            "description": "The maximum skill value that can be achieved in this Rank"
          },
          "rank_min": {
            "type": "number",
            "title": "Rank Min",
            "description": "The minimum skill value that can be achieved in this Rank"
          },
          "trueskill_sigma_min": {
            "type": "number",
            "title": "Trueskill Sigma Min",
            "description": "The minimum sigma value achievable in this Rank when calculating with Trueskill"
          },
          "trueskill_beta": {
            "type": "number",
            "title": "Trueskill Beta",
            "description": "Trueskill's default beta value, which represents the distance in rating to have ~76% chance of winning for the higher rated player. Trueskill's default is 4.167"
          },
          "trueskill_default_mu": {
            "type": "number",
            "title": "Trueskill Default Mu",
            "description": "Trueskill's default mu value, which represents player skill. Trueskill's default is 25"
          },
          "trueskill_default_sigma": {
            "type": "number",
            "title": "Trueskill Default Sigma",
            "description": "Trueskill's default sigma, which represents the systems uncertainty on the player's mu (higher values mean more uncertainty). Trueskill's default is 8.333"
          },
          "trueskill_draw_probability": {
            "type": "number",
            "title": "Trueskill Draw Probability",
            "description": "Trueskill's draw probability. Trueskill's default is 0.1"
          },
          "trueskill_tau": {
            "type": "number",
            "title": "Trueskill Tau",
            "description": "Trueskill's tau, which represents the additive dynamic factor. The higher the value, the more dynamic ratings will be (wins grant more, and losses lose more). Trueskill's default value is 0.083"
          },
          "legacy_config": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dependencies__sandbox_config__matchmaking__ranks_schemas__LegacyConfig"
              }
            ],
            "title": "Legacy Config",
            "description": "Old config used by Legacy systems. These values are ignored by the current APIs"
          }
        },
        "type": "object",
        "required": [
          "name",
          "rank_max",
          "rank_min"
        ],
        "title": "RankRequest"
      },
      "RankUpdateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Name",
            "description": "Readable name to identify this Rank"
          },
          "rank_max": {
            "type": "number",
            "title": "Rank Max",
            "description": "The maximum skill value that can be achieved in this Rank"
          },
          "rank_min": {
            "type": "number",
            "title": "Rank Min",
            "description": "The minimum skill value that can be achieved in this Rank"
          },
          "trueskill_sigma_min": {
            "type": "number",
            "title": "Trueskill Sigma Min",
            "description": "The minimum sigma value achievable in this Rank when calculating with Trueskill"
          },
          "trueskill_beta": {
            "type": "number",
            "title": "Trueskill Beta",
            "description": "Trueskill's default beta value, which represents the distance in rating to have ~76% chance of winning for the higher rated player. Trueskill's default is 4.167"
          },
          "trueskill_default_mu": {
            "type": "number",
            "title": "Trueskill Default Mu",
            "description": "Trueskill's default mu value, which represents player skill. Trueskill's default is 25"
          },
          "trueskill_default_sigma": {
            "type": "number",
            "title": "Trueskill Default Sigma",
            "description": "Trueskill's default sigma, which represents the systems uncertainty on the player's mu (higher values mean more uncertainty). Trueskill's default is 8.333"
          },
          "trueskill_draw_probability": {
            "type": "number",
            "title": "Trueskill Draw Probability",
            "description": "Trueskill's draw probability. Trueskill's default is 0.1"
          },
          "trueskill_tau": {
            "type": "number",
            "title": "Trueskill Tau",
            "description": "Trueskill's tau, which represents the additive dynamic factor. The higher the value, the more dynamic ratings will be (wins grant more, and losses lose more). Trueskill's default value is 0.083"
          }
        },
        "type": "object",
        "title": "RankUpdateRequest"
      },
      "Role": {
        "properties": {
          "last_modified_account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Last Modified Account Id",
            "description": "Account ID of the user who last modified the resource"
          },
          "last_modified_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified Timestamp",
            "description": "Timestamp of when the resource was last modified"
          },
          "created_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Created Timestamp",
            "description": "Timestamp of when the resource was created"
          },
          "sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sandbox Id",
            "description": "ID of the Sandbox"
          },
          "name": {
            "type": "string",
            "maxLength": 125,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the resource"
          },
          "description": {
            "type": "string",
            "maxLength": 250,
            "minLength": 1,
            "title": "Description",
            "description": "Description of the resource"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data associated with the resource"
          },
          "login_loot_rewards": {
            "items": {
              "$ref": "#/components/schemas/RoleLoginLoot"
            },
            "type": "array",
            "title": "Login Loot Rewards",
            "description": "List of login loot rewards for this role",
            "default": []
          },
          "role_id": {
            "type": "string",
            "format": "uuid",
            "title": "Role Id",
            "description": "Unique Identifier for this Role",
            "default": "e1aaa24c-5755-43b3-a697-69afa1e456e1"
          },
          "legacy_role_id": {
            "type": "integer",
            "minimum": 0,
            "title": "Legacy Role Id",
            "description": "Legacy role ID for this role",
            "default": 0
          },
          "auth_bypass": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RoleAuthBypassMethod"
              }
            ],
            "description": "Auth bypass method for this role",
            "default": "none"
          }
        },
        "type": "object",
        "title": "Role",
        "description": "This mixin is meant to give a set of common properties to root config models"
      },
      "RoleAuthBypassMethod": {
        "type": "string",
        "enum": [
          "none",
          "locked",
          "limited"
        ],
        "title": "RoleAuthBypassMethod",
        "description": "Type of Auth Bypass.",
        "x-enum-descriptions": [
          "This role cannot bypass auth.",
          "This role can bypass auth if the game is in locked access mode.",
          "This role can bypass auth if the game is in limited access mode."
        ],
        "x-enum-varnames": [
          "none",
          "locked",
          "limited"
        ]
      },
      "RoleCreate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 125,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the resource"
          },
          "description": {
            "type": "string",
            "maxLength": 250,
            "minLength": 1,
            "title": "Description",
            "description": "Description of the resource"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data associated with the resource"
          },
          "login_loot_rewards": {
            "items": {
              "$ref": "#/components/schemas/RoleLoginLoot"
            },
            "type": "array",
            "title": "Login Loot Rewards",
            "description": "List of login loot rewards for this role",
            "default": []
          },
          "role_id": {
            "type": "string",
            "format": "uuid",
            "title": "Role Id",
            "description": "Unique Identifier for this Role",
            "default": "e1aaa24c-5755-43b3-a697-69afa1e456e1"
          },
          "legacy_role_id": {
            "type": "integer",
            "minimum": 0,
            "title": "Legacy Role Id",
            "description": "Legacy role ID for this role",
            "default": 0
          },
          "auth_bypass": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RoleAuthBypassMethod"
              }
            ],
            "description": "Auth bypass method for this role",
            "default": "none"
          }
        },
        "type": "object",
        "title": "RoleCreate",
        "description": "This mixin is meant to give a set of common properties to root config models"
      },
      "RoleLoginLoot": {
        "properties": {
          "loot_id": {
            "type": "string",
            "format": "uuid",
            "title": "Loot Id",
            "description": "Loot ID for this login loot reward tied to this role"
          },
          "legacy_loot_id": {
            "type": "integer",
            "minimum": 0,
            "title": "Legacy Loot Id",
            "description": "Legacy loot ID for this login loot reward tied to this role",
            "default": 0
          }
        },
        "type": "object",
        "required": [
          "loot_id"
        ],
        "title": "RoleLoginLoot"
      },
      "RoleLoginLootBase": {
        "properties": {
          "loot_id": {
            "type": "string",
            "format": "uuid",
            "title": "Loot Id",
            "description": "Loot ID for this login loot reward tied to this role"
          }
        },
        "type": "object",
        "required": [
          "loot_id"
        ],
        "title": "RoleLoginLootBase"
      },
      "RoleUpdate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 125,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the resource"
          },
          "description": {
            "type": "string",
            "maxLength": 250,
            "minLength": 1,
            "title": "Description",
            "description": "Description of the resource"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data associated with the resource"
          },
          "login_loot_rewards": {
            "items": {
              "$ref": "#/components/schemas/RoleLoginLootBase"
            },
            "type": "array",
            "title": "Login Loot Rewards",
            "description": "List of login loot rewards for this role",
            "default": []
          },
          "auth_bypass": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RoleAuthBypassMethod"
              }
            ],
            "description": "Auth bypass method for this role",
            "default": "none"
          }
        },
        "type": "object",
        "title": "RoleUpdate",
        "description": "This mixin is meant to give a set of common properties to root config models"
      },
      "RuleType": {
        "type": "string",
        "enum": [
          "Inventory",
          "LinkingSize"
        ],
        "title": "RuleType",
        "description": "What type of rule is being evaluated",
        "x-enum-descriptions": [
          "What type of rule is being evaluated",
          "What type of rule is being evaluated"
        ],
        "x-enum-varnames": [
          "INVENTORY",
          "LINKING_SIZE"
        ]
      },
      "Sandbox": {
        "properties": {
          "sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sandbox Id"
          },
          "product_id": {
            "type": "string",
            "format": "uuid",
            "title": "Product Id",
            "description": "Product that owns this sandbox"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Official Full Name",
            "default": ""
          },
          "primary_contact_email": {
            "type": "string",
            "title": "Primary Contact Email",
            "description": "Email Address for the primary point of contact",
            "default": ""
          },
          "short_name": {
            "type": "string",
            "minLength": 1,
            "title": "Short Name",
            "description": "Name used in URLs"
          },
          "last_modified_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified Timestamp"
          },
          "created_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Created Timestamp"
          },
          "classic_support_tool_url": {
            "type": "string",
            "title": "Classic Support Tool Url",
            "description": "URL to the classic support tool"
          },
          "archive": {
            "type": "boolean",
            "title": "Archive"
          }
        },
        "type": "object",
        "required": [
          "sandbox_id",
          "product_id",
          "short_name",
          "last_modified_timestamp",
          "created_timestamp",
          "archive"
        ],
        "title": "Sandbox"
      },
      "SandboxCopyRequest": {
        "properties": {
          "target_sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Target Sandbox Id"
          }
        },
        "type": "object",
        "required": [
          "target_sandbox_id"
        ],
        "title": "SandboxCopyRequest"
      },
      "SandboxRequest": {
        "properties": {
          "sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sandbox Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "primary_contact_email": {
            "type": "string",
            "title": "Primary Contact Email"
          },
          "short_name": {
            "type": "string",
            "title": "Short Name"
          },
          "archive": {
            "type": "boolean",
            "title": "Archive",
            "default": false
          },
          "classic_support_tool_url": {
            "type": "string",
            "title": "Classic Support Tool Url",
            "description": "URL to the classic support tool"
          }
        },
        "type": "object",
        "required": [
          "sandbox_id",
          "name",
          "primary_contact_email",
          "short_name"
        ],
        "title": "SandboxRequest"
      },
      "SandboxUpdateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "primary_contact_email": {
            "type": "string",
            "title": "Primary Contact Email"
          },
          "short_name": {
            "type": "string",
            "title": "Short Name"
          },
          "archive": {
            "type": "boolean",
            "title": "Archive",
            "default": false
          },
          "classic_support_tool_url": {
            "type": "string",
            "title": "Classic Support Tool Url",
            "description": "URL to the classic support tool"
          }
        },
        "type": "object",
        "required": [
          "name",
          "primary_contact_email",
          "short_name"
        ],
        "title": "SandboxUpdateRequest"
      },
      "SessionTemplate": {
        "properties": {
          "session_type": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Session Type",
            "description": "Unique name for this type of session"
          },
          "engine_session_type": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Engine Session Type",
            "description": "The engine name for this session type"
          },
          "can_join_matchmaking": {
            "type": "boolean",
            "title": "Can Join Matchmaking",
            "description": "If sessions of this type can be entered into the matchmaking system",
            "default": true
          },
          "can_be_created_by_players": {
            "type": "boolean",
            "title": "Can Be Created By Players",
            "description": "If players can create this session directly",
            "default": true
          },
          "publicly_joinable": {
            "type": "boolean",
            "title": "Publicly Joinable",
            "description": "If the session should be publicly joinable without invites",
            "default": false
          },
          "attempt_auto_join": {
            "type": "boolean",
            "title": "Attempt Auto Join",
            "description": "Should we attempt to automatically join an existing session before creating a new one",
            "default": false
          },
          "default_public": {
            "type": "boolean",
            "title": "Default Public",
            "description": "If the session should be publicly joinable without invites",
            "default": false
          },
          "auto_add_to_browser": {
            "type": "boolean",
            "title": "Auto Add To Browser",
            "description": "If the session should be automatically added to the public session browser",
            "default": false
          },
          "auto_browser_params": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Auto Browser Params",
            "description": "Parameters added to the session when it is automatically added to the public session browser"
          },
          "can_be_added_to_browser": {
            "type": "boolean",
            "title": "Can Be Added To Browser",
            "description": "Can this session type be added to the public session browser",
            "default": true
          },
          "keep_alive_on_empty": {
            "type": "boolean",
            "title": "Keep Alive On Empty",
            "description": "If the session should be kept alive when there are no players actively in it",
            "default": false
          },
          "auto_startup_params": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceStartupParams"
              }
            ],
            "title": "Auto Startup Params",
            "description": "Parameters passed to an instance when it is automatically started for this session type"
          },
          "min_session_count": {
            "type": "integer",
            "minimum": 0,
            "title": "Min Session Count",
            "description": "The minimum number of these sessions that should be kept alive at all times",
            "default": 0
          },
          "default_num_teams": {
            "type": "integer",
            "minimum": 1,
            "title": "Default Num Teams",
            "description": "Default number of teams this session type will have",
            "default": 2
          },
          "default_players_per_team": {
            "type": "integer",
            "minimum": 1,
            "title": "Default Players Per Team",
            "description": "Default number of players allowed per team",
            "default": 4
          },
          "can_player_change_team": {
            "type": "boolean",
            "title": "Can Player Change Team",
            "description": "Can a player change their own team without elevated permissions",
            "default": true
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom passthrough data that will be added to all sessions of this type",
            "default": {}
          },
          "sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sandbox Id",
            "description": "ID of the Sandbox"
          },
          "session_template_id": {
            "type": "string",
            "format": "uuid",
            "title": "Session Template Id",
            "description": "UUID to identify this specific session template"
          },
          "platform_session_templates": {
            "items": {
              "$ref": "#/components/schemas/PlatformSessionTemplate"
            },
            "type": "array",
            "title": "Platform Session Templates",
            "description": "List of PlatformSessionTemplates that belong to this session type",
            "default": []
          },
          "last_modified_account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Last Modified Account Id",
            "description": "Account ID of the user who last modified the resource"
          },
          "last_modified_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified Timestamp",
            "description": "Timestamp of when the resource was last modified"
          }
        },
        "type": "object",
        "required": [
          "session_type",
          "engine_session_type",
          "session_template_id"
        ],
        "title": "SessionTemplate"
      },
      "SessionTemplateRequest": {
        "properties": {
          "session_type": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Session Type",
            "description": "Unique name for this type of session"
          },
          "engine_session_type": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Engine Session Type",
            "description": "The engine name for this session type"
          },
          "can_join_matchmaking": {
            "type": "boolean",
            "title": "Can Join Matchmaking",
            "description": "If sessions of this type can be entered into the matchmaking system",
            "default": true
          },
          "can_be_created_by_players": {
            "type": "boolean",
            "title": "Can Be Created By Players",
            "description": "If players can create this session directly",
            "default": true
          },
          "publicly_joinable": {
            "type": "boolean",
            "title": "Publicly Joinable",
            "description": "If the session should be publicly joinable without invites",
            "default": false
          },
          "attempt_auto_join": {
            "type": "boolean",
            "title": "Attempt Auto Join",
            "description": "Should we attempt to automatically join an existing session before creating a new one",
            "default": false
          },
          "default_public": {
            "type": "boolean",
            "title": "Default Public",
            "description": "If the session should be publicly joinable without invites",
            "default": false
          },
          "auto_add_to_browser": {
            "type": "boolean",
            "title": "Auto Add To Browser",
            "description": "If the session should be automatically added to the public session browser",
            "default": false
          },
          "auto_browser_params": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Auto Browser Params",
            "description": "Parameters added to the session when it is automatically added to the public session browser"
          },
          "can_be_added_to_browser": {
            "type": "boolean",
            "title": "Can Be Added To Browser",
            "description": "Can this session type be added to the public session browser",
            "default": true
          },
          "keep_alive_on_empty": {
            "type": "boolean",
            "title": "Keep Alive On Empty",
            "description": "If the session should be kept alive when there are no players actively in it",
            "default": false
          },
          "auto_startup_params": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceStartupParams"
              }
            ],
            "title": "Auto Startup Params",
            "description": "Parameters passed to an instance when it is automatically started for this session type"
          },
          "min_session_count": {
            "type": "integer",
            "minimum": 0,
            "title": "Min Session Count",
            "description": "The minimum number of these sessions that should be kept alive at all times",
            "default": 0
          },
          "default_num_teams": {
            "type": "integer",
            "minimum": 1,
            "title": "Default Num Teams",
            "description": "Default number of teams this session type will have",
            "default": 2
          },
          "default_players_per_team": {
            "type": "integer",
            "minimum": 1,
            "title": "Default Players Per Team",
            "description": "Default number of players allowed per team",
            "default": 4
          },
          "can_player_change_team": {
            "type": "boolean",
            "title": "Can Player Change Team",
            "description": "Can a player change their own team without elevated permissions",
            "default": true
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom passthrough data that will be added to all sessions of this type",
            "default": {}
          }
        },
        "type": "object",
        "required": [
          "session_type",
          "engine_session_type"
        ],
        "title": "SessionTemplateRequest"
      },
      "SessionTemplateUpdateRequest": {
        "properties": {
          "session_type": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Session Type",
            "description": "Unique name for this type of session"
          },
          "engine_session_type": {
            "type": "string",
            "maxLength": 50,
            "minLength": 1,
            "title": "Engine Session Type",
            "description": "The engine name for this session type"
          },
          "can_join_matchmaking": {
            "type": "boolean",
            "title": "Can Join Matchmaking",
            "description": "If sessions of this type can be entered into the matchmaking system",
            "default": true
          },
          "can_be_created_by_players": {
            "type": "boolean",
            "title": "Can Be Created By Players",
            "description": "If players can create this session directly",
            "default": true
          },
          "publicly_joinable": {
            "type": "boolean",
            "title": "Publicly Joinable",
            "description": "If the session should be publicly joinable without invites",
            "default": false
          },
          "attempt_auto_join": {
            "type": "boolean",
            "title": "Attempt Auto Join",
            "description": "Should we attempt to automatically join an existing session before creating a new one",
            "default": false
          },
          "default_public": {
            "type": "boolean",
            "title": "Default Public",
            "description": "If the session should be publicly joinable without invites",
            "default": false
          },
          "auto_add_to_browser": {
            "type": "boolean",
            "title": "Auto Add To Browser",
            "description": "If the session should be automatically added to the public session browser",
            "default": false
          },
          "auto_browser_params": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Auto Browser Params",
            "description": "Parameters added to the session when it is automatically added to the public session browser"
          },
          "can_be_added_to_browser": {
            "type": "boolean",
            "title": "Can Be Added To Browser",
            "description": "Can this session type be added to the public session browser",
            "default": true
          },
          "keep_alive_on_empty": {
            "type": "boolean",
            "title": "Keep Alive On Empty",
            "description": "If the session should be kept alive when there are no players actively in it"
          },
          "auto_startup_params": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceStartupParams"
              }
            ],
            "title": "Auto Startup Params",
            "description": "Parameters passed to an instance when it is automatically started for this session type"
          },
          "min_session_count": {
            "type": "integer",
            "minimum": 0,
            "title": "Min Session Count",
            "description": "The minimum number of these sessions that should be kept alive at all times",
            "default": 0
          },
          "default_num_teams": {
            "type": "integer",
            "minimum": 1,
            "title": "Default Num Teams",
            "description": "Default number of teams this session type will have",
            "default": 2
          },
          "default_players_per_team": {
            "type": "integer",
            "minimum": 1,
            "title": "Default Players Per Team",
            "description": "Default number of players allowed per team",
            "default": 4
          },
          "can_player_change_team": {
            "type": "boolean",
            "title": "Can Player Change Team",
            "description": "Can a player change their own team without elevated permissions",
            "default": true
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string",
              "maxLength": 4096,
              "minLength": 1
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom passthrough data that will be added to all sessions of this type"
          }
        },
        "type": "object",
        "title": "SessionTemplateUpdateRequest"
      },
      "SettingType": {
        "properties": {
          "custom_data": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data associated with the resource"
          },
          "name": {
            "type": "string",
            "maxLength": 125,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the resource"
          },
          "description": {
            "type": "string",
            "maxLength": 250,
            "minLength": 1,
            "title": "Description",
            "description": "Description of the resource"
          },
          "last_modified_account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Last Modified Account Id",
            "description": "Account ID of the user who last modified the resource"
          },
          "last_modified_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified Timestamp",
            "description": "Timestamp of when the resource was last modified"
          },
          "created_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Created Timestamp",
            "description": "Timestamp of when the resource was created"
          },
          "setting_type_unique_id": {
            "type": "string",
            "format": "uuid",
            "title": "Setting Type Unique Id",
            "description": "Unique identifier for this setting type"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "User friendly identifier of setting type"
          },
          "version": {
            "type": "integer",
            "title": "Version",
            "description": "Version of setting type schema",
            "default": 1
          },
          "value_jsonschema": {
            "type": "object",
            "title": "Value Jsonschema",
            "description": "JSONSchema definition of the setting",
            "default": {}
          },
          "allow_update": {
            "type": "boolean",
            "title": "Allow Update",
            "description": "Whether setting type can be updated",
            "default": true
          },
          "key_regex": {
            "type": "string",
            "title": "Key Regex",
            "description": "Regex that is used to verify keys at assignment time",
            "default": "^.+$"
          }
        },
        "type": "object",
        "required": [
          "setting_type_unique_id",
          "type"
        ],
        "title": "SettingType",
        "description": "This mixin is meant to give a set of common properties to root config models"
      },
      "SettingTypeRequest": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 125,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the resource"
          },
          "description": {
            "type": "string",
            "maxLength": 250,
            "minLength": 1,
            "title": "Description",
            "description": "Description of the resource"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data associated with the resource"
          },
          "setting_type_unique_id": {
            "type": "string",
            "format": "uuid",
            "title": "Setting Type Unique Id",
            "description": "Unique identifier for this setting type",
            "default": "d41780b3-e031-4792-84a4-1afaece9e5dd"
          },
          "version": {
            "type": "integer",
            "title": "Version",
            "description": "Version of setting type schema",
            "default": 1
          },
          "value_jsonschema": {
            "type": "object",
            "title": "Value Jsonschema",
            "description": "JSONSchema definition of the setting",
            "default": {}
          },
          "allow_update": {
            "type": "boolean",
            "title": "Allow Update",
            "description": "Whether setting type can be updated",
            "default": true
          },
          "key_regex": {
            "type": "string",
            "title": "Key Regex",
            "description": "Regex that is used to verify keys at assignment time",
            "default": "^.+$"
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "User friendly identifier of setting type"
          }
        },
        "type": "object",
        "required": [
          "type"
        ],
        "title": "SettingTypeRequest",
        "description": "This mixin is meant to give a set of common properties to root config models"
      },
      "SettingTypeUpdateRequest": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 125,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the resource"
          },
          "description": {
            "type": "string",
            "maxLength": 250,
            "minLength": 1,
            "title": "Description",
            "description": "Description of the resource"
          },
          "custom_data": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data associated with the resource"
          },
          "setting_type_unique_id": {
            "type": "string",
            "format": "uuid",
            "title": "Setting Type Unique Id",
            "description": "Unique identifier for this setting type",
            "default": "d41780b3-e031-4792-84a4-1afaece9e5dd"
          },
          "version": {
            "type": "integer",
            "title": "Version",
            "description": "Version of setting type schema",
            "default": 1
          },
          "value_jsonschema": {
            "type": "object",
            "title": "Value Jsonschema",
            "description": "JSONSchema definition of the setting",
            "default": {}
          },
          "allow_update": {
            "type": "boolean",
            "title": "Allow Update",
            "description": "Whether setting type can be updated",
            "default": true
          },
          "key_regex": {
            "type": "string",
            "title": "Key Regex",
            "description": "Regex that is used to verify keys at assignment time",
            "default": "^.+$"
          }
        },
        "type": "object",
        "title": "SettingTypeUpdateRequest",
        "description": "This mixin is meant to give a set of common properties to root config models"
      },
      "SimpleProductAssignment": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "title": "Name",
            "description": "The name of the product that will be used directly by the deployment system. e.g., paladins, roco"
          },
          "count": {
            "type": "integer",
            "title": "Count",
            "description": "The number of instances of the product that will be used directly by the deployment system."
          },
          "host_id": {
            "type": "string",
            "format": "uuid",
            "title": "Host Id",
            "description": "The ID of the host this assignment is associated with"
          },
          "simple_product_assignment_id": {
            "type": "string",
            "format": "uuid",
            "title": "Simple Product Assignment Id"
          }
        },
        "type": "object",
        "required": [
          "name",
          "count",
          "host_id",
          "simple_product_assignment_id"
        ],
        "title": "SimpleProductAssignment",
        "description": "This is a minimal assignment type that represents how we currently handle assignments, but should be improved upon in the future."
      },
      "SimpleProductAssignmentCreate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "title": "Name",
            "description": "The name of the product that will be used directly by the deployment system. e.g., paladins, roco"
          },
          "count": {
            "type": "integer",
            "title": "Count",
            "description": "The number of instances of the product that will be used directly by the deployment system."
          },
          "host_id": {
            "type": "string",
            "format": "uuid",
            "title": "Host Id",
            "description": "The ID of the host this assignment is associated with"
          }
        },
        "type": "object",
        "required": [
          "name",
          "count",
          "host_id"
        ],
        "title": "SimpleProductAssignmentCreate",
        "description": "This is a minimal assignment type that represents how we currently handle assignments, but should be improved upon in the future."
      },
      "SimpleProductAssignmentUpdate": {
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "title": "Name",
            "description": "The name of the product that will be used directly by the deployment system. e.g., paladins, roco"
          },
          "count": {
            "type": "integer",
            "title": "Count",
            "description": "The number of instances of the product that will be used directly by the deployment system."
          },
          "host_id": {
            "type": "string",
            "format": "uuid",
            "title": "Host Id",
            "description": "The ID of the host this assignment is associated with"
          }
        },
        "type": "object",
        "title": "SimpleProductAssignmentUpdate",
        "description": "This is a minimal assignment type that represents how we currently handle assignments, but should be improved upon in the future."
      },
      "SimpleProductAssignmentVersionsAndTransactions": {
        "properties": {
          "versions": {
            "items": {
              "$ref": "#/components/schemas/SimpleProductAssignment"
            },
            "type": "array",
            "title": "Versions"
          },
          "transactions": {
            "items": {
              "$ref": "#/components/schemas/Transaction"
            },
            "type": "array",
            "title": "Transactions"
          }
        },
        "type": "object",
        "required": [
          "versions",
          "transactions"
        ],
        "title": "SimpleProductAssignmentVersionsAndTransactions"
      },
      "SocialConfig": {
        "properties": {
          "friend_limit": {
            "type": "integer",
            "maximum": 1000,
            "minimum": 0,
            "title": "Friend Limit",
            "description": "Maximum allowed friends per player",
            "default": 100
          },
          "block_limit": {
            "type": "integer",
            "maximum": 1000,
            "minimum": 0,
            "title": "Block Limit",
            "description": "Maximum allowed outgoing blocks per player",
            "default": 100
          }
        },
        "type": "object",
        "title": "SocialConfig",
        "description": "Social options"
      },
      "SortOrder": {
        "type": "string",
        "enum": [
          "asc",
          "desc"
        ],
        "title": "SortOrder",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "asc",
          "desc"
        ]
      },
      "SteamConfig": {
        "properties": {
          "enable_login": {
            "type": "boolean",
            "title": "Enable Login",
            "description": "Whether or not to enable Steam",
            "default": true
          },
          "wallet_refunds_trigger_ban": {
            "type": "boolean",
            "title": "Wallet Refunds Trigger Ban",
            "description": "Whether or not to ban players who refund their wallet purchases",
            "default": true
          },
          "enforce_vac_bans": {
            "type": "boolean",
            "title": "Enforce Vac Bans",
            "description": "Whether or not to enforce VAC bans",
            "default": true
          },
          "enforce_publisher_bans": {
            "type": "boolean",
            "title": "Enforce Publisher Bans",
            "description": "Whether or not to enforce publisher bans",
            "default": true
          },
          "appid": {
            "type": "integer",
            "minimum": 1,
            "title": "Appid",
            "description": "Steam app ID for the game"
          }
        },
        "type": "object",
        "required": [
          "appid"
        ],
        "title": "SteamConfig",
        "description": "Steam options"
      },
      "StrideFactory": {
        "type": "string",
        "enum": [
          "Fixed",
          "Probabilistic"
        ],
        "title": "StrideFactory",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "fixed",
          "probabilistic"
        ]
      },
      "TaskforceSizeByTime": {
        "properties": {
          "min_decayed_size": {
            "type": "integer",
            "minimum": 1,
            "title": "Min Decayed Size",
            "description": "The minimum size this taskforce can decay to"
          },
          "starting_size": {
            "type": "integer",
            "minimum": 1,
            "title": "Starting Size",
            "description": "How big the taskforce should be before any decay has occurred"
          },
          "decay_power": {
            "type": "integer",
            "minimum": 1,
            "title": "Decay Power",
            "description": "At what rate should the decay occur. 1 is linear, 2 quadratic etc"
          },
          "max_minutes": {
            "type": "number",
            "exclusiveMinimum": 0,
            "title": "Max Minutes",
            "description": "How many minutes it will take for the taskforce size to fully decay"
          }
        },
        "type": "object",
        "required": [
          "min_decayed_size",
          "starting_size",
          "decay_power",
          "max_minutes"
        ],
        "title": "TaskforceSizeByTime"
      },
      "Transaction": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "issued_at": {
            "type": "string",
            "format": "date-time",
            "title": "Time Zone Aware Datetime",
            "description": "Datetime that enforces that a timezone is given. Unix timestamps are allowed and forced into the UTC time zone"
          },
          "meta": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Meta"
          }
        },
        "type": "object",
        "required": [
          "id",
          "issued_at",
          "meta"
        ],
        "title": "Transaction"
      },
      "TrueSkillQualityByTimeMethod": {
        "type": "string",
        "enum": [
          "two_term_quadratic"
        ],
        "title": "TrueSkillQualityByTimeMethod",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration."
        ],
        "x-enum-varnames": [
          "TWO_TERM_QUADRATIC"
        ]
      },
      "TwitchConfig": {
        "properties": {
          "enable_login": {
            "type": "boolean",
            "title": "Enable Login",
            "description": "Whether or not to enable Twitch logins",
            "default": true
          },
          "client_id": {
            "type": "string",
            "title": "Client Id",
            "description": "Twitch client ID. Client tokens are validated against this ID"
          },
          "game_id": {
            "type": "string",
            "title": "Game Id",
            "description": "Twitch game ID."
          }
        },
        "type": "object",
        "required": [
          "client_id",
          "game_id"
        ],
        "title": "TwitchConfig"
      },
      "UpdateClientRequest": {
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1,
            "title": "Name",
            "description": "Client name"
          },
          "policy_id": {
            "type": "string",
            "format": "uuid",
            "title": "Policy Id",
            "description": "Policy ID to use for the client"
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Client description"
          },
          "rotate_secret": {
            "type": "boolean",
            "title": "Rotate Secret",
            "description": "Rotate the client secret",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "name",
          "policy_id",
          "description"
        ],
        "title": "UpdateClientRequest"
      },
      "UpdateEntitlementSku": {
        "properties": {
          "custom_data": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data associated with the resource"
          },
          "name": {
            "type": "string",
            "maxLength": 125,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the resource"
          },
          "description": {
            "type": "string",
            "maxLength": 250,
            "minLength": 1,
            "title": "Description",
            "description": "Description of the resource"
          },
          "platform": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Platform"
              }
            ],
            "description": "The platform the Entitlement Sku is for."
          },
          "loot_entitlement": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LootEntitlement"
              }
            ],
            "title": "Loot Entitlement",
            "description": "The Loot Entitlement."
          },
          "external_key_entitlement": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalKeyEntitlement"
              }
            ],
            "title": "External Key Entitlement",
            "description": "The External Key Entitlement."
          },
          "sku": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "title": "Sku",
            "description": "The External SKU."
          }
        },
        "type": "object",
        "required": [
          "platform",
          "sku"
        ],
        "title": "UpdateEntitlementSku",
        "description": "Entitlement Sku to update."
      },
      "UpdateExternalKeyCampaign": {
        "properties": {
          "custom_data": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data associated with the resource"
          },
          "name": {
            "type": "string",
            "maxLength": 125,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the resource"
          },
          "description": {
            "type": "string",
            "maxLength": 250,
            "minLength": 1,
            "title": "Description",
            "description": "Description of the resource"
          },
          "key_types": {
            "items": {
              "type": "string",
              "maxLength": 256,
              "minLength": 1
            },
            "type": "array",
            "title": "Key Types",
            "description": "The types of keys that can be distributed by this campaign.",
            "default": []
          }
        },
        "type": "object",
        "title": "UpdateExternalKeyCampaign",
        "description": "External Key Campaign to update."
      },
      "UpdateInventoryBucketUseRuleSet": {
        "properties": {
          "custom_data": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data associated with the resource"
          },
          "name": {
            "type": "string",
            "maxLength": 125,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the resource"
          },
          "description": {
            "type": "string",
            "maxLength": 250,
            "minLength": 1,
            "title": "Description",
            "description": "Description of the resource"
          },
          "rules": {
            "additionalProperties": {
              "items": {
                "$ref": "#/components/schemas/InventoryBucket"
              },
              "type": "array"
            },
            "type": "object",
            "title": "Rules",
            "description": "The Inventory Bucket Use Rules by Inventory Bucket.",
            "default": {}
          }
        },
        "type": "object",
        "title": "UpdateInventoryBucketUseRuleSet",
        "description": "A collection of Inventory Bucket Use Rules to update."
      },
      "UpdateItemRequest": {
        "properties": {
          "custom_data": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data associated with the resource"
          },
          "name": {
            "type": "string",
            "maxLength": 125,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the resource"
          },
          "description": {
            "type": "string",
            "maxLength": 250,
            "minLength": 1,
            "title": "Description",
            "description": "Description of the resource"
          },
          "item_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ItemType"
              }
            ],
            "description": "The type of item.",
            "default": "unit"
          },
          "entitled_loot_id": {
            "type": "string",
            "format": "uuid",
            "title": "Entitled Loot Id",
            "description": "This is only valid for an entitlement Item. When this item is granted and Inventory Session creation, this is the Loot ID that will be fulfilled."
          },
          "level_xp_table_id": {
            "type": "string",
            "format": "uuid",
            "title": "Level Xp Table Id",
            "description": "The XP Table that is used to determine the Player's level for this XP. The level increase occurs when the quantity of this Item increases above the minimum XP of an XP Level. This is only valid for an unit Item."
          },
          "level_vendor_id": {
            "type": "string",
            "format": "uuid",
            "title": "Level Vendor Id",
            "description": "The vendor containing the rewards to grant to the player as they level up.  If a `level_xp_table_id` is configured, when this item is granted to a player their quantity is converted to a level using that table and rewards are granted based on the `sort_order` of loot inside this reward vendor.  If there is no `level_xp_table_id` configured, the quantity is used to select loot to grant from this reward vendor.  This is only valid for an unit Item."
          },
          "inventory_bucket_use_rule_set_id": {
            "type": "string",
            "format": "uuid",
            "title": "Inventory Bucket Use Rule Set Id",
            "description": "The Inventory Bucket Use Rule Set ID that determines how this item can be used across buckets."
          },
          "coupon_discount_percentage": {
            "type": "number",
            "maximum": 1,
            "exclusiveMinimum": 0,
            "title": "Coupon Discount Percentage",
            "description": "The amount the price is discounted. This is a percentage between 0 and 1. For example, 0.25 would be a 25% discount."
          },
          "coupon_consume_on_use": {
            "type": "boolean",
            "title": "Coupon Consume On Use",
            "description": "If true, the coupon will be consumed when used by decreasing the quantity in the Player's Inventory by 1. If false, the coupon will remain in the Player's inventory after use."
          },
          "coupon_discount_loot": {
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "type": "array",
            "minItems": 0,
            "title": "Coupon Discount Loot",
            "description": "List of Loot IDs this item can discount",
            "default": []
          },
          "coupon_discount_currency_item_name": {
            "type": "string",
            "title": "Coupon Discount Currency Item Name",
            "description": "Name of corresponding currency Item ID "
          },
          "coupon_discount_currency_item_id": {
            "type": "string",
            "format": "uuid",
            "title": "Coupon Discount Currency Item Id",
            "description": "The Item ID of the currency to be used for the coupon."
          }
        },
        "type": "object",
        "title": "UpdateItemRequest",
        "description": "Update an existing Item entity."
      },
      "UpdateLootRequest": {
        "properties": {
          "custom_data": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data associated with the resource"
          },
          "name": {
            "type": "string",
            "maxLength": 125,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the resource"
          },
          "description": {
            "type": "string",
            "maxLength": 250,
            "minLength": 1,
            "title": "Description",
            "description": "Description of the resource"
          },
          "item_id": {
            "type": "string",
            "format": "uuid",
            "title": "Item Id",
            "description": "The Item ID. Optional Item that will be granted to the player if Sub Vendor ID is not specified."
          },
          "sub_vendor_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sub Vendor Id",
            "description": "The Sub Vendor ID. Optional Vendor ID that will be used to fulfill the Loot instead of granting the Item."
          },
          "quantity": {
            "type": "integer",
            "title": "Quantity",
            "description": "The quantity of the Item or Sub Vendor to fulfill. This will be multiplied by the quantity of fulfilled Loot and the parent Loot if quantity_type is relative.",
            "default": 1
          },
          "inventory_selector_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InventorySelector"
              }
            ],
            "description": "The Inventory Selector Type. Determine how the Inventory is selected and quantity is modified."
          },
          "inventory_operation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InventoryOperation"
              }
            ],
            "description": "The Inventory Operation. Determine how the Loot quantity is modified based on the context it is fulfilled in. This also determines the order Loot will be fulfilled in when sort_order is the same."
          },
          "active": {
            "type": "boolean",
            "title": "Active",
            "description": "Determines if the Loot is active. Inactive Loot will not be fulfilled.",
            "default": false
          },
          "sort_order": {
            "type": "integer",
            "minimum": 0,
            "title": "Sort Order",
            "description": "The sort order of the Loot. Lower sort order will be fulfilled first. Inventory Operation is used as a tie breaker when sort_order is the same.",
            "default": 0
          },
          "drop_weight": {
            "type": "integer",
            "minimum": 0,
            "title": "Drop Weight",
            "description": "The drop weight of the Loot. Higher drop weight will be more likely to be fulfilled.",
            "default": 0
          },
          "fill_in_new_order": {
            "type": "boolean",
            "title": "Fill In New Order",
            "description": "When dropped in a randomly sampled vendor, will this create a new order or fill inline?. The primary use case for this is when you want the same loot to be dropped multiple times in a randomly sampled vendor.",
            "default": false
          },
          "allow_partial_bundles": {
            "type": "boolean",
            "title": "Allow Partial Bundles",
            "description": "When dropped in a randomly sampled vendor, will the sub vendor allow dropping part of the the bundle?  False means it will only drop if the entire sub vendor can be given to the player",
            "default": true
          },
          "required_item_id": {
            "type": "string",
            "format": "uuid",
            "title": "Required Item Id",
            "description": "Item required to be owned/rented to drop this Loot in a randomly sampled vendor"
          },
          "required_item_count": {
            "type": "integer",
            "minimum": 0,
            "title": "Required Item Count",
            "description": "Amount of the required_item_id to be owned/rented to drop this Loot in a randomly sampled vendor",
            "default": 0
          },
          "stack_limit": {
            "type": "integer",
            "minimum": 0,
            "title": "Stack Limit",
            "description": "Amount of owned/rented of this Loot's item that will prevent this Loot from dropping in a randomly sampled vendor",
            "default": 0
          },
          "quantity_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/QuantityType"
              }
            ],
            "description": "Determines how the quantity is modified in the context it is fulfilled in.",
            "default": "relative"
          },
          "quantity_multi_inventory_item_id": {
            "type": "string",
            "format": "uuid",
            "title": "Quantity Multi Inventory Item Id",
            "description": "When fulfilling Loot if this is set the quantity will be multiplied by the quantity of this Item in the Player's Inventory."
          },
          "is_claimable_by_client": {
            "type": "boolean",
            "title": "Is Claimable By Client",
            "description": "Determines if the Loot can be claimed by the client. This is dangerous without the correct loot confiuration as a client could claim Loot multiple times.",
            "default": false
          },
          "time_frame_id": {
            "type": "string",
            "format": "uuid",
            "title": "Time Frame Id",
            "description": "The Time Frame ID. Optional Time Frame ID that will be used the expiration of Loot when it is fulfilled."
          },
          "use_inventory_bucket": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InventoryBucket"
              }
            ],
            "description": "Inventory Bucket to use for this Loot."
          },
          "xp_quantity_transform_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/XpQuantityTransform"
              }
            ],
            "description": "Allows treating quantity as additional levels to grant to the Player.",
            "default": "none"
          },
          "current_price_point_id": {
            "type": "string",
            "format": "uuid",
            "title": "Current Price Point Id",
            "description": "The current price point id. Optional Price Point ID that will be used to determine the price of the Loot when it is fulfilled."
          },
          "pre_sale_price_point_id": {
            "type": "string",
            "format": "uuid",
            "title": "Pre Sale Price Point Id",
            "description": "The pre sale price point id. Optional Price Point ID that will be used to show the previous price of the Loot."
          },
          "hard_quantity_maximum": {
            "type": "integer",
            "minimum": 0,
            "title": "Hard Quantity Maximum",
            "description": "Hard cap on quantity of an item this Loot can give. Disabled with 0",
            "default": 0
          },
          "vendor_id": {
            "type": "string",
            "format": "uuid",
            "title": "Vendor Id",
            "description": "The Vendor ID"
          }
        },
        "type": "object",
        "required": [
          "inventory_selector_type",
          "inventory_operation",
          "vendor_id"
        ],
        "title": "UpdateLootRequest",
        "description": "Update an existing Loot entity."
      },
      "UpdateLootWithVendorRequest": {
        "properties": {
          "custom_data": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data associated with the resource"
          },
          "name": {
            "type": "string",
            "maxLength": 125,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the resource"
          },
          "description": {
            "type": "string",
            "maxLength": 250,
            "minLength": 1,
            "title": "Description",
            "description": "Description of the resource"
          },
          "item_id": {
            "type": "string",
            "format": "uuid",
            "title": "Item Id",
            "description": "The Item ID. Optional Item that will be granted to the player if Sub Vendor ID is not specified."
          },
          "sub_vendor_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sub Vendor Id",
            "description": "The Sub Vendor ID. Optional Vendor ID that will be used to fulfill the Loot instead of granting the Item."
          },
          "quantity": {
            "type": "integer",
            "title": "Quantity",
            "description": "The quantity of the Item or Sub Vendor to fulfill. This will be multiplied by the quantity of fulfilled Loot and the parent Loot if quantity_type is relative.",
            "default": 1
          },
          "inventory_selector_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InventorySelector"
              }
            ],
            "description": "The Inventory Selector Type. Determine how the Inventory is selected and quantity is modified."
          },
          "inventory_operation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InventoryOperation"
              }
            ],
            "description": "The Inventory Operation. Determine how the Loot quantity is modified based on the context it is fulfilled in. This also determines the order Loot will be fulfilled in when sort_order is the same."
          },
          "active": {
            "type": "boolean",
            "title": "Active",
            "description": "Determines if the Loot is active. Inactive Loot will not be fulfilled.",
            "default": false
          },
          "sort_order": {
            "type": "integer",
            "minimum": 0,
            "title": "Sort Order",
            "description": "The sort order of the Loot. Lower sort order will be fulfilled first. Inventory Operation is used as a tie breaker when sort_order is the same.",
            "default": 0
          },
          "drop_weight": {
            "type": "integer",
            "minimum": 0,
            "title": "Drop Weight",
            "description": "The drop weight of the Loot. Higher drop weight will be more likely to be fulfilled.",
            "default": 0
          },
          "fill_in_new_order": {
            "type": "boolean",
            "title": "Fill In New Order",
            "description": "When dropped in a randomly sampled vendor, will this create a new order or fill inline?. The primary use case for this is when you want the same loot to be dropped multiple times in a randomly sampled vendor.",
            "default": false
          },
          "allow_partial_bundles": {
            "type": "boolean",
            "title": "Allow Partial Bundles",
            "description": "When dropped in a randomly sampled vendor, will the sub vendor allow dropping part of the the bundle?  False means it will only drop if the entire sub vendor can be given to the player",
            "default": true
          },
          "required_item_id": {
            "type": "string",
            "format": "uuid",
            "title": "Required Item Id",
            "description": "Item required to be owned/rented to drop this Loot in a randomly sampled vendor"
          },
          "required_item_count": {
            "type": "integer",
            "minimum": 0,
            "title": "Required Item Count",
            "description": "Amount of the required_item_id to be owned/rented to drop this Loot in a randomly sampled vendor",
            "default": 0
          },
          "stack_limit": {
            "type": "integer",
            "minimum": 0,
            "title": "Stack Limit",
            "description": "Amount of owned/rented of this Loot's item that will prevent this Loot from dropping in a randomly sampled vendor",
            "default": 0
          },
          "quantity_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/QuantityType"
              }
            ],
            "description": "Determines how the quantity is modified in the context it is fulfilled in.",
            "default": "relative"
          },
          "quantity_multi_inventory_item_id": {
            "type": "string",
            "format": "uuid",
            "title": "Quantity Multi Inventory Item Id",
            "description": "When fulfilling Loot if this is set the quantity will be multiplied by the quantity of this Item in the Player's Inventory."
          },
          "is_claimable_by_client": {
            "type": "boolean",
            "title": "Is Claimable By Client",
            "description": "Determines if the Loot can be claimed by the client. This is dangerous without the correct loot confiuration as a client could claim Loot multiple times.",
            "default": false
          },
          "time_frame_id": {
            "type": "string",
            "format": "uuid",
            "title": "Time Frame Id",
            "description": "The Time Frame ID. Optional Time Frame ID that will be used the expiration of Loot when it is fulfilled."
          },
          "use_inventory_bucket": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InventoryBucket"
              }
            ],
            "description": "Inventory Bucket to use for this Loot."
          },
          "xp_quantity_transform_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/XpQuantityTransform"
              }
            ],
            "description": "Allows treating quantity as additional levels to grant to the Player.",
            "default": "none"
          },
          "current_price_point_id": {
            "type": "string",
            "format": "uuid",
            "title": "Current Price Point Id",
            "description": "The current price point id. Optional Price Point ID that will be used to determine the price of the Loot when it is fulfilled."
          },
          "pre_sale_price_point_id": {
            "type": "string",
            "format": "uuid",
            "title": "Pre Sale Price Point Id",
            "description": "The pre sale price point id. Optional Price Point ID that will be used to show the previous price of the Loot."
          },
          "hard_quantity_maximum": {
            "type": "integer",
            "minimum": 0,
            "title": "Hard Quantity Maximum",
            "description": "Hard cap on quantity of an item this Loot can give. Disabled with 0",
            "default": 0
          },
          "legacy_loot_id": {
            "type": "integer",
            "minimum": 0,
            "title": "Legacy Loot Id",
            "description": "The legacy ID of the Loot.",
            "default": 0
          },
          "loot_id": {
            "type": "string",
            "format": "uuid",
            "title": "Loot Id",
            "description": "The Loot ID"
          }
        },
        "type": "object",
        "required": [
          "inventory_selector_type",
          "inventory_operation"
        ],
        "title": "UpdateLootWithVendorRequest",
        "description": "Update an existing Loot or create a new entity while updating a Vendor"
      },
      "UpdatePricePoint": {
        "properties": {
          "custom_data": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data associated with the resource"
          },
          "name": {
            "type": "string",
            "maxLength": 125,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the resource"
          },
          "description": {
            "type": "string",
            "maxLength": 250,
            "minLength": 1,
            "title": "Description",
            "description": "Description of the resource"
          },
          "strict_flag": {
            "type": "boolean",
            "title": "Strict Flag",
            "description": "Forces the quantity to be equal to a quantity on a Price Breakpoint.",
            "default": false
          },
          "cap_flag": {
            "type": "boolean",
            "title": "Cap Flag",
            "description": "Only allows quantity to be fulfilled up the highest quantity on the Price Breakpoints",
            "default": false
          },
          "current_breakpoints": {
            "items": {
              "$ref": "#/components/schemas/PriceBreakpoint"
            },
            "type": "array",
            "title": "Current Breakpoints",
            "description": "Current Price Breakpoints.",
            "default": []
          },
          "pre_sale_breakpoints": {
            "items": {
              "$ref": "#/components/schemas/PriceBreakpoint"
            },
            "type": "array",
            "title": "Pre Sale Breakpoints",
            "description": "Previous Price Breakpoints.",
            "default": []
          }
        },
        "type": "object",
        "title": "UpdatePricePoint",
        "description": "Price Point to update."
      },
      "UpdateVendorRequest": {
        "properties": {
          "custom_data": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data associated with the resource"
          },
          "name": {
            "type": "string",
            "maxLength": 125,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the resource"
          },
          "description": {
            "type": "string",
            "maxLength": 250,
            "minLength": 1,
            "title": "Description",
            "description": "Description of the resource"
          },
          "vendor_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VendorType"
              }
            ],
            "description": "Determines how the Vendor fulfills the loot.",
            "default": "recipe"
          },
          "loot": {
            "items": {
              "$ref": "#/components/schemas/UpdateLootWithVendorRequest"
            },
            "type": "array",
            "title": "Loot",
            "description": "The Loot the Vendor will fulfill."
          }
        },
        "type": "object",
        "title": "UpdateVendorRequest",
        "description": "If loot is provided, it will do a full replace of all loot entries on the Vendor."
      },
      "UpdateXpRequest": {
        "properties": {
          "custom_data": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data associated with the resource"
          },
          "name": {
            "type": "string",
            "maxLength": 125,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the resource"
          },
          "description": {
            "type": "string",
            "maxLength": 250,
            "minLength": 1,
            "title": "Description",
            "description": "Description of the resource"
          },
          "xp_thresholds": {
            "items": {
              "$ref": "#/components/schemas/XpLevelThresholdRequest"
            },
            "type": "array",
            "title": "Xp Thresholds",
            "description": "The XP Thresholds."
          }
        },
        "type": "object",
        "title": "UpdateXpRequest",
        "description": "A request to update XP.If thresholds are provided, it will do a full replace of all thresholds on the XP."
      },
      "UserPermissionsAndEntities": {
        "properties": {
          "permissions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PortalPermissions"
              }
            ],
            "title": "Permissions",
            "description": "Permissions for this user"
          },
          "menu_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MenuData"
              }
            ],
            "title": "Menu Data",
            "description": "Menu data for this user"
          }
        },
        "type": "object",
        "required": [
          "permissions",
          "menu_data"
        ],
        "title": "UserPermissionsAndEntities"
      },
      "UuidGenerationType": {
        "type": "string",
        "enum": [
          "uuid4",
          "sequential",
          "uuid5"
        ],
        "title": "UuidGenerationType",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "Use uuid4 to generate IDs",
          "Use sequential uuids (RallyHere internal implementation) to generate IDs",
          "Use uuid5 uuids to generate IDs"
        ],
        "x-enum-varnames": [
          "UUID4",
          "SEQUENTIAL",
          "UUID5"
        ]
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "Vendor": {
        "properties": {
          "custom_data": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data associated with the resource"
          },
          "name": {
            "type": "string",
            "maxLength": 125,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the resource"
          },
          "description": {
            "type": "string",
            "maxLength": 250,
            "minLength": 1,
            "title": "Description",
            "description": "Description of the resource"
          },
          "last_modified_account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Last Modified Account Id",
            "description": "Account ID of the user who last modified the resource"
          },
          "last_modified_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified Timestamp",
            "description": "Timestamp of when the resource was last modified"
          },
          "created_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Created Timestamp",
            "description": "Timestamp of when the resource was created"
          },
          "sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sandbox Id",
            "description": "ID of the Sandbox"
          },
          "vendor_id": {
            "type": "string",
            "format": "uuid",
            "title": "Vendor Id",
            "description": "The ID of the Vendor."
          },
          "legacy_vendor_id": {
            "type": "integer",
            "minimum": 0,
            "title": "Legacy Vendor Id",
            "description": "The legacy ID of the Vendor.",
            "default": 0
          },
          "vendor_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VendorType"
              }
            ],
            "description": "Determines how the Vendor fulfills the loot.",
            "default": "recipe"
          },
          "loot": {
            "items": {
              "$ref": "#/components/schemas/Loot"
            },
            "type": "array",
            "title": "Loot",
            "description": "The Loot the Vendor will fulfill.",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "vendor_id"
        ],
        "title": "Vendor",
        "description": "This mixin is meant to give a set of common properties to root config models"
      },
      "VendorCollection": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Vendor"
            },
            "type": "array",
            "title": "Data",
            "description": "The Vendors.",
            "default": []
          },
          "page_meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PageMeta"
              }
            ],
            "title": "Page Meta",
            "description": "The paging metadata."
          }
        },
        "type": "object",
        "required": [
          "page_meta"
        ],
        "title": "VendorCollection",
        "description": "A collection of Loot."
      },
      "VendorSortOptions": {
        "type": "string",
        "enum": [
          "vendor_id",
          "legacy_vendor_id",
          "name",
          "type",
          "last_modified_timestamp"
        ],
        "title": "VendorSortOptions",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "vendor_id",
          "legacy_vendor_id",
          "name",
          "type",
          "last_modified_timestamp"
        ]
      },
      "VendorType": {
        "type": "string",
        "enum": [
          "recipe",
          "randomly_sampled"
        ],
        "title": "VendorType",
        "description": "Determine how the Vendor fulfills the Loot.",
        "x-enum-descriptions": [
          "A Vendor that will always drop all of the Loot in the Loot table.",
          "A Vendor that will only fulfill one of the Loot in the Loot table based on the drop weights of the Loot."
        ],
        "x-enum-varnames": [
          "recipe",
          "randomly_sampled"
        ]
      },
      "VivoxConfig": {
        "properties": {
          "enable": {
            "type": "boolean",
            "title": "Enable",
            "description": "Whether or not to enable Vivox logins",
            "default": true
          },
          "server": {
            "type": "string",
            "title": "Server",
            "description": "Vivox server URL (e.g. game_name.vivox.com)"
          },
          "key_issuer": {
            "type": "string",
            "title": "Key Issuer",
            "description": "Vivox key issuer"
          },
          "key_time": {
            "type": "integer",
            "minimum": 60,
            "title": "Key Time",
            "description": "Number of seconds that vivox tokens last before expiration",
            "default": 60
          }
        },
        "type": "object",
        "required": [
          "server",
          "key_issuer"
        ],
        "title": "VivoxConfig"
      },
      "XboxConfig": {
        "properties": {
          "enable_login": {
            "type": "boolean",
            "title": "Enable Login",
            "description": "Whether or not to enable Xbox logins",
            "default": true
          },
          "web_client_id": {
            "type": "string",
            "title": "Web Client Id",
            "description": "Xbox Online Services client ID. Client tokens are validated against this ID"
          }
        },
        "type": "object",
        "required": [
          "web_client_id"
        ],
        "title": "XboxConfig"
      },
      "Xp": {
        "properties": {
          "custom_data": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data associated with the resource"
          },
          "name": {
            "type": "string",
            "maxLength": 125,
            "minLength": 1,
            "title": "Name",
            "description": "Name of the resource"
          },
          "description": {
            "type": "string",
            "maxLength": 250,
            "minLength": 1,
            "title": "Description",
            "description": "Description of the resource"
          },
          "xp_thresholds": {
            "items": {
              "$ref": "#/components/schemas/XpLevelThreshold"
            },
            "type": "array",
            "title": "Xp Thresholds",
            "description": "The XP Thresholds.",
            "default": []
          },
          "sandbox_id": {
            "type": "string",
            "format": "uuid",
            "title": "Sandbox Id",
            "description": "ID of the Sandbox"
          },
          "last_modified_account_id": {
            "type": "string",
            "format": "uuid",
            "title": "Last Modified Account Id",
            "description": "Account ID of the user who last modified the resource"
          },
          "last_modified_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Last Modified Timestamp",
            "description": "Timestamp of when the resource was last modified"
          },
          "created_timestamp": {
            "type": "string",
            "format": "date-time",
            "title": "Created Timestamp",
            "description": "Timestamp of when the resource was created"
          },
          "xp_id": {
            "type": "string",
            "format": "uuid",
            "title": "Xp Id",
            "description": "The ID of the XP."
          },
          "legacy_xp_id": {
            "type": "integer",
            "minimum": 0,
            "title": "Legacy Xp Id",
            "description": "The legacy ID of the XP."
          }
        },
        "type": "object",
        "required": [
          "xp_id",
          "legacy_xp_id"
        ],
        "title": "Xp",
        "description": "A collection of XP Thresholds. Thresholds are sorted by XP Threshold value.\n\nXP Levels can be skipped by setting a XP Threshold value to be the same as the previous XP Threshold value.\nExample:\n    Thresholds: 100, 200, 300 will correspond to XP Level 1 at 100 XP, XP Level 2 at 200 XP, and XP Level 3 at 300 XP.\n    To skip level 2, insert another XP Threshold with the value 200. This will cause level 2 and level 3 to be at 200 XP\n    effectively skipping level 2."
      },
      "XpCollection": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Xp"
            },
            "type": "array",
            "title": "Data",
            "description": "The Xp",
            "default": []
          },
          "page_meta": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PageMeta"
              }
            ],
            "title": "Page Meta",
            "description": "The paging metadata."
          }
        },
        "type": "object",
        "required": [
          "page_meta"
        ],
        "title": "XpCollection",
        "description": "A collection of XP."
      },
      "XpLevelThreshold": {
        "properties": {
          "custom_data": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data associated with the resource"
          },
          "xp_level_threshold": {
            "type": "integer",
            "minimum": 0,
            "title": "Xp Level Threshold",
            "description": "The XP Threshold value."
          },
          "xp_level_threshold_id": {
            "type": "string",
            "format": "uuid",
            "title": "Xp Level Threshold Id",
            "description": "The ID of the XP Threshold."
          }
        },
        "type": "object",
        "required": [
          "xp_level_threshold",
          "xp_level_threshold_id"
        ],
        "title": "XpLevelThreshold",
        "description": "An XP Level threshold. This is used to determine the next XP Level."
      },
      "XpLevelThresholdRequest": {
        "properties": {
          "custom_data": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object",
            "title": "Custom Data",
            "description": "Custom data associated with the resource"
          },
          "xp_level_threshold": {
            "type": "integer",
            "minimum": 0,
            "title": "Xp Level Threshold",
            "description": "The XP Threshold value."
          }
        },
        "type": "object",
        "required": [
          "xp_level_threshold"
        ],
        "title": "XpLevelThresholdRequest",
        "description": "Request to create or update an XP Level threshold."
      },
      "XpQuantityTransform": {
        "type": "string",
        "enum": [
          "none",
          "from_current_xp_to_target_additional_level_min_xp",
          "from_current_level_min_xp_to_target_additional_level_min_xp",
          "from_zero_to_target_exact_level_min_xp"
        ],
        "title": "XpQuantityTransform",
        "description": "Allows granting xp levels as Loot. If the player is already max level, the Loot will not be fulfilled. Requires the Item assigned to the Loot to have an XP Table ID.\n\nThe following examples assume the player is level 3 with 150 total xp. The quantity configured on the Loot being fulfilled is 1. The XP Table is configured like so:\n1: 20\n2: 50\n3: 100\n4: 200\n5: 400\n\nfrom_current_xp_to_target_additional_level_min_xp - The Loot will grant the player enough xp to reach min xp of the next level.\nExample 1: fulfill quantity 1\n    Player will be level 4 with 200 total xp.\nExample 2: fulfill quantity 2\n    Player will be level 5 with 400 total xp.\nExample 3: fulfill quantity 3\n    Player will be level 5 with 400 total xp.\n\nfrom_current_level_min_xp_to_target_additional_level_min_xp - The Loot will grant the player the amount of xp required to reach the min xp of the next level from the min xp of the current level.\nExample 1: fulfill quantity 1\n    Player will be level 4 with 250 total xp.\nExample 2: fulfill quantity 2\n    Player will be level 5 with 450 total xp.\nExample 3: fulfill quantity 3\n    Player will be level 5 with 450 total xp.\n\nfrom_zero_to_target_exact_level_min_xp - The Loot will grant the player the amount of xp required to reach the min xp of the target level from zero xp.\nExample 1: fulfill quantity 1\n    Player will be level 3 with 170 total xp.\nExample 2: fulfill quantity 2\n    Player will be level 4 with 200 total xp.\nExample 3: fulfill quantity 3\n    Player will be level 4 with 250 total xp.",
        "x-enum-descriptions": [
          "Quantity will be treated as XP and will not be transformed.",
          "Quantity will be treated as level to fulfill and will be transformed to the amount of XP required to reach the min xp of the fulfilled levels.",
          "Quantity will be treated as levels to fulfill and will be transformed to the amount of XP required to reach the min xp of the fulfilled levels from the min xp of the current level.",
          "Quantity will be treated as levels to fulfill and will be transformed to the amount of XP required to reach the min xp of the fulfilled levels from zero xp."
        ],
        "x-enum-varnames": [
          "none",
          "from_current_xp_to_target_additional_level_min_xp",
          "from_current_level_min_xp_to_target_additional_level_min_xp",
          "from_zero_to_target_exact_level_min_xp"
        ]
      },
      "XpSortOptions": {
        "type": "string",
        "enum": [
          "xp_id",
          "legacy_xp_id",
          "name",
          "last_modified_timestamp",
          "last_modified_account_id"
        ],
        "title": "XpSortOptions",
        "description": "An enumeration.",
        "x-enum-descriptions": [
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration.",
          "An enumeration."
        ],
        "x-enum-varnames": [
          "xp_id",
          "legacy_xp_id",
          "name",
          "last_modified_timestamp",
          "last_modified_account_id"
        ]
      },
      "XpThresholdCollection": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/XpLevelThreshold"
            },
            "type": "array",
            "title": "Data",
            "description": "The Xp Thresholds",
            "default": []
          }
        },
        "type": "object",
        "title": "XpThresholdCollection",
        "description": "A collection of XP."
      },
      "dependencies__sandbox_config__game_config__schemas__LegacyConfig": {
        "properties": {
          "allowed_game_versions": {
            "type": "string",
            "title": "Allowed Game Versions",
            "description": "version check used by connection managers for new client/instance connections",
            "default": "*.*.*.*"
          },
          "eac_enabled": {
            "type": "boolean",
            "title": "Eac Enabled",
            "description": "Whether or not to enforce EAC checks for new client connections",
            "default": false
          },
          "eac_check_ban_status_at_login": {
            "type": "boolean",
            "title": "Eac Check Ban Status At Login",
            "description": "Whether or not to check EAC ban status at login",
            "default": false
          },
          "eac_submit_player_reports": {
            "type": "boolean",
            "title": "Eac Submit Player Reports",
            "description": "Whether or not to submit player reports to EAC when handling normal player reports",
            "default": false
          },
          "experiments": {
            "items": {
              "$ref": "#/components/schemas/ExperimentalFeature"
            },
            "type": "array",
            "title": "Experiments",
            "description": "List of experiments and if they are enabled.  Use K/Vs instead",
            "default": []
          },
          "game_bits": {
            "items": {
              "$ref": "#/components/schemas/LegacyGameBit"
            },
            "type": "array",
            "description": "List of game bits to enable.  Use K/Vs instead",
            "default": [
              "USE_LOCAL_HOME_MAP",
              "CHAT_NOTIFY_CHANGES",
              "CLAN_CAN_CHANGE_SITEID",
              "GLOBAL_SERVER_DB",
              "USE_SPECTATOR",
              "GB_ALLOW_LIVE_SPECTATE"
            ]
          },
          "max_party_size": {
            "type": "integer",
            "minimum": 1,
            "title": "Max Party Size",
            "description": "Maximum number of players allowed in a party",
            "default": 10
          },
          "max_party_info_count": {
            "type": "integer",
            "minimum": 0,
            "title": "Max Party Info Count",
            "description": "Maximum number of party info entries allowed per party",
            "default": 0
          },
          "default_map_game_id": {
            "type": "integer",
            "minimum": 1,
            "title": "Default Map Game Id",
            "description": "Default map game ID to return to when leaving a match",
            "default": 1
          },
          "game_id": {
            "type": "integer",
            "title": "Game Id",
            "description": "Game ID to use for the game"
          },
          "inventory_custom_data_item_legacy_type_field": {
            "type": "string",
            "title": "Inventory Custom Data Item Legacy Type Field",
            "description": "Field name of the property in custom data that maps legacy item type to the fields in Inventory APIs.",
            "default": "item_legacy_type"
          },
          "inventory_custom_data_item_legacy_subtype_field": {
            "type": "string",
            "title": "Inventory Custom Data Item Legacy Subtype Field",
            "description": "Field name of the property in custom data that maps legacy item subtype to the fields in Inventory APIs",
            "default": "item_legacy_subtype"
          },
          "inventory_custom_data_vendor_legacy_type_field": {
            "type": "string",
            "title": "Inventory Custom Data Vendor Legacy Type Field",
            "description": "Field name of the property in custom data that maps legacy vendortype to the fields in Inventory APIs.",
            "default": "vendor_legacy_type"
          }
        },
        "type": "object",
        "title": "LegacyConfig",
        "description": "Options used by legacy systems.  These are not used by the new APIs."
      },
      "dependencies__sandbox_config__matchmaking__instance_request_schemas__LegacyConfig": {
        "properties": {},
        "additionalProperties": false,
        "type": "object",
        "title": "LegacyConfig",
        "description": "Old config used by Legacy systems. These values are ignored by the current APIs"
      },
      "dependencies__sandbox_config__matchmaking__maps_schemas__LegacyConfig": {
        "properties": {
          "map_id": {
            "type": "integer",
            "title": "Map Id",
            "description": "Old map id",
            "default": 0
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "LegacyConfig",
        "description": "Old config used by Legacy systems. These values are ignored by the current APIs"
      },
      "dependencies__sandbox_config__matchmaking__mm_templates_schemas__LegacyConfig": {
        "properties": {},
        "additionalProperties": false,
        "type": "object",
        "title": "LegacyConfig",
        "description": "Old config used by Legacy systems. These values are ignored by the current APIs"
      },
      "dependencies__sandbox_config__matchmaking__profiles_schemas__LegacyConfig": {
        "properties": {
          "queue_type_value_id": {
            "type": "integer",
            "title": "Queue Type Value Id",
            "description": "Queue type",
            "default": 10006
          },
          "task_force_number": {
            "type": "integer",
            "title": "Task Force Number",
            "description": "How many taskforces are in a match",
            "default": 0
          },
          "name_msg_id": {
            "type": "integer",
            "title": "Name Msg Id",
            "description": "The message id of this Profile",
            "default": 0
          },
          "desc_msg_id": {
            "type": "integer",
            "title": "Desc Msg Id",
            "description": "The description message id of this Profile",
            "default": 0
          },
          "give_xp_flag": {
            "type": "boolean",
            "title": "Give Xp Flag",
            "description": "Whether matches should award xp",
            "default": false
          },
          "giveachievement": {
            "type": "boolean",
            "title": "Giveachievement",
            "description": "Whether matches should award achievements",
            "default": false
          },
          "block_reward_after_level": {
            "type": "boolean",
            "title": "Block Reward After Level",
            "description": "Whether or not rewards have a level limit",
            "default": false
          },
          "servertickrate": {
            "type": "integer",
            "title": "Servertickrate",
            "description": "The server tick rate",
            "default": 30
          },
          "serverfubartickrate": {
            "type": "integer",
            "title": "Serverfubartickrate",
            "description": "Tick rate threshold before the instance is considered fubar",
            "default": 20
          },
          "playerconnectwait": {
            "type": "integer",
            "title": "Playerconnectwait",
            "description": "How long to wait to allow players to connect",
            "default": 90
          },
          "physicsthreshold": {
            "type": "number",
            "title": "Physicsthreshold",
            "description": "The threshold of acceptable physics",
            "default": 0.055
          },
          "PerformanceGroup": {
            "type": "integer",
            "title": "Performancegroup",
            "description": "Which performance group instances for this match belong to",
            "default": 0
          },
          "game_mode_value_id": {
            "type": "integer",
            "title": "Game Mode Value Id",
            "description": "The game mode ValidValue",
            "default": 0
          },
          "SurveyFreq": {
            "type": "integer",
            "title": "Surveyfreq",
            "description": "How frequently a match should be surveyed",
            "default": 0
          },
          "NoTaskforceSelection": {
            "type": "boolean",
            "title": "Notaskforceselection",
            "description": "Whether or not players should be allowed to choose their own taskforce",
            "default": false
          },
          "RecordClientStats": {
            "type": "boolean",
            "title": "Recordclientstats",
            "description": "Whether or not client stats should be recorded",
            "default": false
          },
          "ServerDBStatWriteSeconds": {
            "type": "integer",
            "title": "Serverdbstatwriteseconds",
            "description": "How frequently stats should be written to the DB",
            "default": 10
          },
          "min_players_per_team": {
            "type": "integer",
            "title": "Min Players Per Team",
            "description": "Minimum number of players required on each team",
            "default": 4
          },
          "max_players_per_team": {
            "type": "integer",
            "title": "Max Players Per Team",
            "description": "Maximum number of players allowed on each team",
            "default": 4
          },
          "allowlivespectate": {
            "type": "boolean",
            "title": "Allowlivespectate",
            "description": "Whether or not these matches can be spectated without a delay",
            "default": false
          },
          "match_queue_id": {
            "type": "integer",
            "title": "Match Queue Id",
            "description": "Queue id",
            "default": 0
          },
          "deserter_flag": {
            "type": "boolean",
            "title": "Deserter Flag",
            "description": "Whether or not leaving these matches should give deserter",
            "default": false
          },
          "ranking_type_id": {
            "type": "integer",
            "title": "Ranking Type Id",
            "description": "Rank id",
            "default": 0
          },
          "game_type_value_id": {
            "type": "integer",
            "title": "Game Type Value Id",
            "description": "Game type ValidValue",
            "default": 0
          },
          "PeerToPeer": {
            "type": "boolean",
            "title": "Peertopeer",
            "description": "Whether or not game should be hosted as P2P",
            "default": false
          }
        },
        "type": "object",
        "title": "LegacyConfig",
        "description": "Old config used by Legacy systems. These values are ignored by the current APIs"
      },
      "dependencies__sandbox_config__matchmaking__queues_schemas__LegacyConfig": {
        "properties": {
          "queue_id": {
            "type": "integer",
            "title": "Queue Id",
            "description": "Old queue id",
            "default": 0
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "LegacyConfig",
        "description": "Old config used by Legacy systems. These values are ignored by the current APIs"
      },
      "dependencies__sandbox_config__matchmaking__ranks_schemas__LegacyConfig": {
        "properties": {
          "rank_id": {
            "type": "integer",
            "title": "Rank Id",
            "description": "Old rank type id",
            "default": 0
          }
        },
        "additionalProperties": false,
        "type": "object",
        "title": "LegacyConfig",
        "description": "Old config used by Legacy systems. These values are ignored by the current APIs"
      }
    },
    "securitySchemes": {
      "HTTPBearer": {
        "type": "http",
        "scheme": "bearer"
      },
      "HTTPBasic": {
        "type": "http",
        "scheme": "basic"
      }
    }
  }
}